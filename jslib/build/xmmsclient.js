(function(global) {
	var xmmsclient = global.xmmsclient = {};
	xmmsclient.collections = {};
	// The Module object: Our interface to the outside world. We import
	// and export values on it, and do the work to get that through
	// closure compiler if necessary. There are various ways Module can be used:
	// 1. Not defined. We create it here
	// 2. A function parameter, function(Module) { ..generated code.. }
	// 3. pre-run appended it, var Module = {}; ..generated code..
	// 4. External script tag defines var Module.
	// We need to do an eval in order to handle the closure compiler
	// case, where this code here is minified but Module was defined
	// elsewhere (e.g. case 4 above). We also need to check if Module
	// already exists (e.g. case 3 above).
	// Note that if you want to run closure, and also to use Module
	// after the generated code, you will need to define   var Module = {};
	// before the code. Then that object will be used in the code, and you
	// can continue to use Module afterwards as well.
	var Module;
	if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

	// Sometimes an existing Module object exists with properties
	// meant to overwrite the default module functionality. Here
	// we collect those properties and reapply _after_ we configure
	// the current environment's defaults to avoid having to be so
	// defensive during initialization.
	var moduleOverrides = {};
	for (var key in Module) {
	  if (Module.hasOwnProperty(key)) {
	    moduleOverrides[key] = Module[key];
	  }
	}

	// The environment setup code below is customized to use Module.
	// *** Environment setup code ***
	var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
	var ENVIRONMENT_IS_WEB = typeof window === 'object';
	var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
	var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

	if (ENVIRONMENT_IS_NODE) {
	  // Expose functionality in the same simple way that the shells work
	  // Note that we pollute the global namespace here, otherwise we break in node
	  if (!Module['print']) Module['print'] = function print(x) {
	    process['stdout'].write(x + '\n');
	  };
	  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
	    process['stderr'].write(x + '\n');
	  };

	  var nodeFS = require('fs');
	  var nodePath = require('path');

	  Module['read'] = function read(filename, binary) {
	    filename = nodePath['normalize'](filename);
	    var ret = nodeFS['readFileSync'](filename);
	    // The path is absolute if the normalized version is the same as the resolved.
	    if (!ret && filename != nodePath['resolve'](filename)) {
	      filename = path.join(__dirname, '..', 'src', filename);
	      ret = nodeFS['readFileSync'](filename);
	    }
	    if (ret && !binary) ret = ret.toString();
	    return ret;
	  };

	  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

	  Module['load'] = function load(f) {
	    globalEval(read(f));
	  };

	  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
	  Module['arguments'] = process['argv'].slice(2);

	  if (typeof module !== 'undefined') {
	    module['exports'] = Module;
	  }

	  process['on']('uncaughtException', function(ex) {
	    // suppress ExitStatus exceptions from showing an error
	    if (!(ex instanceof ExitStatus)) {
	      throw ex;
	    }
	  });
	}
	else if (ENVIRONMENT_IS_SHELL) {
	  if (!Module['print']) Module['print'] = print;
	  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

	  if (typeof read != 'undefined') {
	    Module['read'] = read;
	  } else {
	    Module['read'] = function read() { throw 'no read() available (jsc?)' };
	  }

	  Module['readBinary'] = function readBinary(f) {
	    if (typeof readbuffer === 'function') {
	      return new Uint8Array(readbuffer(f));
	    }
	    var data = read(f, 'binary');
	    assert(typeof data === 'object');
	    return data;
	  };

	  if (typeof scriptArgs != 'undefined') {
	    Module['arguments'] = scriptArgs;
	  } else if (typeof arguments != 'undefined') {
	    Module['arguments'] = arguments;
	  }

	  this['Module'] = Module;

	}
	else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
	  Module['read'] = function read(url) {
	    var xhr = new XMLHttpRequest();
	    xhr.open('GET', url, false);
	    xhr.send(null);
	    return xhr.responseText;
	  };

	  if (typeof arguments != 'undefined') {
	    Module['arguments'] = arguments;
	  }

	  if (typeof console !== 'undefined') {
	    if (!Module['print']) Module['print'] = function print(x) {
	      console.log(x);
	    };
	    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
	      console.log(x);
	    };
	  } else {
	    // Probably a worker, and without console.log. We can do very little here...
	    var TRY_USE_DUMP = false;
	    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
	      dump(x);
	    }) : (function(x) {
	      // self.postMessage(x); // enable this if you want stdout to be sent as messages
	    }));
	  }

	  if (ENVIRONMENT_IS_WEB) {
	    window['Module'] = Module;
	  } else {
	    Module['load'] = importScripts;
	  }
	}
	else {
	  // Unreachable because SHELL is dependant on the others
	  throw 'Unknown runtime environment. Where are we?';
	}

	function globalEval(x) {
	  eval.call(null, x);
	}
	if (!Module['load'] && Module['read']) {
	  Module['load'] = function load(f) {
	    globalEval(Module['read'](f));
	  };
	}
	if (!Module['print']) {
	  Module['print'] = function(){};
	}
	if (!Module['printErr']) {
	  Module['printErr'] = Module['print'];
	}
	if (!Module['arguments']) {
	  Module['arguments'] = [];
	}
	if (!Module['thisProgram']) {
	  Module['thisProgram'] = './this.program';
	}

	// *** Environment setup code ***

	// Closure helpers
	Module.print = Module['print'];
	Module.printErr = Module['printErr'];

	// Callbacks
	Module['preRun'] = [];
	Module['postRun'] = [];

	// Merge back in the overrides
	for (var key in moduleOverrides) {
	  if (moduleOverrides.hasOwnProperty(key)) {
	    Module[key] = moduleOverrides[key];
	  }
	}



	// === Preamble library stuff ===

	// Documentation for the public APIs defined in this file must be updated in:
	//    site/source/docs/api_reference/preamble.js.rst
	// A prebuilt local version of the documentation is available at:
	//    site/build/text/docs/api_reference/preamble.js.txt
	// You can also build docs locally as HTML or other formats in site/
	// An online HTML version (which may be of a different version of Emscripten)
	//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

	//========================================
	// Runtime code shared with compiler
	//========================================

	var Runtime = {
	  setTempRet0: function (value) {
	    tempRet0 = value;
	  },
	  getTempRet0: function () {
	    return tempRet0;
	  },
	  stackSave: function () {
	    return STACKTOP;
	  },
	  stackRestore: function (stackTop) {
	    STACKTOP = stackTop;
	  },
	  getNativeTypeSize: function (type) {
	    switch (type) {
	      case 'i1': case 'i8': return 1;
	      case 'i16': return 2;
	      case 'i32': return 4;
	      case 'i64': return 8;
	      case 'float': return 4;
	      case 'double': return 8;
	      default: {
	        if (type[type.length-1] === '*') {
	          return Runtime.QUANTUM_SIZE; // A pointer
	        } else if (type[0] === 'i') {
	          var bits = parseInt(type.substr(1));
	          assert(bits % 8 === 0);
	          return bits/8;
	        } else {
	          return 0;
	        }
	      }
	    }
	  },
	  getNativeFieldSize: function (type) {
	    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
	  },
	  STACK_ALIGN: 16,
	  getAlignSize: function (type, size, vararg) {
	    // we align i64s and doubles on 64-bit boundaries, unlike x86
	    if (!vararg && (type == 'i64' || type == 'double')) return 8;
	    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
	    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
	  },
	  dynCall: function (sig, ptr, args) {
	    if (args && args.length) {
	      assert(args.length == sig.length-1);
	      if (!args.splice) args = Array.prototype.slice.call(args);
	      args.splice(0, 0, ptr);
	      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
	      return Module['dynCall_' + sig].apply(null, args);
	    } else {
	      assert(sig.length == 1);
	      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
	      return Module['dynCall_' + sig].call(null, ptr);
	    }
	  },
	  functionPointers: [],
	  addFunction: function (func) {
	    for (var i = 0; i < Runtime.functionPointers.length; i++) {
	      if (!Runtime.functionPointers[i]) {
	        Runtime.functionPointers[i] = func;
	        return 2*(1 + i);
	      }
	    }
	    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
	  },
	  removeFunction: function (index) {
	    Runtime.functionPointers[(index-2)/2] = null;
	  },
	  getAsmConst: function (code, numArgs) {
	    // code is a constant string on the heap, so we can cache these
	    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
	    var func = Runtime.asmConstCache[code];
	    if (func) return func;
	    var args = [];
	    for (var i = 0; i < numArgs; i++) {
	      args.push(String.fromCharCode(36) + i); // $0, $1 etc
	    }
	    var source = Pointer_stringify(code);
	    if (source[0] === '"') {
	      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
	      if (source.indexOf('"', 1) === source.length-1) {
	        source = source.substr(1, source.length-2);
	      } else {
	        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
	        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
	      }
	    }
	    try {
	      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
	      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
	    } catch(e) {
	      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
	      throw e;
	    }
	    return Runtime.asmConstCache[code] = evalled;
	  },
	  warnOnce: function (text) {
	    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
	    if (!Runtime.warnOnce.shown[text]) {
	      Runtime.warnOnce.shown[text] = 1;
	      Module.printErr(text);
	    }
	  },
	  funcWrappers: {},
	  getFuncWrapper: function (func, sig) {
	    assert(sig);
	    if (!Runtime.funcWrappers[sig]) {
	      Runtime.funcWrappers[sig] = {};
	    }
	    var sigCache = Runtime.funcWrappers[sig];
	    if (!sigCache[func]) {
	      sigCache[func] = function dynCall_wrapper() {
	        return Runtime.dynCall(sig, func, arguments);
	      };
	    }
	    return sigCache[func];
	  },
	  UTF8Processor: function () {
	    var buffer = [];
	    var needed = 0;
	    this.processCChar = function (code) {
	      code = code & 0xFF;

	      if (buffer.length == 0) {
	        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
	          return String.fromCharCode(code);
	        }
	        buffer.push(code);
	        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
	          needed = 1;
	        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
	          needed = 2;
	        } else {                            // 11110xxx
	          needed = 3;
	        }
	        return '';
	      }

	      if (needed) {
	        buffer.push(code);
	        needed--;
	        if (needed > 0) return '';
	      }

	      var c1 = buffer[0];
	      var c2 = buffer[1];
	      var c3 = buffer[2];
	      var c4 = buffer[3];
	      var ret;
	      if (buffer.length == 2) {
	        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
	      } else if (buffer.length == 3) {
	        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
	      } else {
	        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
	                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
	        ret = String.fromCharCode(
	          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
	          (codePoint - 0x10000) % 0x400 + 0xDC00);
	      }
	      buffer.length = 0;
	      return ret;
	    }
	    this.processJSString = function processJSString(string) {
	      /* TODO: use TextEncoder when present,
	        var encoder = new TextEncoder();
	        encoder['encoding'] = "utf-8";
	        var utf8Array = encoder['encode'](aMsg.data);
	      */
	      string = unescape(encodeURIComponent(string));
	      var ret = [];
	      for (var i = 0; i < string.length; i++) {
	        ret.push(string.charCodeAt(i));
	      }
	      return ret;
	    }
	  },
	  getCompilerSetting: function (name) {
	    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
	  },
	  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
	  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
	  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
	  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
	  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
	  GLOBAL_BASE: 8,
	  QUANTUM_SIZE: 4,
	  __dummy__: 0
	}


	Module['Runtime'] = Runtime;









	//========================================
	// Runtime essentials
	//========================================

	var __THREW__ = 0; // Used in checking for thrown exceptions.

	var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
	var EXITSTATUS = 0;

	var undef = 0;
	// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
	// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
	var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
	var tempI64, tempI64b;
	var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

	function assert(condition, text) {
	  if (!condition) {
	    abort('Assertion failed: ' + text);
	  }
	}

	var globalScope = this;

	// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
	function getCFunc(ident) {
	  var func = Module['_' + ident]; // closure exported function
	  if (!func) {
	    try {
	      func = eval('_' + ident); // explicit lookup
	    } catch(e) {}
	  }
	  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
	  return func;
	}

	var cwrap, ccall;
	(function(){
	  var stack = 0;
	  var JSfuncs = {
	    'stackSave' : function() {
	      stack = Runtime.stackSave();
	    },
	    'stackRestore' : function() {
	      Runtime.stackRestore(stack);
	    },
	    // type conversion from js to c
	    'arrayToC' : function(arr) {
	      var ret = Runtime.stackAlloc(arr.length);
	      writeArrayToMemory(arr, ret);
	      return ret;
	    },
	    'stringToC' : function(str) {
	      var ret = 0;
	      if (str !== null && str !== undefined && str !== 0) { // null string
	        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
	        ret = Runtime.stackAlloc((str.length << 2) + 1);
	        writeStringToMemory(str, ret);
	      }
	      return ret;
	    }
	  };
	  // For fast lookup of conversion functions
	  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

	  // C calling interface.
	  ccall = function ccallFunc(ident, returnType, argTypes, args) {
	    var func = getCFunc(ident);
	    var cArgs = [];
	    assert(returnType !== 'array', 'Return type should not be "array".');
	    if (args) {
	      for (var i = 0; i < args.length; i++) {
	        var converter = toC[argTypes[i]];
	        if (converter) {
	          if (stack === 0) stack = Runtime.stackSave();
	          cArgs[i] = converter(args[i]);
	        } else {
	          cArgs[i] = args[i];
	        }
	      }
	    }
	    var ret = func.apply(null, cArgs);
	    if (returnType === 'string') ret = Pointer_stringify(ret);
	    if (stack !== 0) JSfuncs['stackRestore']();
	    return ret;
	  }

	  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
	  function parseJSFunc(jsfunc) {
	    // Match the body and the return value of a javascript function source
	    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
	    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
	  }
	  var JSsource = {};
	  for (var fun in JSfuncs) {
	    if (JSfuncs.hasOwnProperty(fun)) {
	      // Elements of toCsource are arrays of three items:
	      // the code, and the return value
	      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
	    }
	  }


	  cwrap = function cwrap(ident, returnType, argTypes) {
	    argTypes = argTypes || [];
	    var cfunc = getCFunc(ident);
	    // When the function takes numbers and returns a number, we can just return
	    // the original function
	    var numericArgs = argTypes.every(function(type){ return type === 'number'});
	    var numericRet = (returnType !== 'string');
	    if ( numericRet && numericArgs) {
	      return cfunc;
	    }
	    // Creation of the arguments list (["$1","$2",...,"$nargs"])
	    var argNames = argTypes.map(function(x,i){return '$'+i});
	    var funcstr = "(function(" + argNames.join(',') + ") {";
	    var nargs = argTypes.length;
	    if (!numericArgs) {
	      // Generate the code needed to convert the arguments from javascript
	      // values to pointers
	      funcstr += JSsource['stackSave'].body + ';';
	      for (var i = 0; i < nargs; i++) {
	        var arg = argNames[i], type = argTypes[i];
	        if (type === 'number') continue;
	        var convertCode = JSsource[type + 'ToC']; // [code, return]
	        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
	        funcstr += convertCode.body + ';';
	        funcstr += arg + '=' + convertCode.returnValue + ';';
	      }
	    }

	    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
	    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
	    // Call the function
	    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
	    if (!numericRet) { // Return type can only by 'string' or 'number'
	      // Convert the result to a string
	      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
	      funcstr += 'ret = ' + strgfy + '(ret);';
	    }
	    if (!numericArgs) {
	      // If we had a stack, restore it
	      funcstr += JSsource['stackRestore'].body + ';';
	    }
	    funcstr += 'return ret})';
	    return eval(funcstr);
	  };
	})();
	Module["cwrap"] = cwrap;
	Module["ccall"] = ccall;


	function setValue(ptr, value, type, noSafe) {
	  type = type || 'i8';
	  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
	    switch(type) {
	      case 'i1': HEAP8[((ptr)>>0)]=value; break;
	      case 'i8': HEAP8[((ptr)>>0)]=value; break;
	      case 'i16': HEAP16[((ptr)>>1)]=value; break;
	      case 'i32': HEAP32[((ptr)>>2)]=value; break;
	      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
	      case 'float': HEAPF32[((ptr)>>2)]=value; break;
	      case 'double': HEAPF64[((ptr)>>3)]=value; break;
	      default: abort('invalid type for setValue: ' + type);
	    }
	}
	Module['setValue'] = setValue;


	function getValue(ptr, type, noSafe) {
	  type = type || 'i8';
	  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
	    switch(type) {
	      case 'i1': return HEAP8[((ptr)>>0)];
	      case 'i8': return HEAP8[((ptr)>>0)];
	      case 'i16': return HEAP16[((ptr)>>1)];
	      case 'i32': return HEAP32[((ptr)>>2)];
	      case 'i64': return HEAP32[((ptr)>>2)];
	      case 'float': return HEAPF32[((ptr)>>2)];
	      case 'double': return HEAPF64[((ptr)>>3)];
	      default: abort('invalid type for setValue: ' + type);
	    }
	  return null;
	}
	Module['getValue'] = getValue;

	var ALLOC_NORMAL = 0; // Tries to use _malloc()
	var ALLOC_STACK = 1; // Lives for the duration of the current function call
	var ALLOC_STATIC = 2; // Cannot be freed
	var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
	var ALLOC_NONE = 4; // Do not allocate
	Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
	Module['ALLOC_STACK'] = ALLOC_STACK;
	Module['ALLOC_STATIC'] = ALLOC_STATIC;
	Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
	Module['ALLOC_NONE'] = ALLOC_NONE;

	// allocate(): This is for internal use. You can use it yourself as well, but the interface
	//             is a little tricky (see docs right below). The reason is that it is optimized
	//             for multiple syntaxes to save space in generated code. So you should
	//             normally not use allocate(), and instead allocate memory using _malloc(),
	//             initialize it with setValue(), and so forth.
	// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
	//        in *bytes* (note that this is sometimes confusing: the next parameter does not
	//        affect this!)
	// @types: Either an array of types, one for each byte (or 0 if no type at that position),
	//         or a single type which is used for the entire block. This only matters if there
	//         is initial data - if @slab is a number, then this does not matter at all and is
	//         ignored.
	// @allocator: How to allocate memory, see ALLOC_*
	function allocate(slab, types, allocator, ptr) {
	  var zeroinit, size;
	  if (typeof slab === 'number') {
	    zeroinit = true;
	    size = slab;
	  } else {
	    zeroinit = false;
	    size = slab.length;
	  }

	  var singleType = typeof types === 'string' ? types : null;

	  var ret;
	  if (allocator == ALLOC_NONE) {
	    ret = ptr;
	  } else {
	    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
	  }

	  if (zeroinit) {
	    var ptr = ret, stop;
	    assert((ret & 3) == 0);
	    stop = ret + (size & ~3);
	    for (; ptr < stop; ptr += 4) {
	      HEAP32[((ptr)>>2)]=0;
	    }
	    stop = ret + size;
	    while (ptr < stop) {
	      HEAP8[((ptr++)>>0)]=0;
	    }
	    return ret;
	  }

	  if (singleType === 'i8') {
	    if (slab.subarray || slab.slice) {
	      HEAPU8.set(slab, ret);
	    } else {
	      HEAPU8.set(new Uint8Array(slab), ret);
	    }
	    return ret;
	  }

	  var i = 0, type, typeSize, previousType;
	  while (i < size) {
	    var curr = slab[i];

	    if (typeof curr === 'function') {
	      curr = Runtime.getFunctionIndex(curr);
	    }

	    type = singleType || types[i];
	    if (type === 0) {
	      i++;
	      continue;
	    }
	    assert(type, 'Must know what type to store in allocate!');

	    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

	    setValue(ret+i, curr, type);

	    // no need to look up size unless type changes, so cache it
	    if (previousType !== type) {
	      typeSize = Runtime.getNativeTypeSize(type);
	      previousType = type;
	    }
	    i += typeSize;
	  }

	  return ret;
	}
	Module['allocate'] = allocate;

	function Pointer_stringify(ptr, /* optional */ length) {
	  // TODO: use TextDecoder
	  // Find the length, and check for UTF while doing so
	  var hasUtf = false;
	  var t;
	  var i = 0;
	  while (1) {
	    assert(ptr + i < TOTAL_MEMORY);
	    t = HEAPU8[(((ptr)+(i))>>0)];
	    if (t >= 128) hasUtf = true;
	    else if (t == 0 && !length) break;
	    i++;
	    if (length && i == length) break;
	  }
	  if (!length) length = i;

	  var ret = '';

	  if (!hasUtf) {
	    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
	    var curr;
	    while (length > 0) {
	      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
	      ret = ret ? ret + curr : curr;
	      ptr += MAX_CHUNK;
	      length -= MAX_CHUNK;
	    }
	    return ret;
	  }

	  var utf8 = new Runtime.UTF8Processor();
	  for (i = 0; i < length; i++) {
	    assert(ptr + i < TOTAL_MEMORY);
	    t = HEAPU8[(((ptr)+(i))>>0)];
	    ret += utf8.processCChar(t);
	  }
	  return ret;
	}
	Module['Pointer_stringify'] = Pointer_stringify;

	function UTF16ToString(ptr) {
	  var i = 0;

	  var str = '';
	  while (1) {
	    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
	    if (codeUnit == 0)
	      return str;
	    ++i;
	    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
	    str += String.fromCharCode(codeUnit);
	  }
	}
	Module['UTF16ToString'] = UTF16ToString;


	function stringToUTF16(str, outPtr) {
	  for(var i = 0; i < str.length; ++i) {
	    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
	    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
	    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
	  }
	  // Null-terminate the pointer to the HEAP.
	  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
	}
	Module['stringToUTF16'] = stringToUTF16;


	function UTF32ToString(ptr) {
	  var i = 0;

	  var str = '';
	  while (1) {
	    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
	    if (utf32 == 0)
	      return str;
	    ++i;
	    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
	    if (utf32 >= 0x10000) {
	      var ch = utf32 - 0x10000;
	      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
	    } else {
	      str += String.fromCharCode(utf32);
	    }
	  }
	}
	Module['UTF32ToString'] = UTF32ToString;


	function stringToUTF32(str, outPtr) {
	  var iChar = 0;
	  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
	    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
	    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
	    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
	      var trailSurrogate = str.charCodeAt(++iCodeUnit);
	      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
	    }
	    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
	    ++iChar;
	  }
	  // Null-terminate the pointer to the HEAP.
	  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
	}
	Module['stringToUTF32'] = stringToUTF32;

	function demangle(func) {
	  var hasLibcxxabi = !!Module['___cxa_demangle'];
	  if (hasLibcxxabi) {
	    try {
	      var buf = _malloc(func.length);
	      writeStringToMemory(func.substr(1), buf);
	      var status = _malloc(4);
	      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
	      if (getValue(status, 'i32') === 0 && ret) {
	        return Pointer_stringify(ret);
	      }
	      // otherwise, libcxxabi failed, we can try ours which may return a partial result
	    } catch(e) {
	      // failure when using libcxxabi, we can try ours which may return a partial result
	    } finally {
	      if (buf) _free(buf);
	      if (status) _free(status);
	      if (ret) _free(ret);
	    }
	  }
	  var i = 3;
	  // params, etc.
	  var basicTypes = {
	    'v': 'void',
	    'b': 'bool',
	    'c': 'char',
	    's': 'short',
	    'i': 'int',
	    'l': 'long',
	    'f': 'float',
	    'd': 'double',
	    'w': 'wchar_t',
	    'a': 'signed char',
	    'h': 'unsigned char',
	    't': 'unsigned short',
	    'j': 'unsigned int',
	    'm': 'unsigned long',
	    'x': 'long long',
	    'y': 'unsigned long long',
	    'z': '...'
	  };
	  var subs = [];
	  var first = true;
	  function dump(x) {
	    //return;
	    if (x) Module.print(x);
	    Module.print(func);
	    var pre = '';
	    for (var a = 0; a < i; a++) pre += ' ';
	    Module.print (pre + '^');
	  }
	  function parseNested() {
	    i++;
	    if (func[i] === 'K') i++; // ignore const
	    var parts = [];
	    while (func[i] !== 'E') {
	      if (func[i] === 'S') { // substitution
	        i++;
	        var next = func.indexOf('_', i);
	        var num = func.substring(i, next) || 0;
	        parts.push(subs[num] || '?');
	        i = next+1;
	        continue;
	      }
	      if (func[i] === 'C') { // constructor
	        parts.push(parts[parts.length-1]);
	        i += 2;
	        continue;
	      }
	      var size = parseInt(func.substr(i));
	      var pre = size.toString().length;
	      if (!size || !pre) { i--; break; } // counter i++ below us
	      var curr = func.substr(i + pre, size);
	      parts.push(curr);
	      subs.push(curr);
	      i += pre + size;
	    }
	    i++; // skip E
	    return parts;
	  }
	  function parse(rawList, limit, allowVoid) { // main parser
	    limit = limit || Infinity;
	    var ret = '', list = [];
	    function flushList() {
	      return '(' + list.join(', ') + ')';
	    }
	    var name;
	    if (func[i] === 'N') {
	      // namespaced N-E
	      name = parseNested().join('::');
	      limit--;
	      if (limit === 0) return rawList ? [name] : name;
	    } else {
	      // not namespaced
	      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
	      var size = parseInt(func.substr(i));
	      if (size) {
	        var pre = size.toString().length;
	        name = func.substr(i + pre, size);
	        i += pre + size;
	      }
	    }
	    first = false;
	    if (func[i] === 'I') {
	      i++;
	      var iList = parse(true);
	      var iRet = parse(true, 1, true);
	      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
	    } else {
	      ret = name;
	    }
	    paramLoop: while (i < func.length && limit-- > 0) {
	      //dump('paramLoop');
	      var c = func[i++];
	      if (c in basicTypes) {
	        list.push(basicTypes[c]);
	      } else {
	        switch (c) {
	          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
	          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
	          case 'L': { // literal
	            i++; // skip basic type
	            var end = func.indexOf('E', i);
	            var size = end - i;
	            list.push(func.substr(i, size));
	            i += size + 2; // size + 'EE'
	            break;
	          }
	          case 'A': { // array
	            var size = parseInt(func.substr(i));
	            i += size.toString().length;
	            if (func[i] !== '_') throw '?';
	            i++; // skip _
	            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
	            break;
	          }
	          case 'E': break paramLoop;
	          default: ret += '?' + c; break paramLoop;
	        }
	      }
	    }
	    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
	    if (rawList) {
	      if (ret) {
	        list.push(ret + '?');
	      }
	      return list;
	    } else {
	      return ret + flushList();
	    }
	  }
	  var final = func;
	  try {
	    // Special-case the entry point, since its name differs from other name mangling.
	    if (func == 'Object._main' || func == '_main') {
	      return 'main()';
	    }
	    if (typeof func === 'number') func = Pointer_stringify(func);
	    if (func[0] !== '_') return func;
	    if (func[1] !== '_') return func; // C function
	    if (func[2] !== 'Z') return func;
	    switch (func[3]) {
	      case 'n': return 'operator new()';
	      case 'd': return 'operator delete()';
	    }
	    final = parse();
	  } catch(e) {
	    final += '?';
	  }
	  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
	    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
	  }
	  return final;
	}

	function demangleAll(text) {
	  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
	}

	function jsStackTrace() {
	  var err = new Error();
	  if (!err.stack) {
	    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
	    // so try that as a special-case.
	    try {
	      throw new Error(0);
	    } catch(e) {
	      err = e;
	    }
	    if (!err.stack) {
	      return '(no stack trace available)';
	    }
	  }
	  return err.stack.toString();
	}

	function stackTrace() {
	  return demangleAll(jsStackTrace());
	}
	Module['stackTrace'] = stackTrace;

	// Memory management

	var PAGE_SIZE = 4096;
	function alignMemoryPage(x) {
	  return (x+4095)&-4096;
	}

	var HEAP;
	var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

	var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
	var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
	var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

	function enlargeMemory() {
	  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
	}


	var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
	var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
	var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

	var totalMemory = 64*1024;
	while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
	  if (totalMemory < 16*1024*1024) {
	    totalMemory *= 2;
	  } else {
	    totalMemory += 16*1024*1024
	  }
	}
	if (totalMemory !== TOTAL_MEMORY) {
	  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
	  TOTAL_MEMORY = totalMemory;
	}

	// Initialize the runtime's memory
	// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
	assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
	       'JS engine does not provide full typed array support');

	var buffer = new ArrayBuffer(TOTAL_MEMORY);
	HEAP8 = new Int8Array(buffer);
	HEAP16 = new Int16Array(buffer);
	HEAP32 = new Int32Array(buffer);
	HEAPU8 = new Uint8Array(buffer);
	HEAPU16 = new Uint16Array(buffer);
	HEAPU32 = new Uint32Array(buffer);
	HEAPF32 = new Float32Array(buffer);
	HEAPF64 = new Float64Array(buffer);

	// Endianness check (note: assumes compiler arch was little-endian)
	HEAP32[0] = 255;
	assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

	Module['HEAP'] = HEAP;
	Module['HEAP8'] = HEAP8;
	Module['HEAP16'] = HEAP16;
	Module['HEAP32'] = HEAP32;
	Module['HEAPU8'] = HEAPU8;
	Module['HEAPU16'] = HEAPU16;
	Module['HEAPU32'] = HEAPU32;
	Module['HEAPF32'] = HEAPF32;
	Module['HEAPF64'] = HEAPF64;

	function callRuntimeCallbacks(callbacks) {
	  while(callbacks.length > 0) {
	    var callback = callbacks.shift();
	    if (typeof callback == 'function') {
	      callback();
	      continue;
	    }
	    var func = callback.func;
	    if (typeof func === 'number') {
	      if (callback.arg === undefined) {
	        Runtime.dynCall('v', func);
	      } else {
	        Runtime.dynCall('vi', func, [callback.arg]);
	      }
	    } else {
	      func(callback.arg === undefined ? null : callback.arg);
	    }
	  }
	}

	var __ATPRERUN__  = []; // functions called before the runtime is initialized
	var __ATINIT__    = []; // functions called during startup
	var __ATMAIN__    = []; // functions called when main() is to be run
	var __ATEXIT__    = []; // functions called during shutdown
	var __ATPOSTRUN__ = []; // functions called after the runtime has exited

	var runtimeInitialized = false;
	var runtimeExited = false;

	function preRun() {
	  // compatibility - merge in anything from Module['preRun'] at this time
	  if (Module['preRun']) {
	    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
	    while (Module['preRun'].length) {
	      addOnPreRun(Module['preRun'].shift());
	    }
	  }
	  callRuntimeCallbacks(__ATPRERUN__);
	}

	function ensureInitRuntime() {
	  if (runtimeInitialized) return;
	  runtimeInitialized = true;
	  callRuntimeCallbacks(__ATINIT__);
	}

	function preMain() {
	  callRuntimeCallbacks(__ATMAIN__);
	}

	function exitRuntime() {
	  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
	    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
	  }
	  callRuntimeCallbacks(__ATEXIT__);
	  runtimeExited = true;
	}

	function postRun() {
	  // compatibility - merge in anything from Module['postRun'] at this time
	  if (Module['postRun']) {
	    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
	    while (Module['postRun'].length) {
	      addOnPostRun(Module['postRun'].shift());
	    }
	  }
	  callRuntimeCallbacks(__ATPOSTRUN__);
	}

	function addOnPreRun(cb) {
	  __ATPRERUN__.unshift(cb);
	}
	Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

	function addOnInit(cb) {
	  __ATINIT__.unshift(cb);
	}
	Module['addOnInit'] = Module.addOnInit = addOnInit;

	function addOnPreMain(cb) {
	  __ATMAIN__.unshift(cb);
	}
	Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

	function addOnExit(cb) {
	  __ATEXIT__.unshift(cb);
	}
	Module['addOnExit'] = Module.addOnExit = addOnExit;

	function addOnPostRun(cb) {
	  __ATPOSTRUN__.unshift(cb);
	}
	Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

	// Tools


	function intArrayFromString(stringy, dontAddNull, length /* optional */) {
	  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
	  if (length) {
	    ret.length = length;
	  }
	  if (!dontAddNull) {
	    ret.push(0);
	  }
	  return ret;
	}
	Module['intArrayFromString'] = intArrayFromString;

	function intArrayToString(array) {
	  var ret = [];
	  for (var i = 0; i < array.length; i++) {
	    var chr = array[i];
	    if (chr > 0xFF) {
	        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
	      chr &= 0xFF;
	    }
	    ret.push(String.fromCharCode(chr));
	  }
	  return ret.join('');
	}
	Module['intArrayToString'] = intArrayToString;

	function writeStringToMemory(string, buffer, dontAddNull) {
	  var array = intArrayFromString(string, dontAddNull);
	  var i = 0;
	  while (i < array.length) {
	    var chr = array[i];
	    HEAP8[(((buffer)+(i))>>0)]=chr;
	    i = i + 1;
	  }
	}
	Module['writeStringToMemory'] = writeStringToMemory;

	function writeArrayToMemory(array, buffer) {
	  for (var i = 0; i < array.length; i++) {
	    HEAP8[(((buffer)+(i))>>0)]=array[i];
	  }
	}
	Module['writeArrayToMemory'] = writeArrayToMemory;

	function writeAsciiToMemory(str, buffer, dontAddNull) {
	  for (var i = 0; i < str.length; i++) {
	    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
	    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
	  }
	  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
	}
	Module['writeAsciiToMemory'] = writeAsciiToMemory;

	function unSign(value, bits, ignore) {
	  if (value >= 0) {
	    return value;
	  }
	  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
	                    : Math.pow(2, bits)         + value;
	}
	function reSign(value, bits, ignore) {
	  if (value <= 0) {
	    return value;
	  }
	  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
	                        : Math.pow(2, bits-1);
	  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
	                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
	                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
	    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
	  }
	  return value;
	}

	// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
	if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
	  var ah  = a >>> 16;
	  var al = a & 0xffff;
	  var bh  = b >>> 16;
	  var bl = b & 0xffff;
	  return (al*bl + ((ah*bl + al*bh) << 16))|0;
	};
	Math.imul = Math['imul'];


	var Math_abs = Math.abs;
	var Math_cos = Math.cos;
	var Math_sin = Math.sin;
	var Math_tan = Math.tan;
	var Math_acos = Math.acos;
	var Math_asin = Math.asin;
	var Math_atan = Math.atan;
	var Math_atan2 = Math.atan2;
	var Math_exp = Math.exp;
	var Math_log = Math.log;
	var Math_sqrt = Math.sqrt;
	var Math_ceil = Math.ceil;
	var Math_floor = Math.floor;
	var Math_pow = Math.pow;
	var Math_imul = Math.imul;
	var Math_fround = Math.fround;
	var Math_min = Math.min;

	// A counter of dependencies for calling run(). If we need to
	// do asynchronous work before running, increment this and
	// decrement it. Incrementing must happen in a place like
	// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
	// Note that you can add dependencies in preRun, even though
	// it happens right before run - run will be postponed until
	// the dependencies are met.
	var runDependencies = 0;
	var runDependencyWatcher = null;
	var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
	var runDependencyTracking = {};

	function addRunDependency(id) {
	  runDependencies++;
	  if (Module['monitorRunDependencies']) {
	    Module['monitorRunDependencies'](runDependencies);
	  }
	  if (id) {
	    assert(!runDependencyTracking[id]);
	    runDependencyTracking[id] = 1;
	    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
	      // Check for missing dependencies every few seconds
	      runDependencyWatcher = setInterval(function() {
	        if (ABORT) {
	          clearInterval(runDependencyWatcher);
	          runDependencyWatcher = null;
	          return;
	        }
	        var shown = false;
	        for (var dep in runDependencyTracking) {
	          if (!shown) {
	            shown = true;
	            Module.printErr('still waiting on run dependencies:');
	          }
	          Module.printErr('dependency: ' + dep);
	        }
	        if (shown) {
	          Module.printErr('(end of list)');
	        }
	      }, 10000);
	    }
	  } else {
	    Module.printErr('warning: run dependency added without ID');
	  }
	}
	Module['addRunDependency'] = addRunDependency;
	function removeRunDependency(id) {
	  runDependencies--;
	  if (Module['monitorRunDependencies']) {
	    Module['monitorRunDependencies'](runDependencies);
	  }
	  if (id) {
	    assert(runDependencyTracking[id]);
	    delete runDependencyTracking[id];
	  } else {
	    Module.printErr('warning: run dependency removed without ID');
	  }
	  if (runDependencies == 0) {
	    if (runDependencyWatcher !== null) {
	      clearInterval(runDependencyWatcher);
	      runDependencyWatcher = null;
	    }
	    if (dependenciesFulfilled) {
	      var callback = dependenciesFulfilled;
	      dependenciesFulfilled = null;
	      callback(); // can add another dependenciesFulfilled
	    }
	  }
	}
	Module['removeRunDependency'] = removeRunDependency;

	Module["preloadedImages"] = {}; // maps url to image data
	Module["preloadedAudios"] = {}; // maps url to audio data


	var memoryInitializer = null;

	// === Body ===





	STATIC_BASE = 8;

	STATICTOP = STATIC_BASE + Runtime.alignMemory(156603);
	  /* global initializers */ __ATINIT__.push();


	/* memory initializer */ allocate([115,105,98,108,105,110,103,0,115,114,99,47,108,105,98,47,120,109,109,115,116,121,112,101,115,47,120,108,105,115,116,46,99,0,0,0,0,0,0,0,120,95,108,105,115,116,95,105,110,115,101,114,116,95,98,101,102,111,114,101,0,0,0,0,102,117,110,99,32,33,61,32,78,85,76,76,0,0,0,0,120,95,108,105,115,116,95,102,105,110,100,95,99,117,115,116,111,109,0,0,0,0,0,0,120,95,108,105,115,116,95,105,110,115,101,114,116,95,115,111,114,116,101,100,0,0,0,0,37,115,32,114,97,105,115,101,100,32,97,110,32,101,114,114,111,114,58,32,37,115,0,0,95,105,110,116,101,114,110,97,108,95,103,101,116,95,102,114,111,109,95,98,98,95,118,97,108,117,101,95,111,102,95,116,121,112,101,95,97,108,108,111,99,0,0,0,0,0,0,0,71,111,116,32,109,101,115,115,97,103,101,32,111,102,32,117,110,107,110,111,119,110,32,116,121,112,101,33,0,0,0,0,95,105,110,116,101,114,110,97,108,95,103,101,116,95,102,114,111,109,95,98,98,95,118,97,108,117,101,95,108,105,115,116,95,97,108,108,111,99,0,0,77,101,115,115,97,103,101,32,102,114,111,109,32,115,101,114,118,101,114,32,100,105,100,32,110,111,116,32,112,97,114,115,101,32,99,111,114,114,101,99,116,108,121,33,0,0,0,0,95,105,110,116,101,114,110,97,108,95,103,101,116,95,102,114,111,109,95,98,98,95,118,97,108,117,101,95,100,105,99,116,95,97,108,108,111,99,0,0,95,105,110,116,101,114,110,97,108,95,112,117,116,95,111,110,95,98,98,95,118,97,108,117,101,95,111,102,95,116,121,112,101,0,0,0,0,0,0,0,84,114,105,101,100,32,116,111,32,115,101,114,105,97,108,105,122,101,32,118,97,108,117,101,32,111,102,32,117,110,115,117,112,112,111,114,116,101,100,32,116,121,112,101,0,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,118,95,98,105,116,98,117,102,102,101,114,95,103,101,116,95,98,105,116,115,0,0,0,0,0,0,0,0,108,101,115,115,32,116,104,97,110,32,111,110,101,32,98,105,116,32,114,101,113,117,101,115,116,101,100,0,0,0,0,0,120,109,109,115,118,95,98,105,116,98,117,102,102,101,114,95,112,117,116,95,98,105,116,115,0,0,0,0,0,0,0,0,119,114,105,116,101,32,116,111,32,114,101,97,100,111,110,108,121,32,98,105,116,98,117,102,102,101,114,0,0,0,0,0,120,109,109,115,118,95,98,105,116,98,117,102,102,101,114,95,103,111,116,111,0,0,0,0,110,101,103,97,116,105,118,101,32,112,111,115,105,116,105,111,110,0,0,0,0,0,0,0,112,111,115,105,116,105,111,110,32,97,102,116,101,114,32,98,117,102,102,101,114,32,101,110,100,0,0,0,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,100,97,116,97,32,33,61,32,40,40,118,111,105,100,42,41,48,41,0,0,0,0,0,0,120,109,109,115,118,95,98,117,105,108,100,95,111,114,103,97,110,105,122,101,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,116,121,112,101,115,47,120,109,109,115,118,95,98,117,105,108,100,46,99,0,116,121,112,101,0,0,0,0,111,114,103,97,110,105,122,101,0,0,0,0,0,0,0,0,100,97,116,97,0,0,0,0,109,101,116,97,100,97,116,97,0,0,0,0,0,0,0,0,102,105,101,108,100,115,0,0,103,101,116,0,0,0,0,0,115,111,117,114,99,101,45,112,114,101,102,101,114,101,110,99,101,0,0,0,0,0,0,0,97,103,103,114,101,103,97,116,101,0,0,0,0,0,0,0,99,108,117,115,116,101,114,45,108,105,115,116,0,0,0,0,99,108,117,115,116,101,114,45,98,121,0,0,0,0,0,0,99,108,117,115,116,101,114,45,102,105,101,108,100,0,0,0,99,108,117,115,116,101,114,45,100,105,99,116,0,0,0,0,99,111,117,110,116,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,99,111,108,108,0,0,0,0,95,120,109,109,115,118,95,99,111,108,108,95,102,114,101,101,0,0,0,0,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,116,121,112,101,115,47,120,109,109,115,118,95,99,111,108,108,46,99,0,0,120,109,109,115,118,95,99,111,108,108,95,97,100,100,95,111,112,101,114,97,110,100,0,0,111,112,0,0,0,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,119,105,116,104,32,97,110,32,111,112,101,114,97,110,100,32,97,108,114,101,97,100,121,32,105,110,32,111,112,101,114,97,110,100,32,108,105,115,116,0,120,109,109,115,118,95,99,111,108,108,95,114,101,109,111,118,101,95,111,112,101,114,97,110,100,0,0,0,0,0,0,0,119,105,116,104,32,97,110,32,111,112,101,114,97,110,100,32,110,111,116,32,105,110,32,111,112,101,114,97,110,100,32,108,105,115,116,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,97,112,112,101,110,100,0,0,0,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,105,110,115,101,114,116,0,0,0,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,109,111,118,101,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,114,101,109,111,118,101,0,0,0,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,99,108,101,97,114,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,103,101,116,95,105,110,100,101,120,95,105,110,116,51,50,0,0,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,103,101,116,95,105,110,100,101,120,95,105,110,116,54,52,0,0,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,115,101,116,95,105,110,100,101,120,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,103,101,116,95,115,105,122,101,0,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,115,95,116,121,112,101,0,0,0,0,0,0,78,85,76,76,32,118,97,108,117,101,0,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,103,101,116,95,116,121,112,101,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,103,101,116,0,0,0,120,109,109,115,118,95,99,111,108,108,95,105,100,108,105,115,116,95,115,101,116,0,0,0,105,100,108,105,115,116,0,0,120,109,109,115,118,95,108,105,115,116,95,114,101,115,116,114,105,99,116,95,116,121,112,101,32,40,105,100,108,105,115,116,44,32,88,77,77,83,86,95,84,89,80,69,95,73,78,84,54,52,41,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,111,112,101,114,97,110,100,115,95,103,101,116,0,120,109,109,115,118,95,99,111,108,108,95,111,112,101,114,97,110,100,115,95,115,101,116,0,111,112,101,114,97,110,100,115,0,0,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,114,101,115,116,114,105,99,116,95,116,121,112,101,32,40,111,112,101,114,97,110,100,115,44,32,88,77,77,83,86,95,84,89,80,69,95,67,79,76,76,41,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,97,116,116,114,105,98,117,116,101,115,95,103,101,116,0,0,0,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,97,116,116,114,105,98,117,116,101,115,95,115,101,116,0,0,0,0,0,0,0,97,116,116,114,105,98,117,116,101,115,0,0,0,0,0,0,120,109,109,115,118,95,105,115,95,116,121,112,101,32,40,97,116,116,114,105,98,117,116,101,115,44,32,88,77,77,83,86,95,84,89,80,69,95,68,73,67,84,41,0,0,0,0,0,120,109,109,115,118,95,105,115,95,116,121,112,101,32,40,99,111,108,108,44,32,88,77,77,83,86,95,84,89,80,69,95,67,79,76,76,41,0,0,0,120,109,109,115,118,95,99,111,108,108,95,97,116,116,114,105,98,117,116,101,95,115,101,116,95,115,116,114,105,110,103,0,120,109,109,115,118,95,99,111,108,108,95,97,116,116,114,105,98,117,116,101,95,115,101,116,95,105,110,116,0,0,0,0,120,109,109,115,118,95,99,111,108,108,95,97,116,116,114,105,98,117,116,101,95,115,101,116,95,118,97,108,117,101,0,0,120,109,109,115,118,95,99,111,108,108,95,97,116,116,114,105,98,117,116,101,95,103,101,116,95,115,116,114,105,110,103,0,120,109,109,115,118,95,99,111,108,108,95,97,116,116,114,105,98,117,116,101,95,103,101,116,95,105,110,116,51,50,0,0,120,109,109,115,118,95,99,111,108,108,95,97,116,116,114,105,98,117,116,101,95,103,101,116,95,105,110,116,54,52,0,0,120,109,109,115,118,95,99,111,108,108,95,97,116,116,114,105,98,117,116,101,95,103,101,116,95,118,97,108,117,101,0,0,120,109,109,115,118,95,99,111,108,108,95,97,100,100,95,111,114,100,101,114,95,111,112,101,114,97,116,111,114,115,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,108,108,0,0,0,0,0,0,0,0,119,105,116,104,32,97,32,110,111,110,32,108,105,115,116,32,111,114,100,101,114,0,0,0,108,105,109,95,115,116,97,114,116,32,62,61,32,48,32,38,38,32,108,105,109,95,108,101,110,32,62,61,32,48,0,0,120,109,109,115,118,95,99,111,108,108,95,97,100,100,95,108,105,109,105,116,95,111,112,101,114,97,116,111,114,0,0,0,37,105,0,0,0,0,0,0,115,116,97,114,116,0,0,0,99,111,117,108,100,32,110,111,116,32,115,101,116,32,99,111,108,108,101,99,116,105,111,110,32,108,105,109,105,116,32,111,112,101,114,97,116,111,114,32,115,116,97,114,116,0,0,0,108,101,110,103,116,104,0,0,99,111,117,108,100,32,110,111,116,32,115,101,116,32,99,111,108,108,101,99,116,105,111,110,32,108,105,109,105,116,32,111,112,101,114,97,116,111,114,32,108,101,110,103,116,104,0,0,120,109,109,115,118,95,99,111,108,108,95,110,111,114,109,97,108,105,122,101,95,111,114,100,101,114,95,97,114,103,117,109,101,110,116,115,0,0,0,0,111,114,100,101,114,32,101,110,116,114,121,32,109,117,115,116,32,98,101,32,115,116,114,105,110,103,32,111,114,32,100,105,99,116,0,0,0,0,0,0,100,105,114,101,99,116,105,111,110,0,0,0,0,0,0,0,68,69,83,67,0,0,0,0,114,97,110,100,111,109,0,0,116,121,112,101,0,0,0,0,105,100,0,0,0,0,0,0,118,97,108,117,101,0,0,0,102,105,101,108,100,0,0,0,116,121,112,101,32,60,61,32,88,77,77,83,95,67,79,76,76,69,67,84,73,79,78,95,84,89,80,69,95,76,65,83,84,0,0,0,0,0,0,0,95,120,109,109,115,118,95,99,111,108,108,95,110,101,119,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,118,97,108,0,0,0,0,0,120,109,109,115,118,95,99,111,112,121,0,0,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,116,121,112,101,115,47,120,109,109,115,118,95,99,111,112,121,46,99,0,0,99,117,114,95,118,97,108,0,120,109,109,115,118,95,103,101,116,95,108,105,115,116,95,105,116,101,114,32,40,118,97,108,44,32,38,105,116,41,0,0,100,117,112,108,105,99,97,116,101,95,108,105,115,116,95,118,97,108,117,101,0,0,0,0,120,109,109,115,118,95,103,101,116,95,100,105,99,116,95,105,116,101,114,32,40,118,97,108,44,32,38,105,116,41,0,0,100,117,112,108,105,99,97,116,101,95,100,105,99,116,95,118,97,108,117,101,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,107,101,121,0,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,103,101,116,0,0,115,114,99,47,108,105,98,47,120,109,109,115,116,121,112,101,115,47,120,109,109,115,118,95,100,105,99,116,46,99,0,0,100,105,99,116,118,0,0,0,120,109,109,115,118,95,105,115,95,116,121,112,101,32,40,100,105,99,116,118,44,32,88,77,77,83,86,95,84,89,80,69,95,68,73,67,84,41,0,0,120,109,109,115,118,95,100,105,99,116,95,115,101,116,0,0,118,97,108,0,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,114,101,109,111,118,101,0,0,0,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,99,108,101,97,114,0,0,0,0,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,102,111,114,101,97,99,104,0,0,0,0,0,0,120,109,109,115,118,95,103,101,116,95,100,105,99,116,95,105,116,101,114,32,40,100,105,99,116,118,44,32,38,105,116,41,0,0,0,0,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,103,101,116,95,115,105,122,101,0,0,0,0,0,105,116,0,0,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,105,116,101,114,95,102,105,114,115,116,0,0,0,120,109,109,115,118,95,100,105,99,116,95,105,116,101,114,95,110,101,120,116,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,105,116,101,114,95,118,97,108,105,100,32,40,105,116,41,0,0,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,105,116,101,114,95,102,105,110,100,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,105,116,101,114,95,115,101,116,0,0,0,0,0,120,109,109,115,118,95,100,105,99,116,95,105,116,101,114,95,114,101,109,111,118,101,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,95,120,109,109,115,118,95,100,105,99,116,95,105,116,101,114,95,110,101,119,0,0,0,0,95,120,109,109,115,118,95,100,105,99,116,95,110,101,119,0,115,101,114,118,101,114,0,0,99,108,105,101,110,116,47,42,0,0,0,0,0,0,0,0,112,108,117,103,105,110,47,112,108,97,121,108,105,115,116,0,112,108,117,103,105,110,47,115,101,103,109,101,110,116,0,0,112,108,117,103,105,110,47,110,105,98,98,108,101,114,0,0,112,108,117,103,105,110,47,105,100,51,118,50,0,0,0,0,112,108,117,103,105,110,47,42,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,152,13,0,0,160,13,0,0,176,13,0,0,192,13,0,0,208,13,0,0,224,13,0,0,240,13,0,0,0,14,0,0,0,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,95,120,109,109,115,118,95,110,101,119,0,0,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,116,121,112,101,115,47,120,109,109,115,118,95,103,101,110,101,114,97,108,46,99,0,0,0,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,120,109,109,115,118,95,110,101,119,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,120,109,109,115,118,95,117,116,102,56,95,118,97,108,105,100,97,116,101,32,40,115,41,0,120,109,109,115,118,95,110,101,119,95,98,105,110,0,0,0,118,97,108,0,0,0,0,0,120,109,109,115,118,95,114,101,102,0,0,0,0,0,0,0,120,109,109,115,118,95,117,110,114,101,102,0,0,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,119,105,116,104,32,97,32,102,114,101,101,100,32,118,97,108,117,101,0,0,0,0,0,0,120,109,109,115,118,95,103,101,116,95,116,121,112,101,0,0,78,85,76,76,32,118,97,108,117,101,0,0,0,0,0,0,120,109,109,115,118,95,105,115,95,116,121,112,101,0,0,0,95,120,109,109,115,118,95,102,114,101,101,0,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,108,105,115,116,118,0,0,0,120,109,109,115,118,95,108,105,115,116,95,103,101,116,0,0,115,114,99,47,108,105,98,47,120,109,109,115,116,121,112,101,115,47,120,109,109,115,118,95,108,105,115,116,46,99,0,0,120,109,109,115,118,95,105,115,95,116,121,112,101,32,40,108,105,115,116,118,44,32,88,77,77,83,86,95,84,89,80,69,95,76,73,83,84,41,0,0,120,109,109,115,118,95,108,105,115,116,95,115,101,116,0,0,118,97,108,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,110,115,101,114,116,0,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,114,101,109,111,118,101,0,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,109,111,118,101,0,120,109,109,115,118,95,108,105,115,116,95,97,112,112,101,110,100,0,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,99,108,101,97,114,0,0,0,0,0,0,0,0,99,111,109,112,97,114,97,116,111,114,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,115,111,114,116,0,120,109,109,115,118,95,108,105,115,116,95,102,111,114,101,97,99,104,0,0,0,0,0,0,120,109,109,115,118,95,103,101,116,95,108,105,115,116,95,105,116,101,114,32,40,108,105,115,116,118,44,32,38,105,116,41,0,0,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,103,101,116,95,115,105,122,101,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,104,97,115,95,116,121,112,101,32,40,108,105,115,116,118,44,32,116,121,112,101,41,0,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,114,101,115,116,114,105,99,116,95,116,121,112,101,0,0,0,0,0,0,0,0,33,108,105,115,116,118,45,62,118,97,108,117,101,46,108,105,115,116,45,62,114,101,115,116,114,105,99,116,101,100,32,124,124,32,108,105,115,116,118,45,62,118,97,108,117,101,46,108,105,115,116,45,62,114,101,115,116,114,105,99,116,116,121,112,101,32,61,61,32,116,121,112,101,0,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,103,101,116,95,116,121,112,101,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,104,97,115,95,116,121,112,101,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,110,100,101,120,95,111,102,0,0,0,0,0,105,116,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,102,105,114,115,116,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,108,97,115,116,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,110,101,120,116,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,112,114,101,118,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,115,101,101,107,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,116,101,108,108,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,103,101,116,95,112,97,114,101,110,116,0,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,115,101,116,0,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,105,110,115,101,114,116,0,0,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,114,101,109,111,118,101,0,0,108,105,115,116,0,0,0,0,120,109,109,115,118,95,108,105,115,116,95,102,108,97,116,116,101,110,0,0,0,0,0,0,120,109,109,115,118,95,105,115,95,116,121,112,101,32,40,108,105,115,116,44,32,88,77,77,83,86,95,84,89,80,69,95,76,73,83,84,41,0,0,0,95,120,109,109,115,118,95,108,105,115,116,95,102,108,97,116,116,101,110,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,95,120,109,109,115,118,95,108,105,115,116,95,105,116,101,114,95,110,101,119,0,0,0,0,115,117,99,99,101,115,115,0,95,120,109,109,115,118,95,108,105,115,116,95,114,101,109,111,118,101,0,0,0,0,0,0,95,120,109,109,115,118,95,108,105,115,116,95,114,101,115,105,122,101,0,0,0,0,0,0,120,109,109,115,118,95,105,115,95,116,121,112,101,32,40,118,97,108,44,32,108,45,62,114,101,115,116,114,105,99,116,116,121,112,101,41,0,0,0,0,95,120,109,109,115,118,95,108,105,115,116,95,105,110,115,101,114,116,0,0,0,0,0,0,115,105,122,101,32,62,61,32,48,0,0,0,0,0,0,0,95,120,109,109,115,118,95,108,105,115,116,95,112,111,115,105,116,105,111,110,95,110,111,114,109,97,108,105,122,101,0,0,95,120,109,109,115,118,95,108,105,115,116,95,110,101,119,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,118,95,101,110,99,111,100,101,95,117,114,108,95,102,117,108,108,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,117,114,108,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,120,109,109,115,118,95,100,101,99,111,100,101,95,117,114,108,0,0,0,0,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,116,121,112,101,115,47,120,109,109,115,118,95,117,116,105,108,46,99,0,0,36,123,0,0,0,0,0,0,125,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,97,108,108,111,99,97,116,101,32,37,117,32,98,121,116,101,115,32,111,102,32,109,101,109,111,114,121,44,32,79,79,77,63,0,0,0,0,0,115,101,99,111,110,100,115,0,100,117,114,97,116,105,111,110,0,0,0,0,0,0,0,0,48,48,0,0,0,0,0,0,37,48,50,108,108,100,0,0,109,105,110,117,116,101,115,0,37,108,108,100,0,0,0,0,37,46,54,102,0,0,0,0,95,115,117,109,95,108,101,110,95,115,116,114,105,110,103,95,100,105,99,116,0,0,0,0,119,105,116,104,32,110,111,110,45,115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,109,115,103,0,0,0,0,0,120,109,109,115,95,105,112,99,95,109,115,103,95,100,101,115,116,114,111,121,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,105,112,99,47,109,115,103,46,99,0,0,0,120,109,109,115,95,105,112,99,95,109,115,103,95,103,101,116,95,111,98,106,101,99,116,0,120,109,109,115,95,105,112,99,95,109,115,103,95,103,101,116,95,99,109,100,0,0,0,0,120,109,109,115,95,105,112,99,95,109,115,103,95,103,101,116,95,99,111,111,107,105,101,0,120,109,109,115,95,105,112,99,95,109,115,103,95,119,114,105,116,101,95,116,114,97,110,115,112,111,114,116,0,0,0,0,116,114,97,110,115,112,111,114,116,0,0,0,0,0,0,0,108,101,110,32,62,32,109,115,103,45,62,120,102,101,114,101,100,0,0,0,0,0,0,0,120,109,109,115,95,105,112,99,95,109,115,103,95,114,101,97,100,95,116,114,97,110,115,112,111,114,116,0,0,0,0,0,109,115,103,45,62,120,102,101,114,101,100,32,60,32,108,101,110,0,0,0,0,0,0,0,120,109,109,115,95,105,112,99,95,109,115,103,95,103,101,116,95,108,101,110,103,116,104,0,120,109,109,115,95,105,112,99,95,109,115,103,95,115,101,116,95,111,98,106,101,99,116,0,120,109,109,115,95,105,112,99,95,109,115,103,95,115,101,116,95,99,109,100,0,0,0,0,57,54,54,55,0,0,0,0,102,100,32,33,61,32,45,49,0,0,0,0,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,105,112,99,47,115,111,99,107,101,116,95,116,99,112,46,99,0,0,0,0,120,109,109,115,95,105,112,99,95,116,99,112,95,99,108,105,101,110,116,95,105,110,105,116,0,0,0,0,0,0,0,0,120,109,109,115,95,105,112,99,95,116,99,112,95,115,101,114,118,101,114,95,105,110,105,116,0,0,0,0,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,116,114,97,110,115,112,111,114,116,0,0,0,0,0,0,0,120,109,109,115,95,105,112,99,95,116,99,112,95,97,99,99,101,112,116,0,0,0,0,0,105,112,99,116,0,0,0,0,120,109,109,115,95,105,112,99,95,116,99,112,95,119,114,105,116,101,0,0,0,0,0,0,98,117,102,102,101,114,0,0,120,109,109,115,95,105,112,99,95,116,99,112,95,114,101,97,100,0,0,0,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,105,112,99,116,0,0,0,0,120,109,109,115,95,105,112,99,95,116,114,97,110,115,112,111,114,116,95,100,101,115,116,114,111,121,0,0,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,105,112,99,47,116,114,97,110,115,112,111,114,116,46,99,0,0,0,0,0,120,109,109,115,95,105,112,99,95,116,114,97,110,115,112,111,114,116,95,102,100,95,103,101,116,0,0,0,0,0,0,0,120,109,109,115,95,105,112,99,95,115,101,114,118,101,114,95,97,99,99,101,112,116,0,0,116,99,112,0,0,0,0,0,58,47,47,0,0,0,0,0,0,0,0,0,0,0,0,0,47,37,115,0,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,116,114,97,110,115,112,111,114,116,0,0,0,0,0,0,0,120,109,109,115,95,105,112,99,95,117,115,111,99,107,101,116,95,97,99,99,101,112,116,0,115,114,99,47,108,105,98,47,120,109,109,115,105,112,99,47,115,111,99,107,101,116,95,117,110,105,120,46,99,0,0,0,105,112,99,116,0,0,0,0,120,109,109,115,95,105,112,99,95,117,115,111,99,107,101,116,95,119,114,105,116,101,0,0,98,117,102,102,101,114,0,0,120,109,109,115,95,105,112,99,95,117,115,111,99,107,101,116,95,114,101,97,100,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,112,97,116,104,0,0,0,0,120,109,109,115,95,105,112,99,95,99,108,105,101,110,116,95,105,110,105,116,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,105,112,99,47,116,114,97,110,115,112,111,114,116,95,117,110,105,120,46,99,0,0,0,0,0,0,0,0,117,114,108,0,0,0,0,0,120,109,109,115,95,105,112,99,95,115,101,114,118,101,114,95,105,110,105,116,0,0,0,0,0,0,0,0,0,0,0,0,117,110,105,120,0,0,0,0,116,99,112,0,0,0,0,0,88,77,77,83,95,80,65,84,72,0,0,0,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,102,109,116,0,0,0,0,0,120,95,118,97,115,112,114,105,110,116,102,0,0,0,0,0,115,114,99,47,108,105,98,47,120,109,109,115,117,116,105,108,115,47,117,116,105,108,115,46,99,0,0,0,0,0,0,0,98,111,117,110,100,32,62,61,32,48,0,0,0,0,0,0,88,68,71,95,67,65,67,72,69,95,72,79,77,69,0,0,76,105,98,114,97,114,121,47,120,109,109,115,50,47,108,111,103,115,0,0,0,0,0,0,88,68,71,95,67,79,78,70,73,71,95,72,79,77,69,0,76,105,98,114,97,114,121,47,120,109,109,115,50,0,0,0,117,110,105,120,58,47,47,47,116,109,112,47,120,109,109,115,45,105,112,99,45,37,115,0,37,115,47,120,109,109,115,50,0,0,0,0,0,0,0,0,37,115,47,37,115,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,32,105,110,118,97,108,105,100,32,108,111,103,32,108,101,118,101,108,33,32,42,42,42,10,0,0,0,0,0,37,115,32,105,110,32,37,115,58,32,37,115,10,0,0,0,168,27,0,0,176,27,0,0,184,27,0,0,192,27,0,0,200,27,0,0,208,27,0,0,37,115,58,32,37,115,10,0,63,63,63,0,0,0,0,0,70,65,84,65,76,0,0,0,70,65,73,76,0,0,0,0,69,82,82,79,82,0,0,0,73,78,70,79,0,0,0,0,68,69,66,85,71,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,99,111,108,108,95,103,101,116,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,119,105,116,104,32,97,32,78,85,76,76,32,110,97,109,101,0,0,0,0,0,0,0,0,120,109,109,115,99,95,99,111,108,108,95,115,121,110,99,0,120,109,109,115,99,95,99,111,108,108,95,108,105,115,116,0,120,109,109,115,99,95,99,111,108,108,95,115,97,118,101,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,108,108,101,99,116,105,111,110,0,0,120,109,109,115,99,95,99,111,108,108,95,114,101,109,111,118,101,0,0,0,0,0,0,0,120,109,109,115,99,95,99,111,108,108,95,102,105,110,100,0,120,109,109,115,99,95,99,111,108,108,95,114,101,110,97,109,101,0,0,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,102,114,111,109,95,110,97,109,101,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,116,111,95,110,97,109,101,0,0,0,0,0,105,100,0,0,0,0,0,0,116,121,112,101,0,0,0,0,109,101,116,97,100,97,116,97,0,0,0,0,0,0,0,0,97,103,103,114,101,103,97,116,101,0,0,0,0,0,0,0,102,105,114,115,116,0,0,0,103,101,116,0,0,0,0,0,99,108,117,115,116,101,114,45,108,105,115,116,0,0,0,0,99,108,117,115,116,101,114,45,98,121,0,0,0,0,0,0,112,111,115,105,116,105,111,110,0,0,0,0,0,0,0,0,100,97,116,97,0,0,0,0,120,109,109,115,99,95,99,111,108,108,95,113,117,101,114,121,95,105,110,102,111,115,0,0,119,105,116,104,32,97,32,78,85,76,76,32,102,101,116,99,104,32,108,105,115,116,0,0,120,109,109,115,99,95,99,111,108,108,95,113,117,101,114,121,0,0,0,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,102,101,116,99,104,32,115,112,101,99,105,102,105,99,97,116,105,111,110,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,99,111,108,108,101,99,116,105,111,110,95,99,104,97,110,103,101,100,0,0,0,0,0,0,120,109,109,115,99,95,99,111,108,108,95,105,100,108,105,115,116,95,102,114,111,109,95,112,108,97,121,108,105,115,116,95,102,105,108,101,0,0,0,0,60,61,0,0,0,0,0,0,62,61,0,0,0,0,0,0,79,82,0,0,0,0,0,0,65,78,68,0,0,0,0,0,78,79,84,0,0,0,0,0,105,110,58,0,0,0,0,0,67,111,108,108,101,99,116,105,111,110,115,0,0,0,0,0,110,97,109,101,115,112,97,99,101,0,0,0,0,0,0,0,114,101,102,101,114,101,110,99,101,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,97,114,116,105,115,116,0,0,97,108,98,117,109,0,0,0,116,105,116,108,101,0,0,0,168,30,0,0,176,30,0,0,184,30,0,0,0,0,0,0,102,105,101,108,100,0,0,0,118,97,108,117,101,0,0,0,97,97,114,116,105,115,116,0,0,108,97,108,98,117,109,0,0,0,116,116,105,116,108,101,0,0,0,110,116,114,97,99,107,110,114,0,121,121,101,97,114,0,0,0,0,103,103,101,110,114,101,0,0,0,117,117,114,108,0,0,0,0,0,0,105,100,0,0,0,0,0,0,116,121,112,101,0,0,0,0,37,100,0,0,0,0,0,0,112,111,115,105,116,105,111,110,0,0,0,0,0,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,98,105,110,100,97,116,97,95,97,100,100,0,0,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,120,109,109,115,99,95,98,105,110,100,97,116,97,95,114,101,116,114,105,101,118,101,0,0,120,109,109,115,99,95,98,105,110,100,97,116,97,95,114,101,109,111,118,101,0,0,0,0,120,109,109,115,99,95,98,105,110,100,97,116,97,95,108,105,115,116,0,0,0,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,99,111,110,102,105,103,95,114,101,103,105,115,116,101,114,95,118,97,108,117,101,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,119,105,116,104,32,97,32,78,85,76,76,32,107,101,121,0,120,109,109,115,99,95,99,111,110,102,105,103,95,115,101,116,95,118,97,108,117,101,0,0,120,109,109,115,99,95,99,111,110,102,105,103,95,103,101,116,95,118,97,108,117,101,0,0,120,109,109,115,99,95,99,111,110,102,105,103,95,108,105,115,116,95,118,97,108,117,101,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,99,111,110,102,105,103,95,118,97,108,117,101,95,99,104,97,110,103,101,100,0,0,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,105,112,99,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,105,111,95,105,110,95,99,97,108,108,98,97,99,107,0,0,0,0,0,0,0,0,115,114,99,47,99,108,105,101,110,116,115,47,108,105,98,47,120,109,109,115,99,108,105,101,110,116,47,105,112,99,46,99,0,0,0,0,0,0,0,0,33,105,112,99,45,62,100,105,115,99,111,110,110,101,99,116,0,0,0,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,105,111,95,111,117,116,0,0,0,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,105,111,95,111,117,116,95,99,97,108,108,98,97,99,107,0,0,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,102,100,95,103,101,116,0,0,0,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,101,114,114,111,114,95,103,101,116,0,0,0,0,0,68,105,115,99,111,110,110,101,99,116,101,100,0,0,0,0,120,109,109,115,99,95,105,112,99,95,100,105,115,99,111,110,110,101,99,116,101,100,0,0,120,109,109,115,99,95,105,112,99,95,100,105,115,99,111,110,110,101,99,116,95,115,101,116,0,0,0,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,110,101,101,100,95,111,117,116,95,99,97,108,108,98,97,99,107,95,115,101,116,0,120,109,109,115,99,95,105,112,99,95,114,101,115,117,108,116,95,114,101,103,105,115,116,101,114,0,0,0,0,0,0,0,114,101,115,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,114,101,115,117,108,116,95,108,111,111,107,117,112,0,120,109,109,115,99,95,105,112,99,95,114,101,115,117,108,116,95,117,110,114,101,103,105,115,116,101,114,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,101,114,114,111,114,95,115,101,116,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,119,97,105,116,95,102,111,114,95,101,118,101,110,116,0,0,0,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,109,115,103,95,119,114,105,116,101,0,0,0,0,0,120,109,109,115,99,95,105,112,99,95,99,111,110,110,101,99,116,0,0,0,0,0,0,0,112,97,116,104,0,0,0,0,67,111,117,108,100,32,110,111,116,32,105,110,105,116,32,99,108,105,101,110,116,33,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,103,101,116,95,105,100,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,103,101,116,95,105,100,95,101,110,99,111,100,101,100,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,109,111,118,101,95,101,110,116,114,121,0,0,0,0,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,114,101,109,111,118,101,95,101,110,116,114,121,0,0,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,97,100,100,95,101,110,116,114,121,95,97,114,103,115,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,97,100,100,95,101,110,116,114,121,95,102,117,108,108,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,97,100,100,95,101,110,116,114,121,95,101,110,99,111,100,101,100,0,0,0,0,0,0,0,0,119,105,116,104,32,97,32,110,111,110,32,101,110,99,111,100,101,100,32,117,114,108,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,105,109,112,111,114,116,95,112,97,116,104,0,0,0,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,105,109,112,111,114,116,95,112,97,116,104,95,101,110,99,111,100,101,100,0,0,0,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,114,101,104,97,115,104,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,103,101,116,95,105,110,102,111,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,97,100,100,101,100,0,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,99,104,97,110,103,101,100,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,117,112,100,97,116,101,100,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,114,101,109,111,118,101,100,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,112,114,111,112,101,114,116,121,95,115,101,116,95,105,110,116,0,0,0,99,108,105,101,110,116,47,37,115,0,0,0,0,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,112,114,111,112,101,114,116,121,95,115,101,116,95,105,110,116,95,119,105,116,104,95,115,111,117,114,99,101,0,0,0,0,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,112,114,111,112,101,114,116,121,95,115,101,116,95,115,116,114,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,112,114,111,112,101,114,116,121,95,115,101,116,95,115,116,114,95,119,105,116,104,95,115,111,117,114,99,101,0,0,0,0,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,112,114,111,112,101,114,116,121,95,114,101,109,111,118,101,0,0,0,0,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,101,110,116,114,121,95,112,114,111,112,101,114,116,121,95,114,101,109,111,118,101,95,119,105,116,104,95,115,111,117,114,99,101,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,95,120,109,109,115,99,95,109,101,100,105,97,108,105,98,95,101,110,99,111,100,101,95,117,114,108,95,111,108,100,0,0,119,105,116,104,32,97,32,78,85,76,76,32,117,114,108,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,116,105,99,107,108,101,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,115,116,111,112,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,112,97,117,115,101,0,0,0,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,115,116,97,114,116,0,0,0,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,115,101,101,107,95,109,115,0,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,115,101,101,107,95,115,97,109,112], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
	/* memory initializer */ allocate([108,101,115,0,0,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,112,108,97,121,98,97,99,107,95,115,116,97,116,117,115,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,115,116,97,116,117,115,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,112,108,97,121,98,97,99,107,95,99,117,114,114,101,110,116,95,105,100,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,99,117,114,114,101,110,116,95,105,100,0,0,0,0,0,0,0,120,109,109,115,99,95,115,105,103,110,97,108,95,112,108,97,121,98,97,99,107,95,112,108,97,121,116,105,109,101,0,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,112,108,97,121,116,105,109,101,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,118,111,108,117,109,101,95,115,101,116,0,0,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,104,97,110,110,101,108,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,98,97,99,107,95,118,111,108,117,109,101,95,103,101,116,0,0,0,0,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,112,108,97,121,98,97,99,107,95,118,111,108,117,109,101,95,99,104,97,110,103,101,100,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,99,117,114,114,101,110,116,95,112,111,115,0,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,95,97,99,116,105,118,101,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,99,117,114,114,101,110,116,95,97,99,116,105,118,101,0,0,0,80,108,97,121,108,105,115,116,115,0,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,99,114,101,97,116,101,0,0,0,112,108,97,121,108,105,115,116,32,110,97,109,101,32,99,97,110,110,111,116,32,98,101,32,78,85,76,76,0,0,0,0,116,121,112,101,0,0,0,0,108,105,115,116,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,115,104,117,102,102,108,101,0,0,110,97,109,101,115,112,97,99,101,0,0,0,0,0,0,0,114,101,102,101,114,101,110,99,101,0,0,0,0,0,0,0,114,97,110,100,111,109,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,115,111,114,116,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,112,114,111,112,101,114,116,121,0,0,0,0,112,114,111,112,101,114,116,121,32,108,105,115,116,32,109,97,121,32,111,110,108,121,32,99,111,110,116,97,105,110,32,115,116,114,105,110,103,115,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,99,108,101,97,114,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,114,101,112,108,97,99,101,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,108,108,101,99,116,105,111,110,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,108,105,115,116,95,101,110,116,114,105,101,115,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,105,110,115,101,114,116,95,105,100,0,0,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,114,105,110,115,101,114,116,0,0,119,105,116,104,32,97,32,78,85,76,76,32,117,114,108,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,114,105,110,115,101,114,116,95,101,110,99,111,100,101,100,0,0,119,105,116,104,32,97,32,110,111,110,32,101,110,99,111,100,101,100,32,117,114,108,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,105,110,115,101,114,116,95,97,114,103,115,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,105,110,115,101,114,116,95,102,117,108,108,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,105,110,115,101,114,116,95,101,110,99,111,100,101,100,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,105,110,115,101,114,116,95,99,111,108,108,101,99,116,105,111,110,0,0,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,97,100,100,95,105,100,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,114,97,100,100,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,114,97,100,100,95,101,110,99,111,100,101,100,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,97,100,100,95,97,114,103,115,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,97,100,100,95,102,117,108,108,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,97,100,100,95,101,110,99,111,100,101,100,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,97,100,100,95,105,100,108,105,115,116,0,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,97,100,100,95,99,111,108,108,101,99,116,105,111,110,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,109,111,118,101,95,101,110,116,114,121,0,0,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,114,101,109,111,118,101,95,101,110,116,114,121,0,0,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,112,108,97,121,108,105,115,116,95,99,104,97,110,103,101,100,0,0,0,0,0,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,112,108,97,121,108,105,115,116,95,99,117,114,114,101,110,116,95,112,111,115,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,115,101,116,95,110,101,120,116,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,115,101,116,95,110,101,120,116,95,114,101,108,0,0,0,0,0,120,109,109,115,99,95,112,108,97,121,108,105,115,116,95,108,111,97,100,0,0,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,112,108,97,121,108,105,115,116,95,108,111,97,100,101,100,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,114,101,115,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,114,101,102,0,0,0,0,0,0,0,0,115,114,99,47,99,108,105,101,110,116,115,47,108,105,98,47,120,109,109,115,99,108,105,101,110,116,47,114,101,115,117,108,116,46,99,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,103,101,116,95,99,108,97,115,115,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,100,105,115,99,111,110,110,101,99,116,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,114,101,115,117,108,116,32,116,121,112,101,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,99,111,111,107,105,101,95,103,101,116,0,120,109,109,115,99,95,114,101,115,117,108,116,95,99,50,99,95,115,101,116,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,118,105,115,99,95,115,101,116,0,0,0,33,114,101,115,45,62,118,105,115,99,0,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,118,105,115,99,95,103,101,116,0,0,0,114,101,115,45,62,118,105,115,99,0,0,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,103,101,116,95,99,111,110,110,101,99,116,105,111,110,0,0,0,0,0,114,101,115,45,62,99,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,117,110,114,101,102,0,0,0,0,0,0,119,105,116,104,32,97,32,102,114,101,101,100,32,114,101,115,117,108,116,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,110,111,116,105,102,105,101,114,95,115,101,116,95,100,101,102,97,117,108,116,95,102,117,108,108,0,0,102,117,110,99,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,110,111,116,105,102,105,101,114,95,115,101,116,95,114,97,119,95,102,117,108,108,0,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,110,111,116,105,102,105,101,114,95,115,101,116,95,99,50,99,95,102,117,108,108,0,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,119,97,105,116,0,0,0,0,0,0,0,114,101,115,45,62,105,112,99,0,0,0,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,103,101,116,95,118,97,108,117,101,0,0,114,101,115,45,62,112,97,114,115,101,100,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,114,101,115,116,97,114,116,97,98,108,101,0,0,0,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,114,117,110,0,0,0,0,0,0,0,0,109,115,103,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,110,101,119,0,0,0,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,99,97,108,108,98,97,99,107,95,110,101,119,95,99,50,99,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,99,97,108,108,98,97,99,107,95,110,101,119,95,114,97,119,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,99,97,108,108,98,97,99,107,95,110,101,119,95,100,101,102,97,117,108,116,0,0,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,114,101,115,116,97,114,116,0,0,0,0,114,101,115,117,108,116,32,105,115,32,110,111,116,32,114,101,115,116,97,114,116,97,98,108,101,0,0,0,0,0,0,0,78,111,32,101,114,114,111,114,32,118,97,108,117,101,33,0,78,111,32,101,114,114,111,114,32,109,101,115,115,97,103,101,33,0,0,0,0,0,0,0,120,109,109,115,99,95,114,101,115,117,108,116,95,102,114,101,101,0,0,0,0,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,109,97,105,110,95,108,105,115,116,95,112,108,117,103,105,110,115,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,120,109,109,115,99,95,109,97,105,110,95,115,116,97,116,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,109,101,100,105,97,105,110,102,111,95,114,101,97,100,101,114,95,115,116,97,116,117,115,0,120,109,109,115,99,95,115,105,103,110,97,108,95,109,101,100,105,97,105,110,102,111,95,114,101,97,100,101,114,95,117,110,105,110,100,101,120,101,100,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,105,110,105,116,0,0,0,0,0,0,119,105,116,104,32,78,85,76,76,32,99,108,105,101,110,116,110,97,109,101,0,0,0,0,99,108,105,101,110,116,110,97,109,101,32,99,111,110,116,97,105,110,115,32,105,110,118,97,108,105,100,32,99,104,97,114,115,44,32,106,117,115,116,32,97,108,112,104,97,110,117,109,101,114,105,99,32,99,104,97,114,115,32,97,114,101,32,97,108,108,111,119,101,100,33,0,120,109,109,115,99,95,99,111,110,110,101,99,116,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,37,115,0,0,0,0,0,0,120,109,109,115,50,100,32,105,115,32,110,111,116,32,114,117,110,110,105,110,103,46,0,0,120,109,109,115,99,95,100,105,115,99,111,110,110,101,99,116,95,99,97,108,108,98,97,99,107,95,115,101,116,95,102,117,108,108,0,0,0,0,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,120,109,109,115,99,95,103,101,116,95,108,97,115,116,95,101,114,114,111,114,0,0,0,0,120,109,109,115,99,95,117,110,114,101,102,0,0,0,0,0,119,105,116,104,32,97,32,102,114,101,101,100,32,99,111,110,110,101,99,116,105,111,110,0,120,109,109,115,99,95,114,101,102,0,0,0,0,0,0,0,120,109,109,115,99,95,108,111,99,107,95,115,101,116,0,0,120,109,109,115,99,95,113,117,105,116,0,0,0,0,0,0,120,109,109,115,99,95,98,114,111,97,100,99,97,115,116,95,113,117,105,116,0,0,0,0,120,109,109,115,99,95,105,111,95,119,97,110,116,95,111,117,116,0,0,0,0,0,0,0,120,109,109,115,99,95,105,111,95,111,117,116,95,104,97,110,100,108,101,0,0,0,0,0,119,105,116,104,111,117,116,32,112,101,110,100,105,110,103,32,111,117,116,112,117,116,0,0,120,109,109,115,99,95,105,111,95,105,110,95,104,97,110,100,108,101,0,0,0,0,0,0,97,108,116,104,111,117,103,104,32,116,104,101,32,120,109,109,115,50,32,100,97,101,109,111,110,32,105,115,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,0,0,0,0,0,120,109,109,115,99,95,105,111,95,102,100,95,103,101,116,0,120,109,109,115,99,95,105,111,95,110,101,101,100,95,111,117,116,95,99,97,108,108,98,97,99,107,95,115,101,116,95,102,117,108,108,0,0,0,0,0,120,109,109,115,99,95,105,111,95,100,105,115,99,111,110,110,101,99,116,0,0,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,120,102,111,114,109,95,109,101,100,105,97,95,98,114,111,119,115,101,0,0,0,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,119,105,116,104,32,97,32,78,85,76,76,32,117,114,108,0,120,109,109,115,99,95,120,102,111,114,109,95,109,101,100,105,97,95,98,114,111,119,115,101,95,101,110,99,111,100,101,100,0,0,0,0,0,0,0,0,119,105,116,104,32,97,32,110,111,110,32,101,110,99,111,100,101,100,32,117,114,108,0,0,67,104,101,99,107,32,39,37,115,39,32,102,97,105,108,101,100,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,0,0,0,0,113,117,101,117,101,0,0,0,120,95,113,117,101,117,101,95,102,114,101,101,0,0,0,0,115,114,99,47,99,108,105,101,110,116,115,47,108,105,98,47,120,109,109,115,99,108,105,101,110,116,47,120,113,117,101,117,101,46,99,0,0,0,0,0,120,95,113,117,101,117,101,95,112,117,115,104,95,104,101,97,100,0,0,0,0,0,0,0,120,95,113,117,101,117,101,95,112,117,115,104,95,116,97,105,108,0,0,0,0,0,0,0,120,95,113,117,101,117,101,95,112,111,112,95,104,101,97,100,0,0,0,0,0,0,0,0,120,95,113,117,101,117,101,95,112,111,112,95,116,97,105,108,0,0,0,0,0,0,0,0,120,95,113,117,101,117,101,95,112,101,101,107,95,104,101,97,100,0,0,0,0,0,0,0,120,95,113,117,101,117,101,95,112,101,101,107,95,116,97,105,108,0,0,0,0,0,0,0,120,95,113,117,101,117,101,95,105,115,95,101,109,112,116,121,0,0,0,0,0,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,118,101,114,115,105,111,110,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,105,110,105,116,0,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,32,97,116,32,37,115,58,37,100,0,0,0,0,115,114,99,47,99,108,105,101,110,116,115,47,108,105,98,47,120,109,109,115,99,108,105,101,110,116,47,118,105,115,117,97,108,105,122,97,116,105,111,110,47,99,108,105,101,110,116,46,99,0,0,0,0,0,0,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,105,110,105,116,95,104,97,110,100,108,101,0,110,111,110,32,118,105,115,32,114,101,115,117,108,116,63,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,115,116,97,114,116,0,0,0,0,0,0,0,119,105,116,104,32,117,110,114,101,103,105,115,116,101,114,101,100,47,117,110,99,111,110,110,101,99,116,101,100,32,118,105,115,117,97,108,105,122,97,116,105,111,110,32,100,97,116,97,115,101,116,0,0,0,0,0,111,117,116,32,111,102,32,115,101,113,117,101,110,99,101,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,115,116,97,114,116,95,104,97,110,100,108,101,0,0,0,0,0,0,0,0,83,101,114,118,101,114,32,100,111,101,115,110,39,116,32,115,117,112,112,111,114,116,32,111,114,32,99,111,117,108,100,110,39,116,32,97,116,116,97,99,104,32,115,104,97,114,101,100,32,109,101,109,111,114,121,33,0,0,0,0,0,0,0,0,83,101,114,118,101,114,32,100,111,101,115,110,39,116,32,115,117,112,112,111,114,116,32,111,114,32,99,111,117,108,100,110,39,116,32,115,101,116,117,112,32,85,68,80,33,0,0,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,115,116,97,114,116,101,100,0,0,0,0,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,101,114,114,111,114,101,100,0,0,0,0,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,112,114,111,112,101,114,116,121,95,115,101,116,0,0,0,0,0,0,0,0,119,105,116,104,32,117,110,114,101,103,105,115,116,101,114,101,100,32,118,105,115,117,97,108,105,122,97,116,105,111,110,32,100,97,116,97,115,101,116,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,112,114,111,112,101,114,116,105,101,115,95,115,101,116,0,0,0,0,0,0,119,105,116,104,32,78,85,76,76,32,112,114,111,112,101,114,116,121,32,108,105,115,116,0,119,105,116,104,32,112,114,111,112,101,114,116,121,32,108,105,115,116,32,111,102,32,105,110,118,97,108,105,100,32,116,121,112,101,0,0,0,0,0,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,115,104,117,116,100,111,119,110,0,0,0,0,120,109,109,115,99,95,118,105,115,117,97,108,105,122,97,116,105,111,110,95,99,104,117,110,107,95,103,101,116,0,0,0,37,115,32,119,97,115,32,99,97,108,108,101,100,32,37,115,0,0,0,0,0,0,0,0,115,101,116,117,112,95,117,100,112,95,112,114,101,112,97,114,101,0,0,0,0,0,0,0,119,105,116,104,32,97,32,78,85,76,76,32,99,111,110,110,101,99,116,105,111,110,0,0,119,105,116,104,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,104,97,116,32,105,115,110,39,116,32,99,111,110,110,101,99,116,101,100,0,0,115,101,116,117,112,95,117,100,112,95,104,97,110,100,108,101,0,0,0,0,0,0,0,0,110,111,110,32,118,105,115,32,114,101,115,117,108,116,63,0,83,121,110,99,105,110,103,32,0,0,0,0,0,0,0,0,32,100,111,110,101,46,0,0,37,100,0,0,0,0,0,0,108,111,99,97,108,104,111,115,116,0,0,0,0,0,0,0,67,111,117,108,100,110,39,116,32,115,101,116,117,112,32,115,111,99,107,101,116,33,0,0,67,111,117,108,100,32,110,111,116,32,99,111,110,110,101,99,116,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,32,114,101,116,117,114,110,32,120,109,109,115,99,95,101,109,115,99,114,105,112,116,101,110,95,106,115,95,99,97,108,108,98,97,99,107,40,36,48,44,32,36,49,41,59,32,125,0,0,0,0,0,0,0,0,18,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,17,34,35,36,17,37,38,39,40,41,42,43,44,17,45,46,47,16,16,48,16,16,16,16,16,16,16,49,50,51,16,52,53,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,54,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,55,17,17,17,17,56,17,57,58,59,60,61,62,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,64,65,17,66,67,68,69,70,71,72,73,16,16,16,74,75,76,77,78,16,16,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,17,17,17,82,83,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,85,16,16,16,16,86,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,87,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,88,89,90,91,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,92,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,4,32,4,255,255,127,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,255,3,0,31,80,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,223,60,64,215,255,255,251,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,254,255,255,255,127,2,254,255,255,255,255,0,0,0,0,0,255,191,182,0,255,255,255,7,7,0,0,0,255,7,255,255,255,255,255,255,255,254,255,195,255,255,255,255,255,255,255,255,255,255,255,255,239,31,254,225,255,159,0,0,255,255,255,255,255,255,0,224,255,255,255,255,255,255,255,255,255,255,255,255,3,0,255,255,255,255,255,7,48,4,255,255,255,252,255,31,0,0,255,255,255,1,0,0,0,0,0,0,0,0,253,31,0,0,0,0,0,0,240,3,255,127,255,255,255,255,255,255,255,239,255,223,225,255,207,255,254,254,238,159,249,255,255,253,197,227,159,89,128,176,207,255,3,0,238,135,249,255,255,253,109,195,135,25,2,94,192,255,63,0,238,191,251,255,255,253,237,227,191,27,1,0,207,255,0,0,238,159,249,255,255,253,237,227,159,25,192,176,207,255,2,0,236,199,61,214,24,199,255,195,199,29,129,0,192,255,0,0,238,223,253,255,255,253,239,227,223,29,96,3,207,255,0,0,236,223,253,255,255,253,239,227,223,29,96,64,207,255,6,0,236,223,253,255,255,255,255,231,223,93,128,0,207,255,0,252,236,255,127,252,255,255,251,47,127,128,95,255,0,0,12,0,254,255,255,255,255,127,255,7,63,32,255,3,0,0,0,0,150,37,240,254,174,236,255,59,95,32,255,243,0,0,0,0,1,0,0,0,255,3,0,0,255,254,255,255,255,31,254,255,3,255,255,254,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,249,255,3,255,255,231,193,255,255,127,64,255,51,255,255,255,255,191,32,255,255,255,255,255,247,255,255,255,255,255,255,255,255,255,61,127,61,255,255,255,255,255,61,255,255,255,255,61,127,61,255,127,255,255,255,255,255,255,255,61,255,255,255,255,255,255,255,255,135,0,0,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,31,0,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,255,254,255,255,7,255,255,255,255,255,255,255,255,255,199,1,0,255,223,15,0,255,255,15,0,255,255,15,0,255,223,13,0,255,255,255,255,255,255,207,255,255,1,128,16,255,3,0,0,0,0,255,3,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,7,255,255,255,255,255,255,255,255,63,0,255,255,255,31,255,15,255,1,192,255,255,255,255,63,31,0,255,255,255,255,255,15,255,255,255,3,255,3,0,0,0,0,255,255,255,15,255,255,255,255,255,255,255,127,254,255,31,0,255,3,255,3,128,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,239,255,239,15,255,3,0,0,0,0,255,255,255,255,255,243,255,255,255,255,255,255,191,255,3,0,255,255,255,255,255,255,63,0,255,227,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,222,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,255,255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,132,252,47,62,80,189,255,243,224,67,0,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,0,255,255,255,255,255,127,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,120,12,0,255,255,255,255,191,32,255,255,255,255,255,255,255,128,0,0,255,255,127,0,127,127,127,127,127,127,127,127,255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,254,3,62,31,254,255,255,255,255,255,255,255,255,255,127,224,254,255,255,255,255,255,255,255,255,255,255,247,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,63,255,31,255,255,255,15,0,0,255,255,255,255,255,127,240,143,255,255,255,128,255,255,255,255,255,255,255,255,255,255,0,0,0,0,128,255,252,255,255,255,255,255,255,255,255,255,255,255,255,121,15,0,255,7,0,0,0,0,0,0,0,0,0,255,187,247,255,255,255,0,0,0,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,15,0,255,3,0,0,252,8,255,255,255,255,255,7,255,255,255,255,7,0,255,255,255,31,255,255,255,255,255,255,247,255,0,128,255,3,0,0,0,0,255,255,255,255,255,255,127,0,255,63,255,3,255,255,127,4,255,255,255,255,255,255,255,127,5,0,0,56,255,255,60,0,126,126,126,0,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,7,255,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,0,127,0,248,224,255,253,127,95,219,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,248,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,255,3,254,255,255,7,254,255,255,7,192,255,255,255,255,255,255,255,255,255,255,127,252,252,252,28,0,0,0,0,255,239,255,255,127,255,255,183,255,63,255,63,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,255,255,255,255,255,255,1,0,0,0,0,0,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,63,255,255,255,255,15,255,62,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,3,0,0,0,0,0,0,0,0,0,0,63,253,255,255,255,255,191,145,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,63,0,255,255,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,111,240,239,254,255,255,15,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,255,63,0,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,192,255,0,0,252,255,255,255,255,255,255,1,0,0,255,255,255,1,255,3,255,255,255,255,255,255,199,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,30,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,31,0,255,255,255,255,255,127,0,0,248,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,223,100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,255,123,95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,253,255,255,247,255,255,255,247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,255,255,255,253,255,255,247,207,255,255,255,255,255,255,239,255,255,255,150,254,247,10,132,234,150,170,150,247,247,94,255,251,255,15,238,251,255,15,0,0,0,0,0,0,0,0,97,108,110,117,109,0,97,108,112,104,97,0,98,108,97,110,107,0,99,110,116,114,108,0,100,105,103,105,116,0,103,114,97,112,104,0,108,111,119,101,114,0,112,114,105,110,116,0,112,117,110,99,116,0,115,112,97,99,101,0,117,112,112,101,114,0,120,100,105,103,105,116,0,0,0,0,0,0,0,0,18,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,16,16,34,35,16,36,37,38,39,40,41,42,43,16,44,45,46,17,47,48,17,17,49,17,17,17,50,51,52,53,54,55,56,57,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,59,16,60,61,62,63,64,65,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,66,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,68,16,69,70,71,16,72,16,73,16,16,16,16,74,75,76,77,16,16,78,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,82,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,83,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,84,85,86,87,16,16,88,89,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,90,16,91,92,93,94,95,96,97,98,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,254,255,0,252,1,0,0,248,1,0,0,120,0,0,0,0,255,251,223,251,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,252,255,224,175,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,32,64,176,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,134,254,255,255,255,0,64,73,0,0,0,0,0,24,0,223,255,0,200,0,0,0,0,0,0,0,1,0,60,0,0,0,0,0,0,0,0,0,0,0,0,16,224,1,30,0,96,255,191,0,0,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,207,3,0,0,0,3,0,32,255,127,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,0,0,16,0,32,30,0,48,0,1,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,252,15,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,3,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,253,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,255,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,63,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,16,0,0,0,0,0,0,128,0,128,192,223,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,254,255,255,255,0,252,255,255,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,192,255,223,255,7,0,0,0,0,0,0,0,0,0,0,128,6,0,252,0,0,24,62,0,0,128,191,0,204,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,96,255,255,255,31,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,1,0,0,24,0,0,0,0,0,0,0,0,0,56,0,0,0,0,16,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,254,127,47,0,0,255,3,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,255,255,255,255,0,0,0,192,0,0,0,0,0,0,0,0,1,0,224,159,0,0,0,0,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,252,255,255,255,31,0,0,0,0,0,12,0,0,0,0,0,0,64,0,12,240,0,0,0,0,0,0,192,248,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,255,0,255,255,255,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,3,224,0,224,0,224,0,96,128,248,255,255,255,252,255,255,255,255,255,127,31,252,241,127,255,127,0,0,255,255,255,3,0,0,255,255,255,255,1,0,123,3,208,193,175,66,0,12,31,188,255,255,0,0,0,0,0,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,127,0,0,0,255,7,0,0,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,252,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,135,3,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,255,15,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,30,255,255,255,1,252,193,224,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,255,255,255,255,15,0,0,0,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,0,0,0,0,0,0,192,0,224,0,0,0,0,0,0,0,0,0,0,0,128,15,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,127,0,3,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,8,0,0,0,15,255,3,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,16,192,0,0,255,255,3,7,0,0,0,0,0,248,0,0,0,0,8,128,0,0,0,0,0,0,0,0,0,0,8,0,255,63,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,128,11,0,0,0,0,0,0,0,128,2,0,0,192,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
	/* memory initializer */ allocate([128,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,255,255,255,3,127,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,254,255,0,252,1,0,0,248,1,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,0,48,135,255,255,255,255,255,143,255,0,0,0,0,0,0,224,255,255,7,255,15,0,0,0,0,0,0,255,255,255,255,255,63,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,143,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,255,0,255,1,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,63,252,255,63,0,0,0,3,0,0,0,0,0,0,254,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,127,0,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,8,0,0,0,8,0,0,32,0,0,0,32,0,0,128,0,0,0,128,0,0,0,2,0,0,0,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,127,254,127,254,255,254,255,0,0,0,0,255,7,255,255,255,127,255,255,255,255,255,255,255,15,255,255,255,255,255,7,0,0,0,0,0,0,0,0,192,255,255,255,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,191,255,255,255,255,255,255,255,255,31,255,255,15,0,255,255,255,255,223,7,0,0,255,255,1,0,255,255,255,255,255,255,255,127,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,30,255,255,255,255,255,255,255,63,15,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,255,255,255,255,255,225,255,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,133,0,0,0,0,32,0,0,1,32,0,0,2,32,0,0,3,32,0,0,4,32,0,0,5,32,0,0,6,32,0,0,8,32,0,0,9,32,0,0,10,32,0,0,40,32,0,0,41,32,0,0,95,32,0,0,0,48,0,0,0,0,0,0,65,0,32,26,192,0,32,31,0,1,1,47,50,1,1,5,57,1,1,15,74,1,1,45,121,1,1,5,112,3,1,3,145,3,32,17,163,3,32,9,0,4,80,16,16,4,32,32,96,4,1,33,138,4,1,53,193,4,1,13,208,4,1,63,20,5,1,19,49,5,48,38,160,1,1,5,179,1,1,3,205,1,1,15,222,1,1,17,248,1,1,39,34,2,1,17,216,3,1,23,0,30,1,149,160,30,1,95,8,31,248,8,24,31,248,6,40,31,248,8,56,31,248,8,72,31,248,6,104,31,248,8,136,31,248,8,152,31,248,8,168,31,248,8,184,31,248,2,186,31,182,2,200,31,170,4,216,31,248,2,218,31,156,2,232,31,248,2,234,31,144,2,248,31,128,2,250,31,130,2,70,2,1,9,16,5,1,3,96,33,16,16,0,44,48,47,103,44,1,5,128,44,1,99,235,44,1,3,64,166,1,45,128,166,1,23,34,167,1,13,50,167,1,61,121,167,1,3,126,167,1,9,144,167,1,3,160,167,1,9,33,255,32,26,0,0,0,0,73,0,49,1,83,0,127,1,48,1,105,0,120,1,255,0,129,1,83,2,130,1,131,1,132,1,133,1,134,1,84,2,135,1,136,1,137,1,86,2,138,1,87,2,139,1,140,1,142,1,221,1,143,1,89,2,144,1,91,2,145,1,146,1,147,1,96,2,148,1,99,2,150,1,105,2,151,1,104,2,152,1,153,1,156,1,111,2,157,1,114,2,159,1,117,2,166,1,128,2,167,1,168,1,169,1,131,2,172,1,173,1,174,1,136,2,175,1,176,1,177,1,138,2,178,1,139,2,183,1,146,2,184,1,185,1,188,1,189,1,196,1,198,1,196,1,197,1,197,1,198,1,199,1,201,1,199,1,200,1,200,1,201,1,202,1,204,1,202,1,203,1,203,1,204,1,241,1,243,1,241,1,242,1,242,1,243,1,244,1,245,1,246,1,149,1,247,1,191,1,32,2,158,1,134,3,172,3,136,3,173,3,137,3,174,3,138,3,175,3,140,3,204,3,142,3,205,3,143,3,206,3,153,3,69,3,153,3,190,31,163,3,194,3,247,3,248,3,250,3,251,3,96,30,155,30,223,0,223,0,158,30,223,0,89,31,81,31,91,31,83,31,93,31,85,31,95,31,87,31,188,31,179,31,204,31,195,31,236,31,229,31,252,31,243,31,58,2,101,44,59,2,60,2,61,2,154,1,62,2,102,44,65,2,66,2,67,2,128,1,68,2,137,2,69,2,140,2,244,3,184,3,249,3,242,3,253,3,123,3,254,3,124,3,255,3,125,3,192,4,207,4,38,33,201,3,42,33,107,0,43,33,229,0,50,33,78,33,131,33,132,33,96,44,97,44,98,44,107,2,99,44,125,29,100,44,125,2,109,44,81,2,110,44,113,2,111,44,80,2,112,44,82,2,114,44,115,44,117,44,118,44,126,44,63,2,127,44,64,2,242,44,243,44,125,167,121,29,139,167,140,167,141,167,101,2,170,167,102,2,199,16,39,45,205,16,45,45,118,3,119,3,156,3,181,0,146,3,208,3,152,3,209,3,166,3,213,3,160,3,214,3,154,3,240,3,161,3,241,3,149,3,245,3,207,3,215,3,0,0,0,0,0,0,0,0,116,111,117,112,112,101,114,0,116,111,108,111,119,101,114,0,16,16,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,16,16,32,16,16,16,33,34,35,36,37,38,39,16,16,40,16,16,16,16,16,16,16,16,16,16,16,41,42,16,16,43,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,44,16,45,46,47,48,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,49,16,16,50,51,16,52,16,16,16,16,16,16,16,16,53,16,16,16,16,16,54,55,16,16,16,16,56,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,57,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,59,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,191,182,0,0,0,0,0,0,0,31,0,255,7,0,0,0,0,0,248,255,255,0,0,1,0,0,0,0,0,0,0,0,0,0,0,192,191,159,61,0,0,0,128,2,0,0,0,255,255,255,7,0,0,0,0,0,0,0,0,0,0,192,255,1,0,0,0,0,0,0,248,15,0,0,0,192,251,239,62,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,255,255,127,7,0,0,0,0,0,0,20,254,33,254,0,12,0,0,0,2,0,0,0,0,0,0,16,30,32,0,0,12,0,0,0,6,0,0,0,0,0,0,16,134,57,2,0,0,0,35,0,6,0,0,0,0,0,0,16,190,33,0,0,12,0,0,0,2,0,0,0,0,0,0,144,30,32,64,0,12,0,0,0,4,0,0,0,0,0,0,0,1,32,0,0,0,0,0,0,0,0,0,0,0,0,0,192,193,61,96,0,12,0,0,0,0,0,0,0,0,0,0,144,64,48,0,0,12,0,0,0,0,0,0,0,0,0,0,0,30,32,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,4,92,0,0,0,0,0,0,0,0,0,0,0,242,7,128,127,0,0,0,0,0,0,0,0,0,0,0,0,242,27,0,63,0,0,0,0,0,0,0,0,0,3,0,0,160,2,0,0,0,0,0,0,254,127,223,224,255,254,255,255,255,31,64,0,0,0,0,0,0,0,0,0,0,0,0,224,253,102,0,0,0,195,1,0,30,0,100,32,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,28,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,176,63,64,254,15,32,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,1,4,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,0,0,0,0,64,127,229,31,248,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,208,23,4,0,0,0,0,248,15,0,3,0,0,0,60,11,0,0,0,0,0,0,64,163,3,0,0,0,0,0,0,240,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,255,253,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,248,0,0,0,124,0,0,0,0,0,0,31,252,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,247,63,0,0,0,128,0,0,0,0,0,0,0,0,0,0,3,0,68,8,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,255,255,3,0,0,0,0,0,192,63,0,0,128,255,3,0,0,0,0,0,7,0,0,0,0,0,200,19,0,0,0,0,0,0,0,0,0,0,0,0,0,126,102,0,8,16,0,0,0,0,0,0,0,0,0,0,0,0,157,193,2,0,0,0,0,48,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,33,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,110,240,0,0,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,255,127,0,0,0,0,0,0,0,3,0,0,0,0,0,120,38,0,0,0,0,0,0,0,0,7,0,0,0,128,239,31,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,192,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,248,255,231,15,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,19,16,16,16,16,16,16,16,16,16,16,20,21,22,23,24,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,25,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,26,16,16,16,16,27,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,28,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,16,16,16,29,30,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,31,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,32,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,255,255,255,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,255,255,255,255,255,7,255,255,255,255,15,0,255,255,255,255,255,127,255,255,255,255,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,0,0,255,3,0,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,58,32,0,0,0,0,0,0,117,116,102,56,0,0,200,119,99,104,97,114,116,0,0,198,117,99,115,50,0,117,99,115,50,98,101,0,0,196,117,99,115,50,108,101,0,0,197,117,116,102,49,54,0,117,116,102,49,54,98,101,0,0,194,117,116,102,49,54,108,101,0,0,193,117,99,115,52,0,117,99,115,52,98,101,0,117,116,102,51,50,0,117,116,102,51,50,98,101,0,0,192,117,99,115,52,108,101,0,117,116,102,51,50,108,101,0,0,195,97,115,99,105,105,0,117,115,97,115,99,105,105,0,105,115,111,54,52,54,0,105,115,111,54,52,54,117,115,0,0,199,101,117,99,106,112,0,0,208,115,104,105,102,116,106,105,115,0,115,106,105,115,0,0,209,103,98,49,56,48,51,48,0,0,216,103,98,107,0,0,217,103,98,50,51,49,50,0,0,218,98,105,103,53,0,98,105,103,102,105,118,101,0,99,112,57,53,48,0,98,105,103,53,104,107,115,99,115,0,0,224,101,117,99,107,114,0,107,115,99,53,54,48,49,0,107,115,120,49,48,48,49,0,99,112,57,52,57,0,0,232,105,115,111,56,56,53,57,49,0,108,97,116,105,110,49,0,0,128,105,115,111,56,56,53,57,50,0,0,32,0,84,0,137,18,0,32,1,6,0,0,152,65,134,26,127,0,48,72,32,0,88,32,201,18,0,36,17,198,35,0,156,81,198,26,128,80,66,136,32,90,0,0,192,4,0,16,113,1,0,29,0,112,2,0,41,0,0,192,7,33,48,1,5,0,0,88,1,0,0,94,208,1,128,29,0,0,128,6,0,91,0,0,0,5,0,20,129,1,0,30,0,128,2,0,42,0,0,0,8,34,52,17,5,0,0,92,1,0,0,95,212,1,192,29,0,0,144,70,36,105,115,111,56,56,53,57,51,0,0,32,0,212,0,9,0,0,4,48,3,0,0,244,64,70,11,63,0,16,64,32,0,216,0,0,0,0,0,64,3,0,0,248,80,134,11,64,0,16,128,32,0,0,0,64,0,0,108,144,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,188,0,0,0,43,0,0,0,0,0,200,33,6,0,0,0,0,64,0,0,112,160,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,192,0,0,0,44,0,0,0,0,0,204,49,70,36,105,115,111,56,56,53,57,52,0,0,32,0,84,48,4,23,0,220,96,4,0,0,152,49,66,12,108,0,48,8,0,0,88,32,73,23,0,224,112,196,35,0,156,65,130,12,109,72,65,200,20,17,0,0,0,0,0,0,0,192,14,29,0,112,2,0,37,0,0,64,14,33,56,65,69,16,0,0,0,0,0,0,224,1,0,0,0,184,1,7,0,18,0,0,0,0,0,0,0,0,15,30,0,128,2,0,38,0,0,128,14,34,60,81,133,16,0,0,0,0,0,0,228,1,0,0,0,188,17,71,36,105,115,111,56,56,53,57,53,0,0,32,0,136,51,14,57,229,152,115,14,58,233,168,179,14,59,237,0,224,206,59,240,196,35,207,60,244,212,99,207,61,248,228,163,207,62,252,244,227,207,63,0,5,36,208,64,4,21,100,208,65,8,37,164,208,66,12,53,228,208,67,16,69,36,209,68,20,85,100,209,69,24,101,164,209,70,28,117,228,209,71,32,133,36,210,72,36,149,100,210,73,40,165,164,210,74,44,181,228,210,75,53,194,20,147,76,51,209,84,147,77,55,225,148,147,78,59,13,192,83,79,105,115,111,56,56,53,57,54,0,0,32,0,4,16,64,0,0,4,16,64,0,1,4,16,64,0,115,1,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,0,93,1,4,16,64,93,1,216,117,23,94,121,233,181,23,95,125,249,245,23,96,129,9,54,24,97,133,25,118,24,98,137,41,182,24,99,141,57,246,88,0,1,4,16,64,0,144,69,38,217,100,148,85,102,217,101,152,101,166,217,102,156,117,230,217,103,160,133,38,90,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,105,115,111,56,56,53,57,55,0,0,32,0,144,88,34,0,51,210,8,0,0,0,0,160,9,0,0,0,16,128,136,0,0,0,0,0,155,112,210,9,0,158,124,2,10,0,161,0,32,202,40,164,148,98,202,41,168,164,162,202,42,172,180,226,202,43,176,196,34,203,44,180,212,18,128,45,183,224,146,139,46,187,240,210,139,47,191,0,19,140,48,195,16,83,140,49,199,32,147,140,50,203,48,211,140,51,207,64,19,141,52,211,80,83,141,53,215,96,147,141,54,219,112,211,141,55,223,128,19,78,0,105,115,111,56,56,53,57,56,0,0,32,0,4,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,192,136,83,81,85,149,85,87,97,149,149,86,91,113,213,149,87,95,129,21,150,88,99,145,85,150,89,103,161,149,150,90,107,177,213,86,0,1,120,248,97,0,105,115,111,56,56,53,57,57,0,0,80,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,80,6,0,105,115,111,56,56,53,57,49,48,0,0,32,0,84,48,66,12,57,220,16,4,0,70,132,96,6,27,131,0,0,135,20,0,88,64,130,12,58,224,32,4,0,71,136,112,70,27,132,136,24,199,20,17,0,0,0,0,0,0,0,192,14,29,0,112,2,0,37,0,0,0,0,0,56,65,5,0,0,0,0,128,27,0,224,1,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,15,30,0,128,2,0,38,0,0,0,0,0,60,81,5,0,0,0,0,192,27,0,228,1,0,0,0,0,0,192,16,105,115,111,56,56,53,57,49,49,0,116,105,115,54,50,48,0,0,32,0,188,6,91,108,178,205,70,91,109,182,221,134,91,110,186,237,198,91,111,190,253,6,92,112,194,13,71,92,113,198,29,135,92,114,202,45,199,92,115,206,61,7,93,116,210,77,71,93,117,214,93,135,93,118,218,109,199,93,119,222,125,7,94,120,226,141,71,94,121,230,157,135,94,0,1,4,16,64,122,234,173,199,94,123,238,189,7,95,124,242,205,71,95,125,246,221,135,95,126,250,237,199,95,127,254,253,7,96,128,2,14,72,96,129,1,4,16,64,0,105,115,111,56,56,53,57,49,51,0,0,32,0,160,8,0,0,0,164,8,0,0,13,0,192,5,0,0,0,0,192,2,0,0,0,0,0,39,2,0,0,0,16,0,208,5,0,0,0,0,128,3,21,236,16,193,5,0,0,112,194,8,29,0,240,71,9,49,4,145,131,17,102,48,225,4,0,84,0,0,0,0,120,40,1,6,28,0,4,50,8,0,22,240,32,1,6,0,0,128,2,9,30,0,0,136,9,50,8,161,195,17,103,52,241,4,0,85,0,0,0,0,121,44,17,70,28,0,8,66,72,137,105,115,111,56,56,53,57,49,52,0,0,32,0,24,120,32,0,27,112,128,32,0,20,2,96,97,130,26,2,0,128,31,10,46,248,2,12,12,54,8,128,131,21,62,120,33,132,27,98,152,97,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,128,132,0,0,0,0,0,0,0,192,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,192,132,0,0,0,0,0,0,0,208,7,0,105,115,111,56,56,53,57,49,53,0,108,97,116,105,110,57,0,0,36,51,2,96,6,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,0,0,0,0,132,0,0,0,0,88,100,225,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,115,111,56,56,53,57,49,54,0,0,32,0,84,96,129,18,51,166,104,6,0,103,0,160,8,0,127,0,0,72,32,0,0,208,193,18,131,160,8,0,0,132,120,176,8,0,88,100,225,135,32,0,0,0,192,4,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,33,48,1,0,0,0,88,1,0,24,118,0,0,0,0,0,156,192,8,0,0,0,0,0,5,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,34,52,1,0,0,0,92,1,64,24,119,0,0,0,0,0,160,208,8,0,99,112,49,50,53,48,0,119,105,110,100,111,119,115,49,50,53,48,0,0,0,51,6,96,98,0,41,182,168,226,138,1,184,104,198,139,96,168,49,200,31,1,144,88,226,137,40,178,8,98,136,1,216,120,6,140,97,172,65,8,32,0,60,2,137,18,0,84,0,0,0,0,0,64,6,0,0,0,0,64,32,0,0,32,201,18,0,0,0,0,0,0,88,80,6,0,72,80,146,132,32,90,0,0,192,4,0,16,113,1,0,29,0,112,2,0,41,0,0,192,7,33,48,1,5,0,0,88,1,0,0,94,208,1,128,29,0,0,128,6,0,91,0,0,0,5,0,20,129,1,0,30,0,128,2,0,42,0,0,0,8,34,52,17,5,0,0,92,1,0,0,95,212,1,192,29,0,0,144,70,36,99,112,49,50,53,49,0,119,105,110,100,111,119,115,49,50,53,49,0,0,0,227,144,99,162,76,41,182,168,226,138,51,186,168,206,139,235,180,195,206,59,49,145,88,226,137,40,178,8,98,136,1,216,136,19,140,57,237,164,83,79,0,184,195,83,58,0,248,4,0,0,226,0,80,14,0,0,0,0,0,58,0,0,112,78,77,63,1,0,0,0,48,213,56,19,0,55,153,67,147,77,240,196,35,207,60,244,212,99,207,61,248,228,163,207,62,252,244,227,207,63,0,5,36,208,64,4,21,100,208,65,8,37,164,208,66,12,53,228,208,67,16,69,36,209,68,20,85,100,209,69,24,101,164,209,70,28,117,228,209,71,32,133,36,210,72,36,149,100,210,73,40,165,164,210,74,44,181,228,210,75,99,112,49,50,53,50,0,119,105,110,100,111,119,115,49,50,53,50,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,104,198,139,88,4,48,72,0,1,144,88,226,137,40,178,8,98,136,147,216,120,6,140,89,4,64,136,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,112,49,50,53,51,0,119,105,110,100,111,119,115,49,50,53,51,0,0,0,51,6,96,98,33,41,182,168,226,138,1,184,24,192,139,1,4,16,64,0,1,144,88,226,137,40,178,8,98,136,1,216,24,0,140,1,4,16,64,0,0,112,210,9,0,0,0,0,0,0,0,0,16,0,0,0,0,0,128,136,0,0,0,0,0,155,0,0,0,0,158,124,2,10,0,161,0,32,202,40,164,148,98,202,41,168,164,162,202,42,172,180,226,202,43,176,196,34,203,44,180,212,18,128,45,183,224,146,139,46,187,240,210,139,47,191,0,19,140,48,195,16,83,140,49,199,32,147,140,50,203,48,211,140,51,207,64,19,141,52,211,80,83,141,53,215,96,147,141,54,219,112,211,141,55,223,128,19,78,0,99,112,49,50,53,52,0,119,105,110,100,111,119,115,49,50,53,52,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,104,198,139,88,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,120,6,140,89,4,16,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,80,6,0,99,112,49,50,53,53,0,119,105,110,100,111,119,115,49,50,53,53,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,24,192,139,1,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,24,0,140,1,4,16,64,0,0,0,0,0,0,49,2,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,64,5,37,212,80,68,21,101,212,81,72,37,21,128,82,75,49,213,148,83,79,65,21,149,84,110,189,5,87,92,114,5,16,64,0,1,4,16,64,0,83,81,85,149,85,87,97,149,149,86,91,113,213,149,87,95,129,21,150,88,99,145,85,150,89,103,161,149,150,90,107,177,213,86,0,1,120,248,97,0,99,112,49,50,53,54,0,119,105,110,100,111,119,115,49,50,53,54,0,0,0,51,146,102,98,33,41,182,168,226,138,142,184,56,218,139,88,148,134,154,105,170,145,88,226,137,40,178,8,98,136,169,217,120,26,140,89,112,216,225,106,0,204,5,0,0,0,0,0,0,0,0,0,192,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,23,0,0,0,0,64,93,173,217,117,23,94,121,233,181,23,95,125,249,245,23,96,129,9,54,24,97,133,25,118,24,98,137,41,182,24,0,140,53,230,216,99,144,69,38,217,100,0,80,6,64,101,150,93,134,25,0,0,0,0,0,0,153,105,6,0,0,155,113,214,153,103,0,124,6,26,0,161,1,32,26,0,0,120,248,161,107,99,112,49,50,53,55,0,119,105,110,100,111,119,115,49,50,53,55,0,0,0,51,6,96,98,0,41,182,168,226,138,1,184,24,192,139,1,16,240,136,2,1,144,88,226,137,40,178,8,98,136,1,216,24,0,140,1,24,32,73,0,0,4,0,0,0,0,4,0,0,0,13,0,192,5,0,0,0,0,192,2,0,0,0,0,0,0,0,0,0,0,16,0,208,5,0,0,0,0,128,3,21,236,16,193,5,0,0,112,194,8,29,0,240,71,9,49,4,145,131,17,102,48,225,4,0,84,0,0,0,0,120,40,1,6,28,0,4,50,8,0,22,240,32,1,6,0,0,128,2,9,30,0,0,136,9,50,8,161,195,17,103,52,241,4,0,85,0,0,0,0,121,44,17,70,28,0,8,66,72,36,99,112,49,50,53,56,0,119,105,110,100,111,119,115,49,50,53,56,0,0,0,51,6,96,98,33,41,182,168,226,138,142,184,24,192,139,88,4,16,64,0,1,144,88,226,137,40,178,8,98,136,147,216,24,0,140,89,4,16,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,4,0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,33,0,128,9,0,0,24,2,0,0,0,0,0,0,0,0,32,114,9,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,150,0,0,0,0,34,0,144,9,0,0,28,2,0,0,0,0,0,0,0,0,36,34,35,0,107,111,105,56,114,0,0,0,62,254,8,100,144,66,14,73,100,145,70,30,137,164,153,103,162,153,166,154,107,178,217,38,143,110,222,136,99,142,58,238,40,64,143,7,32,144,192,3,73,42,185,36,76,76,54,233,228,147,80,70,41,229,148,84,86,105,229,149,88,102,169,165,56,91,114,217,165,151,95,130,25,166,152,99,146,89,102,1,46,65,20,145,73,20,85,68,210,68,37,97,148,145,70,27,113,212,145,71,31,189,4,82,72,34,141,100,145,68,44,173,116,17,74,45,165,116,146,74,14,193,19,143,65,244,212,67,208,60,5,225,147,143,62,251,240,211,143,63,255,60,4,80,64,2,13,100,143,60,12,45,116,15,66,13,37,116,144,66,107,111,105,56,117,0,0,0,62,254,8,100,144,66,14,73,100,145,70,30,137,164,153,103,162,153,166,154,107,178,217,38,143,110,222,136,99,142,58,238,40,64,143,7,32,144,192,3,73,42,185,36,76,51,53,89,147,77,80,70,41,229,148,84,254,100,229,149,88,102,169,165,56,229,112,121,14,58,95,130,25,166,152,99,250,84,102,1,46,65,20,145,73,20,85,68,210,68,37,97,148,145,70,27,113,212,145,71,31,189,4,82,72,34,141,100,145,68,44,173,116,17,74,45,165,116,146,74,14,193,19,143,65,244,212,67,208,60,5,225,147,143,62,251,240,211,143,63,255,60,4,80,64,2,13,100,143,60,12,45,116,15,66,13,37,116,144,66,0,0,0,0,0,0,0,0,0,48,1,48,2,48,12,255,14,255,251,48,26,255,27,255,31,255,1,255,155,48,156,48,180,0,64,255,168,0,62,255,227,255,63,255,253,48,254,48,157,48,158,48,3,48,221,78,5,48,6,48,7,48,252,48,21,32,16,32,15,255,92,0,28,48,22,32,92,255,38,32,37,32,24,32,25,32,28,32,29,32,8,255,9,255,20,48,21,48,59,255,61,255,91,255,93,255,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,11,255,18,34,177,0,215,0,247,0,29,255,96,34,28,255,30,255,102,34,103,34,30,34,52,34,66,38,64,38,176,0,50,32,51,32,3,33,229,255,4,255,162,0,163,0,5,255,3,255,6,255,10,255,32,255,167,0,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,189,37,188,37,59,32,18,48,146,33,144,33,145,33,147,33,19,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,34,40,34,172,0,210,33,212,33,0,34,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,34,165,34,18,35,2,34,7,34,97,34,82,34,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,33,48,32,111,38,109,38,106,38,32,32,33,32,182,0,0,0,0,0,0,0,0,0,239,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,0,0,0,0,0,0,0,0,0,0,0,0,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,0,0,0,0,0,0,0,0,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20519);
	/* memory initializer */ allocate([37,56,37,66,37], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30759);
	/* memory initializer */ allocate([156,78,22,85,3,90,63,150,192,84,27,97,40,99,246,89,34,144,117,132,28,131,80,122,170,96,225,99,37,110,237,101,102,132,166,130,245,155,147,104,39,87,161,101,113,98,155,91,208,89,123,134,244,152,98,125,190,125,142,155,22,98,159,124,183,136,137,91,181,94,9,99,151,102,72,104,199,149,141,151,79,103,229,78,10,79,77,79,157,79,73,80,242,86,55,89,212,89,1,90,9,92,223,96,15,97,112,97,19,102,5,105,186,112,79,117,112,117,251,121,173,125,239,125,195,128,14,132,99,136,2,139,85,144,122,144,59,83,149,78,165,78,223,87,178,128,193,144,239,120,0,78,241,88,162,110,56,144,50,122,40,131,139,130,47,156,65,81,112,83,189,84,225,84,224,86,251,89,21,95,242,152,235,109,228,128,45,133,98,150,112,150,160,150,251,151,11,84,243,83,135,91,207,112,189,127,194,143,232,150,111,83,92,157,186,122,17,78,147,120,252,129,38,110,24,86,4,85,29,107,26,133,59,156,229,89,169,83,102,109,220,116,143,149,66,86,145,78,75,144,242,150,79,131,12,153,225,83,182,85,48,91,113,95,32,102,243,102,4,104,56,108,243,108,41,109,91,116,200,118,78,122,52,152,241,130,91,136,96,138,237,146,178,109,171,117,202,118,197,153,166,96,1,139,138,141,178,149,142,105,173,83,134,81,18,87,48,88,68,89,180,91,246,94,40,96,169,99,244,99,191,108,20,111,142,112,20,113,89,113,213,113,63,115,1,126,118,130,209,130,151,133,96,144,91,146,27,157,105,88,188,101,90,108,37,117,249,81,46,89,101,89,128,95,220,95,188,98,250,101,42,106,39,107,180,107,139,115,193,127,86,137,44,157,14,157,196,158,161,92,150,108,123,131,4,81,75,92,182,97,198,129,118,104,97,114,89,78,250,79,120,83,105,96,41,110,79,122,243,151,11,78,22,83,238,78,85,79,61,79,161,79,115,79,160,82,239,83,9,86,15,89,193,90,182,91,225,91,209,121,135,102,156,103,182,103,76,107,179,108,107,112,194,115,141,121,190,121,60,122,135,123,177,130,219,130,4,131,119,131,239,131,211,131,102,135,178,138,41,86,168,140,230,143,78,144,30,151,138,134,196,79,232,92,17,98,89,114,59,117,229,129,189,130,254,134,192,140,197,150,19,153,213,153,203,78,26,79,227,137,222,86,74,88,202,88,251,94,235,95,42,96,148,96,98,96,208,97,18,98,208,98,57,101,65,155,102,102,176,104,119,109,112,112,76,117,134,118,117,125,165,130,249,135,139,149,142,150,157,140,241,81,190,82,22,89,179,84,179,91,22,93,104,97,130,105,175,109,141,120,203,132,87,136,114,138,167,147,184,154,108,109,168,153,217,134,163,87,255,103,206,134,14,146,131,82,135,86,4,84,211,94,225,98,185,100,60,104,56,104,187,107,114,115,186,120,107,122,154,137,210,137,107,141,3,143,237,144,163,149,148,150,105,151,102,91,179,92,125,105,77,152,78,152,155,99,32,123,43,106,127,106,182,104,13,156,95,111,114,82,157,85,112,96,236,98,59,109,7,110,209,110,91,132,16,137,68,143,20,78,57,156,246,83,27,105,58,106,132,151,42,104,92,81,195,122,178,132,220,145,140,147,91,86,40,157,34,104,5,131,49,132,165,124,8,82,197,130,230,116,126,78,131,79,160,81,210,91,10,82,216,82,231,82,251,93,154,85,42,88,230,89,140,91,152,91,219,91,114,94,121,94,163,96,31,97,99,97,190,97,219,99,98,101,209,103,83,104,250,104,62,107,83,107,87,108,34,111,151,111,69,111,176,116,24,117,227,118,11,119,255,122,161,123,33,124,233,125,54,127,240,127,157,128,102,130,158,131,179,137,204,138,171,140,132,144,81,148,147,149,145,149,162,149,101,150,211,151,40,153,24,130,56,78,43,84,184,92,204,93,169,115,76,118,60,119,169,92,235,127,11,141,193,150,17,152,84,152,88,152,1,79,14,79,113,83,156,85,104,86,250,87,71,89,9,91,196,91,144,92,12,94,126,94,204,95,238,99,58,103,215,101,226,101,31,103,203,104,196,104,95,106,48,94,197,107,23,108,125,108,127,117,72,121,99,91,0,122,0,125,189,95,143,137,24,138,180,140,119,141,204,142,29,143,226,152,14,154,60,155,128,78,125,80,0,81,147,89,156,91,47,98,128,98,236,100,58,107,160,114,145,117,71,121,169,127,251,135,188,138,112,139,172,99,202,131,160,151,9,84,3,84,171,85,84,104,88,106,112,138,39,120,117,103,205,158,116,83,162,91,26,129,80,134,6,144,24,78,69,78,199,78,17,79,202,83,56,84,174,91,19,95,37,96,81,101,61,103,66,108,114,108,227,108,120,112,3,116,118,122,174,122,8,123,26,125,254,124,102,125,231,101,91,114,187,83,69,92,232,93,210,98,224,98,25,99,32,110,90,134,49,138,221,141,248,146,1,111,166,121,90,155,168,78,171,78,172,78,155,79,160,79,209,80,71,81,246,122,113,81,246,81,84,83,33,83,127,83,235,83,172,85,131,88,225,92,55,95,74,95,47,96,80,96,109,96,31,99,89,101,75,106,193,108,194,114,237,114,239,119,248,128,5,129,8,130,78,133,247,144,225,147,255,151,87,153,90,154,240,78,221,81,45,92,129,102,109,105,64,92,242,102,117,105,137,115,80,104,129,124,197,80,228,82,71,87,254,93,38,147,164,101,35,107,61,107,52,116,129,121,189,121,75,123,202,125,185,130,204,131,127,136,95,137,57,139,209,143,209,145,31,84,128,146,93,78,54,80,229,83,58,83,215,114,150,115,233,119,230,130,175,142,198,153,200,153,210,153,119,81,26,97,94,134,176,85,122,122,118,80,211,91,71,144,133,150,50,78,219,106,231,145,81,92,72,92,152,99,159,122,147,108,116,151,97,143,170,122,138,113,136,150,130,124,23,104,112,126,81,104,108,147,242,82,27,84,171,133,19,138,164,127,205,142,225,144,102,83,136,136,65,121,194,79,190,80,17,82,68,81,83,85,45,87,234,115,139,87,81,89,98,95,132,95,117,96,118,97,103,97,169,97,178,99,58,100,108,101,111,102,66,104,19,110,102,117,61,122,251,124,76,125,153,125,75,126,107,127,14,131,74,131,205,134,8,138,99,138,102,139,253,142,26,152,143,157,184,130,206,143,232,155,135,82,31,98,131,100,192,111,153,150,65,104,145,80,32,107,122,108,84,111,116,122,80,125,64,136,35,138,8,103,246,78,57,80,38,80,101,80,124,81,56,82,99,82,167,85,15,87,5,88,204,90,250,94,178,97,248,97,243,98,114,99,28,105,41,106,125,114,172,114,46,115,20,120,111,120,121,125,12,119,169,128,139,137,25,139,226,140,210,142,99,144,117,147,122,150,85,152,19,154,120,158,67,81,159,83,179,83,123,94,38,95,27,110,144,110,132,115,254,115,67,125,55,130,0,138,250,138,80,150,78,78,11,80,228,83,124,84,250,86,209,89,100,91,241,93,171,94,39,95,56,98,69,101,175,103,86,110,208,114,202,124,180,136,161,128,225,128,240,131,78,134,135,138,232,141,55,146,199,150,103,152,19,159,148,78,146,78,13,79,72,83,73,84,62,84,47,90,140,95,161,95,159,96,167,104,142,106,90,116,129,120,158,138,164,138,119,139,144,145,94,78,201,155,164,78,124,79,175,79,25,80,22,80,73,81,108,81,159,82,185,82,254,82,154,83,227,83,17,84,14,84,137,85,81,87,162,87,125,89,84,91,93,91,143,91,229,93,231,93,247,93,120,94,131,94,154,94,183,94,24,95,82,96,76,97,151,98,216,98,167,99,59,101,2,102,67,102,244,102,109,103,33,104,151,104,203,105,95,108,42,109,105,109,47,110,157,110,50,117,135,118,108,120,63,122,224,124,5,125,24,125,94,125,177,125,21,128,3,128,175,128,177,128,84,129,143,129,42,130,82,131,76,136,97,136,27,139,162,140,252,140,202,144,117,145,113,146,63,120,252,146,164,149,77,150,5,152,153,153,216,154,59,157,91,82,171,82,247,83,8,84,213,88,247,98,224,111,106,140,95,143,185,158,75,81,59,82,74,84,253,86,64,122,119,145,96,157,210,158,68,115,9,111,112,129,17,117,253,95,218,96,168,154,219,114,188,143,100,107,3,152,202,78,240,86,100,87,190,88,90,90,104,96,199,97,15,102,6,102,57,104,177,104,247,109,213,117,58,125,110,130,66,155,155,78,80,79,201,83,6,85,111,93,230,93,238,93,251,103,153,108,115,116,2,120,80,138,150,147,223,136,80,87,167,94,43,99,181,80,172,80,141,81,0,103,201,84,94,88,187,89,176,91,105,95,77,98,161,99,61,104,115,107,8,110,125,112,199,145,128,114,21,120,38,120,109,121,142,101,48,125,220,131,193,136,9,143,155,150,100,82,40,87,80,103,106,127,161,140,180,81,66,87,42,150,58,88,138,105,180,128,178,84,14,93,252,87,149,120,250,157,92,79,74,82,139,84,62,100,40,102,20,103,245,103,132,122,86,123,34,125,47,147,92,104,173,155,57,123,25,83,138,81,55,82,223,91,246,98,174,100,230,100,45,103,186,107,169,133,209,150,144,118,214,155,76,99,6,147,171,155,191,118,82,102,9,78,152,80,194,83,113,92,232,96,146,100,99,101,95,104,230,113,202,115,35,117,151,123,130,126,149,134,131,139,219,140,120,145,16,153,172,101,171,102,139,107,213,78,212,78,58,79,127,79,58,82,248,83,242,83,227,85,219,86,235,88,203,89,201,89,255,89,80,91,77,92,2,94,43,94,215,95,29,96,7,99,47,101,92,91,175,101,189,101,232,101,157,103,98,107,123,107,15,108,69,115,73,121,193,121,248,124,25,125,43,125,162,128,2,129,243,129,150,137,94,138,105,138,102,138,140,138,238,138,199,140,220,140,204,150,252,152,111,107,139,78,60,79,141,79,80,81,87,91,250,91,72,97,1,99,66,102,33,107,203,110,187,108,62,114,189,116,212,117,193,120,58,121,12,128,51,128,234,129,148,132,158,143,80,108,127,158,15,95,88,139,43,157,250,122,248,142,141,91,235,150,3,78,241,83,247,87,49,89,201,90,164,91,137,96,127,110,6,111,190,117,234,140,159,91,0,133,224,123,114,80,244,103,157,130,97,92,74,133,30,126,14,130,153,81,4,92,104,99,102,141,156,101,110,113,62,121,23,125,5,128,29,139,202,142,110,144,199,134,170,144,31,80,250,82,58,92,83,103,124,112,53,114,76,145,200,145,43,147,229,130,194,91,49,95,249,96,59,78,214,83,136,91,75,98,49,103,138,107,233,114,224,115,46,122,107,129,163,141,82,145,150,153,18,81,215,83,106,84,255,91,136,99,57,106,172,125,0,151,218,86,206,83,104,84,151,91,49,92,222,93,238,79,1,97,254,98,50,109,192,121,203,121,66,125,77,126,210,127,237,129,31,130,144,132,70,136,114,137,144,139,116,142,47,143,49,144,75,145,108,145,198,150,156,145,192,78,79,79,69,81,65,83,147,95,14,98,212,103,65,108,11,110,99,115,38,126,205,145,131,146,212,83,25,89,191,91,209,109,93,121,46,126,155,124,126,88,159,113,250,81,83,136,240,143,202,79,251,92,37,102,172,119,227,122,28,130,255,153,198,81,170,95,236,101,111,105,137,107,243,109,150,110,100,111,254,118,20,125,225,93,117,144,135,145,6,152,230,81,29,82,64,98,145,102,217,102,26,110,182,94,210,125,114,127,248,102,175,133,247,133,248,138,169,82,217,83,115,89,143,94,144,95,85,96,228,146,100,150,183,80,31,81,221,82,32,83,71,83,236,83,232,84,70,85,49,85,23,86,104,89,190,89,60,90,181,91,6,92,15,92,17,92,26,92,132,94,138,94,224,94,112,95,127,98,132,98,219,98,140,99,119,99,7,102,12,102,45,102,118,102,126,103,162,104,31,106,53,106,188,108,136,109,9,110,88,110,60,113,38,113,103,113,199,117,1,119,93,120,1,121,101,121,240,121,224,122,17,123,167,124,57,125,150,128,214,131,139,132,73,133,93,136,243,136,31,138,60,138,84,138,115,138,97,140,222,140,164,145,102,146,126,147,24,148,156,150,152,151,10,78,8,78,30,78,87,78,151,81,112,82,206,87,52,88,204,88,34,91,56,94,197,96,254,100,97,103,86,103,68,109,182,114,115,117,99,122,184,132,114,139,184,145,32,147,49,86,244,87,254,152,237,98,13,105,150,107,237,113,84,126,119,128,114,130,230,137,223,152,85,135,177,143,59,92,56,79,225,79,181,79,7,85,32,90,221,91,233,91,195,95,78,97,47,99,176,101,75,102,238,104,155,105,120,109,241,109,51,117,185,117,31,119,94,121,230,121,51,125,227,129,175,130,170,133,170,137,58,138,171,142,155,143,50,144,221,145,7,151,186,78,193,78,3,82,117,88,236,88,11,92,26,117,61,92,78,129,10,138,197,143,99,150,109,151,37,123,207,138,8,152,98,145,243,86,168,83,23,144,57,84,130,87,37,94,168,99,52,108,138,112,97,119,139,124,224,127,112,136,66,144,84,145,16,147,24,147,143,150,94,116,196,154,7,93,105,93,112,101,162,103,168,141,219,150,110,99,73,103,25,105,197,131,23,152,192,150,254,136,132,111,122,100,248,91,22,78,44,112,93,117,47,102,196,81,54,82,226,82,211,89,129,95,39,96,16,98,63,101,116,101,31,102,116,102,242,104,22,104,99,107,5,110,114,114,31,117,219,118,190,124,86,128,240,88,253,136,127,137,160,138,147,138,203,138,29,144,146,145,82,151,89,151,137,101,14,122,6,129,187,150,45,94,220,96,26,98,165,101,20,102,144,103,243,119,77,122,77,124,62,126,10,129,172,140,100,141,225,141,95,142,169,120,7,82,217,98,165,99,66,100,152,98,45,138,131,122,192,123,172,138,234,150,118,125,12,130,73,135,217,78,72,81,67,83,96,83,163,91,2,92,22,92,221,93,38,98,71,98,176,100,19,104,52,104,201,108,69,109,23,109,211,103,92,111,78,113,125,113,203,101,127,122,173,123,218,125,74,126,168,127,122,129,27,130,57,130,166,133,110,138,206,140,245,141,120,144,119,144,173,146,145,146,131,149,174,155,77,82,132,85,56,111,54,113,104,81,133,121,85,126,179,129,206,124,76,86,81,88,168,92,170,99,254,102,253,102,90,105,217,114,143,117,142,117,14,121,86,121,223,121,151,124,32,125,68,125,7,134,52,138,59,150,97,144,32,159,231,80,117,82,204,83,226,83,9,80,170,85,238,88,79,89,61,114,139,91,100,92,29,83,227,96,243,96,92,99,131,99,63,99,187,99,205,100,233,101,249,102,227,93,205,105,253,105,21,111,229,113,137,78,233,117,248,118,147,122,223,124,207,125,156,125,97,128,73,131,88,131,108,132,188,132,251,133,197,136,112,141,1,144,109,144,151,147,28,151,18,154,207,80,151,88,142,97,211,129,53,133,8,141,32,144,195,79,116,80,71,82,115,83,111,96,73,99,95,103,44,110,179,141,31,144,215,79,94,92,202,140,207,101,154,125,82,83,150,136,118,81,195,99,88,91,107,91,10,92,13,100,81,103,92,144,214,78,26,89,42,89,112,108,81,138,62,85,21,88,165,89,240,96,83,98,193,103,53,130,85,105,64,150,196,153,40,154,83,79,6,88,254,91,16,128,177,92,47,94,133,95,32,96,75,97,52,98,255,102,240,108,222,110,206,128,127,129,212,130,139,136,184,140,0,144,46,144,138,150,219,158,219,155,227,78,240,83,39,89,44,123,141,145,76,152,249,157,221,110,39,112,83,83,68,85,133,91,88,98,158,98,211,98,162,108,239,111,34,116,23,138,56,148,193,111,254,138,56,131,231,81,248,134,234,83,233,83,70,79,84,144,176,143,106,89,49,129,253,93,234,122,191,143,218,104,55,140,248,114,72,156,61,106,176,138,57,78,88,83,6,86,102,87,197,98,162,99,230,101,78,107,225,109,91,110,173,112,237,119,239,122,170,123,187,125,61,128,198,128,203,134,149,138,91,147,227,86,199,88,62,95,173,101,150,102,128,106,181,107,55,117,199,138,36,80,229,119,48,87,27,95,101,96,122,102,96,108,244,117,26,122,110,127,244,129,24,135,69,144,179,153,201,123,92,117,249,122,81,123,196,132,16,144,233,121,146,122,54,131,225,90,64,119,45,78,242,78,153,91,224,95,189,98,60,102,241,103,232,108,107,134,119,136,59,138,78,145,243,146,208,153,23,106,38,112,42,115,231,130,87,132,175,140,1,78,70,81,203,81,139,85,245,91,22,94,51,94,129,94,20,95,53,95,107,95,180,95,242,97,17,99,162,102,29,103,110,111,82,114,58,117,58,119,116,128,57,129,120,129,118,135,191,138,220,138,133,141,243,141,154,146,119,149,2,152,229,156,197,82,87,99,244,118,21,103,136,108,205,115,195,140,174,147,115,150,37,109,156,88,14,105,204,105,253,143,154,147,219,117,26,144,90,88,2,104,180,99,251,105,67,79,44,111,216,103,187,143,38,133,180,125,84,147,63,105,112,111,106,87,247,88,44,91,44,125,42,114,10,84,227,145,180,157,173,78,78,79,92,80,117,80,67,82,158,140,72,84,36,88,154,91,29,94,149,94,173,94,247,94,31,95,140,96,181,98,58,99,208,99,175,104,64,108,135,120,142,121,11,122,224,125,71,130,2,138,230,138,68,142,19,144,184,144,45,145,216,145,14,159,229,108,88,100,226,100,117,101,244,110,132,118,27,123,105,144,209,147,186,110,242,84,185,95,164,100,77,143,237,143,68,146,120,81,107,88,41,89,85,92,151,94,251,109,143,126,28,117,188,140,226,142,91,152,185,112,29,79,191,107,177,111,48,117,251,150,78,81,16,84,53,88,87,88,172,89,96,92,146,95,151,101,92,103,33,110,123,118,223,131,237,140,20,144,253,144,77,147,37,120,58,120,170,82,166,94,31,87,116,89,18,96,18,80,90,81,172,81,205,81,0,82,16,85,84,88,88,88,87,89,149,91,246,92,139,93,188,96,149,98,45,100,113,103,67,104,188,104,223,104,215,118,216,109,111,110,155,109,111,112,200,113,83,95,216,117,119,121,73,123,84,123,82,123,214,124,113,125,48,82,99,132,105,133,228,133,14,138,4,139,70,140,15,142,3,144,15,144,25,148,118,150,45,152,48,154,216,149,205,80,213,82,12,84,2,88,14,92,167,97,158,100,30,109,179,119,229,122,244,128,4,132,83,144,133,146,224,92,7,157,63,83,151,95,179,95,156,109,121,114,99,119,191,121,228,123,210,107,236,114,173,138,3,104,97,106,248,81,129,122,52,105,74,92,246,156,235,130,197,91,73,145,30,112,120,86,111,92,199,96,102,101,140,108,90,140,65,144,19,152,81,84,199,102,13,146,72,89,163,144,133,81,77,78,234,81,153,133,14,139,88,112,122,99,75,147,98,105,180,153,4,126,119,117,87,83,96,105,223,142,227,150,93,108,140,78,60,92,16,95,233,143,2,83,209,140,137,128,121,134,255,94,229,101,115,78,101,81,130,89,63,92,238,151,251,78,138,89,205,95,141,138,225,111,176,121,98,121,231,91,113,132,43,115,177,113,116,94,245,95,123,99,154,100,195,113,152,124,67,78,252,94,75,78,220,87,162,86,169,96,195,111,13,125,253,128,51,129,191,129,178,143,151,137,164,134,244,93,138,98,173,100,135,137,119,103,226,108,62,109,54,116,52,120,70,90,117,127,173,130,172,153,243,79,195,94,221,98,146,99,87,101,111,103,195,118,76,114,204,128,186,128,41,143,77,145,13,80,249,87,146,90,133,104,115,105,100,113,253,114,183,140,242,88,224,140,106,150,25,144,127,135,228,121,231,119,41,132,47,79,101,82,90,83,205,98,207,103,202,108,125,118,148,123,149,124,54,130,132,133,235,143,221,102,32,111,6,114,27,126,171,131,193,153,166,158,253,81,177,123,114,120,184,123,135,128,72,123,232,106,97,94,140,128,81,117,96,117,107,81,98,146,140,110,122,118,151,145,234,154,16,79,112,127,156,98,79,123,165,149,233,156,122,86,89,88,228,134,188,150,52,79,36,82,74,83,205,83,219,83,6,94,44,100,145,101,127,103,62,108,78,108,72,114,175,114,237,115,84,117,65,126,44,130,233,133,169,140,196,123,198,145,105,113,18,152,239,152,61,99,105,102,106,117,228,118,208,120,67,133,238,134,42,83,81,83,38,84,131,89,135,94,124,95,178,96,73,98,121,98,171,98,144,101,212,107,204,108,178,117,174,118,145,120,216,121,203,125,119,127,165,128,171,136,185,138,187,140,127,144,94,151,219,152,11,106,56,124,153,80,62,92,174,95,135,103,216,107,53,116,9,119,142,127,59,159,202,103,23,122,57,83,139,117,237,154,102,95,157,129,241,131,152,128,60,95,197,95,98,117,70,123,60,144,103,104,235,89,155,90,16,125,126,118,44,139,245,79,106,95,25,106,55,108,2,111,226,116,104,121,104,136,85,138,121,140,223,94,207,99,197,117,210,121,215,130,40,147,242,146,156,132,237,134,45,156,193,84,108,95,140,101,92,109,21,112,167,140,211,140,59,152,79,101,246,116,13,78,216,78,224,87,43,89,102,90,204,91,168,81,3,94,156,94,22,96,118,98,119,101,167,101,110,102,110,109,54,114,38,123,80,129,154,129,153,130,92,139,160,140,230,140,116,141,28,150,68,150,174,79,171,100,102,107,30,130,97,132,106,133,232,144,1,92,83,105,168,152,122,132,87,133,15,79,111,82,169,95,69,94,13,103,143,121,121,129,7,137,134,137,245,109,23,95,85,98,184,108,207,78,105,114,146,155,6,82,59,84,116,86,179,88,164,97,110,98,26,113,110,89,137,124,222,124,27,125,240,150,135,101,94,128,25,78,117,79,117,81,64,88,99,94,115,94,10,95,196,103,38,78,61,133,137,149,91,150,115,124,1,152,251,80,193,88,86,118,167,120,37,82,165,119,17,133,134,123,79,80,9,89,71,114,199,123,232,125,186,143,212,143,77,144,191,79,201,82,41,90,1,95,173,151,221,79,23,130,234,146,3,87,85,99,105,107,43,117,220,136,20,143,66,122,223,82,147,88,85,97,10,98,174,102,205,107,63,124,233,131,35,80,248,79,5,83,70,84,49,88,73,89,157,91,240,92,239,92,41,93,150,94,177,98,103,99,62,101,185,101,11,103,213,108,225,108,249,112,50,120,43,126,222,128,179,130,12,132,236,132,2,135,18,137,42,138,74,140,166,144,210,146,253,152,243,156,108,157,79,78,161,78,141,80,86,82,74,87,168,89,61,94,216,95,217,95,63,98,180,102,27,103,208,103,210,104,146,81,33,125,170,128,168,129,0,139,140,140,191,140,126,146,50,150,32,84,44,152,23,83,213,80,92,83,168,88,178,100,52,103,103,114,102,119,70,122,230,145,195,82,161,108,134,107,0,88,76,94,84,89,44,103,251,127,225,81,198,118,105,100,232,120,84,155,187,158,203,87,185,89,39,102,154,103,206,107,233,84,217,105,85,94,156,129,149,103,170,155,254,103,82,156,93,104,166,78,227,79,200,83,185,98,43,103,171,108,196,143,173,79,109,126,191,158,7,78,98,97,128,110,43,111,19,133,115,84,42,103,69,155,243,93,149,123,172,92,198,91,28,135,74,110,209,132,20,122,8,129,153,89,141,124,17,108,32,119,217,82,34,89,33,113,95,114,219,119,39,151,97,157,11,105,127,90,24,90,165,81,13,84,125,84,14,102,223,118,247,143,152,146,244,156,234,89,93,114,197,110,77,81,201,104,191,125,236,125,98,151,186,158,120,100,33,106,2,131,132,89,95,91,219,107,27,115,242,118,178,125,23,128,153,132,50,81,40,103,217,158,238,118,98,103,255,82,5,153,36,92,59,98,126,124,176,140,79,85,182,96,11,125,128,149,1,83,95,78,182,81,28,89,58,114,54,128,206,145,37,95,226,119,132,83,121,95,4,125,172,133,51,138,141,142,86,151,243,103,174,133,83,148,9,97,8,97,185,108,82,118,237,138,56,143,47,85,81,79,42,81,199,82,203,83,165,91,125,94,160,96,130,97,214,99,9,103,218,103,103,110,140,109,54,115,55,115,49,117,80,121,213,136,152,138,74,144,145,144,245,144,196,150,141,135,21,89,136,78,89,79,14,78,137,138,63,143,16,152,173,80,124,94,150,89,185,91,184,94,218,99,250,99,193,100,220,102,74,105,216,105,11,109,182,110,148,113,40,117,175,122,138,127,0,128,73,132,201,132,129,137,33,139,10,142,101,144,125,150,10,153,126,97,145,98,50,107,131,108,116,109,204,127,252,127,192,109,133,127,186,135,248,136,101,103,177,131,60,152,247,150,27,109,97,125,61,132,106,145,113,78,117,83,80,93,4,107,235,111,205,133,45,134,167,137,41,82,15,84,101,92,78,103,168,104,6,116,131,116,226,117,207,136,225,136,204,145,226,150,120,150,139,95,135,115,203,122,78,132,160,99,101,117,137,82,65,109,156,110,9,116,89,117,107,120,146,124,134,150,220,122,141,159,182,79,110,97,197,101,92,134,134,78,174,78,218,80,33,78,204,81,238,91,153,101,129,104,188,109,31,115,66,118,173,119,28,122,231,124,111,130,210,138,124,144,207,145,117,150,24,152,155,82,209,125,43,80,152,83,151,103,203,109,208,113,51,116,232,129,42,143,163,150,87,156,159,158,96,116,65,88,153,109,47,125,94,152,228,78,54,79,139,79,183,81,177,82,186,93,28,96,178,115,60,121,211,130,52,146,183,150,246,150,10,151,151,158,98,159,166,102,116,107,23,82,163,82,200,112,194,136,201,94,75,96,144,97,35,111,73,113,62,124,244,125,111,128,238,132,35,144,44,147,66,84,111,155,211,106,137,112,194,140,239,141,50,151,180,82,65,90,202,94,4,95,23,103,124,105,148,105,106,109,15,111,98,114,252,114,237,123,1,128,126,128,75,135,206,144,109,81,147,158,132,121,139,128,50,147,214,138,45,80,140,84,113,138,106,107,196,140,7,129,209,96,160,103,242,157,153,78,152,78,16,156,107,138,193,133,104,133,0,105,126,110,151,120,85,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,95,16,78,21,78,42,78,49,78,54,78,60,78,63,78,66,78,86,78,88,78,130,78,133,78,107,140,138,78,18,130,13,95,142,78,158,78,159,78,160,78,162,78,176,78,179,78,182,78,206,78,205,78,196,78,198,78,194,78,215,78,222,78,237,78,223,78,247,78,9,79,90,79,48,79,91,79,93,79,87,79,71,79,118,79,136,79,143,79,152,79,123,79,105,79,112,79,145,79,111,79,134,79,150,79,24,81,212,79,223,79,206,79,216,79,219,79,209,79,218,79,208,79,228,79,229,79,26,80,40,80,20,80,42,80,37,80,5,80,28,79,246,79,33,80,41,80,44,80,254,79,239,79,17,80,6,80,67,80,71,80,3,103,85,80,80,80,72,80,90,80,86,80,108,80,120,80,128,80,154,80,133,80,180,80,178,80,201,80,202,80,179,80,194,80,214,80,222,80,229,80,237,80,227,80,238,80,249,80,245,80,9,81,1,81,2,81,22,81,21,81,20,81,26,81,33,81,58,81,55,81,60,81,59,81,63,81,64,81,82,81,76,81,84,81,98,81,248,122,105,81,106,81,110,81,128,81,130,81,216,86,140,81,137,81,143,81,145,81,147,81,149,81,150,81,164,81,166,81,162,81,169,81,170,81,171,81,179,81,177,81,178,81,176,81,181,81,189,81,197,81,201,81,219,81,224,81,85,134,233,81,237,81,240,81,245,81,254,81,4,82,11,82,20,82,14,82,39,82,42,82,46,82,51,82,57,82,79,82,68,82,75,82,76,82,94,82,84,82,106,82,116,82,105,82,115,82,127,82,125,82,141,82,148,82,146,82,113,82,136,82,145,82,168,143,167,143,172,82,173,82,188,82,181,82,193,82,205,82,215,82,222,82,227,82,230,82,237,152,224,82,243,82,245,82,248,82,249,82,6,83,8,83,56,117,13,83,16,83,15,83,21,83,26,83,35,83,47,83,49,83,51,83,56,83,64,83,70,83,69,83,23,78,73,83,77,83,214,81,94,83,105,83,110,83,24,89,123,83,119,83,130,83,150,83,160,83,166,83,165,83,174,83,176,83,182,83,195,83,18,124,217,150,223,83,252,102,238,113,238,83,232,83,237,83,250,83,1,84,61,84,64,84,44,84,45,84,60,84,46,84,54,84,41,84,29,84,78,84,143,84,117,84,142,84,95,84,113,84,119,84,112,84,146,84,123,84,128,84,118,84,132,84,144,84,134,84,199,84,162,84,184,84,165,84,172,84,196,84,200,84,168,84,171,84,194,84,164,84,190,84,188,84,216,84,229,84,230,84,15,85,20,85,253,84,238,84,237,84,250,84,226,84,57,85,64,85,99,85,76,85,46,85,92,85,69,85,86,85,87,85,56,85,51,85,93,85,153,85,128,85,175,84,138,85,159,85,123,85,126,85,152,85,158,85,174,85,124,85,131,85,169,85,135,85,168,85,218,85,197,85,223,85,196,85,220,85,228,85,212,85,20,86,247,85,22,86,254,85,253,85,27,86,249,85,78,86,80,86,223,113,52,86,54,86,50,86,56,86,107,86,100,86,47,86,108,86,106,86,134,86,128,86,138,86,160,86,148,86,143,86,165,86,174,86,182,86,180,86,194,86,188,86,193,86,195,86,192,86,200,86,206,86,209,86,211,86,215,86,238,86,249,86,0,87,255,86,4,87,9,87,8,87,11,87,13,87,19,87,24,87,22,87,199,85,28,87,38,87,55,87,56,87,78,87,59,87,64,87,79,87,105,87,192,87,136,87,97,87,127,87,137,87,147,87,160,87,179,87,164,87,170,87,176,87,195,87,198,87,212,87,210,87,211,87,10,88,214,87,227,87,11,88,25,88,29,88,114,88,33,88,98,88,75,88,112,88,192,107,82,88,61,88,121,88,133,88,185,88,159,88,171,88,186,88,222,88,187,88,184,88,174,88,197,88,211,88,209,88,215,88,217,88,216,88,229,88,220,88,228,88,223,88,239,88,250,88,249,88,251,88,252,88,253,88,2,89,10,89,16,89,27,89,166,104,37,89,44,89,45,89,50,89,56,89,62,89,210,122,85,89,80,89,78,89,90,89,88,89,98,89,96,89,103,89,108,89,105,89,120,89,129,89,157,89,94,79,171,79,163,89,178,89,198,89,232,89,220,89,141,89,217,89,218,89,37,90,31,90,17,90,28,90,9,90,26,90,64,90,108,90,73,90,53,90,54,90,98,90,106,90,154,90,188,90,190,90,203,90,194,90,189,90,227,90,215,90,230,90,233,90,214,90,250,90,251,90,12,91,11,91,22,91,50,91,208,90,42,91,54,91,62,91,67,91,69,91,64,91,81,91,85,91,90,91,91,91,101,91,105,91,112,91,115,91,117,91,120,91,136,101,122,91,128,91,131,91,166,91,184,91,195,91,199,91,201,91,212,91,208,91,228,91,230,91,226,91,222,91,229,91,235,91,240,91,246,91,243,91,5,92,7,92,8,92,13,92,19,92,32,92,34,92,40,92,56,92,57,92,65,92,70,92,78,92,83,92,80,92,79,92,113,91,108,92,110,92,98,78,118,92,121,92,140,92,145,92,148,92,155,89,171,92,187,92,182,92,188,92,183,92,197,92,190,92,199,92,217,92,233,92,253,92,250,92,237,92,140,93,234,92,11,93,21,93,23,93,92,93,31,93,27,93,17,93,20,93,34,93,26,93,25,93,24,93,76,93,82,93,78,93,75,93,108,93,115,93,118,93,135,93,132,93,130,93,162,93,157,93,172,93,174,93,189,93,144,93,183,93,188,93,201,93,205,93,211,93,210,93,214,93,219,93,235,93,242,93,245,93,11,94,26,94,25,94,17,94,27,94,54,94,55,94,68,94,67,94,64,94,78,94,87,94,84,94,95,94,98,94,100,94,71,94,117,94,118,94,122,94,188,158,127,94,160,94,193,94,194,94,200,94,208,94,207,94,214,94,227,94,221,94,218,94,219,94,226,94,225,94,232,94,233,94,236,94,241,94,243,94,240,94,244,94,248,94,254,94,3,95,9,95,93,95,92,95,11,95,17,95,22,95,41,95,45,95,56,95,65,95,72,95,76,95,78,95,47,95,81,95,86,95,87,95,89,95,97,95,109,95,115,95,119,95,131,95,130,95,127,95,138,95,136,95,145,95,135,95,158,95,153,95,152,95,160,95,168,95,173,95,188,95,214,95,251,95,228,95,248,95,241,95,221,95,179,96,255,95,33,96,96,96,25,96,16,96,41,96,14,96,49,96,27,96,21,96,43,96,38,96,15,96,58,96,90,96,65,96,106,96,119,96,95,96,74,96,70,96,77,96,99,96,67,96,100,96,66,96,108,96,107,96,89,96,129,96,141,96,231,96,131,96,154,96,132,96,155,96,150,96,151,96,146,96,167,96,139,96,225,96,184,96,224,96,211,96,180,96,240,95,189,96,198,96,181,96,216,96,77,97,21,97,6,97,246,96,247,96,0,97,244,96,250,96,3,97,33,97,251,96,241,96,13,97,14,97,71,97,62,97,40,97,39,97,74,97,63,97,60,97,44,97,52,97,61,97,66,97,68,97,115,97,119,97,88,97,89,97,90,97,107,97,116,97,111,97,101,97,113,97,95,97,93,97,83,97,117,97,153,97,150,97,135,97,172,97,148,97,154,97,138,97,145,97,171,97,174,97,204,97,202,97,201,97,247,97,200,97,195,97,198,97,186,97,203,97,121,127,205,97,230,97,227,97,246,97,250,97,244,97,255,97,253,97,252,97,254,97,0,98,8,98,9,98,13,98,12,98,20,98,27,98,30,98,33,98,42,98,46,98,48,98,50,98,51,98,65,98,78,98,94,98,99,98,91,98,96,98,104,98,124,98,130,98,137,98,126,98,146,98,147,98,150,98,212,98,131,98,148,98,215,98,209,98,187,98,207,98,255,98,198,98,212,100,200,98,220,98,204,98,202,98,194,98,199,98,155,98,201,98,12,99,238,98,241,98,39,99,2,99,8,99,239,98,245,98,80,99,62,99,77,99,28,100,79,99,150,99,142,99,128,99,171,99,118,99,163,99,143,99,137,99,159,99,181,99,107,99,105,99,190,99,233,99,192,99,198,99,227,99,201,99,210,99,246,99,196,99,22,100,52,100,6,100,19,100,38,100,54,100,29,101,23,100,40,100,15,100,103,100,111,100,118,100,78,100,42,101,149,100,147,100,165,100,169,100,136,100,188,100,218,100,210,100,197,100,199,100,187,100,216,100,194,100,241,100,231,100,9,130,224,100,225,100,172,98,227,100,239,100,44,101,246,100,244,100,242,100,250,100,0,101,253,100,24,101,28,101,5,101,36,101,35,101,43,101,52,101,53,101,55,101,54,101,56,101,75,117,72,101,86,101,85,101,77,101,88,101,94,101,93,101,114,101,120,101,130,101,131,101,138,139,155,101,159,101,171,101,183,101,195,101,198,101,193,101,196,101,204,101,210,101,219,101,217,101,224,101,225,101,241,101,114,103,10,102,3,102,251,101,115,103,53,102,54,102,52,102,28,102,79,102,68,102,73,102,65,102,94,102,93,102,100,102,103,102,104,102,95,102,98,102,112,102,131,102,136,102,142,102,137,102,132,102,152,102,157,102,193,102,185,102,201,102,190,102,188,102,196,102,184,102,214,102,218,102,224,102,63,102,230,102,233,102,240,102,245,102,247,102,15,103,22,103,30,103,38,103,39,103,56,151,46,103,63,103,54,103,65,103,56,103,55,103,70,103,94,103,96,103,89,103,99,103,100,103,137,103,112,103,169,103,124,103,106,103,140,103,139,103,166,103,161,103,133,103,183,103,239,103,180,103,236,103,179,103,233,103,184,103,228,103,222,103,221,103,226,103,238,103,185,103,206,103,198,103,231,103,156,106,30,104,70,104,41,104,64,104,77,104,50,104,78,104,179,104,43,104,89,104,99,104,119,104,127,104,159,104,143,104,173,104,148,104,157,104,155,104,131,104,174,106,185,104,116,104,181,104,160,104,186,104,15,105,141,104,126,104,1,105,202,104,8,105,216,104,34,105,38,105,225,104,12,105,205,104,212,104,231,104,213,104,54,105,18,105,4,105,215,104,227,104,37,105,249,104,224,104,239,104,40,105,42,105,26,105,35,105,33,105,198,104,121,105,119,105,92,105,120,105,107,105,84,105,126,105,110,105,57,105,116,105,61,105,89,105,48,105,97,105,94,105,93,105,129,105,106,105,178,105,174,105,208,105,191,105,193,105,211,105,190,105,206,105,232,91,202,105,221,105,187,105,195,105,167,105,46,106,145,105,160,105,156,105,149,105,180,105,222,105,232,105,2,106,27,106,255,105,10,107,249,105,242,105,231,105,5,106,177,105,30,106,237,105,20,106,235,105,10,106,18,106,193,106,35,106,19,106,68,106,12,106,114,106,54,106,120,106,71,106,98,106,89,106,102,106,72,106,56,106,34,106,144,106,141,106,160,106,132,106,162,106,163,106,151,106,23,134,187,106,195,106,194,106,184,106,179,106,172,106,222,106,209,106,223,106,170,106,218,106,234,106,251,106,5,107,22,134,250,106,18,107,22,107,49,155,31,107,56,107,55,107,220,118,57,107,238,152,71,107,67,107,73,107,80,107,89,107,84,107,91,107,95,107,97,107,120,107,121,107,127,107,128,107,132,107,131,107,141,107,152,107,149,107,158,107,164,107,170,107,171,107,175,107,178,107,177,107,179,107,183,107,188,107,198,107,203,107,211,107,223,107,236,107,235,107,243,107,239,107,190,158,8,108,19,108,20,108,27,108,36,108,35,108,94,108,85,108,98,108,106,108,130,108,141,108,154,108,129,108,155,108,126,108,104,108,115,108,146,108,144,108,196,108,241,108,211,108,189,108,215,108,197,108,221,108,174,108,177,108,190,108,186,108,219,108,239,108,217,108,234,108,31,109,77,136,54,109,43,109,61,109,56,109,25,109,53,109,51,109,18,109,12,109,99,109,147,109,100,109,90,109,121,109,89,109,142,109,149,109,228,111,133,109,249,109,21,110,10,110,181,109,199,109,230,109,184,109,198,109,236,109,222,109,204,109,232,109,210,109,197,109,250,109,217,109,228,109,213,109,234,109,238,109,45,110,110,110,46,110,25,110,114,110,95,110,62,110,35,110,107,110,43,110,118,110,77,110,31,110,67,110,58,110,78,110,36,110,255,110,29,110,56,110,130,110,170,110,152,110,201,110,183,110,211,110,189,110,175,110,196,110,178,110,212,110,213,110,143,110,165,110,194,110,159,110,65,111,17,111,76,112,236,110,248,110,254,110,63,111,242,110,49,111,239,110,50,111,204,110,62,111,19,111,247,110,134,111,122,111,120,111,129,111,128,111,111,111,91,111,243,111,109,111,130,111,124,111,88,111,142,111,145,111,194,111,102,111,179,111,163,111,161,111,164,111,185,111,198,111,170,111,223,111,213,111,236,111,212,111,216,111,241,111,238,111,219,111,9,112,11,112,250,111,17,112,1,112,15,112,254,111,27,112,26,112,116,111,29,112,24,112,31,112,48,112,62,112,50,112,81,112,99,112,153,112,146,112,175,112,241,112,172,112,184,112,179,112,174,112,223,112,203,112,221,112,217,112,9,113,253,112,28,113,25,113,101,113,85,113,136,113,102,113,98,113,76,113,86,113,108,113,143,113,251,113,132,113,149,113,168,113,172,113,215,113,185,113,190,113,210,113,201,113,212,113,206,113,224,113,236,113,231,113,245,113,252,113,249,113,255,113,13,114,16,114,27,114,40,114,45,114,44,114,48,114,50,114,59,114,60,114,63,114,64,114,70,114,75,114,88,114,116,114,126,114,130,114,129,114,135,114,146,114,150,114,162,114,167,114,185,114,178,114,195,114,198,114,196,114,206,114,210,114,226,114,224,114,225,114,249,114,247,114,15,80,23,115,10,115,28,115,22,115,29,115,52,115,47,115,41,115,37,115,62,115,78,115,79,115,216,158,87,115,106,115,104,115,112,115,120,115,117,115,123,115,122,115,200,115,179,115,206,115,187,115,192,115,229,115,238,115,222,115,162,116,5,116,111,116,37,116,248,115,50,116,58,116,85,116,63,116,95,116,89,116,65,116,92,116,105,116,112,116,99,116,106,116,118,116,126,116,139,116,158,116,167,116,202,116,207,116,212,116,241,115,224,116,227,116,231,116,233,116,238,116,242,116,240,116,241,116,248,116,247,116,4,117,3,117,5,117,12,117,14,117,13,117,21,117,19,117,30,117,38,117,44,117,60,117,68,117,77,117,74,117,73,117,91,117,70,117,90,117,105,117,100,117,103,117,107,117,109,117,120,117,118,117,134,117,135,117,116,117,138,117,137,117,130,117,148,117,154,117,157,117,165,117,163,117,194,117,179,117,195,117,181,117,189,117,184,117,188,117,177,117,205,117,202,117,210,117,217,117,227,117,222,117,254,117,255,117,252,117,1,118,240,117,250,117,242,117,243,117,11,118,13,118,9,118,31,118,39,118,32,118,33,118,34,118,36,118,52,118,48,118,59,118,71,118,72,118,70,118,92,118,88,118,97,118,98,118,104,118,105,118,106,118,103,118,108,118,112,118,114,118,118,118,120,118,124,118,128,118,131,118,136,118,139,118,142,118,150,118,147,118,153,118,154,118,176,118,180,118,184,118,185,118,186,118,194,118,205,118,214,118,210,118,222,118,225,118,229,118,231,118,234,118,47,134,251,118,8,119,7,119,4,119,41,119,36,119,30,119,37,119,38,119,27,119,55,119,56,119,71,119,90,119,104,119,107,119,91,119,101,119,127,119,126,119,121,119,142,119,139,119,145,119,160,119,158,119,176,119,182,119,185,119,191,119,188,119,189,119,187,119,199,119,205,119,215,119,218,119,220,119,227,119,238,119,252,119,12,120,18,120,38,121,32,120,42,121,69,120,142,120,116,120,134,120,124,120,154,120,140,120,163,120,181,120,170,120,175,120,209,120,198,120,203,120,212,120,190,120,188,120,197,120,202,120,236,120,231,120,218,120,253,120,244,120,7,121,18,121,17,121,25,121,44,121,43,121,64,121,96,121,87,121,95,121,90,121,85,121,83,121,122,121,127,121,138,121,157,121,167,121,75,159,170,121,174,121,179,121,185,121,186,121,201,121,213,121,231,121,236,121,225,121,227,121,8,122,13,122,24,122,25,122,32,122,31,122,128,121,49,122,59,122,62,122,55,122,67,122,87,122,73,122,97,122,98,122,105,122,157,159,112,122,121,122,125,122,136,122,151,122,149,122,152,122,150,122,169,122,200,122,176,122,182,122,197,122,196,122,191,122,131,144,199,122,202,122,205,122,207,122,213,122,211,122,217,122,218,122,221,122,225,122,226,122,230,122,237,122,240,122,2,123,15,123,10,123,6,123,51,123,24,123,25,123,30,123,53,123,40,123,54,123,80,123,122,123,4,123,77,123,11,123,76,123,69,123,117,123,101,123,116,123,103,123,112,123,113,123,108,123,110,123,157,123,152,123,159,123,141,123,156,123,154,123,139,123,146,123,143,123,93,123,153,123,203,123,193,123,204,123,207,123,180,123,198,123,221,123,233,123,17,124,20,124,230,123,229,123,96,124,0,124,7,124,19,124,243,123,247,123,23,124,13,124,246,123,35,124,39,124,42,124,31,124,55,124,43,124,61,124,76,124,67,124,84,124,79,124,64,124,80,124,88,124,95,124,100,124,86,124,101,124,108,124,117,124,131,124,144,124,164,124,173,124,162,124,171,124,161,124,168,124,179,124,178,124,177,124,174,124,185,124,189,124,192,124,197,124,194,124,216,124,210,124,220,124,226,124,59,155,239,124,242,124,244,124,246,124,250,124,6,125,2,125,28,125,21,125,10,125,69,125,75,125,46,125,50,125,63,125,53,125,70,125,115,125,86,125,78,125,114,125,104,125,110,125,79,125,99,125,147,125,137,125,91,125,143,125,125,125,155,125,186,125,174,125,163,125,181,125,199,125,189,125,171,125,61,126,162,125,175,125,220,125,184,125,159,125,176,125,216,125,221,125,228,125,222,125,251,125,242,125,225,125,5,126,10,126,35,126,33,126,18,126,49,126,31,126,9,126,11,126,34,126,70,126,102,126,59,126,53,126,57,126,67,126,55,126,50,126,58,126,103,126,93,126,86,126,94,126,89,126,90,126,121,126,106,126,105,126,124,126,123,126,131,126,213,125,125,126,174,143,127,126,136,126,137,126,140,126,146,126,144,126,147,126,148,126,150,126,142,126,155,126,156,126,56,127,58,127,69,127,76,127,77,127,78,127,80,127,81,127,85,127,84,127,88,127,95,127,96,127,104,127,105,127,103,127,120,127,130,127,134,127,131,127,136,127,135,127,140,127,148,127,158,127,157,127,154,127,163,127,175,127,178,127,185,127,174,127,182,127,184,127,113,139,197,127,198,127,202,127,213,127,212,127,225,127,230,127,233,127,243,127,249,127,220,152], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+32204);
	/* memory initializer */ allocate([6,128,4,128,11,128,18,128,24,128,25,128,28,128,33,128,40,128,63,128,59,128,74,128,70,128,82,128,88,128,90,128,95,128,98,128,104,128,115,128,114,128,112,128,118,128,121,128,125,128,127,128,132,128,134,128,133,128,155,128,147,128,154,128,173,128,144,81,172,128,219,128,229,128,217,128,221,128,196,128,218,128,214,128,9,129,239,128,241,128,27,129,41,129,35,129,47,129,75,129,139,150,70,129,62,129,83,129,81,129,252,128,113,129,110,129,101,129,102,129,116,129,131,129,136,129,138,129,128,129,130,129,160,129,149,129,164,129,163,129,95,129,147,129,169,129,176,129,181,129,190,129,184,129,189,129,192,129,194,129,186,129,201,129,205,129,209,129,217,129,216,129,200,129,218,129,223,129,224,129,231,129,250,129,251,129,254,129,1,130,2,130,5,130,7,130,10,130,13,130,16,130,22,130,41,130,43,130,56,130,51,130,64,130,89,130,88,130,93,130,90,130,95,130,100,130,98,130,104,130,106,130,107,130,46,130,113,130,119,130,120,130,126,130,141,130,146,130,171,130,159,130,187,130,172,130,225,130,227,130,223,130,210,130,244,130,243,130,250,130,147,131,3,131,251,130,249,130,222,130,6,131,220,130,9,131,217,130,53,131,52,131,22,131,50,131,49,131,64,131,57,131,80,131,69,131,47,131,43,131,23,131,24,131,133,131,154,131,170,131,159,131,162,131,150,131,35,131,142,131,135,131,138,131,124,131,181,131,115,131,117,131,160,131,137,131,168,131,244,131,19,132,235,131,206,131,253,131,3,132,216,131,11,132,193,131,247,131,7,132,224,131,242,131,13,132,34,132,32,132,189,131,56,132,6,133,251,131,109,132,42,132,60,132,90,133,132,132,119,132,107,132,173,132,110,132,130,132,105,132,70,132,44,132,111,132,121,132,53,132,202,132,98,132,185,132,191,132,159,132,217,132,205,132,187,132,218,132,208,132,193,132,198,132,214,132,161,132,33,133,255,132,244,132,23,133,24,133,44,133,31,133,21,133,20,133,252,132,64,133,99,133,88,133,72,133,65,133,2,134,75,133,85,133,128,133,164,133,136,133,145,133,138,133,168,133,109,133,148,133,155,133,234,133,135,133,156,133,119,133,126,133,144,133,201,133,186,133,207,133,185,133,208,133,213,133,221,133,229,133,220,133,249,133,10,134,19,134,11,134,254,133,250,133,6,134,34,134,26,134,48,134,63,134,77,134,85,78,84,134,95,134,103,134,113,134,147,134,163,134,169,134,170,134,139,134,140,134,182,134,175,134,196,134,198,134,176,134,201,134,35,136,171,134,212,134,222,134,233,134,236,134,223,134,219,134,239,134,18,135,6,135,8,135,0,135,3,135,251,134,17,135,9,135,13,135,249,134,10,135,52,135,63,135,55,135,59,135,37,135,41,135,26,135,96,135,95,135,120,135,76,135,78,135,116,135,87,135,104,135,110,135,89,135,83,135,99,135,106,135,5,136,162,135,159,135,130,135,175,135,203,135,189,135,192,135,208,135,214,150,171,135,196,135,179,135,199,135,198,135,187,135,239,135,242,135,224,135,15,136,13,136,254,135,246,135,247,135,14,136,210,135,17,136,22,136,21,136,34,136,33,136,49,136,54,136,57,136,39,136,59,136,68,136,66,136,82,136,89,136,94,136,98,136,107,136,129,136,126,136,158,136,117,136,125,136,181,136,114,136,130,136,151,136,146,136,174,136,153,136,162,136,141,136,164,136,176,136,191,136,177,136,195,136,196,136,212,136,216,136,217,136,221,136,249,136,2,137,252,136,244,136,232,136,242,136,4,137,12,137,10,137,19,137,67,137,30,137,37,137,42,137,43,137,65,137,68,137,59,137,54,137,56,137,76,137,29,137,96,137,94,137,102,137,100,137,109,137,106,137,111,137,116,137,119,137,126,137,131,137,136,137,138,137,147,137,152,137,161,137,169,137,166,137,172,137,175,137,178,137,186,137,189,137,191,137,192,137,218,137,220,137,221,137,231,137,244,137,248,137,3,138,22,138,16,138,12,138,27,138,29,138,37,138,54,138,65,138,91,138,82,138,70,138,72,138,124,138,109,138,108,138,98,138,133,138,130,138,132,138,168,138,161,138,145,138,165,138,166,138,154,138,163,138,196,138,205,138,194,138,218,138,235,138,243,138,231,138,228,138,241,138,20,139,224,138,226,138,247,138,222,138,219,138,12,139,7,139,26,139,225,138,22,139,16,139,23,139,32,139,51,139,171,151,38,139,43,139,62,139,40,139,65,139,76,139,79,139,78,139,73,139,86,139,91,139,90,139,107,139,95,139,108,139,111,139,116,139,125,139,128,139,140,139,142,139,146,139,147,139,150,139,153,139,154,139,58,140,65,140,63,140,72,140,76,140,78,140,80,140,85,140,98,140,108,140,120,140,122,140,130,140,137,140,133,140,138,140,141,140,142,140,148,140,124,140,152,140,29,98,173,140,170,140,189,140,178,140,179,140,174,140,182,140,200,140,193,140,228,140,227,140,218,140,253,140,250,140,251,140,4,141,5,141,10,141,7,141,15,141,13,141,16,141,78,159,19,141,205,140,20,141,22,141,103,141,109,141,113,141,115,141,129,141,153,141,194,141,190,141,186,141,207,141,218,141,214,141,204,141,219,141,203,141,234,141,235,141,223,141,227,141,252,141,8,142,9,142,255,141,29,142,30,142,16,142,31,142,66,142,53,142,48,142,52,142,74,142,71,142,73,142,76,142,80,142,72,142,89,142,100,142,96,142,42,142,99,142,85,142,118,142,114,142,124,142,129,142,135,142,133,142,132,142,139,142,138,142,147,142,145,142,148,142,153,142,170,142,161,142,172,142,176,142,198,142,177,142,190,142,197,142,200,142,203,142,219,142,227,142,252,142,251,142,235,142,254,142,10,143,5,143,21,143,18,143,25,143,19,143,28,143,31,143,27,143,12,143,38,143,51,143,59,143,57,143,69,143,66,143,62,143,76,143,73,143,70,143,78,143,87,143,92,143,98,143,99,143,100,143,156,143,159,143,163,143,173,143,175,143,183,143,218,143,229,143,226,143,234,143,239,143,135,144,244,143,5,144,249,143,250,143,17,144,21,144,33,144,13,144,30,144,22,144,11,144,39,144,54,144,53,144,57,144,248,143,79,144,80,144,81,144,82,144,14,144,73,144,62,144,86,144,88,144,94,144,104,144,111,144,118,144,168,150,114,144,130,144,125,144,129,144,128,144,138,144,137,144,143,144,168,144,175,144,177,144,181,144,226,144,228,144,72,98,219,144,2,145,18,145,25,145,50,145,48,145,74,145,86,145,88,145,99,145,101,145,105,145,115,145,114,145,139,145,137,145,130,145,162,145,171,145,175,145,170,145,181,145,180,145,186,145,192,145,193,145,201,145,203,145,208,145,214,145,223,145,225,145,219,145,252,145,245,145,246,145,30,146,255,145,20,146,44,146,21,146,17,146,94,146,87,146,69,146,73,146,100,146,72,146,149,146,63,146,75,146,80,146,156,146,150,146,147,146,155,146,90,146,207,146,185,146,183,146,233,146,15,147,250,146,68,147,46,147,25,147,34,147,26,147,35,147,58,147,53,147,59,147,92,147,96,147,124,147,110,147,86,147,176,147,172,147,173,147,148,147,185,147,214,147,215,147,232,147,229,147,216,147,195,147,221,147,208,147,200,147,228,147,26,148,20,148,19,148,3,148,7,148,16,148,54,148,43,148,53,148,33,148,58,148,65,148,82,148,68,148,91,148,96,148,98,148,94,148,106,148,41,146,112,148,117,148,119,148,125,148,90,148,124,148,126,148,129,148,127,148,130,149,135,149,138,149,148,149,150,149,152,149,153,149,160,149,168,149,167,149,173,149,188,149,187,149,185,149,190,149,202,149,246,111,195,149,205,149,204,149,213,149,212,149,214,149,220,149,225,149,229,149,226,149,33,150,40,150,46,150,47,150,66,150,76,150,79,150,75,150,119,150,92,150,94,150,93,150,95,150,102,150,114,150,108,150,141,150,152,150,149,150,151,150,170,150,167,150,177,150,178,150,176,150,180,150,182,150,184,150,185,150,206,150,203,150,201,150,205,150,77,137,220,150,13,151,213,150,249,150,4,151,6,151,8,151,19,151,14,151,17,151,15,151,22,151,25,151,36,151,42,151,48,151,57,151,61,151,62,151,68,151,70,151,72,151,66,151,73,151,92,151,96,151,100,151,102,151,104,151,210,82,107,151,113,151,121,151,133,151,124,151,129,151,122,151,134,151,139,151,143,151,144,151,156,151,168,151,166,151,163,151,179,151,180,151,195,151,198,151,200,151,203,151,220,151,237,151,79,159,242,151,223,122,246,151,245,151,15,152,12,152,56,152,36,152,33,152,55,152,61,152,70,152,79,152,75,152,107,152,111,152,112,152,113,152,116,152,115,152,170,152,175,152,177,152,182,152,196,152,195,152,198,152,233,152,235,152,3,153,9,153,18,153,20,153,24,153,33,153,29,153,30,153,36,153,32,153,44,153,46,153,61,153,62,153,66,153,73,153,69,153,80,153,75,153,81,153,82,153,76,153,85,153,151,153,152,153,165,153,173,153,174,153,188,153,223,153,219,153,221,153,216,153,209,153,237,153,238,153,241,153,242,153,251,153,248,153,1,154,15,154,5,154,226,153,25,154,43,154,55,154,69,154,66,154,64,154,67,154,62,154,85,154,77,154,91,154,87,154,95,154,98,154,101,154,100,154,105,154,107,154,106,154,173,154,176,154,188,154,192,154,207,154,209,154,211,154,212,154,222,154,223,154,226,154,227,154,230,154,239,154,235,154,238,154,244,154,241,154,247,154,251,154,6,155,24,155,26,155,31,155,34,155,35,155,37,155,39,155,40,155,41,155,42,155,46,155,47,155,50,155,68,155,67,155,79,155,77,155,78,155,81,155,88,155,116,155,147,155,131,155,145,155,150,155,151,155,159,155,160,155,168,155,180,155,192,155,202,155,185,155,198,155,207,155,209,155,210,155,227,155,226,155,228,155,212,155,225,155,58,156,242,155,241,155,240,155,21,156,20,156,9,156,19,156,12,156,6,156,8,156,18,156,10,156,4,156,46,156,27,156,37,156,36,156,33,156,48,156,71,156,50,156,70,156,62,156,90,156,96,156,103,156,118,156,120,156,231,156,236,156,240,156,9,157,8,157,235,156,3,157,6,157,42,157,38,157,175,157,35,157,31,157,68,157,21,157,18,157,65,157,63,157,62,157,70,157,72,157,93,157,94,157,100,157,81,157,80,157,89,157,114,157,137,157,135,157,171,157,111,157,122,157,154,157,164,157,169,157,178,157,196,157,193,157,187,157,184,157,186,157,198,157,207,157,194,157,217,157,211,157,248,157,230,157,237,157,239,157,253,157,26,158,27,158,30,158,117,158,121,158,125,158,129,158,136,158,139,158,140,158,146,158,149,158,145,158,157,158,165,158,169,158,184,158,170,158,173,158,97,151,204,158,206,158,207,158,208,158,212,158,220,158,222,158,221,158,224,158,229,158,232,158,239,158,244,158,246,158,247,158,249,158,251,158,252,158,253,158,7,159,8,159,183,118,21,159,33,159,44,159,62,159,74,159,82,159,84,159,99,159,95,159,96,159,97,159,102,159,103,159,108,159,106,159,119,159,114,159,118,159,149,159,156,159,160,159,47,88,199,105,89,144,100,116,220,81,153,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,78,4,78,5,78,6,78,15,78,18,78,23,78,31,78,32,78,33,78,35,78,38,78,41,78,46,78,47,78,49,78,51,78,53,78,55,78,60,78,64,78,65,78,66,78,68,78,70,78,74,78,81,78,85,78,87,78,90,78,91,78,98,78,99,78,100,78,101,78,103,78,104,78,106,78,107,78,108,78,109,78,110,78,111,78,114,78,116,78,117,78,118,78,119,78,120,78,121,78,122,78,123,78,124,78,125,78,127,78,128,78,129,78,130,78,131,78,132,78,133,78,135,78,138,78,144,78,150,78,151,78,153,78,156,78,157,78,158,78,163,78,170,78,175,78,176,78,177,78,180,78,182,78,183,78,184,78,185,78,188,78,189,78,190,78,200,78,204,78,207,78,208,78,210,78,218,78,219,78,220,78,224,78,226,78,230,78,231,78,233,78,237,78,238,78,239,78,241,78,244,78,248,78,249,78,250,78,252,78,254,78,0,79,2,79,3,79,4,79,5,79,6,79,7,79,8,79,11,79,12,79,18,79,19,79,20,79,21,79,22,79,28,79,29,79,33,79,35,79,40,79,41,79,44,79,45,79,46,79,49,79,51,79,53,79,55,79,57,79,59,79,62,79,63,79,64,79,65,79,66,79,68,79,69,79,71,79,72,79,73,79,74,79,75,79,76,79,82,79,84,79,86,79,97,79,98,79,102,79,104,79,106,79,107,79,109,79,110,79,113,79,114,79,117,79,119,79,120,79,121,79,122,79,125,79,128,79,129,79,130,79,133,79,134,79,135,79,138,79,140,79,142,79,144,79,146,79,147,79,149,79,150,79,152,79,153,79,154,79,156,79,158,79,159,79,161,79,162,79,164,79,171,79,173,79,176,79,177,79,178,79,179,79,180,79,182,79,183,79,184,79,185,79,186,79,187,79,188,79,189,79,190,79,192,79,193,79,194,79,198,79,199,79,200,79,201,79,203,79,204,79,205,79,210,79,211,79,212,79,213,79,214,79,217,79,219,79,224,79,226,79,228,79,229,79,231,79,235,79,236,79,240,79,242,79,244,79,245,79,246,79,247,79,249,79,251,79,252,79,253,79,255,79,0,80,1,80,2,80,3,80,4,80,5,80,6,80,7,80,8,80,9,80,10,80,11,80,14,80,16,80,17,80,19,80,21,80,22,80,23,80,27,80,29,80,30,80,32,80,34,80,35,80,36,80,39,80,43,80,47,80,48,80,49,80,50,80,51,80,52,80,53,80,54,80,55,80,56,80,57,80,59,80,61,80,63,80,64,80,65,80,66,80,68,80,69,80,70,80,73,80,74,80,75,80,77,80,80,80,81,80,82,80,83,80,84,80,86,80,87,80,88,80,89,80,91,80,93,80,94,80,95,80,96,80,97,80,98,80,99,80,100,80,102,80,103,80,104,80,105,80,106,80,107,80,109,80,110,80,111,80,112,80,113,80,114,80,115,80,116,80,117,80,120,80,121,80,122,80,124,80,125,80,129,80,130,80,131,80,132,80,134,80,135,80,137,80,138,80,139,80,140,80,142,80,143,80,144,80,145,80,146,80,147,80,148,80,149,80,150,80,151,80,152,80,153,80,154,80,155,80,156,80,157,80,158,80,159,80,160,80,161,80,162,80,164,80,166,80,170,80,171,80,173,80,174,80,175,80,176,80,177,80,179,80,180,80,181,80,182,80,183,80,184,80,185,80,188,80,189,80,190,80,191,80,192,80,193,80,194,80,195,80,196,80,197,80,198,80,199,80,200,80,201,80,202,80,203,80,204,80,205,80,206,80,208,80,209,80,210,80,211,80,212,80,213,80,215,80,216,80,217,80,219,80,220,80,221,80,222,80,223,80,224,80,225,80,226,80,227,80,228,80,229,80,232,80,233,80,234,80,235,80,239,80,240,80,241,80,242,80,244,80,246,80,247,80,248,80,249,80,250,80,252,80,253,80,254,80,255,80,0,81,1,81,2,81,3,81,4,81,5,81,8,81,9,81,10,81,12,81,13,81,14,81,15,81,16,81,17,81,19,81,20,81,21,81,22,81,23,81,24,81,25,81,26,81,27,81,28,81,29,81,30,81,31,81,32,81,34,81,35,81,36,81,37,81,38,81,39,81,40,81,41,81,42,81,43,81,44,81,45,81,46,81,47,81,48,81,49,81,50,81,51,81,52,81,53,81,54,81,55,81,56,81,57,81,58,81,59,81,60,81,61,81,62,81,66,81,71,81,74,81,76,81,78,81,79,81,80,81,82,81,83,81,87,81,88,81,89,81,91,81,93,81,94,81,95,81,96,81,97,81,99,81,100,81,102,81,103,81,105,81,106,81,111,81,114,81,122,81,126,81,127,81,131,81,132,81,134,81,135,81,138,81,139,81,142,81,143,81,144,81,145,81,147,81,148,81,152,81,154,81,157,81,158,81,159,81,161,81,163,81,166,81,167,81,168,81,169,81,170,81,173,81,174,81,180,81,184,81,185,81,186,81,190,81,191,81,193,81,194,81,195,81,197,81,200,81,202,81,205,81,206,81,208,81,210,81,211,81,212,81,213,81,214,81,215,81,216,81,217,81,218,81,220,81,222,81,223,81,226,81,227,81,229,81,230,81,231,81,232,81,233,81,234,81,236,81,238,81,241,81,242,81,244,81,247,81,254,81,4,82,5,82,9,82,11,82,12,82,15,82,16,82,19,82,20,82,21,82,28,82,30,82,31,82,33,82,34,82,35,82,37,82,38,82,39,82,42,82,44,82,47,82,49,82,50,82,52,82,53,82,60,82,62,82,68,82,69,82,70,82,71,82,72,82,73,82,75,82,78,82,79,82,82,82,83,82,85,82,87,82,88,82,89,82,90,82,91,82,93,82,95,82,96,82,98,82,99,82,100,82,102,82,104,82,107,82,108,82,109,82,110,82,112,82,113,82,115,82,116,82,117,82,118,82,119,82,120,82,121,82,122,82,123,82,124,82,126,82,128,82,131,82,132,82,133,82,134,82,135,82,137,82,138,82,139,82,140,82,141,82,142,82,143,82,145,82,146,82,148,82,149,82,150,82,151,82,152,82,153,82,154,82,156,82,164,82,165,82,166,82,167,82,174,82,175,82,176,82,180,82,181,82,182,82,183,82,184,82,185,82,186,82,187,82,188,82,189,82,192,82,193,82,194,82,196,82,197,82,198,82,200,82,202,82,204,82,205,82,206,82,207,82,209,82,211,82,212,82,213,82,215,82,217,82,218,82,219,82,220,82,221,82,222,82,224,82,225,82,226,82,227,82,229,82,230,82,231,82,232,82,233,82,234,82,235,82,236,82,237,82,238,82,239,82,241,82,242,82,243,82,244,82,245,82,246,82,247,82,248,82,251,82,252,82,253,82,1,83,2,83,3,83,4,83,7,83,9,83,10,83,11,83,12,83,14,83,17,83,18,83,19,83,20,83,24,83,27,83,28,83,30,83,31,83,34,83,36,83,37,83,39,83,40,83,41,83,43,83,44,83,45,83,47,83,48,83,49,83,50,83,51,83,52,83,53,83,54,83,55,83,56,83,60,83,61,83,64,83,66,83,68,83,70,83,75,83,76,83,77,83,80,83,84,83,88,83,89,83,91,83,93,83,101,83,104,83,106,83,108,83,109,83,114,83,118,83,121,83,123,83,124,83,125,83,126,83,128,83,129,83,131,83,135,83,136,83,138,83,142,83,143,83,144,83,145,83,146,83,147,83,148,83,150,83,151,83,153,83,155,83,156,83,158,83,160,83,161,83,164,83,167,83,170,83,171,83,172,83,173,83,175,83,176,83,177,83,178,83,179,83,180,83,181,83,183,83,184,83,185,83,186,83,188,83,189,83,190,83,192,83,195,83,196,83,197,83,198,83,199,83,206,83,207,83,208,83,210,83,211,83,213,83,218,83,220,83,221,83,222,83,225,83,226,83,231,83,244,83,250,83,254,83,255,83,0,84,2,84,5,84,7,84,11,84,20,84,24,84,25,84,26,84,28,84,34,84,36,84,37,84,42,84,48,84,51,84,54,84,55,84,58,84,61,84,63,84,65,84,66,84,68,84,69,84,71,84,73,84,76,84,77,84,78,84,79,84,81,84,90,84,93,84,94,84,95,84,96,84,97,84,99,84,101,84,103,84,105,84,106,84,107,84,108,84,109,84,110,84,111,84,112,84,116,84,121,84,122,84,126,84,127,84,129,84,131,84,133,84,135,84,136,84,137,84,138,84,141,84,145,84,147,84,151,84,152,84,156,84,158,84,159,84,160,84,161,84,162,84,165,84,174,84,176,84,178,84,181,84,182,84,183,84,185,84,186,84,188,84,190,84,195,84,197,84,202,84,203,84,214,84,216,84,219,84,224,84,225,84,226,84,227,84,228,84,235,84,236,84,239,84,240,84,241,84,244,84,245,84,246,84,247,84,248,84,249,84,251,84,254,84,0,85,2,85,3,85,4,85,5,85,8,85,10,85,11,85,12,85,13,85,14,85,18,85,19,85,21,85,22,85,23,85,24,85,25,85,26,85,28,85,29,85,30,85,31,85,33,85,37,85,38,85,40,85,41,85,43,85,45,85,50,85,52,85,53,85,54,85,56,85,57,85,58,85,59,85,61,85,64,85,66,85,69,85,71,85,72,85,75,85,76,85,77,85,78,85,79,85,81,85,82,85,83,85,84,85,87,85,88,85,89,85,90,85,91,85,93,85,94,85,95,85,96,85,98,85,99,85,104,85,105,85,107,85,111,85,112,85,113,85,114,85,115,85,116,85,121,85,122,85,125,85,127,85,133,85,134,85,140,85,141,85,142,85,144,85,146,85,147,85,149,85,150,85,151,85,154,85,155,85,158,85,160,85,161,85,162,85,163,85,164,85,165,85,166,85,168,85,169,85,170,85,171,85,172,85,173,85,174,85,175,85,176,85,178,85,180,85,182,85,184,85,186,85,188,85,191,85,192,85,193,85,194,85,195,85,198,85,199,85,200,85,202,85,203,85,206,85,207,85,208,85,213,85,215,85,216,85,217,85,218,85,219,85,222,85,224,85,226,85,231,85,233,85,237,85,238,85,240,85,241,85,244,85,246,85,248,85,249,85,250,85,251,85,252,85,255,85,2,86,3,86,4,86,5,86,6,86,7,86,10,86,11,86,13,86,16,86,17,86,18,86,19,86,20,86,21,86,22,86,23,86,25,86,26,86,28,86,29,86,32,86,33,86,34,86,37,86,38,86,40,86,41,86,42,86,43,86,46,86,47,86,48,86,51,86,53,86,55,86,56,86,58,86,60,86,61,86,62,86,64,86,65,86,66,86,67,86,68,86,69,86,70,86,71,86,72,86,73,86,74,86,75,86,79,86,80,86,81,86,82,86,83,86,85,86,86,86,90,86,91,86,93,86,94,86,95,86,96,86,97,86,99,86,101,86,102,86,103,86,109,86,110,86,111,86,112,86,114,86,115,86,116,86,117,86,119,86,120,86,121,86,122,86,125,86,126,86,127,86,128,86,129,86,130,86,131,86,132,86,135,86,136,86,137,86,138,86,139,86,140,86,141,86,144,86,145,86,146,86,148,86,149,86,150,86,151,86,152,86,153,86,154,86,155,86,156,86,157,86,158,86,159,86,160,86,161,86,162,86,164,86,165,86,166,86,167,86,168,86,169,86,170,86,171,86,172,86,173,86,174,86,176,86,177,86,178,86,179,86,180,86,181,86,182,86,184,86,185,86,186,86,187,86,189,86,190,86,191,86,192,86,193,86,194,86,195,86,196,86,197,86,198,86,199,86,200,86,201,86,203,86,204,86,205,86,206,86,207,86,208,86,209,86,210,86,211,86,213,86,214,86,216,86,217,86,220,86,227,86,229,86,230,86,231,86,232,86,233,86,234,86,236,86,238,86,239,86,242,86,243,86,246,86,247,86,248,86,251,86,252,86,0,87,1,87,2,87,5,87,7,87,11,87,12,87,13,87,14,87,15,87,16,87,17,87,18,87,19,87,20,87,21,87,22,87,23,87,24,87,25,87,26,87,27,87,29,87,30,87,32,87,33,87,34,87,36,87,37,87,38,87,39,87,43,87,49,87,50,87,52,87,53,87,54,87,55,87,56,87,60,87,61,87,63,87,65,87,67,87,68,87,69,87,70,87,72,87,73,87,75,87,82,87,83,87,84,87,85,87,86,87,88,87,89,87,98,87,99,87,101,87,103,87,108,87,110,87,112,87,113,87,114,87,116,87,117,87,120,87,121,87,122,87,125,87,126,87,127,87,128,87,129,87,135,87,136,87,137,87,138,87,141,87,142,87,143,87,144,87,145,87,148,87,149,87,150,87,151,87,152,87,153,87,154,87,156,87,157,87,158,87,159,87,165,87,168,87,170,87,172,87,175,87,176,87,177,87,179,87,181,87,182,87,183,87,185,87,186,87,187,87,188,87,189,87,190,87,191,87,192,87,193,87,196,87,197,87,198,87,199,87,200,87,201,87,202,87,204,87,205,87,208,87,209,87,211,87,214,87,215,87,219,87,220,87,222,87,225,87,226,87,227,87,229,87,230,87,231,87,232,87,233,87,234,87,235,87,236,87,238,87,240,87,241,87,242,87,243,87,245,87,246,87,247,87,251,87,252,87,254,87,255,87,1,88,3,88,4,88,5,88,8,88,9,88,10,88,12,88,14,88,15,88,16,88,18,88,19,88,20,88,22,88,23,88,24,88,26,88,27,88,28,88,29,88,31,88,34,88,35,88,37,88,38,88,39,88,40,88,41,88,43,88,44,88,45,88,46,88,47,88,49,88,50,88,51,88,52,88,54,88,55,88,56,88,57,88,58,88,59,88,60,88,61,88,62,88,63,88,64,88,65,88,66,88,67,88,69,88,70,88,71,88,72,88,73,88,74,88,75,88,78,88,79,88,80,88,82,88,83,88,85,88,86,88,87,88,89,88,90,88,91,88,92,88,93,88,95,88,96,88,97,88,98,88,99,88,100,88,102,88,103,88,104,88,105,88,106,88,109,88,110,88,111,88,112,88,113,88,114,88,115,88,116,88,117,88,118,88,119,88,120,88,121,88,122,88,123,88,124,88,125,88,127,88,130,88,132,88,134,88,135,88,136,88,138,88,139,88,140,88,141,88,142,88,143,88,144,88,145,88,148,88,149,88,150,88,151,88,152,88,155,88,156,88,157,88,160,88,161,88,162,88,163,88,164,88,165,88,166,88,167,88,170,88,171,88,172,88,173,88,174,88,175,88,176,88,177,88,178,88,179,88,180,88,181,88,182,88,183,88,184,88,185,88,186,88,187,88,189,88,190,88,191,88,192,88,194,88,195,88,196,88,198,88,199,88,200,88,201,88,202,88,203,88,204,88,205,88,206,88,207,88,208,88,210,88,211,88,212,88,214,88,215,88,216,88,217,88,218,88,219,88,220,88,221,88,222,88,223,88,224,88,225,88,226,88,227,88,229,88,230,88,231,88,232,88,233,88,234,88,237,88,239,88,241,88,242,88,244,88,245,88,247,88,248,88,250,88,251,88,252,88,253,88,254,88,255,88,0,89,1,89,3,89,5,89,6,89,8,89,9,89,10,89,11,89,12,89,14,89,16,89,17,89,18,89,19,89,23,89,24,89,27,89,29,89,30,89,32,89,33,89,34,89,35,89,38,89,40,89,44,89,48,89,50,89,51,89,53,89,54,89,59,89,61,89,62,89,63,89,64,89,67,89,69,89,70,89,74,89,76,89,77,89,80,89,82,89,83,89,89,89,91,89,92,89,93,89,94,89,95,89,97,89,99,89,100,89,102,89,103,89,104,89,105,89,106,89,107,89,108,89,109,89,110,89,111,89,112,89,113,89,114,89,117,89,119,89,122,89,123,89,124,89,126,89,127,89,128,89,133,89,137,89,139,89,140,89,142,89,143,89,144,89,145,89,148,89,149,89,152,89,154,89,155,89,156,89,157,89,159,89,160,89,161,89,162,89,166,89,167,89,172,89,173,89,176,89,177,89,179,89,180,89,181,89,182,89,183,89,184,89,186,89,188,89,189,89,191,89,192,89,193,89,194,89,195,89,196,89,197,89,199,89,200,89,201,89,204,89,205,89,206,89,207,89,213,89,214,89,217,89,219,89,222,89,223,89,224,89,225,89,226,89,228,89,230,89,231,89,233,89,234,89,235,89,237,89,238,89,239,89,240,89,241,89,242,89,243,89,244,89,245,89,246,89,247,89,248,89,250,89,252,89,253,89,254,89,0,90,2,90,10,90,11,90,13,90,14,90,15,90,16,90,18,90,20,90,21,90,22,90,23,90,25,90,26,90,27,90,29,90,30,90,33,90,34,90,36,90,38,90,39,90,40,90,42,90,43,90,44,90,45,90,46,90,47,90,48,90,51,90,53,90,55,90,56,90,57,90,58,90,59,90,61,90,62,90,63,90,65,90,66,90,67,90,68,90,69,90,71,90,72,90,75,90,76,90,77,90,78,90,79,90,80,90,81,90,82,90,83,90,84,90,86,90,87,90,88,90,89,90,91,90,92,90,93,90,94,90,95,90,96,90,97,90,99,90,100,90,101,90,102,90,104,90,105,90,107,90,108,90,109,90,110,90,111,90,112,90,113,90,114,90,115,90,120,90,121,90,123,90,124,90,125,90,126,90,128,90,129,90,130,90,131,90,132,90,133,90,134,90,135,90,136,90,137,90,138,90,139,90,140,90,141,90,142,90,143,90,144,90,145,90,147,90,148,90,149,90,150,90,151,90,152,90,153,90,156,90,157,90,158,90,159,90,160,90,161,90,162,90,163,90,164,90,165,90,166,90,167,90,168,90,169,90,171,90,172,90,173,90,174,90,175,90,176,90,177,90,180,90,182,90,183,90,185,90,186,90,187,90,188,90,189,90,191,90,192,90,195,90,196,90,197,90,198,90,199,90,200,90,202,90,203,90,205,90,206,90,207,90,208,90,209,90,211,90,213,90,215,90,217,90,218,90,219,90,221,90,222,90,223,90,226,90,228,90,229,90,231,90,232,90,234,90,236,90,237,90,238,90,239,90,240,90,242,90,243,90,244,90,245,90,246,90,247,90,248,90,249,90,250,90,251,90,252,90,253,90,254,90,255,90,0,91,1,91,2,91,3,91,4,91,5,91,6,91,7,91,8,91,10,91,11,91,12,91,13,91,14,91,15,91,16,91,17,91,18,91,19,91,20,91,21,91,24,91,25,91,26,91,27,91,28,91,29,91,30,91,31,91,32,91,33,91,34,91,35,91,36,91,37,91,38,91,39,91,40,91,41,91,42,91,43,91,44,91,45,91,46,91,47,91,48,91,49,91,51,91,53,91,54,91,56,91,57,91,58,91,59,91,60,91,61,91,62,91,63,91,65,91,66,91,67,91,68,91,69,91,70,91,71,91,72,91,73,91,74,91,75,91,76,91,77,91,78,91,79,91,82,91,86,91,94,91,96,91,97,91,103,91,104,91,107,91,109,91,110,91,111,91,114,91,116,91,118,91,119,91,120,91,121,91,123,91,124,91,126,91,127,91,130,91,134,91,138,91,141,91,142,91,144,91,145,91,146,91,148,91,150,91,159,91,167,91,168,91,169,91,172,91,173,91,174,91,175,91,177,91,178,91,183,91,186,91,187,91,188,91,192,91,193,91,195,91,200,91,201,91,202,91,203,91,205,91,206,91,207,91,209,91,212,91,213,91,214,91,215,91,216,91,217,91,218,91,219,91,220,91,224,91,226,91,227,91,230,91,231,91,233,91,234,91,235,91,236,91,237,91,239,91,241,91,242,91,243,91,244,91,245,91,246,91,247,91,253,91,254,91,0,92,2,92,3,92,5,92,7,92,8,92,11,92,12,92,13,92,14,92,16,92,18,92,19,92,23,92,25,92,27,92,30,92,31,92,32,92,33,92,35,92,38,92,40,92,41,92,42,92,43,92,45,92,46,92,47,92,48,92,50,92,51,92,53,92,54,92,55,92,67,92,68,92,70,92,71,92,76,92,77,92,82,92,83,92,84,92,86,92,87,92,88,92,90,92,91,92,92,92,93,92,95,92,98,92,100,92,103,92,104,92,105,92,106,92,107,92,108,92,109,92,112,92,114,92,115,92,116,92,117,92,118,92,119,92,120,92,123,92,124,92,125,92,126,92,128,92,131,92,132,92,133,92,134,92,135,92,137,92,138,92,139,92,142,92,143,92,146,92,147,92,149,92,157,92,158,92,159,92,160,92,161,92,164,92,165,92,166,92,167,92,168,92,170,92,174,92,175,92,176,92,178,92,180,92,182,92,185,92,186,92,187,92,188,92,190,92,192,92,194,92,195,92,197,92,198,92,199,92,200,92,201,92,202,92,204,92,205,92,206,92,207,92,208,92,209,92,211,92,212,92,213,92,214,92,215,92,216,92,218,92,219,92,220,92,221,92,222,92,223,92,224,92,226,92,227,92,231,92,233,92,235,92,236,92,238,92,239,92,241,92,242,92,243,92,244,92,245,92,246,92,247,92,248,92,249,92,250,92,252,92,253,92,254,92,255,92,0,93,1,93,4,93,5,93,8,93,9,93,10,93,11,93,12,93,13,93,15,93,16,93,17,93,18,93,19,93,21,93,23,93,24,93,25,93,26,93,28,93,29,93,31,93,32,93,33,93,34,93,35,93,37,93,40,93,42,93,43,93,44,93,47,93,48,93,49,93,50,93,51,93,53,93,54,93,55,93,56,93,57,93,58,93,59,93,60,93,63,93,64,93,65,93,66,93,67,93,68,93,69,93,70,93,72,93,73,93,77,93,78,93,79,93,80,93,81,93,82,93,83,93,84,93,85,93,86,93,87,93,89,93,90,93,92,93,94,93,95,93,96,93,97,93,98,93,99,93,100,93,101,93,102,93,103,93,104,93,106,93,109,93,110,93,112,93,113,93,114,93,115,93,117,93,118,93,119,93,120,93,121,93,122,93,123,93,124,93,125,93,126,93,127,93,128,93,129,93,131,93,132,93,133,93,134,93,135,93,136,93,137,93,138,93,139,93,140,93,141,93,142,93,143,93,144,93,145,93,146,93,147,93,148,93,149,93,150,93,151,93,152,93,154,93,155,93,156,93,158,93,159,93,160,93,161,93,162,93,163,93,164,93,165,93,166,93,167,93,168,93,169,93,170,93,171,93,172,93,173,93,174,93,175,93,176,93,177,93,178,93,179,93,180,93,181,93,182,93,184,93,185,93,186,93,187,93,188,93,189,93,190,93,191,93,192,93,193,93,194,93,195,93,196,93,198,93,199,93,200,93,201,93,202,93,203,93,204,93,206,93,207,93,208,93,209,93,210,93,211,93,212,93,213,93,214,93,215,93,216,93,217,93,218,93,220,93,223,93,224,93,227,93,228,93,234,93,236,93,237,93,240,93,245,93,246,93,248,93,249,93,250,93,251,93,252,93,255,93,0,94,4,94,7,94,9,94,10,94,11,94,13,94,14,94,18,94,19,94,23,94,30,94,31,94,32,94,33,94,34,94,35,94,36,94,37,94,40,94,41,94,42,94,43,94,44,94,47,94,48,94,50,94,51,94,52,94,53,94,54,94,57,94,58,94,62,94,63,94,64,94,65,94,67,94,70,94,71,94,72,94,73,94,74,94,75,94,77,94,78,94,79,94,80,94,81,94,82,94,83,94,86,94,87,94,88,94,89,94,90,94,92,94,93,94,95,94,96,94,99,94,100,94,101,94,102,94,103,94,104,94,105,94,106,94,107,94,108,94,109,94,110,94,111,94,112,94,113,94,117,94,119,94,121,94,126,94,129,94,130,94,131,94,133,94,136,94,137,94,140,94,141,94,142,94,146,94,152,94,155,94,157,94,161,94,162,94,163,94,164,94,168,94,169,94,170,94,171,94,172,94,174,94,175,94,176,94,177,94,178,94,180,94,186,94,187,94,188,94,189,94,191,94,192,94,193,94,194,94,195,94,196,94,197,94,198,94,199,94,200,94,203,94,204,94,205,94,206,94,207,94,208,94,212,94,213,94,215,94,216,94,217,94,218,94,220,94,221,94,222,94,223,94,224,94,225,94,226,94,227,94,228,94,229,94,230,94,231,94,233,94,235,94,236,94,237,94,238,94,239,94,240,94,241,94,242,94,243,94,245,94,248,94,249,94,251,94,252,94,253,94,5,95,6,95,7,95,9,95,12,95,13,95,14,95,16,95,18,95,20,95,22,95,25,95,26,95,28,95,29,95,30,95,33,95,34,95,35,95,36,95,40,95,43,95,44,95,46,95,48,95,50,95,51,95,52,95,53,95,54,95,55,95,56,95,59,95,61,95,62,95,63,95,65,95,66,95,67,95,68,95,69,95,70,95,71,95,72,95,73,95,74,95,75,95,76,95,77,95,78,95,79,95,81,95,84,95,89,95,90,95,91,95,92,95,94,95,95,95,96,95,99,95,101,95,103,95,104,95,107,95,110,95,111,95,114,95,116,95,117,95,118,95,120,95,122,95,125,95,126,95,127,95,131,95,134,95,141,95,142,95,143,95,145,95,147,95,148,95,150,95,154,95,155,95,157,95,158,95,159,95,160,95,162,95,163,95,164,95,165,95,166,95,167,95,169,95,171,95,172,95,175,95,176,95,177,95,178,95,179,95,180,95,182,95,184,95,185,95,186,95,187,95,190,95,191,95,192,95,193,95,194,95,199,95,200,95,202,95,203,95,206,95,211,95,212,95,213,95,218,95,219,95,220,95,222,95,223,95,226,95,227,95,229,95,230,95,232,95,233,95,236,95,239,95,240,95,242,95,243,95,244,95,246,95,247,95,249,95,250,95,252,95,7,96,8,96,9,96,11,96,12,96,16,96,17,96,19,96,23,96,24,96,26,96,30,96,31,96,34,96,35,96,36,96,44,96,45,96,46,96,48,96,49,96,50,96,51,96,52,96,54,96,55,96,56,96,57,96,58,96,61,96,62,96,64,96,68,96,69,96,70,96,71,96,72,96,73,96,74,96,76,96,78,96,79,96,81,96,83,96,84,96,86,96,87,96,88,96,91,96,92,96,94,96,95,96,96,96,97,96,101,96,102,96,110,96,113,96,114,96,116,96,117,96,119,96,126,96,128,96,129,96,130,96,133,96,134,96,135,96,136,96,138,96,139,96,142,96,143,96,144,96,145,96,147,96,149,96,151,96,152,96,153,96,156,96,158,96,161,96,162,96,164,96,165,96,167,96,169,96,170,96,174,96,176,96,179,96,181,96,182,96,183,96,185,96,186,96,189,96,190,96,191,96,192,96,193,96,194,96,195,96,196,96,199,96,200,96,201,96,204,96,205,96,206,96,207,96,208,96,210,96,211,96,212,96,214,96,215,96,217,96,219,96,222,96,225,96,226,96,227,96,228,96,229,96,234,96,241,96,242,96,245,96,247,96,248,96,251,96,252,96,253,96,254,96,255,96,2,97,3,97,4,97,5,97,7,97,10,97,11,97,12,97,16,97,17,97,18,97,19,97,20,97,22,97,23,97,24,97,25,97,27,97,28,97,29,97,30,97,33,97,34,97,37,97,40,97,41,97,42,97,44,97,45,97,46,97,47,97,48,97,49,97,50,97,51,97,52,97,53,97,54,97,55,97,56,97,57,97,58,97,59,97,60,97,61,97,62,97,64,97,65,97,66,97,67,97,68,97,69,97,70,97,71,97,73,97,75,97,77,97,79,97,80,97,82,97,83,97,84,97,86,97,87,97,88,97,89,97,90,97,91,97,92,97,94,97,95,97,96,97,97,97,99,97,100,97,101,97,102,97,105,97,106,97,107,97,108,97,109,97,110,97,111,97,113,97,114,97,115,97,116,97,118,97,120,97,121,97,122,97,123,97,124,97,125,97,126,97,127,97,128,97,129,97,130,97,131,97,132,97,133,97,134,97,135,97,136,97,137,97,138,97,140,97,141,97,143,97,144,97,145,97,146,97,147,97,149,97,150,97,151,97,152,97,153,97,154,97,155,97,156,97,158,97,159,97,160,97,161,97,162,97,163,97,164,97,165,97,166,97,170,97,171,97,173,97,174,97,175,97,176,97,177,97,178,97,179,97,180,97,181,97,182,97,184,97,185,97,186,97,187,97,188,97,189,97,191,97,192,97,193,97,195,97,196,97,197,97,198,97,199,97,201,97,204,97,205,97,206,97,207,97,208,97,211,97,213,97,214,97,215,97,216,97,217,97,218,97,219,97,220,97,221,97,222,97,223,97,224,97,225,97,226,97,227,97,228,97,229,97,231,97,232,97,233,97,234,97,235,97,236,97,237,97,238,97,239,97,240,97,241,97,242,97,243,97,244,97,246,97,247,97,248,97,249,97,250,97,251,97,252,97,253,97,254,97,0,98,1,98,2,98,3,98,4,98,5,98,7,98,9,98,19,98,20,98,25,98,28,98,29,98,30,98,32,98,35,98,38,98,39,98,40,98,41,98,43,98,45,98,47,98,48,98,49,98,50,98,53,98,54,98,56,98,57,98,58,98,59,98,60,98,66,98,68,98,69,98,70,98,74,98,79,98,80,98,85,98,86,98,87,98,89,98,90,98,92,98,93,98,94,98,95,98,96,98,97,98,98,98,100,98,101,98,104,98,113,98,114,98,116,98,117,98,119,98,120,98,122,98,123,98,125,98,129,98,130,98,131,98,133,98,134,98,135,98,136,98,139,98,140,98,141,98,142,98,143,98,144,98,148,98,153,98,156,98,157,98,158,98,163,98,166,98,167,98,169,98,170,98,173,98,174,98,175,98,176,98,178,98,179,98,180,98,182,98,183,98,184,98,186,98,190,98,192,98,193,98,195,98,203,98,207,98,209,98,213,98,221,98,222,98,224,98,225,98,228,98,234,98,235,98,240,98,242,98,245,98,248,98,249,98,250,98,251,98,0,99,3,99,4,99,5,99,6,99,10,99,11,99,12,99,13,99,15,99,16,99,18,99,19,99,20,99,21,99,23,99,24,99,25,99,28,99,38,99,39,99,41,99,44,99,45,99,46,99,48,99,49,99,51,99,52,99,53,99,54,99,55,99,56,99,59,99,60,99,62,99,63,99,64,99,65,99,68,99,71,99,72,99,74,99,81,99,82,99,83,99,84,99,86,99,87,99,88,99,89,99,90,99,91,99,92,99,93,99,96,99,100,99,101,99,102,99,104,99,106,99,107,99,108,99,111,99,112,99,114,99,115,99,116,99,117,99,120,99,121,99,124,99,125,99,126,99,127,99,129,99,131,99,132,99,133,99,134,99,139,99,141,99,145,99,147,99,148,99,149,99,151,99,153,99,154,99,155,99,156,99,157,99,158,99,159,99,161,99,164,99,166,99,171,99,175,99,177,99,178,99,181,99,182,99,185,99,187,99,189,99,191,99,192,99,193,99,194,99,195,99,197,99,199,99,200,99,202,99,203,99,204,99,209,99,211,99,212,99,213,99,215,99,216,99,217,99,218,99,219,99,220,99,221,99,223,99,226,99,228,99,229,99,230,99,231,99,232,99,235,99,236,99,238,99,239,99,240,99,241,99,243,99,245,99,247,99,249,99,250,99,251,99,252,99,254,99,3,100,4,100,6,100,7,100,8,100,9,100,10,100,13,100,14,100,17,100,18,100,21,100,22,100,23,100,24,100,25,100,26,100,29,100,31,100,34,100,35,100,36,100,37,100,39,100,40,100,41,100,43,100,46,100,47,100,48,100,49,100,50,100,51,100,53,100,54,100,55,100,56,100,57,100,59,100,60,100,62,100,64,100,66,100,67,100,73,100,75,100,76,100,77,100,78,100,79,100,80,100,81,100,83,100,85,100,86,100,87,100,89,100,90,100,91,100,92,100,93,100,95,100,96,100,97,100,98,100,99,100,100,100,101,100,102,100,104,100,106,100,107,100,108,100,110,100,111,100,112,100,113,100,114,100,115,100,116,100,117,100,118,100,119,100,123,100,124,100,125,100,126,100,127,100,128,100,129,100,131,100,134,100,136,100,137,100,138,100,139,100,140,100,141,100,142,100,143,100,144,100,147,100,148,100,151,100,152,100,154,100,155,100,156,100,157,100,159,100,160,100,161,100,162,100,163,100,165,100,166,100,167,100,168,100,170,100,171,100,175,100,177,100,178,100,179,100,180,100,182,100,185,100,187,100,189,100,190,100,191,100,193,100,195,100,196,100,198,100,199,100,200,100,201,100,202,100,203,100,204,100,207,100,209,100,211,100,212,100,213,100,214,100,217,100,218,100,219,100,220,100,221,100,223,100,224,100,225,100,227,100,229,100,231,100,232,100,233,100,234,100,235,100,236,100,237,100,238,100,239,100,240,100,241,100,242,100,243,100,244,100,245,100,246,100,247,100,248,100,249,100,250,100,251,100,252,100,253,100,254,100,255,100,1,101,2,101,3,101,4,101,5,101,6,101,7,101,8,101,10,101,11,101,12,101,13,101,14,101,15,101,16,101,17,101,19,101,20,101,21,101,22,101,23,101,25,101,26,101,27,101,28,101,29,101,30,101,31,101,32,101,33,101,34,101,35,101,36,101,38,101,39,101,40,101,41,101,42,101,44,101,45,101,48,101,49,101,50,101,51,101,55,101,58,101,60,101,61,101,64,101,65,101,66,101,67,101,68,101,70,101,71,101,74,101,75,101,77,101,78,101,80,101,82,101,83,101,84,101,87,101,88,101,90,101,92,101,95,101,96,101,97,101,100,101,101,101,103,101,104,101,105,101,106,101,109,101,110,101,111,101,113,101,115,101,117,101,118,101,120,101,121,101,122,101,123,101,124,101,125,101,126,101,127,101,128,101,129,101,130,101,131,101,132,101,133,101,134,101,136,101,137,101,138,101,141,101,142,101,143,101,146,101,148,101,149,101,150,101,152,101,154,101,157,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+42444);
	/* memory initializer */ allocate([158,101,160,101,162,101,163,101,166,101,168,101,170,101,172,101,174,101,177,101,178,101,179,101,180,101,181,101,182,101,183,101,184,101,186,101,187,101,190,101,191,101,192,101,194,101,199,101,200,101,201,101,202,101,205,101,208,101,209,101,211,101,212,101,213,101,216,101,217,101,218,101,219,101,220,101,221,101,222,101,223,101,225,101,227,101,228,101,234,101,235,101,242,101,243,101,244,101,245,101,248,101,249,101,251,101,252,101,253,101,254,101,255,101,1,102,4,102,5,102,7,102,8,102,9,102,11,102,13,102,16,102,17,102,18,102,22,102,23,102,24,102,26,102,27,102,28,102,30,102,33,102,34,102,35,102,36,102,38,102,41,102,42,102,43,102,44,102,46,102,48,102,50,102,51,102,55,102,56,102,57,102,58,102,59,102,61,102,63,102,64,102,66,102,68,102,69,102,70,102,71,102,72,102,73,102,74,102,77,102,78,102,80,102,81,102,88,102,89,102,91,102,92,102,93,102,94,102,96,102,98,102,99,102,101,102,103,102,105,102,106,102,107,102,108,102,109,102,113,102,114,102,115,102,117,102,120,102,121,102,123,102,124,102,125,102,127,102,128,102,129,102,131,102,133,102,134,102,136,102,137,102,138,102,139,102,141,102,142,102,143,102,144,102,146,102,147,102,148,102,149,102,152,102,153,102,154,102,155,102,156,102,158,102,159,102,160,102,161,102,162,102,163,102,164,102,165,102,166,102,169,102,170,102,171,102,172,102,173,102,175,102,176,102,177,102,178,102,179,102,181,102,182,102,183,102,184,102,186,102,187,102,188,102,189,102,191,102,192,102,193,102,194,102,195,102,196,102,197,102,198,102,199,102,200,102,201,102,202,102,203,102,204,102,205,102,206,102,207,102,208,102,209,102,210,102,211,102,212,102,213,102,214,102,215,102,216,102,218,102,222,102,223,102,224,102,225,102,226,102,227,102,228,102,229,102,231,102,232,102,234,102,235,102,236,102,237,102,238,102,239,102,241,102,245,102,246,102,248,102,250,102,251,102,253,102,1,103,2,103,3,103,4,103,5,103,6,103,7,103,12,103,14,103,15,103,17,103,18,103,19,103,22,103,24,103,25,103,26,103,28,103,30,103,32,103,33,103,34,103,35,103,36,103,37,103,39,103,41,103,46,103,48,103,50,103,51,103,54,103,55,103,56,103,57,103,59,103,60,103,62,103,63,103,65,103,68,103,69,103,71,103,74,103,75,103,77,103,82,103,84,103,85,103,87,103,88,103,89,103,90,103,91,103,93,103,98,103,99,103,100,103,102,103,103,103,107,103,108,103,110,103,113,103,116,103,118,103,120,103,121,103,122,103,123,103,125,103,128,103,130,103,131,103,133,103,134,103,136,103,138,103,140,103,141,103,142,103,143,103,145,103,146,103,147,103,148,103,150,103,153,103,155,103,159,103,160,103,161,103,164,103,166,103,169,103,172,103,174,103,177,103,178,103,180,103,185,103,186,103,187,103,188,103,189,103,190,103,191,103,192,103,194,103,197,103,198,103,199,103,200,103,201,103,202,103,203,103,204,103,205,103,206,103,213,103,214,103,215,103,219,103,223,103,225,103,227,103,228,103,230,103,231,103,232,103,234,103,235,103,237,103,238,103,242,103,245,103,246,103,247,103,248,103,249,103,250,103,251,103,252,103,254,103,1,104,2,104,3,104,4,104,6,104,13,104,16,104,18,104,20,104,21,104,24,104,25,104,26,104,27,104,28,104,30,104,31,104,32,104,34,104,35,104,36,104,37,104,38,104,39,104,40,104,43,104,44,104,45,104,46,104,47,104,48,104,49,104,52,104,53,104,54,104,58,104,59,104,63,104,71,104,75,104,77,104,79,104,82,104,86,104,87,104,88,104,89,104,90,104,91,104,92,104,93,104,94,104,95,104,106,104,108,104,109,104,110,104,111,104,112,104,113,104,114,104,115,104,117,104,120,104,121,104,122,104,123,104,124,104,125,104,126,104,127,104,128,104,130,104,132,104,135,104,136,104,137,104,138,104,139,104,140,104,141,104,142,104,144,104,145,104,146,104,148,104,149,104,150,104,152,104,153,104,154,104,155,104,156,104,157,104,158,104,159,104,160,104,161,104,163,104,164,104,165,104,169,104,170,104,171,104,172,104,174,104,177,104,178,104,180,104,182,104,183,104,184,104,185,104,186,104,187,104,188,104,189,104,190,104,191,104,193,104,195,104,196,104,197,104,198,104,199,104,200,104,202,104,204,104,206,104,207,104,208,104,209,104,211,104,212,104,214,104,215,104,217,104,219,104,220,104,221,104,222,104,223,104,225,104,226,104,228,104,229,104,230,104,231,104,232,104,233,104,234,104,235,104,236,104,237,104,239,104,242,104,243,104,244,104,246,104,247,104,248,104,251,104,253,104,254,104,255,104,0,105,2,105,3,105,4,105,6,105,7,105,8,105,9,105,10,105,12,105,15,105,17,105,19,105,20,105,21,105,22,105,23,105,24,105,25,105,26,105,27,105,28,105,29,105,30,105,33,105,34,105,35,105,37,105,38,105,39,105,40,105,41,105,42,105,43,105,44,105,46,105,47,105,49,105,50,105,51,105,53,105,54,105,55,105,56,105,58,105,59,105,60,105,62,105,64,105,65,105,67,105,68,105,69,105,70,105,71,105,72,105,73,105,74,105,75,105,76,105,77,105,78,105,79,105,80,105,81,105,82,105,83,105,85,105,86,105,88,105,89,105,91,105,92,105,95,105,97,105,98,105,100,105,101,105,103,105,104,105,105,105,106,105,108,105,109,105,111,105,112,105,114,105,115,105,116,105,117,105,118,105,122,105,123,105,125,105,126,105,127,105,129,105,131,105,133,105,138,105,139,105,140,105,142,105,143,105,144,105,145,105,146,105,147,105,150,105,151,105,153,105,154,105,157,105,158,105,159,105,160,105,161,105,162,105,163,105,164,105,165,105,166,105,169,105,170,105,172,105,174,105,175,105,176,105,178,105,179,105,181,105,182,105,184,105,185,105,186,105,188,105,189,105,190,105,191,105,192,105,194,105,195,105,196,105,197,105,198,105,199,105,200,105,201,105,203,105,205,105,207,105,209,105,210,105,211,105,213,105,214,105,215,105,216,105,217,105,218,105,220,105,221,105,222,105,225,105,226,105,227,105,228,105,229,105,230,105,231,105,232,105,233,105,234,105,235,105,236,105,238,105,239,105,240,105,241,105,243,105,244,105,245,105,246,105,247,105,248,105,249,105,250,105,251,105,252,105,254,105,0,106,1,106,2,106,3,106,4,106,5,106,6,106,7,106,8,106,9,106,11,106,12,106,13,106,14,106,15,106,16,106,17,106,18,106,19,106,20,106,21,106,22,106,25,106,26,106,27,106,28,106,29,106,30,106,32,106,34,106,35,106,36,106,37,106,38,106,39,106,41,106,43,106,44,106,45,106,46,106,48,106,50,106,51,106,52,106,54,106,55,106,56,106,57,106,58,106,59,106,60,106,63,106,64,106,65,106,66,106,67,106,69,106,70,106,72,106,73,106,74,106,75,106,76,106,77,106,78,106,79,106,81,106,82,106,83,106,84,106,85,106,86,106,87,106,90,106,92,106,93,106,94,106,95,106,96,106,98,106,99,106,100,106,102,106,103,106,104,106,105,106,106,106,107,106,108,106,109,106,110,106,111,106,112,106,114,106,115,106,116,106,117,106,118,106,119,106,120,106,122,106,123,106,125,106,126,106,127,106,129,106,130,106,131,106,133,106,134,106,135,106,136,106,137,106,138,106,139,106,140,106,141,106,143,106,146,106,147,106,148,106,149,106,150,106,152,106,153,106,154,106,155,106,156,106,157,106,158,106,159,106,161,106,162,106,163,106,164,106,165,106,166,106,167,106,168,106,170,106,173,106,174,106,175,106,176,106,177,106,178,106,179,106,180,106,181,106,182,106,183,106,184,106,185,106,186,106,187,106,188,106,189,106,190,106,191,106,192,106,193,106,194,106,195,106,196,106,197,106,198,106,199,106,200,106,201,106,202,106,203,106,204,106,205,106,206,106,207,106,208,106,209,106,210,106,211,106,212,106,213,106,214,106,215,106,216,106,217,106,218,106,219,106,220,106,221,106,222,106,223,106,224,106,225,106,226,106,227,106,228,106,229,106,230,106,231,106,232,106,233,106,234,106,235,106,236,106,237,106,238,106,239,106,240,106,241,106,242,106,243,106,244,106,245,106,246,106,247,106,248,106,249,106,250,106,251,106,252,106,253,106,254,106,255,106,0,107,1,107,2,107,3,107,4,107,5,107,6,107,7,107,8,107,9,107,10,107,11,107,12,107,13,107,14,107,15,107,16,107,17,107,18,107,19,107,20,107,21,107,22,107,23,107,24,107,25,107,26,107,27,107,28,107,29,107,30,107,31,107,37,107,38,107,40,107,41,107,42,107,43,107,44,107,45,107,46,107,47,107,48,107,49,107,51,107,52,107,53,107,54,107,56,107,59,107,60,107,61,107,63,107,64,107,65,107,66,107,68,107,69,107,72,107,74,107,75,107,77,107,78,107,79,107,80,107,81,107,82,107,83,107,84,107,85,107,86,107,87,107,88,107,90,107,91,107,92,107,93,107,94,107,95,107,96,107,97,107,104,107,105,107,107,107,108,107,109,107,110,107,111,107,112,107,113,107,114,107,115,107,116,107,117,107,118,107,119,107,120,107,122,107,125,107,126,107,127,107,128,107,133,107,136,107,140,107,142,107,143,107,144,107,145,107,148,107,149,107,151,107,152,107,153,107,156,107,157,107,158,107,159,107,160,107,162,107,163,107,164,107,165,107,166,107,167,107,168,107,169,107,171,107,172,107,173,107,174,107,175,107,176,107,177,107,178,107,182,107,184,107,185,107,186,107,187,107,188,107,189,107,190,107,192,107,195,107,196,107,198,107,199,107,200,107,201,107,202,107,204,107,206,107,208,107,209,107,216,107,218,107,220,107,221,107,222,107,223,107,224,107,226,107,227,107,228,107,229,107,230,107,231,107,232,107,233,107,236,107,237,107,238,107,240,107,241,107,242,107,244,107,246,107,247,107,248,107,250,107,251,107,252,107,254,107,255,107,0,108,1,108,2,108,3,108,4,108,8,108,9,108,10,108,11,108,12,108,14,108,18,108,23,108,28,108,29,108,30,108,32,108,35,108,37,108,43,108,44,108,45,108,49,108,51,108,54,108,55,108,57,108,58,108,59,108,60,108,62,108,63,108,67,108,68,108,69,108,72,108,75,108,76,108,77,108,78,108,79,108,81,108,82,108,83,108,86,108,88,108,89,108,90,108,98,108,99,108,101,108,102,108,103,108,107,108,108,108,109,108,110,108,111,108,113,108,115,108,117,108,119,108,120,108,122,108,123,108,124,108,127,108,128,108,132,108,135,108,138,108,139,108,141,108,142,108,145,108,146,108,149,108,150,108,151,108,152,108,154,108,156,108,157,108,158,108,160,108,162,108,168,108,172,108,175,108,176,108,180,108,181,108,182,108,183,108,186,108,192,108,193,108,194,108,195,108,198,108,199,108,200,108,203,108,205,108,206,108,207,108,209,108,210,108,216,108,217,108,218,108,220,108,221,108,223,108,228,108,230,108,231,108,233,108,236,108,237,108,242,108,244,108,249,108,255,108,0,109,2,109,3,109,5,109,6,109,8,109,9,109,10,109,13,109,15,109,16,109,17,109,19,109,20,109,21,109,22,109,24,109,28,109,29,109,31,109,32,109,33,109,34,109,35,109,36,109,38,109,40,109,41,109,44,109,45,109,47,109,48,109,52,109,54,109,55,109,56,109,58,109,63,109,64,109,66,109,68,109,73,109,76,109,80,109,85,109,86,109,87,109,88,109,91,109,93,109,95,109,97,109,98,109,100,109,101,109,103,109,104,109,107,109,108,109,109,109,112,109,113,109,114,109,115,109,117,109,118,109,121,109,122,109,123,109,125,109,126,109,127,109,128,109,129,109,131,109,132,109,134,109,135,109,138,109,139,109,141,109,143,109,144,109,146,109,150,109,151,109,152,109,153,109,154,109,156,109,162,109,165,109,172,109,173,109,176,109,177,109,179,109,180,109,182,109,183,109,185,109,186,109,187,109,188,109,189,109,190,109,193,109,194,109,195,109,200,109,201,109,202,109,205,109,206,109,207,109,208,109,210,109,211,109,212,109,213,109,215,109,218,109,219,109,220,109,223,109,226,109,227,109,229,109,231,109,232,109,233,109,234,109,237,109,239,109,240,109,242,109,244,109,245,109,246,109,248,109,250,109,253,109,254,109,255,109,0,110,1,110,2,110,3,110,4,110,6,110,7,110,8,110,9,110,11,110,15,110,18,110,19,110,21,110,24,110,25,110,27,110,28,110,30,110,31,110,34,110,38,110,39,110,40,110,42,110,44,110,46,110,48,110,49,110,51,110,53,110,54,110,55,110,57,110,59,110,60,110,61,110,62,110,63,110,64,110,65,110,66,110,69,110,70,110,71,110,72,110,73,110,74,110,75,110,76,110,79,110,80,110,81,110,82,110,85,110,87,110,89,110,90,110,92,110,93,110,94,110,96,110,97,110,98,110,99,110,100,110,101,110,102,110,103,110,104,110,105,110,106,110,108,110,109,110,111,110,112,110,113,110,114,110,115,110,116,110,117,110,118,110,119,110,120,110,121,110,122,110,123,110,124,110,125,110,128,110,129,110,130,110,132,110,135,110,136,110,138,110,139,110,140,110,141,110,142,110,145,110,146,110,147,110,148,110,149,110,150,110,151,110,153,110,154,110,155,110,157,110,158,110,160,110,161,110,163,110,164,110,166,110,168,110,169,110,171,110,172,110,173,110,174,110,176,110,179,110,181,110,184,110,185,110,188,110,190,110,191,110,192,110,195,110,196,110,197,110,198,110,200,110,201,110,202,110,204,110,205,110,206,110,208,110,210,110,214,110,216,110,217,110,219,110,220,110,221,110,227,110,231,110,234,110,235,110,236,110,237,110,238,110,239,110,240,110,241,110,242,110,243,110,245,110,246,110,247,110,248,110,250,110,251,110,252,110,253,110,254,110,255,110,0,111,1,111,3,111,4,111,5,111,7,111,8,111,10,111,11,111,12,111,13,111,14,111,16,111,17,111,18,111,22,111,23,111,24,111,25,111,26,111,27,111,28,111,29,111,30,111,31,111,33,111,34,111,35,111,37,111,38,111,39,111,40,111,44,111,46,111,48,111,50,111,52,111,53,111,55,111,56,111,57,111,58,111,59,111,60,111,61,111,63,111,64,111,65,111,66,111,67,111,68,111,69,111,72,111,73,111,74,111,76,111,78,111,79,111,80,111,81,111,82,111,83,111,84,111,85,111,86,111,87,111,89,111,90,111,91,111,93,111,95,111,96,111,97,111,99,111,100,111,101,111,103,111,104,111,105,111,106,111,107,111,108,111,111,111,112,111,113,111,115,111,117,111,118,111,119,111,121,111,123,111,125,111,126,111,127,111,128,111,129,111,130,111,131,111,133,111,134,111,135,111,138,111,139,111,143,111,144,111,145,111,146,111,147,111,148,111,149,111,150,111,151,111,152,111,153,111,154,111,155,111,157,111,158,111,159,111,160,111,162,111,163,111,164,111,165,111,166,111,168,111,169,111,170,111,171,111,172,111,173,111,174,111,175,111,176,111,177,111,178,111,180,111,181,111,183,111,184,111,186,111,187,111,188,111,189,111,190,111,191,111,193,111,195,111,196,111,197,111,198,111,199,111,200,111,202,111,203,111,204,111,205,111,206,111,207,111,208,111,211,111,212,111,213,111,214,111,215,111,216,111,217,111,218,111,219,111,220,111,221,111,223,111,226,111,227,111,228,111,229,111,230,111,231,111,232,111,233,111,234,111,235,111,236,111,237,111,240,111,241,111,242,111,243,111,244,111,245,111,246,111,247,111,248,111,249,111,250,111,251,111,252,111,253,111,254,111,255,111,0,112,1,112,2,112,3,112,4,112,5,112,6,112,7,112,8,112,9,112,10,112,11,112,12,112,13,112,14,112,15,112,16,112,18,112,19,112,20,112,21,112,22,112,23,112,24,112,25,112,28,112,29,112,30,112,31,112,32,112,33,112,34,112,36,112,37,112,38,112,39,112,40,112,41,112,42,112,43,112,44,112,45,112,46,112,47,112,48,112,49,112,50,112,51,112,52,112,54,112,55,112,56,112,58,112,59,112,60,112,61,112,62,112,63,112,64,112,65,112,66,112,67,112,68,112,69,112,70,112,71,112,72,112,73,112,74,112,75,112,77,112,78,112,80,112,81,112,82,112,83,112,84,112,85,112,86,112,87,112,88,112,89,112,90,112,91,112,92,112,93,112,95,112,96,112,97,112,98,112,99,112,100,112,101,112,102,112,103,112,104,112,105,112,106,112,110,112,113,112,114,112,115,112,116,112,119,112,121,112,122,112,123,112,125,112,129,112,130,112,131,112,132,112,134,112,135,112,136,112,139,112,140,112,141,112,143,112,144,112,145,112,147,112,151,112,152,112,154,112,155,112,158,112,159,112,160,112,161,112,162,112,163,112,164,112,165,112,166,112,167,112,168,112,169,112,170,112,176,112,178,112,180,112,181,112,182,112,186,112,190,112,191,112,196,112,197,112,198,112,199,112,201,112,203,112,204,112,205,112,206,112,207,112,208,112,209,112,210,112,211,112,212,112,213,112,214,112,215,112,218,112,220,112,221,112,222,112,224,112,225,112,226,112,227,112,229,112,234,112,238,112,240,112,241,112,242,112,243,112,244,112,245,112,246,112,248,112,250,112,251,112,252,112,254,112,255,112,0,113,1,113,2,113,3,113,4,113,5,113,6,113,7,113,8,113,11,113,12,113,13,113,14,113,15,113,17,113,18,113,20,113,23,113,27,113,28,113,29,113,30,113,31,113,32,113,33,113,34,113,35,113,36,113,37,113,39,113,40,113,41,113,42,113,43,113,44,113,45,113,46,113,50,113,51,113,52,113,53,113,55,113,56,113,57,113,58,113,59,113,60,113,61,113,62,113,63,113,64,113,65,113,66,113,67,113,68,113,70,113,71,113,72,113,73,113,75,113,77,113,79,113,80,113,81,113,82,113,83,113,84,113,85,113,86,113,87,113,88,113,89,113,90,113,91,113,93,113,95,113,96,113,97,113,98,113,99,113,101,113,105,113,106,113,107,113,108,113,109,113,111,113,112,113,113,113,116,113,117,113,118,113,119,113,121,113,123,113,124,113,126,113,127,113,128,113,129,113,130,113,131,113,133,113,134,113,135,113,136,113,137,113,139,113,140,113,141,113,142,113,144,113,145,113,146,113,147,113,149,113,150,113,151,113,154,113,155,113,156,113,157,113,158,113,161,113,162,113,163,113,164,113,165,113,166,113,167,113,169,113,170,113,171,113,173,113,174,113,175,113,176,113,177,113,178,113,180,113,182,113,183,113,184,113,186,113,187,113,188,113,189,113,190,113,191,113,192,113,193,113,194,113,196,113,197,113,198,113,199,113,200,113,201,113,202,113,203,113,204,113,205,113,207,113,208,113,209,113,210,113,211,113,214,113,215,113,216,113,217,113,218,113,219,113,220,113,221,113,222,113,223,113,225,113,226,113,227,113,228,113,230,113,232,113,233,113,234,113,235,113,236,113,237,113,239,113,240,113,241,113,242,113,243,113,244,113,245,113,246,113,247,113,248,113,250,113,251,113,252,113,253,113,254,113,255,113,0,114,1,114,2,114,3,114,4,114,5,114,7,114,8,114,9,114,10,114,11,114,12,114,13,114,14,114,15,114,16,114,17,114,18,114,19,114,20,114,21,114,22,114,23,114,24,114,25,114,26,114,27,114,28,114,30,114,31,114,32,114,33,114,34,114,35,114,36,114,37,114,38,114,39,114,41,114,43,114,45,114,46,114,47,114,50,114,51,114,52,114,58,114,60,114,62,114,64,114,65,114,66,114,67,114,68,114,69,114,70,114,73,114,74,114,75,114,78,114,79,114,80,114,81,114,83,114,84,114,85,114,87,114,88,114,90,114,92,114,94,114,96,114,99,114,100,114,101,114,104,114,106,114,107,114,108,114,109,114,112,114,113,114,115,114,116,114,118,114,119,114,120,114,123,114,124,114,125,114,130,114,131,114,133,114,134,114,135,114,136,114,137,114,140,114,142,114,144,114,145,114,147,114,148,114,149,114,150,114,151,114,152,114,153,114,154,114,155,114,156,114,157,114,158,114,160,114,161,114,162,114,163,114,164,114,165,114,166,114,167,114,168,114,169,114,170,114,171,114,174,114,177,114,178,114,179,114,181,114,186,114,187,114,188,114,189,114,190,114,191,114,192,114,197,114,198,114,199,114,201,114,202,114,203,114,204,114,207,114,209,114,211,114,212,114,213,114,214,114,216,114,218,114,219,114,198,228,199,228,200,228,201,228,202,228,203,228,204,228,205,228,206,228,207,228,208,228,209,228,210,228,211,228,212,228,213,228,214,228,215,228,216,228,217,228,218,228,219,228,220,228,221,228,222,228,223,228,224,228,225,228,226,228,227,228,228,228,229,228,230,228,231,228,232,228,233,228,234,228,235,228,236,228,237,228,238,228,239,228,240,228,241,228,242,228,243,228,244,228,245,228,246,228,247,228,248,228,249,228,250,228,251,228,252,228,253,228,254,228,255,228,0,229,1,229,2,229,3,229,4,229,5,229,6,229,7,229,8,229,9,229,10,229,11,229,12,229,13,229,14,229,15,229,16,229,17,229,18,229,19,229,20,229,21,229,22,229,23,229,24,229,25,229,26,229,27,229,28,229,29,229,30,229,31,229,32,229,33,229,34,229,35,229,36,229,37,229,0,48,1,48,2,48,183,0,201,2,199,2,168,0,3,48,5,48,20,32,94,255,22,32,38,32,24,32,25,32,28,32,29,32,20,48,21,48,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,22,48,23,48,16,48,17,48,177,0,215,0,247,0,54,34,39,34,40,34,17,34,15,34,42,34,41,34,8,34,55,34,26,34,165,34,37,34,32,34,18,35,153,34,43,34,46,34,97,34,76,34,72,34,61,34,29,34,96,34,110,34,111,34,100,34,101,34,30,34,53,34,52,34,66,38,64,38,176,0,50,32,51,32,3,33,4,255,164,0,224,255,225,255,48,32,167,0,22,33,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,59,32,146,33,144,33,145,33,147,33,19,48,38,229,39,229,40,229,41,229,42,229,43,229,44,229,45,229,46,229,47,229,48,229,49,229,50,229,51,229,52,229,53,229,54,229,55,229,56,229,57,229,58,229,59,229,60,229,61,229,62,229,63,229,64,229,65,229,66,229,67,229,68,229,69,229,70,229,71,229,72,229,73,229,74,229,75,229,76,229,77,229,78,229,79,229,80,229,81,229,82,229,83,229,84,229,85,229,86,229,87,229,88,229,89,229,90,229,91,229,92,229,93,229,94,229,95,229,96,229,97,229,98,229,99,229,100,229,101,229,102,229,103,229,104,229,105,229,106,229,107,229,108,229,109,229,110,229,111,229,112,229,113,229,114,229,115,229,116,229,117,229,118,229,119,229,120,229,121,229,122,229,123,229,124,229,125,229,126,229,127,229,128,229,129,229,130,229,131,229,132,229,133,229,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,102,231,103,231,104,231,105,231,106,231,107,231,136,36,137,36,138,36,139,36,140,36,141,36,142,36,143,36,144,36,145,36,146,36,147,36,148,36,149,36,150,36,151,36,152,36,153,36,154,36,155,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,126,36,127,36,128,36,129,36,130,36,131,36,132,36,133,36,134,36,135,36,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,172,32,109,231,32,50,33,50,34,50,35,50,36,50,37,50,38,50,39,50,40,50,41,50,110,231,111,231,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,106,33,107,33,112,231,113,231,134,229,135,229,136,229,137,229,138,229,139,229,140,229,141,229,142,229,143,229,144,229,145,229,146,229,147,229,148,229,149,229,150,229,151,229,152,229,153,229,154,229,155,229,156,229,157,229,158,229,159,229,160,229,161,229,162,229,163,229,164,229,165,229,166,229,167,229,168,229,169,229,170,229,171,229,172,229,173,229,174,229,175,229,176,229,177,229,178,229,179,229,180,229,181,229,182,229,183,229,184,229,185,229,186,229,187,229,188,229,189,229,190,229,191,229,192,229,193,229,194,229,195,229,196,229,197,229,198,229,199,229,200,229,201,229,202,229,203,229,204,229,205,229,206,229,207,229,208,229,209,229,210,229,211,229,212,229,213,229,214,229,215,229,216,229,217,229,218,229,219,229,220,229,221,229,222,229,223,229,224,229,225,229,226,229,227,229,228,229,229,229,1,255,2,255,3,255,229,255,5,255,6,255,7,255,8,255,9,255,10,255,11,255,12,255,13,255,14,255,15,255,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,26,255,27,255,28,255,29,255,30,255,31,255,32,255,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,59,255,60,255,61,255,62,255,63,255,64,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,91,255,92,255,93,255,227,255,230,229,231,229,232,229,233,229,234,229,235,229,236,229,237,229,238,229,239,229,240,229,241,229,242,229,243,229,244,229,245,229,246,229,247,229,248,229,249,229,250,229,251,229,252,229,253,229,254,229,255,229,0,230,1,230,2,230,3,230,4,230,5,230,6,230,7,230,8,230,9,230,10,230,11,230,12,230,13,230,14,230,15,230,16,230,17,230,18,230,19,230,20,230,21,230,22,230,23,230,24,230,25,230,26,230,27,230,28,230,29,230,30,230,31,230,32,230,33,230,34,230,35,230,36,230,37,230,38,230,39,230,40,230,41,230,42,230,43,230,44,230,45,230,46,230,47,230,48,230,49,230,50,230,51,230,52,230,53,230,54,230,55,230,56,230,57,230,58,230,59,230,60,230,61,230,62,230,63,230,64,230,65,230,66,230,67,230,68,230,69,230,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,114,231,115,231,116,231,117,231,118,231,119,231,120,231,121,231,122,231,123,231,124,231,70,230,71,230,72,230,73,230,74,230,75,230,76,230,77,230,78,230,79,230,80,230,81,230,82,230,83,230,84,230,85,230,86,230,87,230,88,230,89,230,90,230,91,230,92,230,93,230,94,230,95,230,96,230,97,230,98,230,99,230,100,230,101,230,102,230,103,230,104,230,105,230,106,230,107,230,108,230,109,230,110,230,111,230,112,230,113,230,114,230,115,230,116,230,117,230,118,230,119,230,120,230,121,230,122,230,123,230,124,230,125,230,126,230,127,230,128,230,129,230,130,230,131,230,132,230,133,230,134,230,135,230,136,230,137,230,138,230,139,230,140,230,141,230,142,230,143,230,144,230,145,230,146,230,147,230,148,230,149,230,150,230,151,230,152,230,153,230,154,230,155,230,156,230,157,230,158,230,159,230,160,230,161,230,162,230,163,230,164,230,165,230,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,125,231,126,231,127,231,128,231,129,231,130,231,131,231,132,231,166,230,167,230,168,230,169,230,170,230,171,230,172,230,173,230,174,230,175,230,176,230,177,230,178,230,179,230,180,230,181,230,182,230,183,230,184,230,185,230,186,230,187,230,188,230,189,230,190,230,191,230,192,230,193,230,194,230,195,230,196,230,197,230,198,230,199,230,200,230,201,230,202,230,203,230,204,230,205,230,206,230,207,230,208,230,209,230,210,230,211,230,212,230,213,230,214,230,215,230,216,230,217,230,218,230,219,230,220,230,221,230,222,230,223,230,224,230,225,230,226,230,227,230,228,230,229,230,230,230,231,230,232,230,233,230,234,230,235,230,236,230,237,230,238,230,239,230,240,230,241,230,242,230,243,230,244,230,245,230,246,230,247,230,248,230,249,230,250,230,251,230,252,230,253,230,254,230,255,230,0,231,1,231,2,231,3,231,4,231,5,231,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,133,231,134,231,135,231,136,231,137,231,138,231,139,231,140,231,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,141,231,142,231,143,231,144,231,145,231,146,231,147,231,53,254,54,254,57,254,58,254,63,254,64,254,61,254,62,254,65,254,66,254,67,254,68,254,148,231,149,231,59,254,60,254,55,254,56,254,49,254,150,231,51,254,52,254,151,231,152,231,153,231,154,231,155,231,156,231,157,231,158,231,159,231,6,231,7,231,8,231,9,231,10,231,11,231,12,231,13,231,14,231,15,231,16,231,17,231,18,231,19,231,20,231,21,231,22,231,23,231,24,231,25,231,26,231,27,231,28,231,29,231,30,231,31,231,32,231,33,231,34,231,35,231,36,231,37,231,38,231,39,231,40,231,41,231,42,231,43,231,44,231,45,231,46,231,47,231,48,231,49,231,50,231,51,231,52,231,53,231,54,231,55,231,56,231,57,231,58,231,59,231,60,231,61,231,62,231,63,231,64,231,65,231,66,231,67,231,68,231,69,231,70,231,71,231,72,231,73,231,74,231,75,231,76,231,77,231,78,231,79,231,80,231,81,231,82,231,83,231,84,231,85,231,86,231,87,231,88,231,89,231,90,231,91,231,92,231,93,231,94,231,95,231,96,231,97,231,98,231,99,231,100,231,101,231,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,160,231,161,231,162,231,163,231,164,231,165,231,166,231,167,231,168,231,169,231,170,231,171,231,172,231,173,231,174,231,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,175,231,176,231,177,231,178,231,179,231,180,231,181,231,182,231,183,231,184,231,185,231,186,231,187,231,202,2,203,2,217,2,19,32,21,32,37,32,53,32,5,33,9,33,150,33,151,33,152,33,153,33,21,34,31,34,35,34,82,34,102,34,103,34,191,34,80,37,81,37,82,37,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,109,37,110,37,111,37,112,37,113,37,114,37,115,37,129,37,130,37,131,37,132,37,133,37,134,37,135,37,136,37,137,37,138,37,139,37,140,37,141,37,142,37,143,37,147,37,148,37,149,37,188,37,189,37,226,37,227,37,228,37,229,37,9,38,149,34,18,48,29,48,30,48,188,231,189,231,190,231,191,231,192,231,193,231,194,231,195,231,196,231,197,231,198,231,1,1,225,0,206,1,224,0,19,1,233,0,27,1,232,0,43,1,237,0,208,1,236,0,77,1,243,0,210,1,242,0,107,1,250,0,212,1,249,0,214,1,216,1,218,1,220,1,252,0,234,0,81,2,199,231,68,1,72,1,249,1,97,2,201,231,202,231,203,231,204,231,5,49,6,49,7,49,8,49,9,49,10,49,11,49,12,49,13,49,14,49,15,49,16,49,17,49,18,49,19,49,20,49,21,49,22,49,23,49,24,49,25,49,26,49,27,49,28,49,29,49,30,49,31,49,32,49,33,49,34,49,35,49,36,49,37,49,38,49,39,49,40,49,41,49,205,231,206,231,207,231,208,231,209,231,210,231,211,231,212,231,213,231,214,231,215,231,216,231,217,231,218,231,219,231,220,231,221,231,222,231,223,231,224,231,225,231,33,48,34,48,35,48,36,48,37,48,38,48,39,48,40,48,41,48,163,50,142,51,143,51,156,51,157,51,158,51,161,51,196,51,206,51,209,51,210,51,213,51,48,254,226,255,228,255,226,231,33,33,49,50,227,231,16,32,228,231,229,231,230,231,252,48,155,48,156,48,253,48,254,48,6,48,157,48,158,48,73,254,74,254,75,254,76,254,77,254,78,254,79,254,80,254,81,254,82,254,84,254,85,254,86,254,87,254,89,254,90,254,91,254,92,254,93,254,94,254,95,254,96,254,97,254,98,254,99,254,100,254,101,254,102,254,104,254,105,254,106,254,107,254,62,48,240,47,241,47,242,47,243,47,244,47,245,47,246,47,247,47,248,47,249,47,250,47,251,47,7,48,244,231,245,231,246,231,247,231,248,231,249,231,250,231,251,231,252,231,253,231,254,231,255,231,0,232,0,37,1,37,2,37,3,37,4,37,5,37,6,37,7,37,8,37,9,37,10,37,11,37,12,37,13,37,14,37,15,37,16,37,17,37,18,37,19,37,20,37,21,37,22,37,23,37,24,37,25,37,26,37,27,37,28,37,29,37,30,37,31,37,32,37,33,37,34,37,35,37,36,37,37,37,38,37,39,37,40,37,41,37,42,37,43,37,44,37,45,37,46,37,47,37,48,37,49,37,50,37,51,37,52,37,53,37,54,37,55,37,56,37,57,37,58,37,59,37,60,37,61,37,62,37,63,37,64,37,65,37,66,37,67,37,68,37,69,37,70,37,71,37,72,37,73,37,74,37,75,37,1,232,2,232,3,232,4,232,5,232,6,232,7,232,8,232,9,232,10,232,11,232,12,232,13,232,14,232,15,232,220,114,221,114,223,114,226,114,227,114,228,114,229,114,230,114,231,114,234,114,235,114,245,114,246,114,249,114,253,114,254,114,255,114,0,115,2,115,4,115,5,115,6,115,7,115,8,115,9,115,11,115,12,115,13,115,15,115,16,115,17,115,18,115,20,115,24,115,25,115,26,115,31,115,32,115,35,115,36,115,38,115,39,115,40,115,45,115,47,115,48,115,50,115,51,115,53,115,54,115,58,115,59,115,60,115,61,115,64,115,65,115,66,115,67,115,68,115,69,115,70,115,71,115,72,115,73,115,74,115,75,115,76,115,78,115,79,115,81,115,83,115,84,115,85,115,86,115,88,115,89,115,90,115,91,115,92,115,93,115,94,115,95,115,97,115,98,115,99,115,100,115,101,115,102,115,103,115,104,115,105,115,106,115,107,115,110,115,112,115,113,115,0,224,1,224,2,224,3,224,4,224,5,224,6,224,7,224,8,224,9,224,10,224,11,224,12,224,13,224,14,224,15,224,16,224,17,224,18,224,19,224,20,224,21,224,22,224,23,224,24,224,25,224,26,224,27,224,28,224,29,224,30,224,31,224,32,224,33,224,34,224,35,224,36,224,37,224,38,224,39,224,40,224,41,224,42,224,43,224,44,224,45,224,46,224,47,224,48,224,49,224,50,224,51,224,52,224,53,224,54,224,55,224,56,224,57,224,58,224,59,224,60,224,61,224,62,224,63,224,64,224,65,224,66,224,67,224,68,224,69,224,70,224,71,224,72,224,73,224,74,224,75,224,76,224,77,224,78,224,79,224,80,224,81,224,82,224,83,224,84,224,85,224,86,224,87,224,88,224,89,224,90,224,91,224,92,224,93,224,114,115,115,115,116,115,117,115,118,115,119,115,120,115,121,115,122,115,123,115,124,115,125,115,127,115,128,115,129,115,130,115,131,115,133,115,134,115,136,115,138,115,140,115,141,115,143,115,144,115,146,115,147,115,148,115,149,115,151,115,152,115,153,115,154,115,156,115,157,115,158,115,160,115,161,115,163,115,164,115,165,115,166,115,167,115,168,115,170,115,172,115,173,115,177,115,180,115,181,115,182,115,184,115,185,115,188,115,189,115,190,115,191,115,193,115,195,115,196,115,197,115,198,115,199,115,203,115,204,115,206,115,210,115,211,115,212,115,213,115,214,115,215,115,216,115,218,115,219,115,220,115,221,115,223,115,225,115,226,115,227,115,228,115,230,115,232,115,234,115,235,115,236,115,238,115,239,115,240,115,241,115,243,115,244,115,245,115,246,115,247,115,94,224,95,224,96,224,97,224,98,224,99,224,100,224,101,224,102,224,103,224,104,224,105,224,106,224,107,224,108,224,109,224,110,224,111,224,112,224,113,224,114,224,115,224,116,224,117,224,118,224,119,224,120,224,121,224,122,224,123,224,124,224,125,224,126,224,127,224,128,224,129,224,130,224,131,224,132,224,133,224,134,224,135,224,136,224,137,224,138,224,139,224,140,224,141,224,142,224,143,224,144,224,145,224,146,224,147,224,148,224,149,224,150,224,151,224,152,224,153,224,154,224,155,224,156,224,157,224,158,224,159,224,160,224,161,224,162,224,163,224,164,224,165,224,166,224,167,224,168,224,169,224,170,224,171,224,172,224,173,224,174,224,175,224,176,224,177,224,178,224,179,224,180,224,181,224,182,224,183,224,184,224,185,224,186,224,187,224,248,115,249,115,250,115,251,115,252,115,253,115,254,115,255,115,0,116,1,116,2,116,4,116,7,116,8,116,11,116,12,116,13,116,14,116,17,116,18,116,19,116,20,116,21,116,22,116,23,116,24,116,25,116,28,116,29,116,30,116,31,116,32,116,33,116,35,116,36,116,39,116,41,116,43,116,45,116,47,116,49,116,50,116,55,116,56,116,57,116,58,116,59,116,61,116,62,116,63,116,64,116,66,116,67,116,68,116,69,116,70,116,71,116,72,116,73,116,74,116,75,116,76,116,77,116,78,116,79,116,80,116,81,116,82,116,83,116,84,116,86,116,88,116,93,116,96,116,97,116,98,116,99,116,100,116,101,116,102,116,103,116,104,116,105,116,106,116,107,116,108,116,110,116,111,116,113,116,114,116,115,116,116,116,117,116,120,116,121,116,122,116,188,224,189,224,190,224,191,224,192,224,193,224,194,224,195,224,196,224,197,224,198,224,199,224,200,224,201,224,202,224,203,224,204,224,205,224,206,224,207,224,208,224,209,224,210,224,211,224,212,224,213,224,214,224,215,224,216,224,217,224,218,224,219,224,220,224,221,224,222,224,223,224,224,224,225,224,226,224,227,224,228,224,229,224,230,224,231,224,232,224,233,224,234,224,235,224,236,224,237,224,238,224,239,224,240,224,241,224,242,224,243,224,244,224,245,224,246,224,247,224,248,224,249,224,250,224,251,224,252,224,253,224,254,224,255,224,0,225,1,225,2,225,3,225,4,225,5,225,6,225,7,225,8,225,9,225,10,225,11,225,12,225,13,225,14,225,15,225,16,225,17,225,18,225,19,225,20,225,21,225,22,225,23,225,24,225,25,225,123,116,124,116,125,116,127,116,130,116,132,116,133,116,134,116,136,116,137,116,138,116,140,116,141,116,143,116,145,116,146,116,147,116,148,116,149,116,150,116,151,116,152,116,153,116,154,116,155,116,157,116,159,116,160,116,161,116,162,116,163,116,164,116,165,116,166,116,170,116,171,116,172,116,173,116,174,116,175,116,176,116,177,116,178,116,179,116,180,116,181,116,182,116,183,116,184,116,185,116,187,116,188,116,189,116,190,116,191,116,192,116,193,116,194,116,195,116,196,116,197,116,198,116,199,116,200,116,201,116,202,116,203,116,204,116,205,116,206,116,207,116,208,116,209,116,211,116,212,116,213,116,214,116,215,116,216,116,217,116,218,116,219,116,221,116,223,116,225,116,229,116,231,116,232,116,233,116,234,116,235,116,236,116,237,116,240,116,241,116,242,116,26,225,27,225,28,225,29,225,30,225,31,225,32,225,33,225,34,225,35,225,36,225,37,225,38,225,39,225,40,225,41,225,42,225,43,225,44,225,45,225,46,225,47,225,48,225,49,225,50,225,51,225,52,225,53,225,54,225,55,225,56,225,57,225,58,225,59,225,60,225,61,225,62,225,63,225,64,225,65,225,66,225,67,225,68,225,69,225,70,225,71,225,72,225,73,225,74,225,75,225,76,225,77,225,78,225,79,225,80,225,81,225,82,225,83,225,84,225,85,225,86,225,87,225,88,225,89,225,90,225,91,225,92,225,93,225,94,225,95,225,96,225,97,225,98,225,99,225,100,225,101,225,102,225,103,225,104,225,105,225,106,225,107,225,108,225,109,225,110,225,111,225,112,225,113,225,114,225,115,225,116,225,117,225,118,225,119,225,243,116,245,116,248,116,249,116,250,116,251,116,252,116,253,116,254,116,0,117,1,117,2,117,3,117,5,117,6,117,7,117,8,117,9,117,10,117,11,117,12,117,14,117,16,117,18,117,20,117,21,117,22,117,23,117,27,117,29,117,30,117,32,117,33,117,34,117,35,117,36,117,38,117,39,117,42,117,46,117,52,117,54,117,57,117,60,117,61,117,63,117,65,117,66,117,67,117,68,117,70,117,71,117,73,117,74,117,77,117,80,117,81,117,82,117,83,117,85,117,86,117,87,117,88,117,93,117,94,117,95,117,96,117,97,117,98,117,99,117,100,117,103,117,104,117,105,117,107,117,108,117,109,117,110,117,111,117,112,117,113,117,115,117,117,117,118,117,119,117,122,117,123,117,124,117,125,117,126,117,128,117,129,117,130,117,132,117,133,117,135,117,120,225,121,225,122,225,123,225,124,225,125,225,126,225,127,225,128,225,129,225,130,225,131,225,132,225,133,225,134,225,135,225,136,225,137,225,138,225,139,225,140,225,141,225,142,225,143,225,144,225,145,225,146,225,147,225,148,225,149,225,150,225,151,225,152,225,153,225,154,225,155,225,156,225,157,225,158,225,159,225,160,225,161,225,162,225,163,225,164,225,165,225,166,225,167,225,168,225,169,225,170,225,171,225,172,225,173,225,174,225,175,225,176,225,177,225,178,225,179,225,180,225,181,225,182,225,183,225,184,225,185,225,186,225,187,225,188,225,189,225,190,225,191,225,192,225,193,225,194,225,195,225,196,225,197,225,198,225,199,225,200,225,201,225,202,225,203,225,204,225,205,225,206,225,207,225,208,225,209,225,210,225,211,225,212,225,213,225,136,117,137,117,138,117,140,117,141,117,142,117,144,117,147,117,149,117,152,117,155,117,156,117,158,117,162,117,166,117,167,117,168,117,169,117,170,117,173,117,182,117,183,117,186,117,187,117,191,117,192,117,193,117,198,117,203,117,204,117,206,117,207,117,208,117,209,117,211,117,215,117,217,117,218,117,220,117,221,117,223,117,224,117,225,117,229,117,233,117,236,117,237,117,238,117,239,117,242,117,243,117,245,117,246,117,247,117,248,117,250,117,251,117,253,117,254,117,2,118,4,118,6,118,7,118,8,118,9,118,11,118,13,118,14,118,15,118,17,118,18,118,19,118,20,118,22,118,26,118,28,118,29,118,30,118,33,118,35,118,39,118,40,118,44,118,46,118,47,118,49,118,50,118,54,118,55,118,57,118,58,118,59,118,61,118,65,118,66,118,68,118,214,225,215,225,216,225,217,225,218,225,219,225,220,225,221,225,222,225,223,225,224,225,225,225,226,225,227,225,228,225,229,225,230,225,231,225,232,225,233,225,234,225,235,225,236,225,237,225,238,225,239,225,240,225,241,225,242,225,243,225,244,225,245,225,246,225,247,225,248,225,249,225,250,225,251,225], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+52684);
	/* memory initializer */ allocate([252,225,253,225,254,225,255,225,0,226,1,226,2,226,3,226,4,226,5,226,6,226,7,226,8,226,9,226,10,226,11,226,12,226,13,226,14,226,15,226,16,226,17,226,18,226,19,226,20,226,21,226,22,226,23,226,24,226,25,226,26,226,27,226,28,226,29,226,30,226,31,226,32,226,33,226,34,226,35,226,36,226,37,226,38,226,39,226,40,226,41,226,42,226,43,226,44,226,45,226,46,226,47,226,48,226,49,226,50,226,51,226,69,118,70,118,71,118,72,118,73,118,74,118,75,118,78,118,79,118,80,118,81,118,82,118,83,118,85,118,87,118,88,118,89,118,90,118,91,118,93,118,95,118,96,118,97,118,98,118,100,118,101,118,102,118,103,118,104,118,105,118,106,118,108,118,109,118,110,118,112,118,113,118,114,118,115,118,116,118,117,118,118,118,119,118,121,118,122,118,124,118,127,118,128,118,129,118,131,118,133,118,137,118,138,118,140,118,141,118,143,118,144,118,146,118,148,118,149,118,151,118,152,118,154,118,155,118,156,118,157,118,158,118,159,118,160,118,161,118,162,118,163,118,165,118,166,118,167,118,168,118,169,118,170,118,171,118,172,118,173,118,175,118,176,118,179,118,181,118,182,118,183,118,184,118,185,118,186,118,187,118,188,118,189,118,190,118,192,118,193,118,195,118,74,85,63,150,195,87,40,99,206,84,9,85,192,84,145,118,76,118,60,133,238,119,126,130,141,120,49,114,152,150,141,151,40,108,137,91,250,79,9,99,151,102,184,92,250,128,72,104,174,128,2,102,206,118,249,81,86,101,172,113,241,127,132,136,178,80,101,89,202,97,179,111,173,130,76,99,82,98,237,83,39,84,6,123,107,81,164,117,244,93,212,98,203,141,118,151,138,98,25,128,93,87,56,151,98,127,56,114,125,118,207,103,126,118,70,100,112,79,37,141,220,98,23,122,145,101,237,115,44,100,115,98,44,130,129,152,127,103,72,114,110,98,204,98,52,79,227,116,74,83,158,82,202,126,166,144,46,94,134,104,156,105,128,129,209,126,210,104,197,120,140,134,81,149,141,80,36,140,222,130,222,128,5,83,18,137,101,82,196,118,199,118,201,118,203,118,204,118,211,118,213,118,217,118,218,118,220,118,221,118,222,118,224,118,225,118,226,118,227,118,228,118,230,118,231,118,232,118,233,118,234,118,235,118,236,118,237,118,240,118,243,118,245,118,246,118,247,118,250,118,251,118,253,118,255,118,0,119,2,119,3,119,5,119,6,119,10,119,12,119,14,119,15,119,16,119,17,119,18,119,19,119,20,119,21,119,22,119,23,119,24,119,27,119,28,119,29,119,30,119,33,119,35,119,36,119,37,119,39,119,42,119,43,119,44,119,46,119,48,119,49,119,50,119,51,119,52,119,57,119,59,119,61,119,62,119,63,119,66,119,68,119,69,119,70,119,72,119,73,119,74,119,75,119,76,119,77,119,78,119,79,119,82,119,83,119,84,119,85,119,86,119,87,119,88,119,89,119,92,119,132,133,249,150,221,79,33,88,113,153,157,91,177,98,165,98,180,102,121,140,141,156,6,114,111,103,145,120,178,96,81,83,23,83,136,143,204,128,29,141,161,148,13,80,200,114,7,89,235,96,25,113,171,136,84,89,239,130,44,103,40,123,41,93,247,126,45,117,245,108,102,142,248,143,60,144,59,159,212,107,25,145,20,123,124,95,167,120,214,132,61,133,213,107,217,107,214,107,1,94,135,94,249,117,237,149,93,101,10,95,197,95,159,143,193,88,194,129,127,144,91,150,173,151,185,143,22,127,44,141,65,98,191,79,216,83,94,83,168,143,169,143,171,143,77,144,7,104,106,95,152,129,104,136,214,156,139,97,43,82,42,118,108,95,140,101,210,111,232,110,190,91,72,100,117,81,176,81,196,103,25,78,201,121,124,153,179,112,93,119,94,119,95,119,96,119,100,119,103,119,105,119,106,119,109,119,110,119,111,119,112,119,113,119,114,119,115,119,116,119,117,119,118,119,119,119,120,119,122,119,123,119,124,119,129,119,130,119,131,119,134,119,135,119,136,119,137,119,138,119,139,119,143,119,144,119,147,119,148,119,149,119,150,119,151,119,152,119,153,119,154,119,155,119,156,119,157,119,158,119,161,119,163,119,164,119,166,119,168,119,171,119,173,119,174,119,175,119,177,119,178,119,180,119,182,119,183,119,184,119,185,119,186,119,188,119,190,119,192,119,193,119,194,119,195,119,196,119,197,119,198,119,199,119,200,119,201,119,202,119,203,119,204,119,206,119,207,119,208,119,209,119,210,119,211,119,212,119,213,119,214,119,216,119,217,119,218,119,221,119,222,119,223,119,224,119,225,119,228,119,197,117,118,94,187,115,224,131,173,100,232,98,181,148,226,108,90,83,195,82,15,100,194,148,148,123,47,79,27,94,54,130,22,129,138,129,36,110,202,108,115,154,85,99,92,83,250,84,101,136,224,87,13,78,3,94,101,107,63,124,232,144,22,96,230,100,28,115,193,136,80,103,77,98,34,141,108,119,41,142,199,145,105,95,220,131,33,133,16,153,194,83,149,134,139,107,237,96,232,96,127,112,205,130,49,130,211,78,167,108,207,133,205,100,217,124,253,105,249,102,73,131,149,83,86,123,167,79,140,81,75,109,66,92,109,142,210,99,201,83,44,131,54,131,229,103,180,120,61,100,223,91,148,92,238,93,231,139,198,98,244,103,122,140,0,100,186,99,73,135,139,153,23,140,32,127,242,148,167,78,16,150,164,152,12,102,22,115,230,119,232,119,234,119,239,119,240,119,241,119,242,119,244,119,245,119,247,119,249,119,250,119,251,119,252,119,3,120,4,120,5,120,6,120,7,120,8,120,10,120,11,120,14,120,15,120,16,120,19,120,21,120,25,120,27,120,30,120,32,120,33,120,34,120,36,120,40,120,42,120,43,120,46,120,47,120,49,120,50,120,51,120,53,120,54,120,61,120,63,120,65,120,66,120,67,120,68,120,70,120,72,120,73,120,74,120,75,120,77,120,79,120,81,120,83,120,84,120,88,120,89,120,90,120,91,120,92,120,94,120,95,120,96,120,97,120,98,120,99,120,100,120,101,120,102,120,103,120,104,120,105,120,111,120,112,120,113,120,114,120,115,120,116,120,117,120,118,120,120,120,121,120,122,120,123,120,125,120,126,120,127,120,128,120,129,120,130,120,131,120,58,87,29,92,56,94,127,149,127,80,160,128,130,83,94,101,69,117,49,85,33,80,133,141,132,98,158,148,29,103,50,86,110,111,226,93,53,84,146,112,102,143,111,98,164,100,163,99,123,95,136,111,244,144,227,129,176,143,24,92,104,102,241,95,137,108,72,150,129,141,108,136,145,100,240,121,206,87,89,106,16,98,72,84,88,78,11,122,233,96,132,111,218,139,127,98,30,144,139,154,228,121,3,84,244,117,1,99,25,83,96,108,223,143,27,95,112,154,59,128,127,159,136,79,58,92,100,141,197,127,165,101,189,112,69,81,178,81,107,134,7,93,160,91,189,98,108,145,116,117,12,142,32,122,1,97,121,123,199,78,248,126,133,119,17,78,237,129,29,82,250,81,113,106,168,83,135,142,4,149,207,150,193,110,100,150,90,105,132,120,133,120,134,120,136,120,138,120,139,120,143,120,144,120,146,120,148,120,149,120,150,120,153,120,157,120,158,120,160,120,162,120,164,120,166,120,168,120,169,120,170,120,171,120,172,120,173,120,174,120,175,120,181,120,182,120,183,120,184,120,186,120,187,120,188,120,189,120,191,120,192,120,194,120,195,120,196,120,198,120,199,120,200,120,204,120,205,120,206,120,207,120,209,120,210,120,211,120,214,120,215,120,216,120,218,120,219,120,220,120,221,120,222,120,223,120,224,120,225,120,226,120,227,120,228,120,229,120,230,120,231,120,233,120,234,120,235,120,237,120,238,120,239,120,240,120,241,120,243,120,245,120,246,120,248,120,249,120,251,120,252,120,253,120,254,120,255,120,0,121,2,121,3,121,4,121,6,121,7,121,8,121,9,121,10,121,11,121,12,121,64,120,168,80,215,119,16,100,230,137,4,89,227,99,221,93,127,122,61,105,32,79,57,130,152,85,50,78,174,117,151,122,98,94,138,94,239,149,27,82,57,84,138,112,118,99,36,149,130,87,37,102,63,105,135,145,7,85,243,109,175,126,34,136,51,98,240,126,181,117,40,131,193,120,204,150,158,143,72,97,247,116,205,139,100,107,58,82,80,141,33,107,106,128,113,132,241,86,6,83,206,78,27,78,209,81,151,124,139,145,7,124,195,79,127,142,225,123,156,122,103,100,20,93,172,80,6,129,1,118,185,124,236,109,224,127,81,103,88,91,248,91,203,120,174,100,19,100,170,99,43,99,25,149,45,100,190,143,84,123,41,118,83,98,39,89,70,84,121,107,163,80,52,98,38,94,134,107,227,78,55,141,139,136,133,95,46,144,13,121,14,121,15,121,16,121,17,121,18,121,20,121,21,121,22,121,23,121,24,121,25,121,26,121,27,121,28,121,29,121,31,121,32,121,33,121,34,121,35,121,37,121,38,121,39,121,40,121,41,121,42,121,43,121,44,121,45,121,46,121,47,121,48,121,49,121,50,121,51,121,53,121,54,121,55,121,56,121,57,121,61,121,63,121,66,121,67,121,68,121,69,121,71,121,74,121,75,121,76,121,77,121,78,121,79,121,80,121,81,121,82,121,84,121,85,121,88,121,89,121,97,121,99,121,100,121,102,121,105,121,106,121,107,121,108,121,110,121,112,121,113,121,114,121,115,121,116,121,117,121,118,121,121,121,123,121,124,121,125,121,126,121,127,121,130,121,131,121,134,121,135,121,136,121,137,121,139,121,140,121,141,121,142,121,144,121,145,121,146,121,32,96,61,128,197,98,57,78,85,83,248,144,184,99,198,128,230,101,46,108,70,79,238,96,225,109,222,139,57,95,203,134,83,95,33,99,90,81,97,131,99,104,0,82,99,99,72,142,18,80,155,92,119,121,252,91,48,82,59,122,188,96,83,144,215,118,183,95,151,95,132,118,108,142,111,112,123,118,73,123,170,119,243,81,147,144,36,88,78,79,244,110,234,143,76,101,27,123,196,114,164,109,223,127,225,90,181,98,149,94,48,87,130,132,44,123,29,94,31,95,18,144,20,127,160,152,130,99,199,110,152,120,185,112,120,81,91,151,171,87,53,117,67,79,56,117,151,94,230,96,96,89,192,109,191,107,137,120,252,83,213,150,203,81,1,82,137,99,10,84,147,148,3,140,204,141,57,114,159,120,118,135,237,143,13,140,224,83,147,121,148,121,149,121,150,121,151,121,152,121,153,121,155,121,156,121,157,121,158,121,159,121,160,121,161,121,162,121,163,121,164,121,165,121,166,121,168,121,169,121,170,121,171,121,172,121,173,121,174,121,175,121,176,121,177,121,178,121,180,121,181,121,182,121,183,121,184,121,188,121,191,121,194,121,196,121,197,121,199,121,200,121,202,121,204,121,206,121,207,121,208,121,211,121,212,121,214,121,215,121,217,121,218,121,219,121,220,121,221,121,222,121,224,121,225,121,226,121,229,121,232,121,234,121,236,121,238,121,241,121,242,121,243,121,244,121,245,121,246,121,247,121,249,121,250,121,252,121,254,121,255,121,1,122,4,122,5,122,7,122,8,122,9,122,10,122,12,122,15,122,16,122,17,122,18,122,19,122,21,122,22,122,24,122,25,122,27,122,28,122,1,78,239,118,238,83,137,148,118,152,14,159,45,149,154,91,162,139,34,78,28,78,172,81,99,132,194,97,168,82,11,104,151,79,107,96,187,81,30,109,92,81,150,98,151,101,97,150,70,140,23,144,216,117,253,144,99,119,210,107,138,114,236,114,251,139,53,88,121,119,76,141,92,103,64,149,154,128,166,94,33,110,146,89,239,122,237,119,59,149,181,107,173,101,14,127,6,88,81,81,31,150,249,91,169,88,40,84,114,142,102,101,127,152,228,86,157,148,254,118,65,144,135,99,198,84,26,89,58,89,155,87,178,142,53,103,250,141,53,130,65,82,240,96,21,88,254,134,232,92,69,158,196,79,157,152,185,139,37,90,118,96,132,83,124,98,79,144,2,145,127,153,105,96,12,128,63,81,51,128,20,92,117,153,49,109,140,78,29,122,31,122,33,122,34,122,36,122,37,122,38,122,39,122,40,122,41,122,42,122,43,122,44,122,45,122,46,122,47,122,48,122,49,122,50,122,52,122,53,122,54,122,56,122,58,122,62,122,64,122,65,122,66,122,67,122,68,122,69,122,71,122,72,122,73,122,74,122,75,122,76,122,77,122,78,122,79,122,80,122,82,122,83,122,84,122,85,122,86,122,88,122,89,122,90,122,91,122,92,122,93,122,94,122,95,122,96,122,97,122,98,122,99,122,100,122,101,122,102,122,103,122,104,122,105,122,106,122,107,122,108,122,109,122,110,122,111,122,113,122,114,122,115,122,117,122,123,122,124,122,125,122,126,122,130,122,133,122,135,122,137,122,138,122,139,122,140,122,142,122,143,122,144,122,147,122,148,122,153,122,154,122,155,122,158,122,161,122,162,122,48,141,209,83,90,127,79,123,16,79,79,78,0,150,213,108,208,115,233,133,6,94,106,117,251,127,10,106,254,119,146,148,65,126,225,81,230,112,205,83,212,143,3,131,41,141,175,114,109,153,219,108,74,87,179,130,185,101,170,128,63,98,50,150,168,89,255,78,191,139,186,126,62,101,242,131,94,151,97,85,222,152,165,128,42,83,253,139,32,84,186,128,159,94,184,108,57,141,172,130,90,145,41,84,27,108,6,82,183,126,95,87,26,113,126,108,137,124,75,89,253,78,255,95,36,97,170,124,48,78,1,92,171,103,2,135,240,92,11,149,206,152,175,117,253,112,34,144,175,81,29,127,189,139,73,89,228,81,91,79,38,84,43,89,119,101,164,128,117,91,118,98,194,98,144,143,69,94,31,108,38,123,15,79,216,79,13,103,163,122,164,122,167,122,169,122,170,122,171,122,174,122,175,122,176,122,177,122,178,122,180,122,181,122,182,122,183,122,184,122,185,122,186,122,187,122,188,122,189,122,190,122,192,122,193,122,194,122,195,122,196,122,197,122,198,122,199,122,200,122,201,122,202,122,204,122,205,122,206,122,207,122,208,122,209,122,210,122,211,122,212,122,213,122,215,122,216,122,218,122,219,122,220,122,221,122,225,122,226,122,228,122,231,122,232,122,233,122,234,122,235,122,236,122,238,122,240,122,241,122,242,122,243,122,244,122,245,122,246,122,247,122,248,122,251,122,252,122,254,122,0,123,1,123,2,123,5,123,7,123,9,123,12,123,13,123,14,123,16,123,18,123,19,123,22,123,23,123,24,123,26,123,28,123,29,123,31,123,33,123,34,123,35,123,39,123,41,123,45,123,110,109,170,109,143,121,177,136,23,95,43,117,154,98,133,143,239,79,220,145,167,101,47,129,81,129,156,94,80,129,116,141,111,82,134,137,75,141,13,89,133,80,216,78,28,150,54,114,121,129,31,141,204,91,163,139,68,150,135,89,26,127,144,84,118,86,14,86,229,139,57,101,130,105,153,148,214,118,137,110,114,94,24,117,70,103,209,103,255,122,157,128,118,141,31,97,198,121,98,101,99,141,136,81,26,82,162,148,56,127,155,128,178,126,151,92,47,110,96,103,217,123,139,118,216,154,143,129,148,127,213,124,30,100,80,149,63,122,74,84,229,84,76,107,1,100,8,98,61,158,243,128,153,117,114,82,105,151,91,132,60,104,228,134,1,150,148,150,236,148,42,78,4,84,217,126,57,104,223,141,21,128,244,102,154,94,185,127,47,123,48,123,50,123,52,123,53,123,54,123,55,123,57,123,59,123,61,123,63,123,64,123,65,123,66,123,67,123,68,123,70,123,72,123,74,123,77,123,78,123,83,123,85,123,87,123,89,123,92,123,94,123,95,123,97,123,99,123,100,123,101,123,102,123,103,123,104,123,105,123,106,123,107,123,108,123,109,123,111,123,112,123,115,123,116,123,118,123,120,123,122,123,124,123,125,123,127,123,129,123,130,123,131,123,132,123,134,123,135,123,136,123,137,123,138,123,139,123,140,123,142,123,143,123,145,123,146,123,147,123,150,123,152,123,153,123,154,123,155,123,158,123,159,123,160,123,163,123,164,123,165,123,174,123,175,123,176,123,178,123,179,123,181,123,182,123,183,123,185,123,186,123,187,123,188,123,189,123,190,123,191,123,192,123,194,123,195,123,196,123,194,87,63,128,151,104,229,93,59,101,159,82,109,96,154,159,155,79,172,142,108,81,171,91,19,95,233,93,94,108,241,98,33,141,113,81,169,148,254,82,159,108,223,130,215,114,162,87,132,103,45,141,31,89,156,143,199,131,149,84,141,123,48,79,189,108,100,91,209,89,19,159,228,83,202,134,168,154,55,140,161,128,69,101,126,152,250,86,199,150,46,82,220,116,80,82,225,91,2,99,2,137,86,78,208,98,42,96,250,104,115,81,152,91,160,81,194,137,161,123,134,153,80,127,239,96,76,112,47,141,73,81,127,94,27,144,112,116,196,137,45,87,69,120,82,95,159,159,250,149,104,143,60,155,225,139,120,118,66,104,220,103,234,141,53,141,61,82,138,143,218,110,205,104,5,149,237,144,253,86,156,103,249,136,199,143,200,84,197,123,200,123,201,123,202,123,203,123,205,123,206,123,207,123,208,123,210,123,212,123,213,123,214,123,215,123,216,123,219,123,220,123,222,123,223,123,224,123,226,123,227,123,228,123,231,123,232,123,233,123,235,123,236,123,237,123,239,123,240,123,242,123,243,123,244,123,245,123,246,123,248,123,249,123,250,123,251,123,253,123,255,123,0,124,1,124,2,124,3,124,4,124,5,124,6,124,8,124,9,124,10,124,13,124,14,124,16,124,17,124,18,124,19,124,20,124,21,124,23,124,24,124,25,124,26,124,27,124,28,124,29,124,30,124,32,124,33,124,34,124,35,124,36,124,37,124,40,124,41,124,43,124,44,124,45,124,46,124,47,124,48,124,49,124,50,124,51,124,52,124,53,124,54,124,55,124,57,124,58,124,59,124,60,124,61,124,62,124,66,124,184,154,105,91,119,109,38,108,165,78,179,91,135,154,99,145,168,97,175,144,233,151,43,84,181,109,210,91,253,81,138,85,85,127,240,127,188,100,77,99,241,101,190,97,141,96,10,113,87,108,73,108,47,89,109,103,42,130,213,88,142,86,106,140,235,107,221,144,125,89,23,128,247,83,105,109,117,84,157,85,119,131,207,131,56,104,190,121,140,84,85,79,8,84,210,118,137,140,2,150,179,108,184,109,107,141,16,137,100,158,58,141,63,86,209,158,213,117,136,95,224,114,104,96,252,84,168,78,42,106,97,136,82,96,112,143,196,84,216,112,121,134,63,158,42,109,143,91,24,95,162,126,137,85,175,79,52,115,60,84,154,83,25,80,14,84,124,84,78,78,253,95,90,116,246,88,107,132,225,128,116,135,208,114,202,124,86,110,67,124,68,124,69,124,70,124,71,124,72,124,73,124,74,124,75,124,76,124,78,124,79,124,80,124,81,124,82,124,83,124,84,124,85,124,86,124,87,124,88,124,89,124,90,124,91,124,92,124,93,124,94,124,95,124,96,124,97,124,98,124,99,124,100,124,101,124,102,124,103,124,104,124,105,124,106,124,107,124,108,124,109,124,110,124,111,124,112,124,113,124,114,124,117,124,118,124,119,124,120,124,121,124,122,124,126,124,127,124,128,124,129,124,130,124,131,124,132,124,133,124,134,124,135,124,136,124,138,124,139,124,140,124,141,124,142,124,143,124,144,124,147,124,148,124,150,124,153,124,154,124,155,124,160,124,161,124,163,124,166,124,167,124,168,124,169,124,171,124,172,124,173,124,175,124,176,124,180,124,181,124,182,124,183,124,184,124,186,124,187,124,39,95,78,134,44,85,164,98,146,78,170,108,55,98,177,130,215,84,78,83,62,115,209,110,59,117,18,82,22,83,221,139,208,105,138,95,0,96,238,109,79,87,34,107,175,115,83,104,216,143,19,127,98,99,163,96,36,85,234,117,98,140,21,113,163,109,166,91,123,94,82,131,76,97,196,158,250,120,87,135,39,124,135,118,240,81,246,96,76,113,67,102,76,94,77,96,14,140,112,112,37,99,137,143,189,95,98,96,212,134,222,86,193,107,148,96,103,97,73,83,224,96,102,102,63,141,253,121,26,79,233,112,71,108,179,139,242,139,216,126,100,131,15,102,90,90,66,155,81,109,247,109,65,140,59,109,25,79,107,112,183,131,22,98,209,96,13,151,39,141,120,121,251,81,62,87,250,87,58,103,120,117,61,122,239,121,149,123,191,124,192,124,194,124,195,124,196,124,198,124,201,124,203,124,206,124,207,124,208,124,209,124,210,124,211,124,212,124,216,124,218,124,219,124,221,124,222,124,225,124,226,124,227,124,228,124,229,124,230,124,231,124,233,124,234,124,235,124,236,124,237,124,238,124,240,124,241,124,242,124,243,124,244,124,245,124,246,124,247,124,249,124,250,124,252,124,253,124,254,124,255,124,0,125,1,125,2,125,3,125,4,125,5,125,6,125,7,125,8,125,9,125,11,125,12,125,13,125,14,125,15,125,16,125,17,125,18,125,19,125,20,125,21,125,22,125,23,125,24,125,25,125,26,125,27,125,28,125,29,125,30,125,31,125,33,125,35,125,36,125,37,125,38,125,40,125,41,125,42,125,44,125,45,125,46,125,48,125,49,125,50,125,51,125,52,125,53,125,54,125,140,128,101,153,249,143,192,111,165,139,33,158,236,89,233,126,9,127,9,84,129,103,216,104,145,143,77,124,198,150,202,83,37,96,190,117,114,108,115,83,201,90,167,126,36,99,224,81,10,129,241,93,223,132,128,98,128,81,99,91,14,79,109,121,66,82,184,96,78,109,196,91,194,91,161,139,176,139,226,101,204,95,69,150,147,89,231,126,170,126,9,86,183,103,57,89,115,79,182,91,160,82,90,131,138,152,62,141,50,117,190,148,71,80,60,122,247,78,182,103,126,154,193,90,124,107,209,118,90,87,22,92,58,123,244,149,78,113,124,81,169,128,112,130,120,89,4,127,39,131,192,104,236,103,177,120,119,120,227,98,97,99,128,123,237,79,106,82,207,81,80,131,219,105,116,146,245,141,49,141,193,137,46,149,173,123,246,78,55,125,56,125,57,125,58,125,59,125,60,125,61,125,62,125,63,125,64,125,65,125,66,125,67,125,68,125,69,125,70,125,71,125,72,125,73,125,74,125,75,125,76,125,77,125,78,125,79,125,80,125,81,125,82,125,83,125,84,125,85,125,86,125,87,125,88,125,89,125,90,125,91,125,92,125,93,125,94,125,95,125,96,125,97,125,98,125,99,125,100,125,101,125,102,125,103,125,104,125,105,125,106,125,107,125,108,125,109,125,111,125,112,125,113,125,114,125,115,125,116,125,117,125,118,125,120,125,121,125,122,125,123,125,124,125,125,125,126,125,127,125,128,125,129,125,130,125,131,125,132,125,133,125,134,125,135,125,136,125,137,125,138,125,139,125,140,125,141,125,142,125,143,125,144,125,145,125,146,125,147,125,148,125,149,125,150,125,151,125,152,125,101,80,48,130,81,82,111,153,16,110,133,110,167,109,250,94,245,80,220,89,6,92,70,109,95,108,134,117,139,132,104,104,86,89,178,139,32,83,113,145,77,150,73,133,18,105,1,121,38,113,246,128,164,78,202,144,71,109,132,154,7,90,188,86,5,100,240,148,235,119,165,79,26,129,225,114,210,137,122,153,52,127,222,126,127,82,89,101,117,145,127,143,131,143,235,83,150,122,237,99,165,99,134,118,248,121,87,136,54,150,42,98,171,82,130,130,84,104,112,103,119,99,107,119,237,122,1,109,211,126,227,137,208,89,18,98,201,133,165,130,76,117,31,80,203,78,165,117,235,139,74,92,254,93,75,123,164,101,209,145,202,78,37,109,95,137,39,125,38,149,197,78,40,140,219,143,115,151,75,102,129,121,209,143,236,112,120,109,153,125,154,125,155,125,156,125,157,125,158,125,159,125,160,125,161,125,162,125,163,125,164,125,165,125,167,125,168,125,169,125,170,125,171,125,172,125,173,125,175,125,176,125,177,125,178,125,179,125,180,125,181,125,182,125,183,125,184,125,185,125,186,125,187,125,188,125,189,125,190,125,191,125,192,125,193,125,194,125,195,125,196,125,197,125,198,125,199,125,200,125,201,125,202,125,203,125,204,125,205,125,206,125,207,125,208,125,209,125,210,125,211,125,212,125,213,125,214,125,215,125,216,125,217,125,218,125,219,125,220,125,221,125,222,125,223,125,224,125,225,125,226,125,227,125,228,125,229,125,230,125,231,125,232,125,233,125,234,125,235,125,236,125,237,125,238,125,239,125,240,125,241,125,242,125,243,125,244,125,245,125,246,125,247,125,248,125,249,125,250,125,61,92,178,82,70,131,98,81,14,131,91,119,118,102,184,156,172,78,202,96,190,124,179,124,207,126,149,78,102,139,111,102,136,152,89,151,131,88,108,101,92,149,132,95,201,117,86,151,223,122,222,122,192,81,175,112,152,122,234,99,118,122,160,126,150,115,237,151,69,78,120,112,93,78,82,145,169,83,81,101,231,101,252,129,5,130,142,84,49,92,154,117,160,151,216,98,217,114,189,117,69,92,121,154,202,131,64,92,128,84,233,119,62,78,174,108,90,128,210,98,110,99,232,93,119,81,221,141,30,142,47,149,241,79,229,83,231,96,172,112,103,82,80,99,67,158,31,90,38,80,55,119,119,83,226,126,133,100,43,101,137,98,152,99,20,80,53,114,201,137,179,81,192,139,221,126,71,87,204,131,167,148,155,81,27,84,251,92,251,125,252,125,253,125,254,125,255,125,0,126,1,126,2,126,3,126,4,126,5,126,6,126,7,126,8,126,9,126,10,126,11,126,12,126,13,126,14,126,15,126,16,126,17,126,18,126,19,126,20,126,21,126,22,126,23,126,24,126,25,126,26,126,27,126,28,126,29,126,30,126,31,126,32,126,33,126,34,126,35,126,36,126,37,126,38,126,39,126,40,126,41,126,42,126,43,126,44,126,45,126,46,126,47,126,48,126,49,126,50,126,51,126,52,126,53,126,54,126,55,126,56,126,57,126,58,126,60,126,61,126,62,126,63,126,64,126,66,126,67,126,68,126,69,126,70,126,72,126,73,126,74,126,75,126,76,126,77,126,78,126,79,126,80,126,81,126,82,126,83,126,84,126,85,126,86,126,87,126,88,126,89,126,90,126,91,126,92,126,93,126,202,79,227,122,90,109,225,144,143,154,128,85,150,84,97,83,175,84,0,95,233,99,119,105,239,81,104,97,10,82,42,88,216,82,78,87,13,120,11,119,183,94,119,97,224,124,91,98,151,98,162,78,149,112,3,128,247,98,228,112,96,151,119,87,219,130,239,103,245,104,213,120,151,152,209,121,243,88,179,84,239,83,52,110,75,81,59,82,162,91,254,139,175,128,67,85,166,87,115,96,81,87,45,84,122,122,80,96,84,91,167,99,160,98,227,83,99,98,199,91,175,103,237,84,159,122,230,130,119,145,147,94,228,136,56,89,174,87,14,99,232,141,239,128,87,87,119,123,169,79,235,95,189,91,62,107,33,83,80,123,194,114,70,104,255,119,54,119,247,101,181,81,143,78,212,118,191,92,165,122,117,132,78,89,65,155,128,80,94,126,95,126,96,126,97,126,98,126,99,126,100,126,101,126,102,126,103,126,104,126,105,126,106,126,107,126,108,126,109,126,110,126,111,126,112,126,113,126,114,126,115,126,116,126,117,126,118,126,119,126,120,126,121,126,122,126,123,126,124,126,125,126,126,126,127,126,128,126,129,126,131,126,132,126,133,126,134,126,135,126,136,126,137,126,138,126,139,126,140,126,141,126,142,126,143,126,144,126,145,126,146,126,147,126,148,126,149,126,150,126,151,126,152,126,153,126,154,126,156,126,157,126,158,126,174,126,180,126,187,126,188,126,214,126,228,126,236,126,249,126,10,127,16,127,30,127,55,127,57,127,59,127,60,127,61,127,62,127,63,127,64,127,65,127,67,127,70,127,71,127,72,127,73,127,74,127,75,127,76,127,77,127,78,127,79,127,82,127,83,127,136,153,39,97,131,110,100,87,6,102,70,99,240,86,236,98,105,98,211,94,20,150,131,87,201,98,135,85,33,135,74,129,163,143,102,85,177,131,101,103,86,141,221,132,106,90,15,104,230,98,238,123,17,150,112,81,156,111,48,140,253,99,200,137,210,97,6,127,194,112,229,110,5,116,148,105,252,114,202,94,206,144,23,103,106,109,94,99,179,82,98,114,1,128,108,79,229,89,106,145,217,112,157,109,210,82,80,78,247,150,109,149,126,133,202,120,47,125,33,81,146,87,194,100,139,128,123,124,234,108,241,104,94,105,183,81,152,83,168,104,129,114,206,158,241,123,248,114,187,121,19,111,6,116,78,103,204,145,164,156,60,121,137,131,84,131,15,84,23,104,61,78,137,83,177,82,62,120,134,83,41,82,136,80,139,79,208,79,86,127,89,127,91,127,92,127,93,127,94,127,96,127,99,127,100,127,101,127,102,127,103,127,107,127,108,127,109,127,111,127,112,127,115,127,117,127,118,127,119,127,120,127,122,127,123,127,124,127,125,127,127,127,128,127,130,127,131,127,132,127,133,127,134,127,135,127,136,127,137,127,139,127,141,127,143,127,144,127,145,127,146,127,147,127,149,127,150,127,151,127,152,127,153,127,155,127,156,127,160,127,162,127,163,127,165,127,166,127,168,127,169,127,170,127,171,127,172,127,173,127,174,127,177,127,179,127,180,127,181,127,182,127,183,127,186,127,187,127,190,127,192,127,194,127,195,127,196,127,198,127,199,127,200,127,201,127,203,127,205,127,207,127,208,127,209,127,210,127,211,127,214,127,215,127,217,127,218,127,219,127,220,127,221,127,222,127,226,127,227,127,226,117,203,122,146,124,165,108,182,150,155,82,131,116,233,84,233,79,84,128,178,131,222,143,112,149,201,94,28,96,159,109,24,94,91,101,56,129,254,148,75,96,188,112,195,126,174,124,201,81,129,104,177,124,111,130,36,78,134,143,207,145,126,102,174,78,5,140,169,100,74,128,218,80,151,117,206,113,229,91,189,143,102,111,134,78,130,100,99,149,214,94,153,101,23,82,194,136,200,112,163,82,14,115,51,116,151,103,247,120,22,151,52,78,187,144,222,156,203,109,219,81,65,141,29,84,206,98,178,115,241,131,246,150,132,159,195,148,54,79,154,127,204,81,117,112,117,150,173,92,134,152,230,83,228,78,156,110,9,116,180,105,107,120,143,153,89,117,24,82,36,118,65,109,243,103,109,81,153,159,75,128,153,84,60,123,191,122,228,127,231,127,232,127,234,127,235,127,236,127,237,127,239,127,242,127,244,127,245,127,246,127,247,127,248,127,249,127,250,127,253,127,254,127,255,127,2,128,7,128,8,128,9,128,10,128,14,128,15,128,17,128,19,128,26,128,27,128,29,128,30,128,31,128,33,128,35,128,36,128,43,128,44,128,45,128,46,128,47,128,48,128,50,128,52,128,57,128,58,128,60,128,62,128,64,128,65,128,68,128,69,128,71,128,72,128,73,128,78,128,79,128,80,128,81,128,83,128,85,128,86,128,87,128,89,128,91,128,92,128,93,128,94,128,95,128,96,128,97,128,98,128,99,128,100,128,101,128,102,128,103,128,104,128,107,128,108,128,109,128,110,128,111,128,112,128,114,128,115,128,116,128,117,128,118,128,119,128,120,128,121,128,122,128,123,128,124,128,125,128,134,150,132,87,226,98,71,150,124,105,4,90,2,100,211,123,15,111,75,150,166,130,98,83,133,152,144,94,137,112,179,99,100,83,79,134,129,156,147,158,140,120,50,151,239,141,66,141,127,158,94,111,132,121,85,95,70,150,46,98,116,154,21,84,221,148,163,79,197,101,101,92,97,92,21,127,81,134,47,108,139,95,135,115,228,110,255,126,230,92,27,99,106,91,230,110,117,83,113,78,160,99,101,117,161,98,110,143,38,79,209,78,166,108,182,126,186,139,29,132,186,135,87,127,59,144,35,149,169,123,161,154,248,136,61,132,27,109,134,154,220,126,136,89,187,158,155,115,1,120,130,134,108,154,130,154,27,86,23,84,203,87,112,78,166,158,86,83,200,143,9,129,146,119,146,153,238,134,225,110,19,133,252,102,98,97,43,111,126,128,129,128,130,128,133,128,136,128,138,128,141,128,142,128,143,128,144,128,145,128,146,128,148,128,149,128,151,128,153,128,158,128,163,128,166,128,167,128,168,128,172,128,176,128,179,128,181,128,182,128,184,128,185,128,187,128,197,128,199,128,200,128,201,128,202,128,203,128,207,128,208,128,209,128,210,128,211,128,212,128,213,128,216,128,223,128,224,128,226,128,227,128,230,128,238,128,245,128,247,128,249,128,251,128,254,128,255,128,0,129,1,129,3,129,4,129,5,129,7,129,8,129,11,129,12,129,21,129,23,129,25,129,27,129,28,129,29,129,31,129,32,129,33,129,34,129,35,129,36,129,37,129,38,129,39,129,40,129,41,129,42,129,43,129,45,129,46,129,48,129,51,129,52,129,53,129,55,129,57,129,58,129,59,129,60,129,61,129,63,129,41,140,146,130,43,131,242,118,19,108,217,95,189,131,43,115,5,131,26,149,219,107,219,119,198,148,111,83,2,131,146,81,61,94,140,140,56,141,72,78,171,115,154,103,133,104,118,145,9,151,100,113,161,108,9,119,146,90,65,149,207,107,142,127,39,102,208,91,185,89,154,90,232,149,247,149,236,78,12,132,153,132,172,106,223,118,48,149,27,115,166,104,95,91,47,119,154,145,97,151,220,124,247,143,28,140,37,95,115,124,216,121,197,137,204,108,28,135,198,91,66,94,201,104,32,119,245,126,149,81,77,81,201,82,41,90,5,127,98,151,215,130,207,99,132,119,208,133,210,121,58,110,153,94,153,89,17,133,109,112,17,108,191,98,191,118,79,101,175,96,253,149,14,102,159,135,35,158,237,148,13,84,125,84,44,140,120,100,64,129,65,129,66,129,67,129,68,129,69,129,71,129,73,129,77,129,78,129,79,129,82,129,86,129,87,129,88,129,91,129,92,129,93,129,94,129,95,129,97,129,98,129,99,129,100,129,102,129,104,129,106,129,107,129,108,129,111,129,114,129,115,129,117,129,118,129,119,129,120,129,129,129,131,129,132,129,133,129,134,129,135,129,137,129,139,129,140,129,141,129,142,129,144,129,146,129,147,129,148,129,149,129,150,129,151,129,153,129,154,129,158,129,159,129,160,129,161,129,162,129,164,129,165,129,167,129,169,129,171,129,172,129,173,129,174,129,175,129,176,129,177,129,178,129,180,129,181,129,182,129,183,129,184,129,185,129,188,129,189,129,190,129,191,129,196,129,197,129,199,129,200,129,201,129,203,129,205,129,206,129,207,129,208,129,209,129,210,129,211,129,121,100,17,134,33,106,156,129,232,120,105,100,84,155,185,98,43,103,171,131,168,88,216,158,171,108,32,111,222,91,76,150,11,140,95,114,208,103,199,98,97,114,169,78,198,89,205,107,147,88,174,102,85,94,223,82,85,97,40,103,238,118,102,119,103,114,70,122,255,98,234,84,80,84,160,148,163,144,28,90,179,126,22,108,67,78,118,89,16,128,72,89,87,83,55,117,190,150,202,86,32,99,17,129,124,96,249,149,214,109,98,84,129,153,133,81,233,90,253,128,174,89,19,151,42,80,229,108,60,92,223,98,96,79,63,83,123,129,6,144,186,110,43,133,200,98,116,94,190,120,181,100,123,99,245,95,24,90,127,145,31,158,63,92,79,99,66,128,125,91,110,85,74,149,77,149,133,109,168,96,224,103,222,114,221,81,129,91,212,129,213,129,214,129,215,129,216,129,217,129,218,129,219,129,220,129,221,129,222,129,223,129,224,129,225,129,226,129,228,129,229,129,230,129,232,129,233,129,235,129,238,129,239,129,240,129,241,129,242,129,245,129,246,129,247,129,248,129,249,129,250,129,253,129,255,129,3,130,7,130,8,130,9,130,10,130,11,130,14,130,15,130,17,130,19,130,21,130,22,130,23,130,24,130,25,130,26,130,29,130,32,130,36,130,37,130,38,130,39,130,41,130,46,130,50,130,58,130,60,130,61,130,63,130,64,130,65,130,66,130,67,130,69,130,70,130,72,130,74,130,76,130,77,130,78,130,80,130,81,130,82,130,83,130,84,130,85,130,86,130,87,130,89,130,91,130,92,130,93,130,94,130,96,130,97,130,98,130,99,130,100,130,101,130,102,130,103,130,105,130,231,98,222,108,91,114,109,98,174,148,189,126,19,129,83,109,156,81,4,95,116,89,170,82,18,96,115,89,150,102,80,134,159,117,42,99,230,97,239,124,250,139,230,84,39,107,37,158,180,107,213,133,85,84,118,80,164,108,106,85,180,141,44,114,21,94,21,96,54,116,205,98,146,99,76,114,152,95,67,110,62,109,0,101,88,111,216,118,208,120,252,118,84,117,36,82,219,83,83,78,158,94,193,101,42,128,214,128,155,98,134,84,40,82,174,112,141,136,209,141,225,108,120,84,218,128,249,87,244,136,84,141,106,150,77,145,105,79,155,108,183,85,198,118,48,120,168,98,249,112,142,111,109,95,236,132,218,104,124,120,247,123,168,129,11,103,79,158,103,99,176,120,111,87,18,120,57,151,121,98,171,98,136,82,53,116,215,107,106,130,107,130,108,130,109,130,113,130,117,130,118,130,119,130,120,130,123,130,124,130,128,130,129,130,131,130,133,130,134,130,135,130,137,130,140,130,144,130,147,130,148,130,149,130,150,130,154,130,155,130,158,130,160,130,162,130,163,130,167,130,178,130,181,130,182,130,186,130,187,130,188,130,191,130,192,130,194,130,195,130,197,130,198,130,201,130,208,130,214,130,217,130,218,130,221,130,226,130,231,130,232,130,233,130,234,130,236,130,237,130,238,130,240,130,242,130,243,130,245,130,246,130,248,130,250,130,252,130,253,130,254,130,255,130,0,131,10,131,11,131,13,131,16,131,18,131,19,131,22,131,24,131,25,131,29,131,30,131,31,131,32,131,33,131,34,131,35,131,36,131,37,131,38,131,41,131,42,131,46,131,48,131,50,131,55,131,59,131,61,131,100,85,62,129,178,117,174,118,57,83,222,117,251,80,65,92,108,139,199,123,79,80,71,114,151,154,216,152,2,111,226,116,104,121,135,100,165,119,252,98,145,152,43,141,193,84,88,128,82,78,106,87,249,130,13,132,115,94,237,81,246,116,196,139,79,92,97,87,252,108,135,152,70,90,52,120,68,155,235,143,149,124,86,82,81,98,250,148,198,78,134,131,97,132,233,131,178,132,212,87,52,103,3,87,110,102,102,109,49,140,221,102,17,112,31,103,58,107,22,104,26,98,187,89,3,78,196,81,6,111,210,103,143,108,118,81,203,104,71,89,103,107,102,117,14,93,16,129,80,159,215,101,72,121,65,121,145,154,119,141,130,92,94,78,1,79,47,84,81,89,12,120,104,86,20,108,196,143,3,95,125,108,227,108,171,139,144,99,62,131,63,131,65,131,66,131,68,131,69,131,72,131,74,131,75,131,76,131,77,131,78,131,83,131,85,131,86,131,87,131,88,131,89,131,93,131,98,131,112,131,113,131,114,131,115,131,116,131,117,131,118,131,121,131,122,131,126,131,127,131,128,131,129,131,130,131,131,131,132,131,135,131,136,131,138,131,139,131,140,131,141,131,143,131,144,131,145,131,148,131,149,131,150,131,151,131,153,131,154,131,157,131,159,131,161,131,162,131,163,131,164,131,165,131,166,131,167,131,172,131,173,131,174,131,175,131,181,131,187,131,190,131,191,131,194,131,195,131,196,131,198,131,200,131,201,131,203,131,205,131,206,131,208,131,209,131,210,131,211,131,213,131,215,131,217,131,218,131,219,131,222,131,226,131,227,131,228,131,230,131,231,131,232,131,235,131,236,131,237,131,112,96,61,109,117,114,102,98,142,148,197,148,67,83,193,143,126,123,223,78,38,140,126,78,212,158,177,148,179,148,77,82,92,111,99,144,69,109,52,140,17,88,76,93,32,107,73,107,170,103,91,84,84,129,140,127,153,88,55,133,58,95,162,98,71,106,57,149,114,101,132,96,101,104,167,119,84,78,168,79,231,93,152,151,172,100,216,127,237,92,207,79,141,122,7,82,4,131,20,78,47,96,131,122,166,148,181,79,178,78,230,121,52,116,228,82,185,130,210,100,189,121,221,91,129,108,82,151,123,143,34,108,62,80,127,83,5,110,206,100,116,102,48,108,197,96,119,152,247,139,134,94,60,116,119,122,203,121,24,78,177,144,3,116,66,108,218,86,75,145,197,108,139,141,58,83,198,134,242,102,175,142,72,92,113,154,32,110,238,131,239,131,243,131,244,131,245,131,246,131,247,131,250,131,251,131,252,131,254,131,255,131,0,132,2,132,5,132,7,132,8,132,9,132,10,132,16,132,18,132,19,132,20,132,21,132,22,132,23,132,25,132,26,132,27,132,30,132,31,132,32,132,33,132,34,132,35,132,41,132,42,132,43,132,44,132,45,132,46,132,47,132,48,132,50,132,51,132,52,132,53,132,54,132,55,132,57,132,58,132,59,132,62,132,63,132,64,132,65,132,66,132,67,132,68,132,69,132,71,132,72,132,73,132,74,132,75,132,76,132,77,132,78,132,79,132,80,132,82,132,83,132,84,132,85,132,86,132,88,132,93,132,94,132,95,132,96,132,98,132,100,132,101,132,102,132,103,132,104,132,106,132,110,132,111,132,112,132,114,132,116,132,119,132,121,132,123,132,124,132,214,83,54,90,139,159,163,141,187,83,8,87,167,152,67,103,155,145,201,108,104,81,202,117,243,98,172,114,56,82,157,82,58,127,148,112,56,118,116,83,74,158,183,105,110,120,192,150,217,136,164,127,54,113,195,113,137,81,211,103,228,116,228,88,24,101,183,86,169,139,118,153,112,98,213,126,249,96,237,112,236,88,193,78,186,78,205,95,231,151,251,78,164,139,3,82,138,89,171,126,84,98,205,78,229,101,14,98,56,131,201,132,99,131,141,135,148,113,182,110,185,91,210,126,151,81,201,99,212,103,137,128,57,131,21,136,18,81,122,91,130,89,177,143,115,78,93,108,101,81,37,137,111,143,46,150,74,133,94,116,16,149,240,149,166,109,229,130,49,95,146,100,18,109,40,132,110,129,195,156,94,88,91,141,9,78,193,83,125,132,126,132,127,132,128,132,129,132,131,132,132,132,133,132,134,132,138,132,141,132,143,132,144,132,145,132,146,132,147,132,148,132,149,132,150,132,152,132,154,132,155,132,157,132,158,132,159,132,160,132,162,132,163,132,164,132,165,132,166,132,167,132,168,132,169,132,170,132,171,132,172,132,173,132,174,132,176,132,177,132,179,132,181,132,182,132,183,132,187,132,188,132,190,132,192,132,194,132,195,132,197,132,198,132,199,132,200,132,203,132,204,132,206,132,207,132,210,132,212,132,213,132,215,132,216,132,217,132,218,132,219,132,220,132,222,132,225,132,226,132,228,132,231,132,232,132,233,132,234,132,235,132,237,132,238,132,239,132,241,132,242,132,243,132,244,132,245,132,246,132,247,132,248,132,249,132,250,132,251,132,253,132,254,132,0,133,1,133,2,133,30,79,99,101,81,104,211,85,39,78,20,100,154,154,107,98,194,90,95,116,114,130,169,109,238,104,231,80,142,131,2,120,64,103,57,82,153,108,177,126,187,80,101,85,94,113,91,123,82,102,202,115,235,130,73,103,113,92,32,82,125,113,107,136,234,149,85,150,197,100,97,141,179,129,132,85,85,108,71,98,46,127,146,88,36,79,70,85,79,141,76,102,10,78,26,92,243,136,162,104,78,99,13,122,231,112,141,130,250,82,246,151,17,92,232,84,181,144,205,126,98,89,74,141,199,134,12,130,13,130,102,141,68,100,4,92,81,97,137,109,62,121,190,139,55,120,51,117,123,84,56,79,171,142,241,109,32,90,197,126,94,121,136,108,161,91,118,90,26,117,190,128,78,97,23,110,240,88,31,117,37,117,114,114,71,83,243,126,3,133,4,133,5,133,6,133,7,133,8,133,9,133,10,133,11,133,13,133,14,133,15,133,16,133,18,133,20,133,21,133,22,133,24,133,25,133,27,133,28,133,29,133,30,133,32,133,34,133,35,133,36,133,37,133,38,133,39,133,40,133,41,133,42,133,45,133,46,133,47,133,48,133,49,133,50,133,51,133,52,133,53,133,54,133,62,133,63,133,64,133,65,133,66,133,68,133,69,133,70,133,71,133,75,133,76,133,77,133,78,133,79,133,80,133,81,133,82,133,83,133,84,133,85,133,87,133,88,133,90,133,91,133,92,133,93,133,95,133,96,133,97,133,98,133,99,133,101,133,102,133,103,133,105,133,106,133,107,133,108,133,109,133,110,133,111,133,112,133,113,133,115,133,117,133,118,133,119,133,120,133,124,133,125,133,127,133,128,133,129,133,1,119,219,118,105,82,220,128,35,87,8,94,49,89,238,114,189,101,127,110,215,139,56,92,113,134,65,83,243,119,254,98,246,101,192,78,223,152,128,134,158,91,198,139,242,83,226,119,127,79,78,92,118,154,203,89], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+62924);
	/* memory initializer */ allocate([15,95,58,121,235,88,22,78,255,103,139,78,237,98,147,138,29,144,191,82,47,102,220,85,108,86,2,144,213,78,141,79,202,145,112,153,15,108,2,94,67,96,164,91,198,137,213,139,54,101,75,98,150,153,136,91,255,91,136,99,46,85,215,83,38,118,125,81,44,133,162,103,179,104,138,107,146,98,147,143,212,83,18,130,209,109,143,117,102,78,78,141,112,91,159,113,175,133,145,102,217,102,114,127,0,135,205,158,32,159,94,92,47,103,240,143,17,104,95,103,13,98,214,122,133,88,182,94,112,101,49,111,130,133,131,133,134,133,136,133,137,133,138,133,139,133,140,133,141,133,142,133,144,133,145,133,146,133,147,133,148,133,149,133,150,133,151,133,152,133,153,133,154,133,157,133,158,133,159,133,160,133,161,133,162,133,163,133,165,133,166,133,167,133,169,133,171,133,172,133,173,133,177,133,178,133,179,133,180,133,181,133,182,133,184,133,186,133,187,133,188,133,189,133,190,133,191,133,192,133,194,133,195,133,196,133,197,133,198,133,199,133,200,133,202,133,203,133,204,133,205,133,206,133,209,133,210,133,212,133,214,133,215,133,216,133,217,133,218,133,219,133,221,133,222,133,223,133,224,133,225,133,226,133,227,133,229,133,230,133,231,133,232,133,234,133,235,133,236,133,237,133,238,133,239,133,240,133,241,133,242,133,243,133,244,133,245,133,246,133,247,133,248,133,85,96,55,82,13,128,84,100,112,136,41,117,5,94,19,104,244,98,28,151,204,83,61,114,1,140,52,108,97,119,14,122,46,84,172,119,122,152,28,130,244,139,85,120,20,103,193,112,175,101,149,100,54,86,29,96,193,121,248,83,29,78,123,107,134,128,250,91,227,85,219,86,58,79,60,79,114,153,243,93,126,103,56,128,2,96,130,152,1,144,139,91,188,139,245,139,28,100,88,130,222,100,253,85,207,130,101,145,215,79,32,125,31,144,159,124,243,80,81,88,175,110,191,91,201,139,131,128,120,145,156,132,151,123,125,134,139,150,143,150,229,126,211,154,142,120,129,92,87,122,66,144,167,150,95,121,89,91,95,99,11,123,209,132,173,104,6,85,41,127,16,116,34,125,1,149,64,98,76,88,214,78,131,91,121,89,84,88,249,133,250,133,252,133,253,133,254,133,0,134,1,134,2,134,3,134,4,134,6,134,7,134,8,134,9,134,10,134,11,134,12,134,13,134,14,134,15,134,16,134,18,134,19,134,20,134,21,134,23,134,24,134,25,134,26,134,27,134,28,134,29,134,30,134,31,134,32,134,33,134,34,134,35,134,36,134,37,134,38,134,40,134,42,134,43,134,44,134,45,134,46,134,47,134,48,134,49,134,50,134,51,134,52,134,53,134,54,134,55,134,57,134,58,134,59,134,61,134,62,134,63,134,64,134,65,134,66,134,67,134,68,134,69,134,70,134,71,134,72,134,73,134,74,134,75,134,76,134,82,134,83,134,85,134,86,134,87,134,88,134,89,134,91,134,92,134,93,134,95,134,96,134,97,134,99,134,100,134,101,134,102,134,103,134,104,134,105,134,106,134,109,115,30,99,75,142,15,142,206,128,212,130,172,98,240,83,240,108,94,145,42,89,1,96,112,108,77,87,74,100,42,141,43,118,233,110,91,87,128,106,240,117,109,111,45,140,8,140,102,87,239,107,146,136,179,120,162,99,249,83,173,112,100,108,88,88,42,100,2,88,224,104,155,129,16,85,214,124,24,80,186,142,204,109,159,141,235,112,143,99,155,109,212,110,230,126,4,132,67,104,3,144,216,109,118,150,168,139,87,89,121,114,228,133,126,129,188,117,138,138,175,104,84,82,34,142,17,149,208,99,152,152,68,142,124,85,83,79,255,102,143,86,213,96,149,109,67,82,73,92,41,89,251,109,107,88,48,117,28,117,108,96,20,130,70,129,17,99,97,103,226,143,58,119,243,141,52,141,193,148,22,94,133,83,44,84,195,112,109,134,111,134,112,134,114,134,115,134,116,134,117,134,118,134,119,134,120,134,131,134,132,134,133,134,134,134,135,134,136,134,137,134,142,134,143,134,144,134,145,134,146,134,148,134,150,134,151,134,152,134,153,134,154,134,155,134,158,134,159,134,160,134,161,134,162,134,165,134,166,134,171,134,173,134,174,134,178,134,179,134,183,134,184,134,185,134,187,134,188,134,189,134,190,134,191,134,193,134,194,134,195,134,197,134,200,134,204,134,205,134,210,134,211,134,213,134,214,134,215,134,218,134,220,134,221,134,224,134,225,134,226,134,227,134,229,134,230,134,231,134,232,134,234,134,235,134,236,134,239,134,245,134,246,134,247,134,250,134,251,134,252,134,253,134,255,134,1,135,4,135,5,135,6,135,11,135,12,135,14,135,15,135,16,135,17,135,20,135,22,135,64,108,247,94,92,80,173,78,173,94,58,99,71,130,26,144,80,104,110,145,179,119,12,84,220,148,100,95,229,122,118,104,69,99,82,123,223,126,219,117,119,80,149,98,52,89,15,144,248,81,195,121,129,122,254,86,146,95,20,144,130,109,96,92,31,87,16,84,84,81,77,110,226,86,168,99,147,152,127,129,21,135,42,137,0,144,30,84,111,92,192,129,214,98,88,98,49,129,53,158,64,150,110,154,124,154,45,105,165,89,211,98,62,85,22,99,199,84,217,134,60,109,3,90,230,116,156,136,106,107,22,89,76,140,47,95,126,110,169,115,125,152,56,78,247,112,140,91,151,120,61,99,90,102,150,118,203,96,155,91,73,90,7,78,85,129,106,108,139,115,161,78,137,103,81,127,128,95,250,101,27,103,216,95,132,89,1,90,25,135,27,135,29,135,31,135,32,135,36,135,38,135,39,135,40,135,42,135,43,135,44,135,45,135,47,135,48,135,50,135,51,135,53,135,54,135,56,135,57,135,58,135,60,135,61,135,64,135,65,135,66,135,67,135,68,135,69,135,70,135,74,135,75,135,77,135,79,135,80,135,81,135,82,135,84,135,85,135,86,135,88,135,90,135,91,135,92,135,93,135,94,135,95,135,97,135,98,135,102,135,103,135,104,135,105,135,106,135,107,135,108,135,109,135,111,135,113,135,114,135,115,135,117,135,119,135,120,135,121,135,122,135,127,135,128,135,129,135,132,135,134,135,135,135,137,135,138,135,140,135,142,135,143,135,144,135,145,135,146,135,148,135,149,135,150,135,152,135,153,135,154,135,155,135,156,135,157,135,158,135,160,135,161,135,162,135,163,135,164,135,205,93,174,95,113,83,230,151,221,143,69,104,244,86,47,85,223,96,58,78,77,111,244,126,199,130,14,132,212,89,31,79,42,79,62,92,172,126,42,103,26,133,115,84,79,117,195,128,130,85,79,155,77,79,45,110,19,140,9,92,112,97,107,83,31,118,41,110,138,134,135,101,251,149,185,126,59,84,51,122,10,125,238,149,225,85,193,127,238,116,29,99,23,135,161,109,157,122,17,98,161,101,103,83,225,99,131,108,235,93,92,84,168,148,76,78,97,108,236,139,75,92,224,101,156,130,167,104,62,84,52,84,203,107,102,107,148,78,66,99,72,83,30,130,13,79,174,79,94,87,10,98,254,150,100,102,105,114,255,82,161,82,159,96,239,139,20,102,153,113,144,103,127,137,82,120,253,119,112,102,59,86,56,84,33,149,122,114,165,135,166,135,167,135,169,135,170,135,174,135,176,135,177,135,178,135,180,135,182,135,183,135,184,135,185,135,187,135,188,135,190,135,191,135,193,135,194,135,195,135,196,135,197,135,199,135,200,135,201,135,204,135,205,135,206,135,207,135,208,135,212,135,213,135,214,135,215,135,216,135,217,135,218,135,220,135,221,135,222,135,223,135,225,135,226,135,227,135,228,135,230,135,231,135,232,135,233,135,235,135,236,135,237,135,239,135,240,135,241,135,242,135,243,135,244,135,245,135,246,135,247,135,248,135,250,135,251,135,252,135,253,135,255,135,0,136,1,136,2,136,4,136,5,136,6,136,7,136,8,136,9,136,11,136,12,136,13,136,14,136,15,136,16,136,17,136,18,136,20,136,23,136,24,136,25,136,26,136,28,136,29,136,30,136,31,136,32,136,35,136,0,122,111,96,12,94,137,96,157,129,21,89,220,96,132,113,239,112,170,110,80,108,128,114,132,106,173,136,45,94,96,78,179,90,156,85,227,148,23,109,251,124,153,150,15,98,198,126,142,119,126,134,35,83,30,151,150,143,135,102,225,92,160,79,237,114,11,78,166,83,15,89,19,84,128,99,40,149,72,81,217,78,156,156,164,126,184,84,36,141,84,136,55,130,242,149,142,109,38,95,204,90,62,102,105,150,176,115,46,115,191,83,122,129,133,153,161,127,170,91,119,150,80,150,191,126,248,118,162,83,118,149,153,153,177,123,68,137,88,110,97,78,212,127,101,121,230,139,243,96,205,84,171,78,121,152,247,93,97,106,207,80,17,84,97,140,39,132,93,120,4,151,74,82,238,84,163,86,0,149,136,109,181,91,198,109,83,102,36,136,37,136,38,136,39,136,40,136,41,136,42,136,43,136,44,136,45,136,46,136,47,136,48,136,49,136,51,136,52,136,53,136,54,136,55,136,56,136,58,136,59,136,61,136,62,136,63,136,65,136,66,136,67,136,70,136,71,136,72,136,73,136,74,136,75,136,78,136,79,136,80,136,81,136,82,136,83,136,85,136,86,136,88,136,90,136,91,136,92,136,93,136,94,136,95,136,96,136,102,136,103,136,106,136,109,136,111,136,113,136,115,136,116,136,117,136,118,136,120,136,121,136,122,136,123,136,124,136,128,136,131,136,134,136,135,136,137,136,138,136,140,136,142,136,143,136,144,136,145,136,147,136,148,136,149,136,151,136,152,136,153,136,154,136,155,136,157,136,158,136,159,136,160,136,161,136,163,136,165,136,166,136,167,136,168,136,169,136,170,136,15,92,93,91,33,104,150,128,120,85,17,123,72,101,84,105,155,78,71,107,78,135,139,151,79,83,31,99,58,100,170,144,156,101,193,128,16,140,153,81,176,104,120,83,249,135,200,97,196,108,251,108,34,140,81,92,170,133,175,130,12,149,35,107,155,143,176,101,251,95,195,95,225,79,69,136,31,102,101,129,41,115,250,96,116,81,17,82,139,87,98,95,162,144,76,136,146,145,120,94,79,103,39,96,211,89,68,81,246,81,248,128,8,83,121,108,196,150,138,113,17,79,238,79,158,127,61,103,197,85,8,149,192,121,150,136,227,126,159,88,12,98,0,151,90,134,24,86,123,152,144,95,184,139,196,132,87,145,217,83,237,101,143,94,92,117,100,96,110,125,127,90,234,126,237,126,105,143,167,85,163,91,172,96,203,101,132,115,172,136,174,136,175,136,176,136,178,136,179,136,180,136,181,136,182,136,184,136,185,136,186,136,187,136,189,136,190,136,191,136,192,136,195,136,196,136,199,136,200,136,202,136,203,136,204,136,205,136,207,136,208,136,209,136,211,136,214,136,215,136,218,136,219,136,220,136,221,136,222,136,224,136,225,136,230,136,231,136,233,136,234,136,235,136,236,136,237,136,238,136,239,136,242,136,245,136,246,136,247,136,250,136,251,136,253,136,255,136,0,137,1,137,3,137,4,137,5,137,6,137,7,137,8,137,9,137,11,137,12,137,13,137,14,137,15,137,17,137,20,137,21,137,22,137,23,137,24,137,28,137,29,137,30,137,31,137,32,137,34,137,35,137,36,137,38,137,39,137,40,137,41,137,44,137,45,137,46,137,47,137,49,137,50,137,51,137,53,137,55,137,9,144,99,118,41,119,218,126,116,151,155,133,102,91,116,122,234,150,64,136,203,82,143,113,170,95,236,101,226,139,251,91,111,154,225,93,137,107,91,108,173,139,175,139,10,144,197,143,139,83,188,98,38,158,45,158,64,84,43,78,189,130,89,114,156,134,22,93,89,136,175,109,197,150,209,84,154,78,182,139,9,113,189,84,9,150,223,112,249,109,208,118,37,78,20,120,18,135,169,92,246,94,0,138,156,152,14,150,142,112,191,108,68,89,169,99,60,119,77,136,20,111,115,130,48,88,213,113,140,83,26,120,193,150,1,85,102,95,48,113,180,91,26,140,140,154,131,107,46,89,47,158,231,121,104,103,108,98,111,79,161,117,138,127,11,109,51,150,39,108,240,78,210,117,123,81,55,104,62,111,128,144,112,129,150,89,118,116,56,137,57,137,58,137,59,137,60,137,61,137,62,137,63,137,64,137,66,137,67,137,69,137,70,137,71,137,72,137,73,137,74,137,75,137,76,137,77,137,78,137,79,137,80,137,81,137,82,137,83,137,84,137,85,137,86,137,87,137,88,137,89,137,90,137,91,137,92,137,93,137,96,137,97,137,98,137,99,137,100,137,101,137,103,137,104,137,105,137,106,137,107,137,108,137,109,137,110,137,111,137,112,137,113,137,114,137,115,137,116,137,117,137,118,137,119,137,120,137,121,137,122,137,124,137,125,137,126,137,128,137,130,137,132,137,133,137,135,137,136,137,137,137,138,137,139,137,140,137,141,137,142,137,143,137,144,137,145,137,146,137,147,137,148,137,149,137,150,137,151,137,152,137,153,137,154,137,155,137,156,137,157,137,158,137,159,137,160,137,161,137,71,100,39,92,101,144,145,122,35,140,218,89,172,84,0,130,111,131,129,137,0,128,48,105,78,86,54,128,55,114,206,145,182,81,95,78,117,152,150,99,26,78,246,83,243,102,75,129,28,89,178,109,0,78,249,88,59,83,214,99,241,148,157,79,10,79,99,136,144,152,55,89,87,144,251,121,234,78,240,128,145,117,130,108,156,91,232,89,93,95,5,105,129,134,26,80,242,93,89,78,227,119,229,78,122,130,145,98,19,102,145,144,121,92,191,78,121,95,198,129,56,144,132,128,171,117,166,78,212,136,15,97,197,107,198,95,73,78,202,118,162,110,227,139,174,139,10,140,209,139,2,95,252,127,204,127,206,126,53,131,107,131,224,86,183,107,243,151,52,150,251,89,31,84,246,148,235,109,197,91,110,153,57,92,21,95,144,150,162,137,163,137,164,137,165,137,166,137,167,137,168,137,169,137,170,137,171,137,172,137,173,137,174,137,175,137,176,137,177,137,178,137,179,137,180,137,181,137,182,137,183,137,184,137,185,137,186,137,187,137,188,137,189,137,190,137,191,137,192,137,195,137,205,137,211,137,212,137,213,137,215,137,216,137,217,137,219,137,221,137,223,137,224,137,225,137,226,137,228,137,231,137,232,137,233,137,234,137,236,137,237,137,238,137,240,137,241,137,242,137,244,137,245,137,246,137,247,137,248,137,249,137,250,137,251,137,252,137,253,137,254,137,255,137,1,138,2,138,3,138,4,138,5,138,6,138,8,138,9,138,10,138,11,138,12,138,13,138,14,138,15,138,16,138,17,138,18,138,19,138,20,138,21,138,22,138,23,138,24,138,25,138,26,138,27,138,28,138,29,138,112,83,241,130,49,106,116,90,112,158,148,94,40,127,185,131,36,132,37,132,103,131,71,135,206,143,98,141,200,118,113,95,150,152,108,120,32,102,223,84,229,98,99,79,195,129,200,117,184,94,205,150,10,142,249,134,143,84,243,108,140,109,56,108,127,96,199,82,40,117,125,94,24,79,160,96,231,95,36,92,49,117,174,144,192,148,185,114,185,108,56,110,73,145,9,103,203,83,243,83,81,79,201,145,241,139,200,83,124,94,194,143,228,109,142,78,194,118,134,105,94,134,26,97,6,130,89,79,222,79,62,144,124,156,9,97,29,110,20,110,133,150,136,78,49,90,232,150,14,78,127,92,185,121,135,91,237,139,189,127,137,115,223,87,139,130,193,144,1,84,71,144,187,85,234,92,161,95,8,97,50,107,241,114,178,128,137,138,30,138,31,138,32,138,33,138,34,138,35,138,36,138,37,138,38,138,39,138,40,138,41,138,42,138,43,138,44,138,45,138,46,138,47,138,48,138,49,138,50,138,51,138,52,138,53,138,54,138,55,138,56,138,57,138,58,138,59,138,60,138,61,138,63,138,64,138,65,138,66,138,67,138,68,138,69,138,70,138,71,138,73,138,74,138,75,138,76,138,77,138,78,138,79,138,80,138,81,138,82,138,83,138,84,138,85,138,86,138,87,138,88,138,89,138,90,138,91,138,92,138,93,138,94,138,95,138,96,138,97,138,98,138,99,138,100,138,101,138,102,138,103,138,104,138,105,138,106,138,107,138,108,138,109,138,110,138,111,138,112,138,113,138,114,138,115,138,116,138,117,138,118,138,119,138,120,138,122,138,123,138,124,138,125,138,126,138,127,138,128,138,116,109,211,91,213,136,132,152,107,140,109,154,51,158,10,110,164,81,67,81,163,87,129,136,159,83,244,99,149,143,237,86,88,84,6,87,63,115,144,110,24,127,220,143,209,130,63,97,40,96,98,150,240,102,166,126,138,141,195,141,165,148,179,92,164,124,8,103,166,96,5,150,24,128,145,78,231,144,0,83,104,150,65,81,208,143,116,133,93,145,85,102,245,151,85,91,29,83,56,120,66,103,61,104,201,84,126,112,176,91,125,143,141,81,40,87,177,84,18,101,130,102,94,141,67,141,15,129,108,132,109,144,223,124,255,81,251,133,163,103,233,101,161,111,164,134,129,142,106,86,32,144,130,118,118,112,229,113,35,141,233,98,25,82,253,108,60,141,14,96,158,88,142,97,254,102,96,141,78,98,179,85,35,110,45,103,103,143,129,138,130,138,131,138,132,138,133,138,134,138,135,138,136,138,139,138,140,138,141,138,142,138,143,138,144,138,145,138,146,138,148,138,149,138,150,138,151,138,152,138,153,138,154,138,155,138,156,138,157,138,158,138,159,138,160,138,161,138,162,138,163,138,164,138,165,138,166,138,167,138,168,138,169,138,170,138,171,138,172,138,173,138,174,138,175,138,176,138,177,138,178,138,179,138,180,138,181,138,182,138,183,138,184,138,185,138,186,138,187,138,188,138,189,138,190,138,191,138,192,138,193,138,194,138,195,138,196,138,197,138,198,138,199,138,200,138,201,138,202,138,203,138,204,138,205,138,206,138,207,138,208,138,209,138,210,138,211,138,212,138,213,138,214,138,215,138,216,138,217,138,218,138,219,138,220,138,221,138,222,138,223,138,224,138,225,138,226,138,227,138,225,148,248,149,40,119,5,104,168,105,139,84,77,78,184,112,200,139,88,100,139,101,133,91,132,122,58,80,232,91,187,119,225,107,121,138,152,124,190,108,207,118,169,101,151,143,45,93,85,92,56,134,8,104,96,83,24,98,217,122,91,110,253,126,31,106,224,122,112,95,51,111,32,95,140,99,168,109,86,103,8,78,16,94,38,141,215,78,192,128,52,118,156,150,219,98,45,102,126,98,188,108,117,141,103,113,105,127,70,81,135,128,236,83,110,144,152,98,242,84,240,134,153,143,5,128,23,149,23,133,217,143,89,109,205,115,159,101,31,119,4,117,39,120,251,129,30,141,136,148,166,79,149,103,185,117,202,139,7,151,47,99,71,149,53,150,184,132,35,99,65,119,129,95,240,114,137,78,20,96,116,101,239,98,99,107,63,101,228,138,229,138,230,138,231,138,232,138,233,138,234,138,235,138,236,138,237,138,238,138,239,138,240,138,241,138,242,138,243,138,244,138,245,138,246,138,247,138,248,138,249,138,250,138,251,138,252,138,253,138,254,138,255,138,0,139,1,139,2,139,3,139,4,139,5,139,6,139,8,139,9,139,10,139,11,139,12,139,13,139,14,139,15,139,16,139,17,139,18,139,19,139,20,139,21,139,22,139,23,139,24,139,25,139,26,139,27,139,28,139,29,139,30,139,31,139,32,139,33,139,34,139,35,139,36,139,37,139,39,139,40,139,41,139,42,139,43,139,44,139,45,139,46,139,47,139,48,139,49,139,50,139,51,139,52,139,53,139,54,139,55,139,56,139,57,139,58,139,59,139,60,139,61,139,62,139,63,139,64,139,65,139,66,139,67,139,68,139,69,139,39,94,199,117,209,144,193,139,157,130,157,103,47,101,49,84,24,135,229,119,162,128,2,129,65,108,75,78,199,126,76,128,244,118,13,105,150,107,103,98,60,80,132,79,64,87,7,99,98,107,190,141,234,83,232,101,184,126,215,95,26,99,183,99,243,129,244,129,110,127,28,94,217,92,54,82,122,102,233,121,26,122,40,141,153,112,212,117,222,110,187,108,146,122,45,78,197,118,224,95,159,148,119,136,200,126,205,121,191,128,205,145,242,78,23,79,31,130,104,84,222,93,50,109,204,139,165,124,116,143,152,128,26,94,146,84,177,118,153,91,60,102,164,154,224,115,42,104,219,134,49,103,42,115,248,139,219,139,16,144,249,122,219,112,110,113,196,98,169,119,49,86,59,78,87,132,241,103,169,82,192,134,46,141,248,148,81,123,70,139,71,139,72,139,73,139,74,139,75,139,76,139,77,139,78,139,79,139,80,139,81,139,82,139,83,139,84,139,85,139,86,139,87,139,88,139,89,139,90,139,91,139,92,139,93,139,94,139,95,139,96,139,97,139,98,139,99,139,100,139,101,139,103,139,104,139,105,139,106,139,107,139,109,139,110,139,111,139,112,139,113,139,114,139,115,139,116,139,117,139,118,139,119,139,120,139,121,139,122,139,123,139,124,139,125,139,126,139,127,139,128,139,129,139,130,139,131,139,132,139,133,139,134,139,135,139,136,139,137,139,138,139,139,139,140,139,141,139,142,139,143,139,144,139,145,139,146,139,147,139,148,139,149,139,150,139,151,139,152,139,153,139,154,139,155,139,156,139,157,139,158,139,159,139,172,139,177,139,187,139,199,139,208,139,234,139,9,140,30,140,79,79,232,108,93,121,123,154,147,98,42,114,253,98,19,78,22,120,108,143,176,100,90,141,198,123,105,104,132,94,197,136,134,89,158,100,238,88,182,114,14,105,37,149,253,143,88,141,96,87,0,127,6,140,198,81,73,99,217,98,83,83,76,104,34,116,1,131,76,145,68,85,64,119,124,112,74,109,121,81,168,84,68,141,255,89,203,110,196,109,92,91,43,125,212,78,125,124,211,110,80,91,234,129,13,110,87,91,3,155,213,104,42,142,151,91,252,126,59,96,181,126,185,144,112,141,79,89,205,99,223,121,179,141,82,83,207,101,86,121,197,139,59,150,196,126,187,148,130,126,52,86,137,145,0,103,106,127,10,92,117,144,40,102,230,93,80,79,222,103,90,80,92,79,80,87,167,94,16,232,17,232,18,232,19,232,20,232,56,140,57,140,58,140,59,140,60,140,61,140,62,140,63,140,64,140,66,140,67,140,68,140,69,140,72,140,74,140,75,140,77,140,78,140,79,140,80,140,81,140,82,140,83,140,84,140,86,140,87,140,88,140,89,140,91,140,92,140,93,140,94,140,95,140,96,140,99,140,100,140,101,140,102,140,103,140,104,140,105,140,108,140,109,140,110,140,111,140,112,140,113,140,114,140,116,140,117,140,118,140,119,140,123,140,124,140,125,140,126,140,127,140,128,140,129,140,131,140,132,140,134,140,135,140,136,140,139,140,141,140,142,140,143,140,144,140,145,140,146,140,147,140,149,140,150,140,151,140,153,140,154,140,155,140,156,140,157,140,158,140,159,140,160,140,161,140,162,140,163,140,164,140,165,140,166,140,167,140,168,140,169,140,170,140,171,140,172,140,173,140,141,78,12,78,64,81,16,78,255,94,69,83,21,78,152,78,30,78,50,155,108,91,105,86,40,78,186,121,63,78,21,83,71,78,45,89,59,114,110,83,16,108,223,86,228,128,151,153,211,107,126,119,23,159,54,78,159,78,16,159,92,78,105,78,147,78,136,130,91,91,108,85,15,86,196,78,141,83,157,83,163,83,165,83,174,83,101,151,93,141,26,83,245,83,38,83,46,83,62,83,92,141,102,83,99,83,2,82,8,82,14,82,45,82,51,82,63,82,64,82,76,82,94,82,97,82,92,82,175,132,125,82,130,82,129,82,144,82,147,82,130,81,84,127,187,78,195,78,201,78,194,78,232,78,225,78,235,78,222,78,27,79,243,78,34,79,100,79,245,78,37,79,39,79,9,79,43,79,94,79,103,79,56,101,90,79,93,79,174,140,175,140,176,140,177,140,178,140,179,140,180,140,181,140,182,140,183,140,184,140,185,140,186,140,187,140,188,140,189,140,190,140,191,140,192,140,193,140,194,140,195,140,196,140,197,140,198,140,199,140,200,140,201,140,202,140,203,140,204,140,205,140,206,140,207,140,208,140,209,140,210,140,211,140,212,140,213,140,214,140,215,140,216,140,217,140,218,140,219,140,220,140,221,140,222,140,223,140,224,140,225,140,226,140,227,140,228,140,229,140,230,140,231,140,232,140,233,140,234,140,235,140,236,140,237,140,238,140,239,140,240,140,241,140,242,140,243,140,244,140,245,140,246,140,247,140,248,140,249,140,250,140,251,140,252,140,253,140,254,140,255,140,0,141,1,141,2,141,3,141,4,141,5,141,6,141,7,141,8,141,9,141,10,141,11,141,12,141,13,141,95,79,87,79,50,79,61,79,118,79,116,79,145,79,137,79,131,79,143,79,126,79,123,79,170,79,124,79,172,79,148,79,230,79,232,79,234,79,197,79,218,79,227,79,220,79,209,79,223,79,248,79,41,80,76,80,243,79,44,80,15,80,46,80,45,80,254,79,28,80,12,80,37,80,40,80,126,80,67,80,85,80,72,80,78,80,108,80,123,80,165,80,167,80,169,80,186,80,214,80,6,81,237,80,236,80,230,80,238,80,7,81,11,81,221,78,61,108,88,79,101,79,206,79,160,159,70,108,116,124,110,81,253,93,201,158,152,153,129,81,20,89,249,82,13,83,7,138,16,83,235,81,25,89,85,81,160,78,86,81,179,78,110,136,164,136,181,78,20,129,210,136,128,121,52,91,3,136,184,127,171,81,177,81,189,81,188,81,14,141,15,141,16,141,17,141,18,141,19,141,20,141,21,141,22,141,23,141,24,141,25,141,26,141,27,141,28,141,32,141,81,141,82,141,87,141,95,141,101,141,104,141,105,141,106,141,108,141,110,141,111,141,113,141,114,141,120,141,121,141,122,141,123,141,124,141,125,141,126,141,127,141,128,141,130,141,131,141,134,141,135,141,136,141,137,141,140,141,141,141,142,141,143,141,144,141,146,141,147,141,149,141,150,141,151,141,152,141,153,141,154,141,155,141,156,141,157,141,158,141,160,141,161,141,162,141,164,141,165,141,166,141,167,141,168,141,169,141,170,141,171,141,172,141,173,141,174,141,175,141,176,141,178,141,182,141,183,141,185,141,187,141,189,141,192,141,193,141,194,141,197,141,199,141,200,141,201,141,202,141,205,141,208,141,210,141,211,141,212,141,199,81,150,81,162,81,165,81,160,139,166,139,167,139,170,139,180,139,181,139,183,139,194,139,195,139,203,139,207,139,206,139,210,139,211,139,212,139,214,139,216,139,217,139,220,139,223,139,224,139,228,139,232,139,233,139,238,139,240,139,243,139,246,139,249,139,252,139,255,139,0,140,2,140,4,140,7,140,12,140,15,140,17,140,18,140,20,140,21,140,22,140,25,140,27,140,24,140,29,140,31,140,32,140,33,140,37,140,39,140,42,140,43,140,46,140,47,140,50,140,51,140,53,140,54,140,105,83,122,83,29,150,34,150,33,150,49,150,42,150,61,150,60,150,66,150,73,150,84,150,95,150,103,150,108,150,114,150,116,150,136,150,141,150,151,150,176,150,151,144,155,144,157,144,153,144,172,144,161,144,180,144,179,144,182,144,186,144,213,141,216,141,217,141,220,141,224,141,225,141,226,141,229,141,230,141,231,141,233,141,237,141,238,141,240,141,241,141,242,141,244,141,246,141,252,141,254,141,255,141,0,142,1,142,2,142,3,142,4,142,6,142,7,142,8,142,11,142,13,142,14,142,16,142,17,142,18,142,19,142,21,142,22,142,23,142,24,142,25,142,26,142,27,142,28,142,32,142,33,142,36,142,37,142,38,142,39,142,40,142,43,142,45,142,48,142,50,142,51,142,52,142,54,142,55,142,56,142,59,142,60,142,62,142,63,142,67,142,69,142,70,142,76,142,77,142,78,142,79,142,80,142,83,142,84,142,85,142,86,142,87,142,88,142,90,142,91,142,92,142,93,142,94,142,95,142,96,142,97,142,98,142,99,142,100,142,101,142,103,142,104,142,106,142,107,142,110,142,113,142,184,144,176,144,207,144,197,144,190,144,208,144,196,144,199,144,211,144,230,144,226,144,220,144,215,144,219,144,235,144,239,144,254,144,4,145,34,145,30,145,35,145,49,145,47,145,57,145,67,145,70,145,13,82,66,89,162,82,172,82,173,82,190,82,255,84,208,82,214,82,240,82,223,83,238,113,205,119,244,94,245,81,252,81,47,155,182,83,1,95,90,117,239,93,76,87,169,87,161,87,126,88,188,88,197,88,209,88,41,87,44,87,42,87,51,87,57,87,46,87,47,87,92,87,59,87,66,87,105,87,133,87,107,87,134,87,124,87,123,87,104,87,109,87,118,87,115,87,173,87,164,87,140,87,178,87,207,87,167,87,180,87,147,87,160,87,213,87,216,87,218,87,217,87,210,87,184,87,244,87,239,87,248,87,228,87,221,87,115,142,117,142,119,142,120,142,121,142,122,142,123,142,125,142,126,142,128,142,130,142,131,142,132,142,134,142,136,142,137,142,138,142,139,142,140,142,141,142,142,142,145,142,146,142,147,142,149,142,150,142,151,142,152,142,153,142,154,142,155,142,157,142,159,142,160,142,161,142,162,142,163,142,164,142,165,142,166,142,167,142,168,142,169,142,170,142,173,142,174,142,176,142,177,142,179,142,180,142,181,142,182,142,183,142,184,142,185,142,187,142,188,142,189,142,190,142,191,142,192,142,193,142,194,142,195,142,196,142,197,142,198,142,199,142,200,142,201,142,202,142,203,142,204,142,205,142,207,142,208,142,209,142,210,142,211,142,212,142,213,142,214,142,215,142,216,142,217,142,218,142,219,142,220,142,221,142,222,142,223,142,224,142,225,142,226,142,227,142,228,142,11,88,13,88,253,87,237,87,0,88,30,88,25,88,68,88,32,88,101,88,108,88,129,88,137,88,154,88,128,88,168,153,25,159,255,97,121,130,125,130,127,130,143,130,138,130,168,130,132,130,142,130,145,130,151,130,153,130,171,130,184,130,190,130,176,130,200,130,202,130,227,130,152,130,183,130,174,130,203,130,204,130,193,130,169,130,180,130,161,130,170,130,159,130,196,130,206,130,164,130,225,130,9,131,247,130,228,130,15,131,7,131,220,130,244,130,210,130,216,130,12,131,251,130,211,130,17,131,26,131,6,131,20,131,21,131,224,130,213,130,28,131,81,131,91,131,92,131,8,131,146,131,60,131,52,131,49,131,155,131,94,131,47,131,79,131,71,131,67,131,95,131,64,131,23,131,96,131,45,131,58,131,51,131,102,131,101,131,229,142,230,142,231,142,232,142,233,142,234,142,235,142,236,142,237,142,238,142,239,142,240,142,241,142,242,142,243,142,244,142,245,142,246,142,247,142,248,142,249,142,250,142,251,142,252,142,253,142,254,142,255,142,0,143,1,143,2,143,3,143,4,143,5,143,6,143,7,143,8,143,9,143,10,143,11,143,12,143,13,143,14,143,15,143,16,143,17,143,18,143,19,143,20,143,21,143,22,143,23,143,24,143,25,143,26,143,27,143,28,143,29,143,30,143,31,143,32,143,33,143,34,143,35,143,36,143,37,143,38,143,39,143,40,143,41,143,42,143,43,143,44,143,45,143,46,143,47,143,48,143,49,143,50,143,51,143,52,143,53,143,54,143,55,143,56,143,57,143,58,143,59,143,60,143,61,143,62,143,63,143,64,143,65,143,66,143,67,143,68,143,104,131,27,131,105,131,108,131,106,131,109,131,110,131,176,131,120,131,179,131,180,131,160,131,170,131,147,131,156,131,133,131,124,131,182,131,169,131,125,131,184,131,123,131,152,131,158,131,168,131,186,131,188,131,193,131,1,132,229,131,216,131,7,88,24,132,11,132,221,131,253,131,214,131,28,132,56,132,17,132,6,132,212,131,223,131,15,132,3,132,248,131,249,131,234,131,197,131,192,131,38,132,240,131,225,131,92,132,81,132,90,132,89,132,115,132,135,132,136,132,122,132,137,132,120,132,60,132,70,132,105,132,118,132,140,132,142,132,49,132,109,132,193,132,205,132,208,132,230,132,189,132,211,132,202,132,191,132,186,132,224,132,161,132,185,132,180,132,151,132,229,132,227,132,12,133,13,117,56,133,240,132,57,133,31,133,58,133,69,143,70,143,71,143,72,143,73,143,74,143,75,143,76,143,77,143,78,143,79,143,80,143,81,143,82,143,83,143,84,143,85,143,86,143,87,143,88,143,89,143,90,143,91,143,92,143,93,143,94,143,95,143,96,143,97,143,98,143,99,143,100,143,101,143,106,143,128,143,140,143,146,143,157,143,160,143,161,143,162,143,164,143,165,143,166,143,167,143,170,143,172,143,173,143,174,143,175,143,178,143,179,143,180,143,181,143,183,143,184,143,186,143,187,143,188,143,191,143,192,143,195,143,198,143,201,143,202,143,203,143,204,143,205,143,207,143,210,143,214,143,215,143,218,143,224,143,225,143,227,143,231,143,236,143,239,143,241,143,242,143,244,143,245,143,246,143,250,143,251,143,252,143,254,143,255,143,7,144,8,144,12,144,14,144,19,144,21,144,24,144,86,133,59,133,255,132,252,132,89,133,72,133,104,133,100,133,94,133,122,133,162,119,67,133,114,133,123,133,164,133,168,133,135,133,143,133,121,133,174,133,156,133,133,133,185,133,183,133,176,133,211,133,193,133,220,133,255,133,39,134,5,134,41,134,22,134,60,134,254,94,8,95,60,89,65,89,55,128,85,89,90,89,88,89,15,83,34,92,37,92,44,92,52,92,76,98,106,98,159,98,187,98,202,98,218,98,215,98,238,98,34,99,246,98,57,99,75,99,67,99,173,99,246,99,113,99,122,99,142,99,180,99,109,99,172,99,138,99,105,99,174,99,188,99,242,99,248,99,224,99,255,99,196,99,222,99,206,99,82,100,198,99,190,99,69,100,65,100,11,100,27,100,32,100,12,100,38,100,33,100,94,100,132,100,109,100,150,100,25,144,28,144,35,144,36,144,37,144,39,144,40,144,41,144,42,144,43,144,44,144,48,144,49,144,50,144,51,144,52,144,55,144,57,144,58,144,61,144,63,144,64,144,67,144,69,144,70,144,72,144,73,144,74,144,75,144,76,144,78,144,84,144,85,144,86,144,89,144,90,144,92,144,93,144,94,144,95,144,96,144,97,144,100,144,102,144,103,144,105,144,106,144,107,144,108,144,111,144,112,144,113,144,114,144,115,144,118,144,119,144,120,144,121,144,122,144,123,144,124,144,126,144,129,144,132,144,133,144,134,144,135,144,137,144,138,144,140,144,141,144,142,144,143,144,144,144,146,144,148,144,150,144,152,144,154,144,156,144,158,144,159,144,160,144,164,144,165,144,167,144,168,144,169,144,171,144,173,144,178,144,183,144,188,144,189,144,191,144,192,144,122,100,183,100,184,100,153,100,186,100,192,100,208,100,215,100,228,100,226,100,9,101,37,101,46,101,11,95,210,95,25,117,17,95,95,83,241,83,253,83,233,83,232,83,251,83,18,84,22,84,6,84,75,84,82,84,83,84,84,84,86,84,67,84,33,84,87,84,89,84,35,84,50,84,130,84,148,84,119,84,113,84,100,84,154,84,155,84,132,84,118,84,102,84,157,84,208,84,173,84,194,84,180,84,210,84,167,84,166,84,211,84,212,84,114,84,163,84,213,84,187,84,191,84,204,84,217,84,218,84,220,84,169,84,170,84,164,84,221,84,207,84,222,84,27,85,231,84,32,85,253,84,20,85,243,84,34,85,35,85,15,85,17,85,39,85,42,85,103,85,143,85,181,85,73,85,109,85,65,85,85,85,63,85,80,85,60,85,194,144,195,144,198,144,200,144,201,144,203,144,204,144,205,144,210,144,212,144,213,144,214,144,216,144,217,144,218,144,222,144,223,144,224,144,227,144,228,144,229,144,233,144,234,144,236,144,238,144,240,144,241,144,242,144,243,144,245,144,246,144,247,144,249,144,250,144,251,144,252,144,255,144,0,145,1,145,3,145,5,145,6,145,7,145,8,145,9,145,10,145,11,145,12,145,13,145,14,145,15,145,16,145,17,145,18,145,19,145,20,145,21,145,22,145,23,145,24,145,26,145,27,145,28,145,29,145,31,145,32,145,33,145,36,145,37,145,38,145,39,145,40,145,41,145,42,145,43,145,44,145,45,145,46,145,48,145,50,145,51,145,52,145,53,145,54,145,55,145,56,145,58,145,59,145,60,145,61,145,62,145,63,145,64,145,65,145,66,145,68,145,55,85,86,85,117,85,118,85,119,85,51,85,48,85,92,85,139,85,210,85,131,85,177,85,185,85,136,85,129,85,159,85,126,85,214,85,145,85,123,85,223,85,189,85,190,85,148,85,153,85,234,85,247,85,201,85,31,86,209,85,235,85,236,85,212,85,230,85,221,85,196,85,239,85,229,85,242,85,243,85,204,85,205,85,232,85,245,85,228,85,148,143,30,86,8,86,12,86,1,86,36,86,35,86,254,85,0,86,39,86,45,86,88,86,57,86,87,86,44,86,77,86,98,86,89,86,92,86,76,86,84,86,134,86,100,86,113,86,107,86,123,86,124,86,133,86,147,86,175,86,212,86,215,86,221,86,225,86,245,86,235,86,249,86,255,86,4,87,10,87,9,87,28,87,15,94,25,94,20,94,17,94,49,94,59,94,60,94,69,145,71,145,72,145,81,145,83,145,84,145,85,145,86,145,88,145,89,145,91,145,92,145,95,145,96,145,102,145,103,145,104,145,107,145,109,145,115,145,122,145,123,145,124,145,128,145,129,145,130,145,131,145,132,145,134,145,136,145,138,145,142,145,143,145,147,145,148,145,149,145,150,145,151,145,152,145,153,145,156,145,157,145,158,145,159,145,160,145,161,145,164,145,165,145,166,145,167,145,168,145,169,145,171,145,172,145,176,145,177,145,178,145,179,145,182,145,183,145,184,145,185,145,187,145,188,145,189,145,190,145,191,145,192,145,193,145,194,145,195,145,196,145,197,145,198,145,200,145,203,145,208,145,210,145,211,145,212,145,213,145,214,145,215,145,216,145,217,145,218,145,219,145,221,145,222,145,223,145,224,145,225,145,226,145,227,145,228,145,229,145,55,94,68,94,84,94,91,94,94,94,97,94,140,92,122,92,141,92,144,92,150,92,136,92,152,92,153,92,145,92,154,92,156,92,181,92,162,92,189,92,172,92,171,92,177,92,163,92,193,92,183,92,196,92,210,92,228,92,203,92,229,92,2,93,3,93,39,93,38,93,46,93,36,93,30,93,6,93,27,93,88,93,62,93,52,93,61,93,108,93,91,93,111,93,93,93,107,93,75,93,74,93,105,93,116,93,130,93,153,93,157,93,115,140,183,93,197,93,115,95,119,95,130,95,135,95,137,95,140,95,149,95,153,95,156,95,168,95,173,95,181,95,188,95,98,136,97,95,173,114,176,114,180,114,183,114,184,114,195,114,193,114,206,114,205,114,210,114,232,114,239,114,233,114,242,114,244,114,247,114,1,115,243,114,3,115,250,114,230,145,231,145,232,145,233,145,234,145,235,145,236,145,237,145,238,145,239,145,240,145,241,145,242,145,243,145,244,145,245,145,246,145,247,145,248,145,249,145,250,145,251,145,252,145,253,145,254,145,255,145,0,146,1,146,2,146,3,146,4,146,5,146,6,146,7,146,8,146,9,146,10,146,11,146,12,146,13,146,14,146,15,146,16,146,17,146,18,146,19,146,20,146,21,146,22,146,23,146,24,146,25,146,26,146,27,146,28,146,29,146,30,146,31,146,32,146,33,146,34,146,35,146,36,146,37,146,38,146,39,146,40,146,41,146,42,146,43,146,44,146,45,146,46,146,47,146,48,146,49,146,50,146,51,146,52,146,53,146,54,146,55,146,56,146,57,146,58,146,59,146,60,146,61,146,62,146,63,146,64,146,65,146,66,146,67,146,68,146,69,146,251,114,23,115,19,115,33,115,10,115,30,115,29,115,21,115,34,115,57,115,37,115,44,115,56,115,49,115,80,115,77,115,87,115,96,115,108,115,111,115,126,115,27,130,37,89,231,152,36,89,2,89,99,153,103,153,104,153,105,153,106,153,107,153,108,153,116,153,119,153,125,153,128,153,132,153,135,153,138,153,141,153,144,153,145,153,147,153,148,153,149,153,128,94,145,94,139,94,150,94,165,94,160,94,185,94,181,94,190,94,179,94,83,141,210,94,209,94,219,94,232,94,234,94,186,129,196,95,201,95,214,95,207,95,3,96,238,95,4,96,225,95,228,95,254,95,5,96,6,96,234,95,237,95,248,95,25,96,53,96,38,96,27,96,15,96,13,96,41,96,43,96,10,96,63,96,33,96,120,96,121,96,123,96,122,96,66,96,70,146,71,146,72,146,73,146,74,146,75,146,76,146,77,146,78,146,79,146,80,146,81,146,82,146,83,146,84,146,85,146,86,146,87,146,88,146,89,146,90,146,91,146,92,146,93,146,94,146,95,146,96,146,97,146,98,146,99,146,100,146,101,146,102,146,103,146,104,146,105,146,106,146,107,146,108,146,109,146,110,146,111,146,112,146,113,146,114,146,115,146,117,146,118,146,119,146,120,146,121,146,122,146,123,146,124,146,125,146,126,146,127,146,128,146,129,146,130,146,131,146,132,146,133,146,134,146,135,146,136,146,137,146,138,146,139,146,140,146,141,146,143,146,144,146,145,146,146,146,147,146,148,146,149,146,150,146,151,146,152,146,153,146,154,146,155,146,156,146,157,146,158,146,159,146,160,146,161,146,162,146,163,146,164,146,165,146,166,146,167,146,106,96,125,96,150,96,154,96,173,96,157,96,131,96,146,96,140,96,155,96,236,96,187,96,177,96,221,96,216,96,198,96,218,96,180,96,32,97,38,97,21,97,35,97,244,96,0,97,14,97,43,97,74,97,117,97,172,97,148,97,167,97,183,97,212,97,245,97,221,95,179,150,233,149,235,149,241,149,243,149,245,149,246,149,252,149,254,149,3,150,4,150,6,150,8,150,10,150,11,150,12,150,13,150,15,150,18,150,21,150,22,150,23,150,25,150,26,150,44,78,63,114,21,98,53,108,84,108,92,108,74,108,163,108,133,108,144,108,148,108,140,108,104,108,105,108,116,108,118,108,134,108,169,108,208,108,212,108,173,108,247,108,248,108,241,108,215,108,178,108,224,108,214,108,250,108,235,108,238,108,177,108,211,108,239,108,254,108,168,146,169,146,170,146,171,146,172,146,173,146,175,146,176,146,177,146,178,146,179,146,180,146,181,146,182,146,183,146,184,146,185,146,186,146,187,146,188,146,189,146,190,146,191,146,192,146,193,146,194,146,195,146,196,146,197,146,198,146,199,146,201,146,202,146,203,146,204,146,205,146,206,146,207,146,208,146,209,146,210,146,211,146,212,146,213,146,214,146,215,146,216,146,217,146,218,146,219,146,220,146,221,146,222,146,223,146,224,146,225,146,226,146,227,146,228,146,229,146,230,146,231,146,232,146,233,146,234,146,235,146,236,146,237,146,238,146,239,146,240,146,241,146,242,146,243,146,244,146,245,146,246,146,247,146,248,146,249,146,250,146,251,146,252,146,253,146,254,146,255,146,0,147,1,147,2,147,3,147,4,147,5,147,6,147,7,147,8,147,9,147,57,109,39,109,12,109,67,109,72,109,7,109,4,109,25,109,14,109,43,109,77,109,46,109,53,109,26,109,79,109,82,109,84,109,51,109,145,109,111,109,158,109,160,109,94,109,147,109,148,109,92,109,96,109,124,109,99,109,26,110,199,109,197,109,222,109,14,110,191,109,224,109,17,110,230,109,221,109,217,109,22,110,171,109,12,110,174,109,43,110,110,110,78,110,107,110,178,110,95,110,134,110,83,110,84,110,50,110,37,110,68,110,223,110,177,110,152,110,224,110,45,111,226,110,165,110,167,110,189,110,187,110,183,110,215,110,180,110,207,110,143,110,194,110,159,110,98,111,70,111,71,111,36,111,21,111,249,110,47,111,54,111,75,111,116,111,42,111,9,111,41,111,137,111,141,111,140,111,120,111,114,111,124,111,122,111,209,111,10,147,11,147,12,147,13,147,14,147,15,147,16,147,17,147,18,147,19,147,20,147,21,147,22,147,23,147,24,147,25,147,26,147,27,147,28,147,29,147,30,147,31,147,32,147,33,147,34,147,35,147,36,147,37,147,38,147,39,147,40,147,41,147,42,147,43,147,44,147,45,147,46,147,47,147,48,147,49,147,50,147,51,147,52,147,53,147,54,147,55,147,56,147,57,147,58,147,59,147,60,147,61,147,63,147,64,147,65,147,66,147,67,147,68,147,69,147,70,147,71,147,72,147,73,147,74,147,75,147,76,147,77,147,78,147,79,147,80,147,81,147,82,147,83,147,84,147,85,147,86,147,87,147,88,147,89,147,90,147,91,147,92,147,93,147,94,147,95,147,96,147,97,147,98,147,99,147,100,147,101,147,102,147,103,147,104,147,105,147,107,147,201,111,167,111,185,111,182,111,194,111,225,111,238,111,222,111,224,111,239,111,26,112,35,112,27,112,57,112,53,112,79,112,94,112,128,91], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+73164);
	/* memory initializer */ allocate([132,91,149,91,147,91,165,91,184,91,47,117,158,154,52,100,228,91,238,91,48,137,240,91,71,142,7,139,182,143,211,143,213,143,229,143,238,143,228,143,233,143,230,143,243,143,232,143,5,144,4,144,11,144,38,144,17,144,13,144,22,144,33,144,53,144,54,144,45,144,47,144,68,144,81,144,82,144,80,144,104,144,88,144,98,144,91,144,185,102,116,144,125,144,130,144,136,144,131,144,139,144,80,95,87,95,86,95,88,95,59,92,171,84,80,92,89,92,113,91,99,92,102,92,188,127,42,95,41,95,45,95,116,130,60,95,59,155,110,92,129,89,131,89,141,89,169,89,170,89,163,89,108,147,109,147,110,147,111,147,112,147,113,147,114,147,115,147,116,147,117,147,118,147,119,147,120,147,121,147,122,147,123,147,124,147,125,147,126,147,127,147,128,147,129,147,130,147,131,147,132,147,133,147,134,147,135,147,136,147,137,147,138,147,139,147,140,147,141,147,142,147,144,147,145,147,146,147,147,147,148,147,149,147,150,147,151,147,152,147,153,147,154,147,155,147,156,147,157,147,158,147,159,147,160,147,161,147,162,147,163,147,164,147,165,147,166,147,167,147,168,147,169,147,170,147,171,147,172,147,173,147,174,147,175,147,176,147,177,147,178,147,179,147,180,147,181,147,182,147,183,147,184,147,185,147,186,147,187,147,188,147,189,147,190,147,191,147,192,147,193,147,194,147,195,147,196,147,197,147,198,147,199,147,200,147,201,147,203,147,204,147,205,147,151,89,202,89,171,89,158,89,164,89,210,89,178,89,175,89,215,89,190,89,5,90,6,90,221,89,8,90,227,89,216,89,249,89,12,90,9,90,50,90,52,90,17,90,35,90,19,90,64,90,103,90,74,90,85,90,60,90,98,90,117,90,236,128,170,90,155,90,119,90,122,90,190,90,235,90,178,90,210,90,212,90,184,90,224,90,227,90,241,90,214,90,230,90,216,90,220,90,9,91,23,91,22,91,50,91,55,91,64,91,21,92,28,92,90,91,101,91,115,91,81,91,83,91,98,91,117,154,119,154,120,154,122,154,127,154,125,154,128,154,129,154,133,154,136,154,138,154,144,154,146,154,147,154,150,154,152,154,155,154,156,154,157,154,159,154,160,154,162,154,163,154,165,154,167,154,159,126,161,126,163,126,165,126,168,126,169,126,206,147,207,147,208,147,209,147,210,147,211,147,212,147,213,147,215,147,216,147,217,147,218,147,219,147,220,147,221,147,222,147,223,147,224,147,225,147,226,147,227,147,228,147,229,147,230,147,231,147,232,147,233,147,234,147,235,147,236,147,237,147,238,147,239,147,240,147,241,147,242,147,243,147,244,147,245,147,246,147,247,147,248,147,249,147,250,147,251,147,252,147,253,147,254,147,255,147,0,148,1,148,2,148,3,148,4,148,5,148,6,148,7,148,8,148,9,148,10,148,11,148,12,148,13,148,14,148,15,148,16,148,17,148,18,148,19,148,20,148,21,148,22,148,23,148,24,148,25,148,26,148,27,148,28,148,29,148,30,148,31,148,32,148,33,148,34,148,35,148,36,148,37,148,38,148,39,148,40,148,41,148,42,148,43,148,44,148,45,148,46,148,173,126,176,126,190,126,192,126,193,126,194,126,201,126,203,126,204,126,208,126,212,126,215,126,219,126,224,126,225,126,232,126,235,126,238,126,239,126,241,126,242,126,13,127,246,126,250,126,251,126,254,126,1,127,2,127,3,127,7,127,8,127,11,127,12,127,15,127,17,127,18,127,23,127,25,127,28,127,27,127,31,127,33,127,34,127,35,127,36,127,37,127,38,127,39,127,42,127,43,127,44,127,45,127,47,127,48,127,49,127,50,127,51,127,53,127,122,94,127,117,219,93,62,117,149,144,142,115,145,115,174,115,162,115,159,115,207,115,194,115,209,115,183,115,179,115,192,115,201,115,200,115,229,115,217,115,124,152,10,116,233,115,231,115,222,115,186,115,242,115,15,116,42,116,91,116,38,116,37,116,40,116,48,116,46,116,44,116,47,148,48,148,49,148,50,148,51,148,52,148,53,148,54,148,55,148,56,148,57,148,58,148,59,148,60,148,61,148,63,148,64,148,65,148,66,148,67,148,68,148,69,148,70,148,71,148,72,148,73,148,74,148,75,148,76,148,77,148,78,148,79,148,80,148,81,148,82,148,83,148,84,148,85,148,86,148,87,148,88,148,89,148,90,148,91,148,92,148,93,148,94,148,95,148,96,148,97,148,98,148,99,148,100,148,101,148,102,148,103,148,104,148,105,148,106,148,108,148,109,148,110,148,111,148,112,148,113,148,114,148,115,148,116,148,117,148,118,148,119,148,120,148,121,148,122,148,123,148,124,148,125,148,126,148,127,148,128,148,129,148,130,148,131,148,132,148,145,148,150,148,152,148,199,148,207,148,211,148,212,148,218,148,230,148,251,148,28,149,32,149,27,116,26,116,65,116,92,116,87,116,85,116,89,116,119,116,109,116,126,116,156,116,142,116,128,116,129,116,135,116,139,116,158,116,168,116,169,116,144,116,167,116,210,116,186,116,234,151,235,151,236,151,76,103,83,103,94,103,72,103,105,103,165,103,135,103,106,103,115,103,152,103,167,103,117,103,168,103,158,103,173,103,139,103,119,103,124,103,240,103,9,104,216,103,10,104,233,103,176,103,12,104,217,103,181,103,218,103,179,103,221,103,0,104,195,103,184,103,226,103,14,104,193,103,253,103,50,104,51,104,96,104,97,104,78,104,98,104,68,104,100,104,131,104,29,104,85,104,102,104,65,104,103,104,64,104,62,104,74,104,73,104,41,104,181,104,143,104,116,104,119,104,147,104,107,104,194,104,110,105,252,104,31,105,32,105,249,104,39,149,51,149,61,149,67,149,72,149,75,149,85,149,90,149,96,149,110,149,116,149,117,149,119,149,120,149,121,149,122,149,123,149,124,149,125,149,126,149,128,149,129,149,130,149,131,149,132,149,133,149,134,149,135,149,136,149,137,149,138,149,139,149,140,149,141,149,142,149,143,149,144,149,145,149,146,149,147,149,148,149,149,149,150,149,151,149,152,149,153,149,154,149,155,149,156,149,157,149,158,149,159,149,160,149,161,149,162,149,163,149,164,149,165,149,166,149,167,149,168,149,169,149,170,149,171,149,172,149,173,149,174,149,175,149,176,149,177,149,178,149,179,149,180,149,181,149,182,149,183,149,184,149,185,149,186,149,187,149,188,149,189,149,190,149,191,149,192,149,193,149,194,149,195,149,196,149,197,149,198,149,199,149,200,149,201,149,202,149,203,149,36,105,240,104,11,105,1,105,87,105,227,104,16,105,113,105,57,105,96,105,66,105,93,105,132,105,107,105,128,105,152,105,120,105,52,105,204,105,135,105,136,105,206,105,137,105,102,105,99,105,121,105,155,105,167,105,187,105,171,105,173,105,212,105,177,105,193,105,202,105,223,105,149,105,224,105,141,105,255,105,47,106,237,105,23,106,24,106,101,106,242,105,68,106,62,106,160,106,80,106,91,106,53,106,142,106,121,106,61,106,40,106,88,106,124,106,145,106,144,106,169,106,151,106,171,106,55,115,82,115,129,107,130,107,135,107,132,107,146,107,147,107,141,107,154,107,155,107,161,107,170,107,107,143,109,143,113,143,114,143,115,143,117,143,118,143,120,143,119,143,121,143,122,143,124,143,126,143,129,143,130,143,132,143,135,143,139,143,204,149,205,149,206,149,207,149,208,149,209,149,210,149,211,149,212,149,213,149,214,149,215,149,216,149,217,149,218,149,219,149,220,149,221,149,222,149,223,149,224,149,225,149,226,149,227,149,228,149,229,149,230,149,231,149,236,149,255,149,7,150,19,150,24,150,27,150,30,150,32,150,35,150,36,150,37,150,38,150,39,150,40,150,41,150,43,150,44,150,45,150,47,150,48,150,55,150,56,150,57,150,58,150,62,150,65,150,67,150,74,150,78,150,79,150,81,150,82,150,83,150,86,150,87,150,88,150,89,150,90,150,92,150,93,150,94,150,96,150,99,150,101,150,102,150,107,150,109,150,110,150,111,150,112,150,113,150,115,150,120,150,121,150,122,150,123,150,124,150,125,150,126,150,127,150,128,150,129,150,130,150,131,150,132,150,135,150,137,150,138,150,141,143,142,143,143,143,152,143,154,143,206,142,11,98,23,98,27,98,31,98,34,98,33,98,37,98,36,98,44,98,231,129,239,116,244,116,255,116,15,117,17,117,19,117,52,101,238,101,239,101,240,101,10,102,25,102,114,103,3,102,21,102,0,102,133,112,247,102,29,102,52,102,49,102,54,102,53,102,6,128,95,102,84,102,65,102,79,102,86,102,97,102,87,102,119,102,132,102,140,102,167,102,157,102,190,102,219,102,220,102,230,102,233,102,50,141,51,141,54,141,59,141,61,141,64,141,69,141,70,141,72,141,73,141,71,141,77,141,85,141,89,141,199,137,202,137,203,137,204,137,206,137,207,137,208,137,209,137,110,114,159,114,93,114,102,114,111,114,126,114,127,114,132,114,139,114,141,114,143,114,146,114,8,99,50,99,176,99,140,150,142,150,145,150,146,150,147,150,149,150,150,150,154,150,155,150,157,150,158,150,159,150,160,150,161,150,162,150,163,150,164,150,165,150,166,150,168,150,169,150,170,150,171,150,172,150,173,150,174,150,175,150,177,150,178,150,180,150,181,150,183,150,184,150,186,150,187,150,191,150,194,150,195,150,200,150,202,150,203,150,208,150,209,150,211,150,212,150,214,150,215,150,216,150,217,150,218,150,219,150,220,150,221,150,222,150,223,150,225,150,226,150,227,150,228,150,229,150,230,150,231,150,235,150,236,150,237,150,238,150,240,150,241,150,242,150,244,150,245,150,248,150,250,150,251,150,252,150,253,150,255,150,2,151,3,151,5,151,10,151,11,151,12,151,16,151,17,151,18,151,20,151,21,151,23,151,24,151,25,151,26,151,27,151,29,151,31,151,32,151,63,100,216,100,4,128,234,107,243,107,253,107,245,107,249,107,5,108,7,108,6,108,13,108,21,108,24,108,25,108,26,108,33,108,41,108,36,108,42,108,50,108,53,101,85,101,107,101,77,114,82,114,86,114,48,114,98,134,22,82,159,128,156,128,147,128,188,128,10,103,189,128,177,128,171,128,173,128,180,128,183,128,231,128,232,128,233,128,234,128,219,128,194,128,196,128,217,128,205,128,215,128,16,103,221,128,235,128,241,128,244,128,237,128,13,129,14,129,242,128,252,128,21,103,18,129,90,140,54,129,30,129,44,129,24,129,50,129,72,129,76,129,83,129,116,129,89,129,90,129,113,129,96,129,105,129,124,129,125,129,109,129,103,129,77,88,181,90,136,129,130,129,145,129,213,110,163,129,170,129,204,129,38,103,202,129,187,129,33,151,34,151,35,151,36,151,37,151,38,151,39,151,40,151,41,151,43,151,44,151,46,151,47,151,49,151,51,151,52,151,53,151,54,151,55,151,58,151,59,151,60,151,61,151,63,151,64,151,65,151,66,151,67,151,68,151,69,151,70,151,71,151,72,151,73,151,74,151,75,151,76,151,77,151,78,151,79,151,80,151,81,151,84,151,85,151,87,151,88,151,90,151,92,151,93,151,95,151,99,151,100,151,102,151,103,151,104,151,106,151,107,151,108,151,109,151,110,151,111,151,112,151,113,151,114,151,117,151,119,151,120,151,121,151,122,151,123,151,125,151,126,151,127,151,128,151,129,151,130,151,131,151,132,151,134,151,135,151,136,151,137,151,138,151,140,151,142,151,143,151,144,151,147,151,149,151,150,151,151,151,153,151,154,151,155,151,156,151,157,151,193,129,166,129,36,107,55,107,57,107,67,107,70,107,89,107,209,152,210,152,211,152,213,152,217,152,218,152,179,107,64,95,194,107,243,137,144,101,81,159,147,101,188,101,198,101,196,101,195,101,204,101,206,101,210,101,214,101,128,112,156,112,150,112,157,112,187,112,192,112,183,112,171,112,177,112,232,112,202,112,16,113,19,113,22,113,47,113,49,113,115,113,92,113,104,113,69,113,114,113,74,113,120,113,122,113,152,113,179,113,181,113,168,113,160,113,224,113,212,113,231,113,249,113,29,114,40,114,108,112,24,113,102,113,185,113,62,98,61,98,67,98,72,98,73,98,59,121,64,121,70,121,73,121,91,121,92,121,83,121,90,121,98,121,87,121,96,121,111,121,103,121,122,121,133,121,138,121,154,121,167,121,179,121,209,95,208,95,158,151,159,151,161,151,162,151,164,151,165,151,166,151,167,151,168,151,169,151,170,151,172,151,174,151,176,151,177,151,179,151,181,151,182,151,183,151,184,151,185,151,186,151,187,151,188,151,189,151,190,151,191,151,192,151,193,151,194,151,195,151,196,151,197,151,198,151,199,151,200,151,201,151,202,151,203,151,204,151,205,151,206,151,207,151,208,151,209,151,210,151,211,151,212,151,213,151,214,151,215,151,216,151,217,151,218,151,219,151,220,151,221,151,222,151,223,151,224,151,225,151,226,151,227,151,228,151,229,151,232,151,238,151,239,151,240,151,241,151,242,151,244,151,247,151,248,151,249,151,250,151,251,151,252,151,253,151,254,151,255,151,0,152,1,152,2,152,3,152,4,152,5,152,6,152,7,152,8,152,9,152,10,152,11,152,12,152,13,152,14,152,60,96,93,96,90,96,103,96,65,96,89,96,99,96,171,96,6,97,13,97,93,97,169,97,157,97,203,97,209,97,6,98,128,128,127,128,147,108,246,108,252,109,246,119,248,119,0,120,9,120,23,120,24,120,17,120,171,101,45,120,28,120,29,120,57,120,58,120,59,120,31,120,60,120,37,120,44,120,35,120,41,120,78,120,109,120,86,120,87,120,38,120,80,120,71,120,76,120,106,120,155,120,147,120,154,120,135,120,156,120,161,120,163,120,178,120,185,120,165,120,212,120,217,120,201,120,236,120,242,120,5,121,244,120,19,121,36,121,30,121,52,121,155,159,249,158,251,158,252,158,241,118,4,119,13,119,249,118,7,119,8,119,26,119,34,119,25,119,45,119,38,119,53,119,56,119,80,119,81,119,71,119,67,119,90,119,104,119,15,152,16,152,17,152,18,152,19,152,20,152,21,152,22,152,23,152,24,152,25,152,26,152,27,152,28,152,29,152,30,152,31,152,32,152,33,152,34,152,35,152,36,152,37,152,38,152,39,152,40,152,41,152,42,152,43,152,44,152,45,152,46,152,47,152,48,152,49,152,50,152,51,152,52,152,53,152,54,152,55,152,56,152,57,152,58,152,59,152,60,152,61,152,62,152,63,152,64,152,65,152,66,152,67,152,68,152,69,152,70,152,71,152,72,152,73,152,74,152,75,152,76,152,77,152,78,152,79,152,80,152,81,152,82,152,83,152,84,152,85,152,86,152,87,152,88,152,89,152,90,152,91,152,92,152,93,152,94,152,95,152,96,152,97,152,98,152,99,152,100,152,101,152,102,152,103,152,104,152,105,152,106,152,107,152,108,152,109,152,110,152,98,119,101,119,127,119,141,119,125,119,128,119,140,119,145,119,159,119,160,119,176,119,181,119,189,119,58,117,64,117,78,117,75,117,72,117,91,117,114,117,121,117,131,117,88,127,97,127,95,127,72,138,104,127,116,127,113,127,121,127,129,127,126,127,205,118,229,118,50,136,133,148,134,148,135,148,139,148,138,148,140,148,141,148,143,148,144,148,148,148,151,148,149,148,154,148,155,148,156,148,163,148,164,148,171,148,170,148,173,148,172,148,175,148,176,148,178,148,180,148,182,148,183,148,184,148,185,148,186,148,188,148,189,148,191,148,196,148,200,148,201,148,202,148,203,148,204,148,205,148,206,148,208,148,209,148,210,148,213,148,214,148,215,148,217,148,216,148,219,148,222,148,223,148,224,148,226,148,228,148,229,148,231,148,232,148,234,148,111,152,112,152,113,152,114,152,115,152,116,152,139,152,142,152,146,152,149,152,153,152,163,152,168,152,169,152,170,152,171,152,172,152,173,152,174,152,175,152,176,152,177,152,178,152,179,152,180,152,181,152,182,152,183,152,184,152,185,152,186,152,187,152,188,152,189,152,190,152,191,152,192,152,193,152,194,152,195,152,196,152,197,152,198,152,199,152,200,152,201,152,202,152,203,152,204,152,205,152,207,152,208,152,212,152,214,152,215,152,219,152,220,152,221,152,224,152,225,152,226,152,227,152,228,152,229,152,230,152,233,152,234,152,235,152,236,152,237,152,238,152,239,152,240,152,241,152,242,152,243,152,244,152,245,152,246,152,247,152,248,152,249,152,250,152,251,152,252,152,253,152,254,152,255,152,0,153,1,153,2,153,3,153,4,153,5,153,6,153,7,153,233,148,235,148,238,148,239,148,243,148,244,148,245,148,247,148,249,148,252,148,253,148,255,148,3,149,2,149,6,149,7,149,9,149,10,149,13,149,14,149,15,149,18,149,19,149,20,149,21,149,22,149,24,149,27,149,29,149,30,149,31,149,34,149,42,149,43,149,41,149,44,149,49,149,50,149,52,149,54,149,55,149,56,149,60,149,62,149,63,149,66,149,53,149,68,149,69,149,70,149,73,149,76,149,78,149,79,149,82,149,83,149,84,149,86,149,87,149,88,149,89,149,91,149,94,149,95,149,93,149,97,149,98,149,100,149,101,149,102,149,103,149,104,149,105,149,106,149,107,149,108,149,111,149,113,149,114,149,115,149,58,149,231,119,236,119,201,150,213,121,237,121,227,121,235,121,6,122,71,93,3,122,2,122,30,122,20,122,8,153,9,153,10,153,11,153,12,153,14,153,15,153,17,153,18,153,19,153,20,153,21,153,22,153,23,153,24,153,25,153,26,153,27,153,28,153,29,153,30,153,31,153,32,153,33,153,34,153,35,153,36,153,37,153,38,153,39,153,40,153,41,153,42,153,43,153,44,153,45,153,47,153,48,153,49,153,50,153,51,153,52,153,53,153,54,153,55,153,56,153,57,153,58,153,59,153,60,153,61,153,62,153,63,153,64,153,65,153,66,153,67,153,68,153,69,153,70,153,71,153,72,153,73,153,74,153,75,153,76,153,77,153,78,153,79,153,80,153,81,153,82,153,83,153,86,153,87,153,88,153,89,153,90,153,91,153,92,153,93,153,94,153,95,153,96,153,97,153,98,153,100,153,102,153,115,153,120,153,121,153,123,153,126,153,130,153,131,153,137,153,57,122,55,122,81,122,207,158,165,153,112,122,136,118,142,118,147,118,153,118,164,118,222,116,224,116,44,117,32,158,34,158,40,158,41,158,42,158,43,158,44,158,50,158,49,158,54,158,56,158,55,158,57,158,58,158,62,158,65,158,66,158,68,158,70,158,71,158,72,158,73,158,75,158,76,158,78,158,81,158,85,158,87,158,90,158,91,158,92,158,94,158,99,158,102,158,103,158,104,158,105,158,106,158,107,158,108,158,113,158,109,158,115,158,146,117,148,117,150,117,160,117,157,117,172,117,163,117,179,117,180,117,184,117,196,117,177,117,176,117,195,117,194,117,214,117,205,117,227,117,232,117,230,117,228,117,235,117,231,117,3,118,241,117,252,117,255,117,16,118,0,118,5,118,12,118,23,118,10,118,37,118,24,118,21,118,25,118,140,153,142,153,154,153,155,153,156,153,157,153,158,153,159,153,160,153,161,153,162,153,163,153,164,153,166,153,167,153,169,153,170,153,171,153,172,153,173,153,174,153,175,153,176,153,177,153,178,153,179,153,180,153,181,153,182,153,183,153,184,153,185,153,186,153,187,153,188,153,189,153,190,153,191,153,192,153,193,153,194,153,195,153,196,153,197,153,198,153,199,153,200,153,201,153,202,153,203,153,204,153,205,153,206,153,207,153,208,153,209,153,210,153,211,153,212,153,213,153,214,153,215,153,216,153,217,153,218,153,219,153,220,153,221,153,222,153,223,153,224,153,225,153,226,153,227,153,228,153,229,153,230,153,231,153,232,153,233,153,234,153,235,153,236,153,237,153,238,153,239,153,240,153,241,153,242,153,243,153,244,153,245,153,246,153,247,153,248,153,249,153,27,118,60,118,34,118,32,118,64,118,45,118,48,118,63,118,53,118,67,118,62,118,51,118,77,118,94,118,84,118,92,118,86,118,107,118,111,118,202,127,230,122,120,122,121,122,128,122,134,122,136,122,149,122,166,122,160,122,172,122,168,122,173,122,179,122,100,136,105,136,114,136,125,136,127,136,130,136,162,136,198,136,183,136,188,136,201,136,226,136,206,136,227,136,229,136,241,136,26,137,252,136,232,136,254,136,240,136,33,137,25,137,19,137,27,137,10,137,52,137,43,137,54,137,65,137,102,137,123,137,139,117,229,128,178,118,180,118,220,119,18,128,20,128,22,128,28,128,32,128,34,128,37,128,38,128,39,128,41,128,40,128,49,128,11,128,53,128,67,128,70,128,77,128,82,128,105,128,113,128,131,137,120,152,128,152,131,152,250,153,251,153,252,153,253,153,254,153,255,153,0,154,1,154,2,154,3,154,4,154,5,154,6,154,7,154,8,154,9,154,10,154,11,154,12,154,13,154,14,154,15,154,16,154,17,154,18,154,19,154,20,154,21,154,22,154,23,154,24,154,25,154,26,154,27,154,28,154,29,154,30,154,31,154,32,154,33,154,34,154,35,154,36,154,37,154,38,154,39,154,40,154,41,154,42,154,43,154,44,154,45,154,46,154,47,154,48,154,49,154,50,154,51,154,52,154,53,154,54,154,55,154,56,154,57,154,58,154,59,154,60,154,61,154,62,154,63,154,64,154,65,154,66,154,67,154,68,154,69,154,70,154,71,154,72,154,73,154,74,154,75,154,76,154,77,154,78,154,79,154,80,154,81,154,82,154,83,154,84,154,85,154,86,154,87,154,88,154,89,154,137,152,140,152,141,152,143,152,148,152,154,152,155,152,158,152,159,152,161,152,162,152,165,152,166,152,77,134,84,134,108,134,110,134,127,134,122,134,124,134,123,134,168,134,141,134,139,134,172,134,157,134,167,134,163,134,170,134,147,134,169,134,182,134,196,134,181,134,206,134,176,134,186,134,177,134,175,134,201,134,207,134,180,134,233,134,241,134,242,134,237,134,243,134,208,134,19,135,222,134,244,134,223,134,216,134,209,134,3,135,7,135,248,134,8,135,10,135,13,135,9,135,35,135,59,135,30,135,37,135,46,135,26,135,62,135,72,135,52,135,49,135,41,135,55,135,63,135,130,135,34,135,125,135,126,135,123,135,96,135,112,135,76,135,110,135,139,135,83,135,99,135,124,135,100,135,89,135,101,135,147,135,175,135,168,135,210,135,90,154,91,154,92,154,93,154,94,154,95,154,96,154,97,154,98,154,99,154,100,154,101,154,102,154,103,154,104,154,105,154,106,154,107,154,114,154,131,154,137,154,141,154,142,154,148,154,149,154,153,154,166,154,169,154,170,154,171,154,172,154,173,154,174,154,175,154,178,154,179,154,180,154,181,154,185,154,187,154,189,154,190,154,191,154,195,154,196,154,198,154,199,154,200,154,201,154,202,154,205,154,206,154,207,154,208,154,210,154,212,154,213,154,214,154,215,154,217,154,218,154,219,154,220,154,221,154,222,154,224,154,226,154,227,154,228,154,229,154,231,154,232,154,233,154,234,154,236,154,238,154,240,154,241,154,242,154,243,154,244,154,245,154,246,154,247,154,248,154,250,154,252,154,253,154,254,154,255,154,0,155,1,155,2,155,4,155,5,155,6,155,198,135,136,135,133,135,173,135,151,135,131,135,171,135,229,135,172,135,181,135,179,135,203,135,211,135,189,135,209,135,192,135,202,135,219,135,234,135,224,135,238,135,22,136,19,136,254,135,10,136,27,136,33,136,57,136,60,136,54,127,66,127,68,127,69,127,16,130,250,122,253,122,8,123,3,123,4,123,21,123,10,123,43,123,15,123,71,123,56,123,42,123,25,123,46,123,49,123,32,123,37,123,36,123,51,123,62,123,30,123,88,123,90,123,69,123,117,123,76,123,93,123,96,123,110,123,123,123,98,123,114,123,113,123,144,123,166,123,167,123,184,123,172,123,157,123,168,123,133,123,170,123,156,123,162,123,171,123,180,123,209,123,193,123,204,123,221,123,218,123,229,123,230,123,234,123,12,124,254,123,252,123,15,124,22,124,11,124,7,155,9,155,10,155,11,155,12,155,13,155,14,155,16,155,17,155,18,155,20,155,21,155,22,155,23,155,24,155,25,155,26,155,27,155,28,155,29,155,30,155,32,155,33,155,34,155,36,155,37,155,38,155,39,155,40,155,41,155,42,155,43,155,44,155,45,155,46,155,48,155,49,155,51,155,52,155,53,155,54,155,55,155,56,155,57,155,58,155,61,155,62,155,63,155,64,155,70,155,74,155,75,155,76,155,78,155,80,155,82,155,83,155,85,155,86,155,87,155,88,155,89,155,90,155,91,155,92,155,93,155,94,155,95,155,96,155,97,155,98,155,99,155,100,155,101,155,102,155,103,155,104,155,105,155,106,155,107,155,108,155,109,155,110,155,111,155,112,155,113,155,114,155,115,155,116,155,117,155,118,155,119,155,120,155,121,155,122,155,123,155,31,124,42,124,38,124,56,124,65,124,64,124,254,129,1,130,2,130,4,130,236,129,68,136,33,130,34,130,35,130,45,130,47,130,40,130,43,130,56,130,59,130,51,130,52,130,62,130,68,130,73,130,75,130,79,130,90,130,95,130,104,130,126,136,133,136,136,136,216,136,223,136,94,137,157,127,159,127,167,127,175,127,176,127,178,127,124,124,73,101,145,124,157,124,156,124,158,124,162,124,178,124,188,124,189,124,193,124,199,124,204,124,205,124,200,124,197,124,215,124,232,124,110,130,168,102,191,127,206,127,213,127,229,127,225,127,230,127,233,127,238,127,243,127,248,124,119,125,166,125,174,125,71,126,155,126,184,158,180,158,115,141,132,141,148,141,145,141,177,141,103,141,109,141,71,140,73,140,74,145,80,145,78,145,79,145,100,145,124,155,125,155,126,155,127,155,128,155,129,155,130,155,131,155,132,155,133,155,134,155,135,155,136,155,137,155,138,155,139,155,140,155,141,155,142,155,143,155,144,155,145,155,146,155,147,155,148,155,149,155,150,155,151,155,152,155,153,155,154,155,155,155,156,155,157,155,158,155,159,155,160,155,161,155,162,155,163,155,164,155,165,155,166,155,167,155,168,155,169,155,170,155,171,155,172,155,173,155,174,155,175,155,176,155,177,155,178,155,179,155,180,155,181,155,182,155,183,155,184,155,185,155,186,155,187,155,188,155,189,155,190,155,191,155,192,155,193,155,194,155,195,155,196,155,197,155,198,155,199,155,200,155,201,155,202,155,203,155,204,155,205,155,206,155,207,155,208,155,209,155,210,155,211,155,212,155,213,155,214,155,215,155,216,155,217,155,218,155,219,155,98,145,97,145,112,145,105,145,111,145,125,145,126,145,114,145,116,145,121,145,140,145,133,145,144,145,141,145,145,145,162,145,163,145,170,145,173,145,174,145,175,145,181,145,180,145,186,145,85,140,126,158,184,141,235,141,5,142,89,142,105,142,181,141,191,141,188,141,186,141,196,141,214,141,215,141,218,141,222,141,206,141,207,141,219,141,198,141,236,141,247,141,248,141,227,141,249,141,251,141,228,141,9,142,253,141,20,142,29,142,31,142,44,142,46,142,35,142,47,142,58,142,64,142,57,142,53,142,61,142,49,142,73,142,65,142,66,142,81,142,82,142,74,142,112,142,118,142,124,142,111,142,116,142,133,142,143,142,148,142,144,142,156,142,158,142,120,140,130,140,138,140,133,140,152,140,148,140,155,101,214,137,222,137,218,137,220,137,220,155,221,155,222,155,223,155,224,155,225,155,226,155,227,155,228,155,229,155,230,155,231,155,232,155,233,155,234,155,235,155,236,155,237,155,238,155,239,155,240,155,241,155,242,155,243,155,244,155,245,155,246,155,247,155,248,155,249,155,250,155,251,155,252,155,253,155,254,155,255,155,0,156,1,156,2,156,3,156,4,156,5,156,6,156,7,156,8,156,9,156,10,156,11,156,12,156,13,156,14,156,15,156,16,156,17,156,18,156,19,156,20,156,21,156,22,156,23,156,24,156,25,156,26,156,27,156,28,156,29,156,30,156,31,156,32,156,33,156,34,156,35,156,36,156,37,156,38,156,39,156,40,156,41,156,42,156,43,156,44,156,45,156,46,156,47,156,48,156,49,156,50,156,51,156,52,156,53,156,54,156,55,156,56,156,57,156,58,156,59,156,229,137,235,137,239,137,62,138,38,139,83,151,233,150,243,150,239,150,6,151,1,151,8,151,15,151,14,151,42,151,45,151,48,151,62,151,128,159,131,159,133,159,134,159,135,159,136,159,137,159,138,159,140,159,254,158,11,159,13,159,185,150,188,150,189,150,206,150,210,150,191,119,224,150,142,146,174,146,200,146,62,147,106,147,202,147,143,147,62,148,107,148,127,156,130,156,133,156,134,156,135,156,136,156,35,122,139,156,142,156,144,156,145,156,146,156,148,156,149,156,154,156,155,156,158,156,159,156,160,156,161,156,162,156,163,156,165,156,166,156,167,156,168,156,169,156,171,156,173,156,174,156,176,156,177,156,178,156,179,156,180,156,181,156,182,156,183,156,186,156,187,156,188,156,189,156,196,156,197,156,198,156,199,156,202,156,203,156,60,156,61,156,62,156,63,156,64,156,65,156,66,156,67,156,68,156,69,156,70,156,71,156,72,156,73,156,74,156,75,156,76,156,77,156,78,156,79,156,80,156,81,156,82,156,83,156,84,156,85,156,86,156,87,156,88,156,89,156,90,156,91,156,92,156,93,156,94,156,95,156,96,156,97,156,98,156,99,156,100,156,101,156,102,156,103,156,104,156,105,156,106,156,107,156,108,156,109,156,110,156,111,156,112,156,113,156,114,156,115,156,116,156,117,156,118,156,119,156,120,156,121,156,122,156,123,156,125,156,126,156,128,156,131,156,132,156,137,156,138,156,140,156,143,156,147,156,150,156,151,156,152,156,153,156,157,156,170,156,172,156,175,156,185,156,190,156,191,156,192,156,193,156,194,156,200,156,201,156,209,156,210,156,218,156,219,156,224,156,225,156,204,156,205,156,206,156,207,156,208,156,211,156,212,156,213,156,215,156,216,156,217,156,220,156,221,156,223,156,226,156,124,151,133,151,145,151,146,151,148,151,175,151,171,151,163,151,178,151,180,151,177,154,176,154,183,154,88,158,182,154,186,154,188,154,193,154,192,154,197,154,194,154,203,154,204,154,209,154,69,155,67,155,71,155,73,155,72,155,77,155,81,155,232,152,13,153,46,153,85,153,84,153,223,154,225,154,230,154,239,154,235,154,251,154,237,154,249,154,8,155,15,155,19,155,31,155,35,155,189,158,190,158,59,126,130,158,135,158,136,158,139,158,146,158,214,147,157,158,159,158,219,158,220,158,221,158,224,158,223,158,226,158,233,158,231,158,229,158,234,158,239,158,34,159,44,159,47,159,57,159,55,159,61,159,62,159,68,159,227,156,228,156,229,156,230,156,231,156,232,156,233,156,234,156,235,156,236,156,237,156,238,156,239,156,240,156,241,156,242,156,243,156,244,156,245,156,246,156,247,156,248,156,249,156,250,156,251,156,252,156,253,156,254,156,255,156,0,157,1,157,2,157,3,157,4,157,5,157,6,157,7,157,8,157,9,157,10,157,11,157,12,157,13,157,14,157,15,157,16,157,17,157,18,157,19,157,20,157,21,157,22,157,23,157,24,157,25,157,26,157,27,157,28,157,29,157,30,157,31,157,32,157,33,157,34,157,35,157,36,157,37,157,38,157,39,157,40,157,41,157,42,157,43,157,44,157,45,157,46,157,47,157,48,157,49,157,50,157,51,157,52,157,53,157,54,157,55,157,56,157,57,157,58,157,59,157,60,157,61,157,62,157,63,157,64,157,65,157,66,157,52,226,53,226,54,226,55,226,56,226,57,226,58,226,59,226,60,226,61,226,62,226,63,226,64,226,65,226,66,226,67,226,68,226,69,226,70,226,71,226,72,226,73,226,74,226,75,226,76,226,77,226,78,226,79,226,80,226,81,226,82,226,83,226,84,226,85,226,86,226,87,226,88,226,89,226,90,226,91,226,92,226,93,226,94,226,95,226,96,226,97,226,98,226,99,226,100,226,101,226,102,226,103,226,104,226,105,226,106,226,107,226,108,226,109,226,110,226,111,226,112,226,113,226,114,226,115,226,116,226,117,226,118,226,119,226,120,226,121,226,122,226,123,226,124,226,125,226,126,226,127,226,128,226,129,226,130,226,131,226,132,226,133,226,134,226,135,226,136,226,137,226,138,226,139,226,140,226,141,226,142,226,143,226,144,226,145,226,67,157,68,157,69,157,70,157,71,157,72,157,73,157,74,157,75,157,76,157,77,157,78,157,79,157,80,157,81,157,82,157,83,157,84,157,85,157,86,157,87,157,88,157,89,157,90,157,91,157,92,157,93,157,94,157,95,157,96,157,97,157,98,157,99,157,100,157,101,157,102,157,103,157,104,157,105,157,106,157,107,157,108,157,109,157,110,157,111,157,112,157,113,157,114,157,115,157,116,157,117,157,118,157,119,157,120,157,121,157,122,157,123,157,124,157,125,157,126,157,127,157,128,157,129,157,130,157,131,157,132,157,133,157,134,157,135,157,136,157,137,157,138,157,139,157,140,157,141,157,142,157,143,157,144,157,145,157,146,157,147,157,148,157,149,157,150,157,151,157,152,157,153,157,154,157,155,157,156,157,157,157,158,157,159,157,160,157,161,157,162,157,146,226,147,226,148,226,149,226,150,226,151,226,152,226,153,226,154,226,155,226,156,226,157,226,158,226,159,226,160,226,161,226,162,226,163,226,164,226,165,226,166,226,167,226,168,226,169,226,170,226,171,226,172,226,173,226,174,226,175,226,176,226,177,226,178,226,179,226,180,226,181,226,182,226,183,226,184,226,185,226,186,226,187,226,188,226,189,226,190,226,191,226,192,226,193,226,194,226,195,226,196,226,197,226,198,226,199,226,200,226,201,226,202,226,203,226,204,226,205,226,206,226,207,226,208,226,209,226,210,226,211,226,212,226,213,226,214,226,215,226,216,226,217,226,218,226,219,226,220,226,221,226,222,226,223,226,224,226,225,226,226,226,227,226,228,226,229,226,230,226,231,226,232,226,233,226,234,226,235,226,236,226,237,226,238,226,239,226,163,157,164,157,165,157,166,157,167,157,168,157,169,157,170,157,171,157,172,157,173,157,174,157,175,157,176,157,177,157,178,157,179,157,180,157,181,157,182,157,183,157,184,157,185,157,186,157,187,157,188,157,189,157,190,157,191,157,192,157,193,157,194,157,195,157,196,157,197,157,198,157,199,157,200,157,201,157,202,157,203,157,204,157,205,157,206,157,207,157,208,157,209,157,210,157,211,157,212,157,213,157,214,157,215,157,216,157,217,157,218,157,219,157,220,157,221,157,222,157,223,157,224,157,225,157,226,157,227,157,228,157,229,157,230,157,231,157,232,157,233,157,234,157,235,157,236,157,237,157,238,157,239,157,240,157,241,157,242,157,243,157,244,157,245,157,246,157,247,157,248,157,249,157,250,157,251,157,252,157,253,157,254,157,255,157,0,158,1,158,2,158,240,226,241,226,242,226,243,226,244,226,245,226,246,226,247,226,248,226,249,226,250,226,251,226,252,226,253,226,254,226,255,226,0,227,1,227,2,227,3,227,4,227,5,227,6,227,7,227,8,227,9,227,10,227,11,227,12,227,13,227,14,227,15,227,16,227,17,227,18,227,19,227,20,227,21,227,22,227,23,227,24,227,25,227,26,227,27,227,28,227,29,227,30,227,31,227,32,227,33,227,34,227,35,227,36,227,37,227,38,227,39,227,40,227,41,227,42,227,43,227,44,227,45,227,46,227,47,227,48,227,49,227,50,227,51,227,52,227,53,227,54,227,55,227,56,227,57,227,58,227,59,227,60,227,61,227,62,227,63,227,64,227,65,227,66,227,67,227,68,227,69,227,70,227,71,227,72,227,73,227,74,227,75,227,76,227,77,227,3,158,4,158,5,158,6,158,7,158,8,158,9,158,10,158,11,158,12,158,13,158,14,158,15,158,16,158,17,158,18,158,19,158,20,158,21,158,22,158,23,158,24,158,25,158,26,158,27,158,28,158,29,158,30,158,36,158,39,158,46,158,48,158,52,158,59,158,60,158,64,158,77,158,80,158,82,158,83,158,84,158,86,158,89,158,93,158,95,158,96,158,97,158,98,158,101,158,110,158,111,158,114,158,116,158,117,158,118,158,119,158,120,158,121,158,122,158,123,158,124,158,125,158,128,158,129,158,131,158,132,158,133,158,134,158,137,158,138,158,140,158,141,158,142,158,143,158,144,158,145,158,148,158,149,158,150,158,151,158,152,158,153,158,154,158,155,158,156,158,158,158,160,158,161,158,162,158,163,158,164,158,165,158,167,158,168,158,169,158,170,158,78,227,79,227,80,227,81,227,82,227,83,227,84,227,85,227,86,227,87,227,88,227,89,227,90,227,91,227,92,227,93,227,94,227,95,227,96,227,97,227,98,227,99,227,100,227,101,227,102,227,103,227,104,227,105,227,106,227,107,227,108,227,109,227,110,227,111,227,112,227,113,227,114,227,115,227,116,227,117,227,118,227,119,227,120,227,121,227,122,227,123,227,124,227,125,227,126,227,127,227,128,227,129,227,130,227,131,227,132,227,133,227,134,227,135,227,136,227,137,227,138,227,139,227,140,227,141,227,142,227,143,227,144,227,145,227,146,227,147,227,148,227,149,227,150,227,151,227,152,227,153,227,154,227,155,227,156,227,157,227,158,227,159,227,160,227,161,227,162,227,163,227,164,227,165,227,166,227,167,227,168,227,169,227,170,227,171,227,171,158,172,158,173,158,174,158,175,158,176,158,177,158,178,158,179,158,181,158,182,158,183,158,185,158,186,158,188,158,191,158,192,158,193,158,194,158,195,158,197,158,198,158,199,158,200,158,202,158,203,158,204,158,208,158,210,158,211,158,213,158,214,158,215,158,217,158,218,158,222,158,225,158,227,158,228,158,230,158,232,158,235,158,236,158,237,158,238,158,240,158,241,158,242,158,243,158,244,158,245,158,246,158,247,158,248,158,250,158,253,158,255,158,0,159,1,159,2,159,3,159,4,159,5,159,6,159,7,159,8,159,9,159,10,159,12,159,15,159,17,159,18,159,20,159,21,159,22,159,24,159,26,159,27,159,28,159,29,159,30,159,31,159,33,159,35,159,36,159,37,159,38,159,39,159,40,159,41,159,42,159,43,159,45,159,46,159,48,159,49,159,172,227,173,227,174,227,175,227,176,227,177,227,178,227,179,227,180,227,181,227,182,227,183,227,184,227,185,227,186,227,187,227,188,227,189,227,190,227,191,227,192,227,193,227,194,227,195,227,196,227,197,227,198,227,199,227,200,227,201,227,202,227,203,227,204,227,205,227,206,227,207,227,208,227,209,227,210,227,211,227,212,227,213,227,214,227,215,227,216,227,217,227,218,227,219,227,220,227,221,227,222,227,223,227,224,227,225,227,226,227,227,227,228,227,229,227,230,227,231,227,232,227,233,227,234,227,235,227,236,227,237,227,238,227,239,227,240,227,241,227,242,227,243,227,244,227,245,227,246,227,247,227,248,227,249,227,250,227,251,227,252,227,253,227,254,227,255,227,0,228,1,228,2,228,3,228,4,228,5,228,6,228,7,228,8,228,9,228,50,159,51,159,52,159,53,159,54,159,56,159,58,159,60,159,63,159,64,159,65,159,66,159,67,159,69,159,70,159,71,159,72,159,73,159,74,159,75,159,76,159,77,159,78,159,79,159,82,159,83,159,84,159,85,159,86,159,87,159,88,159,89,159,90,159,91,159,92,159,93,159,94,159,95,159,96,159,97,159,98,159,99,159,100,159,101,159,102,159,103,159,104,159,105,159,106,159,107,159,108,159,109,159,110,159,111,159,112,159,113,159,114,159,115,159,116,159,117,159,118,159,119,159,120,159,121,159,122,159,123,159,124,159,125,159,126,159,129,159,130,159,141,159,142,159,143,159,144,159,145,159,146,159,147,159,148,159,149,159,150,159,151,159,152,159,156,159,157,159,158,159,161,159,162,159,163,159,164,159,165,159,44,249,121,249,149,249,231,249,241,249,10,228,11,228,12,228,13,228,14,228,15,228,16,228,17,228,18,228,19,228,20,228,21,228,22,228,23,228,24,228,25,228,26,228,27,228,28,228,29,228,30,228,31,228,32,228,33,228,34,228,35,228,36,228,37,228,38,228,39,228,40,228,41,228,42,228,43,228,44,228,45,228,46,228,47,228,48,228,49,228,50,228,51,228,52,228,53,228,54,228,55,228,56,228,57,228,58,228,59,228,60,228,61,228,62,228,63,228,64,228,65,228,66,228,67,228,68,228,69,228,70,228,71,228,72,228,73,228,74,228,75,228,76,228,77,228,78,228,79,228,80,228,81,228,82,228,83,228,84,228,85,228,86,228,87,228,88,228,89,228,90,228,91,228,92,228,93,228,94,228,95,228,96,228,97,228,98,228,99,228,100,228,101,228,102,228,103,228,12,250,13,250,14,250,15,250,17,250,19,250,20,250,24,250,31,250,32,250,33,250,35,250,36,250,39,250,40,250,41,250,129,46,22,232,23,232,24,232,132,46,115,52,71,52,136,46,139,46,30,232,158,53,26,54,14,54,140,46,151,46,110,57,24,57,38,232,207,57,223,57,115,58,208,57,43,232,44,232,78,59,110,60,224,60,167,46,49,232,50,232,170,46,86,64,95,65,174,46,55,67,179,46,182,46,183,46,59,232,177,67,172,67,187,46,221,67,214,68,97,70,76,70,67,232,35,71,41,71,124,71,141,71,202,46,71,73,122,73,125,73,130,73,131,73,133,73,134,73,159,73,155,73,183,73,182,73,84,232,85,232,163,76,159,76,160,76,161,76,119,76,162,76,19,77,20,77,21,77,22,77,23,77,24,77,25,77,174,77,100,232,104,228,105,228,106,228,107,228,108,228,109,228,110,228,111,228,112,228,113,228,114,228,115,228,116,228,117,228,118,228,119,228,120,228,121,228,122,228,123,228,124,228,125,228,126,228,127,228,128,228,129,228,130,228,131,228,132,228,133,228,134,228,135,228,136,228,137,228,138,228,139,228,140,228,141,228,142,228,143,228,144,228,145,228,146,228,147,228,148,228,149,228,150,228,151,228,152,228,153,228,154,228,155,228,156,228,157,228,158,228,159,228,160,228,161,228,162,228,163,228,164,228,165,228,166,228,167,228,168,228,169,228,170,228,171,228,172,228,173,228,174,228,175,228,176,228,177,228,178,228,179,228,180,228,181,228,182,228,183,228,184,228,185,228,186,228,187,228,188,228,189,228,190,228,191,228,192,228,193,228,194,228,195,228,196,228,197,228,240,67,50,76,3,70,166,69,120,69,103,114,119,77,179,69,177,124,226,76,197,124,149,59,54,71,68,71,71,76,64,76,191,66,23,54,82,115,139,110,210,112,87,76,81,163,79,71,218,69,133,76,108,124,7,77,164,74,161,70,35,107,37,114,84,90,99,26,6,62,97,63,77,102,251,86,0,0,149,125,29,89,185,139,244,61,52,151,239,123,219,91,94,29,164,90,37,54,176,158,209,90,183,91,252,92,110,103,147,133,69,153,97,116,157,116,117,56,83,29,158,54,33,96,236,62,222,88,245,58,252,122,151,159,97,65,13,137,234,49,138,10,94,50,10,67,132,132,150,159,47,148,48,73,19,134,150,88,74,151,24,146,208,121,50,122,96,102,41,106,157,136,76,116,197,123,130,103,44,122,79,82,70,144,230,52,196,115,185,93,198,116,199,159,179,87,47,73,76,84,49,65,142,54,24,88,114,122,101,123,143,139,174,70,136,110,129,65,153,93,174,123,188,36,200,159,193,36,201,36,204,36,201,159,4,133,187,53,180,64,202,159,225,68,255,173,193,98,110,112,203,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,49,193,49,194,49,195,49,196,49,12,1,197,49,209,0,205,0,198,49,199,49,203,0,232,31,200,49,202,0,201,49,202,49,203,49,204,49,14,1,205,49,206,49,0,1,193,0,205,1,192,0,18,1,201,0,26,1,200,0,76,1,211,0,209,1,210,0,0,220,190,30,4,220,192,30,202,0,1,1,225,0,206,1,224,0,81,2,19,1,233,0,27,1,232,0,43,1,237,0,208,1,236,0,77,1,243,0,210,1,242,0,107,1,250,0,212,1,249,0,214,1,216,1,218,1,220,1,252,0,8,220,191,30,12,220,193,30,234,0,97,2,218,35,219,35], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+83404);
	/* memory initializer */ allocate([169,163,69,17,0,0,10,101,0,0,0,0,61,78,221,110,78,157,223,145,0,0,0,0,53,119,145,100,26,79,40,79,168,79,86,81,116,81,156,81,228,81,161,82,168,82,59,83,78,83,209,83,216,83,226,86,240,88,4,89,7,89,50,89,52,89,102,91,158,91,159,91,154,92,134,94,59,96,137,101,254,103,4,104,101,104,78,109,188,112,53,117,164,126,172,126,186,126,199,126,207,126,223,126,6,127,55,127,122,130,207,130,111,131,198,137,190,139,226,139,102,143,103,143,110,143,17,116,252,124,205,125,70,105,201,122,39,82,0,0,0,0,0,0,0,0,140,145,184,120,94,145,188,128,0,0,11,141,246,128,231,9,0,0,0,0,159,128,199,158,205,76,201,157,12,158,62,76,246,157,14,112,10,158,51,161,193,53,0,0,154,110,62,130,25,117,0,0,17,73,108,154,143,154,153,159,135,121,108,132,202,29,208,5,230,42,36,78,129,78,128,78,135,78,191,78,235,78,55,79,76,52,189,79,72,62,3,80,136,80,125,52,147,52,165,52,134,81,5,89,219,81,252,81,5,82,137,78,121,82,144,82,39,83,199,53,169,83,81,53,176,83,83,53,194,83,35,84,109,53,114,53,129,54,147,84,163,84,180,84,185,84,208,84,239,84,24,85,35,85,40,85,152,53,63,85,165,53,191,53,215,85,197,53,132,125,37,85,0,0,66,12,21,13,43,81,144,85,198,44,236,57,65,3,70,142,184,77,229,148,83,64,190,128,122,119,56,44,52,58,213,71,93,129,242,105,234,77,221,100,124,13,180,15,213,12,244,16,141,100,126,142,150,14,11,12,100,15,169,44,86,130,211,68,0,0,70,13,77,154,233,128,244,71,167,78,194,44,178,154,103,58,244,149,237,63,6,53,199,82,212,151,200,120,68,45,110,157,21,152,0,0,217,67,165,96,180,100,227,84,76,45,202,43,119,16,251,57,111,16,218,102,22,103,160,121,234,100,82,80,67,12,104,142,161,33,76,139,49,7,0,0,11,72,169,1,250,63,115,88,141,45,0,0,200,69,252,4,151,96,76,15,150,13,121,85,187,64,186,67,0,0,180,74,102,42,157,16,170,129,245,152,156,13,121,99,254,57,117,39,192,141,161,86,124,100,67,62,0,0,1,166,9,14,207,42,201,44,0,0,200,16,194,57,146,57,6,58,155,130,120,53,73,94,199,32,82,86,49,15,178,44,32,151,188,52,61,108,59,78,0,0,0,0,116,117,139,46,8,34,91,166,205,140,122,14,52,12,28,104,147,127,207,16,3,40,57,41,251,53,227,81,140,14,141,15,170,14,147,63,48,15,71,13,79,17,76,14,0,0,171,14,169,11,72,13,192,16,61,17,249,63,150,38,50,100,173,15,244,51,57,118,206,43,126,13,127,13,81,44,85,44,24,58,152,14,199,16,46,15,50,166,80,107,210,140,153,141,202,140,170,149,204,84,196,130,185,85,0,0,195,158,38,156,182,154,94,119,238,45,64,113,109,129,236,128,28,92,114,101,52,129,151,55,95,83,189,128,182,145,250,14,15,14,119,14,251,14,221,53,235,77,9,54,214,12,175,86,181,39,201,16,16,14,120,14,120,16,72,17,7,130,85,20,121,14,80,78,164,45,84,90,29,16,30,16,245,16,246,16,156,87,17,14,148,118,205,130,181,15,123,14,126,81,3,55,182,15,128,17,216,82,189,162,218,73,58,24,119,65,124,130,153,88,104,82,26,54,61,87,178,123,104,91,0,72,44,75,39,159,231,73,31,156,141,155,116,91,61,49,251,85,242,53,137,86,40,78,2,89,193,27,120,248,81,151,134,0,91,78,187,78,62,53,35,92,81,95,196,95,250,56,76,98,53,101,122,107,53,108,58,108,108,112,43,114,44,78,173,114,233,72,82,127,59,121,249,124,83,127,106,98,193,52,0,0,75,99,2,128,128,128,18,102,81,105,93,83,100,136,193,137,178,120,160,139,29,141,133,148,120,149,127,149,232,149,15,142,230,151,117,152,206,152,222,152,99,153,16,152,124,156,31,158,196,158,111,107,7,249,55,78,135,0,29,150,55,98,162,148,0,0,59,80,254,109,115,156,166,159,201,61,143,136,78,65,119,112,245,92,32,75,205,81,89,53,48,93,34,97,50,138,167,143,246,145,145,113,25,103,186,115,129,50,7,161,139,60,128,25,16,75,228,120,2,116,174,81,15,135,9,64,99,106,186,162,35,66,15,134,111,10,42,122,71,153,234,138,85,151,77,112,36,83,126,32,244,147,217,118,227,137,167,159,221,119,163,78,240,79,188,80,47,78,23,79,168,159,52,84,139,125,146,88,208,88,182,29,146,94,153,94,194,95,18,39,139,101,249,51,25,105,67,106,99,60,255,108,0,0,0,114,5,69,140,115,219,62,19,74,21,91,185,116,131,139,164,92,149,86,147,122,236,123,195,124,108,126,248,130,151,133,169,159,144,136,170,159,185,142,171,159,207,143,95,133,224,153,33,146,172,159,185,141,63,20,113,64,162,66,26,90,0,0,0,0,0,0,104,152,107,103,118,66,61,87,0,0,214,133,123,73,191,130,13,113,129,76,116,109,123,93,21,107,190,111,173,159,174,159,150,91,175,159,231,102,91,126,87,110,202,121,136,61,195,68,86,50,150,39,154,67,54,69,0,0,213,92,26,59,249,138,120,92,18,61,81,53,120,93,178,159,87,113,88,69,236,64,35,30,119,76,120,57,74,52,164,1,65,108,204,138,180,79,57,2,191,89,108,129,86,152,250,152,59,95,159,11,0,0,193,33,109,137,2,65,187,70,121,144,7,63,179,159,181,161,248,64,214,55,247,70,70,108,124,65,178,134,255,115,109,69,212,56,154,84,97,69,27,69,137,77,123,76,118,77,234,69,200,63,15,75,97,54,222,68,189,68,237,65,62,93,72,93,86,93,252,61,15,56,164,93,185,93,32,56,56,56,66,94,189,94,37,95,131,95,8,57,20,57,63,57,77,57,215,96,61,97,229,92,137,57,183,97,185,97,207,97,184,57,44,98,144,98,229,98,24,99,248,57,177,86,3,58,226,99,251,99,7,100,90,100,75,58,192,100,21,93,33,86,159,159,151,58,134,101,189,58,255,101,83,102,242,58,146,102,34,59,22,103,66,59,164,103,0,104,88,59,74,104,132,104,114,59,113,59,123,59,9,105,67,105,92,114,100,105,159,105,133,105,188,59,214,105,221,59,101,106,116,106,113,106,130,106,236,59,153,106,242,59,171,106,181,106,212,106,246,106,129,107,193,107,234,107,117,108,170,108,203,60,2,109,6,109,38,109,129,109,239,60,164,109,177,109,21,110,24,110,41,110,134,110,192,137,187,110,226,110,218,110,127,159,232,110,233,110,36,111,52,111,70,61,65,63,129,111,190,111,106,61,117,61,183,113,153,92,138,61,44,112,145,61,80,112,84,112,111,112,127,112,137,112,37,3,193,67,241,53,216,14,215,62,190,87,211,110,62,113,224,87,78,54,162,105,233,139,116,91,73,122,225,88,217,148,101,122,125,122,172,89,187,122,176,122,194,122,195,122,209,113,141,100,202,65,218,122,221,122,234,122,239,65,178,84,1,92,11,123,85,123,41,123,14,83,254,92,162,123,111,123,156,131,180,91,127,108,208,123,33,132,146,123,0,0,32,93,173,61,101,92,146,132,250,123,0,0,53,124,193,92,68,124,131,124,130,72,166,124,125,102,120,69,201,124,199,124,230,124,116,124,243,124,245,124,0,0,103,126,29,69,68,110,93,125,214,110,141,116,137,125,171,125,53,113,179,125,0,0,87,64,41,96,228,125,19,61,245,125,249,23,229,125,109,131,0,0,33,97,90,97,110,126,146,126,43,67,108,148,39,126,64,127,65,127,71,127,54,121,208,98,225,153,151,127,81,99,163,127,97,22,104,0,92,69,102,55,3,69,58,131,250,127,137,100,0,0,8,128,29,128,0,0,47,128,135,160,195,108,59,128,60,128,97,128,20,39,137,73,38,102,227,61,232,102,37,103,167,128,72,138,7,129,26,129,176,88,246,38,127,108,152,100,184,79,231,100,138,20,24,130,94,24,83,106,101,74,149,74,122,68,41,130,13,11,82,106,126,61,249,79,253,20,226,132,98,131,10,107,167,73,48,53,115,23,248,61,170,130,27,105,148,249,219,65,75,133,208,130,26,131,22,14,180,23,193,54,125,49,90,53,123,130,226,130,24,131,139,62,163,109,5,107,151,107,206,53,191,61,29,131,236,85,133,131,11,69,165,109,172,131,0,0,211,131,126,52,212,110,87,106,90,133,150,52,66,110,239,46,88,132,228,91,113,132,211,61,228,68,167,106,74,132,181,60,88,121,0,0,150,107,119,110,67,110,222,132,0,0,145,131,160,68,147,132,228,132,145,92,64,66,192,92,67,69,52,133,242,90,153,110,39,69,115,133,22,69,191,103,22,134,37,134,59,134,193,133,136,112,2,134,130,21,205,112,178,249,106,69,40,134,72,54,162,24,247,83,154,115,126,134,113,135,248,160,238,135,39,44,177,135,218,135,15,136,97,86,108,134,86,104,15,70,69,136,70,136,224,117,185,61,228,117,94,136,156,136,91,70,180,136,181,136,193,99,197,136,119,119,15,119,135,137,138,137,0,0,0,0,167,137,188,137,37,138,231,137,36,121,189,122,156,138,147,119,254,145,144,138,89,122,233,122,58,123,143,63,19,71,56,123,124,113,12,139,31,139,48,84,101,85,63,139,76,139,77,139,169,138,122,74,144,139,155,139,175,138,223,22,21,70,79,136,155,140,84,125,143,125,212,249,37,55,83,125,214,140,152,125,189,125,18,141,3,141,16,25,219,140,92,112,17,141,201,76,208,62,0,0,169,141,2,128,20,16,138,73,124,59,188,129,12,113,231,122,173,142,182,142,195,142,212,146,25,143,45,143,101,131,18,132,165,143,3,147,159,162,80,10,179,143,42,73,222,137,61,133,187,61,248,94,98,50,249,143,20,160,188,134,1,133,37,35,128,57,215,110,55,144,60,133,190,122,97,144,108,133,11,134,168,144,19,135,196,144,230,134,174,144,0,0,103,145,240,58,169,145,196,145,172,124,51,137,137,30,14,146,159,108,65,146,98,146,185,85,0,0,198,138,155,60,12,139,219,85,49,13,44,147,107,147,225,138,235,139,143,112,195,90,226,138,229,138,101,73,68,146,236,139,57,140,255,139,115,147,91,148,188,142,133,149,166,149,38,148,160,149,246,111,185,66,122,38,216,134,124,18,46,62,223,73,28,108,123,150,150,150,108,65,163,150,213,110,218,97,182,150,245,120,224,138,189,150,204,83,161,73,184,108,116,2,16,100,175,144,229,144,209,74,21,25,10,51,49,151,66,134,54,151,15,74,61,69,133,69,233,74,117,112,65,91,27,151,0,0,213,145,87,151,74,91,235,145,95,151,37,148,208,80,183,48,188,48,137,151,159,151,177,151,190,151,192,151,210,151,224,151,108,84,238,151,28,116,51,148,0,0,245,151,29,148,122,121,209,74,52,152,51,152,75,152,102,152,14,59,117,113,81,61,48,6,92,65,6,87,202,152,183,152,200,152,199,152,255,74,39,109,211,22,176,85,225,152,230,152,236,152,120,147,57,153,41,74,114,75,87,152,5,153,245,153,12,154,59,154,16,154,88,154,37,87,196,54,177,144,213,155,224,154,226,154,5,155,244,154,14,76,20,155,45,155,0,134,52,80,52,155,168,105,195,56,125,48,80,155,64,155,62,157,69,90,99,24,142,155,75,66,2,156,255,155,12,156,104,158,212,157,183,159,146,161,171,161,225,160,35,161,223,161,126,157,131,157,52,161,14,158,136,104,196,157,91,33,147,161,32,162,59,25,51,162,57,157,185,160,180,162,144,158,149,158,158,158,162,158,52,77,170,158,175,158,100,67,193,158,96,59,229,57,29,61,50,79,190,55,43,140,2,159,8,159,150,75,36,148,162,109,23,159,0,0,57,159,159,86,138,86,69,159,184,153,139,144,242,151,127,132,98,159,105,159,220,122,142,159,22,114,190,75,117,73,187,73,119,113,248,73,72,67,81,74,158,115,218,139,250,24,159,121,126,137,54,142,105,147,243,147,68,138,236,146,129,147,203,147,108,137,185,68,23,114,235,62,114,119,67,122,208,112,115,68,248,67,126,113,239,23,163,112,190,24,153,53,199,62,133,24,47,84,248,23,34,55,251,22,57,24,225,54,116,23,209,24,75,95,35,55,192,22,91,87,37,74,254,19,168,18,198,19,182,20,3,133,166,54,0,0,85,132,148,73,101,113,49,62,92,85,251,62,82,112,244,68,238,54,157,153,38,111,249,103,51,55,21,60,231,61,108,88,34,25,16,104,87,64,63,55,225,64,139,64,15,65,33,108,203,84,158,86,177,102,146,86,223,15,168,11,13,14,198,147,19,139,156,147,248,78,43,81,25,56,54,68,188,78,101,4,127,3,75,79,138,79,81,86,104,90,171,1,203,3,153,57,10,3,20,4,53,52,41,79,192,2,179,142,117,2,218,138,12,2,152,78,205,80,13,81,162,79,3,79,14,74,138,62,66,79,46,80,108,80,129,80,204,79,229,79,88,80,252,80,0,0,0,0,0,0,0,0,118,110,149,53,57,62,191,62,114,109,132,24,137,62,168,81,195,81,224,5,221,68,163,4,146,4,145,4,122,141,156,138,14,7,89,82,164,82,115,8,225,82,0,0,122,70,140,113,140,67,32,12,172,73,228,16,209,105,29,14,0,0,222,62,153,116,20,116,86,116,152,115,142,75,188,74,141,64,208,83,132,53,15,114,201,64,180,85,69,3,205,84,198,11,29,87,93,146,244,150,102,147,221,87,141,87,127,87,62,54,203,88,153,90,70,138,250,22,111,23,16,23,44,90,184,89,143,146,126,90,207,90,18,90,70,89,243,25,97,24,149,66,245,54,5,109,67,116,33,90,131,94,129,90,215,139,19,4,224,147,140,116,3,19,5,113,114,73,8,148,251,137,189,147,160,55,30,92,158,92,94,94,72,94,150,25,124,25,238,58,205,94,79,91,3,25,4,25,1,55,160,24,221,54,254,22,211,54,42,129,71,138,186,29,114,52,168,137,12,95,14,95,39,25,171,23,107,90,59,23,68,91,20,134,253,117,96,136,126,96,96,40,43,38,219,95,184,62,175,37,190,37,136,144,115,111,192,97,62,0,70,0,27,38,153,97,152,97,117,96,155,44,7,45,212,70,77,145,113,100,101,70,106,43,41,58,34,43,80,52,234,152,120,46,55,99,91,164,182,100,49,99,209,99,227,73,103,45,164,98,161,44,59,100,107,101,114,105,244,59,142,48,173,50,137,73,171,50,13,85,224,50,217,24,63,148,206,102,137,50,179,49,224,58,144,65,132,85,34,139,143,85,252,22,91,85,37,84,238,120,3,49,42,24,52,50,100,52,15,50,130,49,201,66,142,102,36,109,107,102,147,75,48,102,112,120,235,29,99,102,210,50,225,50,30,102,114,88,209,56,58,56,188,55,153,59,162,55,254,51,208,116,150,59,143,103,42,70,182,104,30,104,196,59,190,106,99,56,213,55,135,68,51,106,82,106,201,106,5,107,18,25,17,101,152,104,76,106,215,59,122,106,87,107,192,63,154,60,160,147,242,146,234,139,203,138,137,146,30,128,220,137,103,148,165,109,11,111,236,73,0,0,127,63,143,61,4,110,60,64,61,90,10,110,71,88,36,109,66,120,59,113,26,67,118,66,241,112,80,114,135,114,148,114,143,71,37,71,121,81,164,74,235,5,122,116,248,62,95,54,74,74,23,73,225,95,6,63,177,62,223,74,35,140,53,63,167,96,243,62,204,116,60,116,135,147,55,116,159,68,234,109,81,69,131,117,99,63,217,76,6,77,88,63,85,117,115,118,198,165,25,59,104,116,204,138,171,73,142,73,251,58,205,61,78,74,255,62,197,73,243,72,250,145,50,87,66,147,227,138,100,24,223,80,33,82,231,81,120,119,50,50,14,119,15,119,123,119,151,70,129,55,94,58,240,72,56,116,155,116,191,62,186,74,199,74,200,64,150,74,174,97,7,147,129,85,30,120,141,120,136,120,210,120,208,115,89,121,65,119,227,86,14,65,0,0,150,132,165,121,45,106,250,62,58,122,244,121,110,65,230,22,50,65,53,146,241,121,76,13,140,73,153,2,186,61,110,23,151,53,107,85,112,53,170,54,212,1,13,12,226,122,89,90,245,38,175,90,156,90,13,90,91,2,240,120,42,90,198,91,254,122,249,65,93,124,109,124,17,66,179,91,188,94,166,94,205,124,249,73,176,23,142,124,124,124,174,124,178,106,220,125,7,126,211,125,78,127,97,98,92,97,72,123,151,125,130,94,106,66,117,107,22,9,214,103,78,0,207,53,196,87,18,100,248,99,98,73,221,127,39,123,44,8,233,90,67,93,12,123,14,94,230,153,69,134,99,154,28,106,63,52,226,57,247,73,173,101,31,154,160,101,128,132,39,113,209,108,234,68,55,129,2,68,198,128,9,129,66,129,180,103,195,152,66,106,98,130,101,130,81,106,83,132,167,109,16,134,27,114,134,90,127,65,64,24,43,91,161,24,228,90,216,24,160,134,188,249,143,61,45,136,34,116,2,90,110,136,69,79,135,136,191,136,230,136,101,137,77,137,131,86,84,137,133,119,132,119,245,139,217,139,156,139,249,137,173,62,163,132,245,70,207,70,242,55,61,138,28,138,72,148,77,95,43,146,132,66,212,101,41,113,196,112,69,24,109,157,159,140,233,140,220,125,154,89,195,119,240,89,110,67,212,54,42,142,167,142,9,76,48,143,74,143,244,66,88,108,187,111,33,35,155,72,121,111,139,110,218,23,233,155,181,54,47,73,187,144,0,0,113,85,6,73,187,145,4,148,75,138,98,64,252,138,39,148,29,140,59,140,229,132,43,138,153,149,167,149,151,149,150,149,52,141,69,116,194,62,255,72,66,74,234,67,231,62,37,50,143,150,231,142,102,142,101,142,204,62,237,73,120,74,238,63,18,116,107,116,252,62,65,151,176,144,71,104,29,74,147,144,223,87,0,0,104,147,137,137,38,140,47,139,190,99,186,146,17,91,105,139,60,73,249,115,27,66,155,151,113,151,56,153,38,15,193,93,197,139,178,74,31,152,218,148,246,146,215,149,229,145,192,68,80,139,103,74,100,139,220,152,69,138,0,63,42,146,37,73,20,132,59,153,77,153,6,123,253,61,155,153,111,75,170,153,92,154,101,139,200,88,143,106,33,154,254,90,47,154,241,152,144,75,72,153,188,153,189,75,151,75,125,147,114,88,2,19,34,88,184,73,232,20,68,120,31,39,184,61,197,104,125,61,88,148,39,57,80,97,129,39,107,41,7,97,79,156,83,156,123,156,53,156,16,156,127,155,207,155,45,158,159,155,245,161,254,160,33,157,174,76,4,65,24,158,176,76,12,157,180,161,237,160,243,160,47,153,165,157,189,132,18,110,223,111,130,107,252,133,51,69,164,109,132,110,240,109,32,132,238,133,0,110,215,55,100,96,226,121,156,53,64,54,45,73,222,73,98,61,219,147,190,146,72,147,191,2,185,120,119,146,77,148,228,79,64,52,100,144,93,85,61,120,84,120,182,120,75,120,87,23,201,49,65,73,154,54,114,79,218,111,217,111,0,0,30,112,20,84,181,65,187,87,243,88,138,87,22,157,215,87,52,113,175,52,172,65,235,113,64,108,151,79,0,0,181,23,73,138,12,97,206,90,11,90,188,66,136,68,44,55,123,75,252,137,187,147,184,147,214,24,29,15,114,132,192,108,19,20,250,66,38,44,193,67,148,89,183,61,65,103,168,125,91,97,164,96,185,73,139,73,250,137,229,146,226,115,233,62,180,116,99,139,159,24,225,62,179,74,216,106,243,115,251,115,214,62,62,74,148,74,217,23,102,74,167,3,36,20,229,73,72,116,22,73,165,112,118,73,132,146,230,115,95,147,254,4,49,147,206,138,22,138,134,147,231,139,213,85,53,73,130,138,107,113,67,73,255,12,164,86,26,6,235,11,184,12,2,85,196,121,250,23,254,125,194,22,80,74,82,24,46,69,1,148,10,55,192,138,173,73,176,89,191,24,131,24,132,116,161,90,226,54,91,61,176,54,95,146,121,90,129,138,98,24,116,147,205,60,180,10,150,74,138,57,244,80,105,61,76,61,156,19,117,113,251,66,24,130,15,110,228,144,235,68,87,109,79,126,103,112,175,108,214,60,237,63,45,62,2,110,12,111,111,61,245,3,81,117,188,54,200,52,128,70,218,62,113,72,196,89,110,146,62,73,65,143,28,140,192,107,18,88,200,87,214,54,82,20,254,112,98,67,113,74,227,47,176,18,189,35,185,104,103,105,152,19,229,52,244,123,223,54,131,138,214,55,250,51,159,76,26,106,173,54,183,108,62,132,223,68,206,68,38,109,81,109,130,108,222,111,23,111,9,113,61,131,58,23,237,131,128,108,83,112,219,23,137,89,130,90,179,23,97,90,113,90,5,25,252,65,45,55,239,89,60,23,199,54,142,113,144,147,154,102,165,66,110,90,43,90,147,66,43,106,249,62,54,119,91,68,202,66,29,113,89,66,225,137,176,79,40,109,194,92,206,68,77,126,189,67,12,106,86,66,4,19,166,112,51,113,233,67,165,61,223,108,37,248,79,74,101,126,235,89,47,93,243,61,92,95,93,74,223,23,164,125,38,132,133,84,250,58,0,51,20,2,126,87,213,8,25,6,229,63,158,31,182,162,3,112,91,145,112,93,143,115,211,124,89,138,32,148,200,79,231,127,205,114,16,115,244,122,56,115,57,115,246,86,65,115,72,115,169,62,24,123,108,144,245,113,242,72,225,115,246,129,202,62,12,119,209,62,162,108,253,86,25,116,30,116,31,116,226,62,240,62,244,62,250,62,211,116,14,63,83,63,66,117,109,117,114,117,141,117,124,63,200,117,220,117,192,63,77,118,215,63,116,118,220,63,122,118,92,79,136,113,35,86,128,137,105,88,29,64,67,119,57,64,97,103,69,64,219,53,152,119,106,64,111,64,94,92,190,119,203,119,242,88,24,120,185,112,28,120,168,64,57,120,71,120,81,120,102,120,72,132,53,85,51,121,3,104,50,121,3,65,9,65,145,121,153,121,187,143,6,122,188,143,103,65,145,122,178,65,188,122,121,130,196,65,207,122,219,122,207,65,33,78,98,123,108,123,123,123,18,124,27,124,96,66,122,66,123,124,156,124,140,66,184,124,148,66,237,124,147,143,192,112,207,12,207,125,212,125,208,125,253,125,174,127,180,127,159,114,151,67,32,128,37,128,57,123,46,128,49,128,84,128,204,61,180,87,160,112,183,128,233,128,237,67,12,129,42,115,14,129,18,129,96,117,20,129,1,68,57,59,86,129,89,129,90,129,19,68,58,88,124,129,132,129,37,68,147,129,45,68,165,129,239,87,193,129,228,129,84,130,143,68,166,130,118,130,202,130,216,130,255,130,176,68,87,131,105,150,138,105,5,132,245,112,100,132,227,96,136,132,4,69,190,132,225,132,248,132,16,133,56,133,82,133,59,69,111,133,112,133,224,133,119,69,114,134,146,134,178,134,239,134,69,150,139,135,6,70,23,70,174,136,255,136,36,137,71,137,145,137,103,121,41,138,56,138,148,138,180,138,81,140,212,140,242,140,28,141,152,71,95,88,195,141,237,71,238,78,58,142,216,85,84,87,113,142,245,85,176,142,55,72,206,142,226,142,228,142,237,142,242,142,183,143,193,143,202,143,204,143,51,144,196,153,173,72,224,152,19,146,30,73,40,146,88,146,107,146,177,146,174,146,191,146,227,146,235,146,243,146,244,146,253,146,67,147,132,147,173,147,69,73,81,73,191,158,23,148,1,83,29,148,45,148,62,148,106,73,84,148,121,148,45,149,162,149,167,73,244,149,51,150,229,73,160,103,36,74,64,151,53,74,178,151,194,151,84,86,228,74,232,96,185,152,25,75,241,152,68,88,14,153,25,153,180,81,28,153,55,153,66,153,93,153,98,153,112,75,197,153,157,75,60,154,15,155,131,122,105,155,129,155,221,155,241,155,244,155,109,76,32,156,111,55,194,27,73,157,58,156,254,158,80,86,147,157,189,157,192,157,252,157,246,148,182,143,123,158,172,158,177,158,189,158,198,158,220,148,226,158,241,158,248,158,200,122,68,159,148,0,183,2,160,3,26,105,195,148,172,89,215,4,64,88,193,148,185,55,213,5,21,6,118,6,186,22,87,87,115,113,194,10,205,10,191,11,106,84,59,248,203,11,158,84,251,11,59,12,83,12,101,12,124,12,231,96,141,12,122,86,181,12,221,12,237,12,111,13,178,13,200,13,85,105,47,156,165,135,4,14,14,14,215,14,144,15,45,15,115,14,32,92,188,15,11,94,92,16,79,16,118,16,30,103,123,16,136,16,150,16,71,54,191,16,211,16,47,17,59,17,100,83,173,132,227,18,117,19,54,19,129,139,119,21,25,22,195,23,199,23,120,78,187,112,45,24,106,25,45,26,69,26,42,28,112,28,172,28,200,30,195,98,213,30,21,31,152,113,85,104,69,32,233,105,200,54,124,34,215,35,250,35,42,39,113,40,79,41,253,130,103,41,147,41,213,42,165,137,232,42,160,143,14,43,184,151,63,43,71,152,189,154,76,44,0,0,136,44,183,44,232,91,8,45,18,45,183,45,149,45,66,46,116,47,204,47,51,48,102,48,31,51,222,51,177,95,72,102,191,102,121,122,103,53,243,53,0,0,186,73,0,0,26,54,22,55,0,0,70,3,181,88,14,103,24,105,167,58,87,118,226,95,17,62,185,62,254,117,154,32,208,72,184,74,25,65,154,138,238,66,13,67,59,64,52,67,150,67,69,74,202,5,210,81,17,6,159,89,168,30,190,59,255,60,4,68,214,68,136,87,116,70,155,57,47,71,232,133,201,153,98,55,195,33,94,139,78,139,0,0,18,72,251,72,21,74,9,114,192,74,120,12,101,89,165,78,134,79,121,7,218,142,44,80,143,82,63,87,113,113,153,82,25,84,74,63,167,74,188,85,70,84,110,84,82,107,0,0,115,52,63,85,50,118,94,85,24,71,98,85,102,85,199,87,63,73,93,88,102,80,251,52,204,51,0,0,3,89,124,71,72,137,174,90,137,91,6,92,144,29,161,87,81,113,0,0,2,97,18,124,86,144,178,97,154,79,98,139,2,100,74,100,91,93,247,107,0,0,132,100,28,25,234,138,246,73,136,100,239,63,18,101,192,75,191,101,181,102,27,39,101,148,225,87,149,97,39,90,205,248,0,0,185,86,33,69,252,102,106,78,52,73,86,150,143,109,189,108,24,54,119,137,153,103,110,104,17,100,94,104,0,0,199,104,66,123,192,144,17,10,38,105,0,0,57,105,69,122,0,0,250,105,38,154,45,106,95,54,105,100,33,0,131,121,52,106,91,107,44,93,25,53,0,0,157,107,208,70,164,108,59,117,101,136,174,109,182,88,28,55,141,37,75,112,205,113,84,60,128,114,133,114,129,146,122,33,139,114,48,147,230,114,208,73,57,108,159,148,80,116,248,14,39,136,245,136,38,41,115,132,177,23,184,110,42,74,32,24,164,57,185,54,0,0,0,0,63,69,182,102,173,156,164,152,67,137,204,119,88,120,214,86,223,64,10,22,161,57,47,55,232,128,197,19,173,113,102,131,221,121,168,145,0,0,183,76,175,112,171,137,253,121,10,122,11,123,102,125,122,65,67,123,126,121,9,128,181,111,223,162,3,106,24,131,162,83,7,110,191,147,54,104,93,151,111,129,35,128,181,105,237,19,47,50,72,128,133,93,48,140,131,128,21,87,35,152,73,137,171,93,136,73,190,101,213,105,210,83,165,74,129,63,17,60,54,103,144,128,244,128,46,129,161,31,79,129,137,129,175,129,26,130,6,131,47,131,138,131,202,53,104,132,170,134,250,72,230,99,86,137,8,120,85,146,184,137,242,67,231,137,223,67,232,137,70,139,212,139,248,89,9,140,0,0,197,143,236,144,0,0,16,145,60,145,247,61,94,145,202,74,208,143,143,114,139,86,231,148,233,149,176,149,184,149,50,151,209,152,73,153,106,153,195,153,40,154,14,155,90,157,155,157,159,126,248,158,35,159,164,76,71,149,147,162,162,113,255,162,145,77,18,144,203,165,156,77,156,12,190,143,193,85,186,143,176,36,185,143,147,74,9,69,127,126,86,111,177,106,234,78,228,52,44,139,157,120,58,55,128,142,245,23,36,128,108,139,153,139,62,122,175,102,235,61,85,118,183,60,53,86,86,89,154,78,129,94,88,98,191,86,109,14,14,142,109,91,136,62,158,76,222,99,0,0,246,23,123,24,48,101,45,86,74,92,26,84,17,83,198,61,152,157,125,76,34,86,30,86,73,127,216,94,117,89,64,61,112,135,28,78,234,15,73,13,186,54,23,129,94,157,24,141,59,118,69,156,78,118,185,119,69,147,50,84,72,129,247,130,37,86,50,129,24,132,189,128,234,85,98,121,67,86,22,84,157,14,206,53,5,86,241,85,241,102,226,130,45,54,52,117,240,85,186,85,151,84,114,85,65,12,150,12,208,94,72,81,118,14,98,44,162,14,171,158,90,125,222,85,117,16,157,98,109,151,148,84,205,140,246,113,118,145,252,99,185,99,254,99,105,85,67,43,114,156,179,46,154,81,223,52,167,13,167,81,77,84,30,85,19,85,102,118,45,142,138,104,177,117,182,128,4,136,134,135,199,136,182,129,28,132,193,16,236,68,4,115,6,71,144,91,11,131,147,104,123,86,244,38,47,125,163,65,115,125,208,110,182,114,112,145,217,17,8,146,252,60,169,166,172,14,249,14,102,114,162,28,78,71,194,79,249,127,235,15,250,64,93,156,31,101,160,45,243,72,224,71,124,157,236,15,10,14,0,0,163,117,237,15,0,0,72,96,135,17,163,113,142,126,80,157,26,78,4,78,119,53,13,91,178,108,103,83,172,54,220,57,125,83,165,54,24,70,154,88,110,75,45,130,75,84,170,87,149,90,121,9,0,0,82,58,101,36,116,115,172,158,9,77,237,155,254,60,48,159,91,76,169,79,158,149,222,159,92,132,182,61,178,114,179,103,32,55,46,99,37,125,247,62,44,62,42,58,8,144,204,82,116,62,122,54,233,69,142,4,64,118,240,90,182,14,122,120,46,127,167,88,191,64,124,86,139,155,116,93,84,118,52,164,133,158,225,76,0,0,251,55,25,97,218,48,242,67,0,0,93,86,169,18,167,87,99,73,6,158,52,82,174,112,173,53,0,0,124,157,86,124,57,155,222,87,108,23,83,92,211,100,208,148,53,99,100,113,173,134,40,13,34,109,226,74,113,13,0,0,254,81,15,31,142,93,3,151,209,29,129,158,76,144,31,123,2,155,209,92,163,123,104,98,53,99,255,154,207,123,42,155,126,124,0,0,66,124,134,124,21,156,252,123,9,155,0,0,27,156,62,73,90,159,115,85,195,91,253,79,152,158,242,79,96,82,6,62,209,82,103,87,86,80,183,89,18,94,200,151,171,157,92,143,105,84,180,151,64,153,186,151,44,83,48,97,44,105,218,83,10,156,2,157,59,76,65,150,128,105,166,80,70,117,109,23,218,153,115,82,0,0,89,145,129,150,92,145,0,0,81,145,151,142,127,99,35,109,202,106,17,86,142,145,122,117,133,98,252,3,79,115,112,124,33,92,253,60,0,0,25,73,214,118,157,155,42,78,212,12,190,131,66,136,0,0,74,92,192,105,0,0,122,87,31,82,245,93,206,78,49,108,242,1,57,79,156,84,218,84,154,82,130,141,254,53,0,0,243,53,0,0,82,107,124,145,165,159,151,155,46,152,180,152,186,154,168,158,132,158,122,113,20,123,0,0,250,107,24,136,120,127,0,0,32,86,74,166,119,142,83,159,0,0,212,141,79,142,28,158,1,142,130,98,125,131,40,142,117,142,211,122,119,74,62,122,216,120,234,108,103,138,7,118,90,138,38,159,206,108,214,135,195,117,178,162,83,120,64,248,12,141,226,114,113,115,45,139,2,115,241,116,235,140,187,74,47,134,186,95,160,136,183,68,0,0,59,24,5,110,0,0,126,138,27,37,0,0,253,96,103,118,215,154,68,157,110,147,143,155,245,135,0,0,0,0,247,140,44,115,33,151,176,155,214,53,178,114,7,76,81,124,74,153,89,97,89,97,4,76,150,158,125,97,0,0,95,87,111,97,166,98,57,98,0,0,92,58,226,97,170,83,245,51,100,99,2,104,210,53,87,93,194,139,218,143,57,142,0,0,217,80,70,29,6,121,50,83,56,150,59,15,101,64,0,0,254,119,0,0,194,124,26,95,218,124,45,122,102,128,99,128,77,125,5,117,242,116,148,137,26,130,12,103,98,128,134,116,91,128,240,116,3,129,36,119,137,137,204,103,83,117,209,110,169,135,206,135,200,129,140,135,73,138,173,140,67,139,43,119,248,116,218,132,53,54,178,105,166,141,0,0,169,137,0,0,185,109,193,135,17,64,231,116,219,61,118,113,164,96,156,97,209,60,0,0,119,96,0,0,113,127,45,139,0,0,233,96,126,75,32,82,24,60,199,60,215,94,86,118,49,85,68,25,254,18,3,153,220,109,173,112,193,92,173,97,15,138,119,54,238,0,70,104,14,79,98,69,31,91,76,99,80,159,166,158,107,98,71,5,219,146,223,5,197,63,76,133,181,66,239,115,181,81,73,54,66,73,228,137,68,147,219,25,238,130,200,60,60,120,68,103,223,98,51,73,170,137,160,2,179,107,5,19,171,79,237,36,8,80,41,109,132,122,0,54,177,74,19,37,0,0,126,3,164,95,128,3,71,3,219,110,31,4,0,0,1,81,122,52,14,81,108,152,67,55,22,132,164,73,135,4,96,81,180,51,106,81,255,11,252,32,229,2,48,37,142,5,51,50,131,25,130,91,125,135,179,5,153,60,178,81,184,81,52,157,201,81,207,81,209,81,220,60,211,81,166,74,179,81,226,81,66,83,237,81,205,131,62,105,45,55,123,95,11,82,38,82,60,82,181,82,87,82,148,82,185,82,197,82,21,124,66,133,224,82,13,134,19,107,0,0,222,138,73,85,217,110,128,63,84,9,236,63,51,83,0,0,226,11,203,108,38,23,27,104,213,115,74,96,170,62,204,56,232,22,221,113,162,68,109,83,116,83,171,134,126,83,0,0,150,21,19,22,230,119,147,83,155,138,160,83,171,83,174,83,167,115,114,87,89,63,156,115,193,83,197,83,73,108,73,78,254,87,217,83,171,58,143,11,224,83,235,63,163,45,246,83,119,12,19,84,121,112,43,85,87,102,91,109,109,84,83,107,116,13,93,85,143,84,164,84,166,71,13,23,221,14,180,61,77,13,188,137,152,38,71,85,237,76,47,84,23,116,134,85,169,85,0,0,215,24,58,64,82,69,53,68,179,102,180,16,55,86,205,102,138,50,164,102,173,102,77,86,79,86,241,120,241,86,135,151,254,83,0,87,239,86,237,86,102,139,35,54,79,18,70,87,165,65,110,108,139,112,66,87,177,54,126,108,230,87,22,20,3,88,84,20,99,67,38,88,245,75,92,88,170,88,97,53,224,88,220,88,60,18,251,88,255,91,67,87,80,161,120,66,211,147,161,53,31,89,166,104,195,54,89,110,62,22,36,90,83,85,146,22,5,133,201,89,78,13,129,108,42,109,220,23,217,89,251,23,178,23,166,109,113,109,40,24,213,22,249,89,69,110,171,90,99,90,230,54,169,73,0,0,8,55,150,90,101,116,211,90,161,111,84,37,133,61,17,25,50,55,184,22,131,94,208,82,118,91,136,101,124,91,14,122,4,64,93,72,4,2,213,91,96,97,52,26,204,89,165,5,243,91,157,91,16,77,5,92,68,27,19,92,206,115,20,92,165,28,40,107,73,92,221,72,133,92,233,92,239,92,139,93,249,29,55,30,16,93,24,93,70,93,164,30,186,92,215,93,252,130,45,56,1,73,73,32,115,33,135,130,54,56,194,59,46,94,138,106,0,0,122,94,188,68,211,12,166,83,183,78,0,0,168,83,113,23,9,94,244,94,130,132,249,94,251,94,160,56,252,94,62,104,27,148,13,95,193,1,148,248,222,58,174,72,58,19,58,95,136,104,208,35,0,0,113,36,99,95,189,151,110,110,114,95,64,147,54,138,167,95,182,93,95,61,80,82,106,31,248,112,104,38,214,145,158,2,41,138,49,96,133,102,119,24,99,57,199,61,57,54,144,87,180,39,113,121,64,62,158,96,0,0,179,96,130,73,143,73,83,122,164,116,225,80,160,90,100,97,36,132,66,97,166,248,210,110,129,97,244,81,86,6,135,97,170,91,183,63,95,40,211,97,157,139,93,153,208,97,50,57,128,41,193,40,35,96,92,97,30,101,139,99,24,1,197,98,112,23,213,98,13,46,108,99,223,73,23,58,56,100,248,99,142,19,252,23,0,0,138,111,54,46,20,152,140,64,29,87,225,100,229,100,123,148,102,58,58,100,87,58,77,101,22,111,40,74,35,74,133,101,109,101,95,101,126,48,181,101,64,73,55,75,209,101,216,64,41,24,224,101,227,101,223,95,0,52,24,102,247,49,248,49,68,102,164,49,165,49,75,102,117,14,103,102,230,81,115,102,0,0,61,30,49,50,244,133,200,49,19,83,197,119,247,40,164,153,2,103,156,67,33,74,43,59,250,105,194,55,0,0,103,103,98,103,205,65,237,144,215,103,233,68,34,104,80,110,60,146,1,104,230,51,160,109,93,104,111,52,225,105,11,106,223,138,115,105,195,104,205,53,1,105,0,105,50,61,1,58,60,54,128,59,172,103,97,105,74,138,252,66,54,105,152,105,161,59,201,3,99,131,144,80,249,105,89,54,42,33,69,106,3,55,157,106,243,59,177,103,200,106,156,145,13,60,29,107,35,9,222,96,53,107,116,107,205,39,181,110,219,58,181,3,88,25,64,55,33,84,90,59,225,107,252,62,220,107,55,108,139,36,241,72,81,107,90,108,38,130,121,108,188,61,197,68,189,61,164,65,12,73,0,73,201,60,229,54,235,60,50,13,131,155,249,49,145,36,143,127,55,104,37,109,161,109,235,109,150,109,92,109,124,110,4,111,127,73,133,64,114,110,51,133,116,111,199,81,0,0,0,0,46,132,33,139,0,0,47,62,83,116,130,63,204,121,79,110,145,90,75,48,248,111,13,55,157,111,48,62,250,110,151,20,61,64,85,69,240,147,68,111,92,111,78,61,116,111,112,145,59,61,159,111,68,65,211,111,145,64,85,65,57,64,240,63,180,63,63,65,223,81,86,65,87,65,64,65,221,97,75,112,126,112,167,112,129,112,204,112,213,112,214,112,223,112,4,65,232,61,180,113,150,113,119,66,43,113,69,113,136,90,74,113,0,0,156,92,101,67,79,113,98,147,193,66,44,113,90,68,39,74,34,74,186,113,232,139,189,112,14,114,66,148,21,114,17,89,67,148,36,114,65,147,5,86,46,114,64,114,116,73,189,104,85,114,87,114,85,62,68,48,13,104,61,111,130,114,0,0,43,115,35,72,43,136,237,72,4,136,40,115,46,115,207,115,170,115,58,12,46,106,201,115,73,116,226,65,231,22,36,74,35,102,197,54,183,73,141,73,251,73,247,115,21,116,3,105,38,74,57,116,195,5,215,62,0,0,173,40,96,116,178,142,71,116,228,115,118,116,185,131,108,116,48,55,116,116,241,147,44,106,130,116,83,73,140,74,95,65,121,74,143,139,70,91,3,140,158,24,200,116,136,25,14,117,0,0,30,117,217,142,75,26,215,91,172,142,133,147,77,117,74,117,103,117,110,117,130,79,4,63,19,77,142,117,93,116,158,117,180,117,2,118,44,118,81,118,79,118,111,118,118,118,245,99,144,118,239,129,248,55,17,105,14,105,161,118,165,118,183,118,204,118,159,111,98,132,157,80,125,81,28,30,30,119,38,119,64,119,175,100,32,82,88,119,172,50,175,119,100,137,104,137,193,22,244,119,0,0,118,19,18,74,202,104,175,120,199,120,211,120,165,150,46,121,224,85,215,120,52,121,177,120,12,118,184,143,132,136,43,139,131,96,28,38,134,121,0,137,2,105,128,121,87,88,157,121,57,123,60,121,169,121,42,110,38,113,168,62,198,121,13,145,212,121,32,5,95,68,15,82,130,184,248,0,0,64,32,169,78,4,0,0,0,0,52,11,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,64,0,0,0,0,0,0,0,0,4,88,0,60,0,0,0,0,0,128,92,173,220,243,187,201,67,238,237,164,15,38,193,155,118,242,239,222,251,250,247,15,50,68,175,254,239,253,254,17,96,176,0,0,33,25,129,32,16,136,168,96,33,105,36,0,68,137,196,0,0,3,64,53,0,67,132,49,81,147,104,2,2,0,0,0,0,0,0,0,0,0,0,0,64,0,1,128,172,100,130,64,140,161,144,4,80,96,212,0,210,42,24,157,104,53,151,79,216,248,32,196,130,28,40,130,117,148,2,56,64,160,161,197,16,113,77,196,13,152,185,94,91,1,67,159,153,3,120,32,226,31,8,137,1,201,64,7,3,13,154,144,82,209,79,124,3,2,33,32,192,110,19,131,181,219,245,229,119,144,79,23,154,54,23,12,0,110,186,9,47,96,84,0,30,120,104,34,112,86,158,37,243,142,183,23,11,239,230,119,23,91,27,193,16,152,141,18,24,182,207,1,49,114,26,91,44,182,192,32,226,195,92,130,27,224,218,206,133,214,64,169,84,11,208,15,72,68,64,16,9,212,64,174,59,100,30,68,43,23,8,134,130,54,24,160,137,231,156,91,8,132,3,2,218,144,236,219,135,133,191,162,173,157,142,157,152,32,37,70,0,70,159,127,227,213,201,132,244,214,77,6,227,182,24,18,9,0,0,0,4,0,0,32,0,0,0,0,2,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,142,120,110,95,63,126,221,61,247,252,155,252,174,210,255,143,107,241,231,191,186,174,110,23,239,220,167,62,182,181,119,201,146,215,165,182,74,110,155,185,129,77,103,254,84,241,155,98,254,111,82,215,54,254,191,41,69,129,249,189,101,166,66,57,0,0,66,96,143,0,148,64,64,210,175,215,209,219,0,160,152,178,123,6,82,32,152,22,200,61,9,0,0,1,0,0,0,1,10,178,8,128,0,0,0,4,136,32,20,16,76,0,0,4,0,161,68,16,0,65,1,0,8,64,240,223,79,54,88,241,245,181,128,245,103,128,64,0,80,78,65,200,132,0,90,96,216,1,43,1,80,161,22,196,64,242,110,17,172,32,57,196,192,8,7,12,9,152,150,196,155,16,28,152,108,134,42,166,1,70,17,109,229,203,196,192,146,16,33,22,18,157,114,244,105,14,23,42,162,129,244,123,0,8,164,11,144,16,44,204,57,74,1,240,22,11,10,64,12,29,234,12,68,14,69,2,0,8,4,4,8,4,4,8,2,4,0,0,0,0,0,0,0,195,138,204,132,195,138,204,140,195,170,204,132,195,170,204,140,0,0,0,0,0,0,0,0,0,48,12,255,1,48,2,48,14,255,39,32,27,255,26,255,31,255,1,255,48,254,38,32,37,32,80,254,81,254,82,254,183,0,84,254,85,254,86,254,87,254,92,255,19,32,49,254,20,32,51,254,116,37,52,254,79,254,8,255,9,255,53,254,54,254,91,255,93,255,55,254,56,254,20,48,21,48,57,254,58,254,16,48,17,48,59,254,60,254,10,48,11,48,61,254,62,254,8,48,9,48,63,254,64,254,12,48,13,48,65,254,66,254,14,48,15,48,67,254,68,254,89,254,90,254,91,254,92,254,93,254,94,254,24,32,25,32,28,32,29,32,29,48,30,48,53,32,50,32,3,255,6,255,10,255,59,32,167,0,3,48,203,37,207,37,179,37,178,37,206,37,6,38,5,38,199,37,198,37,161,37,160,37,189,37,188,37,163,50,5,33,175,0,227,255,63,255,205,2,73,254,74,254,77,254,78,254,75,254,76,254,95,254,96,254,97,254,11,255,13,255,215,0,247,0,177,0,26,34,28,255,30,255,29,255,102,34,103,34,96,34,30,34,82,34,97,34,98,254,99,254,100,254,101,254,102,254,94,255,41,34,42,34,165,34,32,34,31,34,191,34,210,51,209,51,43,34,46,34,53,34,52,34,64,38,66,38,149,34,153,34,145,33,147,33,144,33,146,33,150,33,151,33,153,33,152,33,37,34,35,34,15,255,60,255,21,34,104,254,4,255,229,255,18,48,224,255,225,255,5,255,32,255,3,33,9,33,105,254,106,254,107,254,213,51,156,51,157,51,158,51,206,51,161,51,142,51,143,51,196,51,176,0,89,81,91,81,94,81,93,81,97,81,99,81,231,85,233,116,206,124,129,37,130,37,131,37,132,37,133,37,134,37,135,37,136,37,143,37,142,37,141,37,140,37,139,37,138,37,137,37,60,37,52,37,44,37,36,37,28,37,148,37,0,37,2,37,149,37,12,37,16,37,20,37,24,37,109,37,110,37,112,37,111,37,80,37,94,37,106,37,97,37,226,37,227,37,229,37,228,37,113,37,114,37,115,37,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+93684);
	/* memory initializer */ allocate([24,255,25,255,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,33,48,34,48,35,48,36,48,37,48,38,48,39,48,40,48,41,48,65,83,68,83,69,83,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,5,49,6,49,7,49,8,49,9,49,10,49,11,49,12,49,13,49,14,49,15,49,16,49,17,49,18,49,19,49,20,49,21,49,22,49,23,49,24,49,25,49,26,49,27,49,28,49,29,49,30,49,31,49,32,49,33,49,34,49,35,49,36,49,37,49,38,49,39,49,40,49,41,49,217,2,201,2,202,2,199,2,203,2,0,36,1,36,2,36,3,36,4,36,5,36,6,36,7,36,8,36,9,36,10,36,11,36,12,36,13,36,14,36,15,36,16,36,17,36,18,36,19,36,20,36,21,36,22,36,23,36,24,36,25,36,26,36,27,36,28,36,29,36,30,36,31,36,33,36,172,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,89,78,1,78,3,78,67,78,93,78,134,78,140,78,186,78,63,81,101,81,107,81,224,81,0,82,1,82,155,82,21,83,65,83,92,83,200,83,9,78,11,78,8,78,10,78,43,78,56,78,225,81,69,78,72,78,95,78,94,78,142,78,161,78,64,81,3,82,250,82,67,83,201,83,227,83,31,87,235,88,21,89,39,89,115,89,80,91,81,91,83,91,248,91,15,92,34,92,56,92,113,92,221,93,229,93,241,93,242,93,243,93,254,93,114,94,254,94,11,95,19,95,77,98,17,78,16,78,13,78,45,78,48,78,57,78,75,78,57,92,136,78,145,78,149,78,146,78,148,78,162,78,193,78,192,78,195,78,198,78,199,78,205,78,202,78,203,78,196,78,67,81,65,81,103,81,109,81,110,81,108,81,151,81,246,81,6,82,7,82,8,82,251,82,254,82,255,82,22,83,57,83,72,83,71,83,69,83,94,83,132,83,203,83,202,83,205,83,236,88,41,89,43,89,42,89,45,89,84,91,17,92,36,92,58,92,111,92,244,93,123,94,255,94,20,95,21,95,195,95,8,98,54,98,75,98,78,98,47,101,135,101,151,101,164,101,185,101,229,101,240,102,8,103,40,103,32,107,98,107,121,107,203,107,212,107,219,107,15,108,52,108,107,112,42,114,54,114,59,114,71,114,89,114,91,114,172,114,139,115,25,78,22,78,21,78,20,78,24,78,59,78,77,78,79,78,78,78,229,78,216,78,212,78,213,78,214,78,215,78,227,78,228,78,217,78,222,78,69,81,68,81,137,81,138,81,172,81,249,81,250,81,248,81,10,82,160,82,159,82,5,83,6,83,23,83,29,83,223,78,74,83,73,83,97,83,96,83,111,83,110,83,187,83,239,83,228,83,243,83,236,83,238,83,233,83,232,83,252,83,248,83,245,83,235,83,230,83,234,83,242,83,241,83,240,83,229,83,237,83,251,83,219,86,218,86,22,89,46,89,49,89,116,89,118,89,85,91,131,91,60,92,232,93,231,93,230,93,2,94,3,94,115,94,124,94,1,95,24,95,23,95,197,95,10,98,83,98,84,98,82,98,81,98,165,101,230,101,46,103,44,103,42,103,43,103,45,103,99,107,205,107,17,108,16,108,56,108,65,108,64,108,62,108,175,114,132,115,137,115,220,116,230,116,24,117,31,117,40,117,41,117,48,117,49,117,50,117,51,117,139,117,125,118,174,118,191,118,238,118,219,119,226,119,243,119,58,121,190,121,116,122,203,122,30,78,31,78,82,78,83,78,105,78,153,78,164,78,166,78,165,78,255,78,9,79,25,79,10,79,21,79,13,79,16,79,17,79,15,79,242,78,246,78,251,78,240,78,243,78,253,78,1,79,11,79,73,81,71,81,70,81,72,81,104,81,113,81,141,81,176,81,23,82,17,82,18,82,14,82,22,82,163,82,8,83,33,83,32,83,112,83,113,83,9,84,15,84,12,84,10,84,16,84,1,84,11,84,4,84,17,84,13,84,8,84,3,84,14,84,6,84,18,84,224,86,222,86,221,86,51,87,48,87,40,87,45,87,44,87,47,87,41,87,25,89,26,89,55,89,56,89,132,89,120,89,131,89,125,89,121,89,130,89,129,89,87,91,88,91,135,91,136,91,133,91,137,91,250,91,22,92,121,92,222,93,6,94,118,94,116,94,15,95,27,95,217,95,214,95,14,98,12,98,13,98,16,98,99,98,91,98,88,98,54,101,233,101,232,101,236,101,237,101,242,102,243,102,9,103,61,103,52,103,49,103,53,103,33,107,100,107,123,107,22,108,93,108,87,108,89,108,95,108,96,108,80,108,85,108,97,108,91,108,77,108,78,108,112,112,95,114,93,114,126,118,249,122,115,124,248,124,54,127,138,127,189,127,1,128,3,128,12,128,18,128,51,128,127,128,137,128,139,128,140,128,227,129,234,129,243,129,252,129,12,130,27,130,31,130,110,130,114,130,126,130,107,134,64,136,76,136,99,136,127,137,33,150,50,78,168,78,77,79,79,79,71,79,87,79,94,79,52,79,91,79,85,79,48,79,80,79,81,79,61,79,58,79,56,79,67,79,84,79,60,79,70,79,99,79,92,79,96,79,47,79,78,79,54,79,89,79,93,79,72,79,90,79,76,81,75,81,77,81,117,81,182,81,183,81,37,82,36,82,41,82,42,82,40,82,171,82,169,82,170,82,172,82,35,83,115,83,117,83,29,84,45,84,30,84,62,84,38,84,78,84,39,84,70,84,67,84,51,84,72,84,66,84,27,84,41,84,74,84,57,84,59,84,56,84,46,84,53,84,54,84,32,84,60,84,64,84,49,84,43,84,31,84,44,84,234,86,240,86,228,86,235,86,74,87,81,87,64,87,77,87,71,87,78,87,62,87,80,87,79,87,59,87,239,88,62,89,157,89,146,89,168,89,158,89,163,89,153,89,150,89,141,89,164,89,147,89,138,89,165,89,93,91,92,91,90,91,91,91,140,91,139,91,143,91,44,92,64,92,65,92,63,92,62,92,144,92,145,92,148,92,140,92,235,93,12,94,143,94,135,94,138,94,247,94,4,95,31,95,100,95,98,95,119,95,121,95,216,95,204,95,215,95,205,95,241,95,235,95,248,95,234,95,18,98,17,98,132,98,151,98,150,98,128,98,118,98,137,98,109,98,138,98,124,98,126,98,121,98,115,98,146,98,111,98,152,98,110,98,149,98,147,98,145,98,134,98,57,101,59,101,56,101,241,101,244,102,95,103,78,103,79,103,80,103,81,103,92,103,86,103,94,103,73,103,70,103,96,103,83,103,87,103,101,107,207,107,66,108,94,108,153,108,129,108,136,108,137,108,133,108,155,108,106,108,122,108,144,108,112,108,140,108,104,108,150,108,146,108,125,108,131,108,114,108,126,108,116,108,134,108,118,108,141,108,148,108,152,108,130,108,118,112,124,112,125,112,120,112,98,114,97,114,96,114,196,114,194,114,150,115,44,117,43,117,55,117,56,117,130,118,239,118,227,119,193,121,192,121,191,121,118,122,251,124,85,127,150,128,147,128,157,128,152,128,155,128,154,128,178,128,111,130,146,130,139,130,141,130,139,137,210,137,0,138,55,140,70,140,85,140,157,140,100,141,112,141,179,141,171,142,202,142,155,143,176,143,194,143,198,143,197,143,196,143,225,93,145,144,162,144,170,144,166,144,163,144,73,145,198,145,204,145,50,150,46,150,49,150,42,150,44,150,38,78,86,78,115,78,139,78,155,78,158,78,171,78,172,78,111,79,157,79,141,79,115,79,127,79,108,79,155,79,139,79,134,79,131,79,112,79,117,79,136,79,105,79,123,79,150,79,126,79,143,79,145,79,122,79,84,81,82,81,85,81,105,81,119,81,118,81,120,81,189,81,253,81,59,82,56,82,55,82,58,82,48,82,46,82,54,82,65,82,190,82,187,82,82,83,84,83,83,83,81,83,102,83,119,83,120,83,121,83,214,83,212,83,215,83,115,84,117,84,150,84,120,84,149,84,128,84,123,84,119,84,132,84,146,84,134,84,124,84,144,84,113,84,118,84,140,84,154,84,98,84,104,84,139,84,125,84,142,84,250,86,131,87,119,87,106,87,105,87,97,87,102,87,100,87,124,87,28,89,73,89,71,89,72,89,68,89,84,89,190,89,187,89,212,89,185,89,174,89,209,89,198,89,208,89,205,89,203,89,211,89,202,89,175,89,179,89,210,89,197,89,95,91,100,91,99,91,151,91,154,91,152,91,156,91,153,91,155,91,26,92,72,92,69,92,70,92,183,92,161,92,184,92,169,92,171,92,177,92,179,92,24,94,26,94,22,94,21,94,27,94,17,94,120,94,154,94,151,94,156,94,149,94,150,94,246,94,38,95,39,95,41,95,128,95,129,95,127,95,124,95,221,95,224,95,253,95,245,95,255,95,15,96,20,96,47,96,53,96,22,96,42,96,21,96,33,96,39,96,41,96,43,96,27,96,22,98,21,98,63,98,62,98,64,98,127,98,201,98,204,98,196,98,191,98,194,98,185,98,210,98,219,98,171,98,211,98,212,98,203,98,200,98,168,98,189,98,188,98,208,98,217,98,199,98,205,98,181,98,218,98,177,98,216,98,214,98,215,98,198,98,172,98,206,98,62,101,167,101,188,101,250,101,20,102,19,102,12,102,6,102,2,102,14,102,0,102,15,102,21,102,10,102,7,102,13,103,11,103,109,103,139,103,149,103,113,103,156,103,115,103,119,103,135,103,157,103,151,103,111,103,112,103,127,103,137,103,126,103,144,103,117,103,154,103,147,103,124,103,106,103,114,103,35,107,102,107,103,107,127,107,19,108,27,108,227,108,232,108,243,108,177,108,204,108,229,108,179,108,189,108,190,108,188,108,226,108,171,108,213,108,211,108,184,108,196,108,185,108,193,108,174,108,215,108,197,108,241,108,191,108,187,108,225,108,219,108,202,108,172,108,239,108,220,108,214,108,224,108,149,112,142,112,146,112,138,112,153,112,44,114,45,114,56,114,72,114,103,114,105,114,192,114,206,114,217,114,215,114,208,114,169,115,168,115,159,115,171,115,165,115,61,117,157,117,153,117,154,117,132,118,194,118,242,118,244,118,229,119,253,119,62,121,64,121,65,121,201,121,200,121,122,122,121,122,250,122,254,124,84,127,140,127,139,127,5,128,186,128,165,128,162,128,177,128,161,128,171,128,169,128,180,128,170,128,175,128,229,129,254,129,13,130,179,130,157,130,153,130,173,130,189,130,159,130,185,130,177,130,172,130,165,130,175,130,184,130,163,130,176,130,190,130,183,130,78,134,113,134,29,82,104,136,203,142,206,143,212,143,209,143,181,144,184,144,177,144,182,144,199,145,209,145,119,149,128,149,28,150,64,150,63,150,59,150,68,150,66,150,185,150,232,150,82,151,94,151,159,78,173,78,174,78,225,79,181,79,175,79,191,79,224,79,209,79,207,79,221,79,195,79,182,79,216,79,223,79,202,79,215,79,174,79,208,79,196,79,194,79,218,79,206,79,222,79,183,79,87,81,146,81,145,81,160,81,78,82,67,82,74,82,77,82,76,82,75,82,71,82,199,82,201,82,195,82,193,82,13,83,87,83,123,83,154,83,219,83,172,84,192,84,168,84,206,84,201,84,184,84,166,84,179,84,199,84,194,84,189,84,170,84,193,84,196,84,200,84,175,84,171,84,177,84,187,84,169,84,167,84,191,84,255,86,130,87,139,87,160,87,163,87,162,87,206,87,174,87,147,87,85,89,81,89,79,89,78,89,80,89,220,89,216,89,255,89,227,89,232,89,3,90,229,89,234,89,218,89,230,89,1,90,251,89,105,91,163,91,166,91,164,91,162,91,165,91,1,92,78,92,79,92,77,92,75,92,217,92,210,92,247,93,29,94,37,94,31,94,125,94,160,94,166,94,250,94,8,95,45,95,101,95,136,95,133,95,138,95,139,95,135,95,140,95,137,95,18,96,29,96,32,96,37,96,14,96,40,96,77,96,112,96,104,96,98,96,70,96,67,96,108,96,107,96,106,96,100,96,65,98,220,98,22,99,9,99,252,98,237,98,1,99,238,98,253,98,7,99,241,98,247,98,239,98,236,98,254,98,244,98,17,99,2,99,63,101,69,101,171,101,189,101,226,101,37,102,45,102,32,102,39,102,47,102,31,102,40,102,49,102,36,102,247,102,255,103,211,103,241,103,212,103,208,103,236,103,182,103,175,103,245,103,233,103,239,103,196,103,209,103,180,103,218,103,229,103,184,103,207,103,222,103,243,103,176,103,217,103,226,103,221,103,210,103,106,107,131,107,134,107,181,107,210,107,215,107,31,108,201,108,11,109,50,109,42,109,65,109,37,109,12,109,49,109,30,109,23,109,59,109,61,109,62,109,54,109,27,109,245,108,57,109,39,109,56,109,41,109,46,109,53,109,14,109,43,109,171,112,186,112,179,112,172,112,175,112,173,112,184,112,174,112,164,112,48,114,114,114,111,114,116,114,233,114,224,114,225,114,183,115,202,115,187,115,178,115,205,115,192,115,179,115,26,117,45,117,79,117,76,117,78,117,75,117,171,117,164,117,165,117,162,117,163,117,120,118,134,118,135,118,136,118,200,118,198,118,195,118,197,118,1,119,249,118,248,118,9,119,11,119,254,118,252,118,7,119,220,119,2,120,20,120,12,120,13,120,70,121,73,121,72,121,71,121,185,121,186,121,209,121,210,121,203,121,127,122,129,122,255,122,253,122,125,124,2,125,5,125,0,125,9,125,7,125,4,125,6,125,56,127,142,127,191,127,4,128,16,128,13,128,17,128,54,128,214,128,229,128,218,128,195,128,196,128,204,128,225,128,219,128,206,128,222,128,228,128,221,128,244,129,34,130,231,130,3,131,5,131,227,130,219,130,230,130,4,131,229,130,2,131,9,131,210,130,215,130,241,130,1,131,220,130,212,130,209,130,222,130,211,130,223,130,239,130,6,131,80,134,121,134,123,134,122,134,77,136,107,136,129,137,212,137,8,138,2,138,3,138,158,140,160,140,116,141,115,141,180,141,205,142,204,142,240,143,230,143,226,143,234,143,229,143,237,143,235,143,228,143,232,143,202,144,206,144,193,144,195,144,75,145,74,145,205,145,130,149,80,150,75,150,76,150,77,150,98,151,105,151,203,151,237,151,243,151,1,152,168,152,219,152,223,152,150,153,153,153,88,78,179,78,12,80,13,80,35,80,239,79,38,80,37,80,248,79,41,80,22,80,6,80,60,80,31,80,26,80,18,80,17,80,250,79,0,80,20,80,40,80,241,79,33,80,11,80,25,80,24,80,243,79,238,79,45,80,42,80,254,79,43,80,9,80,124,81,164,81,165,81,162,81,205,81,204,81,198,81,203,81,86,82,92,82,84,82,91,82,93,82,42,83,127,83,159,83,157,83,223,83,232,84,16,85,1,85,55,85,252,84,229,84,242,84,6,85,250,84,20,85,233,84,237,84,225,84,9,85,238,84,234,84,230,84,39,85,7,85,253,84,15,85,3,87,4,87,194,87,212,87,203,87,195,87,9,88,15,89,87,89,88,89,90,89,17,90,24,90,28,90,31,90,27,90,19,90,236,89,32,90,35,90,41,90,37,90,12,90,9,90,107,91,88,92,176,91,179,91,182,91,180,91,174,91,181,91,185,91,184,91,4,92,81,92,85,92,80,92,237,92,253,92,251,92,234,92,232,92,240,92,246,92,1,93,244,92,238,93,45,94,43,94,171,94,173,94,167,94,49,95,146,95,145,95,144,95,89,96,99,96,101,96,80,96,85,96,109,96,105,96,111,96,132,96,159,96,154,96,141,96,148,96,140,96,133,96,150,96,71,98,243,98,8,99,255,98,78,99,62,99,47,99,85,99,66,99,70,99,79,99,73,99,58,99,80,99,61,99,42,99,43,99,40,99,77,99,76,99,72,101,73,101,153,101,193,101,197,101,66,102,73,102,79,102,67,102,82,102,76,102,69,102,65,102,248,102,20,103,21,103,23,103,33,104,56,104,72,104,70,104,83,104,57,104,66,104,84,104,41,104,179,104,23,104,76,104,81,104,61,104,244,103,80,104,64,104,60,104,67,104,42,104,69,104,19,104,24,104,65,104,138,107,137,107,183,107,35,108,39,108,40,108,38,108,36,108,240,108,106,109,149,109,136,109,135,109,102,109,120,109,119,109,89,109,147,109,108,109,137,109,110,109,90,109,116,109,105,109,140,109,138,109,121,109,133,109,101,109,148,109,202,112,216,112,228,112,217,112,200,112,207,112,57,114,121,114,252,114,249,114,253,114,248,114,247,114,134,115,237,115,9,116,238,115,224,115,234,115,222,115,84,117,93,117,92,117,90,117,89,117,190,117,197,117,199,117,178,117,179,117,189,117,188,117,185,117,194,117,184,117,139,118,176,118,202,118,205,118,206,118,41,119,31,119,32,119,40,119,233,119,48,120,39,120,56,120,29,120,52,120,55,120,37,120,45,120,32,120,31,120,50,120,85,121,80,121,96,121,95,121,86,121,94,121,93,121,87,121,90,121,228,121,227,121,231,121,223,121,230,121,233,121,216,121,132,122,136,122,217,122,6,123,17,123,137,124,33,125,23,125,11,125,10,125,32,125,34,125,20,125,16,125,21,125,26,125,28,125,13,125,25,125,27,125,58,127,95,127,148,127,197,127,193,127,6,128,24,128,21,128,25,128,23,128,61,128,63,128,241,128,2,129,240,128,5,129,237,128,244,128,6,129,248,128,243,128,8,129,253,128,10,129,252,128,239,128,237,129,236,129,0,130,16,130,42,130,43,130,40,130,44,130,187,130,43,131,82,131,84,131,74,131,56,131,80,131,73,131,53,131,52,131,79,131,50,131,57,131,54,131,23,131,64,131,49,131,40,131,67,131,84,134,138,134,170,134,147,134,164,134,169,134,140,134,163,134,156,134,112,136,119,136,129,136,130,136,125,136,121,136,24,138,16,138,14,138,12,138,21,138,10,138,23,138,19,138,22,138,15,138,17,138,72,140,122,140,121,140,161,140,162,140,119,141,172,142,210,142,212,142,207,142,177,143,1,144,6,144,247,143,0,144,250,143,244,143,3,144,253,143,5,144,248,143,149,144,225,144,221,144,226,144,82,145,77,145,76,145,216,145,221,145,215,145,220,145,217,145,131,149,98,150,99,150,97,150,91,150,93,150,100,150,88,150,94,150,187,150,226,152,172,153,168,154,216,154,37,155,50,155,60,155,126,78,122,80,125,80,92,80,71,80,67,80,76,80,90,80,73,80,101,80,118,80,78,80,85,80,117,80,116,80,119,80,79,80,15,80,111,80,109,80,92,81,149,81,240,81,106,82,111,82,210,82,217,82,216,82,213,82,16,83,15,83,25,83,63,83,64,83,62,83,195,83,252,102,70,85,106,85,102,85,68,85,94,85,97,85,67,85,74,85,49,85,86,85,79,85,85,85,47,85,100,85,56,85,46,85,92,85,44,85,99,85,51,85,65,85,87,85,8,87,11,87,9,87,223,87,5,88,10,88,6,88,224,87,228,87,250,87,2,88,53,88,247,87,249,87,32,89,98,89,54,90,65,90,73,90,102,90,106,90,64,90,60,90,98,90,90,90,70,90,74,90,112,91,199,91,197,91,196,91,194,91,191,91,198,91,9,92,8,92,7,92,96,92,92,92,93,92,7,93,6,93,14,93,27,93,22,93,34,93,17,93,41,93,20,93,25,93,36,93,39,93,23,93,226,93,56,94,54,94,51,94,55,94,183,94,184,94,182,94,181,94,190,94,53,95,55,95,87,95,108,95,105,95,107,95,151,95,153,95,158,95,152,95,161,95,160,95,156,95,127,96,163,96,137,96,160,96,168,96,203,96,180,96,230,96,189,96,197,96,187,96,181,96,220,96,188,96,216,96,213,96,198,96,223,96,184,96,218,96,199,96,26,98,27,98,72,98,160,99,167,99,114,99,150,99,162,99,165,99,119,99,103,99,152,99,170,99,113,99,169,99,137,99,131,99,155,99,107,99,168,99,132,99,136,99,153,99,161,99,172,99,146,99,143,99,128,99,123,99,105,99,104,99,122,99,93,101,86,101,81,101,89,101,87,101,95,85,79,101,88,101,85,101,84,101,156,101,155,101,172,101,207,101,203,101,204,101,206,101,93,102,90,102,100,102,104,102,102,102,94,102,249,102,215,82,27,103,129,104,175,104,162,104,147,104,181,104,127,104,118,104,177,104,167,104,151,104,176,104,131,104,196,104,173,104,134,104,133,104,148,104,157,104,168,104,159,104,161,104,130,104,50,107,186,107,235,107,236,107,43,108,142,109,188,109,243,109,217,109,178,109,225,109,204,109,228,109,251,109,250,109,5,110,199,109,203,109,175,109,209,109,174,109,222,109,249,109,184,109,247,109,245,109,197,109,210,109,26,110,181,109,218,109,235,109,216,109,234,109,241,109,238,109,232,109,198,109,196,109,170,109,236,109,191,109,230,109,249,112,9,113,10,113,253,112,239,112,61,114,125,114,129,114,28,115,27,115,22,115,19,115,25,115,135,115,5,116,10,116,3,116,6,116,254,115,13,116,224,116,246,116,247,116,28,117,34,117,101,117,102,117,98,117,112,117,143,117,212,117,213,117,181,117,202,117,205,117,142,118,212,118,210,118,219,118,55,119,62,119,60,119,54,119,56,119,58,119,107,120,67,120,78,120,101,121,104,121,109,121,251,121,146,122,149,122,32,123,40,123,27,123,44,123,38,123,25,123,30,123,46,123,146,124,151,124,149,124,70,125,67,125,113,125,46,125,57,125,60,125,64,125,48,125,51,125,68,125,47,125,66,125,50,125,49,125,61,127,158,127,154,127,204,127,206,127,210,127,28,128,74,128,70,128,47,129,22,129,35,129,43,129,41,129,48,129,36,129,2,130,53,130,55,130,54,130,57,130,142,131,158,131,152,131,120,131,162,131,150,131,189,131,171,131,146,131,138,131,147,131,137,131,160,131,119,131,123,131,124,131,134,131,167,131,85,134,106,95,199,134,192,134,182,134,196,134,181,134,198,134,203,134,177,134,175,134,201,134,83,136,158,136,136,136,171,136,146,136,150,136,141,136,139,136,147,137,143,137,42,138,29,138,35,138,37,138,49,138,45,138,31,138,27,138,34,138,73,140,90,140,169,140,172,140,171,140,168,140,170,140,167,140,103,141,102,141,190,141,186,141,219,142,223,142,25,144,13,144,26,144,23,144,35,144,31,144,29,144,16,144,21,144,30,144,32,144,15,144,34,144,22,144,27,144,20,144,232,144,237,144,253,144,87,145,206,145,245,145,230,145,227,145,231,145,237,145,233,145,137,149,106,150,117,150,115,150,120,150,112,150,116,150,118,150,119,150,108,150,192,150,234,150,233,150,224,122,223,122,2,152,3,152,90,155,229,156,117,158,127,158,165,158,187,158,162,80,141,80,133,80,153,80,145,80,128,80,150,80,152,80,154,80,0,103,241,81,114,82,116,82,117,82,105,82,222,82,221,82,219,82,90,83,165,83,123,85,128,85,167,85,124,85,138,85,157,85,152,85,130,85,156,85,170,85,148,85,135,85,139,85,131,85,179,85,174,85,159,85,62,85,178,85,154,85,187,85,172,85,177,85,126,85,137,85,171,85,153,85,13,87,47,88,42,88,52,88,36,88,48,88,49,88,33,88,29,88,32,88,249,88,250,88,96,89,119,90,154,90,127,90,146,90,155,90,167,90,115,91,113,91,210,91,204,91,211,91,208,91,10,92,11,92,49,92,76,93,80,93,52,93,71,93,253,93,69,94,61,94,64,94,67,94,126,94,202,94,193,94,194,94,196,94,60,95,109,95,169,95,170,95,168,95,209,96,225,96,178,96,182,96,224,96,28,97,35,97,250,96,21,97,240,96,251,96,244,96,104,97,241,96,14,97,246,96,9,97,0,97,18,97,31,98,73,98,163,99,140,99,207,99,192,99,233,99,201,99,198,99,205,99,210,99,227,99,208,99,225,99,214,99,237,99,238,99,118,99,244,99,234,99,219,99,82,100,218,99,249,99,94,101,102,101,98,101,99,101,145,101,144,101,175,101,110,102,112,102,116,102,118,102,111,102,145,102,122,102,126,102,119,102,254,102,255,102,31,103,29,103,250,104,213,104,224,104,216,104,215,104,5,105,223,104,245,104,238,104,231,104,249,104,210,104,242,104,227,104,203,104,205,104,13,105,18,105,14,105,201,104,218,104,110,105,251,104,62,107,58,107,61,107,152,107,150,107,188,107,239,107,46,108,47,108,44,108,47,110,56,110,84,110,33,110,50,110,103,110,74,110,32,110,37,110,35,110,27,110,91,110,88,110,36,110,86,110,110,110,45,110,38,110,111,110,52,110,77,110,58,110,44,110,67,110,29,110,62,110,203,110,137,110,25,110,78,110,99,110,68,110,114,110,105,110,95,110,25,113,26,113,38,113,48,113,33,113,54,113,110,113,28,113,76,114,132,114,128,114,54,115,37,115,52,115,41,115,58,116,42,116,51,116,34,116,37,116,53,116,54,116,52,116,47,116,27,116,38,116,40,116,37,117,38,117,107,117,106,117,226,117,219,117,227,117,217,117,216,117,222,117,224,117,123,118,124,118,150,118,147,118,180,118,220,118,79,119,237,119,93,120,108,120,111,120,13,122,8,122,11,122,5,122,0,122,152,122,151,122,150,122,229,122,227,122,73,123,86,123,70,123,80,123,82,123,84,123,77,123,75,123,79,123,81,123,159,124,165,124,94,125,80,125,104,125,85,125,43,125,110,125,114,125,97,125,102,125,98,125,112,125,115,125,132,85,212,127,213,127,11,128,82,128,133,128,85,129,84,129,75,129,81,129,78,129,57,129,70,129,62,129,76,129,83,129,116,129,18,130,28,130,233,131,3,132,248,131,13,132,224,131,197,131,11,132,193,131,239,131,241,131,244,131,87,132,10,132,240,131,12,132,204,131,253,131,242,131,202,131,56,132,14,132,4,132,220,131,7,132,212,131,223,131,91,134,223,134,217,134,237,134,212,134,219,134,228,134,208,134,222,134,87,136,193,136,194,136,177,136,131,137,150,137,59,138,96,138,85,138,94,138,60,138,65,138,84,138,91,138,80,138,70,138,52,138,58,138,54,138,86,138,97,140,130,140,175,140,188,140,179,140,189,140,193,140,187,140,192,140,180,140,183,140,182,140,191,140,184,140,138,141,133,141,129,141,206,141,221,141,203,141,218,141,209,141,204,141,219,141,198,141,251,142,248,142,252,142,156,143,46,144,53,144,49,144,56,144,50,144,54,144,2,145,245,144,9,145,254,144,99,145,101,145,207,145,20,146,21,146,35,146,9,146,30,146,13,146,16,146,7,146,17,146,148,149,143,149,139,149,145,149,147,149,146,149,142,149,138,150,142,150,139,150,125,150,133,150,134,150,141,150,114,150,132,150,193,150,197,150,196,150,198,150,199,150,239,150,242,150,204,151,5,152,6,152,8,152,231,152,234,152,239,152,233,152,242,152,237,152,174,153,173,153,195,158,205,158,209,158,130,78,173,80,181,80,178,80,179,80,197,80,190,80,172,80,183,80,187,80,175,80,199,80,127,82,119,82,125,82,223,82,230,82,228,82,226,82,227,82,47,83,223,85,232,85,211,85,230,85,206,85,220,85,199,85,209,85,227,85,228,85,239,85,218,85,225,85,197,85,198,85,229,85,201,85,18,87,19,87,94,88,81,88,88,88,87,88,90,88,84,88,107,88,76,88,109,88,74,88,98,88,82,88,75,88,103,89,193,90,201,90,204,90,190,90,189,90,188,90,179,90,194,90,178,90,105,93,111,93,76,94,121,94,201,94,200,94,18,95,89,95,172,95,174,95,26,97,15,97,72,97,31,97,243,96,27,97,249,96,1,97,8,97,78,97,76,97,68,97,77,97,62,97,52,97,39,97,13,97,6,97,55,97,33,98,34,98,19,100,62,100,30,100,42,100,45,100,61,100,44,100,15,100,28,100,20,100,13,100,54,100,22,100,23,100,6,100,108,101,159,101,176,101,151,102,137,102,135,102,136,102,150,102,132,102,152,102,141,102,3,103,148,105,109,105,90,105,119,105,96,105,84,105,117,105,48,105,130,105,74,105,104,105,107,105,94,105,83,105,121,105,134,105,93,105,99,105,91,105,71,107,114,107,192,107,191,107,211,107,253,107,162,110,175,110,211,110,182,110,194,110,144,110,157,110,199,110,197,110,165,110,152,110,188,110,186,110,171,110,209,110,150,110,156,110,196,110,212,110,170,110,167,110,180,110,78,113,89,113,105,113,100,113,73,113,103,113,92,113,108,113,102,113,76,113,101,113,94,113,70,113,104,113,86,113,58,114,82,114,55,115,69,115,63,115,62,115,111,116,90,116,85,116,95,116,94,116,65,116,63,116,89,116,91,116,92,116,118,117,120,117,0,118,240,117,1,118,242,117,241,117,250,117,255,117,244,117,243,117,222,118,223,118,91,119,107,119,102,119,94,119,99,119,121,119,106,119,108,119,92,119,101,119,104,119,98,119,238,119,142,120,176,120,151,120,152,120,140,120,137,120,124,120,145,120,147,120,127,120,122,121,127,121,129,121,44,132,189,121,28,122,26,122,32,122,20,122,31,122,30,122,159,122,160,122,119,123,192,123,96,123,110,123,103,123,177,124,179,124,181,124,147,125,121,125,145,125,129,125,143,125,91,125,110,127,105,127,106,127,114,127,169,127,168,127,164,127,86,128,88,128,134,128,132,128,113,129,112,129,120,129,101,129,110,129,115,129,107,129,121,129,122,129,102,129,5,130,71,130,130,132,119,132,61,132,49,132,117,132,102,132,107,132,73,132,108,132,91,132,60,132,53,132,97,132,99,132,105,132,109,132,70,132,94,134,92,134,95,134,249,134,19,135,8,135,7,135,0,135,254,134,251,134,2,135,3,135,6,135,10,135,89,136,223,136,212,136,217,136,220,136,216,136,221,136,225,136,202,136,213,136,210,136,156,137,227,137,107,138,114,138,115,138,102,138,105,138,112,138,135,138,124,138,99,138,160,138,113,138,133,138,109,138,98,138,110,138,108,138,121,138,123,138,62,138,104,138,98,140,138,140,137,140,202,140,199,140,200,140,196,140,178,140,195,140,194,140,197,140,225,141,223,141,232,141,239,141,243,141,250,141,234,141,228,141,230,141,178,142,3,143,9,143,254,142,10,143,159,143,178,143,75,144,74,144,83,144,66,144,84,144,60,144,85,144,80,144,71,144,79,144,78,144,77,144,81,144,62,144,65,144,18,145,23,145,108,145,106,145,105,145,201,145,55,146,87,146,56,146,61,146,64,146,62,146,91,146,75,146,100,146,81,146,52,146,73,146,77,146,69,146,57,146,63,146,90,146,152,149,152,150,148,150,149,150,205,150,203,150,201,150,202,150,247,150,251,150,249,150,246,150,86,151,116,151,118,151,16,152,17,152,19,152,10,152,18,152,12,152,252,152,244,152,253,152,254,152,179,153,177,153,180,153,225,154,233,156,130,158,14,159,19,159,32,159,231,80,238,80,229,80,214,80,237,80,218,80,213,80,207,80,209,80,241,80,206,80,233,80,98,81,243,81,131,82,130,82,49,83,173,83,254,85,0,86,27,86,23,86,253,85,20,86,6,86,9,86,13,86,14,86,247,85,22,86,31,86,8,86,16,86,246,85,24,87,22,87,117,88,126,88,131,88,147,88,138,88,121,88,133,88,125,88,253,88,37,89,34,89,36,89,106,89,105,89,225,90,230,90,233,90,215,90,214,90,216,90,227,90,117,91,222,91,231,91,225,91,229,91,230,91,232,91,226,91,228,91,223,91,13,92,98,92,132,93,135,93,91,94,99,94,85,94,87,94,84,94,211,94,214,94,10,95,70,95,112,95,185,95,71,97,63,97,75,97,119,97,98,97,99,97,95,97,90,97,88,97,117,97,42,98,135,100,88,100,84,100,164,100,120,100,95,100,122,100,81,100,103,100,52,100,109,100,123,100,114,101,161,101,215,101,214,101,162,102,168,102,157,102,156,105,168,105,149,105,193,105,174,105,211,105,203,105,155,105,183,105,187,105,171,105,180,105,208,105,205,105,173,105,204,105,166,105,195,105,163,105,73,107,76,107,51,108,51,111,20,111,254,110,19,111,244,110,41,111,62,111,32,111,44,111,15,111,2,111,34,111,255,110,239,110,6,111,49,111,56,111,50,111,35,111,21,111,43,111,47,111,136,111,42,111,236,110,1,111,242,110,204,110,247,110,148,113,153,113,125,113,138,113,132,113,146,113,62,114,146,114,150,114,68,115,80,115,100,116,99,116,106,116,112,116,109,116,4,117,145,117,39,118,13,118,11,118,9,118,19,118,225,118,227,118,132,119,125,119,127,119,97,119,193,120,159,120,167,120,179,120,169,120,163,120,142,121,143,121,141,121,46,122,49,122,170,122,169,122,237,122,239,122,161,123,149,123,139,123,117,123,151,123,157,123,148,123,143,123,184,123,135,123,132,123,185,124,189,124,190,124,187,125,176,125,156,125,189,125,190,125,160,125,202,125,180,125,178,125,177,125,186,125,162,125,191,125,181,125,184,125,173,125,210,125,199,125,172,125,112,127,224,127,225,127,223,127,94,128,90,128,135,128,80,129,128,129,143,129,136,129,138,129,127,129,130,129,231,129,250,129,7,130,20,130,30,130,75,130,201,132,191,132,198,132,196,132,153,132,158,132,178,132,156,132,203,132,184,132,192,132,211,132,144,132,188,132,209,132,202,132,63,135,28,135,59,135,34,135,37,135,52,135,24,135,85,135,55,135,41,135,243,136,2,137,244,136,249,136,248,136,253,136,232,136,26,137,239,136,166,138,140,138,158,138,163,138,141,138,161,138,147,138,164,138,170,138,165,138,168,138,152,138,145,138,154,138,167,138,106,140,141,140,140,140,211,140,209,140,210,140,107,141,153,141,149,141,252,141,20,143,18,143,21,143,19,143,163,143,96,144,88,144,92,144,99,144,89,144,94,144,98,144,93,144,91,144,25,145,24,145,30,145,117,145,120,145,119,145,116,145,120,146,128,146,133,146,152,146,150,146,123,146,147,146,156,146,168,146,124,146,145,146,161,149,168,149,169,149,163,149,165,149,164,149,153,150,156,150,155,150,204,150,210,150,0,151,124,151,133,151,246,151,23,152,24,152,175,152,177,152,3,153,5,153,12,153,9,153,193,153,175,154,176,154,230,154,65,155,66,155,244,156,246,156,243,156,188,158,59,159,74,159,4,81,0,81,251,80,245,80,249,80,2,81,8,81,9,81,5,81,220,81,135,82,136,82,137,82,141,82,138,82,240,82,178,83,46,86,59,86,57,86,50,86,63,86,52,86,41,86,83,86,78,86,87,86,116,86,54,86,47,86,48,86,128,88,159,88,158,88,179,88,156,88,174,88,169,88,166,88,109,89,9,91,251,90,11,91,245,90,12,91,8,91,238,91,236,91,233,91,235,91,100,92,101,92,157,93,148,93,98,94,95,94,97,94,226,94,218,94,223,94,221,94,227,94,224,94,72,95,113,95,183,95,181,95,118,97,103,97,110,97,93,97,85,97,130,97,124,97,112,97,107,97,126,97,167,97,144,97,171,97,142,97,172,97,154,97,164,97,148,97,174,97,46,98,105,100,111,100,121,100,158,100,178,100,136,100,144,100,176,100,165,100,147,100,149,100,169,100,146,100,174,100,173,100,171,100,154,100,172,100,153,100,162,100,179,100,117,101,119,101,120,101,174,102,171,102,180,102,177,102,35,106,31,106,232,105,1,106,30,106,25,106,253,105,33,106,19,106,10,106,243,105,2,106,5,106,237,105,17,106,80,107,78,107,164,107,197,107,198,107,63,111,124,111,132,111,81,111,102,111,84,111,134,111,109,111,91,111,120,111,110,111,142,111,122,111,112,111,100,111,151,111,88,111,213,110,111,111,96,111,95,111,159,113,172,113,177,113,168,113,86,114,155,114,78,115,87,115,105,116,139,116,131,116,126,116,128,116,127,117,32,118,41,118,31,118,36,118,38,118,33,118,34,118,154,118,186,118,228,118,142,119,135,119,140,119,145,119,139,119,203,120,197,120,186,120,202,120,190,120,213,120,188,120,208,120,63,122,60,122,64,122,61,122,55,122,59,122,175,122,174,122,173,123,177,123,196,123,180,123,198,123,199,123,193,123,160,123,204,123,202,124,224,125,244,125,239,125,251,125,216,125,236,125,221,125,232,125,227,125,218,125,222,125,233,125,158,125,217,125,242,125,249,125,117,127,119,127,175,127,233,127,38,128,155,129,156,129,157,129,160,129,154,129,152,129,23,133,61,133,26,133,238,132,44,133,45,133,19,133,17,133,35,133,33,133,20,133,236,132,37,133,255,132,6,133,130,135,116,135,118,135,96,135,102,135,120,135,104,135,89,135,87,135,76,135,83,135,91,136,93,136,16,137,7,137,18,137,19,137,21,137,10,137,188,138,210,138,199,138,196,138,149,138,203,138,248,138,178,138,201,138,194,138,191,138,176,138,214,138,205,138,182,138,185,138,219,138,76,140,78,140,108,140,224,140,222,140,230,140,228,140,236,140,237,140,226,140,227,140,220,140,234,140,225,140,109,141,159,141,163,141,43,142,16,142,29,142,34,142,15,142,41,142,31,142,33,142,30,142,186,142,29,143,27,143,31,143,41,143,38,143,42,143,28,143,30,143,37,143,105,144,110,144,104,144,109,144,119,144,48,145,45,145,39,145,49,145,135,145,137,145,139,145,131,145,197,146,187,146,183,146,234,146,172,146,228,146,193,146,179,146,188,146,210,146,199,146,240,146,178,146,173,149,177,149,4,151,6,151,7,151,9,151,96,151,141,151,139,151,143,151,33,152,43,152,28,152,179,152,10,153,19,153,18,153,24,153,221,153,208,153,223,153,219,153,209,153,213,153,210,153,217,153,183,154,238,154,239,154,39,155,69,155,68,155,119,155,111,155,6,157,9,157,3,157,169,158,190,158,206,158,168,88,82,159,18,81,24,81,20,81,16,81,21,81,128,81,170,81,221,81,145,82,147,82,243,82,89,86,107,86,121,86,105,86,100,86,120,86,106,86,104,86,101,86,113,86,111,86,108,86,98,86,118,86,193,88,190,88,199,88,197,88,110,89,29,91,52,91,120,91,240,91,14,92,74,95,178,97,145,97,169,97,138,97,205,97,182,97,190,97,202,97,200,97,48,98,197,100,193,100,203,100,187,100,188,100,218,100,196,100,199,100,194,100,205,100,191,100,210,100,212,100,190,100,116,101,198,102,201,102,185,102,196,102,199,102,184,102,61,106,56,106,58,106,89,106,107,106,88,106,57,106,68,106,98,106,97,106,75,106,71,106,53,106,95,106,72,106,89,107,119,107,5,108,194,111,177,111,161,111,195,111,164,111,193,111,167,111,179,111,192,111,185,111,182,111,166,111,160,111,180,111,190,113,201,113,208,113,210,113,200,113,213,113,185,113,206,113,217,113,220,113,195,113,196,113,104,115,156,116,163,116,152,116,159,116,158,116,226,116,12,117,13,117,52,118,56,118,58,118,231,118,229,118,160,119,158,119,159,119,165,119,232,120,218,120,236,120,231,120,166,121,77,122,78,122,70,122,76,122,75,122,186,122,217,123,17,124,201,123,228,123,219,123,225,123,233,123,230,123,213,124,214,124,10,126,17,126,8,126,27,126,35,126,30,126,29,126,9,126,16,126,121,127,178,127,240,127,241,127,238,127,40,128,179,129,169,129,168,129,251,129,8,130,88,130,89,130,74,133,89,133,72,133,104,133,105,133,67,133,73,133,109,133,106,133,94,133,131,135,159,135,158,135,162,135,141,135,97,136,42,137,50,137,37,137,43,137,33,137,170,137,166,137,230,138,250,138,235,138,241,138,0,139,220,138,231,138,238,138,254,138,1,139,2,139,247,138,237,138,243,138,246,138,252,138,107,140,109,140,147,140,244,140,68,142,49,142,52,142,66,142,57,142,53,142,59,143,47,143,56,143,51,143,168,143,166,143,117,144,116,144,120,144,114,144,124,144,122,144,52,145,146,145,32,147,54,147,248,146,51,147,47,147,34,147,252,146,43,147,4,147,26,147,16,147,38,147,33,147,21,147,46,147,25,147,187,149,167,150,168,150,170,150,213,150,14,151,17,151,22,151,13,151,19,151,15,151,91,151,92,151,102,151,152,151,48,152,56,152,59,152,55,152,45,152,57,152,36,152,16,153,40,153,30,153,27,153,33,153,26,153,237,153,226,153,241,153,184,154,188,154,251,154,237,154,40,155,145,155,21,157,35,157,38,157,40,157,18,157,27,157,216,158,212,158,141,159,156,159,42,81,31,81,33,81,50,81,245,82,142,86,128,86,144,86,133,86,135,86,143,86,213,88,211,88,209,88,206,88,48,91,42,91,36,91,122,91,55,92,104,92,188,93,186,93,189,93,184,93,107,94,76,95,189,95,201,97,194,97,199,97,230,97,203,97,50,98,52,98,206,100,202,100,216,100,224,100,240,100,230,100,236,100,241,100,226,100,237,100,130,101,131,101,217,102,214,102,128,106,148,106,132,106,162,106,156,106,219,106,163,106,126,106,151,106,144,106,160,106,92,107,174,107,218,107,8,108,216,111,241,111,223,111,224,111,219,111,228,111,235,111,239,111,128,111,236,111,225,111,233,111,213,111,238,111,240,111,231,113,223,113,238,113,230,113,229,113,237,113,236,113,244,113,224,113,53,114,70,114,112,115,114,115,169,116,176,116,166,116,168,116,70,118,66,118,76,118,234,118,179,119,170,119,176,119,172,119,167,119,173,119,239,119,247,120,250,120,244,120,239,120,1,121,167,121,170,121,87,122,191,122,7,124,13,124,254,123,247,123,12,124,224,123,224,124,220,124,222,124,226,124,223,124,217,124,221,124,46,126,62,126,70,126,55,126,50,126,67,126,43,126,61,126,49,126,69,126,65,126,52,126,57,126,72,126,53,126,63,126,47,126,68,127,243,127,252,127,113,128,114,128,112,128,111,128,115,128,198,129,195,129,186,129,194,129,192,129,191,129,189,129,201,129,190,129,232,129,9,130,113,130,170,133,132,133,126,133,156,133,145,133,148,133,175,133,155,133,135,133,168,133,138,133,103,134,192,135,209,135,179,135,210,135,198,135,171,135,187,135,186,135,200,135,203,135,59,137,54,137,68,137,56,137,61,137,172,137,14,139,23,139,25,139,27,139,10,139,32,139,29,139,4,139,16,139,65,140,63,140,115,140,250,140,253,140,252,140,248,140,251,140,168,141,73,142,75,142,72,142,74,142,68,143,62,143,66,143,69,143,63,143,127,144,125,144,132,144,129,144,130,144,128,144,57,145,163,145,158,145,156,145,77,147,130,147,40,147,117,147,74,147,101,147,75,147,24,147,126,147,108,147,91,147,112,147,90,147,84,147,202,149,203,149,204,149,200,149,198,149,177,150,184,150,214,150,28,151,30,151,160,151,211,151,70,152,182,152,53,153,1,154,255,153,174,155,171,155,170,155,173,155,59,157,63,157,139,158,207,158,222,158,220,158,221,158,219,158,62,159,75,159,226,83,149,86,174,86,217,88,216,88,56,91,93,95,227,97,51,98,244,100,242,100,254,100,6,101,250,100,251,100,247,100,183,101,220,102,38,103,179,106,172,106,195,106,187,106,184,106,194,106,174,106,175,106,95,107,120,107,175,107,9,112,11,112,254,111,6,112,250,111,17,112,15,112,251,113,252,113,254,113,248,113,119,115,117,115,167,116,191,116,21,117,86,118,88,118,82,118,189,119,191,119,187,119,188,119,14,121,174,121,97,122,98,122,96,122,196,122,197,122,43,124,39,124,42,124,30,124,35,124,33,124,231,124,84,126,85,126,94,126,90,126,97,126,82,126,89,126,72,127,249,127,251,127,119,128,118,128,205,129,207,129,10,130,207,133,169,133,205,133,208,133,201,133,176,133,186,133,185,133,166,133,239,135,236,135,242,135,224,135,134,137,178,137,244,137,40,139,57,139,44,139,43,139,80,140,5,141,89,142,99,142,102,142,100,142,95,142,85,142,192,142,73,143,77,143,135,144,131,144,136,144,171,145,172,145,208,145,148,147,138,147,150,147,162,147,179,147,174,147,172,147,176,147,152,147,154,147,151,147,212,149,214,149,208,149,213,149,226,150,220,150,217,150,219,150,222,150,36,151,163,151,166,151,173,151,249,151,77,152,79,152,76,152,78,152,83,152,186,152,62,153,63,153,61,153,46,153,165,153,14,154,193,154,3,155,6,155,79,155,78,155,77,155,202,155,201,155,253,155,200,155], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+103924);
	/* memory initializer */ allocate([192,155,81,157,93,157,96,157,224,158,21,159,44,159,51,81,165,86,222,88,223,88,226,88,245,91,144,159,236,94,242,97,247,97,246,97,245,97,0,101,15,101,224,102,221,102,229,106,221,106,218,106,211,106,27,112,31,112,40,112,26,112,29,112,21,112,24,112,6,114,13,114,88,114,162,114,120,115,122,115,189,116,202,116,227,116,135,117,134,117,95,118,97,118,199,119,25,121,177,121,107,122,105,122,62,124,63,124,56,124,61,124,55,124,64,124,107,126,109,126,121,126,105,126,106,126,133,127,115,126,182,127,185,127,184,127,216,129,233,133,221,133,234,133,213,133,228,133,229,133,247,133,251,135,5,136,13,136,249,135,254,135,96,137,95,137,86,137,94,137,65,139,92,139,88,139,73,139,90,139,78,139,79,139,70,139,89,139,8,141,10,141,124,142,114,142,135,142,118,142,108,142,122,142,116,142,84,143,78,143,173,143,138,144,139,144,177,145,174,145,225,147,209,147,223,147,195,147,200,147,220,147,221,147,214,147,226,147,205,147,216,147,228,147,215,147,232,147,220,149,180,150,227,150,42,151,39,151,97,151,220,151,251,151,94,152,88,152,91,152,188,152,69,153,73,153,22,154,25,154,13,155,232,155,231,155,214,155,219,155,137,157,97,157,114,157,106,157,108,157,146,158,151,158,147,158,180,158,248,82,168,86,183,86,182,86,180,86,188,86,228,88,64,91,67,91,125,91,246,91,201,93,248,97,250,97,24,101,20,101,25,101,230,102,39,103,236,106,62,112,48,112,50,112,16,114,123,115,207,116,98,118,101,118,38,121,42,121,44,121,43,121,199,122,246,122,76,124,67,124,77,124,239,124,240,124,174,143,125,126,124,126,130,126,76,127,0,128,218,129,102,130,251,133,249,133,17,134,250,133,6,134,11,134,7,134,10,134,20,136,21,136,100,137,186,137,248,137,112,139,108,139,102,139,111,139,95,139,107,139,15,141,13,141,137,142,129,142,133,142,130,142,180,145,203,145,24,148,3,148,253,147,225,149,48,151,196,152,82,153,81,153,168,153,43,154,48,154,55,154,53,154,19,156,13,156,121,158,181,158,232,158,47,159,95,159,99,159,97,159,55,81,56,81,193,86,192,86,194,86,20,89,108,92,205,93,252,97,254,97,29,101,28,101,149,101,233,102,251,106,4,107,250,106,178,107,76,112,27,114,167,114,214,116,212,116,105,118,211,119,80,124,143,126,140,126,188,127,23,134,45,134,26,134,35,136,34,136,33,136,31,136,106,137,108,137,189,137,116,139,119,139,125,139,19,141,138,142,141,142,139,142,95,143,175,143,186,145,46,148,51,148,53,148,58,148,56,148,50,148,43,148,226,149,56,151,57,151,50,151,255,151,103,152,101,152,87,153,69,154,67,154,64,154,62,154,207,154,84,155,81,155,45,156,37,156,175,157,180,157,194,157,184,157,157,158,239,158,25,159,92,159,102,159,103,159,60,81,59,81,200,86,202,86,201,86,127,91,212,93,210,93,78,95,255,97,36,101,10,107,97,107,81,112,88,112,128,115,228,116,138,117,110,118,108,118,179,121,96,124,95,124,126,128,125,128,223,129,114,137,111,137,252,137,128,139,22,141,23,141,145,142,147,142,97,143,72,145,68,148,81,148,82,148,61,151,62,151,195,151,193,151,107,152,85,153,85,154,77,154,210,154,26,155,73,156,49,156,62,156,59,156,211,157,215,157,52,159,108,159,106,159,148,159,204,86,214,93,0,98,35,101,43,101,42,101,236,102,16,107,218,116,202,122,100,124,99,124,101,124,147,126,150,126,148,126,226,129,56,134,63,134,49,136,138,139,144,144,143,144,99,148,96,148,100,148,104,151,111,152,92,153,90,154,91,154,87,154,211,154,212,154,209,154,84,156,87,156,86,156,229,157,159,158,244,158,209,86,233,88,44,101,94,112,113,118,114,118,215,119,80,127,136,127,54,136,57,136,98,136,147,139,146,139,150,139,119,130,27,141,192,145,106,148,66,151,72,151,68,151,198,151,112,152,95,154,34,155,88,155,95,156,249,157,250,157,124,158,125,158,7,159,119,159,114,159,243,94,22,107,99,112,108,124,110,124,59,136,192,137,161,142,193,145,114,148,112,148,113,152,94,153,214,154,35,155,204,158,100,112,218,119,154,139,119,148,201,151,98,154,101,154,156,126,156,139,170,142,197,145,125,148,126,148,124,148,119,156,120,156,247,158,84,140,127,148,26,158,40,114,106,154,49,155,27,158,30,158,114,124,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,54,78,63,78,133,78,160,78,130,81,150,81,171,81,249,82,56,83,105,83,182,83,10,89,128,91,219,93,122,94,127,94,244,94,80,95,97,95,52,101,224,101,146,117,118,118,181,143,182,150,168,0,198,2,253,48,254,48,157,48,158,48,0,0,0,0,5,48,6,48,7,48,252,48,59,255,61,255,61,39,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,231,33,184,33,185,33,207,49,204,0,90,78,138,0,2,82,145,68,176,159,136,81,177,159,7,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,255,228,255,7,255,2,255,49,50,22,33,33,33,155,48,156,48,128,46,132,46,134,46,135,46,136,46,138,46,140,46,141,46,149,46,156,46,157,46,165,46,167,46,170,46,172,46,174,46,182,46,188,46,190,46,198,46,202,46,204,46,205,46,207,46,214,46,215,46,222,46,227,46,0,0,0,0,0,0,131,2,80,2,91,2,84,2,117,2,83,1,248,0,75,1,138,2,106,2,66,78,92,78,245,81,26,83,130,83,7,78,12,78,71,78,141,78,215,86,12,250,110,92,115,95,15,78,135,81,14,78,46,78,147,78,194,78,201,78,200,78,152,81,252,82,108,83,185,83,32,87,3,89,44,89,16,92,255,93,225,101,179,107,204,107,20,108,63,114,49,78,60,78,232,78,220,78,233,78,225,78,221,78,218,78,12,82,28,83,76,83,34,87,35,87,23,89,47,89,129,91,132,91,18,92,59,92,116,92,115,92,4,94,128,94,130,94,201,95,9,98,80,98,21,108,54,108,67,108,63,108,59,108,174,114,176,114,138,115,184,121,138,128,30,150,14,79,24,79,44,79,245,78,20,79,241,78,0,79,247,78,8,79,29,79,2,79,5,79,34,79,19,79,4,79,244,78,18,79,177,81,19,82,9,82,16,82,166,82,34,83,31,83,77,83,138,83,7,84,225,86,223,86,46,87,42,87,52,87,60,89,128,89,124,89,133,89,123,89,126,89,119,89,127,89,86,91,21,92,37,92,124,92,122,92,123,92,126,92,223,93,117,94,132,94,2,95,26,95,116,95,213,95,212,95,207,95,92,98,94,98,100,98,97,98,102,98,98,98,89,98,96,98,90,98,101,98,239,101,238,101,62,103,57,103,56,103,59,103,58,103,63,103,60,103,51,103,24,108,70,108,82,108,92,108,79,108,74,108,84,108,75,108,76,108,113,112,94,114,180,114,181,114,142,115,42,117,127,118,117,122,81,127,120,130,124,130,128,130,125,130,127,130,77,134,126,137,153,144,151,144,152,144,155,144,148,144,34,150,36,150,32,150,35,150,86,79,59,79,98,79,73,79,83,79,100,79,62,79,103,79,82,79,95,79,65,79,88,79,45,79,51,79,63,79,97,79,143,81,185,81,28,82,30,82,33,82,173,82,174,82,9,83,99,83,114,83,142,83,143,83,48,84,55,84,42,84,84,84,69,84,25,84,28,84,37,84,24,84,61,84,79,84,65,84,40,84,36,84,71,84,238,86,231,86,229,86,65,87,69,87,76,87,73,87,75,87,82,87,6,89,64,89,166,89,152,89,160,89,151,89,142,89,162,89,144,89,143,89,167,89,161,89,142,91,146,91,40,92,42,92,141,92,143,92,136,92,139,92,137,92,146,92,138,92,134,92,147,92,149,92,224,93,10,94,14,94,139,94,137,94,140,94,136,94,141,94,5,95,29,95,120,95,118,95,210,95,209,95,208,95,237,95,232,95,238,95,243,95,225,95,228,95,227,95,250,95,239,95,247,95,251,95,0,96,244,95,58,98,131,98,140,98,142,98,143,98,148,98,135,98,113,98,123,98,122,98,112,98,129,98,136,98,119,98,125,98,114,98,116,98,55,101,240,101,244,101,243,101,242,101,245,101,69,103,71,103,89,103,85,103,76,103,72,103,93,103,77,103,90,103,75,103,208,107,25,108,26,108,120,108,103,108,107,108,132,108,139,108,143,108,113,108,111,108,105,108,154,108,109,108,135,108,149,108,156,108,102,108,115,108,101,108,123,108,142,108,116,112,122,112,99,114,191,114,189,114,195,114,198,114,193,114,186,114,197,114,149,115,151,115,147,115,148,115,146,115,58,117,57,117,148,117,149,117,129,118,61,121,52,128,149,128,153,128,144,128,146,128,156,128,144,130,143,130,133,130,142,130,145,130,147,130,138,130,131,130,132,130,120,140,201,143,191,143,159,144,161,144,165,144,158,144,167,144,160,144,48,150,40,150,47,150,45,150,51,78,152,79,124,79,133,79,125,79,128,79,135,79,118,79,116,79,137,79,132,79,119,79,76,79,151,79,106,79,154,79,121,79,129,79,120,79,144,79,156,79,148,79,158,79,146,79,130,79,149,79,107,79,110,79,158,81,188,81,190,81,53,82,50,82,51,82,70,82,49,82,188,82,10,83,11,83,60,83,146,83,148,83,135,84,127,84,129,84,145,84,130,84,136,84,107,84,122,84,126,84,101,84,108,84,116,84,102,84,141,84,111,84,97,84,96,84,152,84,99,84,103,84,100,84,247,86,249,86,111,87,114,87,109,87,107,87,113,87,112,87,118,87,128,87,117,87,123,87,115,87,116,87,98,87,104,87,125,87,12,89,69,89,181,89,186,89,207,89,206,89,178,89,204,89,193,89,182,89,188,89,195,89,214,89,177,89,189,89,192,89,200,89,180,89,199,89,98,91,101,91,147,91,149,91,68,92,71,92,174,92,164,92,160,92,181,92,175,92,168,92,172,92,159,92,163,92,173,92,162,92,170,92,167,92,157,92,165,92,182,92,176,92,166,92,23,94,20,94,25,94,40,95,34,95,35,95,36,95,84,95,130,95,126,95,125,95,222,95,229,95,45,96,38,96,25,96,50,96,11,96,52,96,10,96,23,96,51,96,26,96,30,96,44,96,34,96,13,96,16,96,46,96,19,96,17,96,12,96,9,96,28,96,20,98,61,98,173,98,180,98,209,98,190,98,170,98,182,98,202,98,174,98,179,98,175,98,187,98,169,98,176,98,184,98,61,101,168,101,187,101,9,102,252,101,4,102,18,102,8,102,251,101,3,102,11,102,13,102,5,102,253,101,17,102,16,102,246,102,10,103,133,103,108,103,142,103,146,103,118,103,123,103,152,103,134,103,132,103,116,103,141,103,140,103,122,103,159,103,145,103,153,103,131,103,125,103,129,103,120,103,121,103,148,103,37,107,128,107,126,107,222,107,29,108,147,108,236,108,235,108,238,108,217,108,182,108,212,108,173,108,231,108,183,108,208,108,194,108,186,108,195,108,198,108,237,108,242,108,210,108,221,108,180,108,138,108,157,108,128,108,222,108,192,108,48,109,205,108,199,108,176,108,249,108,207,108,233,108,209,108,148,112,152,112,133,112,147,112,134,112,132,112,145,112,150,112,130,112,154,112,131,112,106,114,214,114,203,114,216,114,201,114,220,114,210,114,212,114,218,114,204,114,209,114,164,115,161,115,173,115,166,115,162,115,160,115,172,115,157,115,221,116,232,116,63,117,64,117,62,117,140,117,152,117,175,118,243,118,241,118,240,118,245,118,248,119,252,119,249,119,251,119,250,119,247,119,66,121,63,121,197,121,120,122,123,122,251,122,117,124,253,124,53,128,143,128,174,128,163,128,184,128,181,128,173,128,32,130,160,130,192,130,171,130,154,130,152,130,155,130,181,130,167,130,174,130,188,130,158,130,186,130,180,130,168,130,161,130,169,130,194,130,164,130,195,130,182,130,162,130,112,134,111,134,109,134,110,134,86,140,210,143,203,143,211,143,205,143,214,143,213,143,215,143,178,144,180,144,175,144,179,144,176,144,57,150,61,150,60,150,58,150,67,150,205,79,197,79,211,79,178,79,201,79,203,79,193,79,212,79,220,79,217,79,187,79,179,79,219,79,199,79,214,79,186,79,192,79,185,79,236,79,68,82,73,82,192,82,194,82,61,83,124,83,151,83,150,83,153,83,152,83,186,84,161,84,173,84,165,84,207,84,195,84,13,131,183,84,174,84,214,84,182,84,197,84,198,84,160,84,112,84,188,84,162,84,190,84,114,84,222,84,176,84,181,87,158,87,159,87,164,87,140,87,151,87,157,87,155,87,148,87,152,87,143,87,153,87,165,87,154,87,149,87,244,88,13,89,83,89,225,89,222,89,238,89,0,90,241,89,221,89,250,89,253,89,252,89,246,89,228,89,242,89,247,89,219,89,233,89,243,89,245,89,224,89,254,89,244,89,237,89,168,91,76,92,208,92,216,92,204,92,215,92,203,92,219,92,222,92,218,92,201,92,199,92,202,92,214,92,211,92,212,92,207,92,200,92,198,92,206,92,223,92,248,92,249,93,33,94,34,94,35,94,32,94,36,94,176,94,164,94,162,94,155,94,163,94,165,94,7,95,46,95,86,95,134,95,55,96,57,96,84,96,114,96,94,96,69,96,83,96,71,96,73,96,91,96,76,96,64,96,66,96,95,96,36,96,68,96,88,96,102,96,110,96,66,98,67,98,207,98,13,99,11,99,245,98,14,99,3,99,235,98,249,98,15,99,12,99,248,98,246,98,0,99,19,99,20,99,250,98,21,99,251,98,240,98,65,101,67,101,170,101,191,101,54,102,33,102,50,102,53,102,28,102,38,102,34,102,51,102,43,102,58,102,29,102,52,102,57,102,46,102,15,103,16,103,193,103,242,103,200,103,186,103,220,103,187,103,248,103,216,103,192,103,183,103,197,103,235,103,228,103,223,103,181,103,205,103,179,103,247,103,246,103,238,103,227,103,194,103,185,103,206,103,231,103,240,103,178,103,252,103,198,103,237,103,204,103,174,103,230,103,219,103,250,103,201,103,202,103,195,103,234,103,203,103,40,107,130,107,132,107,182,107,214,107,216,107,224,107,32,108,33,108,40,109,52,109,45,109,31,109,60,109,63,109,18,109,10,109,218,108,51,109,4,109,25,109,58,109,26,109,17,109,0,109,29,109,66,109,1,109,24,109,55,109,3,109,15,109,64,109,7,109,32,109,44,109,8,109,34,109,9,109,16,109,183,112,159,112,190,112,177,112,176,112,161,112,180,112,181,112,169,112,65,114,73,114,74,114,108,114,112,114,115,114,110,114,202,114,228,114,232,114,235,114,223,114,234,114,230,114,227,114,133,115,204,115,194,115,200,115,197,115,185,115,182,115,181,115,180,115,235,115,191,115,199,115,190,115,195,115,198,115,184,115,203,115,236,116,238,116,46,117,71,117,72,117,167,117,170,117,121,118,196,118,8,119,3,119,4,119,5,119,10,119,247,118,251,118,250,118,231,119,232,119,6,120,17,120,18,120,5,120,16,120,15,120,14,120,9,120,3,120,19,120,74,121,76,121,75,121,69,121,68,121,213,121,205,121,207,121,214,121,206,121,128,122,126,122,209,122,0,123,1,123,122,124,120,124,121,124,127,124,128,124,129,124,3,125,8,125,1,125,88,127,145,127,141,127,190,127,7,128,14,128,15,128,20,128,55,128,216,128,199,128,224,128,209,128,200,128,194,128,208,128,197,128,227,128,217,128,220,128,202,128,213,128,201,128,207,128,215,128,230,128,205,128,255,129,33,130,148,130,217,130,254,130,249,130,7,131,232,130,0,131,213,130,58,131,235,130,214,130,244,130,236,130,225,130,242,130,245,130,12,131,251,130,246,130,240,130,234,130,228,130,224,130,250,130,243,130,237,130,119,134,116,134,124,134,115,134,65,136,78,136,103,136,106,136,105,136,211,137,4,138,7,138,114,141,227,143,225,143,238,143,224,143,241,144,189,144,191,144,213,144,197,144,190,144,199,144,203,144,200,144,212,145,211,145,84,150,79,150,81,150,83,150,74,150,78,150,30,80,5,80,7,80,19,80,34,80,48,80,27,80,245,79,244,79,51,80,55,80,44,80,246,79,247,79,23,80,28,80,32,80,39,80,53,80,47,80,49,80,14,80,90,81,148,81,147,81,202,81,196,81,197,81,200,81,206,81,97,82,90,82,82,82,94,82,95,82,85,82,98,82,205,82,14,83,158,83,38,85,226,84,23,85,18,85,231,84,243,84,228,84,26,85,255,84,4,85,8,85,235,84,17,85,5,85,241,84,10,85,251,84,247,84,248,84,224,84,14,85,3,85,11,85,1,87,2,87,204,87,50,88,213,87,210,87,186,87,198,87,189,87,188,87,184,87,182,87,191,87,199,87,208,87,185,87,193,87,14,89,74,89,25,90,22,90,45,90,46,90,21,90,15,90,23,90,10,90,30,90,51,90,108,91,167,91,173,91,172,91,3,92,86,92,84,92,236,92,255,92,238,92,241,92,247,92,0,93,249,92,41,94,40,94,168,94,174,94,170,94,172,94,51,95,48,95,103,95,93,96,90,96,103,96,65,96,162,96,136,96,128,96,146,96,129,96,157,96,131,96,149,96,155,96,151,96,135,96,156,96,142,96,25,98,70,98,242,98,16,99,86,99,44,99,68,99,69,99,54,99,67,99,228,99,57,99,75,99,74,99,60,99,41,99,65,99,52,99,88,99,84,99,89,99,45,99,71,99,51,99,90,99,81,99,56,99,87,99,64,99,72,99,74,101,70,101,198,101,195,101,196,101,194,101,74,102,95,102,71,102,81,102,18,103,19,103,31,104,26,104,73,104,50,104,51,104,59,104,75,104,79,104,22,104,49,104,28,104,53,104,43,104,45,104,47,104,78,104,68,104,52,104,29,104,18,104,20,104,38,104,40,104,46,104,77,104,58,104,37,104,32,104,44,107,47,107,45,107,49,107,52,107,109,107,130,128,136,107,230,107,228,107,232,107,227,107,226,107,231,107,37,108,122,109,99,109,100,109,118,109,13,109,97,109,146,109,88,109,98,109,109,109,111,109,145,109,141,109,239,109,127,109,134,109,94,109,103,109,96,109,151,109,112,109,124,109,95,109,130,109,152,109,47,109,104,109,139,109,126,109,128,109,132,109,22,109,131,109,123,109,125,109,117,109,144,109,220,112,211,112,209,112,221,112,203,112,57,127,226,112,215,112,210,112,222,112,224,112,212,112,205,112,197,112,198,112,199,112,218,112,206,112,225,112,66,114,120,114,119,114,118,114,0,115,250,114,244,114,254,114,246,114,243,114,251,114,1,115,211,115,217,115,229,115,214,115,188,115,231,115,227,115,233,115,220,115,210,115,219,115,212,115,221,115,218,115,215,115,216,115,232,115,222,116,223,116,244,116,245,116,33,117,91,117,95,117,176,117,193,117,187,117,196,117,192,117,191,117,182,117,186,117,138,118,201,118,29,119,27,119,16,119,19,119,18,119,35,119,17,119,21,119,25,119,26,119,34,119,39,119,35,120,44,120,34,120,53,120,47,120,40,120,46,120,43,120,33,120,41,120,51,120,42,120,49,120,84,121,91,121,79,121,92,121,83,121,82,121,81,121,235,121,236,121,224,121,238,121,237,121,234,121,220,121,222,121,221,121,134,122,137,122,133,122,139,122,140,122,138,122,135,122,216,122,16,123,4,123,19,123,5,123,15,123,8,123,10,123,14,123,9,123,18,123,132,124,145,124,138,124,140,124,136,124,141,124,133,124,30,125,29,125,17,125,14,125,24,125,22,125,19,125,31,125,18,125,15,125,12,125,92,127,97,127,94,127,96,127,93,127,91,127,150,127,146,127,195,127,194,127,192,127,22,128,62,128,57,128,250,128,242,128,249,128,245,128,1,129,251,128,0,129,1,130,47,130,37,130,51,131,45,131,68,131,25,131,81,131,37,131,86,131,63,131,65,131,38,131,28,131,34,131,66,131,78,131,27,131,42,131,8,131,60,131,77,131,22,131,36,131,32,131,55,131,47,131,41,131,71,131,69,131,76,131,83,131,30,131,44,131,75,131,39,131,72,131,83,134,82,134,162,134,168,134,150,134,141,134,145,134,158,134,135,134,151,134,134,134,139,134,154,134,133,134,165,134,153,134,161,134,167,134,149,134,152,134,142,134,157,134,144,134,148,134,67,136,68,136,109,136,117,136,118,136,114,136,128,136,113,136,127,136,111,136,131,136,126,136,116,136,124,136,18,138,71,140,87,140,123,140,164,140,163,140,118,141,120,141,181,141,183,141,182,141,209,142,211,142,254,143,245,143,2,144,255,143,251,143,4,144,252,143,246,143,214,144,224,144,217,144,218,144,227,144,223,144,229,144,216,144,219,144,215,144,220,144,228,144,80,145,78,145,79,145,213,145,226,145,218,145,92,150,95,150,188,150,227,152,223,154,47,155,127,78,112,80,106,80,97,80,94,80,96,80,83,80,75,80,93,80,114,80,72,80,77,80,65,80,91,80,74,80,98,80,21,80,69,80,95,80,105,80,107,80,99,80,100,80,70,80,64,80,110,80,115,80,87,80,81,80,208,81,107,82,109,82,108,82,110,82,214,82,211,82,45,83,156,83,117,85,118,85,60,85,77,85,80,85,52,85,42,85,81,85,98,85,54,85,53,85,48,85,82,85,69,85,12,85,50,85,101,85,78,85,57,85,72,85,45,85,59,85,64,85,75,85,10,87,7,87,251,87,20,88,226,87,246,87,220,87,244,87,0,88,237,87,253,87,8,88,248,87,11,88,243,87,207,87,7,88,238,87,227,87,242,87,229,87,236,87,225,87,14,88,252,87,16,88,231,87,1,88,12,88,241,87,233,87,240,87,13,88,4,88,92,89,96,90,88,90,85,90,103,90,94,90,56,90,53,90,109,90,80,90,95,90,101,90,108,90,83,90,100,90,87,90,67,90,93,90,82,90,68,90,91,90,72,90,142,90,62,90,77,90,57,90,76,90,112,90,105,90,71,90,81,90,86,90,66,90,92,90,114,91,110,91,193,91,192,91,89,92,30,93,11,93,29,93,26,93,32,93,12,93,40,93,13,93,38,93,37,93,15,93,48,93,18,93,35,93,31,93,46,93,62,94,52,94,177,94,180,94,185,94,178,94,179,94,54,95,56,95,155,95,150,95,159,95,138,96,144,96,134,96,190,96,176,96,186,96,211,96,212,96,207,96,228,96,217,96,221,96,200,96,177,96,219,96,183,96,202,96,191,96,195,96,205,96,192,96,50,99,101,99,138,99,130,99,125,99,189,99,158,99,173,99,157,99,151,99,171,99,142,99,111,99,135,99,144,99,110,99,175,99,117,99,156,99,109,99,174,99,124,99,164,99,59,99,159,99,120,99,133,99,129,99,145,99,141,99,112,99,83,101,205,101,101,102,97,102,91,102,89,102,92,102,98,102,24,103,121,104,135,104,144,104,156,104,109,104,110,104,174,104,171,104,86,105,111,104,163,104,172,104,169,104,117,104,116,104,178,104,143,104,119,104,146,104,124,104,107,104,114,104,170,104,128,104,113,104,126,104,155,104,150,104,139,104,160,104,137,104,164,104,120,104,123,104,145,104,140,104,138,104,125,104,54,107,51,107,55,107,56,107,145,107,143,107,141,107,142,107,140,107,42,108,192,109,171,109,180,109,179,109,116,110,172,109,233,109,226,109,183,109,246,109,212,109,0,110,200,109,224,109,223,109,214,109,190,109,229,109,220,109,221,109,219,109,244,109,202,109,189,109,237,109,240,109,186,109,213,109,194,109,207,109,201,109,208,109,242,109,211,109,253,109,215,109,205,109,227,109,187,109,250,112,13,113,247,112,23,113,244,112,12,113,240,112,4,113,243,112,16,113,252,112,255,112,6,113,19,113,0,113,248,112,246,112,11,113,2,113,14,113,126,114,123,114,124,114,127,114,29,115,23,115,7,115,17,115,24,115,10,115,8,115,255,114,15,115,30,115,136,115,246,115,248,115,245,115,4,116,1,116,253,115,7,116,0,116,250,115,252,115,255,115,12,116,11,116,244,115,8,116,100,117,99,117,206,117,210,117,207,117,203,117,204,117,209,117,208,117,143,118,137,118,211,118,57,119,47,119,45,119,49,119,50,119,52,119,51,119,61,119,37,119,59,119,53,119,72,120,82,120,73,120,77,120,74,120,76,120,38,120,69,120,80,120,100,121,103,121,105,121,106,121,99,121,107,121,97,121,187,121,250,121,248,121,246,121,247,121,143,122,148,122,144,122,53,123,71,123,52,123,37,123,48,123,34,123,36,123,51,123,24,123,42,123,29,123,49,123,43,123,45,123,47,123,50,123,56,123,26,123,35,123,148,124,152,124,150,124,163,124,53,125,61,125,56,125,54,125,58,125,69,125,44,125,41,125,65,125,71,125,62,125,63,125,74,125,59,125,40,125,99,127,149,127,156,127,157,127,155,127,202,127,203,127,205,127,208,127,209,127,199,127,207,127,201,127,31,128,30,128,27,128,71,128,67,128,72,128,24,129,37,129,25,129,27,129,45,129,31,129,44,129,30,129,33,129,21,129,39,129,29,129,34,129,17,130,56,130,51,130,58,130,52,130,50,130,116,130,144,131,163,131,168,131,141,131,122,131,115,131,164,131,116,131,143,131,129,131,149,131,153,131,117,131,148,131,169,131,125,131,131,131,140,131,157,131,155,131,170,131,139,131,126,131,165,131,175,131,136,131,151,131,176,131,127,131,166,131,135,131,174,131,118,131,154,131,89,134,86,134,191,134,183,134,194,134,193,134,197,134,186,134,176,134,200,134,185,134,179,134,184,134,204,134,180,134,187,134,188,134,195,134,189,134,190,134,82,136,137,136,149,136,168,136,162,136,170,136,154,136,145,136,161,136,159,136,152,136,167,136,153,136,155,136,151,136,164,136,172,136,140,136,147,136,142,136,130,137,214,137,217,137,213,137,48,138,39,138,44,138,30,138,57,140,59,140,92,140,93,140,125,140,165,140,125,141,123,141,121,141,188,141,194,141,185,141,191,141,193,141,216,142,222,142,221,142,220,142,215,142,224,142,225,142,36,144,11,144,17,144,28,144,12,144,33,144,239,144,234,144,240,144,244,144,242,144,243,144,212,144,235,144,236,144,233,144,86,145,88,145,90,145,83,145,85,145,236,145,244,145,241,145,243,145,248,145,228,145,249,145,234,145,235,145,247,145,232,145,238,145,122,149,134,149,136,149,124,150,109,150,107,150,113,150,111,150,191,150,106,151,4,152,229,152,151,153,155,80,149,80,148,80,158,80,139,80,163,80,131,80,140,80,142,80,157,80,104,80,156,80,146,80,130,80,135,80,95,81,212,81,18,83,17,83,164,83,167,83,145,85,168,85,165,85,173,85,119,85,69,86,162,85,147,85,136,85,143,85,181,85,129,85,163,85,146,85,164,85,125,85,140,85,166,85,127,85,149,85,161,85,142,85,12,87,41,88,55,88,25,88,30,88,39,88,35,88,40,88,245,87,72,88,37,88,28,88,27,88,51,88,63,88,54,88,46,88,57,88,56,88,45,88,44,88,59,88,97,89,175,90,148,90,159,90,122,90,162,90,158,90,120,90,166,90,124,90,165,90,172,90,149,90,174,90,55,90,132,90,138,90,151,90,131,90,139,90,169,90,123,90,125,90,140,90,156,90,143,90,147,90,157,90,234,91,205,91,203,91,212,91,209,91,202,91,206,91,12,92,48,92,55,93,67,93,107,93,65,93,75,93,63,93,53,93,81,93,78,93,85,93,51,93,58,93,82,93,61,93,49,93,89,93,66,93,57,93,73,93,56,93,60,93,50,93,54,93,64,93,69,93,68,94,65,94,88,95,166,95,165,95,171,95,201,96,185,96,204,96,226,96,206,96,196,96,20,97,242,96,10,97,22,97,5,97,245,96,19,97,248,96,252,96,254,96,193,96,3,97,24,97,29,97,16,97,255,96,4,97,11,97,74,98,148,99,177,99,176,99,206,99,229,99,232,99,239,99,195,99,157,100,243,99,202,99,224,99,246,99,213,99,242,99,245,99,97,100,223,99,190,99,221,99,220,99,196,99,216,99,211,99,194,99,199,99,204,99,203,99,200,99,240,99,215,99,217,99,50,101,103,101,106,101,100,101,92,101,104,101,101,101,140,101,157,101,158,101,174,101,208,101,210,101,124,102,108,102,123,102,128,102,113,102,121,102,106,102,114,102,1,103,12,105,211,104,4,105,220,104,42,105,236,104,234,104,241,104,15,105,214,104,247,104,235,104,228,104,246,104,19,105,16,105,243,104,225,104,7,105,204,104,8,105,112,105,180,104,17,105,239,104,198,104,20,105,248,104,208,104,253,104,252,104,232,104,11,105,10,105,23,105,206,104,200,104,221,104,222,104,230,104,244,104,209,104,6,105,212,104,233,104,21,105,37,105,199,104,57,107,59,107,63,107,60,107,148,107,151,107,153,107,149,107,189,107,240,107,242,107,243,107,48,108,252,109,70,110,71,110,31,110,73,110,136,110,60,110,61,110,69,110,98,110,43,110,63,110,65,110,93,110,115,110,28,110,51,110,75,110,64,110,81,110,59,110,3,110,46,110,94,110,104,110,92,110,97,110,49,110,40,110,96,110,113,110,107,110,57,110,34,110,48,110,83,110,101,110,39,110,120,110,100,110,119,110,85,110,121,110,82,110,102,110,53,110,54,110,90,110,32,113,30,113,47,113,251,112,46,113,49,113,35,113,37,113,34,113,50,113,31,113,40,113,58,113,27,113,75,114,90,114,136,114,137,114,134,114,133,114,139,114,18,115,11,115,48,115,34,115,49,115,51,115,39,115,50,115,45,115,38,115,35,115,53,115,12,115,46,116,44,116,48,116,43,116,22,116,26,116,33,116,45,116,49,116,36,116,35,116,29,116,41,116,32,116,50,116,251,116,47,117,111,117,108,117,231,117,218,117,225,117,230,117,221,117,223,117,228,117,215,117,149,118,146,118,218,118,70,119,71,119,68,119,77,119,69,119,74,119,78,119,75,119,76,119,222,119,236,119,96,120,100,120,101,120,92,120,109,120,113,120,106,120,110,120,112,120,105,120,104,120,94,120,98,120,116,121,115,121,114,121,112,121,2,122,10,122,3,122,12,122,4,122,153,122,230,122,228,122,74,123,59,123,68,123,72,123,76,123,78,123,64,123,88,123,69,123,162,124,158,124,168,124,161,124,88,125,111,125,99,125,83,125,86,125,103,125,106,125,79,125,109,125,92,125,107,125,82,125,84,125,105,125,81,125,95,125,78,125,62,127,63,127,101,127,102,127,162,127,160,127,161,127,215,127,81,128,79,128,80,128,254,128,212,128,67,129,74,129,82,129,79,129,71,129,61,129,77,129,58,129,230,129,238,129,247,129,248,129,249,129,4,130,60,130,61,130,63,130,117,130,59,131,207,131,249,131,35,132,192,131,232,131,18,132,231,131,228,131,252,131,246,131,16,132,198,131,200,131,235,131,227,131,191,131,1,132,221,131,229,131,216,131,255,131,225,131,203,131,206,131,214,131,245,131,201,131,9,132,15,132,222,131,17,132,6,132,194,131,243,131,213,131,250,131,199,131,209,131,234,131,19,132,195,131,236,131,238,131,196,131,251,131,215,131,226,131,27,132,219,131,254,131,216,134,226,134,230,134,211,134,227,134,218,134,234,134,221,134,235,134,220,134,236,134,233,134,215,134,232,134,209,134,72,136,86,136,85,136,186,136,215,136,185,136,184,136,192,136,190,136,182,136,188,136,183,136,189,136,178,136,1,137,201,136,149,137,152,137,151,137,221,137,218,137,219,137,78,138,77,138,57,138,89,138,64,138,87,138,88,138,68,138,69,138,82,138,72,138,81,138,74,138,76,138,79,138,95,140,129,140,128,140,186,140,190,140,176,140,185,140,181,140,132,141,128,141,137,141,216,141,211,141,205,141,199,141,214,141,220,141,207,141,213,141,217,141,200,141,215,141,197,141,239,142,247,142,250,142,249,142,230,142,238,142,229,142,245,142,231,142,232,142,246,142,235,142,241,142,236,142,244,142,233,142,45,144,52,144,47,144,6,145,44,145,4,145,255,144,252,144,8,145,249,144,251,144,1,145,0,145,7,145,5,145,3,145,97,145,100,145,95,145,98,145,96,145,1,146,10,146,37,146,3,146,26,146,38,146,15,146,12,146,0,146,18,146,255,145,253,145,6,146,4,146,39,146,2,146,28,146,36,146,25,146,23,146,5,146,22,146,123,149,141,149,140,149,144,149,135,150,126,150,136,150,137,150,131,150,128,150,194,150,200,150,195,150,241,150,240,150,108,151,112,151,110,151,7,152,169,152,235,152,230,156,249,158,131,78,132,78,182,78,189,80,191,80,198,80,174,80,196,80,202,80,180,80,200,80,194,80,176,80,193,80,186,80,177,80,203,80,201,80,182,80,184,80,215,81,122,82,120,82,123,82,124,82,195,85,219,85,204,85,208,85,203,85,202,85,221,85,192,85,212,85,196,85,233,85,191,85,210,85,141,85,207,85,213,85,226,85,214,85,200,85,242,85,205,85,217,85,194,85,20,87,83,88,104,88,100,88,79,88,77,88,73,88,111,88,85,88,78,88,93,88,89,88,101,88,91,88,61,88,99,88,113,88,252,88,199,90,196,90,203,90,186,90,184,90,177,90,181,90,176,90,191,90,200,90,187,90,198,90,183,90,192,90,202,90,180,90,182,90,205,90,185,90,144,90,214,91,216,91,217,91,31,92,51,92,113,93,99,93,74,93,101,93,114,93,108,93,94,93,104,93,103,93,98,93,240,93,79,94,78,94,74,94,77,94,75,94,197,94,204,94,198,94,203,94,199,94,64,95,175,95,173,95,247,96,73,97,74,97,43,97,69,97,54,97,50,97,46,97,70,97,47,97,79,97,41,97,64,97,32,98,104,145,35,98,37,98,36,98,197,99,241,99,235,99,16,100,18,100,9,100,32,100,36,100,51,100,67,100,31,100,21,100,24,100,57,100,55,100,34,100,35,100,12,100,38,100,48,100,40,100,65,100,53,100,47,100,10,100,26,100,64,100,37,100,39,100,11,100,231,99,27,100,46,100,33,100,14,100,111,101,146,101,211,101,134,102,140,102,149,102,144,102,139,102,138,102,153,102,148,102,120,102,32,103,102,105,95,105,56,105,78,105,98,105,113,105,63,105,69,105,106,105,57,105,66,105,87,105,89,105,122,105,72,105,73,105,53,105,108,105,51,105,61,105,101,105,240,104,120,105,52,105,105,105,64,105,111,105,68,105,118,105,88,105,65,105,116,105,76,105,59,105,75,105,55,105,92,105,79,105,81,105,50,105,82,105,47,105,123,105,60,105,70,107,69,107,67,107,66,107,72,107,65,107,155,107,13,250,251,107,252,107,249,107,247,107,248,107,155,110,214,110,200,110,143,110,192,110,159,110,147,110,148,110,160,110,177,110,185,110,198,110,210,110,189,110,193,110,158,110,201,110,183,110,176,110,205,110,166,110,207,110,178,110,190,110,195,110,220,110,216,110,153,110,146,110,142,110,141,110,164,110,161,110,191,110,179,110,208,110,202,110,151,110,174,110,163,110,71,113,84,113,82,113,99,113,96,113,65,113,93,113,98,113,114,113,120,113,106,113,97,113,66,113,88,113,67,113,75,113,112,113,95,113,80,113,83,113,68,113,77,113,90,113,79,114,141,114,140,114,145,114,144,114,142,114,60,115,66,115,59,115,58,115,64,115,74,115,73,115,68,116,74,116,75,116,82,116,81,116,87,116,64,116,79,116,80,116,78,116,66,116,70,116,77,116,84,116,225,116,255,116,254,116,253,116,29,117,121,117,119,117,131,105,239,117,15,118,3,118,247,117,254,117,252,117,249,117,248,117,16,118,251,117,246,117,237,117,245,117,253,117,153,118,181,118,221,118,85,119,95,119,96,119,82,119,86,119,90,119,105,119,103,119,84,119,89,119,109,119,224,119,135,120,154,120,148,120,143,120,132,120,149,120,133,120,134,120,161,120,131,120,121,120,153,120,128,120,150,120,123,120,124,121,130,121,125,121,121,121,17,122,24,122,25,122,18,122,23,122,21,122,34,122,19,122,27,122,16,122,163,122,162,122,158,122,235,122,102,123,100,123,109,123,116,123,105,123,114,123,101,123,115,123,113,123,112,123,97,123,120,123,118,123,99,123,178,124,180,124,175,124,136,125,134,125,128,125,141,125,127,125,133,125,122,125,142,125,123,125,131,125,124,125,140,125,148,125,132,125,125,125,146,125,109,127,107,127,103,127,104,127,108,127,166,127,165,127,167,127,219,127,220,127,33,128,100,129,96,129,119,129,92,129,105,129,91,129,98,129,114,129,33,103,94,129,118,129,103,129,111,129,68,129,97,129,29,130,73,130,68,130,64,130,66,130,69,130,241,132,63,132,86,132,118,132,121,132,143,132,141,132,101,132,81,132,64,132,134,132,103,132,48,132,77,132,125,132,90,132,89,132,116,132,115,132,93,132,7,133,94,132,55,132,58,132,52,132,122,132,67,132,120,132,50,132,69,132,41,132,217,131,75,132,47,132,66,132,45,132,95,132,112,132,57,132,78,132,76,132,82,132,111,132,197,132,142,132,59,132,71,132,54,132,51,132,104,132,126,132,68,132,43,132,96,132,84,132,110,132,80,132,11,135,4,135,247,134,12,135,250,134,214,134,245,134,77,135,248,134,14,135,9,135,1,135,246,134,13,135,5,135,214,136,203,136,205,136,206,136,222,136,219,136,218,136,204,136,208,136,133,137,155,137,223,137,229,137,228,137,225,137,224,137,226,137,220,137,230,137,118,138,134,138,127,138,97,138,63,138,119,138,130,138,132,138,117,138,131,138,129,138,116,138,122,138,60,140,75,140,74,140,101,140,100,140,102,140,134,140,132,140,133,140,204,140,104,141,105,141,145,141,140,141,142,141,143,141,141,141,147,141,148,141,144,141,146,141,240,141,224,141,236,141,241,141,238,141,208,141,233,141,227,141,226,141,231,141,242,141,235,141,244,141,6,143,255,142,1,143,0,143,5,143,7,143,8,143,2,143,11,143,82,144,63,144,68,144,73,144,61,144,16,145,13,145,15,145,17,145,22,145,20,145,11,145,14,145,110,145,111,145,72,146,82,146,48,146,58,146,102,146,51,146,101,146,94,146,131,146,46,146,74,146,70,146,109,146,108,146,79,146,96,146,103,146,111,146,54,146,97,146,112,146,49,146,84,146,99,146,80,146,114,146,78,146,83,146,76,146,86,146,50,146,159,149,156,149,158,149,155,149,146,150,147,150,145,150,151,150,206,150,250,150,253,150,248,150,245,150,115,151,119,151,120,151,114,151,15,152,13,152,14,152,172,152,246,152,249,152,175,153,178,153,176,153,181,153,173,154,171,154,91,155,234,156,237,156,231,156,128,158,253,158,230,80,212,80,215,80,232,80,243,80,219,80,234,80,221,80,228,80,211,80,236,80,240,80,239,80,227,80,224,80,216,81,128,82,129,82,233,82,235,82,48,83,172,83,39,86,21,86,12,86,18,86,252,85,15,86,28,86,1,86,19,86,2,86,250,85,29,86,4,86,255,85,249,85,137,88,124,88,144,88,152,88,134,88,129,88,127,88,116,88,139,88,122,88,135,88,145,88,142,88,118,88,130,88,136,88,123,88,148,88,143,88,254,88,107,89,220,90,238,90,229,90,213,90,234,90,218,90,237,90,235,90,243,90,226,90,224,90,219,90,236,90,222,90,221,90,217,90,232,90,223,90,119,91,224,91,227,91,99,92,130,93,128,93,125,93,134,93,122,93,129,93,119,93,138,93,137,93,136,93,126,93,124,93,141,93,121,93,127,93,88,94,89,94,83,94,216,94,209,94,215,94,206,94,220,94,213,94,217,94,210,94,212,94,68,95,67,95,111,95,182,95,44,97,40,97,65,97,94,97,113,97,115,97,82,97,83,97,114,97,108,97,128,97,116,97,84,97,122,97,91,97,101,97,59,97,106,97,97,97,86,97,41,98,39,98,43,98,43,100,77,100,91,100,93,100,116,100,118,100,114,100,115,100,125,100,117,100,102,100,166,100,78,100,130,100,94,100,92,100,75,100,83,100,96,100,80,100,127,100,63,100,108,100,107,100,89,100,101,100,119,100,115,101,160,101,161,102,160,102,159,102,5,103,4,103,34,103,177,105,182,105,201,105,160,105,206,105,150,105,176,105,172,105,188,105,145,105,153,105,142,105,167,105,141,105,169,105,190,105,175,105,191,105,196,105,189,105,164,105,212,105,185,105,202,105,154,105,207,105,179,105,147,105,170,105,161,105,158,105,217,105,151,105,144,105,194,105,181,105,165,105,198,105,74,107,77,107,75,107,158,107,159,107,160,107,195,107,196,107,254,107,206,110,245,110,241,110,3,111,37,111,248,110,55,111,251,110,46,111,9,111,78,111,25,111,26,111,39,111,24,111,59,111,18,111,237,110,10,111,54,111,115,111,249,110,238,110,45,111,64,111,48,111,60,111,53,111,235,110,7,111,14,111,67,111,5,111,253,110,246,110,57,111,28,111,252,110,58,111,31,111,13,111,30,111,8,111,33,111,135,113,144,113,137,113,128,113,133,113,130,113,143,113,123,113,134,113,129,113,151,113,68,114,83,114,151,114,149,114,147,114,67,115,77,115,81,115,76,115,98,116,115,116,113,116,117,116,114,116,103,116,110,116,0,117,2,117,3,117,125,117,144,117,22,118,8,118,12,118,21,118,17,118,10,118,20,118,184,118,129,119,124,119,133,119,130,119,110,119,128,119,111,119,126,119,131,119,178,120,170,120,180,120,173,120,168,120,126,120,171,120,158,120,165,120,160,120,172,120,162,120,164,120,152,121,138,121,139,121,150,121,149,121,148,121,147,121,151,121,136,121,146,121,144,121,43,122,74,122,48,122,47,122,40,122,38,122,168,122,171,122,172,122,238,122,136,123,156,123,138,123,145,123,144,123,150,123,141,123,140,123,155,123,142,123,133,123,152,123,132,82,153,123,164,123,130,123,187,124,191,124,188,124,186,124,167,125,183,125,194,125,163,125,170,125,193,125,192,125,197,125,157,125,206,125,196,125,198,125,203,125,204,125,175,125,185,125,150,125,188,125,159,125,166,125,174,125,169,125,161,125,201,125,115,127,226,127,227,127,229,127,222,127,36,128,93,128,92,128,137,129,134,129,131,129,135,129,141,129,140,129,139,129,21,130,151,132,164,132,161,132,159,132,186,132,206,132,194,132,172,132,174,132,171,132,185,132,180,132,193,132,205,132,170,132,154,132,177,132,208,132,157,132,167,132,187,132,162,132,148,132,199,132,204,132,155,132,169,132,175,132,168,132,214,132,152,132,182,132,207,132,160,132,215,132,212,132,210,132,219,132,176,132,145,132,97,134,51,135,35,135,40,135,107,135,64,135], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+114164);
	/* memory initializer */ allocate([46,135,30,135,33,135,25,135,27,135,67,135,44,135,65,135,62,135,70,135,32,135,50,135,42,135,45,135,60,135,18,135,58,135,49,135,53,135,66,135,38,135,39,135,56,135,36,135,26,135,48,135,17,135,247,136,231,136,241,136,242,136,250,136,254,136,238,136,252,136,246,136,251,136,240,136,236,136,235,136,157,137,161,137,159,137,158,137,233,137,235,137,232,137,171,138,153,138,139,138,146,138,143,138,150,138,61,140,104,140,105,140,213,140,207,140,215,140,150,141,9,142,2,142,255,141,13,142,253,141,10,142,3,142,7,142,6,142,5,142,254,141,0,142,4,142,16,143,17,143,14,143,13,143,35,145,28,145,32,145,34,145,31,145,29,145,26,145,36,145,33,145,27,145,122,145,114,145,121,145,115,145,165,146,164,146,118,146,155,146,122,146,160,146,148,146,170,146,141,146,166,146,154,146,171,146,121,146,151,146,127,146,163,146,238,146,142,146,130,146,149,146,162,146,125,146,136,146,161,146,138,146,134,146,140,146,153,146,167,146,126,146,135,146,169,146,157,146,139,146,45,146,158,150,161,150,255,150,88,151,125,151,122,151,126,151,131,151,128,151,130,151,123,151,132,151,129,151,127,151,206,151,205,151,22,152,173,152,174,152,2,153,0,153,7,153,157,153,156,153,195,153,185,153,187,153,186,153,194,153,189,153,199,153,177,154,227,154,231,154,62,155,63,155,96,155,97,155,95,155,241,156,242,156,245,156,167,158,255,80,3,81,48,81,248,80,6,81,7,81,246,80,254,80,11,81,12,81,253,80,10,81,139,82,140,82,241,82,239,82,72,86,66,86,76,86,53,86,65,86,74,86,73,86,70,86,88,86,90,86,64,86,51,86,61,86,44,86,62,86,56,86,42,86,58,86,26,87,171,88,157,88,177,88,160,88,163,88,175,88,172,88,165,88,161,88,255,88,255,90,244,90,253,90,247,90,246,90,3,91,248,90,2,91,249,90,1,91,7,91,5,91,15,91,103,92,153,93,151,93,159,93,146,93,162,93,147,93,149,93,160,93,156,93,161,93,154,93,158,93,105,94,93,94,96,94,92,94,243,125,219,94,222,94,225,94,73,95,178,95,139,97,131,97,121,97,177,97,176,97,162,97,137,97,155,97,147,97,175,97,173,97,159,97,146,97,170,97,161,97,141,97,102,97,179,97,45,98,110,100,112,100,150,100,160,100,133,100,151,100,156,100,143,100,139,100,138,100,140,100,163,100,159,100,104,100,177,100,152,100,118,101,122,101,121,101,123,101,178,101,179,101,181,102,176,102,169,102,178,102,183,102,170,102,175,102,0,106,6,106,23,106,229,105,248,105,21,106,241,105,228,105,32,106,255,105,236,105,226,105,27,106,29,106,254,105,39,106,242,105,238,105,20,106,247,105,231,105,64,106,8,106,230,105,251,105,13,106,252,105,235,105,9,106,4,106,24,106,37,106,15,106,246,105,38,106,7,106,244,105,22,106,81,107,165,107,163,107,162,107,166,107,1,108,0,108,255,107,2,108,65,111,38,111,126,111,135,111,198,111,146,111,141,111,137,111,140,111,98,111,79,111,133,111,90,111,150,111,118,111,108,111,130,111,85,111,114,111,82,111,80,111,87,111,148,111,147,111,93,111,0,111,97,111,107,111,125,111,103,111,144,111,83,111,139,111,105,111,127,111,149,111,99,111,119,111,106,111,123,111,178,113,175,113,155,113,176,113,160,113,154,113,169,113,181,113,157,113,165,113,158,113,164,113,161,113,170,113,156,113,167,113,179,113,152,114,154,114,88,115,82,115,94,115,95,115,96,115,93,115,91,115,97,115,90,115,89,115,98,115,135,116,137,116,138,116,134,116,129,116,125,116,133,116,136,116,124,116,121,116,8,117,7,117,126,117,37,118,30,118,25,118,29,118,28,118,35,118,26,118,40,118,27,118,156,118,157,118,158,118,155,118,141,119,143,119,137,119,136,119,205,120,187,120,207,120,204,120,209,120,206,120,212,120,200,120,195,120,196,120,201,120,154,121,161,121,160,121,156,121,162,121,155,121,118,107,57,122,178,122,180,122,179,122,183,123,203,123,190,123,172,123,206,123,175,123,185,123,202,123,181,123,197,124,200,124,204,124,203,124,247,125,219,125,234,125,231,125,215,125,225,125,3,126,250,125,230,125,246,125,241,125,240,125,238,125,223,125,118,127,172,127,176,127,173,127,237,127,235,127,234,127,236,127,230,127,232,127,100,128,103,128,163,129,159,129,158,129,149,129,162,129,153,129,151,129,22,130,79,130,83,130,82,130,80,130,78,130,81,130,36,133,59,133,15,133,0,133,41,133,14,133,9,133,13,133,31,133,10,133,39,133,28,133,251,132,43,133,250,132,8,133,12,133,244,132,42,133,242,132,21,133,247,132,235,132,243,132,252,132,18,133,234,132,233,132,22,133,254,132,40,133,29,133,46,133,2,133,253,132,30,133,246,132,49,133,38,133,231,132,232,132,240,132,239,132,249,132,24,133,32,133,48,133,11,133,25,133,47,133,98,134,86,135,99,135,100,135,119,135,225,135,115,135,88,135,84,135,91,135,82,135,97,135,90,135,81,135,94,135,109,135,106,135,80,135,78,135,95,135,93,135,111,135,108,135,122,135,110,135,92,135,101,135,79,135,123,135,117,135,98,135,103,135,105,135,90,136,5,137,12,137,20,137,11,137,23,137,24,137,25,137,6,137,22,137,17,137,14,137,9,137,162,137,164,137,163,137,237,137,240,137,236,137,207,138,198,138,184,138,211,138,209,138,212,138,213,138,187,138,215,138,190,138,192,138,197,138,216,138,195,138,186,138,189,138,217,138,62,140,77,140,143,140,229,140,223,140,217,140,232,140,218,140,221,140,231,140,160,141,156,141,161,141,155,141,32,142,35,142,37,142,36,142,46,142,21,142,27,142,22,142,17,142,25,142,38,142,39,142,20,142,18,142,24,142,19,142,28,142,23,142,26,142,44,143,36,143,24,143,26,143,32,143,35,143,22,143,23,143,115,144,112,144,111,144,103,144,107,144,47,145,43,145,41,145,42,145,50,145,38,145,46,145,133,145,134,145,138,145,129,145,130,145,132,145,128,145,208,146,195,146,196,146,192,146,217,146,182,146,207,146,241,146,223,146,216,146,233,146,215,146,221,146,204,146,239,146,194,146,232,146,202,146,200,146,206,146,230,146,205,146,213,146,201,146,224,146,222,146,231,146,209,146,211,146,181,146,225,146,198,146,180,146,124,149,172,149,171,149,174,149,176,149,164,150,162,150,211,150,5,151,8,151,2,151,90,151,138,151,142,151,136,151,208,151,207,151,30,152,29,152,38,152,41,152,40,152,32,152,27,152,39,152,178,152,8,153,250,152,17,153,20,153,22,153,23,153,21,153,220,153,205,153,207,153,211,153,212,153,206,153,201,153,214,153,216,153,203,153,215,153,204,153,179,154,236,154,235,154,243,154,242,154,241,154,70,155,67,155,103,155,116,155,113,155,102,155,118,155,117,155,112,155,104,155,100,155,108,155,252,156,250,156,253,156,255,156,247,156,7,157,0,157,249,156,251,156,8,157,5,157,4,157,131,158,211,158,15,159,16,159,28,81,19,81,23,81,26,81,17,81,222,81,52,83,225,83,112,86,96,86,110,86,115,86,102,86,99,86,109,86,114,86,94,86,119,86,28,87,27,87,200,88,189,88,201,88,191,88,186,88,194,88,188,88,198,88,23,91,25,91,27,91,33,91,20,91,19,91,16,91,22,91,40,91,26,91,32,91,30,91,239,91,172,93,177,93,169,93,167,93,181,93,176,93,174,93,170,93,168,93,178,93,173,93,175,93,180,93,103,94,104,94,102,94,111,94,233,94,231,94,230,94,232,94,229,94,75,95,188,95,157,97,168,97,150,97,197,97,180,97,198,97,193,97,204,97,186,97,191,97,184,97,140,97,215,100,214,100,208,100,207,100,201,100,189,100,137,100,195,100,219,100,243,100,217,100,51,101,127,101,124,101,162,101,200,102,190,102,192,102,202,102,203,102,207,102,189,102,187,102,186,102,204,102,35,103,52,106,102,106,73,106,103,106,50,106,104,106,62,106,93,106,109,106,118,106,91,106,81,106,40,106,90,106,59,106,63,106,65,106,106,106,100,106,80,106,79,106,84,106,111,106,105,106,96,106,60,106,94,106,86,106,85,106,77,106,78,106,70,106,85,107,84,107,86,107,167,107,170,107,171,107,200,107,199,107,4,108,3,108,6,108,173,111,203,111,163,111,199,111,188,111,206,111,200,111,94,111,196,111,189,111,158,111,202,111,168,111,4,112,165,111,174,111,186,111,172,111,170,111,207,111,191,111,184,111,162,111,201,111,171,111,205,111,175,111,178,111,176,111,197,113,194,113,191,113,184,113,214,113,192,113,193,113,203,113,212,113,202,113,199,113,207,113,189,113,216,113,188,113,198,113,218,113,219,113,157,114,158,114,105,115,102,115,103,115,108,115,101,115,107,115,106,115,127,116,154,116,160,116,148,116,146,116,149,116,161,116,11,117,128,117,47,118,45,118,49,118,61,118,51,118,60,118,53,118,50,118,48,118,187,118,230,118,154,119,157,119,161,119,156,119,155,119,162,119,163,119,149,119,153,119,151,119,221,120,233,120,229,120,234,120,222,120,227,120,219,120,225,120,226,120,237,120,223,120,224,120,164,121,68,122,72,122,71,122,182,122,184,122,181,122,177,122,183,122,222,123,227,123,231,123,221,123,213,123,229,123,218,123,232,123,249,123,212,123,234,123,226,123,220,123,235,123,216,123,223,123,210,124,212,124,215,124,208,124,209,124,18,126,33,126,23,126,12,126,31,126,32,126,19,126,14,126,28,126,21,126,26,126,34,126,11,126,15,126,22,126,13,126,20,126,37,126,36,126,67,127,123,127,124,127,122,127,177,127,239,127,42,128,41,128,108,128,177,129,166,129,174,129,185,129,181,129,171,129,176,129,172,129,180,129,178,129,183,129,167,129,242,129,85,130,86,130,87,130,86,133,69,133,107,133,77,133,83,133,97,133,88,133,64,133,70,133,100,133,65,133,98,133,68,133,81,133,71,133,99,133,62,133,91,133,113,133,78,133,110,133,117,133,85,133,103,133,96,133,140,133,102,133,93,133,84,133,101,133,108,133,99,134,101,134,100,134,155,135,143,135,151,135,147,135,146,135,136,135,129,135,150,135,152,135,121,135,135,135,163,135,133,135,144,135,145,135,157,135,132,135,148,135,156,135,154,135,137,135,30,137,38,137,48,137,45,137,46,137,39,137,49,137,34,137,41,137,35,137,47,137,44,137,31,137,241,137,224,138,226,138,242,138,244,138,245,138,221,138,20,139,228,138,223,138,240,138,200,138,222,138,225,138,232,138,255,138,239,138,251,138,145,140,146,140,144,140,245,140,238,140,241,140,240,140,243,140,108,141,110,141,165,141,167,141,51,142,62,142,56,142,64,142,69,142,54,142,60,142,61,142,65,142,48,142,63,142,189,142,54,143,46,143,53,143,50,143,57,143,55,143,52,143,118,144,121,144,123,144,134,144,250,144,51,145,53,145,54,145,147,145,144,145,145,145,141,145,143,145,39,147,30,147,8,147,31,147,6,147,15,147,122,147,56,147,60,147,27,147,35,147,18,147,1,147,70,147,45,147,14,147,13,147,203,146,29,147,250,146,37,147,19,147,249,146,247,146,52,147,2,147,36,147,255,146,41,147,57,147,53,147,42,147,20,147,12,147,11,147,254,146,9,147,0,147,251,146,22,147,188,149,205,149,190,149,185,149,186,149,182,149,191,149,181,149,189,149,169,150,212,150,11,151,18,151,16,151,153,151,151,151,148,151,240,151,248,151,53,152,47,152,50,152,36,153,31,153,39,153,41,153,158,153,238,153,236,153,229,153,228,153,240,153,227,153,234,153,233,153,231,153,185,154,191,154,180,154,187,154,246,154,250,154,249,154,247,154,51,155,128,155,133,155,135,155,124,155,126,155,123,155,130,155,147,155,146,155,144,155,122,155,149,155,125,155,136,155,37,157,23,157,32,157,30,157,20,157,41,157,29,157,24,157,34,157,16,157,25,157,31,157,136,158,134,158,135,158,174,158,173,158,213,158,214,158,250,158,18,159,61,159,38,81,37,81,34,81,36,81,32,81,41,81,244,82,147,86,140,86,141,86,134,86,132,86,131,86,126,86,130,86,127,86,129,86,214,88,212,88,207,88,210,88,45,91,37,91,50,91,35,91,44,91,39,91,38,91,47,91,46,91,123,91,241,91,242,91,183,93,108,94,106,94,190,95,187,95,195,97,181,97,188,97,231,97,224,97,229,97,228,97,232,97,222,97,239,100,233,100,227,100,235,100,228,100,232,100,129,101,128,101,182,101,218,101,210,102,141,106,150,106,129,106,165,106,137,106,159,106,155,106,161,106,158,106,135,106,147,106,142,106,149,106,131,106,168,106,164,106,145,106,127,106,166,106,154,106,133,106,140,106,146,106,91,107,173,107,9,108,204,111,169,111,244,111,212,111,227,111,220,111,237,111,231,111,230,111,222,111,242,111,221,111,226,111,232,111,225,113,241,113,232,113,242,113,228,113,240,113,226,113,115,115,110,115,111,115,151,116,178,116,171,116,144,116,170,116,173,116,177,116,165,116,175,116,16,117,17,117,18,117,15,117,132,117,67,118,72,118,73,118,71,118,164,118,233,118,181,119,171,119,178,119,183,119,182,119,180,119,177,119,168,119,240,119,243,120,253,120,2,121,251,120,252,120,242,120,5,121,249,120,254,120,4,121,171,121,168,121,92,122,91,122,86,122,88,122,84,122,90,122,190,122,192,122,193,122,5,124,15,124,242,123,0,124,255,123,251,123,14,124,244,123,11,124,243,123,2,124,9,124,3,124,1,124,248,123,253,123,6,124,240,123,241,123,16,124,10,124,232,124,45,126,60,126,66,126,51,126,72,152,56,126,42,126,73,126,64,126,71,126,41,126,76,126,48,126,59,126,54,126,68,126,58,126,69,127,127,127,126,127,125,127,244,127,242,127,44,128,187,129,196,129,204,129,202,129,197,129,199,129,188,129,233,129,91,130,90,130,92,130,131,133,128,133,143,133,167,133,149,133,160,133,139,133,163,133,123,133,164,133,154,133,158,133,119,133,124,133,137,133,161,133,122,133,120,133,87,133,142,133,150,133,134,133,141,133,153,133,157,133,129,133,162,133,130,133,136,133,133,133,121,133,118,133,152,133,144,133,159,133,104,134,190,135,170,135,173,135,197,135,176,135,172,135,185,135,181,135,188,135,174,135,201,135,195,135,194,135,204,135,183,135,175,135,196,135,202,135,180,135,182,135,191,135,184,135,189,135,222,135,178,135,53,137,51,137,60,137,62,137,65,137,82,137,55,137,66,137,173,137,175,137,174,137,242,137,243,137,30,139,24,139,22,139,17,139,5,139,11,139,34,139,15,139,18,139,21,139,7,139,13,139,8,139,6,139,28,139,19,139,26,139,79,140,112,140,114,140,113,140,111,140,149,140,148,140,249,140,111,141,78,142,77,142,83,142,80,142,76,142,71,142,67,143,64,143,133,144,126,144,56,145,154,145,162,145,155,145,153,145,159,145,161,145,157,145,160,145,161,147,131,147,175,147,100,147,86,147,71,147,124,147,88,147,92,147,118,147,73,147,80,147,81,147,96,147,109,147,143,147,76,147,106,147,121,147,87,147,85,147,82,147,79,147,113,147,119,147,123,147,97,147,94,147,99,147,103,147,128,147,78,147,89,147,199,149,192,149,201,149,195,149,197,149,183,149,174,150,176,150,172,150,32,151,31,151,24,151,29,151,25,151,154,151,161,151,156,151,158,151,157,151,213,151,212,151,241,151,65,152,68,152,74,152,73,152,69,152,67,152,37,153,43,153,44,153,42,153,51,153,50,153,47,153,45,153,49,153,48,153,152,153,163,153,161,153,2,154,250,153,244,153,247,153,249,153,248,153,246,153,251,153,253,153,254,153,252,153,3,154,190,154,254,154,253,154,1,155,252,154,72,155,154,155,168,155,158,155,155,155,166,155,161,155,165,155,164,155,134,155,162,155,160,155,175,155,51,157,65,157,103,157,54,157,46,157,47,157,49,157,56,157,48,157,69,157,66,157,67,157,62,157,55,157,64,157,61,157,245,127,45,157,138,158,137,158,141,158,176,158,200,158,218,158,251,158,255,158,36,159,35,159,34,159,84,159,160,159,49,81,45,81,46,81,152,86,156,86,151,86,154,86,157,86,153,86,112,89,60,91,105,92,106,92,192,93,109,94,110,94,216,97,223,97,237,97,238,97,241,97,234,97,240,97,235,97,214,97,233,97,255,100,4,101,253,100,248,100,1,101,3,101,252,100,148,101,219,101,218,102,219,102,216,102,197,106,185,106,189,106,225,106,198,106,186,106,182,106,183,106,199,106,180,106,173,106,94,107,201,107,11,108,7,112,12,112,13,112,1,112,5,112,20,112,14,112,255,111,0,112,251,111,38,112,252,111,247,111,10,112,1,114,255,113,249,113,3,114,253,113,118,115,184,116,192,116,181,116,193,116,190,116,182,116,187,116,194,116,20,117,19,117,92,118,100,118,89,118,80,118,83,118,87,118,90,118,166,118,189,118,236,118,194,119,186,119,255,120,12,121,19,121,20,121,9,121,16,121,18,121,17,121,173,121,172,121,95,122,28,124,41,124,25,124,32,124,31,124,45,124,29,124,38,124,40,124,34,124,37,124,48,124,92,126,80,126,86,126,99,126,88,126,98,126,95,126,81,126,96,126,87,126,83,126,181,127,179,127,247,127,248,127,117,128,209,129,210,129,208,129,95,130,94,130,180,133,198,133,192,133,195,133,194,133,179,133,181,133,189,133,199,133,196,133,191,133,203,133,206,133,200,133,197,133,177,133,182,133,210,133,36,134,184,133,183,133,190,133,105,134,231,135,230,135,226,135,219,135,235,135,234,135,229,135,223,135,243,135,228,135,212,135,220,135,211,135,237,135,216,135,227,135,164,135,215,135,217,135,1,136,244,135,232,135,221,135,83,137,75,137,79,137,76,137,70,137,80,137,81,137,73,137,42,139,39,139,35,139,51,139,48,139,53,139,71,139,47,139,60,139,62,139,49,139,37,139,55,139,38,139,54,139,46,139,36,139,59,139,61,139,58,139,66,140,117,140,153,140,152,140,151,140,254,140,4,141,2,141,0,141,92,142,98,142,96,142,87,142,86,142,94,142,101,142,103,142,91,142,90,142,97,142,93,142,105,142,84,142,70,143,71,143,72,143,75,143,40,145,58,145,59,145,62,145,168,145,165,145,167,145,175,145,170,145,181,147,140,147,146,147,183,147,155,147,157,147,137,147,167,147,142,147,170,147,158,147,166,147,149,147,136,147,153,147,159,147,141,147,177,147,145,147,178,147,164,147,168,147,180,147,163,147,165,147,210,149,211,149,209,149,179,150,215,150,218,150,194,93,223,150,216,150,221,150,35,151,34,151,37,151,172,151,174,151,168,151,171,151,164,151,170,151,162,151,165,151,215,151,217,151,214,151,216,151,250,151,80,152,81,152,82,152,184,152,65,153,60,153,58,153,15,154,11,154,9,154,13,154,4,154,17,154,10,154,5,154,7,154,6,154,192,154,220,154,8,155,4,155,5,155,41,155,53,155,74,155,76,155,75,155,199,155,198,155,195,155,191,155,193,155,181,155,184,155,211,155,182,155,196,155,185,155,189,155,92,157,83,157,79,157,74,157,91,157,75,157,89,157,86,157,76,157,87,157,82,157,84,157,95,157,88,157,90,157,142,158,140,158,223,158,1,159,0,159,22,159,37,159,43,159,42,159,41,159,40,159,76,159,85,159,52,81,53,81,150,82,247,82,180,83,171,86,173,86,166,86,167,86,170,86,172,86,218,88,221,88,219,88,18,89,61,91,62,91,63,91,195,93,112,94,191,95,251,97,7,101,16,101,13,101,9,101,12,101,14,101,132,101,222,101,221,101,222,102,231,106,224,106,204,106,209,106,217,106,203,106,223,106,220,106,208,106,235,106,207,106,205,106,222,106,96,107,176,107,12,108,25,112,39,112,32,112,22,112,43,112,33,112,34,112,35,112,41,112,23,112,36,112,28,112,42,112,12,114,10,114,7,114,2,114,5,114,165,114,166,114,164,114,163,114,161,114,203,116,197,116,183,116,195,116,22,117,96,118,201,119,202,119,196,119,241,119,29,121,27,121,33,121,28,121,23,121,30,121,176,121,103,122,104,122,51,124,60,124,57,124,44,124,59,124,236,124,234,124,118,126,117,126,120,126,112,126,119,126,111,126,122,126,114,126,116,126,104,126,75,127,74,127,131,127,134,127,183,127,253,127,254,127,120,128,215,129,213,129,100,130,97,130,99,130,235,133,241,133,237,133,217,133,225,133,232,133,218,133,215,133,236,133,242,133,248,133,216,133,223,133,227,133,220,133,209,133,240,133,230,133,239,133,222,133,226,133,0,136,250,135,3,136,246,135,247,135,9,136,12,136,11,136,6,136,252,135,8,136,255,135,10,136,2,136,98,137,90,137,91,137,87,137,97,137,92,137,88,137,93,137,89,137,136,137,183,137,182,137,246,137,80,139,72,139,74,139,64,139,83,139,86,139,84,139,75,139,85,139,81,139,66,139,82,139,87,139,67,140,119,140,118,140,154,140,6,141,7,141,9,141,172,141,170,141,173,141,171,141,109,142,120,142,115,142,106,142,111,142,123,142,194,142,82,143,81,143,79,143,80,143,83,143,180,143,64,145,63,145,176,145,173,145,222,147,199,147,207,147,194,147,218,147,208,147,249,147,236,147,204,147,217,147,169,147,230,147,202,147,212,147,238,147,227,147,213,147,196,147,206,147,192,147,210,147,231,147,125,149,218,149,219,149,225,150,41,151,43,151,44,151,40,151,38,151,179,151,183,151,182,151,221,151,222,151,223,151,92,152,89,152,93,152,87,152,191,152,189,152,187,152,190,152,72,153,71,153,67,153,166,153,167,153,26,154,21,154,37,154,29,154,36,154,27,154,34,154,32,154,39,154,35,154,30,154,28,154,20,154,194,154,11,155,10,155,14,155,12,155,55,155,234,155,235,155,224,155,222,155,228,155,230,155,226,155,240,155,212,155,215,155,236,155,220,155,217,155,229,155,213,155,225,155,218,155,119,157,129,157,138,157,132,157,136,157,113,157,128,157,120,157,134,157,139,157,140,157,125,157,107,157,116,157,117,157,112,157,105,157,133,157,115,157,123,157,130,157,111,157,121,157,127,157,135,157,104,157,148,158,145,158,192,158,252,158,45,159,64,159,65,159,77,159,86,159,87,159,88,159,55,83,178,86,181,86,179,86,227,88,69,91,198,93,199,93,238,94,239,94,192,95,193,95,249,97,23,101,22,101,21,101,19,101,223,101,232,102,227,102,228,102,243,106,240,106,234,106,232,106,249,106,241,106,238,106,239,106,60,112,53,112,47,112,55,112,52,112,49,112,66,112,56,112,63,112,58,112,57,112,64,112,59,112,51,112,65,112,19,114,20,114,168,114,125,115,124,115,186,116,171,118,170,118,190,118,237,118,204,119,206,119,207,119,205,119,242,119,37,121,35,121,39,121,40,121,36,121,41,121,178,121,110,122,108,122,109,122,247,122,73,124,72,124,74,124,71,124,69,124,238,124,123,126,126,126,129,126,128,126,186,127,255,127,121,128,219,129,217,129,11,130,104,130,105,130,34,134,255,133,1,134,254,133,27,134,0,134,246,133,4,134,9,134,5,134,12,134,253,133,25,136,16,136,17,136,23,136,19,136,22,136,99,137,102,137,185,137,247,137,96,139,106,139,93,139,104,139,99,139,101,139,103,139,109,139,174,141,134,142,136,142,132,142,89,143,86,143,87,143,85,143,88,143,90,143,141,144,67,145,65,145,183,145,181,145,178,145,179,145,11,148,19,148,251,147,32,148,15,148,20,148,254,147,21,148,16,148,40,148,25,148,13,148,245,147,0,148,247,147,7,148,14,148,22,148,18,148,250,147,9,148,248,147,10,148,255,147,252,147,12,148,246,147,17,148,6,148,222,149,224,149,223,149,46,151,47,151,185,151,187,151,253,151,254,151,96,152,98,152,99,152,95,152,193,152,194,152,80,153,78,153,89,153,76,153,75,153,83,153,50,154,52,154,49,154,44,154,42,154,54,154,41,154,46,154,56,154,45,154,199,154,202,154,198,154,16,155,18,155,17,155,11,156,8,156,247,155,5,156,18,156,248,155,64,156,7,156,14,156,6,156,23,156,20,156,9,156,159,157,153,157,164,157,157,157,146,157,152,157,144,157,155,157,160,157,148,157,156,157,170,157,151,157,161,157,154,157,162,157,168,157,158,157,163,157,191,157,169,157,150,157,166,157,167,157,153,158,155,158,154,158,229,158,228,158,231,158,230,158,48,159,46,159,91,159,96,159,94,159,93,159,89,159,145,159,58,81,57,81,152,82,151,82,195,86,189,86,190,86,72,91,71,91,203,93,207,93,241,94,253,97,27,101,2,107,252,106,3,107,248,106,0,107,67,112,68,112,74,112,72,112,73,112,69,112,70,112,29,114,26,114,25,114,126,115,23,117,106,118,208,119,45,121,49,121,47,121,84,124,83,124,242,124,138,126,135,126,136,126,139,126,134,126,141,126,77,127,187,127,48,128,221,129,24,134,42,134,38,134,31,134,35,134,28,134,25,134,39,134,46,134,33,134,32,134,41,134,30,134,37,134,41,136,29,136,27,136,32,136,36,136,28,136,43,136,74,136,109,137,105,137,110,137,107,137,250,137,121,139,120,139,69,139,122,139,123,139,16,141,20,141,175,141,142,142,140,142,94,143,91,143,93,143,70,145,68,145,69,145,185,145,63,148,59,148,54,148,41,148,61,148,60,148,48,148,57,148,42,148,55,148,44,148,64,148,49,148,229,149,228,149,227,149,53,151,58,151,191,151,225,151,100,152,201,152,198,152,192,152,88,153,86,153,57,154,61,154,70,154,68,154,66,154,65,154,58,154,63,154,205,154,21,155,23,155,24,155,22,155,58,155,82,155,43,156,29,156,28,156,44,156,35,156,40,156,41,156,36,156,33,156,183,157,182,157,188,157,193,157,199,157,202,157,207,157,190,157,197,157,195,157,187,157,181,157,206,157,185,157,186,157,172,157,200,157,177,157,173,157,204,157,179,157,205,157,178,157,122,158,156,158,235,158,238,158,237,158,27,159,24,159,26,159,49,159,78,159,101,159,100,159,146,159,185,78,198,86,197,86,203,86,113,89,75,91,76,91,213,93,209,93,242,94,33,101,32,101,38,101,34,101,11,107,8,107,9,107,13,108,85,112,86,112,87,112,82,112,30,114,31,114,169,114,127,115,216,116,213,116,217,116,215,116,109,118,173,118,53,121,180,121,112,122,113,122,87,124,92,124,89,124,91,124,90,124,244,124,241,124,145,126,79,127,135,127,222,129,107,130,52,134,53,134,51,134,44,134,50,134,54,134,44,136,40,136,38,136,42,136,37,136,113,137,191,137,190,137,251,137,126,139,132,139,130,139,134,139,133,139,127,139,21,141,149,142,148,142,154,142,146,142,144,142,150,142,151,142,96,143,98,143,71,145,76,148,80,148,74,148,75,148,79,148,71,148,69,148,72,148,73,148,70,148,63,151,227,151,106,152,105,152,203,152,84,153,91,153,78,154,83,154,84,154,76,154,79,154,72,154,74,154,73,154,82,154,80,154,208,154,25,155,43,155,59,155,86,155,85,155,70,156,72,156,63,156,68,156,57,156,51,156,65,156,60,156,55,156,52,156,50,156,61,156,54,156,219,157,210,157,222,157,218,157,203,157,208,157,220,157,209,157,223,157,233,157,217,157,216,157,214,157,245,157,213,157,221,157,182,158,240,158,53,159,51,159,50,159,66,159,107,159,149,159,162,159,61,81,153,82,232,88,231,88,114,89,77,91,216,93,47,136,79,95,1,98,3,98,4,98,41,101,37,101,150,101,235,102,17,107,18,107,15,107,202,107,91,112,90,112,34,114,130,115,129,115,131,115,112,118,212,119,103,124,102,124,149,126,108,130,58,134,64,134,57,134,60,134,49,134,59,134,62,134,48,136,50,136,46,136,51,136,118,137,116,137,115,137,254,137,140,139,142,139,139,139,136,139,69,140,25,141,152,142,100,143,99,143,188,145,98,148,85,148,93,148,87,148,94,148,196,151,197,151,0,152,86,154,89,154,30,155,31,155,32,155,82,156,88,156,80,156,74,156,77,156,75,156,85,156,89,156,76,156,78,156,251,157,247,157,239,157,227,157,235,157,248,157,228,157,246,157,225,157,238,157,230,157,242,157,240,157,226,157,236,157,244,157,243,157,232,157,237,157,194,158,208,158,242,158,243,158,6,159,28,159,56,159,55,159,54,159,67,159,79,159,113,159,112,159,110,159,111,159,211,86,205,86,78,91,109,92,45,101,237,102,238,102,19,107,95,112,97,112,93,112,96,112,35,114,219,116,229,116,213,119,56,121,183,121,182,121,106,124,151,126,137,127,109,130,67,134,56,136,55,136,53,136,75,136,148,139,149,139,158,142,159,142,160,142,157,142,190,145,189,145,194,145,107,148,104,148,105,148,229,150,70,151,67,151,71,151,199,151,229,151,94,154,213,154,89,155,99,156,103,156,102,156,98,156,94,156,96,156,2,158,254,157,7,158,3,158,6,158,5,158,0,158,1,158,9,158,255,157,253,157,4,158,160,158,30,159,70,159,116,159,117,159,118,159,212,86,46,101,184,101,24,107,25,107,23,107,26,107,98,112,38,114,170,114,216,119,217,119,57,121,105,124,107,124,246,124,154,126,152,126,155,126,153,126,224,129,225,129,70,134,71,134,72,134,121,137,122,137,124,137,123,137,255,137,152,139,153,139,165,142,164,142,163,142,110,148,109,148,111,148,113,148,115,148,73,151,114,152,95,153,104,156,110,156,109,156,11,158,13,158,16,158,15,158,18,158,17,158,161,158,245,158,9,159,71,159,120,159,123,159,122,159,121,159,30,87,102,112,111,124,60,136,178,141,166,142,195,145,116,148,120,148,118,148,117,148,96,154,116,156,115,156,113,156,117,156,20,158,19,158,246,158,10,159,164,159,104,112,101,112,247,124,106,134,62,136,61,136,63,136,158,139,156,140,169,142,201,142,75,151,115,152,116,152,204,152,97,153,171,153,100,154,102,154,103,154,36,155,21,158,23,158,72,159,7,98,30,107,39,114,76,134,168,142,130,148,128,148,129,148,105,154,104,154,46,155,25,158,41,114,75,134,159,139,131,148,121,156,183,158,117,118,107,154,122,156,29,158,105,112,106,112,164,158,126,159,73,159,152,159,129,120,185,146,207,136,187,88,82,96,167,124,250,90,84,37,102,37,87,37,96,37,108,37,99,37,90,37,105,37,93,37,82,37,100,37,85,37,94,37,106,37,97,37,88,37,103,37,91,37,83,37,101,37,86,37,95,37,107,37,98,37,89,37,104,37,92,37,81,37,80,37,109,37,110,37,112,37,111,37,147,37,0,0,0,0,0,0,0,48,1,48,2,48,183,0,37,32,38,32,168,0,3,48,173,0,21,32,37,34,60,255,60,34,24,32,25,32,28,32,29,32,20,48,21,48,8,48,9,48,10,48,11,48,12,48,13,48,14,48,15,48,16,48,17,48,177,0,215,0,247,0,96,34,100,34,101,34,30,34,52,34,176,0,50,32,51,32,3,33,43,33,224,255,225,255,229,255,66,38,64,38,32,34,165,34,18,35,2,34,7,34,97,34,82,34,167,0,59,32,6,38,5,38,203,37,207,37,206,37,199,37,198,37,161,37,160,37,179,37,178,37,189,37,188,37,146,33,144,33,145,33,147,33,148,33,19,48,106,34,107,34,26,34,61,34,29,34,53,34,43,34,44,34,8,34,11,34,134,34,135,34,130,34,131,34,42,34,41,34,39,34,40,34,226,255,210,33,212,33,0,34,3,34,180,0,94,255,199,2,216,2,221,2,218,2,217,2,184,0,219,2,161,0,191,0,208,2,46,34,17,34,15,34,164,0,9,33,48,32,193,37,192,37,183,37,182,37,100,38,96,38,97,38,101,38,103,38,99,38,153,34,200,37,163,37,208,37,209,37,146,37,164,37,165,37,168,37,167,37,166,37,169,37,104,38,15,38,14,38,28,38,30,38,182,0,32,32,33,32,149,33,151,33,153,33,150,33,152,33,109,38,105,38,106,38,108,38,127,50,28,50,22,33,199,51,34,33,194,51,216,51,33,33,172,32,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,255,2,255,3,255,4,255,5,255,6,255,7,255,8,255,9,255,10,255,11,255,12,255,13,255,14,255,15,255,16,255,17,255,18,255,19,255,20,255,21,255,22,255,23,255,24,255,25,255,26,255,27,255,28,255,29,255,30,255,31,255,32,255,33,255,34,255,35,255,36,255,37,255,38,255,39,255,40,255,41,255,42,255,43,255,44,255,45,255,46,255,47,255,48,255,49,255,50,255,51,255,52,255,53,255,54,255,55,255,56,255,57,255,58,255,59,255,230,255,61,255,62,255,63,255,64,255,65,255,66,255,67,255,68,255,69,255,70,255,71,255,72,255,73,255,74,255,75,255,76,255,77,255,78,255,79,255,80,255,81,255,82,255,83,255,84,255,85,255,86,255,87,255,88,255,89,255,90,255,91,255,92,255,93,255,227,255,49,49,50,49,51,49,52,49,53,49,54,49,55,49,56,49,57,49,58,49,59,49,60,49,61,49,62,49,63,49,64,49,65,49,66,49,67,49,68,49,69,49,70,49,71,49,72,49,73,49,74,49,75,49,76,49,77,49,78,49,79,49,80,49,81,49,82,49,83,49,84,49,85,49,86,49,87,49,88,49,89,49,90,49,91,49,92,49,93,49,94,49,95,49,96,49,97,49,98,49,99,49,100,49,101,49,102,49,103,49,104,49,105,49,106,49,107,49,108,49,109,49,110,49,111,49,112,49,113,49,114,49,115,49,116,49,117,49,118,49,119,49,120,49,121,49,122,49,123,49,124,49,125,49,126,49,127,49,128,49,129,49,130,49,131,49,132,49,133,49,134,49,135,49,136,49,137,49,138,49,139,49,140,49,141,49,142,49,112,33,113,33,114,33,115,33,116,33,117,33,118,33,119,33,120,33,121,33,0,0,0,0,0,0,0,0,0,0,96,33,97,33,98,33,99,33,100,33,101,33,102,33,103,33,104,33,105,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,0,0,0,0,0,0,0,0,0,0,0,0,0,37,2,37,12,37,16,37,24,37,20,37,28,37,44,37,36,37,52,37,60,37,1,37,3,37,15,37,19,37,27,37,23,37,35,37,51,37,43,37,59,37,75,37,32,37,47,37,40,37,55,37,63,37,29,37,48,37,37,37,56,37,66,37,18,37,17,37,26,37,25,37,22,37,21,37,14,37,13,37,30,37,31,37,33,37,34,37,38,37,39,37,41,37,42,37,45,37,46,37,49,37,50,37,53,37,54,37,57,37,58,37,61,37,62,37,64,37,65,37,67,37,68,37,69,37,70,37,71,37,72,37,73,37,74,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,51,150,51,151,51,19,33,152,51,196,51,163,51,164,51,165,51,166,51,153,51,154,51,155,51,156,51,157,51,158,51,159,51,160,51,161,51,162,51,202,51,141,51,142,51,143,51,207,51,136,51,137,51,200,51,167,51,168,51,176,51,177,51,178,51,179,51,180,51,181,51,182,51,183,51,184,51,185,51,128,51,129,51,130,51,131,51,132,51,186,51,187,51,188,51,189,51,190,51,191,51,144,51,145,51,146,51,147,51,148,51,38,33,192,51,193,51,138,51,139,51,140,51,214,51,197,51,173,51,174,51,175,51,219,51,169,51,170,51,171,51,172,51,221,51,208,51,211,51,195,51,201,51,220,51,198,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,0,208,0,170,0,38,1,0,0,50,1,0,0,63,1,65,1,216,0,82,1,186,0,222,0,102,1,74,1,0,0,96,50,97,50,98,50,99,50,100,50,101,50,102,50,103,50,104,50,105,50,106,50,107,50,108,50,109,50,110,50,111,50,112,50,113,50,114,50,115,50,116,50,117,50,118,50,119,50,120,50,121,50,122,50,123,50,208,36,209,36,210,36,211,36,212,36,213,36,214,36,215,36,216,36,217,36,218,36,219,36,220,36,221,36,222,36,223,36,224,36,225,36,226,36,227,36,228,36,229,36,230,36,231,36,232,36,233,36,96,36,97,36,98,36,99,36,100,36,101,36,102,36,103,36,104,36,105,36,106,36,107,36,108,36,109,36,110,36,189,0,83,33,84,33,188,0,190,0,91,33,92,33,93,33,94,33,230,0,17,1,240,0,39,1,49,1,51,1,56,1,64,1,66,1,248,0,83,1,223,0,254,0,103,1,75,1,73,1,0,50,1,50,2,50,3,50,4,50,5,50,6,50,7,50,8,50,9,50,10,50,11,50,12,50,13,50,14,50,15,50,16,50,17,50,18,50,19,50,20,50,21,50,22,50,23,50,24,50,25,50,26,50,27,50,156,36,157,36,158,36,159,36,160,36,161,36,162,36,163,36,164,36,165,36,166,36,167,36,168,36,169,36,170,36,171,36,172,36,173,36,174,36,175,36,176,36,177,36,178,36,179,36,180,36,181,36,116,36,117,36,118,36,119,36,120,36,121,36,122,36,123,36,124,36,125,36,126,36,127,36,128,36,129,36,130,36,185,0,178,0,179,0,116,32,127,32,129,32,130,32,131,32,132,32,65,48,66,48,67,48,68,48,69,48,70,48,71,48,72,48,73,48,74,48,75,48,76,48,77,48,78,48,79,48,80,48,81,48,82,48,83,48,84,48,85,48,86,48,87,48,88,48,89,48,90,48,91,48,92,48,93,48,94,48,95,48,96,48,97,48,98,48,99,48,100,48,101,48,102,48,103,48,104,48,105,48,106,48,107,48,108,48,109,48,110,48,111,48,112,48,113,48,114,48,115,48,116,48,117,48,118,48,119,48,120,48,121,48,122,48,123,48,124,48,125,48,126,48,127,48,128,48,129,48,130,48,131,48,132,48,133,48,134,48,135,48,136,48,137,48,138,48,139,48,140,48,141,48,142,48,143,48,144,48,145,48,146,48,147,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,48,162,48,163,48,164,48,165,48,166,48,167,48,168,48,169,48,170,48,171,48,172,48,173,48,174,48,175,48,176,48,177,48,178,48,179,48,180,48,181,48,182,48,183,48,184,48,185,48,186,48,187,48,188,48,189,48,190,48,191,48,192,48,193,48,194,48,195,48,196,48,197,48,198,48,199,48,200,48,201,48,202,48,203,48,204,48,205,48,206,48,207,48,208,48,209,48,210,48,211,48,212,48,213,48,214,48,215,48,216,48,217,48,218,48,219,48,220,48,221,48,222,48,223,48,224,48,225,48,226,48,227,48,228,48,229,48,230,48,231,48,232,48,233,48,234,48,235,48,236,48,237,48,238,48,239,48,240,48,241,48,242,48,243,48,244,48,245,48,246,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,4,17,4,18,4,19,4,20,4,21,4,1,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,4,49,4,50,4,51,4,52,4,53,4,81,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,1,172,4,172,7,172,8,172,9,172,10,172,16,172,17,172,18,172,19,172,20,172,21,172,22,172,23,172,25,172,26,172,27,172,28,172,29,172,32,172,36,172,44,172,45,172,47,172,48,172,49,172,56,172,57,172,60,172,64,172,75,172,77,172,84,172,88,172,92,172,112,172,113,172,116,172,119,172,120,172,122,172,128,172,129,172,131,172,132,172,133,172,134,172,137,172,138,172,139,172,140,172,144,172,148,172,156,172,157,172,159,172,160,172,161,172,168,172,169,172,170,172,172,172,175,172,176,172,184,172,185,172,187,172,188,172,189,172,193,172,196,172,200,172,204,172,213,172,215,172,224,172,225,172,228,172,231,172,232,172,234,172,236,172,239,172,240,172,241,172,243,172,245,172,246,172,252,172,253,172,0,173,4,173,6,173,12,173,13,173,15,173,17,173,24,173,28,173,32,173,41,173,44,173,45,173,52,173,53,173,56,173,60,173,68,173,69,173,71,173,73,173,80,173,84,173,88,173,97,173,99,173,108,173,109,173,112,173,115,173,116,173,117,173,118,173,123,173,124,173,125,173,127,173,129,173,130,173,136,173,137,173,140,173,144,173,156,173,157,173,164,173,183,173,192,173,193,173,196,173,200,173,208,173,209,173,211,173,220,173,224,173,228,173,248,173,249,173,252,173,255,173,0,174,1,174,8,174,9,174,11,174,13,174,20,174,48,174,49,174,52,174,55,174,56,174,58,174,64,174,65,174,67,174,69,174,70,174,74,174,76,174,77,174,78,174,80,174,84,174,86,174,92,174,93,174,95,174,96,174,97,174,101,174,104,174,105,174,108,174,112,174,120,174,121,174,123,174,124,174,125,174,132,174,133,174,140,174,188,174,189,174,190,174,192,174,196,174,204,174,205,174,207,174,208,174,209,174,216,174,217,174,220,174,232,174,235,174,237,174,244,174,248,174,252,174,7,175,8,175], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+124404);
	/* memory initializer */ allocate([13,175,16,175,44,175,45,175,48,175,50,175,52,175,60,175,61,175,63,175,65,175,66,175,67,175,72,175,73,175,80,175,92,175,93,175,100,175,101,175,121,175,128,175,132,175,136,175,144,175,145,175,149,175,156,175,184,175,185,175,188,175,192,175,199,175,200,175,201,175,203,175,205,175,206,175,212,175,220,175,232,175,233,175,240,175,241,175,244,175,248,175,0,176,1,176,4,176,12,176,16,176,20,176,28,176,29,176,40,176,68,176,69,176,72,176,74,176,76,176,78,176,83,176,84,176,85,176,87,176,89,176,93,176,124,176,125,176,128,176,132,176,140,176,141,176,143,176,145,176,152,176,153,176,154,176,156,176,159,176,160,176,161,176,162,176,168,176,169,176,171,176,172,176,173,176,174,176,175,176,177,176,179,176,180,176,181,176,184,176,188,176,196,176,197,176,199,176,200,176,201,176,208,176,209,176,212,176,216,176,224,176,229,176,8,177,9,177,11,177,12,177,16,177,18,177,19,177,24,177,25,177,27,177,28,177,29,177,35,177,36,177,37,177,40,177,44,177,52,177,53,177,55,177,56,177,57,177,64,177,65,177,68,177,72,177,80,177,81,177,84,177,85,177,88,177,92,177,96,177,120,177,121,177,124,177,128,177,130,177,136,177,137,177,139,177,141,177,146,177,147,177,148,177,152,177,156,177,168,177,204,177,208,177,212,177,220,177,221,177,223,177,232,177,233,177,236,177,240,177,249,177,251,177,253,177,4,178,5,178,8,178,11,178,12,178,20,178,21,178,23,178,25,178,32,178,52,178,60,178,88,178,92,178,96,178,104,178,105,178,116,178,117,178,124,178,132,178,133,178,137,178,144,178,145,178,148,178,152,178,153,178,154,178,160,178,161,178,163,178,165,178,166,178,170,178,172,178,176,178,180,178,200,178,201,178,204,178,208,178,210,178,216,178,217,178,219,178,221,178,226,178,228,178,229,178,230,178,232,178,235,178,236,178,237,178,238,178,239,178,243,178,244,178,245,178,247,178,248,178,249,178,250,178,251,178,255,178,0,179,1,179,4,179,8,179,16,179,17,179,19,179,20,179,21,179,28,179,84,179,85,179,86,179,88,179,91,179,92,179,94,179,95,179,100,179,101,179,103,179,105,179,107,179,110,179,112,179,113,179,116,179,120,179,128,179,129,179,131,179,132,179,133,179,140,179,144,179,148,179,160,179,161,179,168,179,172,179,196,179,197,179,200,179,203,179,204,179,206,179,208,179,212,179,213,179,215,179,217,179,219,179,221,179,224,179,228,179,232,179,252,179,16,180,24,180,28,180,32,180,40,180,41,180,43,180,52,180,80,180,81,180,84,180,88,180,96,180,97,180,99,180,101,180,108,180,128,180,136,180,157,180,164,180,168,180,172,180,181,180,183,180,185,180,192,180,196,180,200,180,208,180,213,180,220,180,221,180,224,180,227,180,228,180,230,180,236,180,237,180,239,180,241,180,248,180,20,181,21,181,24,181,27,181,28,181,36,181,37,181,39,181,40,181,41,181,42,181,48,181,49,181,52,181,56,181,64,181,65,181,67,181,68,181,69,181,75,181,76,181,77,181,80,181,84,181,92,181,93,181,95,181,96,181,97,181,160,181,161,181,164,181,168,181,170,181,171,181,176,181,177,181,179,181,180,181,181,181,187,181,188,181,189,181,192,181,196,181,204,181,205,181,207,181,208,181,209,181,216,181,236,181,16,182,17,182,20,182,24,182,37,182,44,182,52,182,72,182,100,182,104,182,156,182,157,182,160,182,164,182,171,182,172,182,177,182,212,182,240,182,244,182,248,182,0,183,1,183,5,183,40,183,41,183,44,183,47,183,48,183,56,183,57,183,59,183,68,183,72,183,76,183,84,183,85,183,96,183,100,183,104,183,112,183,113,183,115,183,117,183,124,183,125,183,128,183,132,183,140,183,141,183,143,183,144,183,145,183,146,183,150,183,151,183,152,183,153,183,156,183,160,183,168,183,169,183,171,183,172,183,173,183,180,183,181,183,184,183,199,183,201,183,236,183,237,183,240,183,244,183,252,183,253,183,255,183,0,184,1,184,7,184,8,184,9,184,12,184,16,184,24,184,25,184,27,184,29,184,36,184,37,184,40,184,44,184,52,184,53,184,55,184,56,184,57,184,64,184,68,184,81,184,83,184,92,184,93,184,96,184,100,184,108,184,109,184,111,184,113,184,120,184,124,184,141,184,168,184,176,184,180,184,184,184,192,184,193,184,195,184,197,184,204,184,208,184,212,184,221,184,223,184,225,184,232,184,233,184,236,184,240,184,248,184,249,184,251,184,253,184,4,185,24,185,32,185,60,185,61,185,64,185,68,185,76,185,79,185,81,185,88,185,89,185,92,185,96,185,104,185,105,185,107,185,109,185,116,185,117,185,120,185,124,185,132,185,133,185,135,185,137,185,138,185,141,185,142,185,172,185,173,185,176,185,180,185,188,185,189,185,191,185,193,185,200,185,201,185,204,185,206,185,207,185,208,185,209,185,210,185,216,185,217,185,219,185,221,185,222,185,225,185,227,185,228,185,229,185,232,185,236,185,244,185,245,185,247,185,248,185,249,185,250,185,0,186,1,186,8,186,21,186,56,186,57,186,60,186,64,186,66,186,72,186,73,186,75,186,77,186,78,186,83,186,84,186,85,186,88,186,92,186,100,186,101,186,103,186,104,186,105,186,112,186,113,186,116,186,120,186,131,186,132,186,133,186,135,186,140,186,168,186,169,186,171,186,172,186,176,186,178,186,184,186,185,186,187,186,189,186,196,186,200,186,216,186,217,186,252,186,0,187,4,187,13,187,15,187,17,187,24,187,28,187,32,187,41,187,43,187,52,187,53,187,54,187,56,187,59,187,60,187,61,187,62,187,68,187,69,187,71,187,73,187,77,187,79,187,80,187,84,187,88,187,97,187,99,187,108,187,136,187,140,187,144,187,164,187,168,187,172,187,180,187,183,187,192,187,196,187,200,187,208,187,211,187,248,187,249,187,252,187,255,187,0,188,2,188,8,188,9,188,11,188,12,188,13,188,15,188,17,188,20,188,21,188,22,188,23,188,24,188,27,188,28,188,29,188,30,188,31,188,36,188,37,188,39,188,41,188,45,188,48,188,49,188,52,188,56,188,64,188,65,188,67,188,68,188,69,188,73,188,76,188,77,188,80,188,93,188,132,188,133,188,136,188,139,188,140,188,142,188,148,188,149,188,151,188,153,188,154,188,160,188,161,188,164,188,167,188,168,188,176,188,177,188,179,188,180,188,181,188,188,188,189,188,192,188,196,188,205,188,207,188,208,188,209,188,213,188,216,188,220,188,244,188,245,188,246,188,248,188,252,188,4,189,5,189,7,189,9,189,16,189,20,189,36,189,44,189,64,189,72,189,73,189,76,189,80,189,88,189,89,189,100,189,104,189,128,189,129,189,132,189,135,189,136,189,137,189,138,189,144,189,145,189,147,189,149,189,153,189,154,189,156,189,164,189,176,189,184,189,212,189,213,189,216,189,220,189,233,189,240,189,244,189,248,189,0,190,3,190,5,190,12,190,13,190,16,190,20,190,28,190,29,190,31,190,68,190,69,190,72,190,76,190,78,190,84,190,85,190,87,190,89,190,90,190,91,190,96,190,97,190,100,190,104,190,106,190,112,190,113,190,115,190,116,190,117,190,123,190,124,190,125,190,128,190,132,190,140,190,141,190,143,190,144,190,145,190,152,190,153,190,168,190,208,190,209,190,212,190,215,190,216,190,224,190,227,190,228,190,229,190,236,190,1,191,8,191,9,191,24,191,25,191,27,191,28,191,29,191,64,191,65,191,68,191,72,191,80,191,81,191,85,191,148,191,176,191,197,191,204,191,205,191,208,191,212,191,220,191,223,191,225,191,60,192,81,192,88,192,92,192,96,192,104,192,105,192,144,192,145,192,148,192,152,192,160,192,161,192,163,192,165,192,172,192,173,192,175,192,176,192,179,192,180,192,181,192,182,192,188,192,189,192,191,192,192,192,193,192,197,192,200,192,201,192,204,192,208,192,216,192,217,192,219,192,220,192,221,192,228,192,229,192,232,192,236,192,244,192,245,192,247,192,249,192,0,193,4,193,8,193,16,193,21,193,28,193,29,193,30,193,31,193,32,193,35,193,36,193,38,193,39,193,44,193,45,193,47,193,48,193,49,193,54,193,56,193,57,193,60,193,64,193,72,193,73,193,75,193,76,193,77,193,84,193,85,193,88,193,92,193,100,193,101,193,103,193,104,193,105,193,112,193,116,193,120,193,133,193,140,193,141,193,142,193,144,193,148,193,150,193,156,193,157,193,159,193,161,193,165,193,168,193,169,193,172,193,176,193,189,193,196,193,200,193,204,193,212,193,215,193,216,193,224,193,228,193,232,193,240,193,241,193,243,193,252,193,253,193,0,194,4,194,12,194,13,194,15,194,17,194,24,194,25,194,28,194,31,194,32,194,40,194,41,194,43,194,45,194,47,194,49,194,50,194,52,194,72,194,80,194,81,194,84,194,88,194,96,194,101,194,108,194,109,194,112,194,116,194,124,194,125,194,127,194,129,194,136,194,137,194,144,194,152,194,155,194,157,194,164,194,165,194,168,194,172,194,173,194,180,194,181,194,183,194,185,194,220,194,221,194,224,194,227,194,228,194,235,194,236,194,237,194,239,194,241,194,246,194,248,194,249,194,251,194,252,194,0,195,8,195,9,195,12,195,13,195,19,195,20,195,21,195,24,195,28,195,36,195,37,195,40,195,41,195,69,195,104,195,105,195,108,195,112,195,114,195,120,195,121,195,124,195,125,195,132,195,136,195,140,195,192,195,216,195,217,195,220,195,223,195,224,195,226,195,232,195,233,195,237,195,244,195,245,195,248,195,8,196,16,196,36,196,44,196,48,196,52,196,60,196,61,196,72,196,100,196,101,196,104,196,108,196,116,196,117,196,121,196,128,196,148,196,156,196,184,196,188,196,233,196,240,196,241,196,244,196,248,196,250,196,255,196,0,197,1,197,12,197,16,197,20,197,28,197,40,197,41,197,44,197,48,197,56,197,57,197,59,197,61,197,68,197,69,197,72,197,73,197,74,197,76,197,77,197,78,197,83,197,84,197,85,197,87,197,88,197,89,197,93,197,94,197,96,197,97,197,100,197,104,197,112,197,113,197,115,197,116,197,117,197,124,197,125,197,128,197,132,197,135,197,140,197,141,197,143,197,145,197,149,197,151,197,152,197,156,197,160,197,169,197,180,197,181,197,184,197,185,197,187,197,188,197,189,197,190,197,196,197,197,197,198,197,199,197,200,197,201,197,202,197,204,197,206,197,208,197,209,197,212,197,216,197,224,197,225,197,227,197,229,197,236,197,237,197,238,197,240,197,244,197,246,197,247,197,252,197,253,197,254,197,255,197,0,198,1,198,5,198,6,198,7,198,8,198,12,198,16,198,24,198,25,198,27,198,28,198,36,198,37,198,40,198,44,198,45,198,46,198,48,198,51,198,52,198,53,198,55,198,57,198,59,198,64,198,65,198,68,198,72,198,80,198,81,198,83,198,84,198,85,198,92,198,93,198,96,198,108,198,111,198,113,198,120,198,121,198,124,198,128,198,136,198,137,198,139,198,141,198,148,198,149,198,152,198,156,198,164,198,165,198,167,198,169,198,176,198,177,198,180,198,184,198,185,198,186,198,192,198,193,198,195,198,197,198,204,198,205,198,208,198,212,198,220,198,221,198,224,198,225,198,232,198,233,198,236,198,240,198,248,198,249,198,253,198,4,199,5,199,8,199,12,199,20,199,21,199,23,199,25,199,32,199,33,199,36,199,40,199,48,199,49,199,51,199,53,199,55,199,60,199,61,199,64,199,68,199,74,199,76,199,77,199,79,199,81,199,82,199,83,199,84,199,85,199,86,199,87,199,88,199,92,199,96,199,104,199,107,199,116,199,117,199,120,199,124,199,125,199,126,199,131,199,132,199,133,199,135,199,136,199,137,199,138,199,142,199,144,199,145,199,148,199,150,199,151,199,152,199,154,199,160,199,161,199,163,199,164,199,165,199,166,199,172,199,173,199,176,199,180,199,188,199,189,199,191,199,192,199,193,199,200,199,201,199,204,199,206,199,208,199,216,199,221,199,228,199,232,199,236,199,0,200,1,200,4,200,8,200,10,200,16,200,17,200,19,200,21,200,22,200,28,200,29,200,32,200,36,200,44,200,45,200,47,200,49,200,56,200,60,200,64,200,72,200,73,200,76,200,77,200,84,200,112,200,113,200,116,200,120,200,122,200,128,200,129,200,131,200,133,200,134,200,135,200,139,200,140,200,141,200,148,200,157,200,159,200,161,200,168,200,188,200,189,200,196,200,200,200,204,200,212,200,213,200,215,200,217,200,224,200,225,200,228,200,245,200,252,200,253,200,0,201,4,201,5,201,6,201,12,201,13,201,15,201,17,201,24,201,44,201,52,201,80,201,81,201,84,201,88,201,96,201,97,201,99,201,108,201,112,201,116,201,124,201,136,201,137,201,140,201,144,201,152,201,153,201,155,201,157,201,192,201,193,201,196,201,199,201,200,201,202,201,208,201,209,201,211,201,213,201,214,201,217,201,218,201,220,201,221,201,224,201,226,201,228,201,231,201,236,201,237,201,239,201,240,201,241,201,248,201,249,201,252,201,0,202,8,202,9,202,11,202,12,202,13,202,20,202,24,202,41,202,76,202,77,202,80,202,84,202,92,202,93,202,95,202,96,202,97,202,104,202,125,202,132,202,152,202,188,202,189,202,192,202,196,202,204,202,205,202,207,202,209,202,211,202,216,202,217,202,224,202,236,202,244,202,8,203,16,203,20,203,24,203,32,203,33,203,65,203,72,203,73,203,76,203,80,203,88,203,89,203,93,203,100,203,120,203,121,203,156,203,184,203,212,203,228,203,231,203,233,203,12,204,13,204,16,204,20,204,28,204,29,204,33,204,34,204,39,204,40,204,41,204,44,204,46,204,48,204,56,204,57,204,59,204,60,204,61,204,62,204,68,204,69,204,72,204,76,204,84,204,85,204,87,204,88,204,89,204,96,204,100,204,102,204,104,204,112,204,117,204,152,204,153,204,156,204,160,204,168,204,169,204,171,204,172,204,173,204,180,204,181,204,184,204,188,204,196,204,197,204,199,204,201,204,208,204,212,204,228,204,236,204,240,204,1,205,8,205,9,205,12,205,16,205,24,205,25,205,27,205,29,205,36,205,40,205,44,205,57,205,92,205,96,205,100,205,108,205,109,205,111,205,113,205,120,205,136,205,148,205,149,205,152,205,156,205,164,205,165,205,167,205,169,205,176,205,196,205,204,205,208,205,232,205,236,205,240,205,248,205,249,205,251,205,253,205,4,206,8,206,12,206,20,206,25,206,32,206,33,206,36,206,40,206,48,206,49,206,51,206,53,206,88,206,89,206,92,206,95,206,96,206,97,206,104,206,105,206,107,206,109,206,116,206,117,206,120,206,124,206,132,206,133,206,135,206,137,206,144,206,145,206,148,206,152,206,160,206,161,206,163,206,164,206,165,206,172,206,173,206,193,206,228,206,229,206,232,206,235,206,236,206,244,206,245,206,247,206,248,206,249,206,0,207,1,207,4,207,8,207,16,207,17,207,19,207,21,207,28,207,32,207,36,207,44,207,45,207,47,207,48,207,49,207,56,207,84,207,85,207,88,207,92,207,100,207,101,207,103,207,105,207,112,207,113,207,116,207,120,207,128,207,133,207,140,207,161,207,168,207,176,207,196,207,224,207,225,207,228,207,232,207,240,207,241,207,243,207,245,207,252,207,0,208,4,208,17,208,24,208,45,208,52,208,53,208,56,208,60,208,68,208,69,208,71,208,73,208,80,208,84,208,88,208,96,208,108,208,109,208,112,208,116,208,124,208,125,208,129,208,164,208,165,208,168,208,172,208,180,208,181,208,183,208,185,208,192,208,193,208,196,208,200,208,201,208,208,208,209,208,211,208,212,208,213,208,220,208,221,208,224,208,228,208,236,208,237,208,239,208,240,208,241,208,248,208,13,209,48,209,49,209,52,209,56,209,58,209,64,209,65,209,67,209,68,209,69,209,76,209,77,209,80,209,84,209,92,209,93,209,95,209,97,209,104,209,108,209,124,209,132,209,136,209,160,209,161,209,164,209,168,209,176,209,177,209,179,209,181,209,186,209,188,209,192,209,216,209,244,209,248,209,7,210,9,210,16,210,44,210,45,210,48,210,52,210,60,210,61,210,63,210,65,210,72,210,92,210,100,210,128,210,129,210,132,210,136,210,144,210,145,210,149,210,156,210,160,210,164,210,172,210,177,210,184,210,185,210,188,210,191,210,192,210,194,210,200,210,201,210,203,210,212,210,216,210,220,210,228,210,229,210,240,210,241,210,244,210,248,210,0,211,1,211,3,211,5,211,12,211,13,211,14,211,16,211,20,211,22,211,28,211,29,211,31,211,32,211,33,211,37,211,40,211,41,211,44,211,48,211,56,211,57,211,59,211,60,211,61,211,68,211,69,211,124,211,125,211,128,211,132,211,140,211,141,211,143,211,144,211,145,211,152,211,153,211,156,211,160,211,168,211,169,211,171,211,173,211,180,211,184,211,188,211,196,211,197,211,200,211,201,211,208,211,216,211,225,211,227,211,236,211,237,211,240,211,244,211,252,211,253,211,255,211,1,212,8,212,29,212,64,212,68,212,92,212,96,212,100,212,109,212,111,212,120,212,121,212,124,212,127,212,128,212,130,212,136,212,137,212,139,212,141,212,148,212,169,212,204,212,208,212,212,212,220,212,223,212,232,212,236,212,240,212,248,212,251,212,253,212,4,213,8,213,12,213,20,213,21,213,23,213,60,213,61,213,64,213,68,213,76,213,77,213,79,213,81,213,88,213,89,213,92,213,96,213,101,213,104,213,105,213,107,213,109,213,116,213,117,213,120,213,124,213,132,213,133,213,135,213,136,213,137,213,144,213,165,213,200,213,201,213,204,213,208,213,210,213,216,213,217,213,219,213,221,213,228,213,229,213,232,213,236,213,244,213,245,213,247,213,249,213,0,214,1,214,4,214,8,214,16,214,17,214,19,214,20,214,21,214,28,214,32,214,36,214,45,214,56,214,57,214,60,214,64,214,69,214,72,214,73,214,75,214,77,214,81,214,84,214,85,214,88,214,92,214,103,214,105,214,112,214,113,214,116,214,131,214,133,214,140,214,141,214,144,214,148,214,157,214,159,214,161,214,168,214,172,214,176,214,185,214,187,214,196,214,197,214,200,214,204,214,209,214,212,214,215,214,217,214,224,214,228,214,232,214,240,214,245,214,252,214,253,214,0,215,4,215,17,215,24,215,25,215,28,215,32,215,40,215,41,215,43,215,45,215,52,215,53,215,56,215,60,215,68,215,71,215,73,215,80,215,81,215,84,215,86,215,87,215,88,215,89,215,96,215,97,215,99,215,101,215,105,215,108,215,112,215,116,215,124,215,125,215,129,215,136,215,137,215,140,215,144,215,152,215,153,215,155,215,157,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,79,115,79,71,80,249,80,160,82,239,83,117,84,229,84,9,86,193,90,182,91,135,102,182,103,183,103,239,103,76,107,194,115,194,117,60,122,219,130,4,131,87,136,136,136,54,138,200,140,207,141,251,142,230,143,213,153,59,82,116,83,4,84,106,96,100,97,188,107,207,115,26,129,186,137,210,137,163,149,131,79,10,82,190,88,120,89,230,89,114,94,121,94,199,97,192,99,70,103,236,103,127,104,151,111,78,118,11,119,245,120,8,122,255,122,33,124,157,128,110,130,113,130,235,138,147,149,107,78,157,85,247,102,52,110,163,120,237,122,91,132,16,137,78,135,168,151,216,82,78,87,42,88,76,93,31,97,190,97,33,98,98,101,209,103,68,106,27,110,24,117,179,117,227,118,176,119,58,125,175,144,81,148,82,148,149,159,35,83,172,92,50,117,219,128,64,146,152,149,91,82,8,88,220,89,161,92,23,93,183,94,58,95,74,95,119,97,95,108,122,117,134,117,224,124,115,125,177,125,140,127,84,129,33,130,145,133,65,137,27,139,252,146,77,150,71,156,203,78,247,78,11,80,241,81,79,88,55,97,62,97,104,97,57,101,234,105,17,111,165,117,134,118,214,118,135,123,165,130,203,132,0,249,167,147,139,149,128,85,162,91,81,87,1,249,179,124,185,127,181,145,40,80,187,83,69,92,232,93,210,98,110,99,218,100,231,100,32,110,172,112,91,121,221,141,30,142,2,249,125,144,69,146,248,146,126,78,246,78,101,80,254,93,250,94,6,97,87,105,113,129,84,134,71,142,117,147,43,154,94,78,145,80,112,103,64,104,9,81,141,82,146,82,162,106,188,119,16,146,212,158,171,82,47,96,242,143,72,80,169,97,237,99,202,100,60,104,132,106,192,111,136,129,161,137,148,150,5,88,125,114,172,114,4,117,121,125,109,126,169,128,139,137,116,139,99,144,81,157,137,98,122,108,84,111,80,125,58,127,35,138,124,81,74,97,157,123,25,139,87,146,140,147,172,78,211,79,30,80,190,80,6,81,193,82,205,82,127,83,112,87,131,88,154,94,145,95,118,97,172,97,206,100,108,101,111,102,187,102,244,102,151,104,135,109,133,112,241,112,159,116,165,116,202,116,217,117,108,120,236,120,223,122,246,122,69,125,147,125,21,128,63,128,27,129,150,131,102,139,21,143,21,144,225,147,3,152,56,152,90,154,232,155,194,79,83,85,58,88,81,89,99,91,70,92,184,96,18,98,66,104,176,104,232,104,170,110,76,117,120,118,206,120,61,122,251,124,107,126,124,126,8,138,161,138,63,140,142,150,196,157,228,83,233,83,74,84,113,84,250,86,209,89,100,91,59,92,171,94,247,98,55,101,69,101,114,101,160,102,175,103,193,105,189,108,252,117,144,118,126,119,63,122,148,127,3,128,161,128,143,129,230,130,253,130,240,131,193,133,49,136,180,136,165,138,3,249,156,143,46,147,199,150,103,152,216,154,19,159,237,84,155,101,242,102,143,104,64,122,55,140,96,157,240,86,100,87,17,93,6,102,177,104,205,104,254,110,40,116,158,136,228,155,104,108,4,249,168,154,155,79,108,81,113,81,159,82,84,91,229,93,80,96,109,96,241,98,167,99,59,101,217,115,122,122,163,134,162,140,143,151,50,78,225,91,8,98,156,103,220,116,209,121,211,131,135,138,178,138,232,141,78,144,75,147,70,152,211,94,232,105,255,133,237,144,5,249,160,81,152,91,236,91,99,97,250,104,62,107,76,112,47,116,216,116,161,123,80,127,197,131,192,137,171,140,220,149,40,153,46,82,93,96,236,98,2,144,138,79,73,81,33,83,217,88,227,94,224,102,56,109,154,112,194,114,214,115,80,123,241,128,91,148,102,83,155,99,107,127,86,78,128,80,74,88,222,88,42,96,39,97,208,98,208,105,65,155,143,91,24,125,177,128,95,143,164,78,209,80,172,84,172,85,12,91,160,93,231,93,42,101,78,101,33,104,75,106,225,114,142,118,239,119,94,125,249,127,160,129,78,133,223,134,3,143,78,143,202,144,3,153,85,154,171,155,24,78,69,78,93,78,199,78,241,79,119,81,254,82,64,83,227,83,229,83,142,84,20,86,117,87,162,87,199,91,135,93,208,94,252,97,216,98,81,101,184,103,233,103,203,105,80,107,198,107,236,107,66,108,157,110,120,112,215,114,150,115,3,116,191,119,233,119,118,122,127,125,9,128,252,129,5,130,10,130,223,130,98,136,51,139,252,140,192,142,17,144,177,144,100,146,182,146,210,153,69,154,233,156,215,157,156,159,11,87,64,92,202,131,160,151,171,151,180,158,27,84,152,122,164,127,217,136,205,142,225,144,0,88,72,92,152,99,159,122,174,91,19,95,121,122,174,122,142,130,172,142,38,80,56,82,248,82,119,83,8,87,243,98,114,99,10,107,195,109,55,119,165,83,87,115,104,133,118,142,213,149,58,103,195,106,112,111,109,138,204,142,75,153,6,249,119,102,120,107,180,140,60,155,7,249,235,83,45,87,78,89,198,99,251,105,234,115,69,120,186,122,197,122,254,124,117,132,143,137,115,141,53,144,168,149,251,82,71,87,71,117,96,123,204,131,30,146,8,249,88,106,75,81,75,82,135,82,31,98,216,104,117,105,153,150,197,80,164,82,228,82,195,97,164,101,57,104,255,105,126,116,75,123,185,130,235,131,178,137,57,139,209,143,73,153,9,249,202,78,151,89,210,100,17,102,142,106,52,116,129,121,189,121,169,130,126,136,127,136,95,137,10,249,38,147,11,79,202,83,37,96,113,98,114,108,26,125,102,125,152,78,98,81,220,119,175,128,1,79,14,79,118,81,128,81,220,85,104,86,59,87,250,87,252,87,20,89,71,89,147,89,196,91,144,92,14,93,241,93,126,94,204,95,128,98,215,101,227,101,30,103,31,103,94,103,203,104,196,104,95,106,58,107,35,108,125,108,130,108,199,109,152,115,38,116,42,116,130,116,163,116,120,117,127,117,129,120,239,120,65,121,71,121,72,121,122,121,149,123,0,125,186,125,136,127,6,128,45,128,140,128,24,138,79,139,72,140,119,141,33,147,36,147,226,152,81,153,14,154,15,154,101,154,146,158,202,125,118,79,9,84,238,98,84,104,209,145,171,85,58,81,11,249,12,249,28,90,230,97,13,249,207,98,255,98,14,249,15,249,16,249,17,249,18,249,19,249,163,144,20,249,21,249,22,249,23,249,24,249,254,138,25,249,26,249,27,249,28,249,150,102,29,249,86,113,30,249,31,249,227,150,32,249,79,99,122,99,87,83,33,249,143,103,96,105,115,110,34,249,55,117,35,249,36,249,37,249,13,125,38,249,39,249,114,136,202,86,24,90,40,249,41,249,42,249,43,249,44,249,67,78,45,249,103,81,72,89,240,103,16,128,46,249,115,89,116,94,154,100,202,121,245,95,108,96,200,98,123,99,231,91,215,91,170,82,47,249,116,89,41,95,18,96,48,249,49,249,50,249,89,116,51,249,52,249,53,249,54,249,55,249,56,249,209,153,57,249,58,249,59,249,60,249,61,249,62,249,63,249,64,249,65,249,66,249,67,249,195,111,68,249,69,249,191,129,178,143,241,96,70,249,71,249,102,129,72,249,73,249,63,92,74,249,75,249,76,249,77,249,78,249,79,249,80,249,81,249,233,90,37,138,123,103,16,125,82,249,83,249,84,249,85,249,86,249,87,249,253,128,88,249,89,249,60,92,229,108,63,83,186,110,26,89,54,131,57,78,182,78,70,79,174,85,24,87,199,88,86,95,183,101,230,101,128,106,181,107,77,110,237,119,239,122,30,124,222,125,203,134,146,136,50,145,91,147,187,100,190,111,122,115,184,117,84,144,86,85,77,87,186,97,212,100,199,102,225,109,91,110,109,111,185,111,240,117,67,128,189,129,65,133,131,137,199,138,90,139,31,147,147,108,83,117,84,123,15,142,93,144,16,85,2,88,88,88,98,94,7,98,158,100,224,104,118,117,214,124,179,135,232,158,227,78,136,87,110,87,39,89,13,92,177,92,54,94,133,95,52,98,225,100,179,115,250,129,139,136,184,140,138,150,219,158,133,91,183,95,179,96,18,80,0,82,48,82,22,87,53,88,87,88,14,92,96,92,246,92,139,93,166,94,146,95,188,96,17,99,137,99,23,100,67,104,249,104,194,106,216,109,33,110,212,110,228,111,254,113,220,118,121,119,177,121,59,122,4,132,169,137,237,140,243,141,72,142,3,144,20,144,83,144,253,144,77,147,118,150,220,151,210,107,6,112,88,114,162,114,104,115,99,119,191,121,228,123,155,126,128,139,169,88,199,96,102,101,253,101,190,102,140,108,30,113,201,113,90,140,19,152,109,78,129,122,221,78,172,81,205,81,213,82,12,84,167,97,113,103,80,104,223,104,30,109,124,111,188,117,179,119,229,122,244,128,99,132,133,146,92,81,151,101,92,103,147,103,216,117,199,122,115,131,90,249,70,140,23,144,45,152,111,92,192,129,154,130,65,144,111,144,13,146,151,95,157,93,89,106,200,113,123,118,73,123,228,133,4,139,39,145,48,154,135,85,246,97,91,249,105,118,133,127,63,134,186,135,248,136,143,144,92,249,27,109,217,112,222,115,97,125,61,132,93,249,106,145,241,153,94,249,130,78,117,83,4,107,18,107,62,112,27,114,45,134,30,158,76,82,163,143,80,93,229,100,44,101,22,107,235,111,67,124,156,126,205,133,100,137,189,137,201,98,216,129,31,136,202,94,23,103,106,109,252,114,5,116,111,116,130,135,222,144,134,79,13,93,160,95,10,132,183,81,160,99,101,117,174,78,6,80,105,81,201,81,129,104,17,106,174,124,177,124,231,124,111,130,210,138,27,143,207,145,182,79,55,81,245,82,66,84,236,94,110,97,62,98,197,101,218,106,254,111,42,121,220,133,35,136,173,149,98,154,106,154,151,158,206,158,155,82,198,102,119,107,29,112,43,121,98,143,66,151,144,97,0,98,35,101,35,111,73,113,137,116,244,125,111,128,238,132,38,143,35,144,74,147,189,81,23,82,163,82,12,109,200,112,194,136,201,94,130,101,174,107,194,111,62,124,117,115,228,78,54,79,249,86,95,249,186,92,186,93,28,96,178,115,45,123,154,127,206,127,70,128,30,144,52,146,246,150,72,151,24,152,97,159,139,79,167,111,174,121,180,145,183,150,222,82,96,249,136,100,196,100,211,106,94,111,24,112,16,114,231,118,1,128,6,134,92,134,239,141,5,143,50,151,111,155,250,157,117,158,140,120,127,121,160,125,201,131,4,147,127,158,147,158,214,138,223,88,4,95,39,103,39,112,207,116,96,124,126,128,33,81,40,112,98,114,202,120,194,140,218,140,244,140,247,150,134,78,218,80,238,91,214,94,153,101,206,113,66,118,173,119,74,128,252,132,124,144,39,155,141,159,216,88,65,90,98,92,19,106,218,109,15,111,59,118,47,125,55,126,30,133,56,137,228,147,75,150,137,82,210,101,243,103,180,105,65,109,156,110,15,112,9,116,96,116,89,117,36,118,107,120,44,139,94,152,109,81,46,98,120,150,150,79,43,80,25,93,234,109,184,125,42,143,139,95,68,97,23,104,97,249,134,150,210,82,139,128,220,81,204,81,94,105,28,122,190,125,241,131,117,150,218,79,41,82,152,83,15,84,14,85,101,92,167,96,78,103,168,104,108,109,129,114,248,114,6,116,131,116,98,249,226,117,108,124,121,127,184,127,137,131,207,136,225,136,204,145,208,145,226,150,201,155,29,84,126,111,208,113,152,116,250,133,170,142,163,150,87,156,159,158,151,103,203,109,51,116,232,129,22,151,44,120,203,122,32,123,146,124,105,100,106,116,242,117,188,120,232,120,172,153,84,155,187,158,222,91,85,94,32,111,156,129,171,131,136,144,7,78,77,83,41,90,210,93,78,95,98,97,61,99,105,102,252,102,255,110,43,111,99,112,158,119,44,132,19,133,59,136,19,143,69,153,59,156,28,85,185,98,43,103,171,108,9,131,106,137,122,151,161,78,132,89,216,95,217,95,27,103,178,125,84,127,146,130,43,131,189,131,30,143,153,144,203,87,185,89,146,90,208,91,39,102,154,103,133,104,207,107,100,113,117,127,183,140,227,140,129,144,69,155,8,129,138,140,76,150,64,154,165,158,95,91,19,108,27,115,242,118,223,118,12,132,170,81,147,137,77,81,149,81,201,82,201,104,148,108,4,119,32,119,191,125,236,125,98,151,181,158,197,110,17,133,165,81,13,84,125,84,14,102,157,102,39,105,159,110,191,118,145,119,23,131,194,132,159,135,105,145,152,146,244,156,130,136,174,79,146,81,223,82,198,89,61,94,85,97,120,100,121,100,174,102,208,103,33,106,205,107,219,107,95,114,97,114,65,116,56,119,219,119,23,128,188,130,5,131,0,139,40,139,140,140,40,103,144,108,103,114,238,118,102,119,70,122,169,157,127,107,146,108,34,89,38,103,153,132,111,83,147,88,153,89,223,94,207,99,52,102,115,103,58,110,43,115,215,122,215,130,40,147,217,82,235,93,174,97,203,97,10,98,199,98,171,100,224,101,89,105,102,107,203,107,33,113,247,115,93,117,70,126,30,130,2,131,106,133,163,138,191,140,39,151,97,157,168,88,216,158,17,80,14,82,59,84,79,85,135,101,118,108,10,125,11,125,94,128,138,134,128,149,239,150,255,82,149,108,105,114,115,84,154,90,62,92,75,93,76,95,174,95,42,103,182,104,99,105,60,110,68,110,9,119,115,124,142,127,135,133,14,139,247,143,97,151,244,158,183,92,182,96,13,97,171,97,79,101,251,101,252,101,17,108,239,108,159,115,201,115,225,125,148,149,198,91,28,135,16,139,93,82,90,83,205,98,15,100,178,100,52,103,56,106,202,108,192,115,158,116,148,123,149,124,27,126,138,129,54,130,132,133,235,143,249,150,193,153,52,79,74,83,205,83,219,83,204,98,44,100,0,101,145,101,195,105,238,108,88,111,237,115,84,117,34,118,228,118,252,118,208,120,251,120,44,121,70,125,44,130,224,135,212,143,18,152,239,152,195,82,212,98,165,100,36,110,81,111,124,118,203,141,177,145,98,146,238,154,67,155,35,80,141,80,74,87,168,89,40,92,71,94,119,95,63,98,62,101,185,101,193,101,9,102,139,103,156,105,194,110,197,120,33,125,170,128,128,129,43,130,179,130,161,132,140,134,42,138,23,139,166,144,50,150,144,159,13,80,243,79,99,249,249,87,152,95,220,98,146,99,111,103,67,110,25,113,195,118,204,128,218,128,244,136,245,136,25,137,224,140,41,143,77,145,106,150,47,79,112,79,27,94,207,103,34,104,125,118,126,118,68,155,97,94,10,106,105,113,212,113,106,117,100,249,65,126,67,133,233,133,220,152,16,79,79,123,112,127,165,149,225,81,6,94,181,104,62,108,78,108,219,108,175,114,196,123,3,131,213,108,58,116,251,80,136,82,193,88,216,100,151,106,167,116,86,118,167,120,23,134,226,149,57,151,101,249,94,83,1,95,138,139,168,143,175,143,138,144,37,82,165,119,73,156,8,159,25,78,2,80,117,81,91,92,119,94,30,102,58,102,196,103,197,104,179,112,1,117,197,117,201,121,221,122,39,143,32,153,8,154,221,79,33,88,49,88,246,91,110,102,101,107,17,109,122,110,125,111,228,115,43,117,233,131,220,136,19,137,92,139,20,143,15,79,213,80,16,83,92,83,147,91,169,95,13,103,143,121,121,129,47,131,20,133,7,137,134,137,57,143,59,143,165,153,18,156,44,103,118,78,248,79,73,89,1,92,239,92,240,92,103,99,210,104,253,112,162,113,43,116,43,126,236,132,2,135,34,144,210,146,243,156,13,78,216,78,239,79,133,80,86,82,111,82,38,84,144,84,224,87,43,89,102,90,90,91,117,91,204,91,156,94,102,249,118,98,119,101,167,101,110,109,165,110,54,114,38,123,63,124,54,127,80,129,81,129,154,129,64,130,153,130,169,131,3,138,160,140,230,140,251,140,116,141,186,141,232,144,220,145,28,150,68,150,217,153,231,156,23,83,6,82,41,84,116,86,179,88,84,89,110,89,255,95,164,97,110,98,16,102,126,108,26,113,198,118,137,124,222,124,27,125,172,130,193,140,240,150,103,249,91,79,23,95,127,95,194,98,41,93,11,103,218,104,124,120,67,126,108,157,21,78,153,80,21,83,42,83,81,83,131,89,98,90,135,94,178,96,138,97,73,98,121,98,144,101,135,103,167,105,212,107,214,107,215,107,216,107,184,108,104,249,53,116,250,117,18,120,145,120,213,121,216,121,131,124,203,125,225,127,165,128,62,129,194,129,242,131,26,135,232,136,185,138,108,139,187,140,25,145,94,151,219,152,59,159,172,86,42,91,108,95,140,101,179,106,175,107,92,109,241,111,21,112,93,114,173,115,167,140,211,140,59,152,145,97,55,108,88,128,1,154,77,78,139,78,155,78,213,78,58,79,60,79,127,79,223,79,255,80,242,83,248,83,6,85,227,85,219,86,235,88,98,89,17,90,235,91,250,91,4,92,243,93,43,94,153,95,29,96,104,99,156,101,175,101,246,103,251,103,173,104,123,107,153,108,215,108,35,110,9,112,69,115,2,120,62,121,64,121,96,121,193,121,233,123,23,125,114,125,134,128,13,130,142,131,209,132,199,134,223,136,80,138,94,138,29,139,220,140,102,141,173,143,170,144,252,152,223,153,157,158,74,82,105,249,20,103,106,249,152,80,42,82,113,92,99,101,85,108,202,115,35,117,157,117,151,123,156,132,120,145,48,151,119,78,146,100,186,107,94,113,169,133,9,78,107,249,73,103,238,104,23,110,159,130,24,133,107,136,247,99,129,111,18,146,175,152,10,78,183,80,207,80,31,81,70,85,170,85,23,86,64,91,25,92,224,92,56,94,138,94,160,94,194,94,243,96,81,104,97,106,88,110,61,114,64,114,192,114,248,118,101,121,177,123,212,127,243,136,244,137,115,138,97,140,222,140,28,151,94,88,189,116,253,140,199,85,108,249,97,122,34,125,114,130,114,114,31,117,37,117,109,249,25,123,133,88,251,88,188,93,143,94,182,94,144,95,85,96,146,98,127,99,77,101,145,102,217,102,248,102,22,104,242,104,128,114,94,116,110,123,110,125,214,125,114,127,229,128,18,130,175,133,127,137,147,138,29,144,228,146,205,158,32,159,21,89,109,89,45,94,220,96,20,102,115,102,144,103,80,108,197,109,95,111,243,119,169,120,198,132,203,145,43,147,217,78,202,80,72,81,132,85,11,91,163,91,71,98,126,101,203,101,50,110,125,113,1,116,68,116,135,116,191,116,108,118,170,121,218,125,85,126,168,127,122,129,179,129,57,130,26,134,236,135,117,138,227,141,120,144,145,146,37,148,77,153,174,155,104,83,81,92,84,105,196,108,41,109,43,110,12,130,155,133,59,137,45,138,170,138,234,150,103,159,97,82,185,102,178,107,150,126,254,135,13,141,131,149,93,150,29,101,137,109,238,113,110,249,206,87,211,89,172,91,39,96,250,96,16,98,31,102,95,102,41,115,249,115,219,118,1,119,108,123,86,128,114,128,101,129,160,138,146,145,22,78,226,82,114,107,23,109,5,122,57,123,48,125,111,249,176,140,236,83,47,86,81,88,181,91,15,92,17,92,226,93,64,98,131,99,20,100,45,102,179,104,188,108,136,109,175,110,31,112,164,112,210,113,38,117,143,117,142,117,25,118,17,123,224,123,43,124,32,125,57,125,44,133,109,133,7,134,52,138,13,144,97,144,181,144,183,146,246,151,55,154,215,79,108,92,95,103,145,109,159,124,140,126,22,139,22,141,31,144,107,91,253,93,13,100,192,132,92,144,225,152,135,115,139,91,154,96,126,103,222,109,31,138,166,138,1,144,12,152,55,82,112,249,81,112,142,120,150,147,112,136,215,145,238,79,215,83,253,85,218,86,130,87,253,88,194,90,136,91,171,92,192,92,37,94,1,97,13,98,75,98,136,99,28,100,54,101,120,101,57,106,138,107,52,108,25,109,49,111,231,113,233,114,120,115,7,116,178,116,38,118,97,119,192,121,87,122,234,122,185,124,143,125,172,125,97,126,158,127,41,129,49,131,144,132,218,132,234,133,150,136,176,138,144,139,56,143,66,144,131,144,108,145,150,146,185,146,139,150,167,150,168,150,214,150,0,151,8,152,150,153,211,154,26,155,212,83,126,88,25,89,112,91,191,91,209,109,90,111,159,113,33,116,185,116,133,128,253,131,225,93,135,95,170,95,66,96,236,101,18,104,111,105,83,106,137,107,53,109,243,109,227,115,254,118,172,119,77,123,20,125,35,129,28,130,64,131,244,132,99,133,98,138,196,138,135,145,30,147,6,152,180,153,12,98,83,136,240,143,101,146,7,93,39,93,105,93,95,116,157,129,104,135,213,111,254,98,210,127,54,137,114,137,30,78,88,78,231,80,221,82,71,83,127,98,7,102,105,126,5,136,94,150,141,79,25,83,54,86,203,89,164,90,56,92,78,92,77,92,2,94,17,95,67,96,189,101,47,102,66,102,190,103,244,103,28,115,226,119,58,121,197,127,148,132,205,132,150,137,102,138,105,138,225,138,85,140,122,140,244,87,212,91,15,95,111,96,237,98,13,105,150,107,92,110,132,113,210,123,85,135,88,139,254,142,223,152,254,152,56,79,129,79,225,79,123,84,32,90,184,91,60,97,176,101,104,102,252,113,51,117,94,121,51,125,78,129,227,129,152,131,170,133,206,133,3,135,10,138,171,142,155,143,113,249,197,143,49,89,164,91,230,91,137,96,233,91,11,92,195,95,129,108,114,249,241,109,11,112,26,117,175,130,246,138,192,78,65,83,115,249,217,150,15,108,158,78,196,79,82,81,94,85,37,90,232,92,17,98,89,114,189,130,170,131,254,134,89,136,29,138,63,150,197,150,19,153,9,157,93,157,10,88,179,92,189,93,68,94,225,96,21,97,225,99,2,106,37,110,2,145,84,147,78,152,16,156,119,159,137,91,184,92,9,99,79,102,72,104,60,119,193,150,141,151,84,152,159,155,161,101,1,139,203,142,188,149,53,85,169,92,214,93,181,94,151,102,76,118,244,131,199,149,211,88,188,98,206,114,40,157,240,78,46,89,15,96,59,102,131,107,231,121,38,157,147,83,192,84,195,87,22,93,27,97,214,102,175,109,141,120,126,130,152,150,68,151,132,83,124,98,150,99,178,109,10,126,75,129,77,152,251,106,76,127,175,157,26,158,95,78,59,80,182,81,28,89,249,96,246,99,48,105,58,114,54,128,116,249,206,145,49,95,117,249,118,249,4,125,229,130,111,132,187,132,229,133,141,142,119,249,111,79,120,249,121,249,228,88,67,91,89,96,218,99,24,101,109,101,152,102,122,249,74,105,35,106,11,109,1,112,108,113,210,117,13,118,179,121,112,122,123,249,138,127,124,249,68,137,125,249,147,139,192,145,125,150,126,249,10,153,4,87,161,95,188,101,1,111,0,118,166,121,158,138,173,153,90,155,108,159,4,81,182,97,145,98,141,106,198,129,67,80,48,88,102,95,9,113,0,138,250,138,124,91,22,134,250,79,60,81,180,86,68,89,169,99,249,109,170,93,109,105,134,81,136,78,89,79,127,249,128,249,129,249,130,89,130,249,131,249,95,107,93,108,132,249,181,116,22,121,133,249,7,130,69,130,57,131,63,143,93,143,134,249,24,153,135,249,136,249,137,249,166,78,138,249,223,87,121,95,19,102,139,249,140,249,171,117,121,126,111,139,141,249,6,144,91,154,165,86,39,88,248,89,31,90,180,91,142,249,246,94,143,249,144,249,80,99,59,99,145,249,61,105,135,108,191,108,142,109,147,109,245,109,20,111,146,249,223,112,54,113,89,113,147,249,195,113,213,113,148,249,79,120,111,120,149,249,117,123,227,125,150,249,47,126,151,249,77,136,223,142,152,249,153,249,154,249,91,146,155,249,246,156,156,249,157,249,158,249,133,96,133,109,159,249,177,113,160,249,161,249,177,149,173,83,162,249,163,249,164,249,211,103,165,249,142,112,48,113,48,116,118,130,210,130,166,249,187,149,229,154,125,158,196,102,167,249,193,113,73,132,168,249,169,249,75,88,170,249,171,249,184,93,113,95,172,249,32,102,142,102,121,105,174,105,56,108,243,108,54,110,65,111,218,111,27,112,47,112,80,113,223,113,112,115,173,249,91,116,174,249,212,116,200,118,78,122,147,126,175,249,176,249,241,130,96,138,206,143,177,249,72,147,178,249,25,151,179,249,180,249,66,78,42,80,181,249,8,82,225,83,243,102,109,108,202,111,10,115,127,119,98,122,174,130,221,133,2,134,182,249,212,136,99,138,125,139,107,140,183,249,179,146,184,249,19,151,16,152,148,78,13,79,201,79,178,80,72,83,62,84,51,84,218,85,98,88,186,88,103,89,27,90,228,91,159,96,185,249,202,97,86,101,255,101,100,102,167,104,90,108,179,111,207,112,172,113,82,115,125,123,8,135,164,138,50,156,7,159,75,92,131,108,68,115,137,115,58,146,171,110,101,116,31,118,105,122,21,126,10,134,64,81,197,88,193,100,238,116,21,117,112,118,193,127,149,144,205,150,84,153,38,110,230,116,169,122,170,122,229,129,217,134,120,135,27,138,73,90,140,91,155,91,161,104,0,105,99,109,169,115,19,116,44,116,151,120,233,125,235,127,24,129,85,129,158,131,76,140,46,150,17,152,240,102,128,95,250,101,137,103,106,108,139,115,45,80,3,90,106,107,238,119,22,89,108,93,205,93,37,115,79,117,186,249,187,249], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+134644);
	/* memory initializer */ allocate([229,80,249,81,47,88,45,89,150,89,218,89,229,91,188,249,189,249,162,93,215,98,22,100,147,100,254,100,190,249,220,102,191,249,72,106,192,249,255,113,100,116,193,249,136,122,175,122,71,126,94,126,0,128,112,129,194,249,239,135,129,137,32,139,89,144,195,249,128,144,82,153,126,97,50,107,116,109,31,126,37,137,177,143,209,79,173,80,151,81,199,82,199,87,137,88,185,91,184,94,66,97,149,105,140,109,103,110,182,110,148,113,98,116,40,117,44,117,115,128,56,131,201,132,10,142,148,147,222,147,196,249,142,78,81,79,118,80,42,81,200,83,203,83,243,83,135,91,211,91,36,92,26,97,130,97,244,101,91,114,151,115,64,116,194,118,80,121,145,121,185,121,6,125,189,127,139,130,213,133,94,134,194,143,71,144,245,144,234,145,133,150,232,150,233,150,214,82,103,95,237,101,49,102,47,104,92,113,54,122,193,144,10,152,145,78,197,249,82,106,158,107,144,111,137,113,24,128,184,130,83,133,75,144,149,150,242,150,251,151,26,133,49,155,144,78,138,113,196,150,67,81,159,83,225,84,19,87,18,87,163,87,155,90,196,90,195,91,40,96,63,97,244,99,133,108,57,109,114,110,144,110,48,114,63,115,87,116,209,130,129,136,69,143,96,144,198,249,98,150,88,152,27,157,8,103,138,141,94,146,77,79,73,80,222,80,113,83,13,87,212,89,1,90,9,92,112,97,144,102,45,110,50,114,75,116,239,125,195,128,14,132,102,132,63,133,95,135,91,136,24,137,2,139,85,144,203,151,79,155,115,78,145,79,18,81,106,81,199,249,47,85,169,85,122,91,165,91,124,94,125,94,190,94,160,96,223,96,8,97,9,97,196,99,56,101,9,103,200,249,212,103,218,103,201,249,97,105,98,105,185,108,39,109,202,249,56,110,203,249,225,111,54,115,55,115,204,249,92,116,49,117,205,249,82,118,206,249,207,249,173,125,254,129,56,132,213,136,152,138,219,138,237,138,48,142,66,142,74,144,62,144,122,144,73,145,201,145,110,147,208,249,209,249,9,88,210,249,211,107,137,128,178,128,211,249,212,249,65,81,107,89,57,92,213,249,214,249,100,111,167,115,228,128,7,141,215,249,23,146,143,149,216,249,217,249,218,249,219,249,127,128,14,98,28,112,104,125,141,135,220,249,160,87,105,96,71,97,183,107,190,138,128,146,177,150,89,78,31,84,235,109,45,133,112,150,243,151,238,152,214,99,227,108,145,144,221,81,201,97,186,129,249,157,157,79,26,80,0,81,156,91,15,97,255,97,236,100,5,105,197,107,145,117,227,119,169,127,100,130,143,133,251,135,99,136,188,138,112,139,171,145,140,78,229,78,10,79,221,249,222,249,55,89,232,89,223,249,242,93,27,95,91,95,33,96,224,249,225,249,226,249,227,249,62,114,229,115,228,249,112,117,205,117,229,249,251,121,230,249,12,128,51,128,132,128,225,130,81,131,231,249,232,249,189,140,179,140,135,144,233,249,234,249,244,152,12,153,235,249,236,249,55,112,202,118,202,127,204,127,252,127,26,139,186,78,193,78,3,82,112,83,237,249,189,84,224,86,251,89,197,91,21,95,205,95,110,110,238,249,239,249,106,125,53,131,240,249,147,134,141,138,241,249,109,151,119,151,242,249,243,249,0,78,90,79,126,79,249,88,229,101,162,110,56,144,176,147,185,153,251,78,236,88,138,89,217,89,65,96,244,249,245,249,20,122,246,249,79,131,195,140,101,81,68,83,247,249,248,249,249,249,205,78,105,82,85,91,191,130,212,78,58,82,168,84,201,89,255,89,80,91,87,91,92,91,99,96,72,97,203,110,153,112,110,113,134,115,247,116,181,117,193,120,43,125,5,128,234,129,40,131,23,133,201,133,238,138,199,140,204,150,92,79,250,82,188,86,171,101,40,102,124,112,184,112,53,114,189,125,141,130,76,145,192,150,114,157,113,91,231,104,152,107,122,111,222,118,145,92,171,102,91,111,180,123,42,124,54,136,220,150,8,78,215,78,32,83,52,88,187,88,239,88,108,89,7,92,51,94,132,94,53,95,140,99,178,102,86,103,31,106,163,106,12,107,63,111,70,114,250,249,80,115,139,116,224,122,167,124,120,129,223,129,231,129,138,131,108,132,35,133,148,133,207,133,221,136,19,141,172,145,119,149,156,150,141,81,201,84,40,87,176,91,77,98,80,103,61,104,147,104,61,110,211,110,125,112,33,126,193,136,161,140,9,143,75,159,78,159,45,114,143,123,205,138,26,147,71,79,78,79,50,81,128,84,208,89,149,94,181,98,117,103,110,105,23,106,174,108,26,110,217,114,42,115,189,117,184,123,53,125,231,130,249,131,87,132,247,133,91,138,175,140,135,142,25,144,184,144,206,150,95,159,227,82,10,84,225,90,194,91,88,100,117,101,244,110,196,114,251,249,132,118,77,122,27,123,77,124,62,126,223,127,123,131,43,139,202,140,100,141,225,141,95,142,234,143,249,143,105,144,209,147,67,79,122,79,179,80,104,81,120,81,77,82,106,82,97,88,124,88,96,89,8,92,85,92,219,94,155,96,48,98,19,104,191,107,8,108,177,111,78,113,32,116,48,117,56,117,81,117,114,118,76,123,139,123,173,123,198,123,143,126,110,138,62,143,73,143,63,146,147,146,34,147,43,148,251,150,90,152,107,152,30,153,7,82,42,98,152,98,89,109,100,118,202,122,192,123,118,125,96,83,190,92,151,94,56,111,185,112,152,124,17,151,142,155,222,158,165,99,122,100,118,135,1,78,149,78,173,78,92,80,117,80,72,84,195,89,154,91,64,94,173,94,247,94,129,95,197,96,58,99,63,101,116,101,204,101,118,102,120,102,254,103,104,105,137,106,99,107,64,108,192,109,232,109,31,110,94,110,30,112,161,112,142,115,253,115,58,117,91,119,135,120,142,121,11,122,125,122,190,124,142,125,71,130,2,138,234,138,158,140,45,145,74,145,216,145,102,146,204,146,32,147,6,151,86,151,92,151,2,152,14,159,54,82,145,82,124,85,36,88,29,94,31,95,140,96,208,99,175,104,223,111,109,121,44,123,205,129,186,133,253,136,248,138,68,142,141,145,100,150,155,150,61,151,76,152,74,159,206,79,70,81,203,81,169,82,50,86,20,95,107,95,170,99,205,100,233,101,65,102,250,102,249,102,29,103,157,104,215,104,253,105,21,111,110,111,103,113,229,113,42,114,170,116,58,119,86,121,90,121,223,121,32,122,149,122,151,124,223,124,68,125,112,126,135,128,251,133,164,134,84,138,191,138,153,141,129,142,32,144,109,144,227,145,59,150,213,150,229,156,207,101,7,124,179,141,195,147,88,91,10,92,82,83,217,98,29,115,39,80,151,91,158,95,176,96,107,97,213,104,217,109,46,116,46,122,66,125,156,125,49,126,107,129,42,142,53,142,126,147,24,148,80,79,80,87,230,93,167,94,43,99,106,127,59,78,79,79,143,79,90,80,221,89,196,128,106,84,104,84,254,85,79,89,153,91,222,93,218,94,93,102,49,103,241,103,42,104,232,108,50,109,74,110,141,111,183,112,224,115,135,117,76,124,2,125,44,125,162,125,31,130,219,134,59,138,133,138,112,141,138,142,51,143,49,144,78,145,82,145,68,148,208,153,249,122,165,124,202,79,1,81,198,81,200,87,239,91,251,92,89,102,61,106,90,109,150,110,236,111,12,113,111,117,227,122,34,136,33,144,117,144,203,150,255,153,1,131,45,78,242,78,70,136,205,145,125,83,219,106,107,105,65,108,122,132,158,88,142,97,254,102,239,98,221,112,17,117,199,117,82,126,184,132,73,139,8,141,75,78,234,83,171,84,48,87,64,87,215,95,1,99,7,99,111,100,47,101,232,101,122,102,157,103,179,103,98,107,96,108,154,108,44,111,229,119,37,120,73,121,87,121,25,125,162,128,2,129,243,129,157,130,183,130,24,135,140,138,252,249,4,141,190,141,114,144,244,118,25,122,55,122,84,126,119,128,7,85,212,85,117,88,47,99,34,100,73,102,75,102,109,104,155,105,132,107,37,109,177,110,205,115,104,116,161,116,91,117,185,117,225,118,30,119,139,119,230,121,9,126,29,126,251,129,47,133,151,136,58,138,209,140,235,142,176,143,50,144,173,147,99,150,115,150,7,151,132,79,241,83,234,89,201,90,25,94,78,104,198,116,190,117,233,121,146,122,163,129,237,134,234,140,204,141,237,143,159,101,21,103,253,249,247,87,87,111,221,125,47,143,246,147,198,150,181,95,242,97,132,111,20,78,152,79,31,80,201,83,223,85,111,93,238,93,33,107,100,107,203,120,154,123,254,249,73,142,202,142,110,144,73,99,62,100,64,119,132,122,47,147,127,148,106,159,176,100,175,111,230,113,168,116,218,116,196,122,18,124,130,126,178,124,152,126,154,139,10,141,125,148,16,153,76,153,57,82,223,91,230,100,45,103,46,125,237,80,195,83,121,88,88,97,89,97,250,97,172,101,217,122,146,139,150,139,9,80,33,80,117,82,49,85,60,90,224,94,112,95,52,97,94,101,12,102,54,102,162,102,205,105,196,110,50,111,22,115,33,118,147,122,57,129,89,130,214,131,188,132,181,80,240,87,192,91,232,91,105,95,161,99,38,120,181,125,220,131,33,133,199,145,245,145,138,81,245,103,86,123,172,140,196,81,187,89,189,96,85,134,28,80,255,249,84,82,58,92,125,97,26,98,211,98,242,100,165,101,204,110,32,118,10,129,96,142,95,150,187,150,223,78,67,83,152,85,41,89,221,93,197,100,201,108,250,109,148,115,127,122,27,130,166,133,228,140,16,142,119,144,231,145,225,149,33,150,198,151,248,81,242,84,134,85,185,95,164,100,136,111,180,125,31,143,77,143,53,148,201,80,22,92,190,108,251,109,27,117,187,119,61,124,100,124,121,138,194,138,30,88,190,89,22,94,119,99,82,114,138,117,107,119,220,138,188,140,18,143,243,94,116,102,248,109,125,128,193,131,203,138,81,151,214,155,0,250,67,82,255,102,149,109,239,110,224,125,230,138,46,144,94,144,212,154,29,82,127,82,232,84,148,97,132,98,219,98,162,104,18,105,90,105,53,106,146,112,38,113,93,120,1,121,14,121,210,121,13,122,150,128,120,130,213,130,73,131,73,133,130,140,133,141,98,145,139,145,174,145,195,79,209,86,237,113,215,119,0,135,248,137,248,91,214,95,81,103,168,144,226,83,90,88,245,91,164,96,129,97,96,100,61,126,112,128,37,133,131,146,174,100,172,80,20,93,0,103,156,88,189,98,168,99,14,105,120,105,30,106,107,110,186,118,203,121,187,130,41,132,207,138,168,141,253,143,18,145,75,145,156,145,16,147,24,147,154,147,219,150,54,154,13,156,17,78,92,117,93,121,250,122,81,123,201,123,46,126,196,132,89,142,116,142,248,142,16,144,37,102,63,105,67,116,250,81,46,103,220,158,69,81,224,95,150,108,242,135,93,136,119,136,180,96,181,129,3,132,5,141,214,83,57,84,52,86,54,90,49,92,138,112,224,127,90,128,6,129,237,129,163,141,137,145,95,154,242,157,116,80,196,78,160,83,251,96,44,110,100,92,136,79,36,80,228,85,217,92,95,94,101,96,148,104,187,108,196,109,190,113,212,117,244,117,97,118,26,122,73,122,199,125,251,125,110,127,244,129,169,134,28,143,201,150,179,153,82,159,71,82,197,82,237,152,170,137,3,78,210,103,6,111,181,79,226,91,149,103,136,108,120,109,27,116,39,120,221,145,124,147,196,135,228,121,49,122,235,95,214,78,164,84,62,85,174,88,165,89,240,96,83,98,214,98,54,103,85,105,53,130,64,150,177,153,221,153,44,80,83,83,68,85,124,87,1,250,88,98,2,250,226,100,107,102,221,103,193,111,239,111,34,116,56,116,23,138,56,148,81,84,6,86,102,87,72,95,154,97,78,107,88,112,173,112,187,125,149,138,106,89,43,129,162,99,8,119,61,128,170,140,84,88,45,100,187,105,149,91,17,94,111,110,3,250,105,133,76,81,240,83,42,89,32,96,75,97,134,107,112,108,240,108,30,123,206,128,212,130,198,141,176,144,177,152,4,250,199,100,164,111,145,100,4,101,78,81,16,84,31,87,14,138,95,97,118,104,5,250,219,117,82,123,113,125,26,144,6,88,204,105,127,129,42,137,0,144,57,152,120,80,87,89,172,89,149,98,15,144,42,155,93,97,121,114,214,149,97,87,70,90,244,93,138,98,173,100,250,100,119,103,226,108,62,109,44,114,54,116,52,120,119,127,173,130,219,141,23,152,36,82,66,87,127,103,72,114,227,116,169,140,166,143,17,146,42,150,107,81,237,83,76,99,105,79,4,85,150,96,87,101,155,108,127,109,76,114,253,114,23,122,135,137,157,140,109,95,142,111,249,112,168,129,14,97,191,79,79,80,65,98,71,114,199,123,232,125,233,127,77,144,173,151,25,154,182,140,106,87,115,94,176,103,13,132,85,138,32,84,22,91,99,94,226,94,10,95,131,101,186,128,61,133,137,149,91,150,72,79,5,83,13,83,15,83,134,84,250,84,3,87,3,94,22,96,155,98,177,98,85,99,6,250,225,108,102,109,177,117,50,120,222,128,47,129,222,130,97,132,178,132,141,136,18,137,11,144,234,146,253,152,145,155,69,94,180,102,221,102,17,112,6,114,7,250,245,79,125,82,106,95,83,97,83,103,25,106,2,111,226,116,104,121,104,136,121,140,199,152,196,152,67,154,193,84,31,122,83,105,247,138,74,140,168,152,174,153,124,95,171,98,178,117,174,118,171,136,127,144,66,150,57,83,60,95,197,95,204,108,204,115,98,117,139,117,70,123,254,130,157,153,79,78,60,144,11,78,85,79,166,83,15,89,200,94,48,102,179,108,85,116,119,131,102,135,192,140,80,144,30,151,21,156,209,88,120,91,80,134,20,139,180,157,210,91,104,96,141,96,241,101,87,108,34,111,163,111,26,112,85,127,240,127,145,149,146,149,80,150,211,151,114,82,68,143,253,81,43,84,184,84,99,85,138,85,187,106,181,109,216,125,102,130,156,146,119,150,121,158,8,84,200,84,210,118,228,134,164,149,212,149,92,150,162,78,9,79,238,89,230,90,247,93,82,96,151,98,109,103,65,104,134,108,47,110,56,127,155,128,42,130,8,250,9,250,5,152,165,78,85,80,179,84,147,87,90,89,105,91,179,91,200,97,119,105,119,109,35,112,249,135,227,137,114,138,231,138,130,144,237,153,184,154,190,82,56,104,22,80,120,94,79,103,71,131,76,136,171,78,17,84,174,86,230,115,21,145,255,151,9,153,87,153,153,153,83,86,159,88,91,134,49,138,178,97,246,106,123,115,210,142,71,107,170,150,87,154,85,89,0,114,107,141,105,151,212,79,244,92,38,95,248,97,91,102,235,108,171,112,132,115,185,115,254,115,41,119,77,119,67,125,98,125,35,126,55,130,82,136,10,250,226,140,73,146,111,152,81,91,116,122,64,136,1,152,204,90,224,79,84,83,62,89,253,92,62,99,121,109,249,114,5,129,7,129,162,131,207,146,48,152,168,78,68,81,17,82,139,87,98,95,194,108,206,110,5,112,80,112,175,112,146,113,233,115,105,116,74,131,162,135,97,136,8,144,162,144,163,147,168,153,110,81,87,95,224,96,103,97,179,102,89,133,74,142,175,145,139,151,78,78,146,78,124,84,213,88,250,88,125,89,181,92,39,95,54,98,72,98,10,102,103,102,235,107,105,109,207,109,86,110,248,110,148,111,224,111,233,111,93,112,208,114,37,116,90,116,224,116,147,118,92,121,202,124,30,126,225,128,166,130,107,132,191,132,78,134,95,134,116,135,119,139,106,140,172,147,0,152,101,152,209,96,22,98,119,145,90,90,15,102,247,109,62,110,63,116,66,155,253,95,218,96,15,123,196,84,24,95,94,108,211,108,42,109,216,112,5,125,121,134,12,138,59,157,22,83,140,84,5,91,58,106,107,112,117,117,141,121,190,121,177,130,239,131,113,138,65,139,168,140,116,151,11,250,244,100,43,101,186,120,187,120,107,122,56,78,154,85,80,89,166,91,123,94,163,96,219,99,97,107,101,102,83,104,25,110,101,113,176,116,8,125,132,144,105,154,37,156,59,109,209,110,62,115,65,140,202,149,240,81,76,94,168,95,77,96,246,96,48,97,76,97,67,102,68,102,165,105,193,108,95,110,201,110,98,111,76,113,156,116,135,118,193,123,39,124,82,131,87,135,81,144,141,150,195,158,47,83,222,86,251,94,138,95,98,96,148,96,247,97,102,102,3,103,156,106,238,109,174,111,112,112,106,115,106,126,190,129,52,131,212,134,168,138,196,140,131,82,114,115,150,91,107,106,4,148,238,84,134,86,93,91,72,101,133,101,201,102,159,104,141,109,198,109,59,114,180,128,117,145,77,154,175,79,25,80,154,83,14,84,60,84,137,85,197,85,63,94,140,95,61,103,102,113,221,115,5,144,219,82,243,82,100,88,206,88,4,113,143,113,251,113,176,133,19,138,136,102,168,133,167,85,132,102,74,113,49,132,73,83,153,85,193,107,89,95,189,95,238,99,137,102,71,113,241,138,29,143,190,158,17,79,58,100,203,112,102,117,103,134,100,96,78,139,248,157,71,81,246,81,8,83,54,109,248,128,209,158,21,102,35,107,152,112,213,117,3,84,121,92,7,125,22,138,32,107,61,107,70,107,56,84,112,96,61,109,213,127,8,130,214,80,222,81,156,85,107,86,205,86,236,89,9,91,12,94,153,97,152,97,49,98,94,102,230,102,153,113,185,113,186,113,167,114,167,121,0,122,178,127,112,138,0,0,0,0,0,0,1,0,160,0,167,0,168,0,169,0,175,0,176,0,178,0,183,0,184,0,198,0,215,0,216,0,230,0,247,0,248,0,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,1,46,1,47,1,48,1,49,1,52,1,53,1,54,1,55,1,56,1,57,1,58,1,59,1,60,1,61,1,62,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,74,1,75,1,76,1,77,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,123,1,124,1,125,1,126,1,146,1,160,1,161,1,175,1,176,1,24,2,25,2,26,2,27,2,198,2,199,2,216,2,217,2,219,2,220,2,221,2,0,3,1,3,3,3,9,3,35,3,122,3,132,3,133,3,134,3,136,3,137,3,138,3,140,3,142,3,143,3,144,3,145,3,146,3,147,3,148,3,149,3,150,3,151,3,152,3,153,3,154,3,155,3,156,3,157,3,158,3,159,3,160,3,161,3,163,3,164,3,165,3,166,3,167,3,168,3,169,3,170,3,171,3,172,3,173,3,174,3,175,3,176,3,177,3,178,3,179,3,180,3,181,3,182,3,183,3,184,3,185,3,186,3,187,3,188,3,189,3,190,3,191,3,192,3,193,3,194,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,202,3,203,3,204,3,205,3,206,3,1,4,2,4,3,4,4,4,5,4,6,4,7,4,8,4,9,4,10,4,11,4,12,4,14,4,15,4,16,4,17,4,18,4,19,4,20,4,21,4,22,4,23,4,24,4,25,4,26,4,27,4,28,4,29,4,30,4,31,4,32,4,33,4,34,4,35,4,36,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,49,4,50,4,51,4,52,4,53,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,81,4,82,4,83,4,84,4,85,4,86,4,87,4,88,4,89,4,90,4,91,4,92,4,94,4,95,4,144,4,145,4,176,5,177,5,178,5,179,5,180,5,181,5,182,5,183,5,184,5,185,5,187,5,188,5,189,5,190,5,191,5,192,5,193,5,194,5,195,5,208,5,209,5,210,5,211,5,212,5,213,5,214,5,215,5,216,5,217,5,218,5,219,5,220,5,221,5,222,5,223,5,224,5,225,5,226,5,227,5,228,5,229,5,230,5,231,5,232,5,233,5,234,5,240,5,241,5,242,5,243,5,244,5,12,6,27,6,31,6,33,6,34,6,35,6,36,6,37,6,38,6,39,6,40,6,41,6,42,6,43,6,44,6,45,6,46,6,47,6,48,6,49,6,50,6,51,6,52,6,53,6,54,6,55,6,56,6,57,6,58,6,64,6,65,6,66,6,67,6,68,6,69,6,70,6,71,6,72,6,73,6,74,6,75,6,76,6,77,6,78,6,79,6,80,6,81,6,82,6,121,6,126,6,134,6,136,6,145,6,152,6,169,6,175,6,186,6,190,6,193,6,210,6,1,14,2,14,3,14,4,14,5,14,6,14,7,14,8,14,9,14,10,14,11,14,12,14,13,14,14,14,15,14,16,14,17,14,18,14,19,14,20,14,21,14,22,14,23,14,24,14,25,14,26,14,27,14,28,14,29,14,30,14,31,14,32,14,33,14,34,14,35,14,36,14,37,14,38,14,39,14,40,14,41,14,42,14,43,14,44,14,45,14,46,14,47,14,48,14,49,14,50,14,51,14,52,14,53,14,54,14,55,14,56,14,57,14,58,14,63,14,64,14,65,14,66,14,67,14,68,14,69,14,70,14,71,14,72,14,73,14,74,14,75,14,76,14,77,14,78,14,79,14,80,14,81,14,82,14,83,14,84,14,85,14,86,14,87,14,88,14,89,14,90,14,91,14,2,30,3,30,10,30,11,30,30,30,31,30,64,30,65,30,86,30,87,30,96,30,97,30,106,30,107,30,128,30,129,30,130,30,131,30,132,30,133,30,242,30,243,30,12,32,13,32,14,32,15,32,19,32,20,32,21,32,23,32,24,32,25,32,26,32,28,32,29,32,30,32,32,32,33,32,34,32,38,32,48,32,57,32,58,32,170,32,171,32,172,32,175,32,22,33,34,33,25,34,26,34,72,34,100,34,101,34,32,35,33,35,0,37,2,37,12,37,16,37,20,37,24,37,28,37,36,37,44,37,52,37,60,37,80,37,81,37,82,37,83,37,84,37,85,37,86,37,87,37,88,37,89,37,90,37,91,37,92,37,93,37,94,37,95,37,96,37,97,37,98,37,99,37,100,37,101,37,102,37,103,37,104,37,105,37,106,37,107,37,108,37,128,37,132,37,136,37,140,37,144,37,145,37,146,37,147,37,160,37,0,0,37,42,46,42,102,0,0,0,0,0,0,0,0,0,0,0,44,254,255,255,255,191,178,63,214,52,179,91,82,137,39,64,37,24,48,21,99,109,129,64,109,244,24,62,153,77,193,64,102,21,144,14,212,18,226,64,188,57,91,54,213,120,100,64,99,5,107,78,88,162,191,64,63,140,211,84,82,102,1,65,67,43,165,131,218,131,40,65,61,11,222,40,107,166,41,65,197,48,149,44,109,253,20,193,217,140,204,41,143,61,180,61,76,176,114,209,255,191,178,63,211,61,149,185,176,87,23,64,233,136,135,10,146,227,96,64,129,196,200,157,249,12,144,64,166,227,198,83,233,23,159,64,67,21,94,251,179,177,84,64,206,192,33,218,160,59,160,64,109,30,89,123,210,103,210,64,114,35,224,151,227,181,235,64,160,84,122,31,24,145,225,64,9,198,219,190,87,234,180,192,130,203,222,106,3,205,50,62,66,8,141,14,238,191,178,63,245,156,20,97,252,192,10,64,221,174,45,150,152,79,69,64,31,253,94,226,219,89,101,64,224,33,250,129,124,215,100,64,166,67,227,191,34,97,72,64,179,78,84,134,131,45,134,64,99,252,77,228,75,240,172,64,40,106,199,215,108,60,185,64,192,177,79,217,170,168,163,64,15,244,28,32,235,167,98,192,219,107,247,84,59,49,132,62,52,62,136,62,197,190,178,63,156,119,39,231,151,248,255,63,229,111,249,170,191,253,44,64,74,220,251,41,142,170,63,64,180,75,129,113,177,64,48,64,237,122,192,247,150,93,62,64,64,75,209,228,145,213,112,64,34,191,179,34,69,102,138,64,20,194,92,156,124,151,139,64,101,19,0,14,83,149,106,64,49,41,179,248,106,62,21,192,0,0,0,0,0,0,0,0,50,253,255,255,255,255,177,191,121,167,79,180,208,41,32,192,99,232,25,123,2,17,112,192,252,202,77,205,110,106,163,192,61,100,204,54,11,133,180,192,81,103,169,7,51,34,93,64,56,105,89,80,125,243,173,64,95,176,182,110,187,210,227,64,189,169,159,143,15,129,252,64,220,73,44,79,119,65,231,64,204,149,228,71,177,24,169,189,198,251,154,230,255,255,177,191,191,107,12,249,112,163,16,192,131,23,125,90,47,235,80,192,99,204,66,103,179,179,116,192,215,139,163,40,239,166,117,192,222,197,152,12,129,96,78,64,100,40,126,92,2,109,144,64,96,29,190,143,248,90,183,64,56,250,118,250,184,204,194,64,100,232,11,199,29,204,162,64,134,170,225,111,3,225,37,190,75,226,192,247,246,255,177,191,116,128,164,174,178,69,3,192,20,78,185,76,74,247,53,192,69,26,10,66,34,10,77,192,15,216,146,168,172,114,63,192,211,125,7,132,146,237,65,64,14,124,74,70,57,152,118,64,214,97,16,109,110,166,146,64,126,155,195,184,252,159,145,64,129,144,55,252,150,178,101,64,109,2,39,233,22,211,119,190,66,30,94,73,98,255,177,191,67,168,36,138,57,54,247,191,243,167,175,237,243,138,30,192,3,99,36,197,230,98,38,192,15,231,143,175,129,222,9,192,89,89,139,144,101,56,54,64,143,135,232,14,158,6,97,64,155,7,234,66,134,231,112,64,255,250,182,58,3,60,99,64,9,24,57,68,179,80,45,64,0,0,0,0,0,0,150,61,147,74,60,65,25,107,11,68,202,108,10,70,160,150,16,71,170,198,35,67,194,18,253,69,147,50,11,72,212,30,68,73,89,51,77,73,105,235,167,200,121,236,161,45,255,255,149,61,134,189,186,64,144,28,7,67,205,103,128,68,75,191,248,68,160,141,165,66,7,221,1,69,148,62,147,70,29,175,93,71,193,136,12,71,190,82,167,197,27,104,150,49,112,255,149,61,227,7,86,64,197,124,42,66,223,206,42,67,228,187,38,67,22,9,67,66,28,108,49,68,95,130,103,69,103,227,201,69,87,69,29,69,89,63,21,195,219,137,33,52,42,246,149,61,191,196,255,63,253,237,103,65,113,84,253,65,140,5,130,65,184,236,242,65,143,172,134,67,41,50,83,68,229,187,92,68,152,170,84,67,88,243,169,192,0,0,0,0,0,0,144,189,134,78,1,193,20,136,128,195,118,83,27,197,90,40,164,197,152,17,233,66,235,155,111,69,219,149,30,71,124,8,228,71,186,11,58,71,0,0,0,0,138,197,72,173,255,255,143,189,136,27,133,192,123,89,135,194,155,157,165,195,121,55,173,195,8,4,115,66,19,104,131,68,196,215,186,69,200,101,22,70,238,96,22,69,0,0,0,0,27,8,47,177,184,255,143,189,149,45,26,192,82,186,175,193,18,81,104,194,101,149,251,193,148,108,15,66,202,193,180,67,115,51,149,68,230,255,140,68,184,148,45,67,0,0,0,0,183,152,190,179,18,251,143,189,204,177,185,191,159,87,244,192,54,23,51,193,13,244,78,192,45,195,177,65,240,52,8,67,50,60,135,67,26,224,25,67,154,133,106,65,0,0,0,0,0,0,0,0,0,0,0,0,243,253,255,255,255,63,186,191,247,121,103,162,145,69,48,192,118,181,228,83,208,188,135,192,21,116,248,64,231,36,199,192,106,156,208,101,208,166,231,192,229,205,91,222,166,44,100,64,25,132,216,208,98,145,190,64,152,94,183,176,154,87,0,65,25,156,134,114,83,246,37,65,92,173,25,119,210,87,36,65,24,170,165,14,105,249,17,193,152,160,161,26,67,250,182,189,239,127,89,203,255,63,186,191,75,173,3,202,230,28,32,192,176,185,167,108,109,245,102,192,79,115,49,105,198,116,149,192,157,167,253,136,227,104,164,192,178,17,90,255,178,81,84,64,57,248,123,231,49,31,159,64,41,206,100,13,31,15,209,64,151,209,186,170,109,87,232,64,75,54,124,207,4,75,219,64,4,160,255,252,46,111,178,192,79,200,143,211,169,207,53,190,84,237,174,81,235,63,186,191,255,217,2,51,194,112,18,192,218,22,93,194,113,236,76,192,95,213,24,71,211,135,108,192,246,27,92,95,185,102,107,192,228,103,211,204,35,213,71,64,62,238,49,192,235,14,133,64,154,124,142,68,78,104,170,64,166,84,29,166,186,171,181,64,75,223,212,13,122,188,157,64,31,49,10,41,112,230,96,192,210,38,198,68,38,241,135,190,16,176,72,145,142,62,186,191,218,78,187,105,132,4,6,192,127,144,104,193,226,169,51,192,170,74,16,222,163,41,69,192,82,110,207,57,54,95,53,192,255,100,174,120,138,136,61,64,186,28,130,219,104,159,111,64,247,160,73,206,5,172,135,64,41,192,212,72,37,27,135,64,212,216,62,60,94,126,99,64,107,232,27,231,134,214,19,192,0,0,0,0,0,0,0,0,206,252,255,255,255,255,189,63,206,127,127,53,157,122,42,64,144,165,46,101,212,192,121,64,204,50,165,163,125,69,174,64,221,130,39,195,122,234,190,64,172,108,101,142,69,141,92,64,79,39,77,150,220,133,172,64,127,187,197,151,134,11,226,64,187,23,143,178,44,212,247,64,45,11,122,105,17,21,222,64,125,202,225,218,103,6,173,61,67,0,193,226,255,255,189,63,227,21,99,110,4,54,27,64,237,2,38,69,185,19,91,64,73,214,82,208,22,45,128,64,183,12,126,187,184,133,128,64,61,99,175,168,234,163,77,64,1,103,6,27,54,251,142,64,251,182,6,87,68,233,180,64,21,187,165,184,176,164,190,64,81,94,111,3,48,128,151,64,221,158,173,167,33,252,41,62,123,209,33,91,245,255,189,63,138,173,94,232,188,118,15,64,41,209,166,157,72,143,65,64,55,24,44,77,133,195,86,64,229,62,168,142,143,71,72,64,156,6,52,161,73,101,65,64,95,167,241,7,51,12,117,64,35,213,55,80,124,91,144,64,233,49,46,163,125,214,139,64,83,237,46,124,109,242,89,64,244,68,85,246,212,233,124,62,131,13,118,190,66,255,189,63,192,174,143,249,183,242,2,64,100,169,113,127,55,124,40,64,226,142,127,23,168,177,49,64,254,193,116,165,73,75,20,64,220,236,213,138,189,111,53,64,213,44,249,20,147,82,95,64,217,219,162,213,216,8,109,64,169,132,24,218,122,107,93,64,146,81,78,244,177,186,32,64,0,0,0,0,0,0,210,189,141,44,130,193,131,230,61,196,58,39,57,198,131,54,61,199,55,101,33,67,23,139,244,69,214,188,2,72,156,178,47,73,148,190,34,73,72,203,143,200,50,137,63,180,117,244,209,189,35,36,48,192,22,79,157,193,31,77,41,194,178,249,170,193,84,68,236,65,71,251,124,67,46,96,61,68,42,217,56,68,242,242,27,67,55,180,158,192,0,0,0,0,0,0,240,61,234,212,83,65,163,6,206,67,237,43,114,69,214,83,247,69,44,106,228,66,229,46,100,69,53,92,16,71,102,161,190,71,139,168,240,70,0,0,0,0,63,51,104,45,255,255,239,61,35,176,217,64,202,157,216,66,183,104,1,68,198,45,4,68,85,31,109,66,177,217,119,68,35,74,167,69,134,37,245,69,128,1,188,68,0,0,0,0,13,225,79,49,171,255,239,61,231,181,123,64,69,122,12,66,42,28,182,66,124,60,66,66,77,42,11,66,152,97,168,67,227,219,130,68,237,179,94,68,108,147,207,66,0,0,0,0,168,78,231,51,22,250,239,61,192,149,23,64,188,225,67,65,65,141,141,65,77,90,162,64,236,125,171,65,153,148,250,66,199,70,104,67,215,91,235,66,144,213,5,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,56,64,0,0,0,0,0,0,94,64,0,0,0,0,0,128,134,64,0,0,0,0,0,176,179,64,0,0,0,0,0,176,227,64,0,0,0,0,0,38,22,65,0,0,0,0,128,175,75,65,0,0,0,0,168,8,131,65,0,0,0,0,252,140,188,65,0,0,0,192,140,50,247,65,0,0,0,40,59,76,52,66,0,0,128,117,119,7,115,66,0,0,128,117,119,7,179,66,0,0,216,236,238,55,244,66,0,0,115,202,236,190,54,67,0,144,104,48,185,2,123,67,0,90,65,190,179,225,192,67,32,198,181,233,59,40,6,68,108,240,89,97,82,119,78,68,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,58,32,0,0,0,0,0,0,10,0,0,0,0,0,0,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,116,0,0,0,120,85,2,0,110,0,0,0,128,85,2,0,114,0,0,0,136,85,2,0,102,0,0,0,144,85,2,0,97,0,0,0,152,85,2,0,101,0,0,0,160,85,2,0,119,0,0,0,168,85,2,0,87,0,0,0,184,85,2,0,115,0,0,0,200,85,2,0,83,0,0,0,216,85,2,0,100,0,0,0,232,85,2,0,68,0,0,0,248,85,2,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,91,91,58,97,108,110,117,109,58,93,95,93,0,0,0,0,91,94,91,58,97,108,110,117,109,58,93,95,93,0,0,0,91,91,58,115,112,97,99,101,58,93,93,0,0,0,0,0,91,94,91,58,115,112,97,99,101,58,93,93,0,0,0,0,91,91,58,100,105,103,105,116,58,93,93,0,0,0,0,0,91,94,91,58,100,105,103,105,116,58,93,93,0,0,0,0,78,111,32,101,114,114,111,114,0,78,111,32,109,97,116,99,104,0,73,110,118,97,108,105,100,32,114,101,103,101,120,112,0,85,110,107,110,111,119,110,32,99,111,108,108,97,116,105,110,103,32,101,108,101,109,101,110,116,0,85,110,107,110,111,119,110,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,110,97,109,101,0,84,114,97,105,108,105,110,103,32,98,97,99,107,115,108,97,115,104,0,73,110,118,97,108,105,100,32,98,97,99,107,32,114,101,102,101,114,101,110,99,101,0,77,105,115,115,105,110,103,32,39,93,39,0,77,105,115,115,105,110,103,32,39,41,39,0,77,105,115,115,105,110,103,32,39,125,39,0,73,110,118,97,108,105,100,32,99,111,110,116,101,110,116,115,32,111,102,32,123,125,0,73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,114,97,110,103,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,112,101,116,105,116,105,111,110,32,110,111,116,32,112,114,101,99,101,100,101,100,32,98,121,32,118,97,108,105,100,32,101,120,112,114,101,115,115,105,111,110,0,0,85,110,107,110,111,119,110,32,101,114,114,111,114,0,0,0,37,115,0,0,0,0,0,0,37,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,37,46,42,115,0,0,0,0,0,0,0,0,0,0,0,0,37,37,37,115,37,115,37,115,37,115,37,115,42,46,42,37,99,37,99,0,0,0,0,0,35,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,76,0,0,106,76,76,76,0,106,0,0,0,0,0,106,106,0,0,0,0,106,0,0,106,101,109,115,99,114,105,112,116,101,110,46,118,115,119,112,114,105,110,116,102,46,116,101,109,112,46,98,117,102,102,101,114,0,0,0,0,0,0,0,0,119,98,0,0,0,0,0,0,114,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,42,101,0,0,0,0,37,46,42,102,0,0,0,0,48,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,37,46,42,103,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,115,105,103,110,97,108,0,72,97,110,103,117,112,0,73,110,116,101,114,114,117,112,116,0,81,117,105,116,0,73,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,0,84,114,97,99,101,47,98,114,101,97,107,112,111,105,110,116,32,116,114,97,112,0,65,98,111,114,116,101,100,0,66,117,115,32,101,114,114,111,114,0,65,114,105,116,104,109,101,116,105,99,32,101,120,99,101,112,116,105,111,110,0,75,105,108,108,101,100,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,105,103,110,97,108,32,49,0,83,101,103,109,101,110,116,97,116,105,111,110,32,102,97,117,108,116,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,105,103,110,97,108,32,50,0,66,114,111,107,101,110,32,112,105,112,101,0,65,108,97,114,109,32,99,108,111,99,107,0,84,101,114,109,105,110,97,116,101,100,0,83,116,97,99,107,32,102,97,117,108,116,0,67,104,105,108,100,32,112,114,111,99,101,115,115,32,115,116,97,116,117,115,0,67,111,110,116,105,110,117,101,100,0,83,116,111,112,112,101,100,32,40,115,105,103,110,97,108,41,0,83,116,111,112,112,101,100,0,83,116,111,112,112,101,100,32,40,116,116,121,32,105,110,112,117,116,41,0,83,116,111,112,112,101,100,32,40,116,116,121,32,111,117,116,112,117,116,41,0,85,114,103,101,110,116,32,73,47,79,32,99,111,110,100,105,116,105,111,110,0,67,80,85,32,116,105,109,101,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100,0,70,105,108,101,32,115,105,122,101,32,108,105,109,105,116,32,101,120,99,101,101,100,101,100,0,86,105,114,116,117,97,108,32,116,105,109,101,114,32,101,120,112,105,114,101,100,0,80,114,111,102,105,108,105,110,103,32,116,105,109,101,114,32,101,120,112,105,114,101,100,0,87,105,110,100,111,119,32,99,104,97,110,103,101,100,0,73,47,79,32,112,111,115,115,105,98,108,101,0,80,111,119,101,114,32,102,97,105,108,117,114,101,0,66,97,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,84,51,50,0,82,84,51,51,0,82,84,51,52,0,82,84,51,53,0,82,84,51,54,0,82,84,51,55,0,82,84,51,56,0,82,84,51,57,0,82,84,52,48,0,82,84,52,49,0,82,84,52,50,0,82,84,52,51,0,82,84,52,52,0,82,84,52,53,0,82,84,52,54,0,82,84,52,55,0,82,84,52,56,0,82,84,52,57,0,82,84,53,48,0,82,84,53,49,0,82,84,53,50,0,82,84,53,51,0,82,84,53,52,0,82,84,53,53,0,82,84,53,54,0,82,84,53,55,0,82,84,53,56,0,82,84,53,57,0,82,84,54,48,0,82,84,54,49,0,82,84,54,50,0,82,84,54,51,0,82,84,54,52], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+144884);
	/* memory initializer */ allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,109,230,236,222,5,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,148,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,45,244,81,88,207,140,177,192,70,246,181,203,41,49,3,199,4,91,112,48,180,93,253,32,120,127,139,154,216,89,41,80,104,72,137,171,167,86,3,108,255,183,205,136,63,212,119,180,43,165,163,112,241,186,228,168,252,65,131,253,217,111,225,138,122,47,45,116,150,7,31,13,9,94,3,118,44,112,247,64,165,44,167,111,87,65,168,170,116,223,160,88,100,3,74,199,196,60,83,174,175,95,24,4,21,177,227,109,40,134,171,12,164,191,67,240,233,80,129,57,87,22,82,55,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+155280);




	var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

	assert(tempDoublePtr % 8 == 0);

	function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

	  HEAP8[tempDoublePtr] = HEAP8[ptr];

	  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

	  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

	  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

	}

	function copyTempDouble(ptr) {

	  HEAP8[tempDoublePtr] = HEAP8[ptr];

	  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

	  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

	  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

	  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

	  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

	  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

	  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

	}





	  var ___errno_state=0;
	  Module["___errno_state"] = ___errno_state;function ___setErrNo(value) {
	      // For convenient setting and returning of errno.
	      HEAP32[((___errno_state)>>2)]=value;
	      return value;
	    }
	  Module["___setErrNo"] = ___setErrNo;

	  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
	  Module["ERRNO_CODES"] = ERRNO_CODES;var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
	  Module["Sockets"] = Sockets;


	  function __inet_pton4_raw(str) {
	      var b = str.split('.');
	      for (var i = 0; i < 4; i++) {
	        var tmp = Number(b[i]);
	        if (isNaN(tmp)) return null;
	        b[i] = tmp;
	      }
	      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
	    }
	  Module["__inet_pton4_raw"] = __inet_pton4_raw;


	  function _htons(value) {
	      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
	    }
	  Module["_htons"] = _htons;function __inet_pton6_raw(str) {
	      var words;
	      var w, offset, z, i;
	      /* http://home.deds.nl/~aeron/regex/ */
	      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
	      var parts = [];
	      if (!valid6regx.test(str)) {
	        return null;
	      }
	      if (str === "::") {
	        return [0, 0, 0, 0, 0, 0, 0, 0];
	      }
	      // Z placeholder to keep track of zeros when splitting the string on ":"
	      if (str.indexOf("::") === 0) {
	        str = str.replace("::", "Z:"); // leading zeros case
	      } else {
	        str = str.replace("::", ":Z:");
	      }

	      if (str.indexOf(".") > 0) {
	        // parse IPv4 embedded stress
	        str = str.replace(new RegExp('[.]', 'g'), ":");
	        words = str.split(":");
	        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
	        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
	        words = words.slice(0, words.length-2);
	      } else {
	        words = str.split(":");
	      }

	      offset = 0; z = 0;
	      for (w=0; w < words.length; w++) {
	        if (typeof words[w] === 'string') {
	          if (words[w] === 'Z') {
	            // compressed zeros - write appropriate number of zero words
	            for (z = 0; z < (8 - words.length+1); z++) {
	              parts[w+z] = 0;
	            }
	            offset = z-1;
	          } else {
	            // parse hex to field to 16-bit value and write it in network byte-order
	            parts[w+offset] = _htons(parseInt(words[w],16));
	          }
	        } else {
	          // parsed IPv4 words
	          parts[w+offset] = words[w];
	        }
	      }
	      return [
	        (parts[1] << 16) | parts[0],
	        (parts[3] << 16) | parts[2],
	        (parts[5] << 16) | parts[4],
	        (parts[7] << 16) | parts[6]
	      ];
	    }
	  Module["__inet_pton6_raw"] = __inet_pton6_raw;var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
	        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
	        var res = __inet_pton4_raw(name);
	        if (res) {
	          return name;
	        }
	        res = __inet_pton6_raw(name);
	        if (res) {
	          return name;
	        }

	        // See if this name is already mapped.
	        var addr;

	        if (DNS.address_map.addrs[name]) {
	          addr = DNS.address_map.addrs[name];
	        } else {
	          var id = DNS.address_map.id++;
	          assert(id < 65535, 'exceeded max address mappings of 65535');

	          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);

	          DNS.address_map.names[addr] = name;
	          DNS.address_map.addrs[name] = addr;
	        }

	        return addr;
	      },lookup_addr:function (addr) {
	        if (DNS.address_map.names[addr]) {
	          return DNS.address_map.names[addr];
	        }

	        return null;
	      }};
	  Module["DNS"] = DNS;

	  function __inet_ntop4_raw(addr) {
	      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
	    }
	  Module["__inet_ntop4_raw"] = __inet_ntop4_raw;


	  function _ntohs() {
	  return _htons.apply(null, arguments)
	  }
	  Module["_ntohs"] = _ntohs;function __inet_ntop6_raw(ints) {
	      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
	      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
	      //  128-bits are split into eight 16-bit words
	      //  stored in network byte order (big-endian)
	      //  |                80 bits               | 16 |      32 bits        |
	      //  +-----------------------------------------------------------------+
	      //  |               10 bytes               |  2 |      4 bytes        |
	      //  +--------------------------------------+--------------------------+
	      //  +               5 words                |  1 |      2 words        |
	      //  +--------------------------------------+--------------------------+
	      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
	      //  +--------------------------------------+----+---------------------+
	      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
	      //  +--------------------------------------+----+---------------------+
	      var str = "";
	      var word = 0;
	      var longest = 0;
	      var lastzero = 0;
	      var zstart = 0;
	      var len = 0;
	      var i = 0;
	      var parts = [
	        ints[0] & 0xffff,
	        (ints[0] >> 16),
	        ints[1] & 0xffff,
	        (ints[1] >> 16),
	        ints[2] & 0xffff,
	        (ints[2] >> 16),
	        ints[3] & 0xffff,
	        (ints[3] >> 16)
	      ];

	      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses

	      var hasipv4 = true;
	      var v4part = "";
	      // check if the 10 high-order bytes are all zeros (first 5 words)
	      for (i = 0; i < 5; i++) {
	        if (parts[i] !== 0) { hasipv4 = false; break; }
	      }

	      if (hasipv4) {
	        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
	        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
	        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
	        if (parts[5] === -1) {
	          str = "::ffff:";
	          str += v4part;
	          return str;
	        }
	        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
	        if (parts[5] === 0) {
	          str = "::";
	          //special case IPv6 addresses
	          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
	          if(v4part === "0.0.0.1") v4part = "1";// loopback address
	          str += v4part;
	          return str;
	        }
	      }

	      // Handle all other IPv6 addresses

	      // first run to find the longest contiguous zero words
	      for (word = 0; word < 8; word++) {
	        if (parts[word] === 0) {
	          if (word - lastzero > 1) {
	            len = 0;
	          }
	          lastzero = word;
	          len++;
	        }
	        if (len > longest) {
	          longest = len;
	          zstart = word - longest + 1;
	        }
	      }

	      for (word = 0; word < 8; word++) {
	        if (longest > 1) {
	          // compress contiguous zeros - to produce "::"
	          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
	            if (word === zstart) {
	              str += ":";
	              if (zstart === 0) str += ":"; //leading zeros case
	            }
	            continue;
	          }
	        }
	        // converts 16-bit words from big-endian to little-endian before converting to hex string
	        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
	        str += word < 7 ? ":" : "";
	      }
	      return str;
	    }
	  Module["__inet_ntop6_raw"] = __inet_ntop6_raw;

	  function __write_sockaddr(sa, family, addr, port) {
	      switch (family) {
	        case 2:
	          addr = __inet_pton4_raw(addr);
	          HEAP16[((sa)>>1)]=family;
	          HEAP32[(((sa)+(4))>>2)]=addr;
	          HEAP16[(((sa)+(2))>>1)]=_htons(port);
	          break;
	        case 10:
	          addr = __inet_pton6_raw(addr);
	          HEAP32[((sa)>>2)]=family;
	          HEAP32[(((sa)+(8))>>2)]=addr[0];
	          HEAP32[(((sa)+(12))>>2)]=addr[1];
	          HEAP32[(((sa)+(16))>>2)]=addr[2];
	          HEAP32[(((sa)+(20))>>2)]=addr[3];
	          HEAP16[(((sa)+(2))>>1)]=_htons(port);
	          HEAP32[(((sa)+(4))>>2)]=0;
	          HEAP32[(((sa)+(24))>>2)]=0;
	          break;
	        default:
	          return { errno: ERRNO_CODES.EAFNOSUPPORT };
	      }
	      // kind of lame, but let's match _read_sockaddr's interface
	      return {};
	    }
	  Module["__write_sockaddr"] = __write_sockaddr;

	  function _htonl(value) {
	      return ((value & 0xff) << 24) + ((value & 0xff00) << 8) +
	             ((value & 0xff0000) >>> 8) + ((value & 0xff000000) >>> 24);
	    }
	  Module["_htonl"] = _htonl;function _getaddrinfo(node, service, hint, out) {
	      // Note getaddrinfo currently only returns a single addrinfo with ai_next defaulting to NULL. When NULL
	      // hints are specified or ai_family set to AF_UNSPEC or ai_socktype or ai_protocol set to 0 then we
	      // really should provide a linked list of suitable addrinfo values.
	      var addrs = [];
	      var canon = null;
	      var addr = 0;
	      var port = 0;
	      var flags = 0;
	      var family = 0;
	      var type = 0;
	      var proto = 0;
	      var ai, last;

	      function allocaddrinfo(family, type, proto, canon, addr, port) {
	        var sa, salen, ai;
	        var res;

	        salen = family === 10 ?
	          28 :
	          16;
	        addr = family === 10 ?
	          __inet_ntop6_raw(addr) :
	          __inet_ntop4_raw(addr);
	        sa = _malloc(salen);
	        res = __write_sockaddr(sa, family, addr, port);
	        assert(!res.errno);

	        ai = _malloc(32);
	        HEAP32[(((ai)+(4))>>2)]=family;
	        HEAP32[(((ai)+(8))>>2)]=type;
	        HEAP32[(((ai)+(12))>>2)]=proto;
	        if (canon) {
	          HEAP32[(((ai)+(24))>>2)]=canon;
	        }
	        HEAP32[(((ai)+(20))>>2)]=sa;
	        if (family === 10) {
	          HEAP32[(((ai)+(16))>>2)]=28;
	        } else {
	          HEAP32[(((ai)+(16))>>2)]=16;
	        }
	        HEAP32[(((ai)+(28))>>2)]=0;

	        return ai;
	      }

	      if (hint) {
	        flags = HEAP32[((hint)>>2)];
	        family = HEAP32[(((hint)+(4))>>2)];
	        type = HEAP32[(((hint)+(8))>>2)];
	        proto = HEAP32[(((hint)+(12))>>2)];
	      }
	      if (type && !proto) {
	        proto = type === 2 ? 17 : 6;
	      }
	      if (!type && proto) {
	        type = proto === 17 ? 2 : 1;
	      }

	      // If type or proto are set to zero in hints we should really be returning multiple addrinfo values, but for
	      // now default to a TCP STREAM socket so we can at least return a sensible addrinfo given NULL hints.
	      if (proto === 0) {
	        proto = 6;
	      }
	      if (type === 0) {
	        type = 1;
	      }

	      if (!node && !service) {
	        return -2;
	      }
	      if (flags & ~(1|2|4|
	          1024|8|16|32)) {
	        return -1;
	      }
	      if (hint !== 0 && (HEAP32[((hint)>>2)] & 2) && !node) {
	        return -1;
	      }
	      if (flags & 32) {
	        // TODO
	        return -2;
	      }
	      if (type !== 0 && type !== 1 && type !== 2) {
	        return -7;
	      }
	      if (family !== 0 && family !== 2 && family !== 10) {
	        return -6;
	      }

	      if (service) {
	        service = Pointer_stringify(service);
	        port = parseInt(service, 10);

	        if (isNaN(port)) {
	          if (flags & 1024) {
	            return -2;
	          }
	          // TODO support resolving well-known service names from:
	          // http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
	          return -8;
	        }
	      }

	      if (!node) {
	        if (family === 0) {
	          family = 2;
	        }
	        if ((flags & 1) === 0) {
	          if (family === 2) {
	            addr = _htonl(2130706433);
	          } else {
	            addr = [0, 0, 0, 1];
	          }
	        }
	        ai = allocaddrinfo(family, type, proto, null, addr, port);
	        HEAP32[((out)>>2)]=ai;
	        return 0;
	      }

	      //
	      // try as a numeric address
	      //
	      node = Pointer_stringify(node);
	      addr = __inet_pton4_raw(node);
	      if (addr !== null) {
	        // incoming node is a valid ipv4 address
	        if (family === 0 || family === 2) {
	          family = 2;
	        }
	        else if (family === 10 && (flags & 8)) {
	          addr = [0, 0, _htonl(0xffff), addr];
	          family = 10;
	        } else {
	          return -2;
	        }
	      } else {
	        addr = __inet_pton6_raw(node);
	        if (addr !== null) {
	          // incoming node is a valid ipv6 address
	          if (family === 0 || family === 10) {
	            family = 10;
	          } else {
	            return -2;
	          }
	        }
	      }
	      if (addr != null) {
	        ai = allocaddrinfo(family, type, proto, node, addr, port);
	        HEAP32[((out)>>2)]=ai;
	        return 0;
	      }
	      if (flags & 4) {
	        return -2;
	      }

	      //
	      // try as a hostname
	      //
	      // resolve the hostname to a temporary fake address
	      node = DNS.lookup_name(node);
	      addr = __inet_pton4_raw(node);
	      if (family === 0) {
	        family = 2;
	      } else if (family === 10) {
	        addr = [0, 0, _htonl(0xffff), addr];
	      }
	      ai = allocaddrinfo(family, type, proto, null, addr, port);
	      HEAP32[((out)>>2)]=ai;
	      return 0;
	    }
	  Module["_getaddrinfo"] = _getaddrinfo;


	  Module["_i64Subtract"] = _i64Subtract;

	  var _fabsf=Math_abs;
	  Module["_fabsf"] = _fabsf;

	  var _floorf=Math_floor;
	  Module["_floorf"] = _floorf;




	  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
	  Module["ERRNO_MESSAGES"] = ERRNO_MESSAGES;

	  var PATH={splitPath:function (filename) {
	        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	        return splitPathRe.exec(filename).slice(1);
	      },normalizeArray:function (parts, allowAboveRoot) {
	        // if the path tries to go above the root, `up` ends up > 0
	        var up = 0;
	        for (var i = parts.length - 1; i >= 0; i--) {
	          var last = parts[i];
	          if (last === '.') {
	            parts.splice(i, 1);
	          } else if (last === '..') {
	            parts.splice(i, 1);
	            up++;
	          } else if (up) {
	            parts.splice(i, 1);
	            up--;
	          }
	        }
	        // if the path is allowed to go above the root, restore leading ..s
	        if (allowAboveRoot) {
	          for (; up--; up) {
	            parts.unshift('..');
	          }
	        }
	        return parts;
	      },normalize:function (path) {
	        var isAbsolute = path.charAt(0) === '/',
	            trailingSlash = path.substr(-1) === '/';
	        // Normalize the path
	        path = PATH.normalizeArray(path.split('/').filter(function(p) {
	          return !!p;
	        }), !isAbsolute).join('/');
	        if (!path && !isAbsolute) {
	          path = '.';
	        }
	        if (path && trailingSlash) {
	          path += '/';
	        }
	        return (isAbsolute ? '/' : '') + path;
	      },dirname:function (path) {
	        var result = PATH.splitPath(path),
	            root = result[0],
	            dir = result[1];
	        if (!root && !dir) {
	          // No dirname whatsoever
	          return '.';
	        }
	        if (dir) {
	          // It has a dirname, strip trailing slash
	          dir = dir.substr(0, dir.length - 1);
	        }
	        return root + dir;
	      },basename:function (path) {
	        // EMSCRIPTEN return '/'' for '/', not an empty string
	        if (path === '/') return '/';
	        var lastSlash = path.lastIndexOf('/');
	        if (lastSlash === -1) return path;
	        return path.substr(lastSlash+1);
	      },extname:function (path) {
	        return PATH.splitPath(path)[3];
	      },join:function () {
	        var paths = Array.prototype.slice.call(arguments, 0);
	        return PATH.normalize(paths.join('/'));
	      },join2:function (l, r) {
	        return PATH.normalize(l + '/' + r);
	      },resolve:function () {
	        var resolvedPath = '',
	          resolvedAbsolute = false;
	        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	          var path = (i >= 0) ? arguments[i] : FS.cwd();
	          // Skip empty and invalid entries
	          if (typeof path !== 'string') {
	            throw new TypeError('Arguments to path.resolve must be strings');
	          } else if (!path) {
	            return ''; // an invalid portion invalidates the whole thing
	          }
	          resolvedPath = path + '/' + resolvedPath;
	          resolvedAbsolute = path.charAt(0) === '/';
	        }
	        // At this point the path should be resolved to a full absolute path, but
	        // handle relative paths to be safe (might happen when process.cwd() fails)
	        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
	          return !!p;
	        }), !resolvedAbsolute).join('/');
	        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	      },relative:function (from, to) {
	        from = PATH.resolve(from).substr(1);
	        to = PATH.resolve(to).substr(1);
	        function trim(arr) {
	          var start = 0;
	          for (; start < arr.length; start++) {
	            if (arr[start] !== '') break;
	          }
	          var end = arr.length - 1;
	          for (; end >= 0; end--) {
	            if (arr[end] !== '') break;
	          }
	          if (start > end) return [];
	          return arr.slice(start, end - start + 1);
	        }
	        var fromParts = trim(from.split('/'));
	        var toParts = trim(to.split('/'));
	        var length = Math.min(fromParts.length, toParts.length);
	        var samePartsLength = length;
	        for (var i = 0; i < length; i++) {
	          if (fromParts[i] !== toParts[i]) {
	            samePartsLength = i;
	            break;
	          }
	        }
	        var outputParts = [];
	        for (var i = samePartsLength; i < fromParts.length; i++) {
	          outputParts.push('..');
	        }
	        outputParts = outputParts.concat(toParts.slice(samePartsLength));
	        return outputParts.join('/');
	      }};
	  Module["PATH"] = PATH;

	  var TTY={ttys:[],init:function () {
	        // https://github.com/kripken/emscripten/pull/1555
	        // if (ENVIRONMENT_IS_NODE) {
	        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
	        //   // device, it always assumes it's a TTY device. because of this, we're forcing
	        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
	        //   // with text files until FS.init can be refactored.
	        //   process['stdin']['setEncoding']('utf8');
	        // }
	      },shutdown:function () {
	        // https://github.com/kripken/emscripten/pull/1555
	        // if (ENVIRONMENT_IS_NODE) {
	        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
	        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
	        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
	        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
	        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
	        //   process['stdin']['pause']();
	        // }
	      },register:function (dev, ops) {
	        TTY.ttys[dev] = { input: [], output: [], ops: ops };
	        FS.registerDevice(dev, TTY.stream_ops);
	      },stream_ops:{open:function (stream) {
	          var tty = TTY.ttys[stream.node.rdev];
	          if (!tty) {
	            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
	          }
	          stream.tty = tty;
	          stream.seekable = false;
	        },close:function (stream) {
	          // flush any pending line data
	          if (stream.tty.output.length) {
	            stream.tty.ops.put_char(stream.tty, 10);
	          }
	        },read:function (stream, buffer, offset, length, pos /* ignored */) {
	          if (!stream.tty || !stream.tty.ops.get_char) {
	            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
	          }
	          var bytesRead = 0;
	          for (var i = 0; i < length; i++) {
	            var result;
	            try {
	              result = stream.tty.ops.get_char(stream.tty);
	            } catch (e) {
	              throw new FS.ErrnoError(ERRNO_CODES.EIO);
	            }
	            if (result === undefined && bytesRead === 0) {
	              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
	            }
	            if (result === null || result === undefined) break;
	            bytesRead++;
	            buffer[offset+i] = result;
	          }
	          if (bytesRead) {
	            stream.node.timestamp = Date.now();
	          }
	          return bytesRead;
	        },write:function (stream, buffer, offset, length, pos) {
	          if (!stream.tty || !stream.tty.ops.put_char) {
	            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
	          }
	          for (var i = 0; i < length; i++) {
	            try {
	              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
	            } catch (e) {
	              throw new FS.ErrnoError(ERRNO_CODES.EIO);
	            }
	          }
	          if (length) {
	            stream.node.timestamp = Date.now();
	          }
	          return i;
	        }},default_tty_ops:{get_char:function (tty) {
	          if (!tty.input.length) {
	            var result = null;
	            if (ENVIRONMENT_IS_NODE) {
	              result = process['stdin']['read']();
	              if (!result) {
	                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
	                  return null;  // EOF
	                }
	                return undefined;  // no data available
	              }
	            } else if (typeof window != 'undefined' &&
	              typeof window.prompt == 'function') {
	              // Browser.
	              result = window.prompt('Input: ');  // returns null on cancel
	              if (result !== null) {
	                result += '\n';
	              }
	            } else if (typeof readline == 'function') {
	              // Command line.
	              result = readline();
	              if (result !== null) {
	                result += '\n';
	              }
	            }
	            if (!result) {
	              return null;
	            }
	            tty.input = intArrayFromString(result, true);
	          }
	          return tty.input.shift();
	        },put_char:function (tty, val) {
	          if (val === null || val === 10) {
	            Module['print'](tty.output.join(''));
	            tty.output = [];
	          } else {
	            tty.output.push(TTY.utf8.processCChar(val));
	          }
	        }},default_tty1_ops:{put_char:function (tty, val) {
	          if (val === null || val === 10) {
	            Module['printErr'](tty.output.join(''));
	            tty.output = [];
	          } else {
	            tty.output.push(TTY.utf8.processCChar(val));
	          }
	        }}};
	  Module["TTY"] = TTY;

	  var MEMFS={ops_table:null,mount:function (mount) {
	        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
	      },createNode:function (parent, name, mode, dev) {
	        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
	          // no supported
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        if (!MEMFS.ops_table) {
	          MEMFS.ops_table = {
	            dir: {
	              node: {
	                getattr: MEMFS.node_ops.getattr,
	                setattr: MEMFS.node_ops.setattr,
	                lookup: MEMFS.node_ops.lookup,
	                mknod: MEMFS.node_ops.mknod,
	                rename: MEMFS.node_ops.rename,
	                unlink: MEMFS.node_ops.unlink,
	                rmdir: MEMFS.node_ops.rmdir,
	                readdir: MEMFS.node_ops.readdir,
	                symlink: MEMFS.node_ops.symlink
	              },
	              stream: {
	                llseek: MEMFS.stream_ops.llseek
	              }
	            },
	            file: {
	              node: {
	                getattr: MEMFS.node_ops.getattr,
	                setattr: MEMFS.node_ops.setattr
	              },
	              stream: {
	                llseek: MEMFS.stream_ops.llseek,
	                read: MEMFS.stream_ops.read,
	                write: MEMFS.stream_ops.write,
	                allocate: MEMFS.stream_ops.allocate,
	                mmap: MEMFS.stream_ops.mmap
	              }
	            },
	            link: {
	              node: {
	                getattr: MEMFS.node_ops.getattr,
	                setattr: MEMFS.node_ops.setattr,
	                readlink: MEMFS.node_ops.readlink
	              },
	              stream: {}
	            },
	            chrdev: {
	              node: {
	                getattr: MEMFS.node_ops.getattr,
	                setattr: MEMFS.node_ops.setattr
	              },
	              stream: FS.chrdev_stream_ops
	            },
	          };
	        }
	        var node = FS.createNode(parent, name, mode, dev);
	        if (FS.isDir(node.mode)) {
	          node.node_ops = MEMFS.ops_table.dir.node;
	          node.stream_ops = MEMFS.ops_table.dir.stream;
	          node.contents = {};
	        } else if (FS.isFile(node.mode)) {
	          node.node_ops = MEMFS.ops_table.file.node;
	          node.stream_ops = MEMFS.ops_table.file.stream;
	          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
	          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
	          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
	          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
	          node.contents = null;
	        } else if (FS.isLink(node.mode)) {
	          node.node_ops = MEMFS.ops_table.link.node;
	          node.stream_ops = MEMFS.ops_table.link.stream;
	        } else if (FS.isChrdev(node.mode)) {
	          node.node_ops = MEMFS.ops_table.chrdev.node;
	          node.stream_ops = MEMFS.ops_table.chrdev.stream;
	        }
	        node.timestamp = Date.now();
	        // add the new node to the parent
	        if (parent) {
	          parent.contents[name] = node;
	        }
	        return node;
	      },getFileDataAsRegularArray:function (node) {
	        if (node.contents && node.contents.subarray) {
	          var arr = [];
	          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
	          return arr; // Returns a copy of the original data.
	        }
	        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
	      },getFileDataAsTypedArray:function (node) {
	        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
	        return new Uint8Array(node.contents);
	      },expandFileStorage:function (node, newCapacity) {

	        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
	        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
	        // increase the size.
	        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
	          node.contents = MEMFS.getFileDataAsRegularArray(node);
	          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
	        }

	        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
	          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
	          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
	          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
	          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
	          // avoid overshooting the allocation cap by a very large margin.
	          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
	          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
	          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
	          var oldContents = node.contents;
	          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
	          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
	          return;
	        }
	        // Not using a typed array to back the file storage. Use a standard JS array instead.
	        if (!node.contents && newCapacity > 0) node.contents = [];
	        while (node.contents.length < newCapacity) node.contents.push(0);
	      },resizeFileStorage:function (node, newSize) {
	        if (node.usedBytes == newSize) return;
	        if (newSize == 0) {
	          node.contents = null; // Fully decommit when requesting a resize to zero.
	          node.usedBytes = 0;
	          return;
	        }

	        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
	          var oldContents = node.contents;
	          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
	          if (oldContents) {
	            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
	          }
	          node.usedBytes = newSize;
	          return;
	        }
	        // Backing with a JS array.
	        if (!node.contents) node.contents = [];
	        if (node.contents.length > newSize) node.contents.length = newSize;
	        else while (node.contents.length < newSize) node.contents.push(0);
	        node.usedBytes = newSize;
	      },node_ops:{getattr:function (node) {
	          var attr = {};
	          // device numbers reuse inode numbers.
	          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
	          attr.ino = node.id;
	          attr.mode = node.mode;
	          attr.nlink = 1;
	          attr.uid = 0;
	          attr.gid = 0;
	          attr.rdev = node.rdev;
	          if (FS.isDir(node.mode)) {
	            attr.size = 4096;
	          } else if (FS.isFile(node.mode)) {
	            attr.size = node.usedBytes;
	          } else if (FS.isLink(node.mode)) {
	            attr.size = node.link.length;
	          } else {
	            attr.size = 0;
	          }
	          attr.atime = new Date(node.timestamp);
	          attr.mtime = new Date(node.timestamp);
	          attr.ctime = new Date(node.timestamp);
	          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
	          //       but this is not required by the standard.
	          attr.blksize = 4096;
	          attr.blocks = Math.ceil(attr.size / attr.blksize);
	          return attr;
	        },setattr:function (node, attr) {
	          if (attr.mode !== undefined) {
	            node.mode = attr.mode;
	          }
	          if (attr.timestamp !== undefined) {
	            node.timestamp = attr.timestamp;
	          }
	          if (attr.size !== undefined) {
	            MEMFS.resizeFileStorage(node, attr.size);
	          }
	        },lookup:function (parent, name) {
	          throw FS.genericErrors[ERRNO_CODES.ENOENT];
	        },mknod:function (parent, name, mode, dev) {
	          return MEMFS.createNode(parent, name, mode, dev);
	        },rename:function (old_node, new_dir, new_name) {
	          // if we're overwriting a directory at new_name, make sure it's empty.
	          if (FS.isDir(old_node.mode)) {
	            var new_node;
	            try {
	              new_node = FS.lookupNode(new_dir, new_name);
	            } catch (e) {
	            }
	            if (new_node) {
	              for (var i in new_node.contents) {
	                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
	              }
	            }
	          }
	          // do the internal rewiring
	          delete old_node.parent.contents[old_node.name];
	          old_node.name = new_name;
	          new_dir.contents[new_name] = old_node;
	          old_node.parent = new_dir;
	        },unlink:function (parent, name) {
	          delete parent.contents[name];
	        },rmdir:function (parent, name) {
	          var node = FS.lookupNode(parent, name);
	          for (var i in node.contents) {
	            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
	          }
	          delete parent.contents[name];
	        },readdir:function (node) {
	          var entries = ['.', '..']
	          for (var key in node.contents) {
	            if (!node.contents.hasOwnProperty(key)) {
	              continue;
	            }
	            entries.push(key);
	          }
	          return entries;
	        },symlink:function (parent, newname, oldpath) {
	          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
	          node.link = oldpath;
	          return node;
	        },readlink:function (node) {
	          if (!FS.isLink(node.mode)) {
	            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	          }
	          return node.link;
	        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
	          var contents = stream.node.contents;
	          if (position >= stream.node.usedBytes) return 0;
	          var size = Math.min(stream.node.usedBytes - position, length);
	          assert(size >= 0);
	          if (size > 8 && contents.subarray) { // non-trivial, and typed array
	            buffer.set(contents.subarray(position, position + size), offset);
	          } else
	          {
	            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
	          }
	          return size;
	        },write:function (stream, buffer, offset, length, position, canOwn) {
	          if (!length) return 0;
	          var node = stream.node;
	          node.timestamp = Date.now();

	          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
	            if (canOwn) { // Can we just reuse the buffer we are given?
	              assert(position === 0, 'canOwn must imply no weird position inside the file');
	              node.contents = buffer.subarray(offset, offset + length);
	              node.usedBytes = length;
	              return length;
	            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
	              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
	              node.usedBytes = length;
	              return length;
	            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
	              node.contents.set(buffer.subarray(offset, offset + length), position);
	              return length;
	            }
	          }
	          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
	          MEMFS.expandFileStorage(node, position+length);
	          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
	          else
	            for (var i = 0; i < length; i++) {
	             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
	            }
	          node.usedBytes = Math.max(node.usedBytes, position+length);
	          return length;
	        },llseek:function (stream, offset, whence) {
	          var position = offset;
	          if (whence === 1) {  // SEEK_CUR.
	            position += stream.position;
	          } else if (whence === 2) {  // SEEK_END.
	            if (FS.isFile(stream.node.mode)) {
	              position += stream.node.usedBytes;
	            }
	          }
	          if (position < 0) {
	            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	          }
	          stream.ungotten = [];
	          stream.position = position;
	          return position;
	        },allocate:function (stream, offset, length) {
	          MEMFS.expandFileStorage(stream.node, offset + length);
	          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
	        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
	          if (!FS.isFile(stream.node.mode)) {
	            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
	          }
	          var ptr;
	          var allocated;
	          var contents = stream.node.contents;
	          // Only make a new copy when MAP_PRIVATE is specified.
	          if ( !(flags & 2) &&
	                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
	            // We can't emulate MAP_SHARED when the file is not backed by the buffer
	            // we're mapping to (e.g. the HEAP buffer).
	            allocated = false;
	            ptr = contents.byteOffset;
	          } else {
	            // Try to avoid unnecessary slices.
	            if (position > 0 || position + length < stream.node.usedBytes) {
	              if (contents.subarray) {
	                contents = contents.subarray(position, position + length);
	              } else {
	                contents = Array.prototype.slice.call(contents, position, position + length);
	              }
	            }
	            allocated = true;
	            ptr = _malloc(length);
	            if (!ptr) {
	              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
	            }
	            buffer.set(contents, ptr);
	          }
	          return { ptr: ptr, allocated: allocated };
	        }}};
	  Module["MEMFS"] = MEMFS;

	  var IDBFS={dbs:{},indexedDB:function () {
	        if (typeof indexedDB !== 'undefined') return indexedDB;
	        var ret = null;
	        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
	        assert(ret, 'IDBFS used, but indexedDB not supported');
	        return ret;
	      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
	        // reuse all of the core MEMFS functionality
	        return MEMFS.mount.apply(null, arguments);
	      },syncfs:function (mount, populate, callback) {
	        IDBFS.getLocalSet(mount, function(err, local) {
	          if (err) return callback(err);

	          IDBFS.getRemoteSet(mount, function(err, remote) {
	            if (err) return callback(err);

	            var src = populate ? remote : local;
	            var dst = populate ? local : remote;

	            IDBFS.reconcile(src, dst, callback);
	          });
	        });
	      },getDB:function (name, callback) {
	        // check the cache first
	        var db = IDBFS.dbs[name];
	        if (db) {
	          return callback(null, db);
	        }

	        var req;
	        try {
	          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
	        } catch (e) {
	          return callback(e);
	        }
	        req.onupgradeneeded = function(e) {
	          var db = e.target.result;
	          var transaction = e.target.transaction;

	          var fileStore;

	          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
	            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
	          } else {
	            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
	          }

	          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
	        };
	        req.onsuccess = function() {
	          db = req.result;

	          // add to the cache
	          IDBFS.dbs[name] = db;
	          callback(null, db);
	        };
	        req.onerror = function() {
	          callback(this.error);
	        };
	      },getLocalSet:function (mount, callback) {
	        var entries = {};

	        function isRealDir(p) {
	          return p !== '.' && p !== '..';
	        };
	        function toAbsolute(root) {
	          return function(p) {
	            return PATH.join2(root, p);
	          }
	        };

	        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

	        while (check.length) {
	          var path = check.pop();
	          var stat;

	          try {
	            stat = FS.stat(path);
	          } catch (e) {
	            return callback(e);
	          }

	          if (FS.isDir(stat.mode)) {
	            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
	          }

	          entries[path] = { timestamp: stat.mtime };
	        }

	        return callback(null, { type: 'local', entries: entries });
	      },getRemoteSet:function (mount, callback) {
	        var entries = {};

	        IDBFS.getDB(mount.mountpoint, function(err, db) {
	          if (err) return callback(err);

	          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
	          transaction.onerror = function() { callback(this.error); };

	          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
	          var index = store.index('timestamp');

	          index.openKeyCursor().onsuccess = function(event) {
	            var cursor = event.target.result;

	            if (!cursor) {
	              return callback(null, { type: 'remote', db: db, entries: entries });
	            }

	            entries[cursor.primaryKey] = { timestamp: cursor.key };

	            cursor.continue();
	          };
	        });
	      },loadLocalEntry:function (path, callback) {
	        var stat, node;

	        try {
	          var lookup = FS.lookupPath(path);
	          node = lookup.node;
	          stat = FS.stat(path);
	        } catch (e) {
	          return callback(e);
	        }

	        if (FS.isDir(stat.mode)) {
	          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
	        } else if (FS.isFile(stat.mode)) {
	          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
	          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
	          node.contents = MEMFS.getFileDataAsTypedArray(node);
	          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
	        } else {
	          return callback(new Error('node type not supported'));
	        }
	      },storeLocalEntry:function (path, entry, callback) {
	        try {
	          if (FS.isDir(entry.mode)) {
	            FS.mkdir(path, entry.mode);
	          } else if (FS.isFile(entry.mode)) {
	            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
	          } else {
	            return callback(new Error('node type not supported'));
	          }

	          FS.chmod(path, entry.mode);
	          FS.utime(path, entry.timestamp, entry.timestamp);
	        } catch (e) {
	          return callback(e);
	        }

	        callback(null);
	      },removeLocalEntry:function (path, callback) {
	        try {
	          var lookup = FS.lookupPath(path);
	          var stat = FS.stat(path);

	          if (FS.isDir(stat.mode)) {
	            FS.rmdir(path);
	          } else if (FS.isFile(stat.mode)) {
	            FS.unlink(path);
	          }
	        } catch (e) {
	          return callback(e);
	        }

	        callback(null);
	      },loadRemoteEntry:function (store, path, callback) {
	        var req = store.get(path);
	        req.onsuccess = function(event) { callback(null, event.target.result); };
	        req.onerror = function() { callback(this.error); };
	      },storeRemoteEntry:function (store, path, entry, callback) {
	        var req = store.put(entry, path);
	        req.onsuccess = function() { callback(null); };
	        req.onerror = function() { callback(this.error); };
	      },removeRemoteEntry:function (store, path, callback) {
	        var req = store.delete(path);
	        req.onsuccess = function() { callback(null); };
	        req.onerror = function() { callback(this.error); };
	      },reconcile:function (src, dst, callback) {
	        var total = 0;

	        var create = [];
	        Object.keys(src.entries).forEach(function (key) {
	          var e = src.entries[key];
	          var e2 = dst.entries[key];
	          if (!e2 || e.timestamp > e2.timestamp) {
	            create.push(key);
	            total++;
	          }
	        });

	        var remove = [];
	        Object.keys(dst.entries).forEach(function (key) {
	          var e = dst.entries[key];
	          var e2 = src.entries[key];
	          if (!e2) {
	            remove.push(key);
	            total++;
	          }
	        });

	        if (!total) {
	          return callback(null);
	        }

	        var errored = false;
	        var completed = 0;
	        var db = src.type === 'remote' ? src.db : dst.db;
	        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
	        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

	        function done(err) {
	          if (err) {
	            if (!done.errored) {
	              done.errored = true;
	              return callback(err);
	            }
	            return;
	          }
	          if (++completed >= total) {
	            return callback(null);
	          }
	        };

	        transaction.onerror = function() { done(this.error); };

	        // sort paths in ascending order so directory entries are created
	        // before the files inside them
	        create.sort().forEach(function (path) {
	          if (dst.type === 'local') {
	            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
	              if (err) return done(err);
	              IDBFS.storeLocalEntry(path, entry, done);
	            });
	          } else {
	            IDBFS.loadLocalEntry(path, function (err, entry) {
	              if (err) return done(err);
	              IDBFS.storeRemoteEntry(store, path, entry, done);
	            });
	          }
	        });

	        // sort paths in descending order so files are deleted before their
	        // parent directories
	        remove.sort().reverse().forEach(function(path) {
	          if (dst.type === 'local') {
	            IDBFS.removeLocalEntry(path, done);
	          } else {
	            IDBFS.removeRemoteEntry(store, path, done);
	          }
	        });
	      }};
	  Module["IDBFS"] = IDBFS;

	  var NODEFS={isWindows:false,staticInit:function () {
	        NODEFS.isWindows = !!process.platform.match(/^win/);
	      },mount:function (mount) {
	        assert(ENVIRONMENT_IS_NODE);
	        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
	      },createNode:function (parent, name, mode, dev) {
	        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        var node = FS.createNode(parent, name, mode);
	        node.node_ops = NODEFS.node_ops;
	        node.stream_ops = NODEFS.stream_ops;
	        return node;
	      },getMode:function (path) {
	        var stat;
	        try {
	          stat = fs.lstatSync(path);
	          if (NODEFS.isWindows) {
	            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
	            // propagate write bits to execute bits.
	            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
	          }
	        } catch (e) {
	          if (!e.code) throw e;
	          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	        }
	        return stat.mode;
	      },realPath:function (node) {
	        var parts = [];
	        while (node.parent !== node) {
	          parts.push(node.name);
	          node = node.parent;
	        }
	        parts.push(node.mount.opts.root);
	        parts.reverse();
	        return PATH.join.apply(null, parts);
	      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
	        if (flags in NODEFS.flagsToPermissionStringMap) {
	          return NODEFS.flagsToPermissionStringMap[flags];
	        } else {
	          return flags;
	        }
	      },node_ops:{getattr:function (node) {
	          var path = NODEFS.realPath(node);
	          var stat;
	          try {
	            stat = fs.lstatSync(path);
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
	          // See http://support.microsoft.com/kb/140365
	          if (NODEFS.isWindows && !stat.blksize) {
	            stat.blksize = 4096;
	          }
	          if (NODEFS.isWindows && !stat.blocks) {
	            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
	          }
	          return {
	            dev: stat.dev,
	            ino: stat.ino,
	            mode: stat.mode,
	            nlink: stat.nlink,
	            uid: stat.uid,
	            gid: stat.gid,
	            rdev: stat.rdev,
	            size: stat.size,
	            atime: stat.atime,
	            mtime: stat.mtime,
	            ctime: stat.ctime,
	            blksize: stat.blksize,
	            blocks: stat.blocks
	          };
	        },setattr:function (node, attr) {
	          var path = NODEFS.realPath(node);
	          try {
	            if (attr.mode !== undefined) {
	              fs.chmodSync(path, attr.mode);
	              // update the common node structure mode as well
	              node.mode = attr.mode;
	            }
	            if (attr.timestamp !== undefined) {
	              var date = new Date(attr.timestamp);
	              fs.utimesSync(path, date, date);
	            }
	            if (attr.size !== undefined) {
	              fs.truncateSync(path, attr.size);
	            }
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	        },lookup:function (parent, name) {
	          var path = PATH.join2(NODEFS.realPath(parent), name);
	          var mode = NODEFS.getMode(path);
	          return NODEFS.createNode(parent, name, mode);
	        },mknod:function (parent, name, mode, dev) {
	          var node = NODEFS.createNode(parent, name, mode, dev);
	          // create the backing node for this in the fs root as well
	          var path = NODEFS.realPath(node);
	          try {
	            if (FS.isDir(node.mode)) {
	              fs.mkdirSync(path, node.mode);
	            } else {
	              fs.writeFileSync(path, '', { mode: node.mode });
	            }
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	          return node;
	        },rename:function (oldNode, newDir, newName) {
	          var oldPath = NODEFS.realPath(oldNode);
	          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
	          try {
	            fs.renameSync(oldPath, newPath);
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	        },unlink:function (parent, name) {
	          var path = PATH.join2(NODEFS.realPath(parent), name);
	          try {
	            fs.unlinkSync(path);
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	        },rmdir:function (parent, name) {
	          var path = PATH.join2(NODEFS.realPath(parent), name);
	          try {
	            fs.rmdirSync(path);
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	        },readdir:function (node) {
	          var path = NODEFS.realPath(node);
	          try {
	            return fs.readdirSync(path);
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	        },symlink:function (parent, newName, oldPath) {
	          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
	          try {
	            fs.symlinkSync(oldPath, newPath);
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	        },readlink:function (node) {
	          var path = NODEFS.realPath(node);
	          try {
	            return fs.readlinkSync(path);
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	        }},stream_ops:{open:function (stream) {
	          var path = NODEFS.realPath(stream.node);
	          try {
	            if (FS.isFile(stream.node.mode)) {
	              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
	            }
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	        },close:function (stream) {
	          try {
	            if (FS.isFile(stream.node.mode) && stream.nfd) {
	              fs.closeSync(stream.nfd);
	            }
	          } catch (e) {
	            if (!e.code) throw e;
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	        },read:function (stream, buffer, offset, length, position) {
	          // FIXME this is terrible.
	          var nbuffer = new Buffer(length);
	          var res;
	          try {
	            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
	          } catch (e) {
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	          if (res > 0) {
	            for (var i = 0; i < res; i++) {
	              buffer[offset + i] = nbuffer[i];
	            }
	          }
	          return res;
	        },write:function (stream, buffer, offset, length, position) {
	          // FIXME this is terrible.
	          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
	          var res;
	          try {
	            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
	          } catch (e) {
	            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	          }
	          return res;
	        },llseek:function (stream, offset, whence) {
	          var position = offset;
	          if (whence === 1) {  // SEEK_CUR.
	            position += stream.position;
	          } else if (whence === 2) {  // SEEK_END.
	            if (FS.isFile(stream.node.mode)) {
	              try {
	                var stat = fs.fstatSync(stream.nfd);
	                position += stat.size;
	              } catch (e) {
	                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
	              }
	            }
	          }

	          if (position < 0) {
	            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	          }

	          stream.position = position;
	          return position;
	        }}};
	  Module["NODEFS"] = NODEFS;

	  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
	  Module["_stdin"] = _stdin;

	  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
	  Module["_stdout"] = _stdout;

	  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
	  Module["_stderr"] = _stderr;

	  function _fflush(stream) {
	      // int fflush(FILE *stream);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
	      // we don't currently perform any user-space buffering of data
	    }
	  Module["_fflush"] = _fflush;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
	        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
	        return ___setErrNo(e.errno);
	      },lookupPath:function (path, opts) {
	        path = PATH.resolve(FS.cwd(), path);
	        opts = opts || {};

	        if (!path) return { path: '', node: null };

	        var defaults = {
	          follow_mount: true,
	          recurse_count: 0
	        };
	        for (var key in defaults) {
	          if (opts[key] === undefined) {
	            opts[key] = defaults[key];
	          }
	        }

	        if (opts.recurse_count > 8) {  // max recursive lookup of 8
	          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
	        }

	        // split the path
	        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
	          return !!p;
	        }), false);

	        // start at the root
	        var current = FS.root;
	        var current_path = '/';

	        for (var i = 0; i < parts.length; i++) {
	          var islast = (i === parts.length-1);
	          if (islast && opts.parent) {
	            // stop resolving
	            break;
	          }

	          current = FS.lookupNode(current, parts[i]);
	          current_path = PATH.join2(current_path, parts[i]);

	          // jump to the mount's root node if this is a mountpoint
	          if (FS.isMountpoint(current)) {
	            if (!islast || (islast && opts.follow_mount)) {
	              current = current.mounted.root;
	            }
	          }

	          // by default, lookupPath will not follow a symlink if it is the final path component.
	          // setting opts.follow = true will override this behavior.
	          if (!islast || opts.follow) {
	            var count = 0;
	            while (FS.isLink(current.mode)) {
	              var link = FS.readlink(current_path);
	              current_path = PATH.resolve(PATH.dirname(current_path), link);

	              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
	              current = lookup.node;

	              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
	                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
	              }
	            }
	          }
	        }

	        return { path: current_path, node: current };
	      },getPath:function (node) {
	        var path;
	        while (true) {
	          if (FS.isRoot(node)) {
	            var mount = node.mount.mountpoint;
	            if (!path) return mount;
	            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
	          }
	          path = path ? node.name + '/' + path : node.name;
	          node = node.parent;
	        }
	      },hashName:function (parentid, name) {
	        var hash = 0;


	        for (var i = 0; i < name.length; i++) {
	          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
	        }
	        return ((parentid + hash) >>> 0) % FS.nameTable.length;
	      },hashAddNode:function (node) {
	        var hash = FS.hashName(node.parent.id, node.name);
	        node.name_next = FS.nameTable[hash];
	        FS.nameTable[hash] = node;
	      },hashRemoveNode:function (node) {
	        var hash = FS.hashName(node.parent.id, node.name);
	        if (FS.nameTable[hash] === node) {
	          FS.nameTable[hash] = node.name_next;
	        } else {
	          var current = FS.nameTable[hash];
	          while (current) {
	            if (current.name_next === node) {
	              current.name_next = node.name_next;
	              break;
	            }
	            current = current.name_next;
	          }
	        }
	      },lookupNode:function (parent, name) {
	        var err = FS.mayLookup(parent);
	        if (err) {
	          throw new FS.ErrnoError(err, parent);
	        }
	        var hash = FS.hashName(parent.id, name);
	        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
	          var nodeName = node.name;
	          if (node.parent.id === parent.id && nodeName === name) {
	            return node;
	          }
	        }
	        // if we failed to find it in the cache, call into the VFS
	        return FS.lookup(parent, name);
	      },createNode:function (parent, name, mode, rdev) {
	        if (!FS.FSNode) {
	          FS.FSNode = function(parent, name, mode, rdev) {
	            if (!parent) {
	              parent = this;  // root node sets parent to itself
	            }
	            this.parent = parent;
	            this.mount = parent.mount;
	            this.mounted = null;
	            this.id = FS.nextInode++;
	            this.name = name;
	            this.mode = mode;
	            this.node_ops = {};
	            this.stream_ops = {};
	            this.rdev = rdev;
	          };

	          FS.FSNode.prototype = {};

	          // compatibility
	          var readMode = 292 | 73;
	          var writeMode = 146;

	          // NOTE we must use Object.defineProperties instead of individual calls to
	          // Object.defineProperty in order to make closure compiler happy
	          Object.defineProperties(FS.FSNode.prototype, {
	            read: {
	              get: function() { return (this.mode & readMode) === readMode; },
	              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
	            },
	            write: {
	              get: function() { return (this.mode & writeMode) === writeMode; },
	              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
	            },
	            isFolder: {
	              get: function() { return FS.isDir(this.mode); },
	            },
	            isDevice: {
	              get: function() { return FS.isChrdev(this.mode); },
	            },
	          });
	        }

	        var node = new FS.FSNode(parent, name, mode, rdev);

	        FS.hashAddNode(node);

	        return node;
	      },destroyNode:function (node) {
	        FS.hashRemoveNode(node);
	      },isRoot:function (node) {
	        return node === node.parent;
	      },isMountpoint:function (node) {
	        return !!node.mounted;
	      },isFile:function (mode) {
	        return (mode & 61440) === 32768;
	      },isDir:function (mode) {
	        return (mode & 61440) === 16384;
	      },isLink:function (mode) {
	        return (mode & 61440) === 40960;
	      },isChrdev:function (mode) {
	        return (mode & 61440) === 8192;
	      },isBlkdev:function (mode) {
	        return (mode & 61440) === 24576;
	      },isFIFO:function (mode) {
	        return (mode & 61440) === 4096;
	      },isSocket:function (mode) {
	        return (mode & 49152) === 49152;
	      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
	        var flags = FS.flagModes[str];
	        if (typeof flags === 'undefined') {
	          throw new Error('Unknown file open mode: ' + str);
	        }
	        return flags;
	      },flagsToPermissionString:function (flag) {
	        var accmode = flag & 2097155;
	        var perms = ['r', 'w', 'rw'][accmode];
	        if ((flag & 512)) {
	          perms += 'w';
	        }
	        return perms;
	      },nodePermissions:function (node, perms) {
	        if (FS.ignorePermissions) {
	          return 0;
	        }
	        // return 0 if any user, group or owner bits are set.
	        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
	          return ERRNO_CODES.EACCES;
	        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
	          return ERRNO_CODES.EACCES;
	        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
	          return ERRNO_CODES.EACCES;
	        }
	        return 0;
	      },mayLookup:function (dir) {
	        var err = FS.nodePermissions(dir, 'x');
	        if (err) return err;
	        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
	        return 0;
	      },mayCreate:function (dir, name) {
	        try {
	          var node = FS.lookupNode(dir, name);
	          return ERRNO_CODES.EEXIST;
	        } catch (e) {
	        }
	        return FS.nodePermissions(dir, 'wx');
	      },mayDelete:function (dir, name, isdir) {
	        var node;
	        try {
	          node = FS.lookupNode(dir, name);
	        } catch (e) {
	          return e.errno;
	        }
	        var err = FS.nodePermissions(dir, 'wx');
	        if (err) {
	          return err;
	        }
	        if (isdir) {
	          if (!FS.isDir(node.mode)) {
	            return ERRNO_CODES.ENOTDIR;
	          }
	          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
	            return ERRNO_CODES.EBUSY;
	          }
	        } else {
	          if (FS.isDir(node.mode)) {
	            return ERRNO_CODES.EISDIR;
	          }
	        }
	        return 0;
	      },mayOpen:function (node, flags) {
	        if (!node) {
	          return ERRNO_CODES.ENOENT;
	        }
	        if (FS.isLink(node.mode)) {
	          return ERRNO_CODES.ELOOP;
	        } else if (FS.isDir(node.mode)) {
	          if ((flags & 2097155) !== 0 ||  // opening for write
	              (flags & 512)) {
	            return ERRNO_CODES.EISDIR;
	          }
	        }
	        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
	      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
	        fd_start = fd_start || 0;
	        fd_end = fd_end || FS.MAX_OPEN_FDS;
	        for (var fd = fd_start; fd <= fd_end; fd++) {
	          if (!FS.streams[fd]) {
	            return fd;
	          }
	        }
	        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
	      },getStream:function (fd) {
	        return FS.streams[fd];
	      },createStream:function (stream, fd_start, fd_end) {
	        if (!FS.FSStream) {
	          FS.FSStream = function(){};
	          FS.FSStream.prototype = {};
	          // compatibility
	          Object.defineProperties(FS.FSStream.prototype, {
	            object: {
	              get: function() { return this.node; },
	              set: function(val) { this.node = val; }
	            },
	            isRead: {
	              get: function() { return (this.flags & 2097155) !== 1; }
	            },
	            isWrite: {
	              get: function() { return (this.flags & 2097155) !== 0; }
	            },
	            isAppend: {
	              get: function() { return (this.flags & 1024); }
	            }
	          });
	        }
	        // clone it, so we can return an instance of FSStream
	        var newStream = new FS.FSStream();
	        for (var p in stream) {
	          newStream[p] = stream[p];
	        }
	        stream = newStream;
	        var fd = FS.nextfd(fd_start, fd_end);
	        stream.fd = fd;
	        FS.streams[fd] = stream;
	        return stream;
	      },closeStream:function (fd) {
	        FS.streams[fd] = null;
	      },getStreamFromPtr:function (ptr) {
	        return FS.streams[ptr - 1];
	      },getPtrForStream:function (stream) {
	        return stream ? stream.fd + 1 : 0;
	      },chrdev_stream_ops:{open:function (stream) {
	          var device = FS.getDevice(stream.node.rdev);
	          // override node's stream ops with the device's
	          stream.stream_ops = device.stream_ops;
	          // forward the open call
	          if (stream.stream_ops.open) {
	            stream.stream_ops.open(stream);
	          }
	        },llseek:function () {
	          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
	        }},major:function (dev) {
	        return ((dev) >> 8);
	      },minor:function (dev) {
	        return ((dev) & 0xff);
	      },makedev:function (ma, mi) {
	        return ((ma) << 8 | (mi));
	      },registerDevice:function (dev, ops) {
	        FS.devices[dev] = { stream_ops: ops };
	      },getDevice:function (dev) {
	        return FS.devices[dev];
	      },getMounts:function (mount) {
	        var mounts = [];
	        var check = [mount];

	        while (check.length) {
	          var m = check.pop();

	          mounts.push(m);

	          check.push.apply(check, m.mounts);
	        }

	        return mounts;
	      },syncfs:function (populate, callback) {
	        if (typeof(populate) === 'function') {
	          callback = populate;
	          populate = false;
	        }

	        var mounts = FS.getMounts(FS.root.mount);
	        var completed = 0;

	        function done(err) {
	          if (err) {
	            if (!done.errored) {
	              done.errored = true;
	              return callback(err);
	            }
	            return;
	          }
	          if (++completed >= mounts.length) {
	            callback(null);
	          }
	        };

	        // sync all mounts
	        mounts.forEach(function (mount) {
	          if (!mount.type.syncfs) {
	            return done(null);
	          }
	          mount.type.syncfs(mount, populate, done);
	        });
	      },mount:function (type, opts, mountpoint) {
	        var root = mountpoint === '/';
	        var pseudo = !mountpoint;
	        var node;

	        if (root && FS.root) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
	        } else if (!root && !pseudo) {
	          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

	          mountpoint = lookup.path;  // use the absolute path
	          node = lookup.node;

	          if (FS.isMountpoint(node)) {
	            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
	          }

	          if (!FS.isDir(node.mode)) {
	            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
	          }
	        }

	        var mount = {
	          type: type,
	          opts: opts,
	          mountpoint: mountpoint,
	          mounts: []
	        };

	        // create a root node for the fs
	        var mountRoot = type.mount(mount);
	        mountRoot.mount = mount;
	        mount.root = mountRoot;

	        if (root) {
	          FS.root = mountRoot;
	        } else if (node) {
	          // set as a mountpoint
	          node.mounted = mount;

	          // add the new mount to the current mount's children
	          if (node.mount) {
	            node.mount.mounts.push(mount);
	          }
	        }

	        return mountRoot;
	      },unmount:function (mountpoint) {
	        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

	        if (!FS.isMountpoint(lookup.node)) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }

	        // destroy the nodes for this mount, and all its child mounts
	        var node = lookup.node;
	        var mount = node.mounted;
	        var mounts = FS.getMounts(mount);

	        Object.keys(FS.nameTable).forEach(function (hash) {
	          var current = FS.nameTable[hash];

	          while (current) {
	            var next = current.name_next;

	            if (mounts.indexOf(current.mount) !== -1) {
	              FS.destroyNode(current);
	            }

	            current = next;
	          }
	        });

	        // no longer a mountpoint
	        node.mounted = null;

	        // remove this mount from the child mounts
	        var idx = node.mount.mounts.indexOf(mount);
	        assert(idx !== -1);
	        node.mount.mounts.splice(idx, 1);
	      },lookup:function (parent, name) {
	        return parent.node_ops.lookup(parent, name);
	      },mknod:function (path, mode, dev) {
	        var lookup = FS.lookupPath(path, { parent: true });
	        var parent = lookup.node;
	        var name = PATH.basename(path);
	        if (!name || name === '.' || name === '..') {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        var err = FS.mayCreate(parent, name);
	        if (err) {
	          throw new FS.ErrnoError(err);
	        }
	        if (!parent.node_ops.mknod) {
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        return parent.node_ops.mknod(parent, name, mode, dev);
	      },create:function (path, mode) {
	        mode = mode !== undefined ? mode : 438 /* 0666 */;
	        mode &= 4095;
	        mode |= 32768;
	        return FS.mknod(path, mode, 0);
	      },mkdir:function (path, mode) {
	        mode = mode !== undefined ? mode : 511 /* 0777 */;
	        mode &= 511 | 512;
	        mode |= 16384;
	        return FS.mknod(path, mode, 0);
	      },mkdev:function (path, mode, dev) {
	        if (typeof(dev) === 'undefined') {
	          dev = mode;
	          mode = 438 /* 0666 */;
	        }
	        mode |= 8192;
	        return FS.mknod(path, mode, dev);
	      },symlink:function (oldpath, newpath) {
	        if (!PATH.resolve(oldpath)) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
	        }
	        var lookup = FS.lookupPath(newpath, { parent: true });
	        var parent = lookup.node;
	        if (!parent) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
	        }
	        var newname = PATH.basename(newpath);
	        var err = FS.mayCreate(parent, newname);
	        if (err) {
	          throw new FS.ErrnoError(err);
	        }
	        if (!parent.node_ops.symlink) {
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        return parent.node_ops.symlink(parent, newname, oldpath);
	      },rename:function (old_path, new_path) {
	        var old_dirname = PATH.dirname(old_path);
	        var new_dirname = PATH.dirname(new_path);
	        var old_name = PATH.basename(old_path);
	        var new_name = PATH.basename(new_path);
	        // parents must exist
	        var lookup, old_dir, new_dir;
	        try {
	          lookup = FS.lookupPath(old_path, { parent: true });
	          old_dir = lookup.node;
	          lookup = FS.lookupPath(new_path, { parent: true });
	          new_dir = lookup.node;
	        } catch (e) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
	        }
	        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
	        // need to be part of the same mount
	        if (old_dir.mount !== new_dir.mount) {
	          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
	        }
	        // source must exist
	        var old_node = FS.lookupNode(old_dir, old_name);
	        // old path should not be an ancestor of the new path
	        var relative = PATH.relative(old_path, new_dirname);
	        if (relative.charAt(0) !== '.') {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        // new path should not be an ancestor of the old path
	        relative = PATH.relative(new_path, old_dirname);
	        if (relative.charAt(0) !== '.') {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
	        }
	        // see if the new path already exists
	        var new_node;
	        try {
	          new_node = FS.lookupNode(new_dir, new_name);
	        } catch (e) {
	          // not fatal
	        }
	        // early out if nothing needs to change
	        if (old_node === new_node) {
	          return;
	        }
	        // we'll need to delete the old entry
	        var isdir = FS.isDir(old_node.mode);
	        var err = FS.mayDelete(old_dir, old_name, isdir);
	        if (err) {
	          throw new FS.ErrnoError(err);
	        }
	        // need delete permissions if we'll be overwriting.
	        // need create permissions if new doesn't already exist.
	        err = new_node ?
	          FS.mayDelete(new_dir, new_name, isdir) :
	          FS.mayCreate(new_dir, new_name);
	        if (err) {
	          throw new FS.ErrnoError(err);
	        }
	        if (!old_dir.node_ops.rename) {
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
	        }
	        // if we are going to change the parent, check write permissions
	        if (new_dir !== old_dir) {
	          err = FS.nodePermissions(old_dir, 'w');
	          if (err) {
	            throw new FS.ErrnoError(err);
	          }
	        }
	        try {
	          if (FS.trackingDelegate['willMovePath']) {
	            FS.trackingDelegate['willMovePath'](old_path, new_path);
	          }
	        } catch(e) {
	          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
	        }
	        // remove the node from the lookup hash
	        FS.hashRemoveNode(old_node);
	        // do the underlying fs rename
	        try {
	          old_dir.node_ops.rename(old_node, new_dir, new_name);
	        } catch (e) {
	          throw e;
	        } finally {
	          // add the node back to the hash (in case node_ops.rename
	          // changed its name)
	          FS.hashAddNode(old_node);
	        }
	        try {
	          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
	        } catch(e) {
	          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
	        }
	      },rmdir:function (path) {
	        var lookup = FS.lookupPath(path, { parent: true });
	        var parent = lookup.node;
	        var name = PATH.basename(path);
	        var node = FS.lookupNode(parent, name);
	        var err = FS.mayDelete(parent, name, true);
	        if (err) {
	          throw new FS.ErrnoError(err);
	        }
	        if (!parent.node_ops.rmdir) {
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        if (FS.isMountpoint(node)) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
	        }
	        try {
	          if (FS.trackingDelegate['willDeletePath']) {
	            FS.trackingDelegate['willDeletePath'](path);
	          }
	        } catch(e) {
	          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
	        }
	        parent.node_ops.rmdir(parent, name);
	        FS.destroyNode(node);
	        try {
	          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
	        } catch(e) {
	          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
	        }
	      },readdir:function (path) {
	        var lookup = FS.lookupPath(path, { follow: true });
	        var node = lookup.node;
	        if (!node.node_ops.readdir) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
	        }
	        return node.node_ops.readdir(node);
	      },unlink:function (path) {
	        var lookup = FS.lookupPath(path, { parent: true });
	        var parent = lookup.node;
	        var name = PATH.basename(path);
	        var node = FS.lookupNode(parent, name);
	        var err = FS.mayDelete(parent, name, false);
	        if (err) {
	          // POSIX says unlink should set EPERM, not EISDIR
	          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
	          throw new FS.ErrnoError(err);
	        }
	        if (!parent.node_ops.unlink) {
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        if (FS.isMountpoint(node)) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
	        }
	        try {
	          if (FS.trackingDelegate['willDeletePath']) {
	            FS.trackingDelegate['willDeletePath'](path);
	          }
	        } catch(e) {
	          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
	        }
	        parent.node_ops.unlink(parent, name);
	        FS.destroyNode(node);
	        try {
	          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
	        } catch(e) {
	          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
	        }
	      },readlink:function (path) {
	        var lookup = FS.lookupPath(path);
	        var link = lookup.node;
	        if (!link) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
	        }
	        if (!link.node_ops.readlink) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        return link.node_ops.readlink(link);
	      },stat:function (path, dontFollow) {
	        var lookup = FS.lookupPath(path, { follow: !dontFollow });
	        var node = lookup.node;
	        if (!node) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
	        }
	        if (!node.node_ops.getattr) {
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        return node.node_ops.getattr(node);
	      },lstat:function (path) {
	        return FS.stat(path, true);
	      },chmod:function (path, mode, dontFollow) {
	        var node;
	        if (typeof path === 'string') {
	          var lookup = FS.lookupPath(path, { follow: !dontFollow });
	          node = lookup.node;
	        } else {
	          node = path;
	        }
	        if (!node.node_ops.setattr) {
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        node.node_ops.setattr(node, {
	          mode: (mode & 4095) | (node.mode & ~4095),
	          timestamp: Date.now()
	        });
	      },lchmod:function (path, mode) {
	        FS.chmod(path, mode, true);
	      },fchmod:function (fd, mode) {
	        var stream = FS.getStream(fd);
	        if (!stream) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
	        }
	        FS.chmod(stream.node, mode);
	      },chown:function (path, uid, gid, dontFollow) {
	        var node;
	        if (typeof path === 'string') {
	          var lookup = FS.lookupPath(path, { follow: !dontFollow });
	          node = lookup.node;
	        } else {
	          node = path;
	        }
	        if (!node.node_ops.setattr) {
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        node.node_ops.setattr(node, {
	          timestamp: Date.now()
	          // we ignore the uid / gid for now
	        });
	      },lchown:function (path, uid, gid) {
	        FS.chown(path, uid, gid, true);
	      },fchown:function (fd, uid, gid) {
	        var stream = FS.getStream(fd);
	        if (!stream) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
	        }
	        FS.chown(stream.node, uid, gid);
	      },truncate:function (path, len) {
	        if (len < 0) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        var node;
	        if (typeof path === 'string') {
	          var lookup = FS.lookupPath(path, { follow: true });
	          node = lookup.node;
	        } else {
	          node = path;
	        }
	        if (!node.node_ops.setattr) {
	          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
	        }
	        if (FS.isDir(node.mode)) {
	          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
	        }
	        if (!FS.isFile(node.mode)) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        var err = FS.nodePermissions(node, 'w');
	        if (err) {
	          throw new FS.ErrnoError(err);
	        }
	        node.node_ops.setattr(node, {
	          size: len,
	          timestamp: Date.now()
	        });
	      },ftruncate:function (fd, len) {
	        var stream = FS.getStream(fd);
	        if (!stream) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
	        }
	        if ((stream.flags & 2097155) === 0) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        FS.truncate(stream.node, len);
	      },utime:function (path, atime, mtime) {
	        var lookup = FS.lookupPath(path, { follow: true });
	        var node = lookup.node;
	        node.node_ops.setattr(node, {
	          timestamp: Math.max(atime, mtime)
	        });
	      },open:function (path, flags, mode, fd_start, fd_end) {
	        if (path === "") {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
	        }
	        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
	        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
	        if ((flags & 64)) {
	          mode = (mode & 4095) | 32768;
	        } else {
	          mode = 0;
	        }
	        var node;
	        if (typeof path === 'object') {
	          node = path;
	        } else {
	          path = PATH.normalize(path);
	          try {
	            var lookup = FS.lookupPath(path, {
	              follow: !(flags & 131072)
	            });
	            node = lookup.node;
	          } catch (e) {
	            // ignore
	          }
	        }
	        // perhaps we need to create the node
	        var created = false;
	        if ((flags & 64)) {
	          if (node) {
	            // if O_CREAT and O_EXCL are set, error out if the node already exists
	            if ((flags & 128)) {
	              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
	            }
	          } else {
	            // node doesn't exist, try to create it
	            node = FS.mknod(path, mode, 0);
	            created = true;
	          }
	        }
	        if (!node) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
	        }
	        // can't truncate a device
	        if (FS.isChrdev(node.mode)) {
	          flags &= ~512;
	        }
	        // check permissions, if this is not a file we just created now (it is ok to
	        // create and write to a file with read-only permissions; it is read-only
	        // for later use)
	        if (!created) {
	          var err = FS.mayOpen(node, flags);
	          if (err) {
	            throw new FS.ErrnoError(err);
	          }
	        }
	        // do truncation if necessary
	        if ((flags & 512)) {
	          FS.truncate(node, 0);
	        }
	        // we've already handled these, don't pass down to the underlying vfs
	        flags &= ~(128 | 512);

	        // register the stream with the filesystem
	        var stream = FS.createStream({
	          node: node,
	          path: FS.getPath(node),  // we want the absolute path to the node
	          flags: flags,
	          seekable: true,
	          position: 0,
	          stream_ops: node.stream_ops,
	          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
	          ungotten: [],
	          error: false
	        }, fd_start, fd_end);
	        // call the new stream's open function
	        if (stream.stream_ops.open) {
	          stream.stream_ops.open(stream);
	        }
	        if (Module['logReadFiles'] && !(flags & 1)) {
	          if (!FS.readFiles) FS.readFiles = {};
	          if (!(path in FS.readFiles)) {
	            FS.readFiles[path] = 1;
	            Module['printErr']('read file: ' + path);
	          }
	        }
	        try {
	          if (FS.trackingDelegate['onOpenFile']) {
	            var trackingFlags = 0;
	            if ((flags & 2097155) !== 1) {
	              trackingFlags |= FS.tracking.openFlags.READ;
	            }
	            if ((flags & 2097155) !== 0) {
	              trackingFlags |= FS.tracking.openFlags.WRITE;
	            }
	            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
	          }
	        } catch(e) {
	          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
	        }
	        return stream;
	      },close:function (stream) {
	        try {
	          if (stream.stream_ops.close) {
	            stream.stream_ops.close(stream);
	          }
	        } catch (e) {
	          throw e;
	        } finally {
	          FS.closeStream(stream.fd);
	        }
	      },llseek:function (stream, offset, whence) {
	        if (!stream.seekable || !stream.stream_ops.llseek) {
	          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
	        }
	        return stream.stream_ops.llseek(stream, offset, whence);
	      },read:function (stream, buffer, offset, length, position) {
	        if (length < 0 || position < 0) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        if ((stream.flags & 2097155) === 1) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
	        }
	        if (FS.isDir(stream.node.mode)) {
	          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
	        }
	        if (!stream.stream_ops.read) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        var seeking = true;
	        if (typeof position === 'undefined') {
	          position = stream.position;
	          seeking = false;
	        } else if (!stream.seekable) {
	          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
	        }
	        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
	        if (!seeking) stream.position += bytesRead;
	        return bytesRead;
	      },write:function (stream, buffer, offset, length, position, canOwn) {
	        if (length < 0 || position < 0) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        if ((stream.flags & 2097155) === 0) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
	        }
	        if (FS.isDir(stream.node.mode)) {
	          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
	        }
	        if (!stream.stream_ops.write) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        if (stream.flags & 1024) {
	          // seek to the end before writing in append mode
	          FS.llseek(stream, 0, 2);
	        }
	        var seeking = true;
	        if (typeof position === 'undefined') {
	          position = stream.position;
	          seeking = false;
	        } else if (!stream.seekable) {
	          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
	        }
	        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
	        if (!seeking) stream.position += bytesWritten;
	        try {
	          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
	        } catch(e) {
	          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
	        }
	        return bytesWritten;
	      },allocate:function (stream, offset, length) {
	        if (offset < 0 || length <= 0) {
	          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	        }
	        if ((stream.flags & 2097155) === 0) {
	          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
	        }
	        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
	        }
	        if (!stream.stream_ops.allocate) {
	          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
	        }
	        stream.stream_ops.allocate(stream, offset, length);
	      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
	        // TODO if PROT is PROT_WRITE, make sure we have write access
	        if ((stream.flags & 2097155) === 1) {
	          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
	        }
	        if (!stream.stream_ops.mmap) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
	        }
	        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
	      },ioctl:function (stream, cmd, arg) {
	        if (!stream.stream_ops.ioctl) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
	        }
	        return stream.stream_ops.ioctl(stream, cmd, arg);
	      },readFile:function (path, opts) {
	        opts = opts || {};
	        opts.flags = opts.flags || 'r';
	        opts.encoding = opts.encoding || 'binary';
	        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
	          throw new Error('Invalid encoding type "' + opts.encoding + '"');
	        }
	        var ret;
	        var stream = FS.open(path, opts.flags);
	        var stat = FS.stat(path);
	        var length = stat.size;
	        var buf = new Uint8Array(length);
	        FS.read(stream, buf, 0, length, 0);
	        if (opts.encoding === 'utf8') {
	          ret = '';
	          var utf8 = new Runtime.UTF8Processor();
	          for (var i = 0; i < length; i++) {
	            ret += utf8.processCChar(buf[i]);
	          }
	        } else if (opts.encoding === 'binary') {
	          ret = buf;
	        }
	        FS.close(stream);
	        return ret;
	      },writeFile:function (path, data, opts) {
	        opts = opts || {};
	        opts.flags = opts.flags || 'w';
	        opts.encoding = opts.encoding || 'utf8';
	        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
	          throw new Error('Invalid encoding type "' + opts.encoding + '"');
	        }
	        var stream = FS.open(path, opts.flags, opts.mode);
	        if (opts.encoding === 'utf8') {
	          var utf8 = new Runtime.UTF8Processor();
	          var buf = new Uint8Array(utf8.processJSString(data));
	          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
	        } else if (opts.encoding === 'binary') {
	          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
	        }
	        FS.close(stream);
	      },cwd:function () {
	        return FS.currentPath;
	      },chdir:function (path) {
	        var lookup = FS.lookupPath(path, { follow: true });
	        if (!FS.isDir(lookup.node.mode)) {
	          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
	        }
	        var err = FS.nodePermissions(lookup.node, 'x');
	        if (err) {
	          throw new FS.ErrnoError(err);
	        }
	        FS.currentPath = lookup.path;
	      },createDefaultDirectories:function () {
	        FS.mkdir('/tmp');
	        FS.mkdir('/home');
	        FS.mkdir('/home/web_user');
	      },createDefaultDevices:function () {
	        // create /dev
	        FS.mkdir('/dev');
	        // setup /dev/null
	        FS.registerDevice(FS.makedev(1, 3), {
	          read: function() { return 0; },
	          write: function() { return 0; }
	        });
	        FS.mkdev('/dev/null', FS.makedev(1, 3));
	        // setup /dev/tty and /dev/tty1
	        // stderr needs to print output using Module['printErr']
	        // so we register a second tty just for it.
	        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
	        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
	        FS.mkdev('/dev/tty', FS.makedev(5, 0));
	        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
	        // setup /dev/[u]random
	        var random_device;
	        if (typeof crypto !== 'undefined') {
	          // for modern web browsers
	          var randomBuffer = new Uint8Array(1);
	          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
	        } else if (ENVIRONMENT_IS_NODE) {
	          // for nodejs
	          random_device = function() { return require('crypto').randomBytes(1)[0]; };
	        } else {
	          // default for ES5 platforms
	          random_device = function() { return (Math.random()*256)|0; };
	        }
	        FS.createDevice('/dev', 'random', random_device);
	        FS.createDevice('/dev', 'urandom', random_device);
	        // we're not going to emulate the actual shm device,
	        // just create the tmp dirs that reside in it commonly
	        FS.mkdir('/dev/shm');
	        FS.mkdir('/dev/shm/tmp');
	      },createStandardStreams:function () {
	        // TODO deprecate the old functionality of a single
	        // input / output callback and that utilizes FS.createDevice
	        // and instead require a unique set of stream ops

	        // by default, we symlink the standard streams to the
	        // default tty devices. however, if the standard streams
	        // have been overwritten we create a unique device for
	        // them instead.
	        if (Module['stdin']) {
	          FS.createDevice('/dev', 'stdin', Module['stdin']);
	        } else {
	          FS.symlink('/dev/tty', '/dev/stdin');
	        }
	        if (Module['stdout']) {
	          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
	        } else {
	          FS.symlink('/dev/tty', '/dev/stdout');
	        }
	        if (Module['stderr']) {
	          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
	        } else {
	          FS.symlink('/dev/tty1', '/dev/stderr');
	        }

	        // open default streams for the stdin, stdout and stderr devices
	        var stdin = FS.open('/dev/stdin', 'r');
	        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
	        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');

	        var stdout = FS.open('/dev/stdout', 'w');
	        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
	        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');

	        var stderr = FS.open('/dev/stderr', 'w');
	        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
	        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
	      },ensureErrnoError:function () {
	        if (FS.ErrnoError) return;
	        FS.ErrnoError = function ErrnoError(errno, node) {
	          this.node = node;
	          this.setErrno = function(errno) {
	            this.errno = errno;
	            for (var key in ERRNO_CODES) {
	              if (ERRNO_CODES[key] === errno) {
	                this.code = key;
	                break;
	              }
	            }
	          };
	          this.setErrno(errno);
	          this.message = ERRNO_MESSAGES[errno];
	          if (this.stack) this.stack = demangleAll(this.stack);
	        };
	        FS.ErrnoError.prototype = new Error();
	        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
	        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
	        [ERRNO_CODES.ENOENT].forEach(function(code) {
	          FS.genericErrors[code] = new FS.ErrnoError(code);
	          FS.genericErrors[code].stack = '<generic error, no stack>';
	        });
	      },staticInit:function () {
	        FS.ensureErrnoError();

	        FS.nameTable = new Array(4096);

	        FS.mount(MEMFS, {}, '/');

	        FS.createDefaultDirectories();
	        FS.createDefaultDevices();
	      },init:function (input, output, error) {
	        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
	        FS.init.initialized = true;

	        FS.ensureErrnoError();

	        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
	        Module['stdin'] = input || Module['stdin'];
	        Module['stdout'] = output || Module['stdout'];
	        Module['stderr'] = error || Module['stderr'];

	        FS.createStandardStreams();
	      },quit:function () {
	        FS.init.initialized = false;
	        for (var i = 0; i < FS.streams.length; i++) {
	          var stream = FS.streams[i];
	          if (!stream) {
	            continue;
	          }
	          FS.close(stream);
	        }
	      },getMode:function (canRead, canWrite) {
	        var mode = 0;
	        if (canRead) mode |= 292 | 73;
	        if (canWrite) mode |= 146;
	        return mode;
	      },joinPath:function (parts, forceRelative) {
	        var path = PATH.join.apply(null, parts);
	        if (forceRelative && path[0] == '/') path = path.substr(1);
	        return path;
	      },absolutePath:function (relative, base) {
	        return PATH.resolve(base, relative);
	      },standardizePath:function (path) {
	        return PATH.normalize(path);
	      },findObject:function (path, dontResolveLastLink) {
	        var ret = FS.analyzePath(path, dontResolveLastLink);
	        if (ret.exists) {
	          return ret.object;
	        } else {
	          ___setErrNo(ret.error);
	          return null;
	        }
	      },analyzePath:function (path, dontResolveLastLink) {
	        // operate from within the context of the symlink's target
	        try {
	          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
	          path = lookup.path;
	        } catch (e) {
	        }
	        var ret = {
	          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
	          parentExists: false, parentPath: null, parentObject: null
	        };
	        try {
	          var lookup = FS.lookupPath(path, { parent: true });
	          ret.parentExists = true;
	          ret.parentPath = lookup.path;
	          ret.parentObject = lookup.node;
	          ret.name = PATH.basename(path);
	          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
	          ret.exists = true;
	          ret.path = lookup.path;
	          ret.object = lookup.node;
	          ret.name = lookup.node.name;
	          ret.isRoot = lookup.path === '/';
	        } catch (e) {
	          ret.error = e.errno;
	        };
	        return ret;
	      },createFolder:function (parent, name, canRead, canWrite) {
	        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
	        var mode = FS.getMode(canRead, canWrite);
	        return FS.mkdir(path, mode);
	      },createPath:function (parent, path, canRead, canWrite) {
	        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
	        var parts = path.split('/').reverse();
	        while (parts.length) {
	          var part = parts.pop();
	          if (!part) continue;
	          var current = PATH.join2(parent, part);
	          try {
	            FS.mkdir(current);
	          } catch (e) {
	            // ignore EEXIST
	          }
	          parent = current;
	        }
	        return current;
	      },createFile:function (parent, name, properties, canRead, canWrite) {
	        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
	        var mode = FS.getMode(canRead, canWrite);
	        return FS.create(path, mode);
	      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
	        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
	        var mode = FS.getMode(canRead, canWrite);
	        var node = FS.create(path, mode);
	        if (data) {
	          if (typeof data === 'string') {
	            var arr = new Array(data.length);
	            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
	            data = arr;
	          }
	          // make sure we can write to the file
	          FS.chmod(node, mode | 146);
	          var stream = FS.open(node, 'w');
	          FS.write(stream, data, 0, data.length, 0, canOwn);
	          FS.close(stream);
	          FS.chmod(node, mode);
	        }
	        return node;
	      },createDevice:function (parent, name, input, output) {
	        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
	        var mode = FS.getMode(!!input, !!output);
	        if (!FS.createDevice.major) FS.createDevice.major = 64;
	        var dev = FS.makedev(FS.createDevice.major++, 0);
	        // Create a fake device that a set of stream ops to emulate
	        // the old behavior.
	        FS.registerDevice(dev, {
	          open: function(stream) {
	            stream.seekable = false;
	          },
	          close: function(stream) {
	            // flush any pending line data
	            if (output && output.buffer && output.buffer.length) {
	              output(10);
	            }
	          },
	          read: function(stream, buffer, offset, length, pos /* ignored */) {
	            var bytesRead = 0;
	            for (var i = 0; i < length; i++) {
	              var result;
	              try {
	                result = input();
	              } catch (e) {
	                throw new FS.ErrnoError(ERRNO_CODES.EIO);
	              }
	              if (result === undefined && bytesRead === 0) {
	                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
	              }
	              if (result === null || result === undefined) break;
	              bytesRead++;
	              buffer[offset+i] = result;
	            }
	            if (bytesRead) {
	              stream.node.timestamp = Date.now();
	            }
	            return bytesRead;
	          },
	          write: function(stream, buffer, offset, length, pos) {
	            for (var i = 0; i < length; i++) {
	              try {
	                output(buffer[offset+i]);
	              } catch (e) {
	                throw new FS.ErrnoError(ERRNO_CODES.EIO);
	              }
	            }
	            if (length) {
	              stream.node.timestamp = Date.now();
	            }
	            return i;
	          }
	        });
	        return FS.mkdev(path, mode, dev);
	      },createLink:function (parent, name, target, canRead, canWrite) {
	        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
	        return FS.symlink(target, path);
	      },forceLoadFile:function (obj) {
	        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
	        var success = true;
	        if (typeof XMLHttpRequest !== 'undefined') {
	          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
	        } else if (Module['read']) {
	          // Command-line.
	          try {
	            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
	            //          read() will try to parse UTF8.
	            obj.contents = intArrayFromString(Module['read'](obj.url), true);
	            obj.usedBytes = obj.contents.length;
	          } catch (e) {
	            success = false;
	          }
	        } else {
	          throw new Error('Cannot load without read() or XMLHttpRequest.');
	        }
	        if (!success) ___setErrNo(ERRNO_CODES.EIO);
	        return success;
	      },createLazyFile:function (parent, name, url, canRead, canWrite) {
	        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
	        function LazyUint8Array() {
	          this.lengthKnown = false;
	          this.chunks = []; // Loaded chunks. Index is the chunk number
	        }
	        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
	          if (idx > this.length-1 || idx < 0) {
	            return undefined;
	          }
	          var chunkOffset = idx % this.chunkSize;
	          var chunkNum = (idx / this.chunkSize)|0;
	          return this.getter(chunkNum)[chunkOffset];
	        }
	        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
	          this.getter = getter;
	        }
	        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
	          // Find length
	          var xhr = new XMLHttpRequest();
	          xhr.open('HEAD', url, false);
	          xhr.send(null);
	          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
	          var datalength = Number(xhr.getResponseHeader("Content-length"));
	          var header;
	          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
	          var chunkSize = 1024*1024; // Chunk size in bytes

	          if (!hasByteServing) chunkSize = datalength;

	          // Function to get a range from the remote URL.
	          var doXHR = (function(from, to) {
	            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
	            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");

	            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
	            var xhr = new XMLHttpRequest();
	            xhr.open('GET', url, false);
	            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

	            // Some hints to the browser that we want binary data.
	            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
	            if (xhr.overrideMimeType) {
	              xhr.overrideMimeType('text/plain; charset=x-user-defined');
	            }

	            xhr.send(null);
	            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
	            if (xhr.response !== undefined) {
	              return new Uint8Array(xhr.response || []);
	            } else {
	              return intArrayFromString(xhr.responseText || '', true);
	            }
	          });
	          var lazyArray = this;
	          lazyArray.setDataGetter(function(chunkNum) {
	            var start = chunkNum * chunkSize;
	            var end = (chunkNum+1) * chunkSize - 1; // including this byte
	            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
	            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
	              lazyArray.chunks[chunkNum] = doXHR(start, end);
	            }
	            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
	            return lazyArray.chunks[chunkNum];
	          });

	          this._length = datalength;
	          this._chunkSize = chunkSize;
	          this.lengthKnown = true;
	        }
	        if (typeof XMLHttpRequest !== 'undefined') {
	          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
	          var lazyArray = new LazyUint8Array();
	          Object.defineProperty(lazyArray, "length", {
	              get: function() {
	                  if(!this.lengthKnown) {
	                      this.cacheLength();
	                  }
	                  return this._length;
	              }
	          });
	          Object.defineProperty(lazyArray, "chunkSize", {
	              get: function() {
	                  if(!this.lengthKnown) {
	                      this.cacheLength();
	                  }
	                  return this._chunkSize;
	              }
	          });

	          var properties = { isDevice: false, contents: lazyArray };
	        } else {
	          var properties = { isDevice: false, url: url };
	        }

	        var node = FS.createFile(parent, name, properties, canRead, canWrite);
	        // This is a total hack, but I want to get this lazy file code out of the
	        // core of MEMFS. If we want to keep this lazy file concept I feel it should
	        // be its own thin LAZYFS proxying calls to MEMFS.
	        if (properties.contents) {
	          node.contents = properties.contents;
	        } else if (properties.url) {
	          node.contents = null;
	          node.url = properties.url;
	        }
	        // Add a function that defers querying the file size until it is asked the first time.
	        Object.defineProperty(node, "usedBytes", {
	            get: function() { return this.contents.length; }
	        });
	        // override each stream op with one that tries to force load the lazy file first
	        var stream_ops = {};
	        var keys = Object.keys(node.stream_ops);
	        keys.forEach(function(key) {
	          var fn = node.stream_ops[key];
	          stream_ops[key] = function forceLoadLazyFile() {
	            if (!FS.forceLoadFile(node)) {
	              throw new FS.ErrnoError(ERRNO_CODES.EIO);
	            }
	            return fn.apply(null, arguments);
	          };
	        });
	        // use a custom read function
	        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
	          if (!FS.forceLoadFile(node)) {
	            throw new FS.ErrnoError(ERRNO_CODES.EIO);
	          }
	          var contents = stream.node.contents;
	          if (position >= contents.length)
	            return 0;
	          var size = Math.min(contents.length - position, length);
	          assert(size >= 0);
	          if (contents.slice) { // normal array
	            for (var i = 0; i < size; i++) {
	              buffer[offset + i] = contents[position + i];
	            }
	          } else {
	            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
	              buffer[offset + i] = contents.get(position + i);
	            }
	          }
	          return size;
	        };
	        node.stream_ops = stream_ops;
	        return node;
	      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
	        Browser.init();
	        // TODO we should allow people to just pass in a complete filename instead
	        // of parent and name being that we just join them anyways
	        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
	        function processData(byteArray) {
	          function finish(byteArray) {
	            if (!dontCreateFile) {
	              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
	            }
	            if (onload) onload();
	            removeRunDependency('cp ' + fullname);
	          }
	          var handled = false;
	          Module['preloadPlugins'].forEach(function(plugin) {
	            if (handled) return;
	            if (plugin['canHandle'](fullname)) {
	              plugin['handle'](byteArray, fullname, finish, function() {
	                if (onerror) onerror();
	                removeRunDependency('cp ' + fullname);
	              });
	              handled = true;
	            }
	          });
	          if (!handled) finish(byteArray);
	        }
	        addRunDependency('cp ' + fullname);
	        if (typeof url == 'string') {
	          Browser.asyncLoad(url, function(byteArray) {
	            processData(byteArray);
	          }, onerror);
	        } else {
	          processData(url);
	        }
	      },indexedDB:function () {
	        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
	      },DB_NAME:function () {
	        return 'EM_FS_' + window.location.pathname;
	      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
	        onload = onload || function(){};
	        onerror = onerror || function(){};
	        var indexedDB = FS.indexedDB();
	        try {
	          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
	        } catch (e) {
	          return onerror(e);
	        }
	        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
	          console.log('creating db');
	          var db = openRequest.result;
	          db.createObjectStore(FS.DB_STORE_NAME);
	        };
	        openRequest.onsuccess = function openRequest_onsuccess() {
	          var db = openRequest.result;
	          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
	          var files = transaction.objectStore(FS.DB_STORE_NAME);
	          var ok = 0, fail = 0, total = paths.length;
	          function finish() {
	            if (fail == 0) onload(); else onerror();
	          }
	          paths.forEach(function(path) {
	            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
	            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
	            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
	          });
	          transaction.onerror = onerror;
	        };
	        openRequest.onerror = onerror;
	      },loadFilesFromDB:function (paths, onload, onerror) {
	        onload = onload || function(){};
	        onerror = onerror || function(){};
	        var indexedDB = FS.indexedDB();
	        try {
	          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
	        } catch (e) {
	          return onerror(e);
	        }
	        openRequest.onupgradeneeded = onerror; // no database to load from
	        openRequest.onsuccess = function openRequest_onsuccess() {
	          var db = openRequest.result;
	          try {
	            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
	          } catch(e) {
	            onerror(e);
	            return;
	          }
	          var files = transaction.objectStore(FS.DB_STORE_NAME);
	          var ok = 0, fail = 0, total = paths.length;
	          function finish() {
	            if (fail == 0) onload(); else onerror();
	          }
	          paths.forEach(function(path) {
	            var getRequest = files.get(path);
	            getRequest.onsuccess = function getRequest_onsuccess() {
	              if (FS.analyzePath(path).exists) {
	                FS.unlink(path);
	              }
	              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
	              ok++;
	              if (ok + fail == total) finish();
	            };
	            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
	          });
	          transaction.onerror = onerror;
	        };
	        openRequest.onerror = onerror;
	      }};
	  Module["FS"] = FS;function _close(fildes) {
	      // int close(int fildes);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
	      var stream = FS.getStream(fildes);
	      if (!stream) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }
	      try {
	        FS.close(stream);
	        return 0;
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_close"] = _close;

	  function _fsync(fildes) {
	      // int fsync(int fildes);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
	      var stream = FS.getStream(fildes);
	      if (stream) {
	        // We write directly to the file system, so there's nothing to do here.
	        return 0;
	      } else {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }
	    }
	  Module["_fsync"] = _fsync;

	  function _fileno(stream) {
	      // int fileno(FILE *stream);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
	      stream = FS.getStreamFromPtr(stream);
	      if (!stream) return -1;
	      return stream.fd;
	    }
	  Module["_fileno"] = _fileno;function _fclose(stream) {
	      // int fclose(FILE *stream);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
	      var fd = _fileno(stream);
	      _fsync(fd);
	      return _close(fd);
	    }
	  Module["_fclose"] = _fclose;

	  var _FtoIHigh=true;
	  Module["_FtoIHigh"] = _FtoIHigh;







	  function _mkport() { throw 'TODO' }
	  Module["_mkport"] = _mkport;var SOCKFS={mount:function (mount) {
	        // If Module['websocket'] has already been defined (e.g. for configuring
	        // the subprotocol/url) use that, if not initialise it to a new object.
	        Module['websocket'] = (Module['websocket'] &&
	                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};

	        // Add the Event registration mechanism to the exported websocket configuration
	        // object so we can register network callbacks from native JavaScript too.
	        // For more documentation see system/include/emscripten/emscripten.h
	        Module['websocket']._callbacks = {};
	        Module['websocket']['on'] = function(event, callback) {
	  	    if ('function' === typeof callback) {
	  		  this._callbacks[event] = callback;
	          }
	  	    return this;
	        };

	        Module['websocket'].emit = function(event, param) {
	  	    if ('function' === typeof this._callbacks[event]) {
	  		  this._callbacks[event].call(this, param);
	          }
	        };

	        // If debug is enabled register simple default logging callbacks for each Event.

	        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
	      },createSocket:function (family, type, protocol) {
	        var streaming = type == 1;
	        if (protocol) {
	          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
	        }

	        // create our internal socket structure
	        var sock = {
	          family: family,
	          type: type,
	          protocol: protocol,
	          server: null,
	          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
	          peers: {},
	          pending: [],
	          recv_queue: [],
	          sock_ops: SOCKFS.websocket_sock_ops
	        };

	        // create the filesystem node to store the socket structure
	        var name = SOCKFS.nextname();
	        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
	        node.sock = sock;

	        // and the wrapping stream that enables library functions such
	        // as read and write to indirectly interact with the socket
	        var stream = FS.createStream({
	          path: name,
	          node: node,
	          flags: FS.modeStringToFlags('r+'),
	          seekable: false,
	          stream_ops: SOCKFS.stream_ops
	        });

	        // map the new stream to the socket structure (sockets have a 1:1
	        // relationship with a stream)
	        sock.stream = stream;

	        return sock;
	      },getSocket:function (fd) {
	        var stream = FS.getStream(fd);
	        if (!stream || !FS.isSocket(stream.node.mode)) {
	          return null;
	        }
	        return stream.node.sock;
	      },stream_ops:{poll:function (stream) {
	          var sock = stream.node.sock;
	          return sock.sock_ops.poll(sock);
	        },ioctl:function (stream, request, varargs) {
	          var sock = stream.node.sock;
	          return sock.sock_ops.ioctl(sock, request, varargs);
	        },read:function (stream, buffer, offset, length, position /* ignored */) {
	          var sock = stream.node.sock;
	          var msg = sock.sock_ops.recvmsg(sock, length);
	          if (!msg) {
	            // socket is closed
	            return 0;
	          }
	          buffer.set(msg.buffer, offset);
	          return msg.buffer.length;
	        },write:function (stream, buffer, offset, length, position /* ignored */) {
	          var sock = stream.node.sock;
	          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
	        },close:function (stream) {
	          var sock = stream.node.sock;
	          sock.sock_ops.close(sock);
	        }},nextname:function () {
	        if (!SOCKFS.nextname.current) {
	          SOCKFS.nextname.current = 0;
	        }
	        return 'socket[' + (SOCKFS.nextname.current++) + ']';
	      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
	          var ws;

	          if (typeof addr === 'object') {
	            ws = addr;
	            addr = null;
	            port = null;
	          }

	          if (ws) {
	            // for sockets that've already connected (e.g. we're the server)
	            // we can inspect the _socket property for the address
	            if (ws._socket) {
	              addr = ws._socket.remoteAddress;
	              port = ws._socket.remotePort;
	            }
	            // if we're just now initializing a connection to the remote,
	            // inspect the url property
	            else {
	              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
	              if (!result) {
	                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
	              }
	              addr = result[1];
	              port = parseInt(result[2], 10);
	            }
	          } else {
	            // create the actual websocket object and connect
	            try {
	              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
	              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));

	              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
	              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
	              var url = 'ws:#'.replace('#', '//');

	              if (runtimeConfig) {
	                if ('string' === typeof Module['websocket']['url']) {
	                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
	                }
	              }

	              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
	                var parts = addr.split('/');
	                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
	              }

	              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
	              var subProtocols = 'binary'; // The default value is 'binary'

	              if (runtimeConfig) {
	                if ('string' === typeof Module['websocket']['subprotocol']) {
	                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
	                }
	              }

	              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
	              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
	              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);

	              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
	              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;

	              // If node we use the ws library.
	              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
	              ws = new WebSocket(url, opts);
	              ws.binaryType = 'arraybuffer';
	            } catch (e) {
	              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
	            }
	          }


	          var peer = {
	            addr: addr,
	            port: port,
	            socket: ws,
	            dgram_send_queue: []
	          };

	          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
	          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);

	          // if this is a bound dgram socket, send the port number first to allow
	          // us to override the ephemeral port reported to us by remotePort on the
	          // remote end.
	          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
	            peer.dgram_send_queue.push(new Uint8Array([
	                255, 255, 255, 255,
	                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
	                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
	            ]));
	          }

	          return peer;
	        },getPeer:function (sock, addr, port) {
	          return sock.peers[addr + ':' + port];
	        },addPeer:function (sock, peer) {
	          sock.peers[peer.addr + ':' + peer.port] = peer;
	        },removePeer:function (sock, peer) {
	          delete sock.peers[peer.addr + ':' + peer.port];
	        },handlePeerEvents:function (sock, peer) {
	          var first = true;

	          var handleOpen = function () {

	            Module['websocket'].emit('open', sock.stream.fd);

	            try {
	              var queued = peer.dgram_send_queue.shift();
	              while (queued) {
	                peer.socket.send(queued);
	                queued = peer.dgram_send_queue.shift();
	              }
	            } catch (e) {
	              // not much we can do here in the way of proper error handling as we've already
	              // lied and said this data was sent. shut it down.
	              peer.socket.close();
	            }
	          };

	          function handleMessage(data) {
	            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
	            data = new Uint8Array(data);  // make a typed array view on the array buffer


	            // if this is the port message, override the peer's port with it
	            var wasfirst = first;
	            first = false;
	            if (wasfirst &&
	                data.length === 10 &&
	                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
	                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
	              // update the peer's port and it's key in the peer map
	              var newport = ((data[8] << 8) | data[9]);
	              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
	              peer.port = newport;
	              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
	              return;
	            }

	            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
	            Module['websocket'].emit('message', sock.stream.fd);
	          };

	          if (ENVIRONMENT_IS_NODE) {
	            peer.socket.on('open', handleOpen);
	            peer.socket.on('message', function(data, flags) {
	              if (!flags.binary) {
	                return;
	              }
	              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
	            });
	            peer.socket.on('close', function() {
	              Module['websocket'].emit('close', sock.stream.fd);
	            });
	            peer.socket.on('error', function(error) {
	              // Although the ws library may pass errors that may be more descriptive than
	              // ECONNREFUSED they are not necessarily the expected error code e.g.
	              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
	              // is still probably the most useful thing to do.
	              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
	              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
	              // don't throw
	            });
	          } else {
	            peer.socket.onopen = handleOpen;
	            peer.socket.onclose = function() {
	              Module['websocket'].emit('close', sock.stream.fd);
	            };
	            peer.socket.onmessage = function peer_socket_onmessage(event) {
	              handleMessage(event.data);
	            };
	            peer.socket.onerror = function(error) {
	              // The WebSocket spec only allows a 'simple event' to be thrown on error,
	              // so we only really know as much as ECONNREFUSED.
	              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
	              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
	            };
	          }
	        },poll:function (sock) {
	          if (sock.type === 1 && sock.server) {
	            // listen sockets should only say they're available for reading
	            // if there are pending clients.
	            return sock.pending.length ? (64 | 1) : 0;
	          }

	          var mask = 0;
	          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
	            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
	            null;

	          if (sock.recv_queue.length ||
	              !dest ||  // connection-less sockets are always ready to read
	              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
	              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
	            mask |= (64 | 1);
	          }

	          if (!dest ||  // connection-less sockets are always ready to write
	              (dest && dest.socket.readyState === dest.socket.OPEN)) {
	            mask |= 4;
	          }

	          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
	              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
	            mask |= 16;
	          }

	          return mask;
	        },ioctl:function (sock, request, arg) {
	          switch (request) {
	            case 21531:
	              var bytes = 0;
	              if (sock.recv_queue.length) {
	                bytes = sock.recv_queue[0].data.length;
	              }
	              HEAP32[((arg)>>2)]=bytes;
	              return 0;
	            default:
	              return ERRNO_CODES.EINVAL;
	          }
	        },close:function (sock) {
	          // if we've spawned a listen server, close it
	          if (sock.server) {
	            try {
	              sock.server.close();
	            } catch (e) {
	            }
	            sock.server = null;
	          }
	          // close any peer connections
	          var peers = Object.keys(sock.peers);
	          for (var i = 0; i < peers.length; i++) {
	            var peer = sock.peers[peers[i]];
	            try {
	              peer.socket.close();
	            } catch (e) {
	            }
	            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
	          }
	          return 0;
	        },bind:function (sock, addr, port) {
	          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
	            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
	          }
	          sock.saddr = addr;
	          sock.sport = port || _mkport();
	          // in order to emulate dgram sockets, we need to launch a listen server when
	          // binding on a connection-less socket
	          // note: this is only required on the server side
	          if (sock.type === 2) {
	            // close the existing server if it exists
	            if (sock.server) {
	              sock.server.close();
	              sock.server = null;
	            }
	            // swallow error operation not supported error that occurs when binding in the
	            // browser where this isn't supported
	            try {
	              sock.sock_ops.listen(sock, 0);
	            } catch (e) {
	              if (!(e instanceof FS.ErrnoError)) throw e;
	              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
	            }
	          }
	        },connect:function (sock, addr, port) {
	          if (sock.server) {
	            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
	          }

	          // TODO autobind
	          // if (!sock.addr && sock.type == 2) {
	          // }

	          // early out if we're already connected / in the middle of connecting
	          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
	            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
	            if (dest) {
	              if (dest.socket.readyState === dest.socket.CONNECTING) {
	                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
	              } else {
	                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
	              }
	            }
	          }

	          // add the socket to our peer list and set our
	          // destination address / port to match
	          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
	          sock.daddr = peer.addr;
	          sock.dport = peer.port;

	          // always "fail" in non-blocking mode
	          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
	        },listen:function (sock, backlog) {
	          if (!ENVIRONMENT_IS_NODE) {
	            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
	          }
	          if (sock.server) {
	             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
	          }
	          var WebSocketServer = require('ws').Server;
	          var host = sock.saddr;
	          sock.server = new WebSocketServer({
	            host: host,
	            port: sock.sport
	            // TODO support backlog
	          });
	          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.

	          sock.server.on('connection', function(ws) {
	            if (sock.type === 1) {
	              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);

	              // create a peer on the new socket
	              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
	              newsock.daddr = peer.addr;
	              newsock.dport = peer.port;

	              // push to queue for accept to pick up
	              sock.pending.push(newsock);
	              Module['websocket'].emit('connection', newsock.stream.fd);
	            } else {
	              // create a peer on the listen socket so calling sendto
	              // with the listen socket and an address will resolve
	              // to the correct client
	              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
	              Module['websocket'].emit('connection', sock.stream.fd);
	            }
	          });
	          sock.server.on('closed', function() {
	            Module['websocket'].emit('close', sock.stream.fd);
	            sock.server = null;
	          });
	          sock.server.on('error', function(error) {
	            // Although the ws library may pass errors that may be more descriptive than
	            // ECONNREFUSED they are not necessarily the expected error code e.g.
	            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
	            // is still probably the most useful thing to do. This error shouldn't
	            // occur in a well written app as errors should get trapped in the compiled
	            // app's own getaddrinfo call.
	            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
	            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
	            // don't throw
	          });
	        },accept:function (listensock) {
	          if (!listensock.server) {
	            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	          }
	          var newsock = listensock.pending.shift();
	          newsock.stream.flags = listensock.stream.flags;
	          return newsock;
	        },getname:function (sock, peer) {
	          var addr, port;
	          if (peer) {
	            if (sock.daddr === undefined || sock.dport === undefined) {
	              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
	            }
	            addr = sock.daddr;
	            port = sock.dport;
	          } else {
	            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
	            // should we be returning for TCP sockets that've been connect()'d?
	            addr = sock.saddr || 0;
	            port = sock.sport || 0;
	          }
	          return { addr: addr, port: port };
	        },sendmsg:function (sock, buffer, offset, length, addr, port) {
	          if (sock.type === 2) {
	            // connection-less sockets will honor the message address,
	            // and otherwise fall back to the bound destination address
	            if (addr === undefined || port === undefined) {
	              addr = sock.daddr;
	              port = sock.dport;
	            }
	            // if there was no address to fall back to, error out
	            if (addr === undefined || port === undefined) {
	              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
	            }
	          } else {
	            // connection-based sockets will only use the bound
	            addr = sock.daddr;
	            port = sock.dport;
	          }

	          // find the peer for the destination address
	          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);

	          // early out if not connected with a connection-based socket
	          if (sock.type === 1) {
	            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
	              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
	            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
	              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
	            }
	          }

	          // create a copy of the incoming data to send, as the WebSocket API
	          // doesn't work entirely with an ArrayBufferView, it'll just send
	          // the entire underlying buffer
	          var data;
	          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
	            data = buffer.slice(offset, offset + length);
	          } else {  // ArrayBufferView
	            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
	          }

	          // if we're emulating a connection-less dgram socket and don't have
	          // a cached connection, queue the buffer to send upon connect and
	          // lie, saying the data was sent now.
	          if (sock.type === 2) {
	            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
	              // if we're not connected, open a new connection
	              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
	                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
	              }
	              dest.dgram_send_queue.push(data);
	              return length;
	            }
	          }

	          try {
	            // send the actual data
	            dest.socket.send(data);
	            return length;
	          } catch (e) {
	            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
	          }
	        },recvmsg:function (sock, length) {
	          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
	          if (sock.type === 1 && sock.server) {
	            // tcp servers should not be recv()'ing on the listen socket
	            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
	          }

	          var queued = sock.recv_queue.shift();
	          if (!queued) {
	            if (sock.type === 1) {
	              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);

	              if (!dest) {
	                // if we have a destination address but are not connected, error out
	                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
	              }
	              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
	                // return null if the socket has closed
	                return null;
	              }
	              else {
	                // else, our socket is in a valid state but truly has nothing available
	                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
	              }
	            } else {
	              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
	            }
	          }

	          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
	          // requeued TCP data it'll be an ArrayBufferView
	          var queuedLength = queued.data.byteLength || queued.data.length;
	          var queuedOffset = queued.data.byteOffset || 0;
	          var queuedBuffer = queued.data.buffer || queued.data;
	          var bytesRead = Math.min(length, queuedLength);
	          var res = {
	            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
	            addr: queued.addr,
	            port: queued.port
	          };


	          // push back any unread data for TCP connections
	          if (sock.type === 1 && bytesRead < queuedLength) {
	            var bytesRemaining = queuedLength - bytesRead;
	            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
	            sock.recv_queue.unshift(queued);
	          }

	          return res;
	        }}};
	  Module["SOCKFS"] = SOCKFS;function _send(fd, buf, len, flags) {
	      var sock = SOCKFS.getSocket(fd);
	      if (!sock) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }
	      // TODO honor flags
	      return _write(fd, buf, len);
	    }
	  Module["_send"] = _send;

	  function _pwrite(fildes, buf, nbyte, offset) {
	      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
	      var stream = FS.getStream(fildes);
	      if (!stream) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }
	      try {
	        var slab = HEAP8;
	        return FS.write(stream, slab, buf, nbyte, offset);
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_pwrite"] = _pwrite;function _write(fildes, buf, nbyte) {
	      // ssize_t write(int fildes, const void *buf, size_t nbyte);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
	      var stream = FS.getStream(fildes);
	      if (!stream) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }


	      try {
	        var slab = HEAP8;
	        return FS.write(stream, slab, buf, nbyte);
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_write"] = _write;function _fwrite(ptr, size, nitems, stream) {
	      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
	      var bytesToWrite = nitems * size;
	      if (bytesToWrite == 0) return 0;
	      var fd = _fileno(stream);
	      var bytesWritten = _write(fd, ptr, bytesToWrite);
	      if (bytesWritten == -1) {
	        var streamObj = FS.getStreamFromPtr(stream);
	        if (streamObj) streamObj.error = true;
	        return 0;
	      } else {
	        return (bytesWritten / size)|0;
	      }
	    }
	  Module["_fwrite"] = _fwrite;



	  Module["_strlen"] = _strlen;

	  function __reallyNegative(x) {
	      return x < 0 || (x === 0 && (1/x) === -Infinity);
	    }
	  Module["__reallyNegative"] = __reallyNegative;function __formatString(format, varargs) {
	      var textIndex = format;
	      var argIndex = 0;
	      function getNextArg(type) {
	        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
	        //       int x = 4; printf("%c\n", (char)x);
	        var ret;
	        if (type === 'double') {
	          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
	        } else if (type == 'i64') {
	          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
	                 HEAP32[(((varargs)+(argIndex+4))>>2)]];

	        } else {
	          type = 'i32'; // varargs are always i32, i64, or double
	          ret = HEAP32[(((varargs)+(argIndex))>>2)];
	        }
	        argIndex += Runtime.getNativeFieldSize(type);
	        return ret;
	      }

	      var ret = [];
	      var curr, next, currArg;
	      while(1) {
	        var startTextIndex = textIndex;
	        curr = HEAP8[((textIndex)>>0)];
	        if (curr === 0) break;
	        next = HEAP8[((textIndex+1)>>0)];
	        if (curr == 37) {
	          // Handle flags.
	          var flagAlwaysSigned = false;
	          var flagLeftAlign = false;
	          var flagAlternative = false;
	          var flagZeroPad = false;
	          var flagPadSign = false;
	          flagsLoop: while (1) {
	            switch (next) {
	              case 43:
	                flagAlwaysSigned = true;
	                break;
	              case 45:
	                flagLeftAlign = true;
	                break;
	              case 35:
	                flagAlternative = true;
	                break;
	              case 48:
	                if (flagZeroPad) {
	                  break flagsLoop;
	                } else {
	                  flagZeroPad = true;
	                  break;
	                }
	              case 32:
	                flagPadSign = true;
	                break;
	              default:
	                break flagsLoop;
	            }
	            textIndex++;
	            next = HEAP8[((textIndex+1)>>0)];
	          }

	          // Handle width.
	          var width = 0;
	          if (next == 42) {
	            width = getNextArg('i32');
	            textIndex++;
	            next = HEAP8[((textIndex+1)>>0)];
	          } else {
	            while (next >= 48 && next <= 57) {
	              width = width * 10 + (next - 48);
	              textIndex++;
	              next = HEAP8[((textIndex+1)>>0)];
	            }
	          }

	          // Handle precision.
	          var precisionSet = false, precision = -1;
	          if (next == 46) {
	            precision = 0;
	            precisionSet = true;
	            textIndex++;
	            next = HEAP8[((textIndex+1)>>0)];
	            if (next == 42) {
	              precision = getNextArg('i32');
	              textIndex++;
	            } else {
	              while(1) {
	                var precisionChr = HEAP8[((textIndex+1)>>0)];
	                if (precisionChr < 48 ||
	                    precisionChr > 57) break;
	                precision = precision * 10 + (precisionChr - 48);
	                textIndex++;
	              }
	            }
	            next = HEAP8[((textIndex+1)>>0)];
	          }
	          if (precision < 0) {
	            precision = 6; // Standard default.
	            precisionSet = false;
	          }

	          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
	          var argSize;
	          switch (String.fromCharCode(next)) {
	            case 'h':
	              var nextNext = HEAP8[((textIndex+2)>>0)];
	              if (nextNext == 104) {
	                textIndex++;
	                argSize = 1; // char (actually i32 in varargs)
	              } else {
	                argSize = 2; // short (actually i32 in varargs)
	              }
	              break;
	            case 'l':
	              var nextNext = HEAP8[((textIndex+2)>>0)];
	              if (nextNext == 108) {
	                textIndex++;
	                argSize = 8; // long long
	              } else {
	                argSize = 4; // long
	              }
	              break;
	            case 'L': // long long
	            case 'q': // int64_t
	            case 'j': // intmax_t
	              argSize = 8;
	              break;
	            case 'z': // size_t
	            case 't': // ptrdiff_t
	            case 'I': // signed ptrdiff_t or unsigned size_t
	              argSize = 4;
	              break;
	            default:
	              argSize = null;
	          }
	          if (argSize) textIndex++;
	          next = HEAP8[((textIndex+1)>>0)];

	          // Handle type specifier.
	          switch (String.fromCharCode(next)) {
	            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
	              // Integer.
	              var signed = next == 100 || next == 105;
	              argSize = argSize || 4;
	              var currArg = getNextArg('i' + (argSize * 8));
	              var origArg = currArg;
	              var argText;
	              // Flatten i64-1 [low, high] into a (slightly rounded) double
	              if (argSize == 8) {
	                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
	              }
	              // Truncate to requested size.
	              if (argSize <= 4) {
	                var limit = Math.pow(256, argSize) - 1;
	                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
	              }
	              // Format the number.
	              var currAbsArg = Math.abs(currArg);
	              var prefix = '';
	              if (next == 100 || next == 105) {
	                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
	                argText = reSign(currArg, 8 * argSize, 1).toString(10);
	              } else if (next == 117) {
	                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
	                argText = unSign(currArg, 8 * argSize, 1).toString(10);
	                currArg = Math.abs(currArg);
	              } else if (next == 111) {
	                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
	              } else if (next == 120 || next == 88) {
	                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
	                if (argSize == 8 && i64Math) {
	                  if (origArg[1]) {
	                    argText = (origArg[1]>>>0).toString(16);
	                    var lower = (origArg[0]>>>0).toString(16);
	                    while (lower.length < 8) lower = '0' + lower;
	                    argText += lower;
	                  } else {
	                    argText = (origArg[0]>>>0).toString(16);
	                  }
	                } else
	                if (currArg < 0) {
	                  // Represent negative numbers in hex as 2's complement.
	                  currArg = -currArg;
	                  argText = (currAbsArg - 1).toString(16);
	                  var buffer = [];
	                  for (var i = 0; i < argText.length; i++) {
	                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
	                  }
	                  argText = buffer.join('');
	                  while (argText.length < argSize * 2) argText = 'f' + argText;
	                } else {
	                  argText = currAbsArg.toString(16);
	                }
	                if (next == 88) {
	                  prefix = prefix.toUpperCase();
	                  argText = argText.toUpperCase();
	                }
	              } else if (next == 112) {
	                if (currAbsArg === 0) {
	                  argText = '(nil)';
	                } else {
	                  prefix = '0x';
	                  argText = currAbsArg.toString(16);
	                }
	              }
	              if (precisionSet) {
	                while (argText.length < precision) {
	                  argText = '0' + argText;
	                }
	              }

	              // Add sign if needed
	              if (currArg >= 0) {
	                if (flagAlwaysSigned) {
	                  prefix = '+' + prefix;
	                } else if (flagPadSign) {
	                  prefix = ' ' + prefix;
	                }
	              }

	              // Move sign to prefix so we zero-pad after the sign
	              if (argText.charAt(0) == '-') {
	                prefix = '-' + prefix;
	                argText = argText.substr(1);
	              }

	              // Add padding.
	              while (prefix.length + argText.length < width) {
	                if (flagLeftAlign) {
	                  argText += ' ';
	                } else {
	                  if (flagZeroPad) {
	                    argText = '0' + argText;
	                  } else {
	                    prefix = ' ' + prefix;
	                  }
	                }
	              }

	              // Insert the result into the buffer.
	              argText = prefix + argText;
	              argText.split('').forEach(function(chr) {
	                ret.push(chr.charCodeAt(0));
	              });
	              break;
	            }
	            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
	              // Float.
	              var currArg = getNextArg('double');
	              var argText;
	              if (isNaN(currArg)) {
	                argText = 'nan';
	                flagZeroPad = false;
	              } else if (!isFinite(currArg)) {
	                argText = (currArg < 0 ? '-' : '') + 'inf';
	                flagZeroPad = false;
	              } else {
	                var isGeneral = false;
	                var effectivePrecision = Math.min(precision, 20);

	                // Convert g/G to f/F or e/E, as per:
	                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
	                if (next == 103 || next == 71) {
	                  isGeneral = true;
	                  precision = precision || 1;
	                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
	                  if (precision > exponent && exponent >= -4) {
	                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
	                    precision -= exponent + 1;
	                  } else {
	                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
	                    precision--;
	                  }
	                  effectivePrecision = Math.min(precision, 20);
	                }

	                if (next == 101 || next == 69) {
	                  argText = currArg.toExponential(effectivePrecision);
	                  // Make sure the exponent has at least 2 digits.
	                  if (/[eE][-+]\d$/.test(argText)) {
	                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
	                  }
	                } else if (next == 102 || next == 70) {
	                  argText = currArg.toFixed(effectivePrecision);
	                  if (currArg === 0 && __reallyNegative(currArg)) {
	                    argText = '-' + argText;
	                  }
	                }

	                var parts = argText.split('e');
	                if (isGeneral && !flagAlternative) {
	                  // Discard trailing zeros and periods.
	                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
	                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
	                    parts[0] = parts[0].slice(0, -1);
	                  }
	                } else {
	                  // Make sure we have a period in alternative mode.
	                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
	                  // Zero pad until required precision.
	                  while (precision > effectivePrecision++) parts[0] += '0';
	                }
	                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');

	                // Capitalize 'E' if needed.
	                if (next == 69) argText = argText.toUpperCase();

	                // Add sign.
	                if (currArg >= 0) {
	                  if (flagAlwaysSigned) {
	                    argText = '+' + argText;
	                  } else if (flagPadSign) {
	                    argText = ' ' + argText;
	                  }
	                }
	              }

	              // Add padding.
	              while (argText.length < width) {
	                if (flagLeftAlign) {
	                  argText += ' ';
	                } else {
	                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
	                    argText = argText[0] + '0' + argText.slice(1);
	                  } else {
	                    argText = (flagZeroPad ? '0' : ' ') + argText;
	                  }
	                }
	              }

	              // Adjust case.
	              if (next < 97) argText = argText.toUpperCase();

	              // Insert the result into the buffer.
	              argText.split('').forEach(function(chr) {
	                ret.push(chr.charCodeAt(0));
	              });
	              break;
	            }
	            case 's': {
	              // String.
	              var arg = getNextArg('i8*');
	              var argLength = arg ? _strlen(arg) : '(null)'.length;
	              if (precisionSet) argLength = Math.min(argLength, precision);
	              if (!flagLeftAlign) {
	                while (argLength < width--) {
	                  ret.push(32);
	                }
	              }
	              if (arg) {
	                for (var i = 0; i < argLength; i++) {
	                  ret.push(HEAPU8[((arg++)>>0)]);
	                }
	              } else {
	                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
	              }
	              if (flagLeftAlign) {
	                while (argLength < width--) {
	                  ret.push(32);
	                }
	              }
	              break;
	            }
	            case 'c': {
	              // Character.
	              if (flagLeftAlign) ret.push(getNextArg('i8'));
	              while (--width > 0) {
	                ret.push(32);
	              }
	              if (!flagLeftAlign) ret.push(getNextArg('i8'));
	              break;
	            }
	            case 'n': {
	              // Write the length written so far to the next parameter.
	              var ptr = getNextArg('i32*');
	              HEAP32[((ptr)>>2)]=ret.length;
	              break;
	            }
	            case '%': {
	              // Literal percent sign.
	              ret.push(curr);
	              break;
	            }
	            default: {
	              // Unknown specifiers remain untouched.
	              for (var i = startTextIndex; i < textIndex + 2; i++) {
	                ret.push(HEAP8[((i)>>0)]);
	              }
	            }
	          }
	          textIndex += 2;
	          // TODO: Support a/A (hex float) and m (last error) specifiers.
	          // TODO: Support %1${specifier} for arg selection.
	        } else {
	          ret.push(curr);
	          textIndex += 1;
	        }
	      }
	      return ret;
	    }
	  Module["__formatString"] = __formatString;function _fprintf(stream, format, varargs) {
	      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
	      var result = __formatString(format, varargs);
	      var stack = Runtime.stackSave();
	      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
	      Runtime.stackRestore(stack);
	      return ret;
	    }
	  Module["_fprintf"] = _fprintf;function _printf(format, varargs) {
	      // int printf(const char *restrict format, ...);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
	      var stdout = HEAP32[((_stdout)>>2)];
	      return _fprintf(stdout, format, varargs);
	    }
	  Module["_printf"] = _printf;


	  function _open(path, oflag, varargs) {
	      // int open(const char *path, int oflag, ...);
	      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
	      var mode = HEAP32[((varargs)>>2)];
	      path = Pointer_stringify(path);
	      try {
	        var stream = FS.open(path, oflag, mode);
	        return stream.fd;
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_open"] = _open;function _fopen(filename, mode) {
	      // FILE *fopen(const char *restrict filename, const char *restrict mode);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
	      var flags;
	      mode = Pointer_stringify(mode);
	      if (mode[0] == 'r') {
	        if (mode.indexOf('+') != -1) {
	          flags = 2;
	        } else {
	          flags = 0;
	        }
	      } else if (mode[0] == 'w') {
	        if (mode.indexOf('+') != -1) {
	          flags = 2;
	        } else {
	          flags = 1;
	        }
	        flags |= 64;
	        flags |= 512;
	      } else if (mode[0] == 'a') {
	        if (mode.indexOf('+') != -1) {
	          flags = 2;
	        } else {
	          flags = 1;
	        }
	        flags |= 64;
	        flags |= 1024;
	      } else {
	        ___setErrNo(ERRNO_CODES.EINVAL);
	        return 0;
	      }
	      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
	      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
	    }
	  Module["_fopen"] = _fopen;

	  var _sqrtf=Math_sqrt;
	  Module["_sqrtf"] = _sqrtf;


	  var ___DEFAULT_POLLMASK=5;
	  Module["___DEFAULT_POLLMASK"] = ___DEFAULT_POLLMASK;function _select(nfds, readfds, writefds, exceptfds, timeout) {
	      // readfds are supported,
	      // writefds checks socket open status
	      // exceptfds not supported
	      // timeout is always 0 - fully async
	      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits
	      assert(!exceptfds, 'exceptfds not supported');

	      var total = 0;

	      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
	          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
	      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
	          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
	      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
	          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);

	      var dstReadLow = 0,
	          dstReadHigh = 0;
	      var dstWriteLow = 0,
	          dstWriteHigh = 0;
	      var dstExceptLow = 0,
	          dstExceptHigh = 0;

	      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
	                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
	                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
	      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
	                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
	                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);

	      function get(fd, low, high, val) {
	        return (fd < 32 ? (low & val) : (high & val));
	      }

	      for (var fd = 0; fd < nfds; fd++) {
	        var mask = 1 << (fd % 32);
	        if (!(get(fd, allLow, allHigh, mask))) {
	          continue;  // index isn't in the set
	        }

	        var stream = FS.getStream(fd);
	        if (!stream) {
	          ___setErrNo(ERRNO_CODES.EBADF);
	          return -1;
	        }

	        var flags = ___DEFAULT_POLLMASK;

	        if (stream.stream_ops.poll) {
	          flags = stream.stream_ops.poll(stream);
	        }

	        if ((flags & 1) && get(fd, srcReadLow, srcReadHigh, mask)) {
	          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
	          total++;
	        }
	        if ((flags & 4) && get(fd, srcWriteLow, srcWriteHigh, mask)) {
	          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
	          total++;
	        }
	        if ((flags & 2) && get(fd, srcExceptLow, srcExceptHigh, mask)) {
	          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
	          total++;
	        }
	      }

	      if (readfds) {
	        HEAP32[((readfds)>>2)]=dstReadLow;
	        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
	      }
	      if (writefds) {
	        HEAP32[((writefds)>>2)]=dstWriteLow;
	        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
	      }
	      if (exceptfds) {
	        HEAP32[((exceptfds)>>2)]=dstExceptLow;
	        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
	      }

	      return total;
	    }
	  Module["_select"] = _select;

	  function _access(path, amode) {
	      // int access(const char *path, int amode);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
	      path = Pointer_stringify(path);
	      if (amode & ~7) {
	        // need a valid mode
	        ___setErrNo(ERRNO_CODES.EINVAL);
	        return -1;
	      }
	      var node;
	      try {
	        var lookup = FS.lookupPath(path, { follow: true });
	        node = lookup.node;
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	      var perms = '';
	      if (amode & 4) perms += 'r';
	      if (amode & 2) perms += 'w';
	      if (amode & 1) perms += 'x';
	      if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
	        ___setErrNo(ERRNO_CODES.EACCES);
	        return -1;
	      }
	      return 0;
	    }
	  Module["_access"] = _access;

	  function _llvm_stackrestore(p) {
	      var self = _llvm_stacksave;
	      var ret = self.LLVM_SAVEDSTACKS[p];
	      self.LLVM_SAVEDSTACKS.splice(p, 1);
	      Runtime.stackRestore(ret);
	    }
	  Module["_llvm_stackrestore"] = _llvm_stackrestore;


	  function _fputs(s, stream) {
	      // int fputs(const char *restrict s, FILE *restrict stream);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
	      var fd = _fileno(stream);
	      return _write(fd, s, _strlen(s));
	    }
	  Module["_fputs"] = _fputs;

	  function _fputc(c, stream) {
	      // int fputc(int c, FILE *stream);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
	      var chr = unSign(c & 0xFF);
	      HEAP8[((_fputc.ret)>>0)]=chr;
	      var fd = _fileno(stream);
	      var ret = _write(fd, _fputc.ret, 1);
	      if (ret == -1) {
	        var streamObj = FS.getStreamFromPtr(stream);
	        if (streamObj) streamObj.error = true;
	        return -1;
	      } else {
	        return chr;
	      }
	    }
	  Module["_fputc"] = _fputc;function _puts(s) {
	      // int puts(const char *s);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
	      // NOTE: puts() always writes an extra newline.
	      var stdout = HEAP32[((_stdout)>>2)];
	      var ret = _fputs(s, stdout);
	      if (ret < 0) {
	        return ret;
	      } else {
	        var newlineRet = _fputc(10, stdout);
	        return (newlineRet < 0) ? -1 : ret + 1;
	      }
	    }
	  Module["_puts"] = _puts;



	  function _usleep(useconds) {
	      // int usleep(useconds_t useconds);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
	      // We're single-threaded, so use a busy loop. Super-ugly.
	      var msec = useconds / 1000;
	      if (ENVIRONMENT_IS_WEB && window['performance'] && window['performance']['now']) {
	        var start = window['performance']['now']();
	        while (window['performance']['now']() - start < msec) {
	          // Do nothing.
	        }
	      } else {
	        var start = Date.now();
	        while (Date.now() - start < msec) {
	          // Do nothing.
	        }
	      }
	      return 0;
	    }
	  Module["_usleep"] = _usleep;function _nanosleep(rqtp, rmtp) {
	      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
	      var seconds = HEAP32[((rqtp)>>2)];
	      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
	      if (rmtp !== 0) {
	        HEAP32[((rmtp)>>2)]=0;
	        HEAP32[(((rmtp)+(4))>>2)]=0;
	      }
	      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
	    }
	  Module["_nanosleep"] = _nanosleep;

	  function _ntohl() {
	  return _htonl.apply(null, arguments)
	  }
	  Module["_ntohl"] = _ntohl;



	  function _putc() {
	  return _fputc.apply(null, arguments)
	  }
	  Module["_putc"] = _putc;

	  function _time(ptr) {
	      var ret = (Date.now()/1000)|0;
	      if (ptr) {
	        HEAP32[((ptr)>>2)]=ret;
	      }
	      return ret;
	    }
	  Module["_time"] = _time;

	  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
	          Browser.mainLoop.shouldPause = true;
	        },resume:function () {
	          if (Browser.mainLoop.paused) {
	            Browser.mainLoop.paused = false;
	            Browser.mainLoop.scheduler();
	          }
	          Browser.mainLoop.shouldPause = false;
	        },updateStatus:function () {
	          if (Module['setStatus']) {
	            var message = Module['statusMessage'] || 'Please wait...';
	            var remaining = Browser.mainLoop.remainingBlockers;
	            var expected = Browser.mainLoop.expectedBlockers;
	            if (remaining) {
	              if (remaining < expected) {
	                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
	              } else {
	                Module['setStatus'](message);
	              }
	            } else {
	              Module['setStatus']('');
	            }
	          }
	        },runIter:function (func) {
	          if (ABORT) return;
	          if (Module['preMainLoop']) {
	            var preRet = Module['preMainLoop']();
	            if (preRet === false) {
	              return; // |return false| skips a frame
	            }
	          }
	          try {
	            func();
	          } catch (e) {
	            if (e instanceof ExitStatus) {
	              return;
	            } else {
	              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
	              throw e;
	            }
	          }
	          if (Module['postMainLoop']) Module['postMainLoop']();
	        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
	        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers

	        if (Browser.initted) return;
	        Browser.initted = true;

	        try {
	          new Blob();
	          Browser.hasBlobConstructor = true;
	        } catch(e) {
	          Browser.hasBlobConstructor = false;
	          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
	        }
	        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
	        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
	        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
	          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
	          Module.noImageDecoding = true;
	        }

	        // Support for plugins that can process preloaded files. You can add more of these to
	        // your app by creating and appending to Module.preloadPlugins.
	        //
	        // Each plugin is asked if it can handle a file based on the file's name. If it can,
	        // it is given the file's raw data. When it is done, it calls a callback with the file's
	        // (possibly modified) data. For example, a plugin might decompress a file, or it
	        // might create some side data structure for use later (like an Image element, etc.).

	        var imagePlugin = {};
	        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
	          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
	        };
	        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
	          var b = null;
	          if (Browser.hasBlobConstructor) {
	            try {
	              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
	              if (b.size !== byteArray.length) { // Safari bug #118630
	                // Safari's Blob can only take an ArrayBuffer
	                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
	              }
	            } catch(e) {
	              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
	            }
	          }
	          if (!b) {
	            var bb = new Browser.BlobBuilder();
	            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
	            b = bb.getBlob();
	          }
	          var url = Browser.URLObject.createObjectURL(b);
	          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
	          var img = new Image();
	          img.onload = function img_onload() {
	            assert(img.complete, 'Image ' + name + ' could not be decoded');
	            var canvas = document.createElement('canvas');
	            canvas.width = img.width;
	            canvas.height = img.height;
	            var ctx = canvas.getContext('2d');
	            ctx.drawImage(img, 0, 0);
	            Module["preloadedImages"][name] = canvas;
	            Browser.URLObject.revokeObjectURL(url);
	            if (onload) onload(byteArray);
	          };
	          img.onerror = function img_onerror(event) {
	            console.log('Image ' + url + ' could not be decoded');
	            if (onerror) onerror();
	          };
	          img.src = url;
	        };
	        Module['preloadPlugins'].push(imagePlugin);

	        var audioPlugin = {};
	        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
	          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
	        };
	        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
	          var done = false;
	          function finish(audio) {
	            if (done) return;
	            done = true;
	            Module["preloadedAudios"][name] = audio;
	            if (onload) onload(byteArray);
	          }
	          function fail() {
	            if (done) return;
	            done = true;
	            Module["preloadedAudios"][name] = new Audio(); // empty shim
	            if (onerror) onerror();
	          }
	          if (Browser.hasBlobConstructor) {
	            try {
	              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
	            } catch(e) {
	              return fail();
	            }
	            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
	            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
	            var audio = new Audio();
	            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
	            audio.onerror = function audio_onerror(event) {
	              if (done) return;
	              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
	              function encode64(data) {
	                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	                var PAD = '=';
	                var ret = '';
	                var leftchar = 0;
	                var leftbits = 0;
	                for (var i = 0; i < data.length; i++) {
	                  leftchar = (leftchar << 8) | data[i];
	                  leftbits += 8;
	                  while (leftbits >= 6) {
	                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
	                    leftbits -= 6;
	                    ret += BASE[curr];
	                  }
	                }
	                if (leftbits == 2) {
	                  ret += BASE[(leftchar&3) << 4];
	                  ret += PAD + PAD;
	                } else if (leftbits == 4) {
	                  ret += BASE[(leftchar&0xf) << 2];
	                  ret += PAD;
	                }
	                return ret;
	              }
	              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
	              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
	            };
	            audio.src = url;
	            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
	            Browser.safeSetTimeout(function() {
	              finish(audio); // try to use it even though it is not necessarily ready to play
	            }, 10000);
	          } else {
	            return fail();
	          }
	        };
	        Module['preloadPlugins'].push(audioPlugin);

	        // Canvas event setup

	        var canvas = Module['canvas'];
	        function pointerLockChange() {
	          Browser.pointerLock = document['pointerLockElement'] === canvas ||
	                                document['mozPointerLockElement'] === canvas ||
	                                document['webkitPointerLockElement'] === canvas ||
	                                document['msPointerLockElement'] === canvas;
	        }
	        if (canvas) {
	          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
	          // Module['forcedAspectRatio'] = 4 / 3;

	          canvas.requestPointerLock = canvas['requestPointerLock'] ||
	                                      canvas['mozRequestPointerLock'] ||
	                                      canvas['webkitRequestPointerLock'] ||
	                                      canvas['msRequestPointerLock'] ||
	                                      function(){};
	          canvas.exitPointerLock = document['exitPointerLock'] ||
	                                   document['mozExitPointerLock'] ||
	                                   document['webkitExitPointerLock'] ||
	                                   document['msExitPointerLock'] ||
	                                   function(){}; // no-op if function does not exist
	          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);


	          document.addEventListener('pointerlockchange', pointerLockChange, false);
	          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
	          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
	          document.addEventListener('mspointerlockchange', pointerLockChange, false);

	          if (Module['elementPointerLock']) {
	            canvas.addEventListener("click", function(ev) {
	              if (!Browser.pointerLock && canvas.requestPointerLock) {
	                canvas.requestPointerLock();
	                ev.preventDefault();
	              }
	            }, false);
	          }
	        }
	      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
	        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.

	        var ctx;
	        var contextHandle;
	        if (useWebGL) {
	          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
	          var contextAttributes = {
	            antialias: false,
	            alpha: false
	          };

	          if (webGLContextAttributes) {
	            for (var attribute in webGLContextAttributes) {
	              contextAttributes[attribute] = webGLContextAttributes[attribute];
	            }
	          }

	          contextHandle = GL.createContext(canvas, contextAttributes);
	          if (contextHandle) {
	            ctx = GL.getContext(contextHandle).GLctx;
	          }
	          // Set the background of the WebGL canvas to black
	          canvas.style.backgroundColor = "black";
	        } else {
	          ctx = canvas.getContext('2d');
	        }

	        if (!ctx) return null;

	        if (setInModule) {
	          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');

	          Module.ctx = ctx;
	          if (useWebGL) GL.makeContextCurrent(contextHandle);
	          Module.useWebGL = useWebGL;
	          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
	          Browser.init();
	        }
	        return ctx;
	      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
	        Browser.lockPointer = lockPointer;
	        Browser.resizeCanvas = resizeCanvas;
	        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
	        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;

	        var canvas = Module['canvas'];
	        function fullScreenChange() {
	          Browser.isFullScreen = false;
	          var canvasContainer = canvas.parentNode;
	          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
	               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
	               document['fullScreenElement'] || document['fullscreenElement'] ||
	               document['msFullScreenElement'] || document['msFullscreenElement'] ||
	               document['webkitCurrentFullScreenElement']) === canvasContainer) {
	            canvas.cancelFullScreen = document['cancelFullScreen'] ||
	                                      document['mozCancelFullScreen'] ||
	                                      document['webkitCancelFullScreen'] ||
	                                      document['msExitFullscreen'] ||
	                                      document['exitFullscreen'] ||
	                                      function() {};
	            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
	            if (Browser.lockPointer) canvas.requestPointerLock();
	            Browser.isFullScreen = true;
	            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
	          } else {

	            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
	            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
	            canvasContainer.parentNode.removeChild(canvasContainer);

	            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
	          }
	          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
	          Browser.updateCanvasDimensions(canvas);
	        }

	        if (!Browser.fullScreenHandlersInstalled) {
	          Browser.fullScreenHandlersInstalled = true;
	          document.addEventListener('fullscreenchange', fullScreenChange, false);
	          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
	          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
	          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
	        }

	        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
	        var canvasContainer = document.createElement("div");
	        canvas.parentNode.insertBefore(canvasContainer, canvas);
	        canvasContainer.appendChild(canvas);

	        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
	        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
	                                            canvasContainer['mozRequestFullScreen'] ||
	                                            canvasContainer['msRequestFullscreen'] ||
	                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
	        canvasContainer.requestFullScreen();
	      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
	        // try to keep 60fps between calls to here
	        var now = Date.now();
	        if (Browser.nextRAF === 0) {
	          Browser.nextRAF = now + 1000/60;
	        } else {
	          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
	            Browser.nextRAF += 1000/60;
	          }
	        }
	        var delay = Math.max(Browser.nextRAF - now, 0);
	        setTimeout(func, delay);
	      },requestAnimationFrame:function requestAnimationFrame(func) {
	        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
	          Browser.fakeRequestAnimationFrame(func);
	        } else {
	          if (!window.requestAnimationFrame) {
	            window.requestAnimationFrame = window['requestAnimationFrame'] ||
	                                           window['mozRequestAnimationFrame'] ||
	                                           window['webkitRequestAnimationFrame'] ||
	                                           window['msRequestAnimationFrame'] ||
	                                           window['oRequestAnimationFrame'] ||
	                                           Browser.fakeRequestAnimationFrame;
	          }
	          window.requestAnimationFrame(func);
	        }
	      },safeCallback:function (func) {
	        return function() {
	          if (!ABORT) return func.apply(null, arguments);
	        };
	      },safeRequestAnimationFrame:function (func) {
	        return Browser.requestAnimationFrame(function() {
	          if (!ABORT) func();
	        });
	      },safeSetTimeout:function (func, timeout) {
	        Module['noExitRuntime'] = true;
	        return setTimeout(function() {
	          if (!ABORT) func();
	        }, timeout);
	      },safeSetInterval:function (func, timeout) {
	        Module['noExitRuntime'] = true;
	        return setInterval(function() {
	          if (!ABORT) func();
	        }, timeout);
	      },getMimetype:function (name) {
	        return {
	          'jpg': 'image/jpeg',
	          'jpeg': 'image/jpeg',
	          'png': 'image/png',
	          'bmp': 'image/bmp',
	          'ogg': 'audio/ogg',
	          'wav': 'audio/wav',
	          'mp3': 'audio/mpeg'
	        }[name.substr(name.lastIndexOf('.')+1)];
	      },getUserMedia:function (func) {
	        if(!window.getUserMedia) {
	          window.getUserMedia = navigator['getUserMedia'] ||
	                                navigator['mozGetUserMedia'];
	        }
	        window.getUserMedia(func);
	      },getMovementX:function (event) {
	        return event['movementX'] ||
	               event['mozMovementX'] ||
	               event['webkitMovementX'] ||
	               0;
	      },getMovementY:function (event) {
	        return event['movementY'] ||
	               event['mozMovementY'] ||
	               event['webkitMovementY'] ||
	               0;
	      },getMouseWheelDelta:function (event) {
	        var delta = 0;
	        switch (event.type) {
	          case 'DOMMouseScroll':
	            delta = event.detail;
	            break;
	          case 'mousewheel':
	            delta = event.wheelDelta;
	            break;
	          case 'wheel':
	            delta = event['deltaY'];
	            break;
	          default:
	            throw 'unrecognized mouse wheel event: ' + event.type;
	        }
	        return delta;
	      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
	        if (Browser.pointerLock) {
	          // When the pointer is locked, calculate the coordinates
	          // based on the movement of the mouse.
	          // Workaround for Firefox bug 764498
	          if (event.type != 'mousemove' &&
	              ('mozMovementX' in event)) {
	            Browser.mouseMovementX = Browser.mouseMovementY = 0;
	          } else {
	            Browser.mouseMovementX = Browser.getMovementX(event);
	            Browser.mouseMovementY = Browser.getMovementY(event);
	          }

	          // check if SDL is available
	          if (typeof SDL != "undefined") {
	          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
	          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
	          } else {
	          	// just add the mouse delta to the current absolut mouse position
	          	// FIXME: ideally this should be clamped against the canvas size and zero
	          	Browser.mouseX += Browser.mouseMovementX;
	          	Browser.mouseY += Browser.mouseMovementY;
	          }
	        } else {
	          // Otherwise, calculate the movement based on the changes
	          // in the coordinates.
	          var rect = Module["canvas"].getBoundingClientRect();
	          var cw = Module["canvas"].width;
	          var ch = Module["canvas"].height;

	          // Neither .scrollX or .pageXOffset are defined in a spec, but
	          // we prefer .scrollX because it is currently in a spec draft.
	          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
	          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
	          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
	          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
	          // and we have no viable fallback.
	          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');

	          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
	            var touch = event.touch;
	            if (touch === undefined) {
	              return; // the "touch" property is only defined in SDL

	            }
	            var adjustedX = touch.pageX - (scrollX + rect.left);
	            var adjustedY = touch.pageY - (scrollY + rect.top);

	            adjustedX = adjustedX * (cw / rect.width);
	            adjustedY = adjustedY * (ch / rect.height);

	            var coords = { x: adjustedX, y: adjustedY };

	            if (event.type === 'touchstart') {
	              Browser.lastTouches[touch.identifier] = coords;
	              Browser.touches[touch.identifier] = coords;
	            } else if (event.type === 'touchend' || event.type === 'touchmove') {
	              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
	              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
	            }
	            return;
	          }

	          var x = event.pageX - (scrollX + rect.left);
	          var y = event.pageY - (scrollY + rect.top);

	          // the canvas might be CSS-scaled compared to its backbuffer;
	          // SDL-using content will want mouse coordinates in terms
	          // of backbuffer units.
	          x = x * (cw / rect.width);
	          y = y * (ch / rect.height);

	          Browser.mouseMovementX = x - Browser.mouseX;
	          Browser.mouseMovementY = y - Browser.mouseY;
	          Browser.mouseX = x;
	          Browser.mouseY = y;
	        }
	      },xhrLoad:function (url, onload, onerror) {
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', url, true);
	        xhr.responseType = 'arraybuffer';
	        xhr.onload = function xhr_onload() {
	          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
	            onload(xhr.response);
	          } else {
	            onerror();
	          }
	        };
	        xhr.onerror = onerror;
	        xhr.send(null);
	      },asyncLoad:function (url, onload, onerror, noRunDep) {
	        Browser.xhrLoad(url, function(arrayBuffer) {
	          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
	          onload(new Uint8Array(arrayBuffer));
	          if (!noRunDep) removeRunDependency('al ' + url);
	        }, function(event) {
	          if (onerror) {
	            onerror();
	          } else {
	            throw 'Loading data file "' + url + '" failed.';
	          }
	        });
	        if (!noRunDep) addRunDependency('al ' + url);
	      },resizeListeners:[],updateResizeListeners:function () {
	        var canvas = Module['canvas'];
	        Browser.resizeListeners.forEach(function(listener) {
	          listener(canvas.width, canvas.height);
	        });
	      },setCanvasSize:function (width, height, noUpdates) {
	        var canvas = Module['canvas'];
	        Browser.updateCanvasDimensions(canvas, width, height);
	        if (!noUpdates) Browser.updateResizeListeners();
	      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
	        // check if SDL is available
	        if (typeof SDL != "undefined") {
	        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
	        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
	        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
	        }
	        Browser.updateResizeListeners();
	      },setWindowedCanvasSize:function () {
	        // check if SDL is available
	        if (typeof SDL != "undefined") {
	        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
	        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
	        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
	        }
	        Browser.updateResizeListeners();
	      },updateCanvasDimensions:function (canvas, wNative, hNative) {
	        if (wNative && hNative) {
	          canvas.widthNative = wNative;
	          canvas.heightNative = hNative;
	        } else {
	          wNative = canvas.widthNative;
	          hNative = canvas.heightNative;
	        }
	        var w = wNative;
	        var h = hNative;
	        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
	          if (w/h < Module['forcedAspectRatio']) {
	            w = Math.round(h * Module['forcedAspectRatio']);
	          } else {
	            h = Math.round(w / Module['forcedAspectRatio']);
	          }
	        }
	        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
	             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
	             document['fullScreenElement'] || document['fullscreenElement'] ||
	             document['msFullScreenElement'] || document['msFullscreenElement'] ||
	             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
	           var factor = Math.min(screen.width / w, screen.height / h);
	           w = Math.round(w * factor);
	           h = Math.round(h * factor);
	        }
	        if (Browser.resizeCanvas) {
	          if (canvas.width  != w) canvas.width  = w;
	          if (canvas.height != h) canvas.height = h;
	          if (typeof canvas.style != 'undefined') {
	            canvas.style.removeProperty( "width");
	            canvas.style.removeProperty("height");
	          }
	        } else {
	          if (canvas.width  != wNative) canvas.width  = wNative;
	          if (canvas.height != hNative) canvas.height = hNative;
	          if (typeof canvas.style != 'undefined') {
	            if (w != wNative || h != hNative) {
	              canvas.style.setProperty( "width", w + "px", "important");
	              canvas.style.setProperty("height", h + "px", "important");
	            } else {
	              canvas.style.removeProperty( "width");
	              canvas.style.removeProperty("height");
	            }
	          }
	        }
	      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
	        var handle = Browser.nextWgetRequestHandle;
	        Browser.nextWgetRequestHandle++;
	        return handle;
	      }};
	  Module["Browser"] = Browser;

	  function _getuid() { return 0; }
	  Module["_getuid"] = _getuid;

	  function _listen(fd, backlog) {
	      var sock = SOCKFS.getSocket(fd);
	      if (!sock) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }
	      try {
	        sock.sock_ops.listen(sock, backlog);
	        return 0;
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_listen"] = _listen;


	  Module["_bitshift64Lshr"] = _bitshift64Lshr;



	  function _recv(fd, buf, len, flags) {
	      var sock = SOCKFS.getSocket(fd);
	      if (!sock) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }
	      // TODO honor flags
	      return _read(fd, buf, len);
	    }
	  Module["_recv"] = _recv;

	  function _pread(fildes, buf, nbyte, offset) {
	      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
	      var stream = FS.getStream(fildes);
	      if (!stream) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }
	      try {
	        var slab = HEAP8;
	        return FS.read(stream, slab, buf, nbyte, offset);
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_pread"] = _pread;function _read(fildes, buf, nbyte) {
	      // ssize_t read(int fildes, void *buf, size_t nbyte);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
	      var stream = FS.getStream(fildes);
	      if (!stream) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }


	      try {
	        var slab = HEAP8;
	        return FS.read(stream, slab, buf, nbyte);
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_read"] = _read;function _fread(ptr, size, nitems, stream) {
	      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
	      var bytesToRead = nitems * size;
	      if (bytesToRead == 0) {
	        return 0;
	      }
	      var bytesRead = 0;
	      var streamObj = FS.getStreamFromPtr(stream);
	      if (!streamObj) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return 0;
	      }
	      while (streamObj.ungotten.length && bytesToRead > 0) {
	        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
	        bytesToRead--;
	        bytesRead++;
	      }
	      var err = _read(streamObj.fd, ptr, bytesToRead);
	      if (err == -1) {
	        if (streamObj) streamObj.error = true;
	        return 0;
	      }
	      bytesRead += err;
	      if (bytesRead < bytesToRead) streamObj.eof = true;
	      return (bytesRead / size)|0;
	    }
	  Module["_fread"] = _fread;

	  var _BDtoIHigh=true;
	  Module["_BDtoIHigh"] = _BDtoIHigh;





	  var _environ=allocate(1, "i32*", ALLOC_STATIC);
	  Module["_environ"] = _environ;var ___environ=_environ;
	  Module["___environ"] = ___environ;function ___buildEnvironment(env) {
	      // WARNING: Arbitrary limit!
	      var MAX_ENV_VALUES = 64;
	      var TOTAL_ENV_SIZE = 1024;

	      // Statically allocate memory for the environment.
	      var poolPtr;
	      var envPtr;
	      if (!___buildEnvironment.called) {
	        ___buildEnvironment.called = true;
	        // Set default values. Use string keys for Closure Compiler compatibility.
	        ENV['USER'] = 'web_user';
	        ENV['PATH'] = '/';
	        ENV['PWD'] = '/';
	        ENV['HOME'] = '/home/web_user';
	        ENV['LANG'] = 'C';
	        ENV['_'] = Module['thisProgram'];
	        // Allocate memory.
	        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
	        envPtr = allocate(MAX_ENV_VALUES * 4,
	                          'i8*', ALLOC_STATIC);
	        HEAP32[((envPtr)>>2)]=poolPtr;
	        HEAP32[((_environ)>>2)]=envPtr;
	      } else {
	        envPtr = HEAP32[((_environ)>>2)];
	        poolPtr = HEAP32[((envPtr)>>2)];
	      }

	      // Collect key=value lines.
	      var strings = [];
	      var totalSize = 0;
	      for (var key in env) {
	        if (typeof env[key] === 'string') {
	          var line = key + '=' + env[key];
	          strings.push(line);
	          totalSize += line.length;
	        }
	      }
	      if (totalSize > TOTAL_ENV_SIZE) {
	        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
	      }

	      // Make new.
	      var ptrSize = 4;
	      for (var i = 0; i < strings.length; i++) {
	        var line = strings[i];
	        writeAsciiToMemory(line, poolPtr);
	        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
	        poolPtr += line.length + 1;
	      }
	      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
	    }
	  Module["___buildEnvironment"] = ___buildEnvironment;var ENV={};
	  Module["ENV"] = ENV;function _getenv(name) {
	      // char *getenv(const char *name);
	      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
	      if (name === 0) return 0;
	      name = Pointer_stringify(name);
	      if (!ENV.hasOwnProperty(name)) return 0;

	      if (_getenv.ret) _free(_getenv.ret);
	      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
	      return _getenv.ret;
	    }
	  Module["_getenv"] = _getenv;

	  function _gettimeofday(ptr) {
	      var now = Date.now();
	      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
	      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
	      return 0;
	    }
	  Module["_gettimeofday"] = _gettimeofday;

	  function _emscripten_asm_const_int(code) {
	      var args = Array.prototype.slice.call(arguments, 1);
	      return Runtime.getAsmConst(code, args.length).apply(null, args) | 0;
	    }
	  Module["_emscripten_asm_const_int"] = _emscripten_asm_const_int;

	  function _vfprintf(s, f, va_arg) {
	      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
	    }
	  Module["_vfprintf"] = _vfprintf;

	  function _xmmsv_c2c_message_get_payload() {
	  Module['printErr']('missing function: xmmsv_c2c_message_get_payload'); abort(-1);
	  }
	  Module["_xmmsv_c2c_message_get_payload"] = _xmmsv_c2c_message_get_payload;


	  function _emscripten_memcpy_big(dest, src, num) {
	      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
	      return dest;
	    }
	  Module["_emscripten_memcpy_big"] = _emscripten_memcpy_big;
	  Module["_memcpy"] = _memcpy;



	  function _strerror_r(errnum, strerrbuf, buflen) {
	      if (errnum in ERRNO_MESSAGES) {
	        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
	          return ___setErrNo(ERRNO_CODES.ERANGE);
	        } else {
	          var msg = ERRNO_MESSAGES[errnum];
	          writeAsciiToMemory(msg, strerrbuf);
	          return 0;
	        }
	      } else {
	        return ___setErrNo(ERRNO_CODES.EINVAL);
	      }
	    }
	  Module["_strerror_r"] = _strerror_r;function _strerror(errnum) {
	      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
	      _strerror_r(errnum, _strerror.buffer, 256);
	      return _strerror.buffer;
	    }
	  Module["_strerror"] = _strerror;

	  function ___errno_location() {
	      return ___errno_state;
	    }
	  Module["___errno_location"] = ___errno_location;function _perror(s) {
	      // void perror(const char *s);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
	      var stdout = HEAP32[((_stdout)>>2)];
	      if (s) {
	        _fputs(s, stdout);
	        _fputc(58, stdout);
	        _fputc(32, stdout);
	      }
	      var errnum = HEAP32[((___errno_location())>>2)];
	      _puts(_strerror(errnum));
	    }
	  Module["_perror"] = _perror;

	  var _llvm_pow_f64=Math_pow;
	  Module["_llvm_pow_f64"] = _llvm_pow_f64;

	  function _sbrk(bytes) {
	      // Implement a Linux-like 'memory area' for our 'process'.
	      // Changes the size of the memory area by |bytes|; returns the
	      // address of the previous top ('break') of the memory area
	      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
	      var self = _sbrk;
	      if (!self.called) {
	        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
	        self.called = true;
	        assert(Runtime.dynamicAlloc);
	        self.alloc = Runtime.dynamicAlloc;
	        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
	      }
	      var ret = DYNAMICTOP;
	      if (bytes != 0) self.alloc(bytes);
	      return ret;  // Previous break location.
	    }
	  Module["_sbrk"] = _sbrk;


	  Module["_memmove"] = _memmove;


	  var _BItoD=true;
	  Module["_BItoD"] = _BItoD;


	  function _unlink(path) {
	      // int unlink(const char *path);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
	      path = Pointer_stringify(path);
	      try {
	        FS.unlink(path);
	        return 0;
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_unlink"] = _unlink;

	  function _rmdir(path) {
	      // int rmdir(const char *path);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
	      path = Pointer_stringify(path);
	      try {
	        FS.rmdir(path);
	        return 0;
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_rmdir"] = _rmdir;function _remove(path) {
	      // int remove(const char *path);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
	      var ret = _unlink(path);
	      if (ret == -1) ret = _rmdir(path);
	      return ret;
	    }
	  Module["_remove"] = _remove;

	  function _opendir(dirname) {
	      // DIR *opendir(const char *dirname);
	      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
	      // NOTE: Calculating absolute path redundantly since we need to associate it
	      //       with the opened stream.
	      var path = Pointer_stringify(dirname);
	      if (!path) {
	        ___setErrNo(ERRNO_CODES.ENOENT);
	        return 0;
	      }
	      var node;
	      try {
	        var lookup = FS.lookupPath(path, { follow: true });
	        node = lookup.node;
	      } catch (e) {
	        FS.handleFSError(e);
	        return 0;
	      }
	      if (!FS.isDir(node.mode)) {
	        ___setErrNo(ERRNO_CODES.ENOTDIR);
	        return 0;
	      }
	      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
	      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
	    }
	  Module["_opendir"] = _opendir;

	  function _abort() {
	      Module['abort']();
	    }
	  Module["_abort"] = _abort;

	  function _modf(x, intpart) {
	      HEAPF64[((intpart)>>3)]=(x < 0) ? Math.ceil(x) : Math.floor(x);
	      return x - HEAPF64[((intpart)>>3)];
	    }
	  Module["_modf"] = _modf;

	  function _getpwuid(uid) {
	      return 0; // NULL
	    }
	  Module["_getpwuid"] = _getpwuid;

	  function _xmmsv_c2c_message_format() {
	  Module['printErr']('missing function: xmmsv_c2c_message_format'); abort(-1);
	  }
	  Module["_xmmsv_c2c_message_format"] = _xmmsv_c2c_message_format;

	  var _cosf=Math_cos;
	  Module["_cosf"] = _cosf;


	  function _sysconf(name) {
	      // long sysconf(int name);
	      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
	      switch(name) {
	        case 30: return PAGE_SIZE;
	        case 132:
	        case 133:
	        case 12:
	        case 137:
	        case 138:
	        case 15:
	        case 235:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 149:
	        case 13:
	        case 10:
	        case 236:
	        case 153:
	        case 9:
	        case 21:
	        case 22:
	        case 159:
	        case 154:
	        case 14:
	        case 77:
	        case 78:
	        case 139:
	        case 80:
	        case 81:
	        case 79:
	        case 82:
	        case 68:
	        case 67:
	        case 164:
	        case 11:
	        case 29:
	        case 47:
	        case 48:
	        case 95:
	        case 52:
	        case 51:
	        case 46:
	          return 200809;
	        case 27:
	        case 246:
	        case 127:
	        case 128:
	        case 23:
	        case 24:
	        case 160:
	        case 161:
	        case 181:
	        case 182:
	        case 242:
	        case 183:
	        case 184:
	        case 243:
	        case 244:
	        case 245:
	        case 165:
	        case 178:
	        case 179:
	        case 49:
	        case 50:
	        case 168:
	        case 169:
	        case 175:
	        case 170:
	        case 171:
	        case 172:
	        case 97:
	        case 76:
	        case 32:
	        case 173:
	        case 35:
	          return -1;
	        case 176:
	        case 177:
	        case 7:
	        case 155:
	        case 8:
	        case 157:
	        case 125:
	        case 126:
	        case 92:
	        case 93:
	        case 129:
	        case 130:
	        case 131:
	        case 94:
	        case 91:
	          return 1;
	        case 74:
	        case 60:
	        case 69:
	        case 70:
	        case 4:
	          return 1024;
	        case 31:
	        case 42:
	        case 72:
	          return 32;
	        case 87:
	        case 26:
	        case 33:
	          return 2147483647;
	        case 34:
	        case 1:
	          return 47839;
	        case 38:
	        case 36:
	          return 99;
	        case 43:
	        case 37:
	          return 2048;
	        case 0: return 2097152;
	        case 3: return 65536;
	        case 28: return 32768;
	        case 44: return 32767;
	        case 75: return 16384;
	        case 39: return 1000;
	        case 89: return 700;
	        case 71: return 256;
	        case 40: return 255;
	        case 2: return 100;
	        case 180: return 64;
	        case 25: return 20;
	        case 5: return 16;
	        case 6: return 6;
	        case 73: return 4;
	        case 84: {
	          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
	          return 1;
	        }
	      }
	      ___setErrNo(ERRNO_CODES.EINVAL);
	      return -1;
	    }
	  Module["_sysconf"] = _sysconf;

	  var _SItoF=true;
	  Module["_SItoF"] = _SItoF;


	  Module["_memset"] = _memset;

	  var _BDtoILow=true;
	  Module["_BDtoILow"] = _BDtoILow;

	  function _accept(fd, addr, addrlen) {
	      var sock = SOCKFS.getSocket(fd);
	      if (!sock) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }
	      try {
	        var newsock = sock.sock_ops.accept(sock);
	        if (addr) {
	          var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
	          assert(!res.errno);
	        }
	        return newsock.stream.fd;
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_accept"] = _accept;


	  var _logf=Math_log;
	  Module["_logf"] = _logf;


	  Module["_bitshift64Shl"] = _bitshift64Shl;

	  function _freeaddrinfo(ai) {
	      var sa = HEAP32[(((ai)+(20))>>2)];
	      _free(sa);
	      _free(ai);
	    }
	  Module["_freeaddrinfo"] = _freeaddrinfo;



	  function __read_sockaddr(sa, salen) {
	      // family / port offsets are common to both sockaddr_in and sockaddr_in6
	      var family = HEAP16[((sa)>>1)];
	      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
	      var addr;

	      switch (family) {
	        case 2:
	          if (salen !== 16) {
	            return { errno: ERRNO_CODES.EINVAL };
	          }
	          addr = HEAP32[(((sa)+(4))>>2)];
	          addr = __inet_ntop4_raw(addr);
	          break;
	        case 10:
	          if (salen !== 28) {
	            return { errno: ERRNO_CODES.EINVAL };
	          }
	          addr = [
	            HEAP32[(((sa)+(8))>>2)],
	            HEAP32[(((sa)+(12))>>2)],
	            HEAP32[(((sa)+(16))>>2)],
	            HEAP32[(((sa)+(20))>>2)]
	          ];
	          addr = __inet_ntop6_raw(addr);
	          break;
	        default:
	          return { errno: ERRNO_CODES.EAFNOSUPPORT };
	      }

	      return { family: family, addr: addr, port: port };
	    }
	  Module["__read_sockaddr"] = __read_sockaddr;function _connect(fd, addrp, addrlen) {
	      var sock = SOCKFS.getSocket(fd);
	      if (!sock) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }

	      var info = __read_sockaddr(addrp, addrlen);
	      if (info.errno) {
	        ___setErrNo(info.errno);
	        return -1;
	      }
	      var port = info.port;
	      var addr = DNS.lookup_addr(info.addr) || info.addr;

	      try {
	        sock.sock_ops.connect(sock, addr, port);
	        return 0;
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_connect"] = _connect;

	  function ___assert_fail(condition, filename, line, func) {
	      ABORT = true;
	      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
	    }
	  Module["___assert_fail"] = ___assert_fail;



	  function ___lock() {
	  Module['printErr']('missing function: __lock'); abort(-1);
	  }
	  Module["___lock"] = ___lock;

	  function ___unlock() {
	  Module['printErr']('missing function: __unlock'); abort(-1);
	  }
	  Module["___unlock"] = ___unlock;


	  Module["_i64Add"] = _i64Add;

	  var _fabs=Math_abs;
	  Module["_fabs"] = _fabs;

	  var _floor=Math_floor;
	  Module["_floor"] = _floor;


	  function _copysign(a, b) {
	      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
	    }
	  Module["_copysign"] = _copysign;function _copysignl() {
	  return _copysign.apply(null, arguments)
	  }
	  Module["_copysignl"] = _copysignl;

	  var _sqrt=Math_sqrt;
	  Module["_sqrt"] = _sqrt;



	  function __exit(status) {
	      // void _exit(int status);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
	      Module['exit'](status);
	    }
	  Module["__exit"] = __exit;function _exit(status) {
	      __exit(status);
	    }
	  Module["_exit"] = _exit;


	  Module["_strncpy"] = _strncpy;

	  var _sin=Math_sin;
	  Module["_sin"] = _sin;


	  function _fmod(x, y) {
	      return x % y;
	    }
	  Module["_fmod"] = _fmod;function _fmodl() {
	  return _fmod.apply(null, arguments)
	  }
	  Module["_fmodl"] = _fmodl;

	  function _fcntl(fildes, cmd, varargs, dup2) {
	      // int fcntl(int fildes, int cmd, ...);
	      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
	      var stream = FS.getStream(fildes);
	      if (!stream) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }
	      switch (cmd) {
	        case 0:
	          var arg = HEAP32[((varargs)>>2)];
	          if (arg < 0) {
	            ___setErrNo(ERRNO_CODES.EINVAL);
	            return -1;
	          }
	          var newStream;
	          try {
	            newStream = FS.open(stream.path, stream.flags, 0, arg);
	          } catch (e) {
	            FS.handleFSError(e);
	            return -1;
	          }
	          return newStream.fd;
	        case 1:
	        case 2:
	          return 0;  // FD_CLOEXEC makes no sense for a single process.
	        case 3:
	          return stream.flags;
	        case 4:
	          var arg = HEAP32[((varargs)>>2)];
	          stream.flags |= arg;
	          return 0;
	        case 12:
	        case 12:
	          var arg = HEAP32[((varargs)>>2)];
	          var offset = 0;
	          // We're always unlocked.
	          HEAP16[(((arg)+(offset))>>1)]=2;
	          return 0;
	        case 13:
	        case 14:
	        case 13:
	        case 14:
	          // Pretend that the locking is successful.
	          return 0;
	        case 8:
	        case 9:
	          // These are for sockets. We don't have them fully implemented yet.
	          ___setErrNo(ERRNO_CODES.EINVAL);
	          return -1;
	        default:
	          ___setErrNo(ERRNO_CODES.EINVAL);
	          return -1;
	      }
	      // Should never be reached. Only to silence strict warnings.
	      return -1;
	    }
	  Module["_fcntl"] = _fcntl;

	  function _stat(path, buf, dontResolveLastLink) {
	      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
	      // int stat(const char *path, struct stat *buf);
	      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
	      //       used in client code.
	      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
	      try {
	        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
	        HEAP32[((buf)>>2)]=stat.dev;
	        HEAP32[(((buf)+(4))>>2)]=0;
	        HEAP32[(((buf)+(8))>>2)]=stat.ino;
	        HEAP32[(((buf)+(12))>>2)]=stat.mode;
	        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
	        HEAP32[(((buf)+(20))>>2)]=stat.uid;
	        HEAP32[(((buf)+(24))>>2)]=stat.gid;
	        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
	        HEAP32[(((buf)+(32))>>2)]=0;
	        HEAP32[(((buf)+(36))>>2)]=stat.size;
	        HEAP32[(((buf)+(40))>>2)]=4096;
	        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
	        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
	        HEAP32[(((buf)+(52))>>2)]=0;
	        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
	        HEAP32[(((buf)+(60))>>2)]=0;
	        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
	        HEAP32[(((buf)+(68))>>2)]=0;
	        HEAP32[(((buf)+(72))>>2)]=stat.ino;
	        return 0;
	      } catch (e) {
	        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
	          // an error occurred while trying to look up the path; we should just report ENOTDIR
	          e.setErrno(ERRNO_CODES.ENOTDIR);
	        }
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_stat"] = _stat;


	  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
	      Module['noExitRuntime'] = true;

	      assert(!Browser.mainLoop.scheduler, 'there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one, if you want to');

	      Browser.mainLoop.shouldPause = Browser.mainLoop.paused = false; // if we were cancelled or paused, undo that

	      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
	        if (ABORT) return;
	        if (Browser.mainLoop.queue.length > 0) {
	          var start = Date.now();
	          var blocker = Browser.mainLoop.queue.shift();
	          blocker.func(blocker.arg);
	          if (Browser.mainLoop.remainingBlockers) {
	            var remaining = Browser.mainLoop.remainingBlockers;
	            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
	            if (blocker.counted) {
	              Browser.mainLoop.remainingBlockers = next;
	            } else {
	              // not counted, but move the progress along a tiny bit
	              next = next + 0.5; // do not steal all the next one's progress
	              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
	            }
	          }
	          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
	          Browser.mainLoop.updateStatus();
	          setTimeout(Browser.mainLoop.runner, 0);
	          return;
	        }
	        if (Browser.mainLoop.shouldPause) {
	          // catch pauses from non-main loop sources
	          Browser.mainLoop.paused = true;
	          Browser.mainLoop.shouldPause = false;
	          return;
	        }

	        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
	        // VBO double-buffering and reduce GPU stalls.

	        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
	          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
	          Browser.mainLoop.method = ''; // just warn once per call to set main loop
	        }

	        Browser.mainLoop.runIter(function() {
	          if (typeof arg !== 'undefined') {
	            Runtime.dynCall('vi', func, [arg]);
	          } else {
	            Runtime.dynCall('v', func);
	          }
	        });

	        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
	        // to queue the newest produced audio samples.
	        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
	        //       do not need to be hardcoded into this function, but can be more generic.
	        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();

	        if (Browser.mainLoop.shouldPause) {
	          // catch pauses from the main loop itself
	          Browser.mainLoop.paused = true;
	          Browser.mainLoop.shouldPause = false;
	          return;
	        }
	        Browser.mainLoop.scheduler();
	      }
	      if (fps && fps > 0) {
	        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
	          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
	        };
	        Browser.mainLoop.method = 'timeout';
	      } else {
	        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
	          Browser.requestAnimationFrame(Browser.mainLoop.runner);
	        };
	        Browser.mainLoop.method = 'rAF';
	      }
	      Browser.mainLoop.scheduler();

	      if (simulateInfiniteLoop) {
	        throw 'SimulateInfiniteLoop';
	      }
	    }
	  Module["_emscripten_set_main_loop"] = _emscripten_set_main_loop;

	  function _readdir_r(dirp, entry, result) {
	      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
	      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
	      var stream = FS.getStreamFromPtr(dirp);
	      if (!stream) {
	        return ___setErrNo(ERRNO_CODES.EBADF);
	      }
	      if (!stream.currReading) {
	        try {
	          // load the list of entries now, then readdir will traverse that list, to ignore changes to files
	          stream.currReading = FS.readdir(stream.path);
	        } catch (e) {
	          return FS.handleFSError(e);
	        }
	      }
	      if (stream.position < 0 || stream.position >= stream.currReading.length) {
	        HEAP32[((result)>>2)]=0;
	        return 0;
	      }
	      var id;
	      var type;
	      var name = stream.currReading[stream.position++];
	      if (!name.indexOf('.')) {
	        id = 1;
	        type = 4;
	      } else {
	        try {
	          // child may have been removed since we started to read this directory
	          var child = FS.lookupNode(stream.node, name);
	        } catch (e) {
	          // skip to the next entry (not infinite since position is incremented until currReading.length)
	          return _readdir_r(dirp, entry, result);
	        }
	        id = child.id;
	        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
	               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
	               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
	               8;                             // DT_REG, regular file.
	      }
	      HEAP32[((entry)>>2)]=id;
	      HEAP32[(((entry)+(4))>>2)]=stream.position;
	      HEAP32[(((entry)+(8))>>2)]=name.length + 1;
	      for (var i = 0; i < name.length; i++) {
	        HEAP8[(((entry + 11)+(i))>>0)]=name.charCodeAt(i);
	      }
	      HEAP8[(((entry + 11)+(i))>>0)]=0;
	      HEAP8[(((entry)+(10))>>0)]=type;
	      HEAP32[((result)>>2)]=entry;
	      return 0;
	    }
	  Module["_readdir_r"] = _readdir_r;

	  function _closedir(dirp) {
	      // int closedir(DIR *dirp);
	      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
	      var fd = _fileno(dirp);
	      var stream = FS.getStream(fd);
	      if (stream.currReading) stream.currReading = null;
	      return _close(fd);
	    }
	  Module["_closedir"] = _closedir;

	  var _sinf=Math_sin;
	  Module["_sinf"] = _sinf;



	  var _log=Math_log;
	  Module["_log"] = _log;

	  function _setsockopt(fd, level, optname, optval, optlen) {
	      return 0;
	    }
	  Module["_setsockopt"] = _setsockopt;

	  var _cos=Math_cos;
	  Module["_cos"] = _cos;

	  function _putchar(c) {
	      // int putchar(int c);
	      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
	      return _fputc(c, HEAP32[((_stdout)>>2)]);
	    }
	  Module["_putchar"] = _putchar;

	  function _socket(family, type, protocol) {
	      var sock = SOCKFS.createSocket(family, type, protocol);
	      assert(sock.stream.fd < 64); // select() assumes socket fd values are in 0..63
	      return sock.stream.fd;
	    }
	  Module["_socket"] = _socket;

	  function _llvm_stacksave() {
	      var self = _llvm_stacksave;
	      if (!self.LLVM_SAVEDSTACKS) {
	        self.LLVM_SAVEDSTACKS = [];
	      }
	      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
	      return self.LLVM_SAVEDSTACKS.length-1;
	    }
	  Module["_llvm_stacksave"] = _llvm_stacksave;

	  function _bind(fd, addrp, addrlen) {
	      var sock = SOCKFS.getSocket(fd);
	      if (!sock) {
	        ___setErrNo(ERRNO_CODES.EBADF);
	        return -1;
	      }

	      var info = __read_sockaddr(addrp, addrlen);
	      if (info.errno) {
	        ___setErrNo(info.errno);
	        return -1;
	      }
	      var port = info.port;
	      var addr = DNS.lookup_addr(info.addr) || info.addr;

	      try {
	        sock.sock_ops.bind(sock, addr, port);
	        return 0;
	      } catch (e) {
	        FS.handleFSError(e);
	        return -1;
	      }
	    }
	  Module["_bind"] = _bind;


	  Module["_strcpy"] = _strcpy;

	  var _exp=Math_exp;
	  Module["_exp"] = _exp;

	  var _FtoILow=true;
	  Module["_FtoILow"] = _FtoILow;

	  function _xmmsc_sc_interface_entity_destroy() {
	  Module['printErr']('missing function: xmmsc_sc_interface_entity_destroy'); abort(-1);
	  }
	  Module["_xmmsc_sc_interface_entity_destroy"] = _xmmsc_sc_interface_entity_destroy;

	  function ___progname() {
	  Module['printErr']('missing function: __progname'); abort(-1);
	  }
	  Module["___progname"] = ___progname;


	___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
	FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
	__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
	if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
	__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
	_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
	Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
	  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
	  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
	  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
	  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
	  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
	___buildEnvironment(ENV);
	STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

	staticSealed = true; // seal the static portion of memory

	STACK_MAX = STACK_BASE + TOTAL_STACK;

	DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

	assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

	 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
	 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

	  var Math_min = Math.min;
	function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

	function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

	function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

	function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

	function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

	function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

	function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

	function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

	function invoke_iiii(index,a1,a2,a3) {
	  try {
	    return Module["dynCall_iiii"](index,a1,a2,a3);
	  } catch(e) {
	    if (typeof e !== 'number' && e !== 'longjmp') throw e;
	    asm["setThrew"](1, 0);
	  }
	}

	function invoke_vi(index,a1) {
	  try {
	    Module["dynCall_vi"](index,a1);
	  } catch(e) {
	    if (typeof e !== 'number' && e !== 'longjmp') throw e;
	    asm["setThrew"](1, 0);
	  }
	}

	function invoke_vii(index,a1,a2) {
	  try {
	    Module["dynCall_vii"](index,a1,a2);
	  } catch(e) {
	    if (typeof e !== 'number' && e !== 'longjmp') throw e;
	    asm["setThrew"](1, 0);
	  }
	}

	function invoke_ii(index,a1) {
	  try {
	    return Module["dynCall_ii"](index,a1);
	  } catch(e) {
	    if (typeof e !== 'number' && e !== 'longjmp') throw e;
	    asm["setThrew"](1, 0);
	  }
	}

	function invoke_viii(index,a1,a2,a3) {
	  try {
	    Module["dynCall_viii"](index,a1,a2,a3);
	  } catch(e) {
	    if (typeof e !== 'number' && e !== 'longjmp') throw e;
	    asm["setThrew"](1, 0);
	  }
	}

	function invoke_v(index) {
	  try {
	    Module["dynCall_v"](index);
	  } catch(e) {
	    if (typeof e !== 'number' && e !== 'longjmp') throw e;
	    asm["setThrew"](1, 0);
	  }
	}

	function invoke_iii(index,a1,a2) {
	  try {
	    return Module["dynCall_iii"](index,a1,a2);
	  } catch(e) {
	    if (typeof e !== 'number' && e !== 'longjmp') throw e;
	    asm["setThrew"](1, 0);
	  }
	}

	function invoke_viiii(index,a1,a2,a3,a4) {
	  try {
	    Module["dynCall_viiii"](index,a1,a2,a3,a4);
	  } catch(e) {
	    if (typeof e !== 'number' && e !== 'longjmp') throw e;
	    asm["setThrew"](1, 0);
	  }
	}

	  // EMSCRIPTEN_START_ASM
	  var asm = (function(global, env, buffer) {
	    'almost asm';

	    var HEAP8 = new global.Int8Array(buffer);
	    var HEAP16 = new global.Int16Array(buffer);
	    var HEAP32 = new global.Int32Array(buffer);
	    var HEAPU8 = new global.Uint8Array(buffer);
	    var HEAPU16 = new global.Uint16Array(buffer);
	    var HEAPU32 = new global.Uint32Array(buffer);
	    var HEAPF32 = new global.Float32Array(buffer);
	    var HEAPF64 = new global.Float64Array(buffer);


	  var STACKTOP=env.STACKTOP|0;
	  var STACK_MAX=env.STACK_MAX|0;
	  var tempDoublePtr=env.tempDoublePtr|0;
	  var ABORT=env.ABORT|0;
	  var cttz_i8=env.cttz_i8|0;
	  var ctlz_i8=env.ctlz_i8|0;
	  var ___progname=env.___progname|0;
	  var _stderr=env._stderr|0;
	  var _stdout=env._stdout|0;

	    var __THREW__ = 0;
	    var threwValue = 0;
	    var setjmpId = 0;
	    var undef = 0;
	    var nan = +env.NaN, inf = +env.Infinity;
	    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

	    var tempRet0 = 0;
	    var tempRet1 = 0;
	    var tempRet2 = 0;
	    var tempRet3 = 0;
	    var tempRet4 = 0;
	    var tempRet5 = 0;
	    var tempRet6 = 0;
	    var tempRet7 = 0;
	    var tempRet8 = 0;
	    var tempRet9 = 0;
	  var Math_floor=global.Math.floor;
	  var Math_abs=global.Math.abs;
	  var Math_sqrt=global.Math.sqrt;
	  var Math_pow=global.Math.pow;
	  var Math_cos=global.Math.cos;
	  var Math_sin=global.Math.sin;
	  var Math_tan=global.Math.tan;
	  var Math_acos=global.Math.acos;
	  var Math_asin=global.Math.asin;
	  var Math_atan=global.Math.atan;
	  var Math_atan2=global.Math.atan2;
	  var Math_exp=global.Math.exp;
	  var Math_log=global.Math.log;
	  var Math_ceil=global.Math.ceil;
	  var Math_imul=global.Math.imul;
	  var abort=env.abort;
	  var assert=env.assert;
	  var Math_min=env.min;
	  var nullFunc_iiii=env.nullFunc_iiii;
	  var nullFunc_vi=env.nullFunc_vi;
	  var nullFunc_vii=env.nullFunc_vii;
	  var nullFunc_ii=env.nullFunc_ii;
	  var nullFunc_viii=env.nullFunc_viii;
	  var nullFunc_v=env.nullFunc_v;
	  var nullFunc_iii=env.nullFunc_iii;
	  var nullFunc_viiii=env.nullFunc_viiii;
	  var invoke_iiii=env.invoke_iiii;
	  var invoke_vi=env.invoke_vi;
	  var invoke_vii=env.invoke_vii;
	  var invoke_ii=env.invoke_ii;
	  var invoke_viii=env.invoke_viii;
	  var invoke_v=env.invoke_v;
	  var invoke_iii=env.invoke_iii;
	  var invoke_viiii=env.invoke_viiii;
	  var _fabs=env._fabs;
	  var _exp=env._exp;
	  var __inet_ntop6_raw=env.__inet_ntop6_raw;
	  var _log=env._log;
	  var _listen=env._listen;
	  var _fmodl=env._fmodl;
	  var _bind=env._bind;
	  var ___assert_fail=env.___assert_fail;
	  var _sbrk=env._sbrk;
	  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
	  var _xmmsv_c2c_message_get_payload=env._xmmsv_c2c_message_get_payload;
	  var _sysconf=env._sysconf;
	  var _close=env._close;
	  var _putc=env._putc;
	  var _cos=env._cos;
	  var _llvm_stacksave=env._llvm_stacksave;
	  var _fread=env._fread;
	  var _puts=env._puts;
	  var _xmmsc_sc_interface_entity_destroy=env._xmmsc_sc_interface_entity_destroy;
	  var _write=env._write;
	  var __write_sockaddr=env.__write_sockaddr;
	  var _fsync=env._fsync;
	  var _select=env._select;
	  var _getaddrinfo=env._getaddrinfo;
	  var _closedir=env._closedir;
	  var _getuid=env._getuid;
	  var _send=env._send;
	  var __inet_ntop4_raw=env.__inet_ntop4_raw;
	  var _llvm_stackrestore=env._llvm_stackrestore;
	  var _fcntl=env._fcntl;
	  var _opendir=env._opendir;
	  var _strerror_r=env._strerror_r;
	  var ___setErrNo=env.___setErrNo;
	  var _unlink=env._unlink;
	  var _nanosleep=env._nanosleep;
	  var _ntohs=env._ntohs;
	  var _putchar=env._putchar;
	  var ___buildEnvironment=env.___buildEnvironment;
	  var _printf=env._printf;
	  var _ntohl=env._ntohl;
	  var _setsockopt=env._setsockopt;
	  var _stat=env._stat;
	  var _connect=env._connect;
	  var _read=env._read;
	  var ___lock=env.___lock;
	  var _fwrite=env._fwrite;
	  var _time=env._time;
	  var _fprintf=env._fprintf;
	  var _gettimeofday=env._gettimeofday;
	  var _exit=env._exit;
	  var _readdir_r=env._readdir_r;
	  var __inet_pton4_raw=env.__inet_pton4_raw;
	  var _llvm_pow_f64=env._llvm_pow_f64;
	  var _fmod=env._fmod;
	  var _access=env._access;
	  var _vfprintf=env._vfprintf;
	  var _rmdir=env._rmdir;
	  var _logf=env._logf;
	  var _floor=env._floor;
	  var _pwrite=env._pwrite;
	  var _socket=env._socket;
	  var _open=env._open;
	  var _fabsf=env._fabsf;
	  var _remove=env._remove;
	  var _perror=env._perror;
	  var _sinf=env._sinf;
	  var _getenv=env._getenv;
	  var _fclose=env._fclose;
	  var _floorf=env._floorf;
	  var _sqrtf=env._sqrtf;
	  var _recv=env._recv;
	  var _accept=env._accept;
	  var _abort=env._abort;
	  var _fopen=env._fopen;
	  var _freeaddrinfo=env._freeaddrinfo;
	  var _sin=env._sin;
	  var _cosf=env._cosf;
	  var __inet_pton6_raw=env.__inet_pton6_raw;
	  var _emscripten_asm_const_int=env._emscripten_asm_const_int;
	  var __read_sockaddr=env.__read_sockaddr;
	  var _usleep=env._usleep;
	  var _fflush=env._fflush;
	  var __reallyNegative=env.__reallyNegative;
	  var _fileno=env._fileno;
	  var __exit=env.__exit;
	  var _htonl=env._htonl;
	  var _pread=env._pread;
	  var _mkport=env._mkport;
	  var ___unlock=env.___unlock;
	  var _htons=env._htons;
	  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
	  var ___errno_location=env.___errno_location;
	  var _getpwuid=env._getpwuid;
	  var _copysign=env._copysign;
	  var _fputc=env._fputc;
	  var _copysignl=env._copysignl;
	  var _modf=env._modf;
	  var _strerror=env._strerror;
	  var __formatString=env.__formatString;
	  var _fputs=env._fputs;
	  var _sqrt=env._sqrt;
	  var _xmmsv_c2c_message_format=env._xmmsv_c2c_message_format;
	  var tempFloat = 0.0;

	  // EMSCRIPTEN_START_FUNCS
	  function stackAlloc(size) {
	    size = size|0;
	    var ret = 0;
	    ret = STACKTOP;
	    STACKTOP = (STACKTOP + size)|0;
	  STACKTOP = (STACKTOP + 15)&-16;
	if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

	    return ret|0;
	  }
	  function stackSave() {
	    return STACKTOP|0;
	  }
	  function stackRestore(top) {
	    top = top|0;
	    STACKTOP = top;
	  }

	  function setThrew(threw, value) {
	    threw = threw|0;
	    value = value|0;
	    if ((__THREW__|0) == 0) {
	      __THREW__ = threw;
	      threwValue = value;
	    }
	  }
	  function copyTempFloat(ptr) {
	    ptr = ptr|0;
	    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
	    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
	    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
	    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
	  }
	  function copyTempDouble(ptr) {
	    ptr = ptr|0;
	    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
	    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
	    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
	    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
	    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
	    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
	    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
	    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
	  }
	  function setTempRet0(value) {
	    value = value|0;
	    tempRet0 = value;
	  }
	  function getTempRet0() {
	    return tempRet0|0;
	  }

	function _x_list_alloc() {
	 var $0 = 0, $call = 0, $list = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (_calloc(1,12)|0);
	 $list = $call;
	 $0 = $list;
	 STACKTOP = sp;return ($0|0);
	}
	function _x_list_free($list) {
	 $list = $list|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $last = 0, $list$addr = 0, $next = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 while(1) {
	  $0 = $list$addr;
	  $tobool = ($0|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $1 = $list$addr;
	  $last = $1;
	  $2 = $list$addr;
	  $next = (($2) + 4|0);
	  $3 = HEAP32[$next>>2]|0;
	  $list$addr = $3;
	  $4 = $last;
	  _free($4);
	 }
	 STACKTOP = sp;return;
	}
	function _x_list_free_1($list) {
	 $list = $list|0;
	 var $0 = 0, $list$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $0 = $list$addr;
	 _free($0);
	 STACKTOP = sp;return;
	}
	function _x_list_append($list,$data) {
	 $list = $list|0;
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $data$addr = 0, $last = 0, $list$addr = 0, $new_list = 0, $next = 0, $prev = 0, $retval = 0;
	 var $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $data$addr = $data;
	 $call = (_x_list_alloc()|0);
	 $new_list = $call;
	 $0 = $data$addr;
	 $1 = $new_list;
	 HEAP32[$1>>2] = $0;
	 $2 = $list$addr;
	 $tobool = ($2|0)!=(0|0);
	 if ($tobool) {
	  $3 = $list$addr;
	  $call2 = (_x_list_last($3)|0);
	  $last = $call2;
	  $4 = $new_list;
	  $5 = $last;
	  $next = (($5) + 4|0);
	  HEAP32[$next>>2] = $4;
	  $6 = $last;
	  $7 = $new_list;
	  $prev = (($7) + 8|0);
	  HEAP32[$prev>>2] = $6;
	  $8 = $list$addr;
	  $retval = $8;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 } else {
	  $9 = $new_list;
	  $retval = $9;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 return 0|0;
	}
	function _x_list_last($list) {
	 $list = $list|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $list$addr = 0, $next = 0, $next2 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $0 = $list$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $5 = $list$addr;
	  STACKTOP = sp;return ($5|0);
	 }
	 while(1) {
	  $1 = $list$addr;
	  $next = (($1) + 4|0);
	  $2 = HEAP32[$next>>2]|0;
	  $tobool1 = ($2|0)!=(0|0);
	  if (!($tobool1)) {
	   break;
	  }
	  $3 = $list$addr;
	  $next2 = (($3) + 4|0);
	  $4 = HEAP32[$next2>>2]|0;
	  $list$addr = $4;
	 }
	 $5 = $list$addr;
	 STACKTOP = sp;return ($5|0);
	}
	function _x_list_prepend($list,$data) {
	 $list = $list|0;
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $data$addr = 0, $list$addr = 0, $new_list = 0;
	 var $next = 0, $next8 = 0, $prev = 0, $prev4 = 0, $prev5 = 0, $prev6 = 0, $prev7 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $data$addr = $data;
	 $call = (_x_list_alloc()|0);
	 $new_list = $call;
	 $0 = $data$addr;
	 $1 = $new_list;
	 HEAP32[$1>>2] = $0;
	 $2 = $list$addr;
	 $tobool = ($2|0)!=(0|0);
	 if (!($tobool)) {
	  $15 = $new_list;
	  STACKTOP = sp;return ($15|0);
	 }
	 $3 = $list$addr;
	 $prev = (($3) + 8|0);
	 $4 = HEAP32[$prev>>2]|0;
	 $tobool2 = ($4|0)!=(0|0);
	 if ($tobool2) {
	  $5 = $new_list;
	  $6 = $list$addr;
	  $prev4 = (($6) + 8|0);
	  $7 = HEAP32[$prev4>>2]|0;
	  $next = (($7) + 4|0);
	  HEAP32[$next>>2] = $5;
	  $8 = $list$addr;
	  $prev5 = (($8) + 8|0);
	  $9 = HEAP32[$prev5>>2]|0;
	  $10 = $new_list;
	  $prev6 = (($10) + 8|0);
	  HEAP32[$prev6>>2] = $9;
	 }
	 $11 = $new_list;
	 $12 = $list$addr;
	 $prev7 = (($12) + 8|0);
	 HEAP32[$prev7>>2] = $11;
	 $13 = $list$addr;
	 $14 = $new_list;
	 $next8 = (($14) + 4|0);
	 HEAP32[$next8>>2] = $13;
	 $15 = $new_list;
	 STACKTOP = sp;return ($15|0);
	}
	function _x_list_insert($list,$data,$position) {
	 $list = $list|0;
	 $data = $data|0;
	 $position = $position|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call3 = 0, $call5 = 0, $call7 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0, $cmp19 = 0, $data$addr = 0, $list$addr = 0;
	 var $new_list = 0, $next = 0, $next17 = 0, $position$addr = 0, $prev = 0, $prev13 = 0, $prev14 = 0, $prev15 = 0, $prev18 = 0, $retval = 0, $tmp_list = 0, $tobool = 0, $tobool11 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $data$addr = $data;
	 $position$addr = $position;
	 $0 = $position$addr;
	 $cmp = ($0|0)<(0);
	 if ($cmp) {
	  $1 = $list$addr;
	  $2 = $data$addr;
	  $call = (_x_list_append($1,$2)|0);
	  $retval = $call;
	  $29 = $retval;
	  STACKTOP = sp;return ($29|0);
	 }
	 $3 = $position$addr;
	 $cmp1 = ($3|0)==(0);
	 if ($cmp1) {
	  $4 = $list$addr;
	  $5 = $data$addr;
	  $call3 = (_x_list_prepend($4,$5)|0);
	  $retval = $call3;
	  $29 = $retval;
	  STACKTOP = sp;return ($29|0);
	 }
	 $6 = $list$addr;
	 $7 = $position$addr;
	 $call5 = (_x_list_nth($6,$7)|0);
	 $tmp_list = $call5;
	 $8 = $tmp_list;
	 $tobool = ($8|0)!=(0|0);
	 if (!($tobool)) {
	  $9 = $list$addr;
	  $10 = $data$addr;
	  $call7 = (_x_list_append($9,$10)|0);
	  $retval = $call7;
	  $29 = $retval;
	  STACKTOP = sp;return ($29|0);
	 }
	 $call9 = (_x_list_alloc()|0);
	 $new_list = $call9;
	 $11 = $data$addr;
	 $12 = $new_list;
	 HEAP32[$12>>2] = $11;
	 $13 = $tmp_list;
	 $prev = (($13) + 8|0);
	 $14 = HEAP32[$prev>>2]|0;
	 $tobool11 = ($14|0)!=(0|0);
	 if ($tobool11) {
	  $15 = $new_list;
	  $16 = $tmp_list;
	  $prev13 = (($16) + 8|0);
	  $17 = HEAP32[$prev13>>2]|0;
	  $next = (($17) + 4|0);
	  HEAP32[$next>>2] = $15;
	  $18 = $tmp_list;
	  $prev14 = (($18) + 8|0);
	  $19 = HEAP32[$prev14>>2]|0;
	  $20 = $new_list;
	  $prev15 = (($20) + 8|0);
	  HEAP32[$prev15>>2] = $19;
	 }
	 $21 = $tmp_list;
	 $22 = $new_list;
	 $next17 = (($22) + 4|0);
	 HEAP32[$next17>>2] = $21;
	 $23 = $new_list;
	 $24 = $tmp_list;
	 $prev18 = (($24) + 8|0);
	 HEAP32[$prev18>>2] = $23;
	 $25 = $tmp_list;
	 $26 = $list$addr;
	 $cmp19 = ($25|0)==($26|0);
	 if ($cmp19) {
	  $27 = $new_list;
	  $retval = $27;
	  $29 = $retval;
	  STACKTOP = sp;return ($29|0);
	 } else {
	  $28 = $list$addr;
	  $retval = $28;
	  $29 = $retval;
	  STACKTOP = sp;return ($29|0);
	 }
	 return 0|0;
	}
	function _x_list_nth($list,$n) {
	 $list = $list|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $dec = 0, $list$addr = 0, $n$addr = 0, $next = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $n$addr = $n;
	 while(1) {
	  $0 = $n$addr;
	  $dec = (($0) + -1)|0;
	  $n$addr = $dec;
	  $cmp = ($0>>>0)>(0);
	  if ($cmp) {
	   $1 = $list$addr;
	   $tobool = ($1|0)!=(0|0);
	   $5 = $tobool;
	  } else {
	   $5 = 0;
	  }
	  if (!($5)) {
	   break;
	  }
	  $2 = $list$addr;
	  $next = (($2) + 4|0);
	  $3 = HEAP32[$next>>2]|0;
	  $list$addr = $3;
	 }
	 $4 = $list$addr;
	 STACKTOP = sp;return ($4|0);
	}
	function _x_list_insert_before($list,$sibling,$data) {
	 $list = $list|0;
	 $sibling = $sibling|0;
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
	 var $9 = 0, $call = 0, $call25 = 0, $call5 = 0, $data$addr = 0, $last = 0, $list$addr = 0, $next = 0, $next12 = 0, $next15 = 0, $next22 = 0, $next24 = 0, $next26 = 0, $next27 = 0, $next29 = 0, $node = 0, $prev = 0, $prev10 = 0, $prev11 = 0, $prev13 = 0;
	 var $prev16 = 0, $prev30 = 0, $prev9 = 0, $retval = 0, $sibling$addr = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool23 = 0, $tobool3 = 0, $tobool7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $sibling$addr = $sibling;
	 $data$addr = $data;
	 $0 = $list$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $call = (_x_list_alloc()|0);
	  $list$addr = $call;
	  $1 = $data$addr;
	  $2 = $list$addr;
	  HEAP32[$2>>2] = $1;
	  $3 = $sibling$addr;
	  $tobool2 = ($3|0)!=(0|0);
	  if (!($tobool2)) {
	   ___assert_fail((8|0),(16|0),143,(48|0));
	   // unreachable;
	  }
	  $4 = $list$addr;
	  $retval = $4;
	  $40 = $retval;
	  STACKTOP = sp;return ($40|0);
	 }
	 $5 = $sibling$addr;
	 $tobool3 = ($5|0)!=(0|0);
	 if (!($tobool3)) {
	  $27 = $list$addr;
	  $last = $27;
	  while(1) {
	   $28 = $last;
	   $next22 = (($28) + 4|0);
	   $29 = HEAP32[$next22>>2]|0;
	   $tobool23 = ($29|0)!=(0|0);
	   if (!($tobool23)) {
	    break;
	   }
	   $30 = $last;
	   $next24 = (($30) + 4|0);
	   $31 = HEAP32[$next24>>2]|0;
	   $last = $31;
	  }
	  $call25 = (_x_list_alloc()|0);
	  $32 = $last;
	  $next26 = (($32) + 4|0);
	  HEAP32[$next26>>2] = $call25;
	  $33 = $data$addr;
	  $34 = $last;
	  $next27 = (($34) + 4|0);
	  $35 = HEAP32[$next27>>2]|0;
	  HEAP32[$35>>2] = $33;
	  $36 = $last;
	  $37 = $last;
	  $next29 = (($37) + 4|0);
	  $38 = HEAP32[$next29>>2]|0;
	  $prev30 = (($38) + 8|0);
	  HEAP32[$prev30>>2] = $36;
	  $39 = $list$addr;
	  $retval = $39;
	  $40 = $retval;
	  STACKTOP = sp;return ($40|0);
	 }
	 $call5 = (_x_list_alloc()|0);
	 $node = $call5;
	 $6 = $data$addr;
	 $7 = $node;
	 HEAP32[$7>>2] = $6;
	 $8 = $sibling$addr;
	 $prev = (($8) + 8|0);
	 $9 = HEAP32[$prev>>2]|0;
	 $tobool7 = ($9|0)!=(0|0);
	 if ($tobool7) {
	  $10 = $sibling$addr;
	  $prev9 = (($10) + 8|0);
	  $11 = HEAP32[$prev9>>2]|0;
	  $12 = $node;
	  $prev10 = (($12) + 8|0);
	  HEAP32[$prev10>>2] = $11;
	  $13 = $node;
	  $14 = $node;
	  $prev11 = (($14) + 8|0);
	  $15 = HEAP32[$prev11>>2]|0;
	  $next = (($15) + 4|0);
	  HEAP32[$next>>2] = $13;
	  $16 = $sibling$addr;
	  $17 = $node;
	  $next12 = (($17) + 4|0);
	  HEAP32[$next12>>2] = $16;
	  $18 = $node;
	  $19 = $sibling$addr;
	  $prev13 = (($19) + 8|0);
	  HEAP32[$prev13>>2] = $18;
	  $20 = $list$addr;
	  $retval = $20;
	  $40 = $retval;
	  STACKTOP = sp;return ($40|0);
	 }
	 $21 = $sibling$addr;
	 $22 = $node;
	 $next15 = (($22) + 4|0);
	 HEAP32[$next15>>2] = $21;
	 $23 = $node;
	 $24 = $sibling$addr;
	 $prev16 = (($24) + 8|0);
	 HEAP32[$prev16>>2] = $23;
	 $25 = $sibling$addr;
	 $tobool17 = ($25|0)!=(0|0);
	 if (!($tobool17)) {
	  ___assert_fail((8|0),(16|0),159,(48|0));
	  // unreachable;
	 }
	 $26 = $node;
	 $retval = $26;
	 $40 = $retval;
	 STACKTOP = sp;return ($40|0);
	}
	function _x_list_concat($list1,$list2) {
	 $list1 = $list1|0;
	 $list2 = $list2|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $list1$addr = 0, $list2$addr = 0, $next = 0, $prev = 0, $tmp_list = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list1$addr = $list1;
	 $list2$addr = $list2;
	 $0 = $list2$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $8 = $list1$addr;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $list1$addr;
	 $call = (_x_list_last($1)|0);
	 $tmp_list = $call;
	 $2 = $tmp_list;
	 $tobool1 = ($2|0)!=(0|0);
	 if ($tobool1) {
	  $3 = $list2$addr;
	  $4 = $tmp_list;
	  $next = (($4) + 4|0);
	  HEAP32[$next>>2] = $3;
	 } else {
	  $5 = $list2$addr;
	  $list1$addr = $5;
	 }
	 $6 = $tmp_list;
	 $7 = $list2$addr;
	 $prev = (($7) + 8|0);
	 HEAP32[$prev>>2] = $6;
	 $8 = $list1$addr;
	 STACKTOP = sp;return ($8|0);
	}
	function _x_list_remove($list,$data) {
	 $list = $list|0;
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
	 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp14 = 0, $data$addr = 0, $list$addr = 0, $next = 0, $next11 = 0, $next16 = 0, $next4 = 0, $next6 = 0, $next7 = 0, $prev = 0, $prev10 = 0, $prev12 = 0, $prev5 = 0, $tmp = 0;
	 var $tobool = 0, $tobool2 = 0, $tobool8 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $data$addr = $data;
	 $0 = $list$addr;
	 $tmp = $0;
	 while(1) {
	  $1 = $tmp;
	  $tobool = ($1|0)!=(0|0);
	  if (!($tobool)) {
	   label = 13;
	   break;
	  }
	  $2 = $tmp;
	  $3 = HEAP32[$2>>2]|0;
	  $4 = $data$addr;
	  $cmp = ($3|0)!=($4|0);
	  if (!($cmp)) {
	   break;
	  }
	  $5 = $tmp;
	  $next = (($5) + 4|0);
	  $6 = HEAP32[$next>>2]|0;
	  $tmp = $6;
	 }
	 if ((label|0) == 13) {
	  $24 = $list$addr;
	  STACKTOP = sp;return ($24|0);
	 }
	 $7 = $tmp;
	 $prev = (($7) + 8|0);
	 $8 = HEAP32[$prev>>2]|0;
	 $tobool2 = ($8|0)!=(0|0);
	 if ($tobool2) {
	  $9 = $tmp;
	  $next4 = (($9) + 4|0);
	  $10 = HEAP32[$next4>>2]|0;
	  $11 = $tmp;
	  $prev5 = (($11) + 8|0);
	  $12 = HEAP32[$prev5>>2]|0;
	  $next6 = (($12) + 4|0);
	  HEAP32[$next6>>2] = $10;
	 }
	 $13 = $tmp;
	 $next7 = (($13) + 4|0);
	 $14 = HEAP32[$next7>>2]|0;
	 $tobool8 = ($14|0)!=(0|0);
	 if ($tobool8) {
	  $15 = $tmp;
	  $prev10 = (($15) + 8|0);
	  $16 = HEAP32[$prev10>>2]|0;
	  $17 = $tmp;
	  $next11 = (($17) + 4|0);
	  $18 = HEAP32[$next11>>2]|0;
	  $prev12 = (($18) + 8|0);
	  HEAP32[$prev12>>2] = $16;
	 }
	 $19 = $list$addr;
	 $20 = $tmp;
	 $cmp14 = ($19|0)==($20|0);
	 if ($cmp14) {
	  $21 = $list$addr;
	  $next16 = (($21) + 4|0);
	  $22 = HEAP32[$next16>>2]|0;
	  $list$addr = $22;
	 }
	 $23 = $tmp;
	 _x_list_free_1($23);
	 $24 = $list$addr;
	 STACKTOP = sp;return ($24|0);
	}
	function _x_list_remove_all($list,$data) {
	 $list = $list|0;
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
	 var $8 = 0, $9 = 0, $cmp = 0, $data$addr = 0, $list$addr = 0, $next = 0, $next3 = 0, $next4 = 0, $next8 = 0, $prev = 0, $prev12 = 0, $prev13 = 0, $prev7 = 0, $tmp = 0, $tobool = 0, $tobool10 = 0, $tobool5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $data$addr = $data;
	 $0 = $list$addr;
	 $tmp = $0;
	 while(1) {
	  $1 = $tmp;
	  $tobool = ($1|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $2 = $tmp;
	  $3 = HEAP32[$2>>2]|0;
	  $4 = $data$addr;
	  $cmp = ($3|0)!=($4|0);
	  if ($cmp) {
	   $5 = $tmp;
	   $next = (($5) + 4|0);
	   $6 = HEAP32[$next>>2]|0;
	   $tmp = $6;
	  } else {
	   $7 = $tmp;
	   $next4 = (($7) + 4|0);
	   $8 = HEAP32[$next4>>2]|0;
	   $next3 = $8;
	   $9 = $tmp;
	   $prev = (($9) + 8|0);
	   $10 = HEAP32[$prev>>2]|0;
	   $tobool5 = ($10|0)!=(0|0);
	   if ($tobool5) {
	    $11 = $next3;
	    $12 = $tmp;
	    $prev7 = (($12) + 8|0);
	    $13 = HEAP32[$prev7>>2]|0;
	    $next8 = (($13) + 4|0);
	    HEAP32[$next8>>2] = $11;
	   } else {
	    $14 = $next3;
	    $list$addr = $14;
	   }
	   $15 = $next3;
	   $tobool10 = ($15|0)!=(0|0);
	   if ($tobool10) {
	    $16 = $tmp;
	    $prev12 = (($16) + 8|0);
	    $17 = HEAP32[$prev12>>2]|0;
	    $18 = $next3;
	    $prev13 = (($18) + 8|0);
	    HEAP32[$prev13>>2] = $17;
	   }
	   $19 = $tmp;
	   _x_list_free_1($19);
	   $20 = $next3;
	   $tmp = $20;
	  }
	 }
	 $21 = $list$addr;
	 STACKTOP = sp;return ($21|0);
	}
	function _x_list_remove_link($list,$link) {
	 $list = $list|0;
	 $link = $link|0;
	 var $0 = 0, $1 = 0, $call = 0, $link$addr = 0, $list$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $link$addr = $link;
	 $0 = $list$addr;
	 $1 = $link$addr;
	 $call = (__x_list_remove_link($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function __x_list_remove_link($list,$link) {
	 $list = $list|0;
	 $link = $link|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $cmp = 0, $link$addr = 0, $list$addr = 0, $next = 0, $next13 = 0, $next15 = 0, $next4 = 0, $next5 = 0, $next9 = 0, $prev = 0, $prev10 = 0, $prev16 = 0, $prev3 = 0, $prev8 = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $link$addr = $link;
	 $0 = $link$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $19 = $list$addr;
	  STACKTOP = sp;return ($19|0);
	 }
	 $1 = $link$addr;
	 $prev = (($1) + 8|0);
	 $2 = HEAP32[$prev>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if ($tobool1) {
	  $3 = $link$addr;
	  $next = (($3) + 4|0);
	  $4 = HEAP32[$next>>2]|0;
	  $5 = $link$addr;
	  $prev3 = (($5) + 8|0);
	  $6 = HEAP32[$prev3>>2]|0;
	  $next4 = (($6) + 4|0);
	  HEAP32[$next4>>2] = $4;
	 }
	 $7 = $link$addr;
	 $next5 = (($7) + 4|0);
	 $8 = HEAP32[$next5>>2]|0;
	 $tobool6 = ($8|0)!=(0|0);
	 if ($tobool6) {
	  $9 = $link$addr;
	  $prev8 = (($9) + 8|0);
	  $10 = HEAP32[$prev8>>2]|0;
	  $11 = $link$addr;
	  $next9 = (($11) + 4|0);
	  $12 = HEAP32[$next9>>2]|0;
	  $prev10 = (($12) + 8|0);
	  HEAP32[$prev10>>2] = $10;
	 }
	 $13 = $link$addr;
	 $14 = $list$addr;
	 $cmp = ($13|0)==($14|0);
	 if ($cmp) {
	  $15 = $list$addr;
	  $next13 = (($15) + 4|0);
	  $16 = HEAP32[$next13>>2]|0;
	  $list$addr = $16;
	 }
	 $17 = $link$addr;
	 $next15 = (($17) + 4|0);
	 HEAP32[$next15>>2] = 0;
	 $18 = $link$addr;
	 $prev16 = (($18) + 8|0);
	 HEAP32[$prev16>>2] = 0;
	 $19 = $list$addr;
	 STACKTOP = sp;return ($19|0);
	}
	function _x_list_delete_link($list,$link) {
	 $list = $list|0;
	 $link = $link|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $link$addr = 0, $list$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $link$addr = $link;
	 $0 = $list$addr;
	 $1 = $link$addr;
	 $call = (__x_list_remove_link($0,$1)|0);
	 $list$addr = $call;
	 $2 = $link$addr;
	 _x_list_free_1($2);
	 $3 = $list$addr;
	 STACKTOP = sp;return ($3|0);
	}
	function _x_list_copy($list) {
	 $list = $list|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $call = 0, $call3 = 0, $last = 0, $list$addr = 0, $new_list = 0, $next = 0, $next4 = 0, $next5 = 0, $next6 = 0, $next9 = 0, $prev = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $new_list = 0;
	 $0 = $list$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $19 = $new_list;
	  STACKTOP = sp;return ($19|0);
	 }
	 $call = (_x_list_alloc()|0);
	 $new_list = $call;
	 $1 = $list$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $3 = $new_list;
	 HEAP32[$3>>2] = $2;
	 $4 = $new_list;
	 $last = $4;
	 $5 = $list$addr;
	 $next = (($5) + 4|0);
	 $6 = HEAP32[$next>>2]|0;
	 $list$addr = $6;
	 while(1) {
	  $7 = $list$addr;
	  $tobool2 = ($7|0)!=(0|0);
	  if (!($tobool2)) {
	   break;
	  }
	  $call3 = (_x_list_alloc()|0);
	  $8 = $last;
	  $next4 = (($8) + 4|0);
	  HEAP32[$next4>>2] = $call3;
	  $9 = $last;
	  $10 = $last;
	  $next5 = (($10) + 4|0);
	  $11 = HEAP32[$next5>>2]|0;
	  $prev = (($11) + 8|0);
	  HEAP32[$prev>>2] = $9;
	  $12 = $last;
	  $next6 = (($12) + 4|0);
	  $13 = HEAP32[$next6>>2]|0;
	  $last = $13;
	  $14 = $list$addr;
	  $15 = HEAP32[$14>>2]|0;
	  $16 = $last;
	  HEAP32[$16>>2] = $15;
	  $17 = $list$addr;
	  $next9 = (($17) + 4|0);
	  $18 = HEAP32[$next9>>2]|0;
	  $list$addr = $18;
	 }
	 $19 = $new_list;
	 STACKTOP = sp;return ($19|0);
	}
	function _x_list_reverse($list) {
	 $list = $list|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last = 0, $list$addr = 0, $next = 0, $next1 = 0, $prev = 0, $prev2 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $last = 0;
	 while(1) {
	  $0 = $list$addr;
	  $tobool = ($0|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $1 = $list$addr;
	  $last = $1;
	  $2 = $last;
	  $next = (($2) + 4|0);
	  $3 = HEAP32[$next>>2]|0;
	  $list$addr = $3;
	  $4 = $last;
	  $prev = (($4) + 8|0);
	  $5 = HEAP32[$prev>>2]|0;
	  $6 = $last;
	  $next1 = (($6) + 4|0);
	  HEAP32[$next1>>2] = $5;
	  $7 = $list$addr;
	  $8 = $last;
	  $prev2 = (($8) + 8|0);
	  HEAP32[$prev2>>2] = $7;
	 }
	 $9 = $last;
	 STACKTOP = sp;return ($9|0);
	}
	function _x_list_nth_prev($list,$n) {
	 $list = $list|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $dec = 0, $list$addr = 0, $n$addr = 0, $prev = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $n$addr = $n;
	 while(1) {
	  $0 = $n$addr;
	  $dec = (($0) + -1)|0;
	  $n$addr = $dec;
	  $cmp = ($0>>>0)>(0);
	  if ($cmp) {
	   $1 = $list$addr;
	   $tobool = ($1|0)!=(0|0);
	   $5 = $tobool;
	  } else {
	   $5 = 0;
	  }
	  if (!($5)) {
	   break;
	  }
	  $2 = $list$addr;
	  $prev = (($2) + 8|0);
	  $3 = HEAP32[$prev>>2]|0;
	  $list$addr = $3;
	 }
	 $4 = $list$addr;
	 STACKTOP = sp;return ($4|0);
	}
	function _x_list_nth_data($list,$n) {
	 $list = $list|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp = 0, $cond = 0, $dec = 0, $list$addr = 0, $n$addr = 0, $next = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $n$addr = $n;
	 while(1) {
	  $0 = $n$addr;
	  $dec = (($0) + -1)|0;
	  $n$addr = $dec;
	  $cmp = ($0>>>0)>(0);
	  if ($cmp) {
	   $1 = $list$addr;
	   $tobool = ($1|0)!=(0|0);
	   $7 = $tobool;
	  } else {
	   $7 = 0;
	  }
	  if (!($7)) {
	   break;
	  }
	  $2 = $list$addr;
	  $next = (($2) + 4|0);
	  $3 = HEAP32[$next>>2]|0;
	  $list$addr = $3;
	 }
	 $4 = $list$addr;
	 $tobool1 = ($4|0)!=(0|0);
	 if ($tobool1) {
	  $5 = $list$addr;
	  $6 = HEAP32[$5>>2]|0;
	  $cond = $6;
	  STACKTOP = sp;return ($cond|0);
	 } else {
	  $cond = 0;
	  STACKTOP = sp;return ($cond|0);
	 }
	 return 0|0;
	}
	function _x_list_find($list,$data) {
	 $list = $list|0;
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $data$addr = 0, $list$addr = 0, $next = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $data$addr = $data;
	 while(1) {
	  $0 = $list$addr;
	  $tobool = ($0|0)!=(0|0);
	  if (!($tobool)) {
	   label = 6;
	   break;
	  }
	  $1 = $list$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $3 = $data$addr;
	  $cmp = ($2|0)==($3|0);
	  if ($cmp) {
	   break;
	  }
	  $4 = $list$addr;
	  $next = (($4) + 4|0);
	  $5 = HEAP32[$next>>2]|0;
	  $list$addr = $5;
	 }
	 if ((label|0) == 6) {
	  $6 = $list$addr;
	  STACKTOP = sp;return ($6|0);
	 }
	 $6 = $list$addr;
	 STACKTOP = sp;return ($6|0);
	}
	function _x_list_find_custom($list,$data,$func) {
	 $list = $list|0;
	 $data = $data|0;
	 $func = $func|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $data$addr = 0, $func$addr = 0, $list$addr = 0, $next = 0, $retval = 0, $tobool = 0, $tobool2 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $data$addr = $data;
	 $func$addr = $func;
	 $0 = $func$addr;
	 $cmp = ($0|0)!=(0|0);
	 if (!($cmp)) {
	  ___assert_fail((72|0),(16|0),365,(88|0));
	  // unreachable;
	 }
	 while(1) {
	  $1 = $list$addr;
	  $tobool = ($1|0)!=(0|0);
	  if (!($tobool)) {
	   label = 8;
	   break;
	  }
	  $2 = $func$addr;
	  $3 = $list$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = $data$addr;
	  $call = (FUNCTION_TABLE_iii[$2 & 31]($4,$5)|0);
	  $tobool2 = ($call|0)!=(0);
	  if (!($tobool2)) {
	   label = 6;
	   break;
	  }
	  $7 = $list$addr;
	  $next = (($7) + 4|0);
	  $8 = HEAP32[$next>>2]|0;
	  $list$addr = $8;
	 }
	 if ((label|0) == 6) {
	  $6 = $list$addr;
	  $retval = $6;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 else if ((label|0) == 8) {
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _x_list_position($list,$link) {
	 $list = $list|0;
	 $link = $link|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp = 0, $i = 0, $inc = 0, $link$addr = 0, $list$addr = 0, $next = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $link$addr = $link;
	 $i = 0;
	 while(1) {
	  $0 = $list$addr;
	  $tobool = ($0|0)!=(0|0);
	  if (!($tobool)) {
	   label = 6;
	   break;
	  }
	  $1 = $list$addr;
	  $2 = $link$addr;
	  $cmp = ($1|0)==($2|0);
	  if ($cmp) {
	   label = 4;
	   break;
	  }
	  $4 = $i;
	  $inc = (($4) + 1)|0;
	  $i = $inc;
	  $5 = $list$addr;
	  $next = (($5) + 4|0);
	  $6 = HEAP32[$next>>2]|0;
	  $list$addr = $6;
	 }
	 if ((label|0) == 4) {
	  $3 = $i;
	  $retval = $3;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 else if ((label|0) == 6) {
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _x_list_index($list,$data) {
	 $list = $list|0;
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cmp = 0, $data$addr = 0, $i = 0, $inc = 0, $list$addr = 0, $next = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $data$addr = $data;
	 $i = 0;
	 while(1) {
	  $0 = $list$addr;
	  $tobool = ($0|0)!=(0|0);
	  if (!($tobool)) {
	   label = 6;
	   break;
	  }
	  $1 = $list$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $3 = $data$addr;
	  $cmp = ($2|0)==($3|0);
	  if ($cmp) {
	   label = 4;
	   break;
	  }
	  $5 = $i;
	  $inc = (($5) + 1)|0;
	  $i = $inc;
	  $6 = $list$addr;
	  $next = (($6) + 4|0);
	  $7 = HEAP32[$next>>2]|0;
	  $list$addr = $7;
	 }
	 if ((label|0) == 4) {
	  $4 = $i;
	  $retval = $4;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 else if ((label|0) == 6) {
	  $retval = -1;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _x_list_first($list) {
	 $list = $list|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $list$addr = 0, $prev = 0, $prev2 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $0 = $list$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $5 = $list$addr;
	  STACKTOP = sp;return ($5|0);
	 }
	 while(1) {
	  $1 = $list$addr;
	  $prev = (($1) + 8|0);
	  $2 = HEAP32[$prev>>2]|0;
	  $tobool1 = ($2|0)!=(0|0);
	  if (!($tobool1)) {
	   break;
	  }
	  $3 = $list$addr;
	  $prev2 = (($3) + 8|0);
	  $4 = HEAP32[$prev2>>2]|0;
	  $list$addr = $4;
	 }
	 $5 = $list$addr;
	 STACKTOP = sp;return ($5|0);
	}
	function _x_list_length($list) {
	 $list = $list|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $inc = 0, $length = 0, $list$addr = 0, $next = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $length = 0;
	 while(1) {
	  $0 = $list$addr;
	  $tobool = ($0|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $1 = $length;
	  $inc = (($1) + 1)|0;
	  $length = $inc;
	  $2 = $list$addr;
	  $next = (($2) + 4|0);
	  $3 = HEAP32[$next>>2]|0;
	  $list$addr = $3;
	 }
	 $4 = $length;
	 STACKTOP = sp;return ($4|0);
	}
	function _x_list_foreach($list,$func,$user_data) {
	 $list = $list|0;
	 $func = $func|0;
	 $user_data = $user_data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $func$addr = 0, $list$addr = 0, $next = 0, $next1 = 0, $tobool = 0, $user_data$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $func$addr = $func;
	 $user_data$addr = $user_data;
	 while(1) {
	  $0 = $list$addr;
	  $tobool = ($0|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $1 = $list$addr;
	  $next1 = (($1) + 4|0);
	  $2 = HEAP32[$next1>>2]|0;
	  $next = $2;
	  $3 = $func$addr;
	  $4 = $list$addr;
	  $5 = HEAP32[$4>>2]|0;
	  $6 = $user_data$addr;
	  (FUNCTION_TABLE_iii[$3 & 31]($5,$6)|0);
	  $7 = $next;
	  $list$addr = $7;
	 }
	 STACKTOP = sp;return;
	}
	function _x_list_insert_sorted($list,$data,$func) {
	 $list = $list|0;
	 $data = $data|0;
	 $func = $func|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call4 = 0, $call9 = 0, $cmp = 0, $cmp1 = 0, $cmp14 = 0, $cmp28 = 0, $cmp6 = 0, $data$addr = 0, $func$addr = 0, $list$addr = 0, $new_list = 0;
	 var $next = 0, $next12 = 0, $next16 = 0, $next22 = 0, $next26 = 0, $next7 = 0, $prev = 0, $prev18 = 0, $prev21 = 0, $prev23 = 0, $prev24 = 0, $prev27 = 0, $retval = 0, $tmp_list = 0, $tobool = 0, $tobool13 = 0, $tobool19 = 0, $tobool5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $data$addr = $data;
	 $func$addr = $func;
	 $0 = $list$addr;
	 $tmp_list = $0;
	 $1 = $func$addr;
	 $cmp1 = ($1|0)!=(0|0);
	 if (!($cmp1)) {
	  ___assert_fail((72|0),(16|0),463,(112|0));
	  // unreachable;
	 }
	 $2 = $list$addr;
	 $tobool = ($2|0)!=(0|0);
	 if (!($tobool)) {
	  $call = (_x_list_alloc()|0);
	  $new_list = $call;
	  $3 = $data$addr;
	  $4 = $new_list;
	  HEAP32[$4>>2] = $3;
	  $5 = $new_list;
	  $retval = $5;
	  $45 = $retval;
	  STACKTOP = sp;return ($45|0);
	 }
	 $6 = $func$addr;
	 $7 = $data$addr;
	 $8 = $tmp_list;
	 $9 = HEAP32[$8>>2]|0;
	 $call4 = (FUNCTION_TABLE_iii[$6 & 31]($7,$9)|0);
	 $cmp = $call4;
	 while(1) {
	  $10 = $tmp_list;
	  $next = (($10) + 4|0);
	  $11 = HEAP32[$next>>2]|0;
	  $tobool5 = ($11|0)!=(0|0);
	  if ($tobool5) {
	   $12 = $cmp;
	   $cmp6 = ($12|0)>(0);
	   $46 = $cmp6;
	  } else {
	   $46 = 0;
	  }
	  if (!($46)) {
	   break;
	  }
	  $13 = $tmp_list;
	  $next7 = (($13) + 4|0);
	  $14 = HEAP32[$next7>>2]|0;
	  $tmp_list = $14;
	  $15 = $func$addr;
	  $16 = $data$addr;
	  $17 = $tmp_list;
	  $18 = HEAP32[$17>>2]|0;
	  $call9 = (FUNCTION_TABLE_iii[$15 & 31]($16,$18)|0);
	  $cmp = $call9;
	 }
	 $call10 = (_x_list_alloc()|0);
	 $new_list = $call10;
	 $19 = $data$addr;
	 $20 = $new_list;
	 HEAP32[$20>>2] = $19;
	 $21 = $tmp_list;
	 $next12 = (($21) + 4|0);
	 $22 = HEAP32[$next12>>2]|0;
	 $tobool13 = ($22|0)!=(0|0);
	 if (!($tobool13)) {
	  $23 = $cmp;
	  $cmp14 = ($23|0)>(0);
	  if ($cmp14) {
	   $24 = $new_list;
	   $25 = $tmp_list;
	   $next16 = (($25) + 4|0);
	   HEAP32[$next16>>2] = $24;
	   $26 = $tmp_list;
	   $27 = $new_list;
	   $prev = (($27) + 8|0);
	   HEAP32[$prev>>2] = $26;
	   $28 = $list$addr;
	   $retval = $28;
	   $45 = $retval;
	   STACKTOP = sp;return ($45|0);
	  }
	 }
	 $29 = $tmp_list;
	 $prev18 = (($29) + 8|0);
	 $30 = HEAP32[$prev18>>2]|0;
	 $tobool19 = ($30|0)!=(0|0);
	 if ($tobool19) {
	  $31 = $new_list;
	  $32 = $tmp_list;
	  $prev21 = (($32) + 8|0);
	  $33 = HEAP32[$prev21>>2]|0;
	  $next22 = (($33) + 4|0);
	  HEAP32[$next22>>2] = $31;
	  $34 = $tmp_list;
	  $prev23 = (($34) + 8|0);
	  $35 = HEAP32[$prev23>>2]|0;
	  $36 = $new_list;
	  $prev24 = (($36) + 8|0);
	  HEAP32[$prev24>>2] = $35;
	 }
	 $37 = $tmp_list;
	 $38 = $new_list;
	 $next26 = (($38) + 4|0);
	 HEAP32[$next26>>2] = $37;
	 $39 = $new_list;
	 $40 = $tmp_list;
	 $prev27 = (($40) + 8|0);
	 HEAP32[$prev27>>2] = $39;
	 $41 = $tmp_list;
	 $42 = $list$addr;
	 $cmp28 = ($41|0)==($42|0);
	 if ($cmp28) {
	  $43 = $new_list;
	  $retval = $43;
	  $45 = $retval;
	  STACKTOP = sp;return ($45|0);
	 } else {
	  $44 = $list$addr;
	  $retval = $44;
	  $45 = $retval;
	  STACKTOP = sp;return ($45|0);
	 }
	 return 0|0;
	}
	function _xmmsv_bitbuffer_serialize_value($bb,$v) {
	 $bb = $bb|0;
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $bb$addr = 0, $call = 0, $call1 = 0, $call2 = 0, $conv = 0, $retval = 0, $type = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $v$addr = $v;
	 $0 = $v$addr;
	 $call = (_xmmsv_get_type($0)|0);
	 $type = $call;
	 $1 = $bb$addr;
	 $2 = $type;
	 $call1 = (__internal_put_on_bb_int32($1,$2)|0);
	 if ($call1) {
	  $3 = $bb$addr;
	  $4 = $type;
	  $5 = $v$addr;
	  $call2 = (__internal_put_on_bb_value_of_type($3,$4,$5)|0);
	  $conv = $call2&1;
	  $retval = $conv;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function __internal_put_on_bb_int32($bb,$v) {
	 $bb = $bb|0;
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $bb$addr = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $v$addr = $v;
	 $0 = $bb$addr;
	 $1 = $v$addr;
	 $2 = ($1|0)<(0);
	 $3 = $2 << 31 >> 31;
	 $4 = (_xmmsv_bitbuffer_put_bits($0,32,$1,$3)|0);
	 $tobool = ($4|0)!=(0);
	 STACKTOP = sp;return ($tobool|0);
	}
	function __internal_put_on_bb_value_of_type($bb,$type,$v) {
	 $bb = $bb|0;
	 $type = $type|0;
	 $v = $v|0;
	 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
	 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0, $bc = 0;
	 var $bl = 0, $call = 0, $call1 = 0, $call10 = 0, $call14 = 0, $call17 = 0, $call21 = 0, $call24 = 0, $call27 = 0, $call3 = 0, $call31 = 0, $call34 = 0, $call37 = 0, $f = 0, $frombool = 0, $frombool15 = 0, $frombool22 = 0, $frombool25 = 0, $frombool32 = 0, $frombool35 = 0;
	 var $frombool38 = 0, $frombool8 = 0, $i = 0, $ret = 0, $retval = 0, $s = 0, $tobool = 0, $tobool11 = 0, $tobool18 = 0, $tobool28 = 0, $tobool4 = 0, $tobool40 = 0, $tobool40$expand_i1_val = 0, $type$addr = 0, $v$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $i = sp + 8|0;
	 $f = sp + 32|0;
	 $s = sp + 20|0;
	 $bc = sp + 16|0;
	 $bl = sp + 40|0;
	 $bb$addr = $bb;
	 $type$addr = $type;
	 $v$addr = $v;
	 $ret = 1;
	 $0 = $type$addr;
	 L1: do {
	  switch ($0|0) {
	  case 1:  {
	   $1 = $v$addr;
	   $call = (_xmmsv_get_error($1,$s)|0);
	   $tobool = ($call|0)!=(0);
	   if ($tobool) {
	    $2 = $bb$addr;
	    $3 = HEAP32[$s>>2]|0;
	    $call1 = (__internal_put_on_bb_error($2,$3)|0);
	    $frombool = $call1&1;
	    $ret = $frombool;
	    break L1;
	   }
	   $$expand_i1_val = 0;
	   $retval = $$expand_i1_val;
	   $$pre_trunc = $retval;
	   $30 = $$pre_trunc&1;
	   STACKTOP = sp;return ($30|0);
	   break;
	  }
	  case 2:  {
	   $4 = $v$addr;
	   $call3 = (_xmmsv_get_int32($4,$i)|0);
	   $tobool4 = ($call3|0)!=(0);
	   if ($tobool4) {
	    $5 = $bb$addr;
	    $6 = $i;
	    $7 = $6;
	    $8 = HEAP32[$7>>2]|0;
	    $9 = (($6) + 4)|0;
	    $10 = $9;
	    $11 = HEAP32[$10>>2]|0;
	    $12 = (__internal_put_on_bb_int64($5,$8,$11)|0);
	    $frombool8 = $12&1;
	    $ret = $frombool8;
	    break L1;
	   }
	   $$expand_i1_val3 = 0;
	   $retval = $$expand_i1_val3;
	   $$pre_trunc = $retval;
	   $30 = $$pre_trunc&1;
	   STACKTOP = sp;return ($30|0);
	   break;
	  }
	  case 9:  {
	   $13 = $v$addr;
	   $call10 = (_xmmsv_get_float($13,$f)|0);
	   $tobool11 = ($call10|0)!=(0);
	   if ($tobool11) {
	    $14 = $bb$addr;
	    $15 = +HEAPF32[$f>>2];
	    $call14 = (__internal_put_on_bb_float($14,$15)|0);
	    $frombool15 = $call14&1;
	    $ret = $frombool15;
	    break L1;
	   }
	   $$expand_i1_val5 = 0;
	   $retval = $$expand_i1_val5;
	   $$pre_trunc = $retval;
	   $30 = $$pre_trunc&1;
	   STACKTOP = sp;return ($30|0);
	   break;
	  }
	  case 3:  {
	   $16 = $v$addr;
	   $call17 = (_xmmsv_get_string($16,$s)|0);
	   $tobool18 = ($call17|0)!=(0);
	   if ($tobool18) {
	    $17 = $bb$addr;
	    $18 = HEAP32[$s>>2]|0;
	    $call21 = (__internal_put_on_bb_string($17,$18)|0);
	    $frombool22 = $call21&1;
	    $ret = $frombool22;
	    break L1;
	   }
	   $$expand_i1_val7 = 0;
	   $retval = $$expand_i1_val7;
	   $$pre_trunc = $retval;
	   $30 = $$pre_trunc&1;
	   STACKTOP = sp;return ($30|0);
	   break;
	  }
	  case 4:  {
	   $19 = $bb$addr;
	   $20 = $v$addr;
	   $call24 = (__internal_put_on_bb_collection($19,$20)|0);
	   $frombool25 = $call24&1;
	   $ret = $frombool25;
	   break;
	  }
	  case 5:  {
	   $21 = $v$addr;
	   $call27 = (_xmmsv_get_bin($21,$bc,$bl)|0);
	   $tobool28 = ($call27|0)!=(0);
	   if ($tobool28) {
	    $22 = $bb$addr;
	    $23 = HEAP32[$bc>>2]|0;
	    $24 = HEAP32[$bl>>2]|0;
	    $call31 = (__internal_put_on_bb_bin($22,$23,$24)|0);
	    $frombool32 = $call31&1;
	    $ret = $frombool32;
	    break L1;
	   }
	   $$expand_i1_val9 = 0;
	   $retval = $$expand_i1_val9;
	   $$pre_trunc = $retval;
	   $30 = $$pre_trunc&1;
	   STACKTOP = sp;return ($30|0);
	   break;
	  }
	  case 6:  {
	   $25 = $bb$addr;
	   $26 = $v$addr;
	   $call34 = (__internal_put_on_bb_value_list($25,$26)|0);
	   $frombool35 = $call34&1;
	   $ret = $frombool35;
	   break;
	  }
	  case 0:  {
	   break;
	  }
	  case 7:  {
	   $27 = $bb$addr;
	   $28 = $v$addr;
	   $call37 = (__internal_put_on_bb_value_dict($27,$28)|0);
	   $frombool38 = $call37&1;
	   $ret = $frombool38;
	   break;
	  }
	  default: {
	   HEAP32[$vararg_buffer>>2] = 368;
	   $vararg_ptr1 = (($vararg_buffer) + 4|0);
	   HEAP32[$vararg_ptr1>>2] = 408;
	   _xmmsc_log(0,2,136,$vararg_buffer);
	   $$expand_i1_val11 = 0;
	   $retval = $$expand_i1_val11;
	   $$pre_trunc = $retval;
	   $30 = $$pre_trunc&1;
	   STACKTOP = sp;return ($30|0);
	  }
	  }
	 } while(0);
	 $29 = $ret;
	 $tobool40 = $29&1;
	 $tobool40$expand_i1_val = $tobool40&1;
	 $retval = $tobool40$expand_i1_val;
	 $$pre_trunc = $retval;
	 $30 = $$pre_trunc&1;
	 STACKTOP = sp;return ($30|0);
	}
	function _xmmsv_bitbuffer_deserialize_value($bb,$val) {
	 $bb = $bb|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $bb$addr = 0, $call = 0, $call1 = 0, $conv = 0, $retval = 0, $type = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $type = sp;
	 $bb$addr = $bb;
	 $val$addr = $val;
	 $0 = $bb$addr;
	 $call = (__internal_get_from_bb_int32($0,$type)|0);
	 if ($call) {
	  $1 = $bb$addr;
	  $2 = HEAP32[$type>>2]|0;
	  $3 = $val$addr;
	  $call1 = (__internal_get_from_bb_value_of_type_alloc($1,$2,$3)|0);
	  $conv = $call1&1;
	  $retval = $conv;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function __internal_get_from_bb_int32($bb,$v) {
	 $bb = $bb|0;
	 $v = $v|0;
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
	 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
	 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0, $call = 0, $raw_val = 0, $retval = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $raw_val = sp;
	 $bb$addr = $bb;
	 $v$addr = $v;
	 $0 = $bb$addr;
	 $call = (_xmmsv_bitbuffer_get_bits($0,32,$raw_val)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $$expand_i1_val2 = 0;
	  $retval = $$expand_i1_val2;
	  $$pre_trunc = $retval;
	  $44 = $$pre_trunc&1;
	  STACKTOP = sp;return ($44|0);
	 }
	 $1 = $raw_val;
	 $2 = $1;
	 $3 = HEAP32[$2>>2]|0;
	 $4 = (($1) + 4)|0;
	 $5 = $4;
	 $6 = HEAP32[$5>>2]|0;
	 $7 = (0)<($6|0);
	 $8 = (0)==($6|0);
	 $9 = (2147483647)<($3>>>0);
	 $10 = $8 & $9;
	 $11 = $7 | $10;
	 if ($11) {
	  $19 = 0;$22 = 2147483647;
	 } else {
	  $12 = $raw_val;
	  $13 = $12;
	  $14 = HEAP32[$13>>2]|0;
	  $15 = (($12) + 4)|0;
	  $16 = $15;
	  $17 = HEAP32[$16>>2]|0;
	  $19 = $17;$22 = $14;
	 }
	 $18 = (-1)>($19|0);
	 $20 = (-1)==($19|0);
	 $21 = (2147483648)>($22>>>0);
	 $23 = $20 & $21;
	 $24 = $18 | $23;
	 if ($24) {
	  $43 = -2147483648;$45 = -1;
	 } else {
	  $25 = $raw_val;
	  $26 = $25;
	  $27 = HEAP32[$26>>2]|0;
	  $28 = (($25) + 4)|0;
	  $29 = $28;
	  $30 = HEAP32[$29>>2]|0;
	  $31 = (0)<($30|0);
	  $32 = (0)==($30|0);
	  $33 = (2147483647)<($27>>>0);
	  $34 = $32 & $33;
	  $35 = $31 | $34;
	  if ($35) {
	   $46 = 2147483647;$47 = 0;
	  } else {
	   $36 = $raw_val;
	   $37 = $36;
	   $38 = HEAP32[$37>>2]|0;
	   $39 = (($36) + 4)|0;
	   $40 = $39;
	   $41 = HEAP32[$40>>2]|0;
	   $46 = $38;$47 = $41;
	  }
	  $43 = $46;$45 = $47;
	 }
	 $42 = $v$addr;
	 HEAP32[$42>>2] = $43;
	 $$expand_i1_val = 1;
	 $retval = $$expand_i1_val;
	 $$pre_trunc = $retval;
	 $44 = $$pre_trunc&1;
	 STACKTOP = sp;return ($44|0);
	}
	function __internal_get_from_bb_value_of_type_alloc($bb,$type,$val) {
	 $bb = $bb|0;
	 $type = $type|0;
	 $val = $val|0;
	 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val15 = 0, $$expand_i1_val17 = 0, $$expand_i1_val19 = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0;
	 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0;
	 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0, $call = 0, $call1 = 0, $call11 = 0, $call13 = 0, $call16 = 0, $call18 = 0, $call22 = 0, $call26 = 0, $call3 = 0, $call30 = 0, $call33 = 0, $call35 = 0, $call8 = 0, $d = 0;
	 var $f = 0, $i = 0, $len = 0, $retval = 0, $s = 0, $type$addr = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $i = sp;
	 $f = sp + 40|0;
	 $len = sp + 16|0;
	 $s = sp + 36|0;
	 $d = sp + 24|0;
	 $bb$addr = $bb;
	 $type$addr = $type;
	 $val$addr = $val;
	 $0 = $type$addr;
	 L1: do {
	  switch ($0|0) {
	  case 1:  {
	   $1 = $bb$addr;
	   $call = (__internal_get_from_bb_error_alloc($1,$s,$len)|0);
	   if ($call) {
	    $2 = HEAP32[$s>>2]|0;
	    $call1 = (_xmmsv_new_error($2)|0);
	    $3 = $val$addr;
	    HEAP32[$3>>2] = $call1;
	    $4 = HEAP32[$s>>2]|0;
	    _free($4);
	    label = 28;
	    break L1;
	   } else {
	    $$expand_i1_val = 0;
	    $retval = $$expand_i1_val;
	    break L1;
	   }
	   break;
	  }
	  case 2:  {
	   $5 = $bb$addr;
	   $call3 = (__internal_get_from_bb_int64($5,$i)|0);
	   if ($call3) {
	    $6 = $i;
	    $7 = $6;
	    $8 = HEAP32[$7>>2]|0;
	    $9 = (($6) + 4)|0;
	    $10 = $9;
	    $11 = HEAP32[$10>>2]|0;
	    $12 = (_xmmsv_new_int($8,$11)|0);
	    $13 = $val$addr;
	    HEAP32[$13>>2] = $12;
	    label = 28;
	    break L1;
	   } else {
	    $$expand_i1_val3 = 0;
	    $retval = $$expand_i1_val3;
	    break L1;
	   }
	   break;
	  }
	  case 9:  {
	   $14 = $bb$addr;
	   $call8 = (__internal_get_from_bb_float($14,$f)|0);
	   if ($call8) {
	    $15 = +HEAPF32[$f>>2];
	    $call11 = (_xmmsv_new_float($15)|0);
	    $16 = $val$addr;
	    HEAP32[$16>>2] = $call11;
	    label = 28;
	    break L1;
	   } else {
	    $$expand_i1_val5 = 0;
	    $retval = $$expand_i1_val5;
	    break L1;
	   }
	   break;
	  }
	  case 3:  {
	   $17 = $bb$addr;
	   $call13 = (__internal_get_from_bb_string_alloc($17,$s,$len)|0);
	   if ($call13) {
	    $18 = HEAP32[$s>>2]|0;
	    $call16 = (_xmmsv_new_string($18)|0);
	    $19 = $val$addr;
	    HEAP32[$19>>2] = $call16;
	    $20 = HEAP32[$s>>2]|0;
	    _free($20);
	    label = 28;
	    break L1;
	   } else {
	    $$expand_i1_val7 = 0;
	    $retval = $$expand_i1_val7;
	    break L1;
	   }
	   break;
	  }
	  case 7:  {
	   $21 = $bb$addr;
	   $22 = $val$addr;
	   $call18 = (__internal_get_from_bb_value_dict_alloc($21,$22)|0);
	   if ($call18) {
	    label = 28;
	    break L1;
	   } else {
	    $$expand_i1_val9 = 0;
	    $retval = $$expand_i1_val9;
	    break L1;
	   }
	   break;
	  }
	  case 6:  {
	   $23 = $bb$addr;
	   $24 = $val$addr;
	   $call22 = (__internal_get_from_bb_value_list_alloc($23,$24)|0);
	   if ($call22) {
	    label = 28;
	    break L1;
	   } else {
	    $$expand_i1_val11 = 0;
	    $retval = $$expand_i1_val11;
	    break L1;
	   }
	   break;
	  }
	  case 4:  {
	   $25 = $bb$addr;
	   $26 = $val$addr;
	   $call26 = (__internal_get_from_bb_collection_alloc($25,$26)|0);
	   if ($call26) {
	    label = 28;
	    break L1;
	   } else {
	    $$expand_i1_val13 = 0;
	    $retval = $$expand_i1_val13;
	    break L1;
	   }
	   break;
	  }
	  case 5:  {
	   $27 = $bb$addr;
	   $call30 = (__internal_get_from_bb_bin_alloc($27,$d,$len)|0);
	   if ($call30) {
	    $28 = HEAP32[$d>>2]|0;
	    $29 = HEAP32[$len>>2]|0;
	    $call33 = (_xmmsv_new_bin($28,$29)|0);
	    $30 = $val$addr;
	    HEAP32[$30>>2] = $call33;
	    $31 = HEAP32[$d>>2]|0;
	    _free($31);
	    label = 28;
	    break L1;
	   } else {
	    $$expand_i1_val15 = 0;
	    $retval = $$expand_i1_val15;
	    break L1;
	   }
	   break;
	  }
	  case 0:  {
	   $call35 = (_xmmsv_new_none()|0);
	   $32 = $val$addr;
	   HEAP32[$32>>2] = $call35;
	   label = 28;
	   break;
	  }
	  default: {
	   HEAP32[$vararg_buffer>>2] = 160;
	   $vararg_ptr1 = (($vararg_buffer) + 4|0);
	   HEAP32[$vararg_ptr1>>2] = 208;
	   _xmmsc_log(0,2,136,$vararg_buffer);
	   $$expand_i1_val17 = 0;
	   $retval = $$expand_i1_val17;
	  }
	  }
	 } while(0);
	 if ((label|0) == 28) {
	  $$expand_i1_val19 = 1;
	  $retval = $$expand_i1_val19;
	 }
	 $$pre_trunc = $retval;
	 $33 = $$pre_trunc&1;
	 STACKTOP = sp;return ($33|0);
	}
	function _xmmsv_serialize($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $bb = 0, $call = 0, $call1 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $div = 0, $res = 0, $retval = 0, $tobool = 0, $tobool2 = 0;
	 var $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $call = (_xmmsv_new_bitbuffer()|0);
	 $bb = $call;
	 $1 = $bb;
	 $2 = $v$addr;
	 $call1 = (_xmmsv_bitbuffer_serialize_value($1,$2)|0);
	 $tobool2 = ($call1|0)!=(0);
	 if ($tobool2) {
	  $4 = $bb;
	  $call5 = (_xmmsv_bitbuffer_buffer($4)|0);
	  $5 = $bb;
	  $call6 = (_xmmsv_bitbuffer_len($5)|0);
	  $div = (($call6|0) / 8)&-1;
	  $call7 = (_xmmsv_new_bin($call5,$div)|0);
	  $res = $call7;
	  $6 = $bb;
	  _xmmsv_unref($6);
	  $7 = $res;
	  $retval = $7;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  $3 = $bb;
	  _xmmsv_unref($3);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmmsv_deserialize($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $bb = 0, $call = 0, $call1 = 0, $call2 = 0, $data = 0, $len = 0, $res = 0, $retval = 0, $tobool = 0, $tobool3 = 0, $v$addr = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res = sp + 8|0;
	 $data = sp + 4|0;
	 $len = sp;
	 $v$addr = $v;
	 $0 = $v$addr;
	 $call = (_xmmsv_get_bin($0,$data,$len)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = HEAP32[$data>>2]|0;
	 $2 = HEAP32[$len>>2]|0;
	 $call1 = (_xmmsv_new_bitbuffer_ro($1,$2)|0);
	 $bb = $call1;
	 $3 = $bb;
	 $call2 = (_xmmsv_bitbuffer_deserialize_value($3,$res)|0);
	 $tobool3 = ($call2|0)!=(0);
	 if ($tobool3) {
	  $5 = $bb;
	  _xmmsv_unref($5);
	  $6 = HEAP32[$res>>2]|0;
	  $retval = $6;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  $4 = $bb;
	  _xmmsv_unref($4);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function __internal_get_from_bb_error_alloc($bb,$buf,$len) {
	 $bb = $bb|0;
	 $buf = $buf|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $bb$addr = 0, $buf$addr = 0, $call = 0, $len$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $0 = $bb$addr;
	 $1 = $buf$addr;
	 $2 = $len$addr;
	 $call = (__internal_get_from_bb_string_alloc($0,$1,$2)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function __internal_get_from_bb_int64($bb,$v) {
	 $bb = $bb|0;
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $bb$addr = 0, $call = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $v$addr = $v;
	 $0 = $bb$addr;
	 $1 = $v$addr;
	 $call = (_xmmsv_bitbuffer_get_bits($0,64,$1)|0);
	 $tobool = ($call|0)!=(0);
	 STACKTOP = sp;return ($tobool|0);
	}
	function __internal_get_from_bb_float($bb,$v) {
	 $bb = $bb|0;
	 $v = $v|0;
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
	 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $bb$addr = 0, $call = 0, $call1 = 0, $call10 = 0.0, $call14 = 0.0;
	 var $cmp = 0, $conv8 = 0.0, $div = 0.0, $div11 = 0.0, $expon = 0, $mant = 0.0, $mant_int = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $mant_int = sp + 8|0;
	 $expon = sp;
	 $bb$addr = $bb;
	 $v$addr = $v;
	 $0 = $bb$addr;
	 $call = (_xmmsv_bitbuffer_get_bits($0,32,$mant_int)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $30 = $$pre_trunc&1;
	  STACKTOP = sp;return ($30|0);
	 }
	 $1 = $bb$addr;
	 $call1 = (_xmmsv_bitbuffer_get_bits($1,32,$expon)|0);
	 $tobool2 = ($call1|0)!=(0);
	 if (!($tobool2)) {
	  $$expand_i1_val2 = 0;
	  $retval = $$expand_i1_val2;
	  $$pre_trunc = $retval;
	  $30 = $$pre_trunc&1;
	  STACKTOP = sp;return ($30|0);
	 }
	 $2 = $mant_int;
	 $3 = $2;
	 $4 = HEAP32[$3>>2]|0;
	 $5 = (($2) + 4)|0;
	 $6 = $5;
	 $7 = HEAP32[$6>>2]|0;
	 $8 = (+($4>>>0)) + (4294967296.0*(+($7|0)));
	 $cmp = $8 > 0.0;
	 if ($cmp) {
	  $9 = $mant_int;
	  $10 = $9;
	  $11 = HEAP32[$10>>2]|0;
	  $12 = (($9) + 4)|0;
	  $13 = $12;
	  $14 = HEAP32[$13>>2]|0;
	  $conv8 = (+($11|0));
	  $div = $conv8 / 2147483648.0;
	  $mant = $div;
	 } else {
	  $15 = $mant_int;
	  $16 = $15;
	  $17 = HEAP32[$16>>2]|0;
	  $18 = (($15) + 4)|0;
	  $19 = $18;
	  $20 = HEAP32[$19>>2]|0;
	  $21 = (+($17>>>0)) + (4294967296.0*(+($20|0)));
	  $call10 = (+Math_abs(-2147483648.0));
	  $div11 = $21 / $call10;
	  $mant = $div11;
	 }
	 $22 = $mant;
	 $23 = $expon;
	 $24 = $23;
	 $25 = HEAP32[$24>>2]|0;
	 $26 = (($23) + 4)|0;
	 $27 = $26;
	 $28 = HEAP32[$27>>2]|0;
	 $call14 = (+_ldexpf($22,$25));
	 $29 = $v$addr;
	 HEAPF32[$29>>2] = $call14;
	 $$expand_i1_val4 = 1;
	 $retval = $$expand_i1_val4;
	 $$pre_trunc = $retval;
	 $30 = $$pre_trunc&1;
	 STACKTOP = sp;return ($30|0);
	}
	function __internal_get_from_bb_string_alloc($bb,$buf,$len) {
	 $bb = $bb|0;
	 $buf = $buf|0;
	 $len = $len|0;
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
	 var $arrayidx = 0, $bb$addr = 0, $buf$addr = 0, $call = 0, $call1 = 0, $call4 = 0, $l = 0, $len$addr = 0, $retval = 0, $str = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $l = sp;
	 $bb$addr = $bb;
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $0 = $bb$addr;
	 $call = (__internal_get_from_bb_int32_positive($0,$l)|0);
	 do {
	  if ($call) {
	   $1 = HEAP32[$l>>2]|0;
	   $add = (($1) + 1)|0;
	   $call1 = (_malloc($add)|0);
	   $str = $call1;
	   $2 = $str;
	   $tobool = ($2|0)!=(0|0);
	   if (!($tobool)) {
	    $$expand_i1_val2 = 0;
	    $retval = $$expand_i1_val2;
	    break;
	   }
	   $3 = $bb$addr;
	   $4 = $str;
	   $5 = HEAP32[$l>>2]|0;
	   $call4 = (__internal_get_from_bb_data($3,$4,$5)|0);
	   if ($call4) {
	    $7 = HEAP32[$l>>2]|0;
	    $8 = $str;
	    $arrayidx = (($8) + ($7)|0);
	    HEAP8[$arrayidx>>0] = 0;
	    $9 = $str;
	    $10 = $buf$addr;
	    HEAP32[$10>>2] = $9;
	    $11 = HEAP32[$l>>2]|0;
	    $12 = $len$addr;
	    HEAP32[$12>>2] = $11;
	    $$expand_i1_val6 = 1;
	    $retval = $$expand_i1_val6;
	    break;
	   } else {
	    $6 = $str;
	    _free($6);
	    $$expand_i1_val4 = 0;
	    $retval = $$expand_i1_val4;
	    break;
	   }
	  } else {
	   $$expand_i1_val = 0;
	   $retval = $$expand_i1_val;
	  }
	 } while(0);
	 $$pre_trunc = $retval;
	 $13 = $$pre_trunc&1;
	 STACKTOP = sp;return ($13|0);
	}
	function __internal_get_from_bb_value_dict_alloc($bb,$val) {
	 $bb = $bb|0;
	 $val = $val|0;
	 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0, $call = 0, $call1 = 0;
	 var $call2 = 0, $call5 = 0, $dec = 0, $dict = 0, $ignore = 0, $key = 0, $len = 0, $retval = 0, $tobool = 0, $tobool6 = 0, $v = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $len = sp + 8|0;
	 $ignore = sp + 16|0;
	 $key = sp + 20|0;
	 $v = sp + 32|0;
	 $bb$addr = $bb;
	 $val$addr = $val;
	 $call = (_xmmsv_new_dict()|0);
	 $dict = $call;
	 $0 = $bb$addr;
	 $call1 = (__internal_get_from_bb_int32_positive($0,$len)|0);
	 do {
	  if ($call1) {
	   while(1) {
	    $1 = HEAP32[$len>>2]|0;
	    $dec = (($1) + -1)|0;
	    HEAP32[$len>>2] = $dec;
	    $tobool = ($1|0)!=(0);
	    if (!($tobool)) {
	     label = 10;
	     break;
	    }
	    $2 = $bb$addr;
	    $call2 = (__internal_get_from_bb_string_alloc($2,$key,$ignore)|0);
	    if (!($call2)) {
	     label = 6;
	     break;
	    }
	    $3 = $bb$addr;
	    $call5 = (_xmmsv_bitbuffer_deserialize_value($3,$v)|0);
	    $tobool6 = ($call5|0)!=(0);
	    if (!($tobool6)) {
	     label = 8;
	     break;
	    }
	    $5 = $dict;
	    $6 = HEAP32[$key>>2]|0;
	    $7 = HEAP32[$v>>2]|0;
	    (_xmmsv_dict_set($5,$6,$7)|0);
	    $8 = HEAP32[$key>>2]|0;
	    _free($8);
	    $9 = HEAP32[$v>>2]|0;
	    _xmmsv_unref($9);
	   }
	   if ((label|0) == 6) {
	    break;
	   }
	   else if ((label|0) == 8) {
	    $4 = HEAP32[$key>>2]|0;
	    _free($4);
	    break;
	   }
	   else if ((label|0) == 10) {
	    $10 = $dict;
	    $11 = $val$addr;
	    HEAP32[$11>>2] = $10;
	    $$expand_i1_val = 1;
	    $retval = $$expand_i1_val;
	    $$pre_trunc = $retval;
	    $13 = $$pre_trunc&1;
	    STACKTOP = sp;return ($13|0);
	   }
	  } else {
	  }
	 } while(0);
	 HEAP32[$vararg_buffer>>2] = 328;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAP32[$vararg_ptr1>>2] = 280;
	 _xmmsc_log(0,2,136,$vararg_buffer);
	 $12 = $dict;
	 _xmmsv_unref($12);
	 $$expand_i1_val3 = 0;
	 $retval = $$expand_i1_val3;
	 $$pre_trunc = $retval;
	 $13 = $$pre_trunc&1;
	 STACKTOP = sp;return ($13|0);
	}
	function __internal_get_from_bb_value_list_alloc($bb,$val) {
	 $bb = $bb|0;
	 $val = $val|0;
	 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
	 var $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0, $call = 0, $call1 = 0, $call16 = 0, $call2 = 0, $call7 = 0, $cmp = 0, $dec = 0, $dec12 = 0, $len = 0, $list = 0, $retval = 0, $tobool = 0, $tobool13 = 0, $tobool17 = 0, $type = 0, $v = 0;
	 var $v15 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $len = sp + 8|0;
	 $type = sp + 16|0;
	 $v = sp + 20|0;
	 $v15 = sp + 32|0;
	 $bb$addr = $bb;
	 $val$addr = $val;
	 $call = (_xmmsv_new_list()|0);
	 $list = $call;
	 $0 = $bb$addr;
	 $call1 = (__internal_get_from_bb_int32_positive($0,$type)|0);
	 L1: do {
	  if ($call1) {
	   $1 = $bb$addr;
	   $call2 = (__internal_get_from_bb_int32_positive($1,$len)|0);
	   if (!($call2)) {
	    break;
	   }
	   $2 = HEAP32[$type>>2]|0;
	   $cmp = ($2|0)!=(0);
	   do {
	    if ($cmp) {
	     $3 = $list;
	     $4 = HEAP32[$type>>2]|0;
	     (_xmmsv_list_restrict_type($3,$4)|0);
	     while(1) {
	      $5 = HEAP32[$len>>2]|0;
	      $dec = (($5) + -1)|0;
	      HEAP32[$len>>2] = $dec;
	      $tobool = ($5|0)!=(0);
	      if (!($tobool)) {
	       label = 11;
	       break;
	      }
	      $6 = $bb$addr;
	      $7 = HEAP32[$type>>2]|0;
	      $call7 = (__internal_get_from_bb_value_of_type_alloc($6,$7,$v)|0);
	      if (!($call7)) {
	       label = 9;
	       break;
	      }
	      $8 = $list;
	      $9 = HEAP32[$v>>2]|0;
	      (_xmmsv_list_append($8,$9)|0);
	      $10 = HEAP32[$v>>2]|0;
	      _xmmsv_unref($10);
	     }
	     if ((label|0) == 9) {
	      break L1;
	     }
	     else if ((label|0) == 11) {
	      break;
	     }
	    } else {
	     while(1) {
	      $11 = HEAP32[$len>>2]|0;
	      $dec12 = (($11) + -1)|0;
	      HEAP32[$len>>2] = $dec12;
	      $tobool13 = ($11|0)!=(0);
	      if (!($tobool13)) {
	       label = 17;
	       break;
	      }
	      $12 = $bb$addr;
	      $call16 = (_xmmsv_bitbuffer_deserialize_value($12,$v15)|0);
	      $tobool17 = ($call16|0)!=(0);
	      if (!($tobool17)) {
	       label = 15;
	       break;
	      }
	      $13 = $list;
	      $14 = HEAP32[$v15>>2]|0;
	      (_xmmsv_list_append($13,$14)|0);
	      $15 = HEAP32[$v15>>2]|0;
	      _xmmsv_unref($15);
	     }
	     if ((label|0) == 15) {
	      break L1;
	     }
	     else if ((label|0) == 17) {
	      break;
	     }
	    }
	   } while(0);
	   $16 = $list;
	   $17 = $val$addr;
	   HEAP32[$17>>2] = $16;
	   $$expand_i1_val = 1;
	   $retval = $$expand_i1_val;
	   $$pre_trunc = $retval;
	   $19 = $$pre_trunc&1;
	   STACKTOP = sp;return ($19|0);
	  } else {
	  }
	 } while(0);
	 HEAP32[$vararg_buffer>>2] = 240;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAP32[$vararg_ptr1>>2] = 280;
	 _xmmsc_log(0,2,136,$vararg_buffer);
	 $18 = $list;
	 _xmmsv_unref($18);
	 $$expand_i1_val3 = 0;
	 $retval = $$expand_i1_val3;
	 $$pre_trunc = $retval;
	 $19 = $$pre_trunc&1;
	 STACKTOP = sp;return ($19|0);
	}
	function __internal_get_from_bb_collection_alloc($bb,$coll) {
	 $bb = $bb|0;
	 $coll = $coll|0;
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
	 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0, $call = 0, $call1 = 0, $call2 = 0, $call5 = 0, $call8 = 0, $coll$addr = 0, $dict = 0, $list = 0, $retval = 0, $type = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $dict = sp + 8|0;
	 $list = sp + 4|0;
	 $type = sp;
	 $bb$addr = $bb;
	 $coll$addr = $coll;
	 $0 = $bb$addr;
	 $call = (__internal_get_from_bb_int32_positive($0,$type)|0);
	 if (!($call)) {
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $20 = $$pre_trunc&1;
	  STACKTOP = sp;return ($20|0);
	 }
	 $1 = HEAP32[$type>>2]|0;
	 $call1 = (_xmmsv_new_coll($1)|0);
	 $2 = $coll$addr;
	 HEAP32[$2>>2] = $call1;
	 $3 = $bb$addr;
	 $call2 = (__internal_get_from_bb_value_dict_alloc($3,$dict)|0);
	 do {
	  if ($call2) {
	   $4 = $coll$addr;
	   $5 = HEAP32[$4>>2]|0;
	   $6 = HEAP32[$dict>>2]|0;
	   _xmmsv_coll_attributes_set($5,$6);
	   $7 = HEAP32[$dict>>2]|0;
	   _xmmsv_unref($7);
	   $8 = $bb$addr;
	   $call5 = (__internal_get_from_bb_value_list_alloc($8,$list)|0);
	   if (!($call5)) {
	    break;
	   }
	   $9 = $coll$addr;
	   $10 = HEAP32[$9>>2]|0;
	   $11 = HEAP32[$list>>2]|0;
	   _xmmsv_coll_idlist_set($10,$11);
	   $12 = HEAP32[$list>>2]|0;
	   _xmmsv_unref($12);
	   $13 = $bb$addr;
	   $call8 = (__internal_get_from_bb_value_list_alloc($13,$list)|0);
	   if (!($call8)) {
	    break;
	   }
	   $14 = $coll$addr;
	   $15 = HEAP32[$14>>2]|0;
	   $16 = HEAP32[$list>>2]|0;
	   _xmmsv_coll_operands_set($15,$16);
	   $17 = HEAP32[$list>>2]|0;
	   _xmmsv_unref($17);
	   $$expand_i1_val2 = 1;
	   $retval = $$expand_i1_val2;
	   $$pre_trunc = $retval;
	   $20 = $$pre_trunc&1;
	   STACKTOP = sp;return ($20|0);
	  } else {
	  }
	 } while(0);
	 $18 = $coll$addr;
	 $19 = HEAP32[$18>>2]|0;
	 _xmmsv_unref($19);
	 $$expand_i1_val4 = 0;
	 $retval = $$expand_i1_val4;
	 $$pre_trunc = $retval;
	 $20 = $$pre_trunc&1;
	 STACKTOP = sp;return ($20|0);
	}
	function __internal_get_from_bb_bin_alloc($bb,$buf,$len) {
	 $bb = $bb|0;
	 $buf = $buf|0;
	 $len = $len|0;
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $bb$addr = 0, $buf$addr = 0;
	 var $call = 0, $call1 = 0, $call4 = 0, $l = 0, $len$addr = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $l = sp;
	 $bb$addr = $bb;
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $0 = $bb$addr;
	 $call = (__internal_get_from_bb_int32_positive($0,$l)|0);
	 do {
	  if ($call) {
	   $1 = HEAP32[$l>>2]|0;
	   $call1 = (_malloc($1)|0);
	   $b = $call1;
	   $2 = $b;
	   $tobool = ($2|0)!=(0|0);
	   if (!($tobool)) {
	    $$expand_i1_val2 = 0;
	    $retval = $$expand_i1_val2;
	    break;
	   }
	   $3 = $bb$addr;
	   $4 = $b;
	   $5 = HEAP32[$l>>2]|0;
	   $call4 = (__internal_get_from_bb_data($3,$4,$5)|0);
	   if ($call4) {
	    $7 = $b;
	    $8 = $buf$addr;
	    HEAP32[$8>>2] = $7;
	    $9 = HEAP32[$l>>2]|0;
	    $10 = $len$addr;
	    HEAP32[$10>>2] = $9;
	    $$expand_i1_val6 = 1;
	    $retval = $$expand_i1_val6;
	    break;
	   } else {
	    $6 = $b;
	    _free($6);
	    $$expand_i1_val4 = 0;
	    $retval = $$expand_i1_val4;
	    break;
	   }
	  } else {
	   $$expand_i1_val = 0;
	   $retval = $$expand_i1_val;
	  }
	 } while(0);
	 $$pre_trunc = $retval;
	 $11 = $$pre_trunc&1;
	 STACKTOP = sp;return ($11|0);
	}
	function __internal_get_from_bb_int32_positive($bb,$v) {
	 $bb = $bb|0;
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $bb$addr = 0, $call = 0, $cmp = 0, $frombool = 0, $ret = 0, $tobool = 0, $tobool1 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $v$addr = $v;
	 $0 = $bb$addr;
	 $1 = $v$addr;
	 $call = (__internal_get_from_bb_int32($0,$1)|0);
	 $frombool = $call&1;
	 $ret = $frombool;
	 $2 = $ret;
	 $tobool = $2&1;
	 if ($tobool) {
	  $3 = $v$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $cmp = ($4|0)<(0);
	  if ($cmp) {
	   $ret = 0;
	  }
	 }
	 $5 = $ret;
	 $tobool1 = $5&1;
	 STACKTOP = sp;return ($tobool1|0);
	}
	function __internal_get_from_bb_data($bb,$buf,$len) {
	 $bb = $bb|0;
	 $buf = $buf|0;
	 $len = $len|0;
	 var $$expand_i1_val = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $bb$addr = 0, $buf$addr = 0, $call = 0, $len$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool1$expand_i1_val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $0 = $bb$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $bb$addr;
	  $2 = $buf$addr;
	  $3 = $len$addr;
	  $call = (_xmmsv_bitbuffer_get_data($1,$2,$3)|0);
	  $tobool1 = ($call|0)!=(0);
	  $tobool1$expand_i1_val = $tobool1&1;
	  $retval = $tobool1$expand_i1_val;
	  $$pre_trunc = $retval;
	  $4 = $$pre_trunc&1;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $4 = $$pre_trunc&1;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function __internal_put_on_bb_error($bb,$errmsg) {
	 $bb = $bb|0;
	 $errmsg = $errmsg|0;
	 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add11 = 0, $bb$addr = 0, $call10 = 0, $call12 = 0, $call5 = 0;
	 var $errmsg$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool13 = 0, $tobool13$expand_i1_val = 0, $tobool3 = 0, $tobool3$expand_i1_val = 0, $tobool7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $errmsg$addr = $errmsg;
	 $0 = $bb$addr;
	 $tobool = ($0|0)!=(0|0);
	 do {
	  if ($tobool) {
	   $1 = $errmsg$addr;
	   $tobool1 = ($1|0)!=(0|0);
	   if (!($tobool1)) {
	    $2 = $bb$addr;
	    $3 = (_xmmsv_bitbuffer_put_bits($2,32,0,0)|0);
	    $tobool3 = ($3|0)!=(0);
	    $tobool3$expand_i1_val = $tobool3&1;
	    $retval = $tobool3$expand_i1_val;
	    break;
	   }
	   $4 = $bb$addr;
	   $5 = $errmsg$addr;
	   $call5 = (_strlen(($5|0))|0);
	   $add = (($call5) + 1)|0;
	   $6 = (_xmmsv_bitbuffer_put_bits($4,32,$add,0)|0);
	   $tobool7 = ($6|0)!=(0);
	   if ($tobool7) {
	    $7 = $bb$addr;
	    $8 = $errmsg$addr;
	    $9 = $errmsg$addr;
	    $call10 = (_strlen(($9|0))|0);
	    $add11 = (($call10) + 1)|0;
	    $call12 = (_xmmsv_bitbuffer_put_data($7,$8,$add11)|0);
	    $tobool13 = ($call12|0)!=(0);
	    $tobool13$expand_i1_val = $tobool13&1;
	    $retval = $tobool13$expand_i1_val;
	    break;
	   } else {
	    $$expand_i1_val3 = 0;
	    $retval = $$expand_i1_val3;
	    break;
	   }
	  } else {
	   $$expand_i1_val = 1;
	   $retval = $$expand_i1_val;
	  }
	 } while(0);
	 $$pre_trunc = $retval;
	 $10 = $$pre_trunc&1;
	 STACKTOP = sp;return ($10|0);
	}
	function __internal_put_on_bb_int64($bb,$0,$1) {
	 $bb = $bb|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = sp;
	 $bb$addr = $bb;
	 $2 = $v$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $bb$addr;
	 $7 = $v$addr;
	 $8 = $7;
	 $9 = HEAP32[$8>>2]|0;
	 $10 = (($7) + 4)|0;
	 $11 = $10;
	 $12 = HEAP32[$11>>2]|0;
	 $13 = (_xmmsv_bitbuffer_put_bits($6,64,$9,$12)|0);
	 $tobool = ($13|0)!=(0);
	 STACKTOP = sp;return ($tobool|0);
	}
	function __internal_put_on_bb_float($bb,$v) {
	 $bb = $bb|0;
	 $v = +$v;
	 var $$expand_i1_val = 0, $$pre_trunc = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
	 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $bb$addr = 0, $call = 0.0, $call1 = 0.0, $cmp = 0, $expon = 0, $mant = 0.0, $mant_int = 0, $mul = 0.0;
	 var $mul2 = 0.0, $retval = 0, $tobool = 0, $tobool9 = 0, $tobool9$expand_i1_val = 0, $v$addr = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $mant_int = sp;
	 $expon = sp + 12|0;
	 $bb$addr = $bb;
	 $v$addr = $v;
	 $0 = $v$addr;
	 $call = (+_frexpf($0,$expon));
	 $mant = $call;
	 $1 = $mant;
	 $cmp = $1 > 0.0;
	 if ($cmp) {
	  $2 = $mant;
	  $mul = $2 * 2147483648.0;
	  $3 = (~~$mul)>>>0;
	  $4 = +Math_abs($mul) >= 1.0 ? $mul > 0.0 ? (Math_min(+Math_floor($mul / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul - +(~~$mul >>> 0)) / 4294967296.0) >>> 0 : 0;
	  $5 = $mant_int;
	  $6 = $5;
	  HEAP32[$6>>2] = $3;
	  $7 = (($5) + 4)|0;
	  $8 = $7;
	  HEAP32[$8>>2] = $4;
	 } else {
	  $9 = $mant;
	  $call1 = (+Math_abs(-2147483648.0));
	  $mul2 = $9 * $call1;
	  $10 = (~~$mul2)>>>0;
	  $11 = +Math_abs($mul2) >= 1.0 ? $mul2 > 0.0 ? (Math_min(+Math_floor($mul2 / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil(($mul2 - +(~~$mul2 >>> 0)) / 4294967296.0) >>> 0 : 0;
	  $12 = $mant_int;
	  $13 = $12;
	  HEAP32[$13>>2] = $10;
	  $14 = (($12) + 4)|0;
	  $15 = $14;
	  HEAP32[$15>>2] = $11;
	 }
	 $16 = $bb$addr;
	 $17 = $mant_int;
	 $18 = $17;
	 $19 = HEAP32[$18>>2]|0;
	 $20 = (($17) + 4)|0;
	 $21 = $20;
	 $22 = HEAP32[$21>>2]|0;
	 $23 = (_xmmsv_bitbuffer_put_bits($16,32,$19,$22)|0);
	 $tobool = ($23|0)!=(0);
	 if ($tobool) {
	  $24 = $bb$addr;
	  $25 = HEAP32[$expon>>2]|0;
	  $26 = ($25|0)<(0);
	  $27 = $26 << 31 >> 31;
	  $28 = (_xmmsv_bitbuffer_put_bits($24,32,$25,$27)|0);
	  $tobool9 = ($28|0)!=(0);
	  $tobool9$expand_i1_val = $tobool9&1;
	  $retval = $tobool9$expand_i1_val;
	  $$pre_trunc = $retval;
	  $29 = $$pre_trunc&1;
	  STACKTOP = sp;return ($29|0);
	 } else {
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $29 = $$pre_trunc&1;
	  STACKTOP = sp;return ($29|0);
	 }
	 return 0|0;
	}
	function __internal_put_on_bb_string($bb,$str) {
	 $bb = $bb|0;
	 $str = $str|0;
	 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add11 = 0, $bb$addr = 0, $call10 = 0, $call12 = 0, $call5 = 0;
	 var $retval = 0, $str$addr = 0, $tobool = 0, $tobool1 = 0, $tobool13 = 0, $tobool13$expand_i1_val = 0, $tobool3 = 0, $tobool3$expand_i1_val = 0, $tobool7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $str$addr = $str;
	 $0 = $bb$addr;
	 $tobool = ($0|0)!=(0|0);
	 do {
	  if ($tobool) {
	   $1 = $str$addr;
	   $tobool1 = ($1|0)!=(0|0);
	   if (!($tobool1)) {
	    $2 = $bb$addr;
	    $3 = (_xmmsv_bitbuffer_put_bits($2,32,0,0)|0);
	    $tobool3 = ($3|0)!=(0);
	    $tobool3$expand_i1_val = $tobool3&1;
	    $retval = $tobool3$expand_i1_val;
	    break;
	   }
	   $4 = $bb$addr;
	   $5 = $str$addr;
	   $call5 = (_strlen(($5|0))|0);
	   $add = (($call5) + 1)|0;
	   $6 = (_xmmsv_bitbuffer_put_bits($4,32,$add,0)|0);
	   $tobool7 = ($6|0)!=(0);
	   if ($tobool7) {
	    $7 = $bb$addr;
	    $8 = $str$addr;
	    $9 = $str$addr;
	    $call10 = (_strlen(($9|0))|0);
	    $add11 = (($call10) + 1)|0;
	    $call12 = (_xmmsv_bitbuffer_put_data($7,$8,$add11)|0);
	    $tobool13 = ($call12|0)!=(0);
	    $tobool13$expand_i1_val = $tobool13&1;
	    $retval = $tobool13$expand_i1_val;
	    break;
	   } else {
	    $$expand_i1_val3 = 0;
	    $retval = $$expand_i1_val3;
	    break;
	   }
	  } else {
	   $$expand_i1_val = 0;
	   $retval = $$expand_i1_val;
	  }
	 } while(0);
	 $$pre_trunc = $retval;
	 $10 = $$pre_trunc&1;
	 STACKTOP = sp;return ($10|0);
	}
	function __internal_put_on_bb_collection($bb,$coll) {
	 $bb = $bb|0;
	 $coll = $coll|0;
	 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
	 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call14 = 0, $call17 = 0, $call20 = 0, $call23 = 0, $call24 = 0, $call6 = 0, $call7 = 0, $coll$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool15 = 0;
	 var $tobool3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $coll$addr = $coll;
	 $0 = $bb$addr;
	 $tobool = ($0|0)!=(0|0);
	 L1: do {
	  if ($tobool) {
	   $1 = $coll$addr;
	   $tobool1 = ($1|0)!=(0|0);
	   if ($tobool1) {
	    $2 = $bb$addr;
	    $3 = $coll$addr;
	    $call = (_xmmsv_coll_get_type($3)|0);
	    $4 = (_xmmsv_bitbuffer_put_bits($2,32,$call,0)|0);
	    $tobool3 = ($4|0)!=(0);
	    if (!($tobool3)) {
	     $$expand_i1_val2 = 0;
	     $retval = $$expand_i1_val2;
	     break;
	    }
	    $5 = $bb$addr;
	    $6 = $coll$addr;
	    $call6 = (_xmmsv_coll_attributes_get($6)|0);
	    $call7 = (__internal_put_on_bb_value_dict($5,$call6)|0);
	    if (!($call7)) {
	     $$expand_i1_val4 = 0;
	     $retval = $$expand_i1_val4;
	     break;
	    }
	    $7 = $bb$addr;
	    $8 = $coll$addr;
	    $call10 = (_xmmsv_coll_idlist_get($8)|0);
	    $call11 = (__internal_put_on_bb_value_list($7,$call10)|0);
	    if (!($call11)) {
	     $$expand_i1_val6 = 0;
	     $retval = $$expand_i1_val6;
	     break;
	    }
	    $9 = $coll$addr;
	    $call14 = (_xmmsv_coll_is_type($9,0)|0);
	    $tobool15 = ($call14|0)!=(0);
	    do {
	     if ($tobool15) {
	      $10 = $bb$addr;
	      $call17 = (__internal_put_on_bb_int32($10,4)|0);
	      if (!($call17)) {
	       $$expand_i1_val8 = 0;
	       $retval = $$expand_i1_val8;
	       break L1;
	      }
	      $11 = $bb$addr;
	      $call20 = (__internal_put_on_bb_int32($11,0)|0);
	      if ($call20) {
	       break;
	      } else {
	       $$expand_i1_val10 = 0;
	       $retval = $$expand_i1_val10;
	       break L1;
	      }
	     } else {
	      $12 = $bb$addr;
	      $13 = $coll$addr;
	      $call23 = (_xmmsv_coll_operands_get($13)|0);
	      $call24 = (__internal_put_on_bb_value_list($12,$call23)|0);
	      if ($call24) {
	       break;
	      } else {
	       $$expand_i1_val12 = 0;
	       $retval = $$expand_i1_val12;
	       break L1;
	      }
	     }
	    } while(0);
	    $$expand_i1_val14 = 1;
	    $retval = $$expand_i1_val14;
	   } else {
	    label = 3;
	   }
	  } else {
	   label = 3;
	  }
	 } while(0);
	 if ((label|0) == 3) {
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	 }
	 $$pre_trunc = $retval;
	 $14 = $$pre_trunc&1;
	 STACKTOP = sp;return ($14|0);
	}
	function __internal_put_on_bb_bin($bb,$data,$len) {
	 $bb = $bb|0;
	 $data = $data|0;
	 $len = $len|0;
	 var $$expand_i1_val = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $bb$addr = 0, $call1 = 0, $data$addr = 0, $len$addr = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $tobool2$expand_i1_val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $data$addr = $data;
	 $len$addr = $len;
	 $0 = $bb$addr;
	 $1 = $len$addr;
	 $2 = (_xmmsv_bitbuffer_put_bits($0,32,$1,0)|0);
	 $tobool = ($2|0)!=(0);
	 if ($tobool) {
	  $3 = $bb$addr;
	  $4 = $data$addr;
	  $5 = $len$addr;
	  $call1 = (_xmmsv_bitbuffer_put_data($3,$4,$5)|0);
	  $tobool2 = ($call1|0)!=(0);
	  $tobool2$expand_i1_val = $tobool2&1;
	  $retval = $tobool2$expand_i1_val;
	  $$pre_trunc = $retval;
	  $6 = $$pre_trunc&1;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $6 = $$pre_trunc&1;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function __internal_put_on_bb_value_list($bb,$v) {
	 $bb = $bb|0;
	 $v = $v|0;
	 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
	 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0, $call = 0, $call10 = 0, $call18 = 0, $call2 = 0, $call20 = 0, $call24 = 0, $call27 = 0, $cmp = 0, $entry1 = 0, $it = 0;
	 var $retval = 0, $tobool = 0, $tobool13 = 0, $tobool19 = 0, $tobool25 = 0, $tobool28 = 0, $tobool3 = 0, $tobool7 = 0, $type = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it = sp + 8|0;
	 $type = sp + 4|0;
	 $entry1 = sp;
	 $bb$addr = $bb;
	 $v$addr = $v;
	 $0 = $v$addr;
	 $call = (_xmmsv_get_list_iter($0,$it)|0);
	 $tobool = ($call|0)!=(0);
	 L1: do {
	  if ($tobool) {
	   $1 = $v$addr;
	   $call2 = (_xmmsv_list_get_type($1,$type)|0);
	   $tobool3 = ($call2|0)!=(0);
	   if (!($tobool3)) {
	    $$expand_i1_val2 = 0;
	    $retval = $$expand_i1_val2;
	    break;
	   }
	   $2 = $bb$addr;
	   $3 = HEAP32[$type>>2]|0;
	   $4 = (_xmmsv_bitbuffer_put_bits($2,32,$3,0)|0);
	   $tobool7 = ($4|0)!=(0);
	   if (!($tobool7)) {
	    $$expand_i1_val4 = 0;
	    $retval = $$expand_i1_val4;
	    break;
	   }
	   $5 = $bb$addr;
	   $6 = $v$addr;
	   $call10 = (_xmmsv_list_get_size($6)|0);
	   $7 = ($call10|0)<(0);
	   $8 = $7 << 31 >> 31;
	   $9 = (_xmmsv_bitbuffer_put_bits($5,32,$call10,$8)|0);
	   $tobool13 = ($9|0)!=(0);
	   if (!($tobool13)) {
	    $$expand_i1_val6 = 0;
	    $retval = $$expand_i1_val6;
	    break;
	   }
	   $10 = HEAP32[$type>>2]|0;
	   $cmp = ($10|0)!=(0);
	   do {
	    if ($cmp) {
	     while(1) {
	      $11 = HEAP32[$it>>2]|0;
	      $call18 = (_xmmsv_list_iter_entry($11,$entry1)|0);
	      $tobool19 = ($call18|0)!=(0);
	      if (!($tobool19)) {
	       label = 15;
	       break;
	      }
	      $12 = $bb$addr;
	      $13 = HEAP32[$type>>2]|0;
	      $14 = HEAP32[$entry1>>2]|0;
	      $call20 = (__internal_put_on_bb_value_of_type($12,$13,$14)|0);
	      if (!($call20)) {
	       label = 13;
	       break;
	      }
	      $15 = HEAP32[$it>>2]|0;
	      _xmmsv_list_iter_next($15);
	     }
	     if ((label|0) == 13) {
	      $$expand_i1_val8 = 0;
	      $retval = $$expand_i1_val8;
	      break L1;
	     }
	     else if ((label|0) == 15) {
	      break;
	     }
	    } else {
	     while(1) {
	      $16 = HEAP32[$it>>2]|0;
	      $call24 = (_xmmsv_list_iter_entry($16,$entry1)|0);
	      $tobool25 = ($call24|0)!=(0);
	      if (!($tobool25)) {
	       label = 21;
	       break;
	      }
	      $17 = $bb$addr;
	      $18 = HEAP32[$entry1>>2]|0;
	      $call27 = (_xmmsv_bitbuffer_serialize_value($17,$18)|0);
	      $tobool28 = ($call27|0)!=(0);
	      if (!($tobool28)) {
	       label = 19;
	       break;
	      }
	      $19 = HEAP32[$it>>2]|0;
	      _xmmsv_list_iter_next($19);
	     }
	     if ((label|0) == 19) {
	      $$expand_i1_val10 = 0;
	      $retval = $$expand_i1_val10;
	      break L1;
	     }
	     else if ((label|0) == 21) {
	      break;
	     }
	    }
	   } while(0);
	   $$expand_i1_val12 = 1;
	   $retval = $$expand_i1_val12;
	  } else {
	   $$expand_i1_val = 0;
	   $retval = $$expand_i1_val;
	  }
	 } while(0);
	 $$pre_trunc = $retval;
	 $20 = $$pre_trunc&1;
	 STACKTOP = sp;return ($20|0);
	}
	function __internal_put_on_bb_value_dict($bb,$v) {
	 $bb = $bb|0;
	 $v = $v|0;
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bb$addr = 0;
	 var $call = 0, $call12 = 0, $call2 = 0, $call7 = 0, $call9 = 0, $entry1 = 0, $it = 0, $key = 0, $retval = 0, $tobool = 0, $tobool13 = 0, $tobool4 = 0, $tobool8 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it = sp + 8|0;
	 $key = sp + 4|0;
	 $entry1 = sp;
	 $bb$addr = $bb;
	 $v$addr = $v;
	 $0 = $v$addr;
	 $call = (_xmmsv_get_dict_iter($0,$it)|0);
	 $tobool = ($call|0)!=(0);
	 do {
	  if ($tobool) {
	   $1 = $bb$addr;
	   $2 = $v$addr;
	   $call2 = (_xmmsv_dict_get_size($2)|0);
	   $3 = ($call2|0)<(0);
	   $4 = $3 << 31 >> 31;
	   $5 = (_xmmsv_bitbuffer_put_bits($1,32,$call2,$4)|0);
	   $tobool4 = ($5|0)!=(0);
	   if (!($tobool4)) {
	    $$expand_i1_val2 = 0;
	    $retval = $$expand_i1_val2;
	    break;
	   }
	   while(1) {
	    $6 = HEAP32[$it>>2]|0;
	    $call7 = (_xmmsv_dict_iter_pair($6,$key,$entry1)|0);
	    $tobool8 = ($call7|0)!=(0);
	    if (!($tobool8)) {
	     label = 12;
	     break;
	    }
	    $7 = $bb$addr;
	    $8 = HEAP32[$key>>2]|0;
	    $call9 = (__internal_put_on_bb_string($7,$8)|0);
	    if (!($call9)) {
	     label = 8;
	     break;
	    }
	    $9 = $bb$addr;
	    $10 = HEAP32[$entry1>>2]|0;
	    $call12 = (_xmmsv_bitbuffer_serialize_value($9,$10)|0);
	    $tobool13 = ($call12|0)!=(0);
	    if (!($tobool13)) {
	     label = 10;
	     break;
	    }
	    $11 = HEAP32[$it>>2]|0;
	    _xmmsv_dict_iter_next($11);
	   }
	   if ((label|0) == 8) {
	    $$expand_i1_val4 = 0;
	    $retval = $$expand_i1_val4;
	    break;
	   }
	   else if ((label|0) == 10) {
	    $$expand_i1_val6 = 0;
	    $retval = $$expand_i1_val6;
	    break;
	   }
	   else if ((label|0) == 12) {
	    $$expand_i1_val8 = 1;
	    $retval = $$expand_i1_val8;
	    break;
	   }
	  } else {
	   $$expand_i1_val = 0;
	   $retval = $$expand_i1_val;
	  }
	 } while(0);
	 $$pre_trunc = $retval;
	 $12 = $$pre_trunc&1;
	 STACKTOP = sp;return ($12|0);
	}
	function _xmmsv_bitbuffer_new_ro($v,$len) {
	 $v = $v|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $call = 0, $len$addr = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $len$addr = $len;
	 $0 = $v$addr;
	 $1 = $len$addr;
	 $call = (_xmmsv_new_bitbuffer_ro($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_new_bitbuffer_ro($v,$len) {
	 $v = $v|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buf = 0, $call = 0, $len$addr = 0, $len3 = 0, $mul = 0, $v$addr = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $len$addr = $len;
	 $call = (__xmmsv_new(8)|0);
	 $val = $call;
	 $0 = $v$addr;
	 $1 = $val;
	 $buf = (($1) + 4|0);
	 HEAP32[$buf>>2] = $0;
	 $2 = $len$addr;
	 $mul = $2<<3;
	 $3 = $val;
	 $len3 = (($3) + 12|0);
	 HEAP32[$len3>>2] = $mul;
	 $4 = $val;
	 HEAP8[$4>>0] = 1;
	 $5 = $val;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_bitbuffer_new() {
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_xmmsv_new_bitbuffer()|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_new_bitbuffer() {
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $buf = 0, $call = 0, $len = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (__xmmsv_new(8)|0);
	 $val = $call;
	 $0 = $val;
	 $buf = (($0) + 4|0);
	 HEAP32[$buf>>2] = 0;
	 $1 = $val;
	 $len = (($1) + 12|0);
	 HEAP32[$len>>2] = 0;
	 $2 = $val;
	 HEAP8[$2>>0] = 0;
	 $3 = $val;
	 STACKTOP = sp;return ($3|0);
	}
	function _xmmsv_bitbuffer_get_bits($v,$bits,$res) {
	 $v = $v|0;
	 $bits = $bits|0;
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
	 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $add = 0, $and = 0, $arrayidx = 0, $bits$addr = 0, $buf = 0;
	 var $call = 0, $cmp = 0, $cmp1 = 0, $cmp16 = 0, $cmp6 = 0, $conv = 0, $div = 0, $i = 0, $inc = 0, $len = 0, $pos = 0, $pos14 = 0, $pos3 = 0, $r = 0, $rem = 0, $res$addr = 0, $retval = 0, $shr = 0, $sub = 0, $t = 0;
	 var $tobool = 0, $v$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $r = sp;
	 $t = sp + 16|0;
	 $v$addr = $v;
	 $bits$addr = $bits;
	 $res$addr = $res;
	 $0 = $bits$addr;
	 $cmp = ($0|0)<(1);
	 if ($cmp) {
	  HEAP32[$vararg_buffer>>2] = 480;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 512;
	  _xmmsc_log(0,2,456,$vararg_buffer);
	  $retval = 0;
	  $74 = $retval;
	  STACKTOP = sp;return ($74|0);
	 }
	 $1 = $bits$addr;
	 $cmp1 = ($1|0)==(1);
	 if ($cmp1) {
	  $2 = $v$addr;
	  $pos3 = (($2) + 16|0);
	  $3 = HEAP32[$pos3>>2]|0;
	  $pos = $3;
	  $4 = $pos;
	  $5 = $v$addr;
	  $len = (($5) + 12|0);
	  $6 = HEAP32[$len>>2]|0;
	  $cmp6 = ($4|0)>=($6|0);
	  if ($cmp6) {
	   $retval = 0;
	   $74 = $retval;
	   STACKTOP = sp;return ($74|0);
	  } else {
	   $7 = $pos;
	   $div = (($7|0) / 8)&-1;
	   $8 = $v$addr;
	   $buf = (($8) + 4|0);
	   $9 = HEAP32[$buf>>2]|0;
	   $arrayidx = (($9) + ($div)|0);
	   $10 = HEAP8[$arrayidx>>0]|0;
	   $conv = $10&255;
	   $11 = $pos;
	   $rem = (($11|0) % 8)&-1;
	   $sub = (7 - ($rem))|0;
	   $shr = $conv >> $sub;
	   $and = $shr & 1;
	   $12 = ($and|0)<(0);
	   $13 = $12 << 31 >> 31;
	   $14 = $r;
	   $15 = $14;
	   HEAP32[$15>>2] = $and;
	   $16 = (($14) + 4)|0;
	   $17 = $16;
	   HEAP32[$17>>2] = $13;
	   $18 = $v$addr;
	   $pos14 = (($18) + 16|0);
	   $19 = HEAP32[$pos14>>2]|0;
	   $add = (($19) + 1)|0;
	   HEAP32[$pos14>>2] = $add;
	   $20 = $r;
	   $21 = $20;
	   $22 = HEAP32[$21>>2]|0;
	   $23 = (($20) + 4)|0;
	   $24 = $23;
	   $25 = HEAP32[$24>>2]|0;
	   $26 = $res$addr;
	   $27 = $26;
	   $28 = $27;
	   HEAP32[$28>>2] = $22;
	   $29 = (($27) + 4)|0;
	   $30 = $29;
	   HEAP32[$30>>2] = $25;
	   $retval = 1;
	   $74 = $retval;
	   STACKTOP = sp;return ($74|0);
	  }
	 }
	 $31 = $r;
	 $32 = $31;
	 HEAP32[$32>>2] = 0;
	 $33 = (($31) + 4)|0;
	 $34 = $33;
	 HEAP32[$34>>2] = 0;
	 $i = 0;
	 while(1) {
	  $35 = $i;
	  $36 = $bits$addr;
	  $cmp16 = ($35|0)<($36|0);
	  if (!($cmp16)) {
	   label = 13;
	   break;
	  }
	  $37 = $t;
	  $38 = $37;
	  HEAP32[$38>>2] = 0;
	  $39 = (($37) + 4)|0;
	  $40 = $39;
	  HEAP32[$40>>2] = 0;
	  $41 = $v$addr;
	  $call = (_xmmsv_bitbuffer_get_bits($41,1,$t)|0);
	  $tobool = ($call|0)!=(0);
	  if (!($tobool)) {
	   label = 10;
	   break;
	  }
	  $42 = $r;
	  $43 = $42;
	  $44 = HEAP32[$43>>2]|0;
	  $45 = (($42) + 4)|0;
	  $46 = $45;
	  $47 = HEAP32[$46>>2]|0;
	  $48 = (_bitshift64Shl(($44|0),($47|0),1)|0);
	  $49 = tempRet0;
	  $50 = $t;
	  $51 = $50;
	  $52 = HEAP32[$51>>2]|0;
	  $53 = (($50) + 4)|0;
	  $54 = $53;
	  $55 = HEAP32[$54>>2]|0;
	  $56 = $48 | $52;
	  $57 = $49 | $55;
	  $58 = $r;
	  $59 = $58;
	  HEAP32[$59>>2] = $56;
	  $60 = (($58) + 4)|0;
	  $61 = $60;
	  HEAP32[$61>>2] = $57;
	  $62 = $i;
	  $inc = (($62) + 1)|0;
	  $i = $inc;
	 }
	 if ((label|0) == 10) {
	  $retval = 0;
	  $74 = $retval;
	  STACKTOP = sp;return ($74|0);
	 }
	 else if ((label|0) == 13) {
	  $63 = $r;
	  $64 = $63;
	  $65 = HEAP32[$64>>2]|0;
	  $66 = (($63) + 4)|0;
	  $67 = $66;
	  $68 = HEAP32[$67>>2]|0;
	  $69 = $res$addr;
	  $70 = $69;
	  $71 = $70;
	  HEAP32[$71>>2] = $65;
	  $72 = (($70) + 4)|0;
	  $73 = $72;
	  HEAP32[$73>>2] = $68;
	  $retval = 1;
	  $74 = $retval;
	  STACKTOP = sp;return ($74|0);
	 }
	 return 0|0;
	}
	function _xmmsv_bitbuffer_get_data($v,$b,$len) {
	 $v = $v|0;
	 $b = $b|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$addr = 0, $call = 0, $dec = 0, $incdec$ptr = 0, $len$addr = 0, $retval = 0, $t = 0;
	 var $tobool = 0, $tobool1 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $t = sp;
	 $v$addr = $v;
	 $b$addr = $b;
	 $len$addr = $len;
	 while(1) {
	  $0 = $len$addr;
	  $tobool = ($0|0)!=(0);
	  if (!($tobool)) {
	   label = 6;
	   break;
	  }
	  $1 = $v$addr;
	  $call = (_xmmsv_bitbuffer_get_bits($1,8,$t)|0);
	  $tobool1 = ($call|0)!=(0);
	  if (!($tobool1)) {
	   label = 4;
	   break;
	  }
	  $2 = $t;
	  $3 = $2;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = (($2) + 4)|0;
	  $6 = $5;
	  $7 = HEAP32[$6>>2]|0;
	  $8 = $4&255;
	  $9 = $b$addr;
	  HEAP8[$9>>0] = $8;
	  $10 = $b$addr;
	  $incdec$ptr = (($10) + 1|0);
	  $b$addr = $incdec$ptr;
	  $11 = $len$addr;
	  $dec = (($11) + -1)|0;
	  $len$addr = $dec;
	 }
	 if ((label|0) == 4) {
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 else if ((label|0) == 6) {
	  $retval = 1;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 return 0|0;
	}
	function _xmmsv_bitbuffer_put_bits($v,$bits,$0,$1) {
	 $v = $v|0;
	 $bits = $bits|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
	 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
	 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
	 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
	 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add52 = 0, $alloclen = 0, $alloclen14 = 0, $alloclen17 = 0, $alloclen31 = 0, $and = 0, $and38 = 0, $arrayidx = 0, $arrayidx48 = 0, $bits$addr = 0, $buf = 0, $buf23 = 0;
	 var $buf26 = 0, $buf36 = 0, $buf47 = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp18 = 0, $cmp3 = 0, $cmp58 = 0, $cmp69 = 0, $cond = 0, $conv = 0, $d$addr = 0, $div = 0, $div27 = 0, $div28 = 0, $div33 = 0, $div44 = 0, $i = 0, $inc = 0;
	 var $len = 0, $len66 = 0, $lnot = 0, $lnot$ext = 0, $lnot77 = 0, $mul = 0, $neg = 0, $nl = 0, $ol = 0, $pos = 0, $pos51 = 0, $pos55 = 0, $pos63 = 0, $pos7 = 0, $rem = 0, $rem40 = 0, $retval = 0, $shl = 0, $sub = 0, $sub37 = 0;
	 var $sub41 = 0, $sub71 = 0, $sub72 = 0, $t = 0, $tobool = 0, $tobool80 = 0, $v$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp;
	 $d$addr = sp + 8|0;
	 $v$addr = $v;
	 $bits$addr = $bits;
	 $2 = $d$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $v$addr;
	 $7 = HEAP8[$6>>0]|0;
	 $tobool = $7&1;
	 if ($tobool) {
	  HEAP32[$vararg_buffer>>2] = 544;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 576;
	  _xmmsc_log(0,2,456,$vararg_buffer);
	  $retval = 0;
	  $87 = $retval;
	  STACKTOP = sp;return ($87|0);
	 }
	 $8 = $bits$addr;
	 $cmp = ($8|0)<(1);
	 if ($cmp) {
	  HEAP32[$vararg_buffer2>>2] = 544;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 512;
	  _xmmsc_log(0,2,456,$vararg_buffer2);
	  $retval = 0;
	  $87 = $retval;
	  STACKTOP = sp;return ($87|0);
	 }
	 $9 = $bits$addr;
	 $cmp3 = ($9|0)==(1);
	 if ($cmp3) {
	  $10 = $v$addr;
	  $pos7 = (($10) + 16|0);
	  $11 = HEAP32[$pos7>>2]|0;
	  $pos = $11;
	  $12 = $pos;
	  $13 = $v$addr;
	  $alloclen = (($13) + 8|0);
	  $14 = HEAP32[$alloclen>>2]|0;
	  $cmp10 = ($12|0)>=($14|0);
	  if ($cmp10) {
	   $15 = $v$addr;
	   $alloclen14 = (($15) + 8|0);
	   $16 = HEAP32[$alloclen14>>2]|0;
	   $mul = $16<<1;
	   $nl = $mul;
	   $17 = $v$addr;
	   $alloclen17 = (($17) + 8|0);
	   $18 = HEAP32[$alloclen17>>2]|0;
	   $ol = $18;
	   $19 = $nl;
	   $cmp18 = ($19|0)<(128);
	   if ($cmp18) {
	    $cond = 128;
	   } else {
	    $20 = $nl;
	    $cond = $20;
	   }
	   $nl = $cond;
	   $21 = $nl;
	   $add = (($21) + 7)|0;
	   $and = $add & -8;
	   $nl = $and;
	   $22 = $v$addr;
	   $buf = (($22) + 4|0);
	   $23 = HEAP32[$buf>>2]|0;
	   $24 = $nl;
	   $div = (($24|0) / 8)&-1;
	   $call = (_realloc($23,$div)|0);
	   $25 = $v$addr;
	   $buf23 = (($25) + 4|0);
	   HEAP32[$buf23>>2] = $call;
	   $26 = $v$addr;
	   $buf26 = (($26) + 4|0);
	   $27 = HEAP32[$buf26>>2]|0;
	   $28 = $ol;
	   $div27 = (($28|0) / 8)&-1;
	   $add$ptr = (($27) + ($div27)|0);
	   $29 = $nl;
	   $30 = $ol;
	   $sub = (($29) - ($30))|0;
	   $div28 = (($sub|0) / 8)&-1;
	   _memset(($add$ptr|0),0,($div28|0))|0;
	   $31 = $nl;
	   $32 = $v$addr;
	   $alloclen31 = (($32) + 8|0);
	   HEAP32[$alloclen31>>2] = $31;
	  }
	  $33 = $pos;
	  $div33 = (($33|0) / 8)&-1;
	  $34 = $v$addr;
	  $buf36 = (($34) + 4|0);
	  $35 = HEAP32[$buf36>>2]|0;
	  $arrayidx = (($35) + ($div33)|0);
	  $36 = HEAP8[$arrayidx>>0]|0;
	  $t = $36;
	  $37 = $t;
	  $conv = $37&255;
	  $38 = $pos;
	  $rem = (($38|0) % 8)&-1;
	  $sub37 = (7 - ($rem))|0;
	  $shl = 1 << $sub37;
	  $neg = $shl ^ -1;
	  $and38 = $conv & $neg;
	  $39 = ($and38|0)<(0);
	  $40 = $39 << 31 >> 31;
	  $41 = $d$addr;
	  $42 = $41;
	  $43 = HEAP32[$42>>2]|0;
	  $44 = (($41) + 4)|0;
	  $45 = $44;
	  $46 = HEAP32[$45>>2]|0;
	  $47 = $pos;
	  $rem40 = (($47|0) % 8)&-1;
	  $sub41 = (7 - ($rem40))|0;
	  $48 = (_bitshift64Shl(($43|0),($46|0),($sub41|0))|0);
	  $49 = tempRet0;
	  $50 = $and38 | $48;
	  $40 | $49;
	  $51 = $50&255;
	  $t = $51;
	  $52 = $t;
	  $53 = $pos;
	  $div44 = (($53|0) / 8)&-1;
	  $54 = $v$addr;
	  $buf47 = (($54) + 4|0);
	  $55 = HEAP32[$buf47>>2]|0;
	  $arrayidx48 = (($55) + ($div44)|0);
	  HEAP8[$arrayidx48>>0] = $52;
	  $56 = $v$addr;
	  $pos51 = (($56) + 16|0);
	  $57 = HEAP32[$pos51>>2]|0;
	  $add52 = (($57) + 1)|0;
	  HEAP32[$pos51>>2] = $add52;
	  $58 = $v$addr;
	  $pos55 = (($58) + 16|0);
	  $59 = HEAP32[$pos55>>2]|0;
	  $60 = $v$addr;
	  $len = (($60) + 12|0);
	  $61 = HEAP32[$len>>2]|0;
	  $cmp58 = ($59|0)>($61|0);
	  if ($cmp58) {
	   $62 = $v$addr;
	   $pos63 = (($62) + 16|0);
	   $63 = HEAP32[$pos63>>2]|0;
	   $64 = $v$addr;
	   $len66 = (($64) + 12|0);
	   HEAP32[$len66>>2] = $63;
	  }
	  $retval = 1;
	  $87 = $retval;
	  STACKTOP = sp;return ($87|0);
	 } else {
	  $i = 0;
	  while(1) {
	   $65 = $i;
	   $66 = $bits$addr;
	   $cmp69 = ($65|0)<($66|0);
	   if (!($cmp69)) {
	    label = 20;
	    break;
	   }
	   $67 = $v$addr;
	   $68 = $d$addr;
	   $69 = $68;
	   $70 = HEAP32[$69>>2]|0;
	   $71 = (($68) + 4)|0;
	   $72 = $71;
	   $73 = HEAP32[$72>>2]|0;
	   $74 = $bits$addr;
	   $75 = $i;
	   $sub71 = (($74) - ($75))|0;
	   $sub72 = (($sub71) - 1)|0;
	   $76 = (_bitshift64Shl(1,0,($sub72|0))|0);
	   $77 = tempRet0;
	   $78 = $70 & $76;
	   $79 = $73 & $77;
	   $80 = ($78|0)!=(0);
	   $81 = ($79|0)!=(0);
	   $82 = $80 | $81;
	   $lnot = $82 ^ 1;
	   $lnot77 = $lnot ^ 1;
	   $lnot$ext = $lnot77&1;
	   $83 = ($lnot$ext|0)<(0);
	   $84 = $83 << 31 >> 31;
	   $85 = (_xmmsv_bitbuffer_put_bits($67,1,$lnot$ext,$84)|0);
	   $tobool80 = ($85|0)!=(0);
	   if (!($tobool80)) {
	    label = 17;
	    break;
	   }
	   $86 = $i;
	   $inc = (($86) + 1)|0;
	   $i = $inc;
	  }
	  if ((label|0) == 17) {
	   $retval = 0;
	   $87 = $retval;
	   STACKTOP = sp;return ($87|0);
	  }
	  else if ((label|0) == 20) {
	   $retval = 1;
	   $87 = $retval;
	   STACKTOP = sp;return ($87|0);
	  }
	 }
	 return 0|0;
	}
	function _xmmsv_bitbuffer_put_bits_at($v,$bits,$0,$1,$offset) {
	 $v = $v|0;
	 $bits = $bits|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 $offset = $offset|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits$addr = 0;
	 var $call = 0, $call1 = 0, $call6 = 0, $d$addr = 0, $offset$addr = 0, $prevpos = 0, $retval = 0, $tobool = 0, $tobool3 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $d$addr = sp;
	 $v$addr = $v;
	 $bits$addr = $bits;
	 $2 = $d$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $offset$addr = $offset;
	 $6 = $v$addr;
	 $call = (_xmmsv_bitbuffer_pos($6)|0);
	 $prevpos = $call;
	 $7 = $v$addr;
	 $8 = $offset$addr;
	 $call1 = (_xmmsv_bitbuffer_goto($7,$8)|0);
	 $tobool = ($call1|0)!=(0);
	 if (!($tobool)) {
	  $retval = 0;
	  $20 = $retval;
	  STACKTOP = sp;return ($20|0);
	 }
	 $9 = $v$addr;
	 $10 = $bits$addr;
	 $11 = $d$addr;
	 $12 = $11;
	 $13 = HEAP32[$12>>2]|0;
	 $14 = (($11) + 4)|0;
	 $15 = $14;
	 $16 = HEAP32[$15>>2]|0;
	 $17 = (_xmmsv_bitbuffer_put_bits($9,$10,$13,$16)|0);
	 $tobool3 = ($17|0)!=(0);
	 if ($tobool3) {
	  $18 = $v$addr;
	  $19 = $prevpos;
	  $call6 = (_xmmsv_bitbuffer_goto($18,$19)|0);
	  $retval = $call6;
	  $20 = $retval;
	  STACKTOP = sp;return ($20|0);
	 } else {
	  $retval = 0;
	  $20 = $retval;
	  STACKTOP = sp;return ($20|0);
	 }
	 return 0|0;
	}
	function _xmmsv_bitbuffer_pos($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $pos = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $pos = (($0) + 16|0);
	 $1 = HEAP32[$pos>>2]|0;
	 STACKTOP = sp;return ($1|0);
	}
	function _xmmsv_bitbuffer_goto($v,$pos) {
	 $v = $v|0;
	 $pos = $pos|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $cmp1 = 0, $len = 0, $pos$addr = 0, $pos6 = 0, $retval = 0, $v$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $v$addr = $v;
	 $pos$addr = $pos;
	 $0 = $pos$addr;
	 $cmp = ($0|0)<(0);
	 if ($cmp) {
	  HEAP32[$vararg_buffer>>2] = 608;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 632;
	  _xmmsc_log(0,2,456,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $pos$addr;
	 $2 = $v$addr;
	 $len = (($2) + 12|0);
	 $3 = HEAP32[$len>>2]|0;
	 $cmp1 = ($1|0)>($3|0);
	 if ($cmp1) {
	  HEAP32[$vararg_buffer2>>2] = 608;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 656;
	  _xmmsc_log(0,2,456,$vararg_buffer2);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  $4 = $pos$addr;
	  $5 = $v$addr;
	  $pos6 = (($5) + 16|0);
	  HEAP32[$pos6>>2] = $4;
	  $retval = 1;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmmsv_bitbuffer_put_data($v,$b,$len) {
	 $v = $v|0;
	 $b = $b|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$addr = 0, $conv = 0, $dec = 0, $incdec$ptr = 0, $len$addr = 0, $retval = 0, $t = 0, $tobool = 0, $tobool2 = 0;
	 var $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $b$addr = $b;
	 $len$addr = $len;
	 while(1) {
	  $0 = $len$addr;
	  $tobool = ($0|0)!=(0);
	  if (!($tobool)) {
	   label = 6;
	   break;
	  }
	  $1 = $b$addr;
	  $2 = HEAP8[$1>>0]|0;
	  $conv = $2&255;
	  $t = $conv;
	  $3 = $v$addr;
	  $4 = $t;
	  $5 = ($4|0)<(0);
	  $6 = $5 << 31 >> 31;
	  $7 = (_xmmsv_bitbuffer_put_bits($3,8,$4,$6)|0);
	  $tobool2 = ($7|0)!=(0);
	  if (!($tobool2)) {
	   label = 4;
	   break;
	  }
	  $8 = $b$addr;
	  $incdec$ptr = (($8) + 1|0);
	  $b$addr = $incdec$ptr;
	  $9 = $len$addr;
	  $dec = (($9) + -1)|0;
	  $len$addr = $dec;
	 }
	 if ((label|0) == 4) {
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 else if ((label|0) == 6) {
	  $retval = 1;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 return 0|0;
	}
	function _xmmsv_bitbuffer_align($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $pos = 0, $pos3 = 0, $rem = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $pos = (($0) + 16|0);
	 $1 = HEAP32[$pos>>2]|0;
	 $add = (($1) + 7)|0;
	 $rem = (($add|0) % 8)&-1;
	 $2 = $v$addr;
	 $pos3 = (($2) + 16|0);
	 HEAP32[$pos3>>2] = $rem;
	 STACKTOP = sp;return 1;
	}
	function _xmmsv_bitbuffer_rewind($v) {
	 $v = $v|0;
	 var $0 = 0, $call = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $call = (_xmmsv_bitbuffer_goto($0,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_bitbuffer_end($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $len = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $1 = $v$addr;
	 $len = (($1) + 12|0);
	 $2 = HEAP32[$len>>2]|0;
	 $call = (_xmmsv_bitbuffer_goto($0,$2)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_bitbuffer_len($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $len = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $len = (($0) + 12|0);
	 $1 = HEAP32[$len>>2]|0;
	 STACKTOP = sp;return ($1|0);
	}
	function _xmmsv_bitbuffer_buffer($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $buf = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $buf = (($0) + 4|0);
	 $1 = HEAP32[$buf>>2]|0;
	 STACKTOP = sp;return ($1|0);
	}
	function _xmmsv_get_bitbuffer($val,$r,$rlen) {
	 $val = $val|0;
	 $r = $r|0;
	 $rlen = $rlen|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $len = 0, $r$addr = 0, $retval = 0, $rlen$addr = 0, $tobool = 0, $type = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $r$addr = $r;
	 $rlen$addr = $rlen;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $type = (($1) + 24|0);
	  $2 = HEAP32[$type>>2]|0;
	  $cmp = ($2|0)!=(8);
	  if (!($cmp)) {
	   $3 = $val$addr;
	   $4 = HEAP32[$3>>2]|0;
	   $5 = $r$addr;
	   HEAP32[$5>>2] = $4;
	   $6 = $val$addr;
	   $len = (($6) + 4|0);
	   $7 = HEAP32[$len>>2]|0;
	   $8 = $rlen$addr;
	   HEAP32[$8>>2] = $7;
	   $retval = 1;
	   $9 = $retval;
	   STACKTOP = sp;return ($9|0);
	  }
	 }
	 $retval = 0;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsv_make_stringlist($array,$num) {
	 $array = $array|0;
	 $num = $num|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $array$addr = 0, $arrayidx = 0, $arrayidx3 = 0, $call = 0;
	 var $call4 = 0, $cmp = 0, $cmp1 = 0, $elem = 0, $i = 0, $inc = 0, $list = 0, $num$addr = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $array$addr = $array;
	 $num$addr = $num;
	 $call = (_xmmsv_new_list()|0);
	 $list = $call;
	 $0 = $array$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $14 = $list;
	  STACKTOP = sp;return ($14|0);
	 }
	 $i = 0;
	 while(1) {
	  $1 = $num$addr;
	  $cmp = ($1|0)>=(0);
	  if ($cmp) {
	   $2 = $i;
	   $3 = $num$addr;
	   $cmp1 = ($2|0)<($3|0);
	   if ($cmp1) {
	    $15 = 1;
	   } else {
	    label = 5;
	   }
	  } else {
	   label = 5;
	  }
	  if ((label|0) == 5) {
	   label = 0;
	   $4 = $i;
	   $5 = $array$addr;
	   $arrayidx = (($5) + ($4<<2)|0);
	   $6 = HEAP32[$arrayidx>>2]|0;
	   $tobool2 = ($6|0)!=(0|0);
	   $15 = $tobool2;
	  }
	  if (!($15)) {
	   break;
	  }
	  $7 = $i;
	  $8 = $array$addr;
	  $arrayidx3 = (($8) + ($7<<2)|0);
	  $9 = HEAP32[$arrayidx3>>2]|0;
	  $call4 = (_xmmsv_new_string($9)|0);
	  $elem = $call4;
	  $10 = $list;
	  $11 = $elem;
	  (_xmmsv_list_append($10,$11)|0);
	  $12 = $elem;
	  _xmmsv_unref($12);
	  $13 = $i;
	  $inc = (($13) + 1)|0;
	  $i = $inc;
	 }
	 $14 = $list;
	 STACKTOP = sp;return ($14|0);
	}
	function _xmmsv_build_dict_va($firstkey,$ap) {
	 $firstkey = $firstkey|0;
	 $ap = $ap|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap$addr = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $call = 0;
	 var $call1 = 0, $firstkey$addr = 0, $key = 0, $res = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $tobool5 = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $firstkey$addr = $firstkey;
	 $ap$addr = $ap;
	 $call = (_xmmsv_new_dict()|0);
	 $res = $call;
	 $0 = $res;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $1 = $firstkey$addr;
	 $key = $1;
	 while(1) {
	  $2 = $ap$addr;
	  $arglist_current = HEAP32[$2>>2]|0;
	  $3 = HEAP32[$arglist_current>>2]|0;
	  $arglist_next = (($arglist_current) + 4|0);
	  HEAP32[$2>>2] = $arglist_next;
	  $val = $3;
	  $4 = $res;
	  $5 = $key;
	  $6 = $val;
	  $call1 = (_xmmsv_dict_set($4,$5,$6)|0);
	  $tobool2 = ($call1|0)!=(0);
	  if (!($tobool2)) {
	   label = 5;
	   break;
	  }
	  $8 = $val;
	  _xmmsv_unref($8);
	  $9 = $ap$addr;
	  $arglist_current2 = HEAP32[$9>>2]|0;
	  $10 = HEAP32[$arglist_current2>>2]|0;
	  $arglist_next3 = (($arglist_current2) + 4|0);
	  HEAP32[$9>>2] = $arglist_next3;
	  $key = $10;
	  $11 = $key;
	  $tobool5 = ($11|0)!=(0|0);
	  if (!($tobool5)) {
	   break;
	  }
	 }
	 if ((label|0) == 5) {
	  $7 = $res;
	  _xmmsv_unref($7);
	  $res = 0;
	 }
	 $12 = $res;
	 $retval = $12;
	 $13 = $retval;
	 STACKTOP = sp;return ($13|0);
	}
	function _xmmsv_build_dict($firstkey,$varargs) {
	 $firstkey = $firstkey|0;
	 $varargs = $varargs|0;
	 var $0 = 0, $1 = 0, $ap = 0, $call = 0, $firstkey$addr = 0, $res = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp + 8|0;
	 $firstkey$addr = $firstkey;
	 HEAP32[$ap>>2] = $varargs;
	 $0 = $firstkey$addr;
	 $call = (_xmmsv_build_dict_va($0,$ap)|0);
	 $res = $call;
	 $1 = $res;
	 STACKTOP = sp;return ($1|0);
	}
	function _xmmsv_build_list_va($first_entry,$ap) {
	 $first_entry = $first_entry|0;
	 $ap = $ap|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap$addr = 0, $arglist_current = 0, $arglist_next = 0, $call = 0, $call2 = 0, $first_entry$addr = 0, $res = 0, $retval = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool3 = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $first_entry$addr = $first_entry;
	 $ap$addr = $ap;
	 $call = (_xmmsv_new_list()|0);
	 $res = $call;
	 $0 = $res;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $first_entry$addr;
	 $val = $1;
	 while(1) {
	  $2 = $val;
	  $tobool1 = ($2|0)!=(0|0);
	  if (!($tobool1)) {
	   break;
	  }
	  $3 = $res;
	  $4 = $val;
	  $call2 = (_xmmsv_list_append($3,$4)|0);
	  $tobool3 = ($call2|0)!=(0);
	  if (!($tobool3)) {
	   label = 6;
	   break;
	  }
	  $6 = $val;
	  _xmmsv_unref($6);
	  $7 = $ap$addr;
	  $arglist_current = HEAP32[$7>>2]|0;
	  $8 = HEAP32[$arglist_current>>2]|0;
	  $arglist_next = (($arglist_current) + 4|0);
	  HEAP32[$7>>2] = $arglist_next;
	  $val = $8;
	 }
	 if ((label|0) == 6) {
	  $5 = $res;
	  _xmmsv_unref($5);
	  $res = 0;
	 }
	 $9 = $res;
	 $retval = $9;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function _xmmsv_build_list($first_entry,$varargs) {
	 $first_entry = $first_entry|0;
	 $varargs = $varargs|0;
	 var $0 = 0, $1 = 0, $ap = 0, $call = 0, $first_entry$addr = 0, $res = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp + 8|0;
	 $first_entry$addr = $first_entry;
	 HEAP32[$ap>>2] = $varargs;
	 $0 = $first_entry$addr;
	 $call = (_xmmsv_build_list_va($0,$ap)|0);
	 $res = $call;
	 $1 = $res;
	 STACKTOP = sp;return ($1|0);
	}
	function _xmmsv_build_organize($data) {
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $data$addr = 0, $res = 0, $retval = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $data$addr = $data;
	 $0 = $data$addr;
	 $cmp = ($0|0)!=(0|0);
	 if (!($cmp)) {
	  HEAP32[$vararg_buffer>>2] = 728;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 752;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 776;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 141;
	  _xmmsc_log(0,2,688,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $call = (_xmmsv_new_dict()|0);
	 $res = $call;
	 $1 = $res;
	 $cmp1 = ($1|0)!=(0|0);
	 if ($cmp1) {
	  $2 = $res;
	  (_xmmsv_dict_set_string($2,808,816)|0);
	  $3 = $res;
	  $4 = $data$addr;
	  (_xmmsv_dict_set($3,832,$4)|0);
	  $5 = $data$addr;
	  _xmmsv_unref($5);
	 }
	 $6 = $res;
	 $retval = $6;
	 $7 = $retval;
	 STACKTOP = sp;return ($7|0);
	}
	function _xmmsv_build_metadata($fields,$get,$aggregate,$sourcepref) {
	 $fields = $fields|0;
	 $get = $get|0;
	 $aggregate = $aggregate|0;
	 $sourcepref = $sourcepref|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aggregate$addr = 0, $call = 0, $call14 = 0, $call18 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp12 = 0, $cmp15 = 0, $cmp2 = 0, $cmp23 = 0;
	 var $cmp27 = 0, $cmp5 = 0, $fields$addr = 0, $get$addr = 0, $list = 0, $list17 = 0, $res = 0, $retval = 0, $sourcepref$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $fields$addr = $fields;
	 $get$addr = $get;
	 $aggregate$addr = $aggregate;
	 $sourcepref$addr = $sourcepref;
	 $call = (_xmmsv_new_dict()|0);
	 $res = $call;
	 $0 = $res;
	 $cmp = ($0|0)==(0|0);
	 if ($cmp) {
	  $retval = 0;
	  $28 = $retval;
	  STACKTOP = sp;return ($28|0);
	 }
	 $1 = $res;
	 (_xmmsv_dict_set_string($1,808,840)|0);
	 $2 = $fields$addr;
	 $cmp2 = ($2|0)!=(0|0);
	 if ($cmp2) {
	  $3 = $fields$addr;
	  $call4 = (_xmmsv_get_type($3)|0);
	  $cmp5 = ($call4|0)==(3);
	  if ($cmp5) {
	   $call7 = (_xmmsv_new_list()|0);
	   $list = $call7;
	   $4 = $list;
	   $5 = $fields$addr;
	   (_xmmsv_list_append($4,$5)|0);
	   $6 = $fields$addr;
	   _xmmsv_unref($6);
	   $7 = $list;
	   $fields$addr = $7;
	  }
	  $8 = $res;
	  $9 = $fields$addr;
	  (_xmmsv_dict_set($8,856,$9)|0);
	  $10 = $fields$addr;
	  _xmmsv_unref($10);
	 }
	 $11 = $get$addr;
	 $cmp12 = ($11|0)!=(0|0);
	 if ($cmp12) {
	  $12 = $get$addr;
	  $call14 = (_xmmsv_get_type($12)|0);
	  $cmp15 = ($call14|0)==(3);
	  if ($cmp15) {
	   $call18 = (_xmmsv_new_list()|0);
	   $list17 = $call18;
	   $13 = $list17;
	   $14 = $get$addr;
	   (_xmmsv_list_append($13,$14)|0);
	   $15 = $get$addr;
	   _xmmsv_unref($15);
	   $16 = $list17;
	   $get$addr = $16;
	  }
	  $17 = $res;
	  $18 = $get$addr;
	  (_xmmsv_dict_set($17,864,$18)|0);
	  $19 = $get$addr;
	  _xmmsv_unref($19);
	 }
	 $20 = $sourcepref$addr;
	 $cmp23 = ($20|0)!=(0|0);
	 if ($cmp23) {
	  $21 = $res;
	  $22 = $sourcepref$addr;
	  (_xmmsv_dict_set($21,872,$22)|0);
	  $23 = $sourcepref$addr;
	  _xmmsv_unref($23);
	 }
	 $24 = $aggregate$addr;
	 $cmp27 = ($24|0)!=(0|0);
	 if ($cmp27) {
	  $25 = $res;
	  $26 = $aggregate$addr;
	  (_xmmsv_dict_set_string($25,896,$26)|0);
	 }
	 $27 = $res;
	 $retval = $27;
	 $28 = $retval;
	 STACKTOP = sp;return ($28|0);
	}
	function _xmmsv_build_cluster_list($cluster_by,$cluster_field,$cluster_data) {
	 $cluster_by = $cluster_by|0;
	 $cluster_field = $cluster_field|0;
	 $cluster_data = $cluster_data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cluster_by$addr = 0, $cluster_data$addr = 0, $cluster_field$addr = 0;
	 var $cmp = 0, $cmp10 = 0, $cmp2 = 0, $cmp6 = 0, $res = 0, $retval = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $cluster_by$addr = $cluster_by;
	 $cluster_field$addr = $cluster_field;
	 $cluster_data$addr = $cluster_data;
	 $call = (_xmmsv_new_dict()|0);
	 $res = $call;
	 $0 = $res;
	 $cmp = ($0|0)==(0|0);
	 if ($cmp) {
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $res;
	 (_xmmsv_dict_set_string($1,808,912)|0);
	 $2 = $cluster_by$addr;
	 $cmp2 = ($2|0)!=(0|0);
	 if ($cmp2) {
	  $3 = $res;
	  $4 = $cluster_by$addr;
	  (_xmmsv_dict_set($3,928,$4)|0);
	  $5 = $cluster_by$addr;
	  _xmmsv_unref($5);
	 }
	 $6 = $cluster_field$addr;
	 $cmp6 = ($6|0)!=(0|0);
	 if ($cmp6) {
	  $7 = $res;
	  $8 = $cluster_field$addr;
	  (_xmmsv_dict_set($7,944,$8)|0);
	  $9 = $cluster_field$addr;
	  _xmmsv_unref($9);
	 }
	 $10 = $cluster_data$addr;
	 $cmp10 = ($10|0)!=(0|0);
	 if ($cmp10) {
	  $11 = $res;
	  $12 = $cluster_data$addr;
	  (_xmmsv_dict_set($11,832,$12)|0);
	  $13 = $cluster_data$addr;
	  _xmmsv_unref($13);
	 }
	 $14 = $res;
	 $retval = $14;
	 $15 = $retval;
	 STACKTOP = sp;return ($15|0);
	}
	function _xmmsv_build_cluster_dict($cluster_by,$cluster_field,$cluster_data) {
	 $cluster_by = $cluster_by|0;
	 $cluster_field = $cluster_field|0;
	 $cluster_data = $cluster_data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cluster_by$addr = 0, $cluster_data$addr = 0, $cluster_field$addr = 0;
	 var $cmp = 0, $cmp10 = 0, $cmp2 = 0, $cmp6 = 0, $res = 0, $retval = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $cluster_by$addr = $cluster_by;
	 $cluster_field$addr = $cluster_field;
	 $cluster_data$addr = $cluster_data;
	 $call = (_xmmsv_new_dict()|0);
	 $res = $call;
	 $0 = $res;
	 $cmp = ($0|0)==(0|0);
	 if ($cmp) {
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $res;
	 (_xmmsv_dict_set_string($1,808,960)|0);
	 $2 = $cluster_by$addr;
	 $cmp2 = ($2|0)!=(0|0);
	 if ($cmp2) {
	  $3 = $res;
	  $4 = $cluster_by$addr;
	  (_xmmsv_dict_set($3,928,$4)|0);
	  $5 = $cluster_by$addr;
	  _xmmsv_unref($5);
	 }
	 $6 = $cluster_field$addr;
	 $cmp6 = ($6|0)!=(0|0);
	 if ($cmp6) {
	  $7 = $res;
	  $8 = $cluster_field$addr;
	  (_xmmsv_dict_set($7,944,$8)|0);
	  $9 = $cluster_field$addr;
	  _xmmsv_unref($9);
	 }
	 $10 = $cluster_data$addr;
	 $cmp10 = ($10|0)!=(0|0);
	 if ($cmp10) {
	  $11 = $res;
	  $12 = $cluster_data$addr;
	  (_xmmsv_dict_set($11,832,$12)|0);
	  $13 = $cluster_data$addr;
	  _xmmsv_unref($13);
	 }
	 $14 = $res;
	 $retval = $14;
	 $15 = $retval;
	 STACKTOP = sp;return ($15|0);
	}
	function _xmmsv_build_count() {
	 var $0 = 0, $1 = 0, $call = 0, $res = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (_xmmsv_new_dict()|0);
	 $res = $call;
	 $0 = $res;
	 (_xmmsv_dict_set_string($0,808,976)|0);
	 $1 = $res;
	 STACKTOP = sp;return ($1|0);
	}
	function _xmmsv_new_coll($type) {
	 $type = $type|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $coll = 0, $retval = 0, $type$addr = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $type$addr = $type;
	 $0 = $type$addr;
	 $call = (__xmmsv_coll_new($0)|0);
	 $coll = $call;
	 $1 = $coll;
	 $cmp = ($1|0)==(0|0);
	 do {
	  if ($cmp) {
	   $retval = 0;
	  } else {
	   $call1 = (__xmmsv_new(4)|0);
	   $val = $call1;
	   $2 = $val;
	   $cmp2 = ($2|0)==(0|0);
	   if ($cmp2) {
	    $3 = $coll;
	    __xmmsv_coll_free($3);
	    $retval = 0;
	    break;
	   } else {
	    $4 = $coll;
	    $5 = $val;
	    HEAP32[$5>>2] = $4;
	    $6 = $val;
	    $retval = $6;
	    break;
	   }
	  }
	 } while(0);
	 $7 = $retval;
	 STACKTOP = sp;return ($7|0);
	}
	function __xmmsv_coll_new($type) {
	 $type = $type|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $attributes = 0, $call = 0, $call10 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $coll = 0;
	 var $idlist = 0, $idlist5 = 0, $operands = 0, $operands8 = 0, $retval = 0, $tobool = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $type$addr = $type;
	 $0 = $type$addr;
	 $cmp = ($0>>>0)<=(17);
	 if (!($cmp)) {
	  HEAP32[$vararg_buffer>>2] = 2640;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2680;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 121;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $call = (_calloc(1,16)|0);
	 $coll = $call;
	 $1 = $coll;
	 $tobool = ($1|0)!=(0|0);
	 if ($tobool) {
	  $2 = $type$addr;
	  $3 = $coll;
	  HEAP32[$3>>2] = $2;
	  $call4 = (_xmmsv_new_list()|0);
	  $4 = $coll;
	  $idlist = (($4) + 12|0);
	  HEAP32[$idlist>>2] = $call4;
	  $5 = $coll;
	  $idlist5 = (($5) + 12|0);
	  $6 = HEAP32[$idlist5>>2]|0;
	  (_xmmsv_list_restrict_type($6,2)|0);
	  $call7 = (_xmmsv_new_list()|0);
	  $7 = $coll;
	  $operands = (($7) + 4|0);
	  HEAP32[$operands>>2] = $call7;
	  $8 = $coll;
	  $operands8 = (($8) + 4|0);
	  $9 = HEAP32[$operands8>>2]|0;
	  (_xmmsv_list_restrict_type($9,4)|0);
	  $call10 = (_xmmsv_new_dict()|0);
	  $10 = $coll;
	  $attributes = (($10) + 8|0);
	  HEAP32[$attributes>>2] = $call10;
	  $11 = $coll;
	  $retval = $11;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 2680;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 1056;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 125;
	  _xmmsc_log(0,2,2696,$vararg_buffer4);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 return 0|0;
	}
	function __xmmsv_coll_free($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $attributes = 0, $coll$addr = 0, $idlist = 0, $operands = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $operands = (($1) + 4|0);
	  $2 = HEAP32[$operands>>2]|0;
	  _xmmsv_unref($2);
	  $3 = $coll$addr;
	  $attributes = (($3) + 8|0);
	  $4 = HEAP32[$attributes>>2]|0;
	  _xmmsv_unref($4);
	  $5 = $coll$addr;
	  $idlist = (($5) + 12|0);
	  $6 = HEAP32[$idlist>>2]|0;
	  _xmmsv_unref($6);
	  $7 = $coll$addr;
	  _free($7);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1032;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 152;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsv_coll_new($type) {
	 $type = $type|0;
	 var $0 = 0, $call = 0, $type$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $type$addr = $type;
	 $0 = $type$addr;
	 $call = (_xmmsv_new_coll($0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_coll_ref($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $call = 0, $coll$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll$addr = $coll;
	 $0 = $coll$addr;
	 $call = (_xmmsv_ref($0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_coll_unref($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $coll$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll$addr = $coll;
	 $0 = $coll$addr;
	 _xmmsv_unref($0);
	 STACKTOP = sp;return;
	}
	function _xmmsv_coll_set_idlist($coll,$ids) {
	 $coll = $coll|0;
	 $ids = $ids|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx5 = 0, $coll$addr = 0, $i = 0, $idlist = 0;
	 var $idlist4 = 0, $ids$addr = 0, $inc = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll$addr = $coll;
	 $ids$addr = $ids;
	 $0 = $coll$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $idlist = (($1) + 12|0);
	 $2 = HEAP32[$idlist>>2]|0;
	 (_xmmsv_list_clear($2)|0);
	 $i = 0;
	 while(1) {
	  $3 = $i;
	  $4 = $ids$addr;
	  $arrayidx = (($4) + ($3<<2)|0);
	  $5 = HEAP32[$arrayidx>>2]|0;
	  $tobool = ($5|0)!=(0);
	  if (!($tobool)) {
	   break;
	  }
	  $6 = $coll$addr;
	  $7 = HEAP32[$6>>2]|0;
	  $idlist4 = (($7) + 12|0);
	  $8 = HEAP32[$idlist4>>2]|0;
	  $9 = $i;
	  $10 = $ids$addr;
	  $arrayidx5 = (($10) + ($9<<2)|0);
	  $11 = HEAP32[$arrayidx5>>2]|0;
	  $12 = ($11|0)<(0);
	  $13 = $12 << 31 >> 31;
	  (_xmmsv_list_append_int($8,$11,$13)|0);
	  $14 = $i;
	  $inc = (($14) + 1)|0;
	  $i = $inc;
	 }
	 STACKTOP = sp;return;
	}
	function _xmmsv_coll_add_operand($coll,$op) {
	 $coll = $coll|0;
	 $op = $op|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call8 = 0, $coll$addr = 0, $it = 0, $op$addr = 0, $operands = 0, $operands14 = 0;
	 var $tobool = 0, $tobool1 = 0, $tobool5 = 0, $tobool9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $it = sp + 40|0;
	 $coll$addr = $coll;
	 $op$addr = $op;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1088;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 204;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $op$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 1112;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 1088;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 1056;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 205;
	  _xmmsc_log(0,2,984,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $2 = $coll$addr;
	 $3 = HEAP32[$2>>2]|0;
	 $operands = (($3) + 4|0);
	 $4 = HEAP32[$operands>>2]|0;
	 $call = (_xmmsv_get_list_iter($4,$it)|0);
	 $tobool5 = ($call|0)!=(0);
	 if (!($tobool5)) {
	  STACKTOP = sp;return;
	 }
	 $5 = HEAP32[$it>>2]|0;
	 $6 = $op$addr;
	 $call8 = (__xmmsv_coll_operand_find($5,$6)|0);
	 $tobool9 = ($call8|0)!=(0);
	 if ($tobool9) {
	  HEAP32[$vararg_buffer10>>2] = 1088;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 1144;
	  _xmmsc_log(0,2,1120,$vararg_buffer10);
	  $7 = HEAP32[$it>>2]|0;
	  _xmmsv_list_iter_explicit_destroy($7);
	  STACKTOP = sp;return;
	 } else {
	  $8 = HEAP32[$it>>2]|0;
	  _xmmsv_list_iter_explicit_destroy($8);
	  $9 = $coll$addr;
	  $10 = HEAP32[$9>>2]|0;
	  $operands14 = (($10) + 4|0);
	  $11 = HEAP32[$operands14>>2]|0;
	  $12 = $op$addr;
	  (_xmmsv_list_append($11,$12)|0);
	  STACKTOP = sp;return;
	 }
	}
	function __xmmsv_coll_operand_find($it,$op) {
	 $it = $it|0;
	 $op = $op|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $it$addr = 0, $op$addr = 0, $retval = 0, $tobool = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $it$addr = $it;
	 $op$addr = $op;
	 while(1) {
	  $0 = $it$addr;
	  $call = (_xmmsv_list_iter_entry($0,$v)|0);
	  $tobool = ($call|0)!=(0);
	  if (!($tobool)) {
	   label = 6;
	   break;
	  }
	  $1 = HEAP32[$v>>2]|0;
	  $2 = $op$addr;
	  $cmp = ($1|0)==($2|0);
	  if ($cmp) {
	   label = 4;
	   break;
	  }
	  $3 = $it$addr;
	  _xmmsv_list_iter_next($3);
	 }
	 if ((label|0) == 4) {
	  $retval = 1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 else if ((label|0) == 6) {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_remove_operand($coll,$op) {
	 $coll = $coll|0;
	 $op = $op|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call8 = 0, $coll$addr = 0, $it = 0, $op$addr = 0, $operands = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, $tobool9 = 0, $vararg_buffer = 0;
	 var $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $it = sp + 40|0;
	 $coll$addr = $coll;
	 $op$addr = $op;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1184;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 232;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $op$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 1112;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 1184;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 1056;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 233;
	  _xmmsc_log(0,2,984,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $2 = $coll$addr;
	 $3 = HEAP32[$2>>2]|0;
	 $operands = (($3) + 4|0);
	 $4 = HEAP32[$operands>>2]|0;
	 $call = (_xmmsv_get_list_iter($4,$it)|0);
	 $tobool5 = ($call|0)!=(0);
	 if (!($tobool5)) {
	  STACKTOP = sp;return;
	 }
	 $5 = HEAP32[$it>>2]|0;
	 $6 = $op$addr;
	 $call8 = (__xmmsv_coll_operand_find($5,$6)|0);
	 $tobool9 = ($call8|0)!=(0);
	 if ($tobool9) {
	  $7 = HEAP32[$it>>2]|0;
	  (_xmmsv_list_iter_remove($7)|0);
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 1184;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 1216;
	  _xmmsc_log(0,2,1120,$vararg_buffer10);
	 }
	 $8 = HEAP32[$it>>2]|0;
	 _xmmsv_list_iter_explicit_destroy($8);
	 STACKTOP = sp;return;
	}
	function _xmmsv_coll_idlist_append($coll,$0,$1) {
	 $coll = $coll|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coll$addr = 0, $id$addr = 0, $idlist = 0, $retval = 0;
	 var $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $id$addr = sp;
	 $coll$addr = $coll;
	 $2 = $id$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $coll$addr;
	 $tobool = ($6|0)!=(0|0);
	 if ($tobool) {
	  $7 = $coll$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $idlist = (($8) + 12|0);
	  $9 = HEAP32[$idlist>>2]|0;
	  $10 = $id$addr;
	  $11 = $10;
	  $12 = HEAP32[$11>>2]|0;
	  $13 = (($10) + 4)|0;
	  $14 = $13;
	  $15 = HEAP32[$14>>2]|0;
	  $16 = (_xmmsv_list_append_int($9,$12,$15)|0);
	  $retval = $16;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1256;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 256;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_idlist_insert($coll,$index,$0,$1) {
	 $coll = $coll|0;
	 $index = $index|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coll$addr = 0, $id$addr = 0, $idlist = 0;
	 var $index$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $id$addr = sp;
	 $coll$addr = $coll;
	 $index$addr = $index;
	 $2 = $id$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $coll$addr;
	 $tobool = ($6|0)!=(0|0);
	 if ($tobool) {
	  $7 = $coll$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $idlist = (($8) + 12|0);
	  $9 = HEAP32[$idlist>>2]|0;
	  $10 = $index$addr;
	  $11 = $id$addr;
	  $12 = $11;
	  $13 = HEAP32[$12>>2]|0;
	  $14 = (($11) + 4)|0;
	  $15 = $14;
	  $16 = HEAP32[$15>>2]|0;
	  $17 = (_xmmsv_list_insert_int($9,$10,$13,$16)|0);
	  $retval = $17;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1288;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 271;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_idlist_move($coll,$index,$newindex) {
	 $coll = $coll|0;
	 $index = $index|0;
	 $newindex = $newindex|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $coll$addr = 0, $idlist = 0, $index$addr = 0, $newindex$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $index$addr = $index;
	 $newindex$addr = $newindex;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $idlist = (($2) + 12|0);
	  $3 = HEAP32[$idlist>>2]|0;
	  $4 = $index$addr;
	  $5 = $newindex$addr;
	  $call = (_xmmsv_list_move($3,$4,$5)|0);
	  $retval = $call;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1320;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 286;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_idlist_remove($coll,$index) {
	 $coll = $coll|0;
	 $index = $index|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $coll$addr = 0, $idlist = 0, $index$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $index$addr = $index;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $idlist = (($2) + 12|0);
	  $3 = HEAP32[$idlist>>2]|0;
	  $4 = $index$addr;
	  $call = (_xmmsv_list_remove($3,$4)|0);
	  $retval = $call;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1344;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 300;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_idlist_clear($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $coll$addr = 0, $idlist = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $idlist = (($2) + 12|0);
	  $3 = HEAP32[$idlist>>2]|0;
	  $call = (_xmmsv_list_clear($3)|0);
	  $retval = $call;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1376;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 313;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_idlist_get_index_int32($coll,$index,$val) {
	 $coll = $coll|0;
	 $index = $index|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $coll$addr = 0, $idlist = 0, $index$addr = 0, $raw_val = 0, $retval = 0, $tobool = 0, $tobool2 = 0;
	 var $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $raw_val = sp;
	 $coll$addr = $coll;
	 $index$addr = $index;
	 $val$addr = $val;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1400;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 329;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $48 = $retval;
	  STACKTOP = sp;return ($48|0);
	 }
	 $1 = $coll$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $idlist = (($2) + 12|0);
	 $3 = HEAP32[$idlist>>2]|0;
	 $4 = $index$addr;
	 $call = (_xmmsv_list_get_int32($3,$4,$raw_val)|0);
	 $tobool2 = ($call|0)!=(0);
	 if (!($tobool2)) {
	  $retval = 0;
	  $48 = $retval;
	  STACKTOP = sp;return ($48|0);
	 }
	 $5 = $raw_val;
	 $6 = $5;
	 $7 = HEAP32[$6>>2]|0;
	 $8 = (($5) + 4)|0;
	 $9 = $8;
	 $10 = HEAP32[$9>>2]|0;
	 $11 = (0)<($10|0);
	 $12 = (0)==($10|0);
	 $13 = (2147483647)<($7>>>0);
	 $14 = $12 & $13;
	 $15 = $11 | $14;
	 if ($15) {
	  $23 = 0;$26 = 2147483647;
	 } else {
	  $16 = $raw_val;
	  $17 = $16;
	  $18 = HEAP32[$17>>2]|0;
	  $19 = (($16) + 4)|0;
	  $20 = $19;
	  $21 = HEAP32[$20>>2]|0;
	  $23 = $21;$26 = $18;
	 }
	 $22 = (-1)>($23|0);
	 $24 = (-1)==($23|0);
	 $25 = (2147483648)>($26>>>0);
	 $27 = $24 & $25;
	 $28 = $22 | $27;
	 if ($28) {
	  $47 = -2147483648;$49 = -1;
	 } else {
	  $29 = $raw_val;
	  $30 = $29;
	  $31 = HEAP32[$30>>2]|0;
	  $32 = (($29) + 4)|0;
	  $33 = $32;
	  $34 = HEAP32[$33>>2]|0;
	  $35 = (0)<($34|0);
	  $36 = (0)==($34|0);
	  $37 = (2147483647)<($31>>>0);
	  $38 = $36 & $37;
	  $39 = $35 | $38;
	  if ($39) {
	   $50 = 2147483647;$51 = 0;
	  } else {
	   $40 = $raw_val;
	   $41 = $40;
	   $42 = HEAP32[$41>>2]|0;
	   $43 = (($40) + 4)|0;
	   $44 = $43;
	   $45 = HEAP32[$44>>2]|0;
	   $50 = $42;$51 = $45;
	  }
	  $47 = $50;$49 = $51;
	 }
	 $46 = $val$addr;
	 HEAP32[$46>>2] = $47;
	 $retval = 1;
	 $48 = $retval;
	 STACKTOP = sp;return ($48|0);
	}
	function _xmmsv_coll_idlist_get_index_int64($coll,$index,$val) {
	 $coll = $coll|0;
	 $index = $index|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $coll$addr = 0, $idlist = 0, $index$addr = 0, $retval = 0, $tobool = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $index$addr = $index;
	 $val$addr = $val;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $idlist = (($2) + 12|0);
	  $3 = HEAP32[$idlist>>2]|0;
	  $4 = $index$addr;
	  $5 = $val$addr;
	  $call = (_xmmsv_list_get_int32($3,$4,$5)|0);
	  $retval = $call;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1440;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 347;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_idlist_set_index($coll,$index,$0,$1) {
	 $coll = $coll|0;
	 $index = $index|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coll$addr = 0, $idlist = 0, $index$addr = 0;
	 var $retval = 0, $tobool = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $val$addr = sp;
	 $coll$addr = $coll;
	 $index$addr = $index;
	 $2 = $val$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $coll$addr;
	 $tobool = ($6|0)!=(0|0);
	 if ($tobool) {
	  $7 = $coll$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $idlist = (($8) + 12|0);
	  $9 = HEAP32[$idlist>>2]|0;
	  $10 = $index$addr;
	  $11 = $val$addr;
	  $12 = $11;
	  $13 = HEAP32[$12>>2]|0;
	  $14 = (($11) + 4)|0;
	  $15 = $14;
	  $16 = HEAP32[$15>>2]|0;
	  $17 = (_xmmsv_list_set_int($9,$10,$13,$16)|0);
	  $retval = $17;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1480;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 361;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_idlist_get_size($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $coll$addr = 0, $idlist = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $idlist = (($2) + 12|0);
	  $3 = HEAP32[$idlist>>2]|0;
	  $call = (_xmmsv_list_get_size($3)|0);
	  $retval = $call;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1512;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 374;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_is_type($val,$t) {
	 $val = $val|0;
	 $t = $t|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $conv = 0, $retval = 0, $t$addr = 0, $tobool = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $val$addr = $val;
	 $t$addr = $t;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $call = (_xmmsv_coll_get_type($1)|0);
	  $2 = $t$addr;
	  $cmp = ($call|0)==($2|0);
	  $conv = $cmp&1;
	  $retval = $conv;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1544;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1568;
	  _xmmsc_log(0,2,1120,$vararg_buffer);
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_get_type($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $coll$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $3 = HEAP32[$2>>2]|0;
	  $retval = $3;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1584;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 402;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = -1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_idlist_get($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $coll$addr = 0, $idlist = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $idlist = (($2) + 12|0);
	  $3 = HEAP32[$idlist>>2]|0;
	  $retval = $3;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1608;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 421;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_idlist_set($coll,$idlist) {
	 $coll = $coll|0;
	 $idlist = $idlist|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call9 = 0, $coll$addr = 0, $idlist$addr = 0, $idlist12 = 0, $idlist8 = 0, $old = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0;
	 var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $idlist$addr = $idlist;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1632;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 437;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $idlist$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 1656;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 1632;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 1056;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 438;
	  _xmmsc_log(0,2,984,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $2 = $idlist$addr;
	 $call = (_xmmsv_list_restrict_type($2,2)|0);
	 $tobool4 = ($call|0)!=(0);
	 if ($tobool4) {
	  $3 = $coll$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $idlist8 = (($4) + 12|0);
	  $5 = HEAP32[$idlist8>>2]|0;
	  $old = $5;
	  $6 = $idlist$addr;
	  $call9 = (_xmmsv_ref($6)|0);
	  $7 = $coll$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $idlist12 = (($8) + 12|0);
	  HEAP32[$idlist12>>2] = $call9;
	  $9 = $old;
	  _xmmsv_unref($9);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 1664;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 1632;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 1056;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 439;
	  _xmmsc_log(0,2,984,$vararg_buffer10);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsv_coll_operands_get($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $coll$addr = 0, $operands = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $operands = (($2) + 4|0);
	  $3 = HEAP32[$operands>>2]|0;
	  $retval = $3;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1720;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 449;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_operands_set($coll,$operands) {
	 $coll = $coll|0;
	 $operands = $operands|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call9 = 0, $coll$addr = 0, $old = 0, $operands$addr = 0, $operands12 = 0, $operands8 = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0;
	 var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $operands$addr = $operands;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1744;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 465;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $operands$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 1768;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 1744;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 1056;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 466;
	  _xmmsc_log(0,2,984,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $2 = $operands$addr;
	 $call = (_xmmsv_list_restrict_type($2,4)|0);
	 $tobool4 = ($call|0)!=(0);
	 if ($tobool4) {
	  $3 = $coll$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $operands8 = (($4) + 4|0);
	  $5 = HEAP32[$operands8>>2]|0;
	  $old = $5;
	  $6 = $operands$addr;
	  $call9 = (_xmmsv_ref($6)|0);
	  $7 = $coll$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $operands12 = (($8) + 4|0);
	  HEAP32[$operands12>>2] = $call9;
	  $9 = $old;
	  _xmmsv_unref($9);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 1784;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 1744;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 1056;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 467;
	  _xmmsc_log(0,2,984,$vararg_buffer10);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsv_coll_attributes_get($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $attributes = 0, $coll$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $attributes = (($2) + 8|0);
	  $3 = HEAP32[$attributes>>2]|0;
	  $retval = $3;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1840;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 477;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_attributes_set($coll,$attributes) {
	 $coll = $coll|0;
	 $attributes = $attributes|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $attributes$addr = 0, $attributes12 = 0, $attributes8 = 0, $call = 0, $call9 = 0, $coll$addr = 0, $old = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0;
	 var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $attributes$addr = $attributes;
	 $0 = $coll$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 1024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 1872;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 493;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $attributes$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 1904;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 1872;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 1056;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 494;
	  _xmmsc_log(0,2,984,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $2 = $attributes$addr;
	 $call = (_xmmsv_is_type($2,7)|0);
	 $tobool4 = ($call|0)!=(0);
	 if ($tobool4) {
	  $3 = $coll$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $attributes8 = (($4) + 8|0);
	  $5 = HEAP32[$attributes8>>2]|0;
	  $old = $5;
	  $6 = $attributes$addr;
	  $call9 = (_xmmsv_ref($6)|0);
	  $7 = $coll$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $attributes12 = (($8) + 8|0);
	  HEAP32[$attributes12>>2] = $call9;
	  $9 = $old;
	  _xmmsv_unref($9);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 1920;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 1872;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 1056;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 495;
	  _xmmsc_log(0,2,984,$vararg_buffer10);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsv_coll_attribute_set($coll,$key,$value) {
	 $coll = $coll|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $coll$addr = 0, $key$addr = 0, $value$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $coll$addr;
	 $1 = $key$addr;
	 $2 = $value$addr;
	 _xmmsv_coll_attribute_set_string($0,$1,$2);
	 STACKTOP = sp;return;
	}
	function _xmmsv_coll_attribute_set_string($coll,$key,$value) {
	 $coll = $coll|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $attributes = 0, $call = 0, $coll$addr = 0, $key$addr = 0, $tobool = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $coll$addr;
	 $call = (_xmmsv_is_type($0,4)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $attributes = (($2) + 8|0);
	  $3 = HEAP32[$attributes>>2]|0;
	  $4 = $key$addr;
	  $5 = $value$addr;
	  (_xmmsv_dict_set_string($3,$4,$5)|0);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2008;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 525;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsv_coll_attribute_set_int($coll,$key,$0,$1) {
	 $coll = $coll|0;
	 $key = $key|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $attributes = 0, $call = 0, $coll$addr = 0, $key$addr = 0, $tobool = 0;
	 var $value$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $value$addr = sp;
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $2 = $value$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $coll$addr;
	 $call = (_xmmsv_is_type($6,4)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $7 = $coll$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $attributes = (($8) + 8|0);
	  $9 = HEAP32[$attributes>>2]|0;
	  $10 = $key$addr;
	  $11 = $value$addr;
	  $12 = $11;
	  $13 = HEAP32[$12>>2]|0;
	  $14 = (($11) + 4)|0;
	  $15 = $14;
	  $16 = HEAP32[$15>>2]|0;
	  (_xmmsv_dict_set_int($9,$10,$13,$16)|0);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2040;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 539;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsv_coll_attribute_set_value($coll,$key,$value) {
	 $coll = $coll|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $attributes = 0, $call = 0, $coll$addr = 0, $key$addr = 0, $tobool = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $coll$addr;
	 $call = (_xmmsv_is_type($0,4)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $attributes = (($2) + 8|0);
	  $3 = HEAP32[$attributes>>2]|0;
	  $4 = $key$addr;
	  $5 = $value$addr;
	  (_xmmsv_dict_set($3,$4,$5)|0);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2072;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 553;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsv_coll_attribute_remove($coll,$key) {
	 $coll = $coll|0;
	 $key = $key|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $attributes = 0, $call = 0, $coll$addr = 0, $key$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $0 = $coll$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $attributes = (($1) + 8|0);
	 $2 = HEAP32[$attributes>>2]|0;
	 $3 = $key$addr;
	 $call = (_xmmsv_dict_remove($2,$3)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_coll_attribute_get($coll,$key,$value) {
	 $coll = $coll|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $coll$addr = 0, $key$addr = 0, $value$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $coll$addr;
	 $1 = $key$addr;
	 $2 = $value$addr;
	 $call = (_xmmsv_coll_attribute_get_string($0,$1,$2)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_coll_attribute_get_string($coll,$key,$value) {
	 $coll = $coll|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $attributes = 0, $call = 0, $call3 = 0, $coll$addr = 0, $key$addr = 0, $retval = 0, $tobool = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $coll$addr;
	 $call = (_xmmsv_is_type($0,4)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $attributes = (($2) + 8|0);
	  $3 = HEAP32[$attributes>>2]|0;
	  $4 = $key$addr;
	  $5 = $value$addr;
	  $call3 = (_xmmsv_dict_entry_get_string($3,$4,$5)|0);
	  $retval = $call3;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2104;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 597;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_attribute_get_int32($coll,$key,$val) {
	 $coll = $coll|0;
	 $key = $key|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $attributes = 0, $call = 0, $call2 = 0, $coll$addr = 0, $key$addr = 0, $raw_val = 0, $retval = 0, $tobool = 0;
	 var $tobool3 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $raw_val = sp;
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $val$addr = $val;
	 $0 = $coll$addr;
	 $call = (_xmmsv_is_type($0,4)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 1968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2136;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 613;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $48 = $retval;
	  STACKTOP = sp;return ($48|0);
	 }
	 $1 = $coll$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $attributes = (($2) + 8|0);
	 $3 = HEAP32[$attributes>>2]|0;
	 $4 = $key$addr;
	 $call2 = (_xmmsv_dict_entry_get_int32($3,$4,$raw_val)|0);
	 $tobool3 = ($call2|0)!=(0);
	 if (!($tobool3)) {
	  $retval = 0;
	  $48 = $retval;
	  STACKTOP = sp;return ($48|0);
	 }
	 $5 = $raw_val;
	 $6 = $5;
	 $7 = HEAP32[$6>>2]|0;
	 $8 = (($5) + 4)|0;
	 $9 = $8;
	 $10 = HEAP32[$9>>2]|0;
	 $11 = (0)<($10|0);
	 $12 = (0)==($10|0);
	 $13 = (2147483647)<($7>>>0);
	 $14 = $12 & $13;
	 $15 = $11 | $14;
	 if ($15) {
	  $23 = 0;$26 = 2147483647;
	 } else {
	  $16 = $raw_val;
	  $17 = $16;
	  $18 = HEAP32[$17>>2]|0;
	  $19 = (($16) + 4)|0;
	  $20 = $19;
	  $21 = HEAP32[$20>>2]|0;
	  $23 = $21;$26 = $18;
	 }
	 $22 = (-1)>($23|0);
	 $24 = (-1)==($23|0);
	 $25 = (2147483648)>($26>>>0);
	 $27 = $24 & $25;
	 $28 = $22 | $27;
	 if ($28) {
	  $47 = -2147483648;$49 = -1;
	 } else {
	  $29 = $raw_val;
	  $30 = $29;
	  $31 = HEAP32[$30>>2]|0;
	  $32 = (($29) + 4)|0;
	  $33 = $32;
	  $34 = HEAP32[$33>>2]|0;
	  $35 = (0)<($34|0);
	  $36 = (0)==($34|0);
	  $37 = (2147483647)<($31>>>0);
	  $38 = $36 & $37;
	  $39 = $35 | $38;
	  if ($39) {
	   $50 = 2147483647;$51 = 0;
	  } else {
	   $40 = $raw_val;
	   $41 = $40;
	   $42 = HEAP32[$41>>2]|0;
	   $43 = (($40) + 4)|0;
	   $44 = $43;
	   $45 = HEAP32[$44>>2]|0;
	   $50 = $42;$51 = $45;
	  }
	  $47 = $50;$49 = $51;
	 }
	 $46 = $val$addr;
	 HEAP32[$46>>2] = $47;
	 $retval = 1;
	 $48 = $retval;
	 STACKTOP = sp;return ($48|0);
	}
	function _xmmsv_coll_attribute_get_int64($coll,$key,$value) {
	 $coll = $coll|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $attributes = 0, $call = 0, $call3 = 0, $coll$addr = 0, $key$addr = 0, $retval = 0, $tobool = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $coll$addr;
	 $call = (_xmmsv_is_type($0,4)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $attributes = (($2) + 8|0);
	  $3 = HEAP32[$attributes>>2]|0;
	  $4 = $key$addr;
	  $5 = $value$addr;
	  $call3 = (_xmmsv_dict_entry_get_int32($3,$4,$5)|0);
	  $retval = $call3;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2168;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 632;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_attribute_get_value($coll,$key,$value) {
	 $coll = $coll|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $attributes = 0, $call = 0, $call3 = 0, $coll$addr = 0, $key$addr = 0, $retval = 0, $tobool = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $coll$addr = $coll;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $coll$addr;
	 $call = (_xmmsv_is_type($0,4)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = $coll$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $attributes = (($2) + 8|0);
	  $3 = HEAP32[$attributes>>2]|0;
	  $4 = $key$addr;
	  $5 = $value$addr;
	  $call3 = (_xmmsv_dict_get($3,$4,$5)|0);
	  $retval = $call3;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 1968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2200;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 1056;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 647;
	  _xmmsc_log(0,2,984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_universe() {
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_xmmsv_new_coll(1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_coll_add_order_operator($coll,$value) {
	 $coll = $coll|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $coll$addr = 0, $ordered = 0, $retval = 0, $value$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll$addr = $coll;
	 $value$addr = $value;
	 $0 = $value$addr;
	 $call = (_xmmsv_coll_normalize_order_arguments($0)|0);
	 $value$addr = $call;
	 $1 = $value$addr;
	 $cmp = ($1|0)!=(0|0);
	 if ($cmp) {
	  $call1 = (_xmmsv_new_coll(14)|0);
	  $ordered = $call1;
	  $2 = $ordered;
	  $3 = $coll$addr;
	  _xmmsv_coll_add_operand($2,$3);
	  $4 = $ordered;
	  $5 = $value$addr;
	  _xmmsv_coll_attributes_set($4,$5);
	  $6 = $value$addr;
	  _xmmsv_unref($6);
	  $7 = $ordered;
	  $retval = $7;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  $8 = $coll$addr;
	  $call2 = (_xmmsv_ref($8)|0);
	  $retval = $call2;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_normalize_order_arguments($value) {
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call14 = 0, $call19 = 0;
	 var $call2 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp9 = 0, $conv = 0, $incdec$ptr = 0, $key = 0, $order = 0, $retval = 0, $tobool = 0, $tobool5 = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $key = sp + 8|0;
	 $value$addr = $value;
	 $0 = $value$addr;
	 $cmp = ($0|0)==(0|0);
	 if ($cmp) {
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $1 = $value$addr;
	 $call = (_xmmsv_is_type($1,7)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = $value$addr;
	  $call2 = (_xmmsv_ref($2)|0);
	  $retval = $call2;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $3 = $value$addr;
	 $call4 = (_xmmsv_get_string($3,$key)|0);
	 $tobool5 = ($call4|0)!=(0);
	 if (!($tobool5)) {
	  HEAP32[$vararg_buffer>>2] = 2496;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2536;
	  _xmmsc_log(0,2,1120,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $call8 = (_xmmsv_new_dict()|0);
	 $order = $call8;
	 $4 = HEAP32[$key>>2]|0;
	 $5 = HEAP8[$4>>0]|0;
	 $conv = $5 << 24 >> 24;
	 $cmp9 = ($conv|0)==(45);
	 if ($cmp9) {
	  $6 = $order;
	  (_xmmsv_dict_set_string($6,2576,2592)|0);
	  $7 = HEAP32[$key>>2]|0;
	  $incdec$ptr = (($7) + 1|0);
	  HEAP32[$key>>2] = $incdec$ptr;
	 }
	 $8 = HEAP32[$key>>2]|0;
	 $call14 = (_strcmp($8,2600)|0);
	 $cmp15 = ($call14|0)==(0);
	 if ($cmp15) {
	  $9 = $order;
	  (_xmmsv_dict_set_string($9,2608,2600)|0);
	 } else {
	  $10 = HEAP32[$key>>2]|0;
	  $call19 = (_strcmp($10,2616)|0);
	  $cmp20 = ($call19|0)==(0);
	  if ($cmp20) {
	   $11 = $order;
	   (_xmmsv_dict_set_string($11,2608,2616)|0);
	  } else {
	   $12 = $order;
	   (_xmmsv_dict_set_string($12,2608,2624)|0);
	   $13 = $order;
	   $14 = HEAP32[$key>>2]|0;
	   (_xmmsv_dict_set_string($13,2632,$14)|0);
	  }
	 }
	 $15 = $order;
	 $retval = $15;
	 $16 = $retval;
	 STACKTOP = sp;return ($16|0);
	}
	function _xmmsv_coll_add_order_operators($coll,$order) {
	 $coll = $coll|0;
	 $order = $order|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call10 = 0, $call3 = 0, $call8 = 0;
	 var $cmp = 0, $coll$addr = 0, $current = 0, $it = 0, $order$addr = 0, $ordered = 0, $retval = 0, $tobool = 0, $tobool4 = 0, $tobool9 = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 8|0;
	 $it = sp + 16|0;
	 $value = sp + 36|0;
	 $coll$addr = $coll;
	 $order$addr = $order;
	 $0 = $coll$addr;
	 $cmp = ($0|0)==(0|0);
	 if ($cmp) {
	  HEAP32[$vararg_buffer>>2] = 2232;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2264;
	  _xmmsc_log(0,2,1120,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $1 = $coll$addr;
	 (_xmmsv_ref($1)|0);
	 $2 = $order$addr;
	 $tobool = ($2|0)!=(0|0);
	 if (!($tobool)) {
	  $3 = $coll$addr;
	  $retval = $3;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $4 = $order$addr;
	 $call3 = (_xmmsv_is_type($4,6)|0);
	 $tobool4 = ($call3|0)!=(0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer2>>2] = 2232;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 2288;
	  _xmmsc_log(0,2,1120,$vararg_buffer2);
	  $5 = $coll$addr;
	  $retval = $5;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $6 = $coll$addr;
	 $current = $6;
	 $7 = $order$addr;
	 (_xmmsv_get_list_iter($7,$it)|0);
	 $8 = HEAP32[$it>>2]|0;
	 _xmmsv_list_iter_last($8);
	 while(1) {
	  $9 = HEAP32[$it>>2]|0;
	  $call8 = (_xmmsv_list_iter_entry($9,$value)|0);
	  $tobool9 = ($call8|0)!=(0);
	  if (!($tobool9)) {
	   break;
	  }
	  $10 = $current;
	  $11 = HEAP32[$value>>2]|0;
	  $call10 = (_xmmsv_coll_add_order_operator($10,$11)|0);
	  $ordered = $call10;
	  $12 = $current;
	  _xmmsv_unref($12);
	  $13 = $ordered;
	  $current = $13;
	  $14 = HEAP32[$it>>2]|0;
	  _xmmsv_list_iter_prev($14);
	 }
	 $15 = $current;
	 $retval = $15;
	 $16 = $retval;
	 STACKTOP = sp;return ($16|0);
	}
	function _xmmsv_coll_add_limit_operator($coll,$lim_start,$lim_len) {
	 $coll = $coll|0;
	 $lim_start = $lim_start|0;
	 $lim_len = $lim_len|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0;
	 var $call10 = 0, $call22 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp23 = 0, $cmp25 = 0, $cmp4 = 0, $cmp8 = 0, $coll$addr = 0, $count = 0, $count20 = 0, $lim_len$addr = 0, $lim_start$addr = 0, $ret = 0, $retval = 0;
	 var $str = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp + 32|0;
	 $vararg_buffer11 = sp + 24|0;
	 $vararg_buffer7 = sp + 16|0;
	 $vararg_buffer4 = sp + 40|0;
	 $vararg_buffer = sp;
	 $str = sp + 72|0;
	 $coll$addr = $coll;
	 $lim_start$addr = $lim_start;
	 $lim_len$addr = $lim_len;
	 $0 = $lim_start$addr;
	 $cmp = ($0|0)>=(0);
	 if ($cmp) {
	  $1 = $lim_len$addr;
	  $cmp1 = ($1|0)>=(0);
	  if ($cmp1) {
	   $2 = $lim_start$addr;
	   $cmp2 = ($2|0)==(0);
	   if ($cmp2) {
	    $3 = $lim_len$addr;
	    $cmp4 = ($3|0)==(0);
	    if ($cmp4) {
	     $4 = $coll$addr;
	     $call = (_xmmsv_ref($4)|0);
	     $retval = $call;
	     $18 = $retval;
	     STACKTOP = sp;return ($18|0);
	    }
	   }
	   $call7 = (_xmmsv_new_coll(15)|0);
	   $ret = $call7;
	   $5 = $ret;
	   $6 = $coll$addr;
	   _xmmsv_coll_add_operand($5,$6);
	   $7 = $lim_start$addr;
	   $cmp8 = ($7|0)!=(0);
	   if ($cmp8) {
	    $8 = $lim_start$addr;
	    HEAP32[$vararg_buffer4>>2] = $8;
	    $call10 = (_snprintf($str,12,2376,$vararg_buffer4)|0);
	    $count = $call10;
	    $9 = $count;
	    $cmp11 = ($9|0)>(0);
	    if ($cmp11) {
	     $10 = $count;
	     $cmp13 = ($10>>>0)<(12);
	     if ($cmp13) {
	      $11 = $ret;
	      _xmmsv_coll_attribute_set_string($11,2384,$str);
	     } else {
	      label = 11;
	     }
	    } else {
	     label = 11;
	    }
	    if ((label|0) == 11) {
	     HEAP32[$vararg_buffer7>>2] = 2344;
	     $vararg_ptr10 = (($vararg_buffer7) + 4|0);
	     HEAP32[$vararg_ptr10>>2] = 2392;
	     _xmmsc_log(0,2,1120,$vararg_buffer7);
	    }
	   }
	   $12 = $lim_len$addr;
	   $cmp18 = ($12|0)!=(0);
	   if ($cmp18) {
	    $13 = $lim_len$addr;
	    HEAP32[$vararg_buffer11>>2] = $13;
	    $call22 = (_snprintf($str,12,2376,$vararg_buffer11)|0);
	    $count20 = $call22;
	    $14 = $count20;
	    $cmp23 = ($14|0)>(0);
	    if ($cmp23) {
	     $15 = $count20;
	     $cmp25 = ($15>>>0)<(12);
	     if ($cmp25) {
	      $16 = $ret;
	      _xmmsv_coll_attribute_set_string($16,2440,$str);
	     } else {
	      label = 17;
	     }
	    } else {
	     label = 17;
	    }
	    if ((label|0) == 17) {
	     HEAP32[$vararg_buffer14>>2] = 2344;
	     $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	     HEAP32[$vararg_ptr17>>2] = 2448;
	     _xmmsc_log(0,2,1120,$vararg_buffer14);
	    }
	   }
	   $17 = $ret;
	   $retval = $17;
	   $18 = $retval;
	   STACKTOP = sp;return ($18|0);
	  }
	 }
	 HEAP32[$vararg_buffer>>2] = 2312;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAP32[$vararg_ptr1>>2] = 2344;
	 $vararg_ptr2 = (($vararg_buffer) + 8|0);
	 HEAP32[$vararg_ptr2>>2] = 1056;
	 $vararg_ptr3 = (($vararg_buffer) + 12|0);
	 HEAP32[$vararg_ptr3>>2] = 787;
	 _xmmsc_log(0,2,984,$vararg_buffer);
	 $retval = 0;
	 $18 = $retval;
	 STACKTOP = sp;return ($18|0);
	}
	function _xmmsv_copy($val) {
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $call = 0, $call1 = 0, $call12 = 0, $call15 = 0, $call17 = 0;
	 var $call21 = 0, $call23 = 0, $call29 = 0, $call3 = 0, $call31 = 0, $call9 = 0, $cur_val = 0, $div = 0, $f = 0, $i = 0, $len = 0, $len27 = 0, $retval = 0, $s = 0, $tobool = 0, $tobool32 = 0, $type = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $i = sp;
	 $s = sp + 28|0;
	 $f = sp + 44|0;
	 $val$addr = $val;
	 $cur_val = 0;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 2768;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2776;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 2792;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 42;
	  _xmmsc_log(0,2,2728,$vararg_buffer);
	  $retval = 0;
	  $33 = $retval;
	  STACKTOP = sp;return ($33|0);
	 }
	 $1 = $val$addr;
	 $call = (_xmmsv_get_type($1)|0);
	 $type = $call;
	 $2 = $type;
	 do {
	  switch ($2|0) {
	  case 7:  {
	   $3 = $val$addr;
	   $call1 = (_duplicate_dict_value($3)|0);
	   $cur_val = $call1;
	   break;
	  }
	  case 6:  {
	   $4 = $val$addr;
	   $call3 = (_duplicate_list_value($4)|0);
	   $cur_val = $call3;
	   break;
	  }
	  case 2:  {
	   $5 = $val$addr;
	   (_xmmsv_get_int32($5,$i)|0);
	   $6 = $i;
	   $7 = $6;
	   $8 = HEAP32[$7>>2]|0;
	   $9 = (($6) + 4)|0;
	   $10 = $9;
	   $11 = HEAP32[$10>>2]|0;
	   $12 = (_xmmsv_new_int($8,$11)|0);
	   $cur_val = $12;
	   break;
	  }
	  case 9:  {
	   $13 = $val$addr;
	   (_xmmsv_get_float($13,$f)|0);
	   $14 = +HEAPF32[$f>>2];
	   $call9 = (_xmmsv_new_float($14)|0);
	   $cur_val = $call9;
	   break;
	  }
	  case 3:  {
	   $15 = $val$addr;
	   (_xmmsv_get_string($15,$s)|0);
	   $16 = HEAP32[$s>>2]|0;
	   $call12 = (_xmmsv_new_string($16)|0);
	   $cur_val = $call12;
	   break;
	  }
	  case 1:  {
	   $17 = $val$addr;
	   (_xmmsv_get_error($17,$s)|0);
	   $18 = HEAP32[$s>>2]|0;
	   $call15 = (_xmmsv_new_error($18)|0);
	   $cur_val = $call15;
	   break;
	  }
	  case 4:  {
	   $19 = $val$addr;
	   $call17 = (_duplicate_coll_value($19)|0);
	   $cur_val = $call17;
	   break;
	  }
	  case 5:  {
	   $20 = $val$addr;
	   $21 = HEAP32[$20>>2]|0;
	   $22 = $val$addr;
	   $len = (($22) + 4|0);
	   $23 = HEAP32[$len>>2]|0;
	   $call21 = (_xmmsv_new_bin($21,$23)|0);
	   $cur_val = $call21;
	   break;
	  }
	  case 8:  {
	   $call23 = (_xmmsv_new_bitbuffer()|0);
	   $cur_val = $call23;
	   $24 = $cur_val;
	   $25 = $val$addr;
	   $buf = (($25) + 4|0);
	   $26 = HEAP32[$buf>>2]|0;
	   $27 = $val$addr;
	   $len27 = (($27) + 12|0);
	   $28 = HEAP32[$len27>>2]|0;
	   $div = (($28|0) / 8)&-1;
	   (_xmmsv_bitbuffer_put_data($24,$26,$div)|0);
	   $29 = $cur_val;
	   $30 = $val$addr;
	   $call29 = (_xmmsv_bitbuffer_pos($30)|0);
	   (_xmmsv_bitbuffer_goto($29,$call29)|0);
	   break;
	  }
	  default: {
	   $call31 = (_xmmsv_new_none()|0);
	   $cur_val = $call31;
	  }
	  }
	 } while(0);
	 $31 = $cur_val;
	 $tobool32 = ($31|0)!=(0|0);
	 if (!($tobool32)) {
	  ___assert_fail((2824|0),(2792|0),82,(2776|0));
	  // unreachable;
	 }
	 $32 = $cur_val;
	 $retval = $32;
	 $33 = $retval;
	 STACKTOP = sp;return ($33|0);
	}
	function _duplicate_dict_value($val) {
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $dup_val = 0, $it = 0, $key = 0, $new_elem = 0, $retval = 0;
	 var $tobool = 0, $tobool3 = 0, $v = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it = sp + 36|0;
	 $key = sp + 16|0;
	 $v = sp + 24|0;
	 $val$addr = $val;
	 $0 = $val$addr;
	 $call = (_xmmsv_get_dict_iter($0,$it)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 2888;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2920;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 2792;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 95;
	  _xmmsc_log(0,2,2728,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $call1 = (_xmmsv_new_dict()|0);
	 $dup_val = $call1;
	 while(1) {
	  $1 = HEAP32[$it>>2]|0;
	  $call2 = (_xmmsv_dict_iter_pair($1,$key,$v)|0);
	  $tobool3 = ($call2|0)!=(0);
	  if (!($tobool3)) {
	   break;
	  }
	  $2 = HEAP32[$v>>2]|0;
	  $call4 = (_xmmsv_copy($2)|0);
	  $new_elem = $call4;
	  $3 = $dup_val;
	  $4 = HEAP32[$key>>2]|0;
	  $5 = $new_elem;
	  (_xmmsv_dict_set($3,$4,$5)|0);
	  $6 = $new_elem;
	  _xmmsv_unref($6);
	  $7 = HEAP32[$it>>2]|0;
	  _xmmsv_dict_iter_next($7);
	 }
	 $8 = HEAP32[$it>>2]|0;
	 _xmmsv_dict_iter_explicit_destroy($8);
	 $9 = $dup_val;
	 $retval = $9;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function _duplicate_list_value($val) {
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $dup_val = 0, $it = 0, $new_elem = 0, $retval = 0, $tobool = 0, $tobool3 = 0;
	 var $v = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it = sp + 20|0;
	 $v = sp + 16|0;
	 $val$addr = $val;
	 $0 = $val$addr;
	 $call = (_xmmsv_get_list_iter($0,$it)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 2832;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2864;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 2792;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 117;
	  _xmmsc_log(0,2,2728,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $call1 = (_xmmsv_new_list()|0);
	 $dup_val = $call1;
	 while(1) {
	  $1 = HEAP32[$it>>2]|0;
	  $call2 = (_xmmsv_list_iter_entry($1,$v)|0);
	  $tobool3 = ($call2|0)!=(0);
	  if (!($tobool3)) {
	   break;
	  }
	  $2 = HEAP32[$v>>2]|0;
	  $call4 = (_xmmsv_copy($2)|0);
	  $new_elem = $call4;
	  $3 = $dup_val;
	  $4 = $new_elem;
	  (_xmmsv_list_append($3,$4)|0);
	  $5 = $new_elem;
	  _xmmsv_unref($5);
	  $6 = HEAP32[$it>>2]|0;
	  _xmmsv_list_iter_next($6);
	 }
	 $7 = HEAP32[$it>>2]|0;
	 _xmmsv_list_iter_explicit_destroy($7);
	 $8 = $dup_val;
	 $retval = $8;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _duplicate_coll_value($val) {
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $attributes = 0, $call = 0, $call1 = 0;
	 var $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $copy = 0, $dup_val = 0, $idlist = 0, $operands = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $0 = $val$addr;
	 $call = (_xmmsv_coll_get_type($0)|0);
	 $call1 = (_xmmsv_new_coll($call)|0);
	 $dup_val = $call1;
	 $1 = $val$addr;
	 $call2 = (_xmmsv_coll_attributes_get($1)|0);
	 $attributes = $call2;
	 $2 = $attributes;
	 $call3 = (_xmmsv_copy($2)|0);
	 $copy = $call3;
	 $3 = $dup_val;
	 $4 = $copy;
	 _xmmsv_coll_attributes_set($3,$4);
	 $5 = $copy;
	 _xmmsv_unref($5);
	 $6 = $val$addr;
	 $call4 = (_xmmsv_coll_operands_get($6)|0);
	 $operands = $call4;
	 $7 = $operands;
	 $call5 = (_xmmsv_copy($7)|0);
	 $copy = $call5;
	 $8 = $dup_val;
	 $9 = $copy;
	 _xmmsv_coll_operands_set($8,$9);
	 $10 = $copy;
	 _xmmsv_unref($10);
	 $11 = $val$addr;
	 $call6 = (_xmmsv_coll_idlist_get($11)|0);
	 $idlist = $call6;
	 $12 = $idlist;
	 $call7 = (_xmmsv_copy($12)|0);
	 $copy = $call7;
	 $13 = $dup_val;
	 $14 = $copy;
	 _xmmsv_coll_idlist_set($13,$14);
	 $15 = $copy;
	 _xmmsv_unref($15);
	 $16 = $dup_val;
	 STACKTOP = sp;return ($16|0);
	}
	function _xmmsv_coll_copy($orig_coll) {
	 $orig_coll = $orig_coll|0;
	 var $0 = 0, $call = 0, $orig_coll$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $orig_coll$addr = $orig_coll;
	 $0 = $orig_coll$addr;
	 $call = (_duplicate_coll_value($0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function __xmmsv_dict_free($dict) {
	 $dict = $dict|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx13 = 0, $arrayidx15 = 0, $arrayidx5 = 0, $cmp = 0, $cmp3 = 0, $cmp7 = 0;
	 var $data12 = 0, $data14 = 0, $data18 = 0, $data2 = 0, $data4 = 0, $data9 = 0, $dec = 0, $dict$addr = 0, $i = 0, $it = 0, $iterators = 0, $iterators1 = 0, $shl = 0, $size = 0, $str = 0, $str11 = 0, $str16 = 0, $str6 = 0, $sub = 0, $tobool = 0;
	 var $value = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $dict$addr = $dict;
	 while(1) {
	  $0 = $dict$addr;
	  $iterators = (($0) + 12|0);
	  $1 = HEAP32[$iterators>>2]|0;
	  $tobool = ($1|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $2 = $dict$addr;
	  $iterators1 = (($2) + 12|0);
	  $3 = HEAP32[$iterators1>>2]|0;
	  $4 = HEAP32[$3>>2]|0;
	  $it = $4;
	  $5 = $it;
	  __xmmsv_dict_iter_free($5);
	 }
	 $6 = $dict$addr;
	 $size = (($6) + 4|0);
	 $7 = HEAP32[$size>>2]|0;
	 $shl = 1 << $7;
	 $sub = (($shl) - 1)|0;
	 $i = $sub;
	 while(1) {
	  $8 = $i;
	  $cmp = ($8|0)>=(0);
	  if (!($cmp)) {
	   break;
	  }
	  $9 = $i;
	  $10 = $dict$addr;
	  $data2 = (($10) + 8|0);
	  $11 = HEAP32[$data2>>2]|0;
	  $arrayidx = (($11) + (($9*12)|0)|0);
	  $str = (($arrayidx) + 4|0);
	  $12 = HEAP32[$str>>2]|0;
	  $cmp3 = ($12|0)!=(0|0);
	  if ($cmp3) {
	   $13 = $i;
	   $14 = $dict$addr;
	   $data4 = (($14) + 8|0);
	   $15 = HEAP32[$data4>>2]|0;
	   $arrayidx5 = (($15) + (($13*12)|0)|0);
	   $str6 = (($arrayidx5) + 4|0);
	   $16 = HEAP32[$str6>>2]|0;
	   $cmp7 = ($16|0)!=((-1)|0);
	   if ($cmp7) {
	    $17 = $i;
	    $18 = $dict$addr;
	    $data9 = (($18) + 8|0);
	    $19 = HEAP32[$data9>>2]|0;
	    $arrayidx10 = (($19) + (($17*12)|0)|0);
	    $str11 = (($arrayidx10) + 4|0);
	    $20 = HEAP32[$str11>>2]|0;
	    _free($20);
	    $21 = $i;
	    $22 = $dict$addr;
	    $data12 = (($22) + 8|0);
	    $23 = HEAP32[$data12>>2]|0;
	    $arrayidx13 = (($23) + (($21*12)|0)|0);
	    $value = (($arrayidx13) + 8|0);
	    $24 = HEAP32[$value>>2]|0;
	    _xmmsv_unref($24);
	   }
	   $25 = $i;
	   $26 = $dict$addr;
	   $data14 = (($26) + 8|0);
	   $27 = HEAP32[$data14>>2]|0;
	   $arrayidx15 = (($27) + (($25*12)|0)|0);
	   $str16 = (($arrayidx15) + 4|0);
	   HEAP32[$str16>>2] = 0;
	  }
	  $28 = $i;
	  $dec = (($28) + -1)|0;
	  $i = $dec;
	 }
	 $29 = $dict$addr;
	 $data18 = (($29) + 8|0);
	 $30 = HEAP32[$data18>>2]|0;
	 _free($30);
	 $31 = $dict$addr;
	 _free($31);
	 STACKTOP = sp;return;
	}
	function __xmmsv_dict_iter_free($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $it$addr = 0, $iterators = 0, $iterators2 = 0, $parent = 0, $parent1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $0 = $it$addr;
	 $parent = (($0) + 4|0);
	 $1 = HEAP32[$parent>>2]|0;
	 $iterators = (($1) + 12|0);
	 $2 = HEAP32[$iterators>>2]|0;
	 $3 = $it$addr;
	 $call = (_x_list_remove($2,$3)|0);
	 $4 = $it$addr;
	 $parent1 = (($4) + 4|0);
	 $5 = HEAP32[$parent1>>2]|0;
	 $iterators2 = (($5) + 12|0);
	 HEAP32[$iterators2>>2] = $call;
	 $6 = $it$addr;
	 _free($6);
	 STACKTOP = sp;return;
	}
	function _xmmsv_new_dict() {
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call1 = 0, $tobool = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (__xmmsv_new(7)|0);
	 $val = $call;
	 $0 = $val;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $call1 = (__xmmsv_dict_new()|0);
	  $1 = $val;
	  HEAP32[$1>>2] = $call1;
	 }
	 $2 = $val;
	 STACKTOP = sp;return ($2|0);
	}
	function __xmmsv_dict_new() {
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $data = 0, $data3 = 0, $dict = 0, $mul = 0, $retval = 0, $shl = 0, $size = 0, $size1 = 0;
	 var $tobool = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer3 = sp + 16|0;
	 $vararg_buffer = sp;
	 $call = (_calloc(1,16)|0);
	 $dict = $call;
	 $0 = $dict;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3464;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3008;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 216;
	  _xmmsc_log(0,2,3408,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $dict;
	 $size = (($1) + 4|0);
	 HEAP32[$size>>2] = 2;
	 $2 = $dict;
	 $size1 = (($2) + 4|0);
	 $3 = HEAP32[$size1>>2]|0;
	 $shl = 1 << $3;
	 $mul = ($shl*12)|0;
	 $call2 = (_calloc(1,$mul)|0);
	 $4 = $dict;
	 $data = (($4) + 8|0);
	 HEAP32[$data>>2] = $call2;
	 $5 = $dict;
	 $data3 = (($5) + 8|0);
	 $6 = HEAP32[$data3>>2]|0;
	 $tobool4 = ($6|0)!=(0|0);
	 if ($tobool4) {
	  $8 = $dict;
	  $retval = $8;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  HEAP32[$vararg_buffer3>>2] = 3464;
	  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
	  HEAP32[$vararg_ptr6>>2] = 3008;
	  $vararg_ptr7 = (($vararg_buffer3) + 8|0);
	  HEAP32[$vararg_ptr7>>2] = 224;
	  _xmmsc_log(0,2,3408,$vararg_buffer3);
	  $7 = $dict;
	  _free($7);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsv_dict_has_key($dictv,$key) {
	 $dictv = $dictv|0;
	 $key = $key|0;
	 var $0 = 0, $1 = 0, $call = 0, $dictv$addr = 0, $key$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $dictv$addr = $dictv;
	 $key$addr = $key;
	 $0 = $dictv$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_get($0,$1,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_dict_get($dictv,$key,$val) {
	 $dictv = $dictv|0;
	 $key = $key|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx17 = 0, $arrayidx19 = 0, $arrayidx25 = 0, $call = 0, $call11 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $cmp22 = 0, $data = 0, $data$byval_copy = 0, $data15 = 0;
	 var $data16 = 0, $data18 = 0, $data24 = 0, $deleted = 0, $dict = 0, $dictv$addr = 0, $key$addr = 0, $pos = 0, $ret = 0, $retval = 0, $str = 0, $str20 = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool4 = 0, $val$addr = 0, $value = 0, $value26 = 0, $vararg_buffer = 0;
	 var $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $data$byval_copy = sp + 60|0;
	 $vararg_buffer10 = sp;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp + 32|0;
	 $pos = sp + 92|0;
	 $deleted = sp + 96|0;
	 $data = sp + 48|0;
	 $dictv$addr = $dictv;
	 $key$addr = $key;
	 $val$addr = $val;
	 $ret = 0;
	 $0 = $key$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 2984;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 2992;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 317;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  $retval = 0;
	  $26 = $retval;
	  STACKTOP = sp;return ($26|0);
	 }
	 $1 = $dictv$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 3040;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 2992;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 3008;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 318;
	  _xmmsc_log(0,2,2944,$vararg_buffer4);
	  $retval = 0;
	  $26 = $retval;
	  STACKTOP = sp;return ($26|0);
	 }
	 $2 = $dictv$addr;
	 $call = (_xmmsv_is_type($2,7)|0);
	 $tobool4 = ($call|0)!=(0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer10>>2] = 3048;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 2992;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 3008;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 319;
	  _xmmsc_log(0,2,2944,$vararg_buffer10);
	  $retval = 0;
	  $26 = $retval;
	  STACKTOP = sp;return ($26|0);
	 }
	 $3 = $key$addr;
	 $4 = $key$addr;
	 $call7 = (_strlen(($4|0))|0);
	 $call8 = (__xmmsv_dict_hash($3,$call7)|0);
	 HEAP32[$data>>2] = $call8;
	 $str = (($data) + 4|0);
	 $5 = $key$addr;
	 HEAP32[$str>>2] = $5;
	 $value = (($data) + 8|0);
	 HEAP32[$value>>2] = 0;
	 $6 = $dictv$addr;
	 $7 = HEAP32[$6>>2]|0;
	 $dict = $7;
	 $8 = $dict;
	 ;HEAP32[$data$byval_copy+0>>2]=HEAP32[$data+0>>2]|0;HEAP32[$data$byval_copy+4>>2]=HEAP32[$data+4>>2]|0;HEAP32[$data$byval_copy+8>>2]=HEAP32[$data+8>>2]|0;
	 $call11 = (__xmmsv_dict_search($8,$data$byval_copy,$pos,$deleted)|0);
	 $tobool12 = ($call11|0)!=(0);
	 if ($tobool12) {
	  $9 = HEAP32[$deleted>>2]|0;
	  $cmp = ($9|0)!=(-1);
	  if ($cmp) {
	   $10 = HEAP32[$deleted>>2]|0;
	   $11 = $dict;
	   $data15 = (($11) + 8|0);
	   $12 = HEAP32[$data15>>2]|0;
	   $arrayidx = (($12) + (($10*12)|0)|0);
	   $13 = HEAP32[$pos>>2]|0;
	   $14 = $dict;
	   $data16 = (($14) + 8|0);
	   $15 = HEAP32[$data16>>2]|0;
	   $arrayidx17 = (($15) + (($13*12)|0)|0);
	   ;HEAP32[$arrayidx+0>>2]=HEAP32[$arrayidx17+0>>2]|0;HEAP32[$arrayidx+4>>2]=HEAP32[$arrayidx17+4>>2]|0;HEAP32[$arrayidx+8>>2]=HEAP32[$arrayidx17+8>>2]|0;
	   $16 = HEAP32[$pos>>2]|0;
	   $17 = $dict;
	   $data18 = (($17) + 8|0);
	   $18 = HEAP32[$data18>>2]|0;
	   $arrayidx19 = (($18) + (($16*12)|0)|0);
	   $str20 = (($arrayidx19) + 4|0);
	   HEAP32[$str20>>2] = (-1);
	  }
	  $19 = $val$addr;
	  $cmp22 = ($19|0)!=(0|0);
	  if ($cmp22) {
	   $20 = HEAP32[$pos>>2]|0;
	   $21 = $dict;
	   $data24 = (($21) + 8|0);
	   $22 = HEAP32[$data24>>2]|0;
	   $arrayidx25 = (($22) + (($20*12)|0)|0);
	   $value26 = (($arrayidx25) + 8|0);
	   $23 = HEAP32[$value26>>2]|0;
	   $24 = $val$addr;
	   HEAP32[$24>>2] = $23;
	  }
	  $ret = 1;
	 }
	 $25 = $ret;
	 $retval = $25;
	 $26 = $retval;
	 STACKTOP = sp;return ($26|0);
	}
	function _xmmsv_dict_entry_get_type($val,$key) {
	 $val = $val|0;
	 $key = $key|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $key$addr = 0, $retval = 0, $tobool = 0, $v = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $val$addr = $val;
	 $key$addr = $key;
	 $0 = $val$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_get($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = HEAP32[$v>>2]|0;
	  $call1 = (_xmmsv_get_type($2)|0);
	  $retval = $call1;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function __xmmsv_dict_hash($key,$len) {
	 $key = $key|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx7 = 0, $cmp = 0, $conv = 0, $conv13 = 0, $conv8 = 0, $data = 0, $h = 0, $k = 0;
	 var $key$addr = 0, $len$addr = 0, $m = 0, $mul = 0, $mul15 = 0, $mul18 = 0, $mul2 = 0, $mul3 = 0, $r = 0, $seed = 0, $shl = 0, $shl9 = 0, $shr = 0, $shr16 = 0, $shr19 = 0, $sub = 0, $xor = 0, $xor1 = 0, $xor10 = 0, $xor14 = 0;
	 var $xor17 = 0, $xor20 = 0, $xor4 = 0, $xor5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $k = sp + 24|0;
	 $key$addr = $key;
	 $len$addr = $len;
	 $seed = 305419896;
	 $m = 1540483477;
	 $r = 24;
	 $0 = $len$addr;
	 $xor = 305419896 ^ $0;
	 $h = $xor;
	 $1 = $key$addr;
	 $data = $1;
	 while(1) {
	  $2 = $len$addr;
	  $cmp = ($2|0)>=(4);
	  if (!($cmp)) {
	   break;
	  }
	  $3 = $data;
	  ;HEAP8[$k+0>>0]=HEAP8[$3+0>>0]|0;HEAP8[$k+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$k+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$k+3>>0]=HEAP8[$3+3>>0]|0;
	  $4 = HEAP32[$k>>2]|0;
	  $mul = Math_imul($4, 1540483477)|0;
	  HEAP32[$k>>2] = $mul;
	  $5 = HEAP32[$k>>2]|0;
	  $shr = $5 >>> 24;
	  $6 = HEAP32[$k>>2]|0;
	  $xor1 = $6 ^ $shr;
	  HEAP32[$k>>2] = $xor1;
	  $7 = HEAP32[$k>>2]|0;
	  $mul2 = Math_imul($7, 1540483477)|0;
	  HEAP32[$k>>2] = $mul2;
	  $8 = $h;
	  $mul3 = Math_imul($8, 1540483477)|0;
	  $h = $mul3;
	  $9 = HEAP32[$k>>2]|0;
	  $10 = $h;
	  $xor4 = $10 ^ $9;
	  $h = $xor4;
	  $11 = $data;
	  $add$ptr = (($11) + 4|0);
	  $data = $add$ptr;
	  $12 = $len$addr;
	  $sub = (($12) - 4)|0;
	  $len$addr = $sub;
	 }
	 $13 = $len$addr;
	 if ((($13|0) == 3)) {
	  $14 = $data;
	  $arrayidx = (($14) + 2|0);
	  $15 = HEAP8[$arrayidx>>0]|0;
	  $conv = $15&255;
	  $shl = $conv << 16;
	  $16 = $h;
	  $xor5 = $16 ^ $shl;
	  $h = $xor5;
	  label = 6;
	 } else if ((($13|0) == 2)) {
	  label = 6;
	 } else if (!((($13|0) == 1))) {
	  $24 = $h;
	  $shr16 = $24 >>> 13;
	  $25 = $h;
	  $xor17 = $25 ^ $shr16;
	  $h = $xor17;
	  $26 = $h;
	  $mul18 = Math_imul($26, 1540483477)|0;
	  $h = $mul18;
	  $27 = $h;
	  $shr19 = $27 >>> 15;
	  $28 = $h;
	  $xor20 = $28 ^ $shr19;
	  $h = $xor20;
	  $29 = $h;
	  STACKTOP = sp;return ($29|0);
	 }
	 if ((label|0) == 6) {
	  $17 = $data;
	  $arrayidx7 = (($17) + 1|0);
	  $18 = HEAP8[$arrayidx7>>0]|0;
	  $conv8 = $18&255;
	  $shl9 = $conv8 << 8;
	  $19 = $h;
	  $xor10 = $19 ^ $shl9;
	  $h = $xor10;
	 }
	 $20 = $data;
	 $21 = HEAP8[$20>>0]|0;
	 $conv13 = $21&255;
	 $22 = $h;
	 $xor14 = $22 ^ $conv13;
	 $h = $xor14;
	 $23 = $h;
	 $mul15 = Math_imul($23, 1540483477)|0;
	 $h = $mul15;
	 $24 = $h;
	 $shr16 = $24 >>> 13;
	 $25 = $h;
	 $xor17 = $25 ^ $shr16;
	 $h = $xor17;
	 $26 = $h;
	 $mul18 = Math_imul($26, 1540483477)|0;
	 $h = $mul18;
	 $27 = $h;
	 $shr19 = $27 >>> 15;
	 $28 = $h;
	 $xor20 = $28 ^ $shr19;
	 $h = $xor20;
	 $29 = $h;
	 STACKTOP = sp;return ($29|0);
	}
	function __xmmsv_dict_search($dict,$data,$pos,$deleted) {
	 $dict = $dict|0;
	 $data = $data|0;
	 $pos = $pos|0;
	 $deleted = $deleted|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0;
	 var $arrayidx12 = 0, $arrayidx17 = 0, $arrayidx6 = 0, $bucket = 0, $call = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp24 = 0, $cmp27 = 0, $cmp8 = 0, $cmp9 = 0, $data11 = 0, $data16 = 0, $data4 = 0, $data5 = 0, $deleted$addr = 0, $dict$addr = 0, $inc = 0, $pos$addr = 0;
	 var $retval = 0, $shl = 0, $shl3 = 0, $size = 0, $size1 = 0, $size2 = 0, $stop = 0, $str = 0, $str18 = 0, $str19 = 0, $str7 = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $dict$addr = $dict;
	 $pos$addr = $pos;
	 $deleted$addr = $deleted;
	 $0 = HEAP32[$data>>2]|0;
	 $1 = $dict$addr;
	 $size = (($1) + 4|0);
	 $2 = HEAP32[$size>>2]|0;
	 $shl = 1 << $2;
	 $sub = (($shl) - 1)|0;
	 $and = $0 & $sub;
	 $bucket = $and;
	 $3 = $bucket;
	 $stop = $3;
	 $4 = $dict$addr;
	 $size2 = (($4) + 4|0);
	 $5 = HEAP32[$size2>>2]|0;
	 $shl3 = 1 << $5;
	 $size1 = $shl3;
	 $6 = $deleted$addr;
	 HEAP32[$6>>2] = -1;
	 while(1) {
	  $7 = $bucket;
	  $8 = $dict$addr;
	  $data4 = (($8) + 8|0);
	  $9 = HEAP32[$data4>>2]|0;
	  $arrayidx = (($9) + (($7*12)|0)|0);
	  $str = (($arrayidx) + 4|0);
	  $10 = HEAP32[$str>>2]|0;
	  $cmp = ($10|0)!=(0|0);
	  if (!($cmp)) {
	   break;
	  }
	  $11 = $bucket;
	  $12 = $dict$addr;
	  $data5 = (($12) + 8|0);
	  $13 = HEAP32[$data5>>2]|0;
	  $arrayidx6 = (($13) + (($11*12)|0)|0);
	  $str7 = (($arrayidx6) + 4|0);
	  $14 = HEAP32[$str7>>2]|0;
	  $cmp8 = ($14|0)==((-1)|0);
	  if ($cmp8) {
	   $15 = $deleted$addr;
	   $16 = HEAP32[$15>>2]|0;
	   $cmp9 = ($16|0)==(-1);
	   if ($cmp9) {
	    $17 = $bucket;
	    $18 = $deleted$addr;
	    HEAP32[$18>>2] = $17;
	   }
	  } else {
	   $19 = $bucket;
	   $20 = $dict$addr;
	   $data11 = (($20) + 8|0);
	   $21 = HEAP32[$data11>>2]|0;
	   $arrayidx12 = (($21) + (($19*12)|0)|0);
	   $22 = HEAP32[$arrayidx12>>2]|0;
	   $23 = HEAP32[$data>>2]|0;
	   $cmp15 = ($22|0)==($23|0);
	   if ($cmp15) {
	    $24 = $bucket;
	    $25 = $dict$addr;
	    $data16 = (($25) + 8|0);
	    $26 = HEAP32[$data16>>2]|0;
	    $arrayidx17 = (($26) + (($24*12)|0)|0);
	    $str18 = (($arrayidx17) + 4|0);
	    $27 = HEAP32[$str18>>2]|0;
	    $str19 = (($data) + 4|0);
	    $28 = HEAP32[$str19>>2]|0;
	    $call = (_strcmp($27,$28)|0);
	    $cmp20 = ($call|0)==(0);
	    if ($cmp20) {
	     label = 9;
	     break;
	    }
	   }
	  }
	  $31 = $bucket;
	  $inc = (($31) + 1)|0;
	  $bucket = $inc;
	  $32 = $size1;
	  $cmp24 = ($inc|0)>=($32|0);
	  if ($cmp24) {
	   $bucket = 0;
	  }
	  $33 = $bucket;
	  $34 = $stop;
	  $cmp27 = ($33|0)==($34|0);
	  if ($cmp27) {
	   label = 14;
	   break;
	  }
	 }
	 if ((label|0) == 9) {
	  $29 = $bucket;
	  $30 = $pos$addr;
	  HEAP32[$30>>2] = $29;
	  $retval = 1;
	  $37 = $retval;
	  STACKTOP = sp;return ($37|0);
	 }
	 else if ((label|0) == 14) {
	 }
	 $35 = $bucket;
	 $36 = $pos$addr;
	 HEAP32[$36>>2] = $35;
	 $retval = 0;
	 $37 = $retval;
	 STACKTOP = sp;return ($37|0);
	}
	function _xmmsv_dict_set($dictv,$key,$val) {
	 $dictv = $dictv|0;
	 $key = $key|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0;
	 var $call11 = 0, $call12 = 0, $cmp = 0, $data = 0, $data$byval_copy = 0, $dict = 0, $dictv$addr = 0, $key$addr = 0, $mul = 0, $ret = 0, $retval = 0, $shr = 0, $size = 0, $str = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $val$addr = 0, $value = 0;
	 var $value13 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $data$byval_copy = sp + 64|0;
	 $vararg_buffer16 = sp;
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp + 48|0;
	 $data = sp + 80|0;
	 $dictv$addr = $dictv;
	 $key$addr = $key;
	 $val$addr = $val;
	 $ret = 1;
	 $0 = $key$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 2984;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3088;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 359;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $1 = $val$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 3104;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 3088;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 3008;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 360;
	  _xmmsc_log(0,2,2944,$vararg_buffer4);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $2 = $dictv$addr;
	 $tobool4 = ($2|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer10>>2] = 3040;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 3088;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 3008;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 361;
	  _xmmsc_log(0,2,2944,$vararg_buffer10);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $3 = $dictv$addr;
	 $call = (_xmmsv_is_type($3,7)|0);
	 $tobool7 = ($call|0)!=(0);
	 if (!($tobool7)) {
	  HEAP32[$vararg_buffer16>>2] = 3048;
	  $vararg_ptr19 = (($vararg_buffer16) + 4|0);
	  HEAP32[$vararg_ptr19>>2] = 3088;
	  $vararg_ptr20 = (($vararg_buffer16) + 8|0);
	  HEAP32[$vararg_ptr20>>2] = 3008;
	  $vararg_ptr21 = (($vararg_buffer16) + 12|0);
	  HEAP32[$vararg_ptr21>>2] = 362;
	  _xmmsc_log(0,2,2944,$vararg_buffer16);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $4 = $key$addr;
	 $5 = $key$addr;
	 $call10 = (_strlen(($5|0))|0);
	 $call11 = (__xmmsv_dict_hash($4,$call10)|0);
	 HEAP32[$data>>2] = $call11;
	 $str = (($data) + 4|0);
	 $6 = $key$addr;
	 HEAP32[$str>>2] = $6;
	 $value = (($data) + 8|0);
	 HEAP32[$value>>2] = 0;
	 $7 = $val$addr;
	 $call12 = (_xmmsv_ref($7)|0);
	 $value13 = (($data) + 8|0);
	 HEAP32[$value13>>2] = $call12;
	 $8 = $dictv$addr;
	 $9 = HEAP32[$8>>2]|0;
	 $dict = $9;
	 $10 = $dict;
	 $11 = HEAP32[$10>>2]|0;
	 $mul = ($11*10)|0;
	 $12 = $dict;
	 $size = (($12) + 4|0);
	 $13 = HEAP32[$size>>2]|0;
	 $shr = $mul >> $13;
	 $cmp = ($shr|0)>(7);
	 if ($cmp) {
	  $14 = $dict;
	  __xmmsv_dict_resize($14);
	 }
	 $15 = $dict;
	 ;HEAP32[$data$byval_copy+0>>2]=HEAP32[$data+0>>2]|0;HEAP32[$data$byval_copy+4>>2]=HEAP32[$data+4>>2]|0;HEAP32[$data$byval_copy+8>>2]=HEAP32[$data+8>>2]|0;
	 __xmmsv_dict_insert($15,$data$byval_copy,1);
	 $16 = $ret;
	 $retval = $16;
	 $17 = $retval;
	 STACKTOP = sp;return ($17|0);
	}
	function __xmmsv_dict_resize($dict) {
	 $dict = $dict|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
	 var $arrayidx6 = 0, $arrayidx6$byval_copy = 0, $call = 0, $cmp = 0, $cmp5 = 0, $data = 0, $data2 = 0, $dict$addr = 0, $i = 0, $inc = 0, $inc7 = 0, $mul = 0, $old_data = 0, $shl = 0, $shl4 = 0, $size = 0, $size1 = 0, $size3 = 0, $str = 0, $sub = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $arrayidx6$byval_copy = sp + 12|0;
	 $dict$addr = $dict;
	 $0 = $dict$addr;
	 $size = (($0) + 4|0);
	 $1 = HEAP32[$size>>2]|0;
	 $inc = (($1) + 1)|0;
	 HEAP32[$size>>2] = $inc;
	 $2 = $dict$addr;
	 HEAP32[$2>>2] = 0;
	 $3 = $dict$addr;
	 $data = (($3) + 8|0);
	 $4 = HEAP32[$data>>2]|0;
	 $old_data = $4;
	 $5 = $dict$addr;
	 $size1 = (($5) + 4|0);
	 $6 = HEAP32[$size1>>2]|0;
	 $shl = 1 << $6;
	 $mul = ($shl*12)|0;
	 $call = (_calloc(1,$mul)|0);
	 $7 = $dict$addr;
	 $data2 = (($7) + 8|0);
	 HEAP32[$data2>>2] = $call;
	 $i = 0;
	 while(1) {
	  $8 = $i;
	  $9 = $dict$addr;
	  $size3 = (($9) + 4|0);
	  $10 = HEAP32[$size3>>2]|0;
	  $sub = (($10) - 1)|0;
	  $shl4 = 1 << $sub;
	  $cmp = ($8|0)<($shl4|0);
	  if (!($cmp)) {
	   break;
	  }
	  $11 = $i;
	  $12 = $old_data;
	  $arrayidx = (($12) + (($11*12)|0)|0);
	  $str = (($arrayidx) + 4|0);
	  $13 = HEAP32[$str>>2]|0;
	  $cmp5 = ($13|0)!=(0|0);
	  if ($cmp5) {
	   $14 = $dict$addr;
	   $15 = $i;
	   $16 = $old_data;
	   $arrayidx6 = (($16) + (($15*12)|0)|0);
	   ;HEAP32[$arrayidx6$byval_copy+0>>2]=HEAP32[$arrayidx6+0>>2]|0;HEAP32[$arrayidx6$byval_copy+4>>2]=HEAP32[$arrayidx6+4>>2]|0;HEAP32[$arrayidx6$byval_copy+8>>2]=HEAP32[$arrayidx6+8>>2]|0;
	   __xmmsv_dict_insert($14,$arrayidx6$byval_copy,0);
	  }
	  $17 = $i;
	  $inc7 = (($17) + 1)|0;
	  $i = $inc7;
	 }
	 $18 = $old_data;
	 _free($18);
	 STACKTOP = sp;return;
	}
	function __xmmsv_dict_insert($dict,$data,$alloc) {
	 $dict = $dict|0;
	 $data = $data|0;
	 $alloc = $alloc|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $alloc$addr = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx4 = 0, $call = 0, $call8 = 0, $cmp = 0, $data$byval_copy = 0, $data1 = 0, $data11 = 0, $data14 = 0, $data3 = 0, $deleted = 0, $dict$addr = 0, $inc = 0, $pos = 0, $str = 0, $str9 = 0, $tobool = 0;
	 var $tobool6 = 0, $value = 0, $value2 = 0, $value5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $data$byval_copy = sp + 16|0;
	 $pos = sp + 4|0;
	 $deleted = sp;
	 $dict$addr = $dict;
	 $alloc$addr = $alloc;
	 $0 = $dict$addr;
	 ;HEAP32[$data$byval_copy+0>>2]=HEAP32[$data+0>>2]|0;HEAP32[$data$byval_copy+4>>2]=HEAP32[$data+4>>2]|0;HEAP32[$data$byval_copy+8>>2]=HEAP32[$data+8>>2]|0;
	 $call = (__xmmsv_dict_search($0,$data$byval_copy,$pos,$deleted)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = HEAP32[$pos>>2]|0;
	  $2 = $dict$addr;
	  $data1 = (($2) + 8|0);
	  $3 = HEAP32[$data1>>2]|0;
	  $arrayidx = (($3) + (($1*12)|0)|0);
	  $value = (($arrayidx) + 8|0);
	  $4 = HEAP32[$value>>2]|0;
	  _xmmsv_unref($4);
	  $value2 = (($data) + 8|0);
	  $5 = HEAP32[$value2>>2]|0;
	  $6 = HEAP32[$pos>>2]|0;
	  $7 = $dict$addr;
	  $data3 = (($7) + 8|0);
	  $8 = HEAP32[$data3>>2]|0;
	  $arrayidx4 = (($8) + (($6*12)|0)|0);
	  $value5 = (($arrayidx4) + 8|0);
	  HEAP32[$value5>>2] = $5;
	  STACKTOP = sp;return;
	 }
	 $9 = $alloc$addr;
	 $tobool6 = ($9|0)!=(0);
	 if ($tobool6) {
	  $str = (($data) + 4|0);
	  $10 = HEAP32[$str>>2]|0;
	  $call8 = (FUNCTION_TABLE_ii[3 & 15]($10)|0);
	  $str9 = (($data) + 4|0);
	  HEAP32[$str9>>2] = $call8;
	 }
	 $11 = $dict$addr;
	 $12 = HEAP32[$11>>2]|0;
	 $inc = (($12) + 1)|0;
	 HEAP32[$11>>2] = $inc;
	 $13 = HEAP32[$deleted>>2]|0;
	 $cmp = ($13|0)!=(-1);
	 if ($cmp) {
	  $14 = HEAP32[$deleted>>2]|0;
	  $15 = $dict$addr;
	  $data11 = (($15) + 8|0);
	  $16 = HEAP32[$data11>>2]|0;
	  $arrayidx12 = (($16) + (($14*12)|0)|0);
	  ;HEAP32[$arrayidx12+0>>2]=HEAP32[$data+0>>2]|0;HEAP32[$arrayidx12+4>>2]=HEAP32[$data+4>>2]|0;HEAP32[$arrayidx12+8>>2]=HEAP32[$data+8>>2]|0;
	 } else {
	  $17 = HEAP32[$pos>>2]|0;
	  $18 = $dict$addr;
	  $data14 = (($18) + 8|0);
	  $19 = HEAP32[$data14>>2]|0;
	  $arrayidx15 = (($19) + (($17*12)|0)|0);
	  ;HEAP32[$arrayidx15+0>>2]=HEAP32[$data+0>>2]|0;HEAP32[$arrayidx15+4>>2]=HEAP32[$data+4>>2]|0;HEAP32[$arrayidx15+8>>2]=HEAP32[$data+8>>2]|0;
	 }
	 STACKTOP = sp;return;
	}
	function _xmmsv_dict_remove($dictv,$key) {
	 $dictv = $dictv|0;
	 $key = $key|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call11 = 0, $call7 = 0, $call8 = 0, $data = 0, $data$byval_copy = 0, $deleted = 0;
	 var $dict = 0, $dictv$addr = 0, $key$addr = 0, $pos = 0, $ret = 0, $retval = 0, $str = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool4 = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0;
	 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $data$byval_copy = sp + 52|0;
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $pos = sp + 84|0;
	 $deleted = sp + 88|0;
	 $data = sp + 68|0;
	 $dictv$addr = $dictv;
	 $key$addr = $key;
	 $ret = 0;
	 $0 = $key$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 2984;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3112;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 393;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $1 = $dictv$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 3040;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 3112;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 3008;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 394;
	  _xmmsc_log(0,2,2944,$vararg_buffer4);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $2 = $dictv$addr;
	 $call = (_xmmsv_is_type($2,7)|0);
	 $tobool4 = ($call|0)!=(0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer10>>2] = 3048;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 3112;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 3008;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 395;
	  _xmmsc_log(0,2,2944,$vararg_buffer10);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $3 = $key$addr;
	 $4 = $key$addr;
	 $call7 = (_strlen(($4|0))|0);
	 $call8 = (__xmmsv_dict_hash($3,$call7)|0);
	 HEAP32[$data>>2] = $call8;
	 $str = (($data) + 4|0);
	 $5 = $key$addr;
	 HEAP32[$str>>2] = $5;
	 $value = (($data) + 8|0);
	 HEAP32[$value>>2] = 0;
	 $6 = $dictv$addr;
	 $7 = HEAP32[$6>>2]|0;
	 $dict = $7;
	 $8 = $dict;
	 ;HEAP32[$data$byval_copy+0>>2]=HEAP32[$data+0>>2]|0;HEAP32[$data$byval_copy+4>>2]=HEAP32[$data+4>>2]|0;HEAP32[$data$byval_copy+8>>2]=HEAP32[$data+8>>2]|0;
	 $call11 = (__xmmsv_dict_search($8,$data$byval_copy,$pos,$deleted)|0);
	 $tobool12 = ($call11|0)!=(0);
	 if ($tobool12) {
	  $9 = $dict;
	  $10 = HEAP32[$pos>>2]|0;
	  __xmmsv_dict_remove($9,$10);
	  $ret = 1;
	 }
	 $11 = $ret;
	 $retval = $11;
	 $12 = $retval;
	 STACKTOP = sp;return ($12|0);
	}
	function __xmmsv_dict_remove($dict,$pos) {
	 $dict = $dict|0;
	 $pos = $pos|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx5 = 0, $arrayidx7 = 0;
	 var $data = 0, $data1 = 0, $data4 = 0, $data6 = 0, $dec = 0, $dict$addr = 0, $pos$addr = 0, $str = 0, $str3 = 0, $value = 0, $value8 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $dict$addr = $dict;
	 $pos$addr = $pos;
	 $0 = $pos$addr;
	 $1 = $dict$addr;
	 $data = (($1) + 8|0);
	 $2 = HEAP32[$data>>2]|0;
	 $arrayidx = (($2) + (($0*12)|0)|0);
	 $str = (($arrayidx) + 4|0);
	 $3 = HEAP32[$str>>2]|0;
	 _free($3);
	 $4 = $pos$addr;
	 $5 = $dict$addr;
	 $data1 = (($5) + 8|0);
	 $6 = HEAP32[$data1>>2]|0;
	 $arrayidx2 = (($6) + (($4*12)|0)|0);
	 $str3 = (($arrayidx2) + 4|0);
	 HEAP32[$str3>>2] = (-1);
	 $7 = $pos$addr;
	 $8 = $dict$addr;
	 $data4 = (($8) + 8|0);
	 $9 = HEAP32[$data4>>2]|0;
	 $arrayidx5 = (($9) + (($7*12)|0)|0);
	 $value = (($arrayidx5) + 8|0);
	 $10 = HEAP32[$value>>2]|0;
	 _xmmsv_unref($10);
	 $11 = $pos$addr;
	 $12 = $dict$addr;
	 $data6 = (($12) + 8|0);
	 $13 = HEAP32[$data6>>2]|0;
	 $arrayidx7 = (($13) + (($11*12)|0)|0);
	 $value8 = (($arrayidx7) + 8|0);
	 HEAP32[$value8>>2] = 0;
	 $14 = $dict$addr;
	 $15 = HEAP32[$14>>2]|0;
	 $dec = (($15) + -1)|0;
	 HEAP32[$14>>2] = $dec;
	 STACKTOP = sp;return;
	}
	function _xmmsv_dict_clear($dictv) {
	 $dictv = $dictv|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx16 = 0, $arrayidx20 = 0, $arrayidx8 = 0, $call = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $data = 0, $data12 = 0, $data15 = 0;
	 var $data19 = 0, $data7 = 0, $dec = 0, $dict = 0, $dictv$addr = 0, $i = 0, $retval = 0, $shl = 0, $size = 0, $str = 0, $str14 = 0, $str21 = 0, $str9 = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $value17 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $dictv$addr = $dictv;
	 $0 = $dictv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3040;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3136;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 421;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  $retval = 0;
	  $27 = $retval;
	  STACKTOP = sp;return ($27|0);
	 }
	 $1 = $dictv$addr;
	 $call = (_xmmsv_is_type($1,7)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 3048;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 3136;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 3008;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 422;
	  _xmmsc_log(0,2,2944,$vararg_buffer4);
	  $retval = 0;
	  $27 = $retval;
	  STACKTOP = sp;return ($27|0);
	 }
	 $2 = $dictv$addr;
	 $3 = HEAP32[$2>>2]|0;
	 $dict = $3;
	 $4 = $dict;
	 $size = (($4) + 4|0);
	 $5 = HEAP32[$size>>2]|0;
	 $shl = 1 << $5;
	 $sub = (($shl) - 1)|0;
	 $i = $sub;
	 while(1) {
	  $6 = $i;
	  $cmp = ($6|0)>=(0);
	  if (!($cmp)) {
	   break;
	  }
	  $7 = $i;
	  $8 = $dict;
	  $data = (($8) + 8|0);
	  $9 = HEAP32[$data>>2]|0;
	  $arrayidx = (($9) + (($7*12)|0)|0);
	  $str = (($arrayidx) + 4|0);
	  $10 = HEAP32[$str>>2]|0;
	  $cmp5 = ($10|0)!=(0|0);
	  if ($cmp5) {
	   $11 = $i;
	   $12 = $dict;
	   $data7 = (($12) + 8|0);
	   $13 = HEAP32[$data7>>2]|0;
	   $arrayidx8 = (($13) + (($11*12)|0)|0);
	   $str9 = (($arrayidx8) + 4|0);
	   $14 = HEAP32[$str9>>2]|0;
	   $cmp10 = ($14|0)!=((-1)|0);
	   if ($cmp10) {
	    $15 = $i;
	    $16 = $dict;
	    $data12 = (($16) + 8|0);
	    $17 = HEAP32[$data12>>2]|0;
	    $arrayidx13 = (($17) + (($15*12)|0)|0);
	    $str14 = (($arrayidx13) + 4|0);
	    $18 = HEAP32[$str14>>2]|0;
	    _free($18);
	    $19 = $i;
	    $20 = $dict;
	    $data15 = (($20) + 8|0);
	    $21 = HEAP32[$data15>>2]|0;
	    $arrayidx16 = (($21) + (($19*12)|0)|0);
	    $value17 = (($arrayidx16) + 8|0);
	    $22 = HEAP32[$value17>>2]|0;
	    _xmmsv_unref($22);
	   }
	   $23 = $i;
	   $24 = $dict;
	   $data19 = (($24) + 8|0);
	   $25 = HEAP32[$data19>>2]|0;
	   $arrayidx20 = (($25) + (($23*12)|0)|0);
	   $str21 = (($arrayidx20) + 4|0);
	   HEAP32[$str21>>2] = 0;
	  }
	  $26 = $i;
	  $dec = (($26) + -1)|0;
	  $i = $dec;
	 }
	 $retval = 1;
	 $27 = $retval;
	 STACKTOP = sp;return ($27|0);
	}
	function _xmmsv_dict_foreach($dictv,$func,$user_data) {
	 $dictv = $dictv|0;
	 $func = $func|0;
	 $user_data = $user_data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call4 = 0, $call8 = 0, $dictv$addr = 0, $func$addr = 0, $it = 0, $key = 0, $retval = 0;
	 var $tobool = 0, $tobool1 = 0, $tobool5 = 0, $tobool9 = 0, $user_data$addr = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $it = sp + 64|0;
	 $key = sp + 68|0;
	 $v = sp + 72|0;
	 $dictv$addr = $dictv;
	 $func$addr = $func;
	 $user_data$addr = $user_data;
	 $0 = $dictv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3040;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3160;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 456;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $1 = $dictv$addr;
	 $call = (_xmmsv_is_type($1,7)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 3048;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 3160;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 3008;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 457;
	  _xmmsc_log(0,2,2944,$vararg_buffer4);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $2 = $dictv$addr;
	 $call4 = (_xmmsv_get_dict_iter($2,$it)|0);
	 $tobool5 = ($call4|0)!=(0);
	 if (!($tobool5)) {
	  HEAP32[$vararg_buffer10>>2] = 3184;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 3160;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 3008;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 458;
	  _xmmsc_log(0,2,2944,$vararg_buffer10);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 while(1) {
	  $3 = HEAP32[$it>>2]|0;
	  $call8 = (_xmmsv_dict_iter_valid($3)|0);
	  $tobool9 = ($call8|0)!=(0);
	  if (!($tobool9)) {
	   break;
	  }
	  $4 = HEAP32[$it>>2]|0;
	  (_xmmsv_dict_iter_pair($4,$key,$v)|0);
	  $5 = $func$addr;
	  $6 = HEAP32[$key>>2]|0;
	  $7 = HEAP32[$v>>2]|0;
	  $8 = $user_data$addr;
	  FUNCTION_TABLE_viii[$5 & 7]($6,$7,$8);
	  $9 = HEAP32[$it>>2]|0;
	  _xmmsv_dict_iter_next($9);
	 }
	 $10 = HEAP32[$it>>2]|0;
	 __xmmsv_dict_iter_free($10);
	 $retval = 1;
	 $11 = $retval;
	 STACKTOP = sp;return ($11|0);
	}
	function _xmmsv_get_dict_iter($val,$it) {
	 $val = $val|0;
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $it$addr = 0, $new_it = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $type = 0, $val$addr = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $it$addr = $it;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $type = (($1) + 24|0);
	  $2 = HEAP32[$type>>2]|0;
	  $cmp = ($2|0)!=(7);
	  if (!($cmp)) {
	   $4 = $val$addr;
	   $5 = HEAP32[$4>>2]|0;
	   $call = (__xmmsv_dict_iter_new($5)|0);
	   $new_it = $call;
	   $6 = $new_it;
	   $tobool1 = ($6|0)!=(0|0);
	   if ($tobool1) {
	    $8 = $new_it;
	    $9 = $it$addr;
	    HEAP32[$9>>2] = $8;
	    $retval = 1;
	    $10 = $retval;
	    STACKTOP = sp;return ($10|0);
	   } else {
	    $7 = $it$addr;
	    HEAP32[$7>>2] = 0;
	    $retval = 0;
	    $10 = $retval;
	    STACKTOP = sp;return ($10|0);
	   }
	  }
	 }
	 $3 = $it$addr;
	 HEAP32[$3>>2] = 0;
	 $retval = 0;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function _xmmsv_dict_iter_valid($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0;
	 var $arrayidx8 = 0, $cmp = 0, $cmp10 = 0, $cmp4 = 0, $data = 0, $data7 = 0, $it$addr = 0, $land$ext = 0, $parent = 0, $parent3 = 0, $parent6 = 0, $shl = 0, $size = 0, $str = 0, $str9 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $18 = 0;
	  $land$ext = $18&1;
	  STACKTOP = sp;return ($land$ext|0);
	 }
	 $1 = $it$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $3 = $it$addr;
	 $parent = (($3) + 4|0);
	 $4 = HEAP32[$parent>>2]|0;
	 $size = (($4) + 4|0);
	 $5 = HEAP32[$size>>2]|0;
	 $shl = 1 << $5;
	 $cmp = ($2|0)<($shl|0);
	 if (!($cmp)) {
	  $18 = 0;
	  $land$ext = $18&1;
	  STACKTOP = sp;return ($land$ext|0);
	 }
	 $6 = $it$addr;
	 $7 = HEAP32[$6>>2]|0;
	 $8 = $it$addr;
	 $parent3 = (($8) + 4|0);
	 $9 = HEAP32[$parent3>>2]|0;
	 $data = (($9) + 8|0);
	 $10 = HEAP32[$data>>2]|0;
	 $arrayidx = (($10) + (($7*12)|0)|0);
	 $str = (($arrayidx) + 4|0);
	 $11 = HEAP32[$str>>2]|0;
	 $cmp4 = ($11|0)!=(0|0);
	 if (!($cmp4)) {
	  $18 = 0;
	  $land$ext = $18&1;
	  STACKTOP = sp;return ($land$ext|0);
	 }
	 $12 = $it$addr;
	 $13 = HEAP32[$12>>2]|0;
	 $14 = $it$addr;
	 $parent6 = (($14) + 4|0);
	 $15 = HEAP32[$parent6>>2]|0;
	 $data7 = (($15) + 8|0);
	 $16 = HEAP32[$data7>>2]|0;
	 $arrayidx8 = (($16) + (($13*12)|0)|0);
	 $str9 = (($arrayidx8) + 4|0);
	 $17 = HEAP32[$str9>>2]|0;
	 $cmp10 = ($17|0)!=((-1)|0);
	 $18 = $cmp10;
	 $land$ext = $18&1;
	 STACKTOP = sp;return ($land$ext|0);
	}
	function _xmmsv_dict_iter_pair($it,$key,$val) {
	 $it = $it|0;
	 $key = $key|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx9 = 0;
	 var $call = 0, $data = 0, $data8 = 0, $it$addr = 0, $key$addr = 0, $parent = 0, $parent7 = 0, $retval = 0, $str = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $val$addr = 0, $value = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $key$addr = $key;
	 $val$addr = $val;
	 $0 = $it$addr;
	 $call = (_xmmsv_dict_iter_valid($0)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $1 = $key$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $it$addr;
	  $3 = HEAP32[$2>>2]|0;
	  $4 = $it$addr;
	  $parent = (($4) + 4|0);
	  $5 = HEAP32[$parent>>2]|0;
	  $data = (($5) + 8|0);
	  $6 = HEAP32[$data>>2]|0;
	  $arrayidx = (($6) + (($3*12)|0)|0);
	  $str = (($arrayidx) + 4|0);
	  $7 = HEAP32[$str>>2]|0;
	  $8 = $key$addr;
	  HEAP32[$8>>2] = $7;
	 }
	 $9 = $val$addr;
	 $tobool4 = ($9|0)!=(0|0);
	 if ($tobool4) {
	  $10 = $it$addr;
	  $11 = HEAP32[$10>>2]|0;
	  $12 = $it$addr;
	  $parent7 = (($12) + 4|0);
	  $13 = HEAP32[$parent7>>2]|0;
	  $data8 = (($13) + 8|0);
	  $14 = HEAP32[$data8>>2]|0;
	  $arrayidx9 = (($14) + (($11*12)|0)|0);
	  $value = (($arrayidx9) + 8|0);
	  $15 = HEAP32[$value>>2]|0;
	  $16 = $val$addr;
	  HEAP32[$16>>2] = $15;
	 }
	 $retval = 1;
	 $17 = $retval;
	 STACKTOP = sp;return ($17|0);
	}
	function _xmmsv_dict_iter_next($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
	 var $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx6 = 0, $cmp = 0, $cmp3 = 0, $cmp8 = 0, $d = 0, $data = 0, $data5 = 0, $inc = 0, $inc10 = 0, $it$addr = 0, $parent = 0, $shl = 0, $size = 0, $str = 0, $str7 = 0, $tobool = 0;
	 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3248;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3280;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 629;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $it$addr;
	 $parent = (($1) + 4|0);
	 $2 = HEAP32[$parent>>2]|0;
	 $d = $2;
	 $3 = $it$addr;
	 $4 = HEAP32[$3>>2]|0;
	 $inc = (($4) + 1)|0;
	 HEAP32[$3>>2] = $inc;
	 while(1) {
	  $5 = $it$addr;
	  $6 = HEAP32[$5>>2]|0;
	  $7 = $d;
	  $size = (($7) + 4|0);
	  $8 = HEAP32[$size>>2]|0;
	  $shl = 1 << $8;
	  $cmp = ($6|0)<($shl|0);
	  if ($cmp) {
	   $9 = $it$addr;
	   $10 = HEAP32[$9>>2]|0;
	   $11 = $d;
	   $data = (($11) + 8|0);
	   $12 = HEAP32[$data>>2]|0;
	   $arrayidx = (($12) + (($10*12)|0)|0);
	   $str = (($arrayidx) + 4|0);
	   $13 = HEAP32[$str>>2]|0;
	   $cmp3 = ($13|0)==(0|0);
	   if ($cmp3) {
	    $22 = 1;
	   } else {
	    $14 = $it$addr;
	    $15 = HEAP32[$14>>2]|0;
	    $16 = $d;
	    $data5 = (($16) + 8|0);
	    $17 = HEAP32[$data5>>2]|0;
	    $arrayidx6 = (($17) + (($15*12)|0)|0);
	    $str7 = (($arrayidx6) + 4|0);
	    $18 = HEAP32[$str7>>2]|0;
	    $cmp8 = ($18|0)==((-1)|0);
	    $22 = $cmp8;
	   }
	   $21 = $22;
	  } else {
	   $21 = 0;
	  }
	  if (!($21)) {
	   break;
	  }
	  $19 = $it$addr;
	  $20 = HEAP32[$19>>2]|0;
	  $inc10 = (($20) + 1)|0;
	  HEAP32[$19>>2] = $inc10;
	 }
	 STACKTOP = sp;return;
	}
	function _xmmsv_dict_get_size($dictv) {
	 $dictv = $dictv|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $dictv$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $dictv$addr = $dictv;
	 $0 = $dictv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3040;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3224;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 480;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  $retval = -1;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $dictv$addr;
	 $call = (_xmmsv_is_type($1,7)|0);
	 $tobool1 = ($call|0)!=(0);
	 if ($tobool1) {
	  $2 = $dictv$addr;
	  $3 = HEAP32[$2>>2]|0;
	  $4 = HEAP32[$3>>2]|0;
	  $retval = $4;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 3048;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 3224;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 3008;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 481;
	  _xmmsc_log(0,2,2944,$vararg_buffer4);
	  $retval = -1;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 return 0|0;
	}
	function __xmmsv_dict_iter_new($d) {
	 $d = $d|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $d$addr = 0, $it = 0, $iterators = 0, $iterators2 = 0, $parent = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $d$addr = $d;
	 $call = (_calloc(1,8)|0);
	 $it = $call;
	 $0 = $it;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $d$addr;
	  $2 = $it;
	  $parent = (($2) + 4|0);
	  HEAP32[$parent>>2] = $1;
	  $3 = $it;
	  _xmmsv_dict_iter_first($3);
	  $4 = $d$addr;
	  $iterators = (($4) + 12|0);
	  $5 = HEAP32[$iterators>>2]|0;
	  $6 = $it;
	  $call1 = (_x_list_prepend($5,$6)|0);
	  $7 = $d$addr;
	  $iterators2 = (($7) + 12|0);
	  HEAP32[$iterators2>>2] = $call1;
	  $8 = $it;
	  $retval = $8;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 3440;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3008;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 493;
	  _xmmsc_log(0,2,3408,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsv_dict_iter_explicit_destroy($it) {
	 $it = $it|0;
	 var $0 = 0, $it$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $0 = $it$addr;
	 __xmmsv_dict_iter_free($0);
	 STACKTOP = sp;return;
	}
	function _xmmsv_dict_iter_first($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
	 var $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx6 = 0, $cmp = 0, $cmp3 = 0, $cmp8 = 0, $d = 0, $data = 0, $data5 = 0, $inc = 0, $it$addr = 0, $parent = 0, $shl = 0, $size = 0, $str = 0, $str7 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3248;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3256;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 612;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $it$addr;
	 $parent = (($1) + 4|0);
	 $2 = HEAP32[$parent>>2]|0;
	 $d = $2;
	 $3 = $it$addr;
	 HEAP32[$3>>2] = 0;
	 while(1) {
	  $4 = $it$addr;
	  $5 = HEAP32[$4>>2]|0;
	  $6 = $d;
	  $size = (($6) + 4|0);
	  $7 = HEAP32[$size>>2]|0;
	  $shl = 1 << $7;
	  $cmp = ($5|0)<($shl|0);
	  if ($cmp) {
	   $8 = $it$addr;
	   $9 = HEAP32[$8>>2]|0;
	   $10 = $d;
	   $data = (($10) + 8|0);
	   $11 = HEAP32[$data>>2]|0;
	   $arrayidx = (($11) + (($9*12)|0)|0);
	   $str = (($arrayidx) + 4|0);
	   $12 = HEAP32[$str>>2]|0;
	   $cmp3 = ($12|0)==(0|0);
	   if ($cmp3) {
	    $21 = 1;
	   } else {
	    $13 = $it$addr;
	    $14 = HEAP32[$13>>2]|0;
	    $15 = $d;
	    $data5 = (($15) + 8|0);
	    $16 = HEAP32[$data5>>2]|0;
	    $arrayidx6 = (($16) + (($14*12)|0)|0);
	    $str7 = (($arrayidx6) + 4|0);
	    $17 = HEAP32[$str7>>2]|0;
	    $cmp8 = ($17|0)==((-1)|0);
	    $21 = $cmp8;
	   }
	   $20 = $21;
	  } else {
	   $20 = 0;
	  }
	  if (!($20)) {
	   break;
	  }
	  $18 = $it$addr;
	  $19 = HEAP32[$18>>2]|0;
	  $inc = (($19) + 1)|0;
	  HEAP32[$18>>2] = $inc;
	 }
	 STACKTOP = sp;return;
	}
	function _xmmsv_dict_iter_find($it,$key) {
	 $it = $it|0;
	 $key = $key|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call1 = 0, $call4 = 0, $cmp = 0, $it$addr = 0, $key$addr = 0, $retval = 0, $s = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $s = sp + 16|0;
	 $it$addr = $it;
	 $key$addr = $key;
	 $0 = $it$addr;
	 $call = (_xmmsv_dict_iter_valid($0)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3304;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3336;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 649;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $it$addr;
	 _xmmsv_dict_iter_first($1);
	 $2 = $it$addr;
	 _xmmsv_dict_iter_first($2);
	 while(1) {
	  $3 = $it$addr;
	  $call1 = (_xmmsv_dict_iter_valid($3)|0);
	  $tobool2 = ($call1|0)!=(0);
	  if (!($tobool2)) {
	   label = 9;
	   break;
	  }
	  $4 = $it$addr;
	  (_xmmsv_dict_iter_pair($4,$s,0)|0);
	  $5 = HEAP32[$s>>2]|0;
	  $6 = $key$addr;
	  $call4 = (_strcmp($5,$6)|0);
	  $cmp = ($call4|0)==(0);
	  if ($cmp) {
	   label = 6;
	   break;
	  }
	  $7 = $it$addr;
	  _xmmsv_dict_iter_next($7);
	 }
	 if ((label|0) == 6) {
	  $retval = 1;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 else if ((label|0) == 9) {
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmmsv_dict_iter_set($it,$val) {
	 $it = $it|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx8 = 0, $call = 0, $data = 0;
	 var $data7 = 0, $it$addr = 0, $parent = 0, $parent6 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $val$addr = 0, $value = 0, $value9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $val$addr = $val;
	 $0 = $it$addr;
	 $call = (_xmmsv_dict_iter_valid($0)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3304;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3360;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 677;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $val$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $val$addr;
	  (_xmmsv_ref($2)|0);
	  $3 = $it$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = $it$addr;
	  $parent = (($5) + 4|0);
	  $6 = HEAP32[$parent>>2]|0;
	  $data = (($6) + 8|0);
	  $7 = HEAP32[$data>>2]|0;
	  $arrayidx = (($7) + (($4*12)|0)|0);
	  $value = (($arrayidx) + 8|0);
	  $8 = HEAP32[$value>>2]|0;
	  _xmmsv_unref($8);
	  $9 = $val$addr;
	  $10 = $it$addr;
	  $11 = HEAP32[$10>>2]|0;
	  $12 = $it$addr;
	  $parent6 = (($12) + 4|0);
	  $13 = HEAP32[$parent6>>2]|0;
	  $data7 = (($13) + 8|0);
	  $14 = HEAP32[$data7>>2]|0;
	  $arrayidx8 = (($14) + (($11*12)|0)|0);
	  $value9 = (($arrayidx8) + 8|0);
	  HEAP32[$value9>>2] = $9;
	  $retval = 1;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 3104;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 3360;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 3008;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 678;
	  _xmmsc_log(0,2,2944,$vararg_buffer4);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 return 0|0;
	}
	function _xmmsv_dict_iter_remove($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $it$addr = 0, $parent = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $call = (_xmmsv_dict_iter_valid($0)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = $it$addr;
	  $parent = (($1) + 4|0);
	  $2 = HEAP32[$parent>>2]|0;
	  $3 = $it$addr;
	  $4 = HEAP32[$3>>2]|0;
	  __xmmsv_dict_remove($2,$4);
	  $5 = $it$addr;
	  _xmmsv_dict_iter_next($5);
	  $retval = 1;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 3304;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3384;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3008;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 697;
	  _xmmsc_log(0,2,2944,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmmsv_dict_entry_get_string($val,$key,$r) {
	 $val = $val|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $key$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $val$addr = $val;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_get($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = HEAP32[$v>>2]|0;
	  $3 = $r$addr;
	  $call1 = (_xmmsv_get_string($2,$3)|0);
	  $retval = $call1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_dict_entry_get_int32($val,$key,$r) {
	 $val = $val|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $key$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $val$addr = $val;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_get($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = HEAP32[$v>>2]|0;
	  $3 = $r$addr;
	  $call1 = (_xmmsv_get_int32($2,$3)|0);
	  $retval = $call1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_dict_entry_get_int64($val,$key,$r) {
	 $val = $val|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $key$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $val$addr = $val;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_get($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = HEAP32[$v>>2]|0;
	  $3 = $r$addr;
	  $call1 = (_xmmsv_get_int64($2,$3)|0);
	  $retval = $call1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_dict_entry_get_float($val,$key,$r) {
	 $val = $val|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $key$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $val$addr = $val;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_get($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = HEAP32[$v>>2]|0;
	  $3 = $r$addr;
	  $call1 = (_xmmsv_get_float($2,$3)|0);
	  $retval = $call1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_dict_entry_get_coll($val,$key,$r) {
	 $val = $val|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $key$addr = 0, $r$addr = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $key$addr;
	 $2 = $r$addr;
	 $call = (_xmmsv_dict_get($0,$1,$2)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_dict_set_string($dict,$key,$elem) {
	 $dict = $dict|0;
	 $key = $key|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $dict$addr = 0, $elem$addr = 0, $key$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $dict$addr = $dict;
	 $key$addr = $key;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_string($0)|0);
	 $v = $call;
	 $1 = $dict$addr;
	 $2 = $key$addr;
	 $3 = $v;
	 $call1 = (_xmmsv_dict_set($1,$2,$3)|0);
	 $ret = $call1;
	 $4 = $v;
	 _xmmsv_unref($4);
	 $5 = $ret;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_dict_set_int($dict,$key,$0,$1) {
	 $dict = $dict|0;
	 $key = $key|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $dict$addr = 0, $elem$addr = 0, $key$addr = 0;
	 var $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $elem$addr = sp;
	 $dict$addr = $dict;
	 $key$addr = $key;
	 $2 = $elem$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $elem$addr;
	 $7 = $6;
	 $8 = HEAP32[$7>>2]|0;
	 $9 = (($6) + 4)|0;
	 $10 = $9;
	 $11 = HEAP32[$10>>2]|0;
	 $12 = (_xmmsv_new_int($8,$11)|0);
	 $v = $12;
	 $13 = $dict$addr;
	 $14 = $key$addr;
	 $15 = $v;
	 $call1 = (_xmmsv_dict_set($13,$14,$15)|0);
	 $ret = $call1;
	 $16 = $v;
	 _xmmsv_unref($16);
	 $17 = $ret;
	 STACKTOP = sp;return ($17|0);
	}
	function _xmmsv_dict_set_float($dict,$key,$elem) {
	 $dict = $dict|0;
	 $key = $key|0;
	 $elem = +$elem;
	 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $dict$addr = 0, $elem$addr = 0.0, $key$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $dict$addr = $dict;
	 $key$addr = $key;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_float($0)|0);
	 $v = $call;
	 $1 = $dict$addr;
	 $2 = $key$addr;
	 $3 = $v;
	 $call1 = (_xmmsv_dict_set($1,$2,$3)|0);
	 $ret = $call1;
	 $4 = $v;
	 _xmmsv_unref($4);
	 $5 = $ret;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_dict_set_coll($dict,$key,$elem) {
	 $dict = $dict|0;
	 $key = $key|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $dict$addr = 0, $elem$addr = 0, $key$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $dict$addr = $dict;
	 $key$addr = $key;
	 $elem$addr = $elem;
	 $0 = $dict$addr;
	 $1 = $key$addr;
	 $2 = $elem$addr;
	 $call = (_xmmsv_dict_set($0,$1,$2)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_dict_iter_pair_string($it,$key,$r) {
	 $it = $it|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call3 = 0, $it$addr = 0, $key$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $it$addr = $it;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_iter_pair($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 do {
	  if ($tobool) {
	   $2 = $r$addr;
	   $tobool1 = ($2|0)!=(0|0);
	   if ($tobool1) {
	    $3 = HEAP32[$v>>2]|0;
	    $4 = $r$addr;
	    $call3 = (_xmmsv_get_string($3,$4)|0);
	    $retval = $call3;
	    break;
	   } else {
	    $retval = 1;
	    break;
	   }
	  } else {
	   $retval = 0;
	  }
	 } while(0);
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_dict_iter_pair_int32($it,$key,$r) {
	 $it = $it|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call3 = 0, $it$addr = 0, $key$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $it$addr = $it;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_iter_pair($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 do {
	  if ($tobool) {
	   $2 = $r$addr;
	   $tobool1 = ($2|0)!=(0|0);
	   if ($tobool1) {
	    $3 = HEAP32[$v>>2]|0;
	    $4 = $r$addr;
	    $call3 = (_xmmsv_get_int32($3,$4)|0);
	    $retval = $call3;
	    break;
	   } else {
	    $retval = 1;
	    break;
	   }
	  } else {
	   $retval = 0;
	  }
	 } while(0);
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_dict_iter_pair_int64($it,$key,$r) {
	 $it = $it|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call3 = 0, $it$addr = 0, $key$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $it$addr = $it;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_iter_pair($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 do {
	  if ($tobool) {
	   $2 = $r$addr;
	   $tobool1 = ($2|0)!=(0|0);
	   if ($tobool1) {
	    $3 = HEAP32[$v>>2]|0;
	    $4 = $r$addr;
	    $call3 = (_xmmsv_get_int64($3,$4)|0);
	    $retval = $call3;
	    break;
	   } else {
	    $retval = 1;
	    break;
	   }
	  } else {
	   $retval = 0;
	  }
	 } while(0);
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_dict_iter_pair_float($it,$key,$r) {
	 $it = $it|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call3 = 0, $it$addr = 0, $key$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $it$addr = $it;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $1 = $key$addr;
	 $call = (_xmmsv_dict_iter_pair($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 do {
	  if ($tobool) {
	   $2 = $r$addr;
	   $tobool1 = ($2|0)!=(0|0);
	   if ($tobool1) {
	    $3 = HEAP32[$v>>2]|0;
	    $4 = $r$addr;
	    $call3 = (_xmmsv_get_float($3,$4)|0);
	    $retval = $call3;
	    break;
	   } else {
	    $retval = 1;
	    break;
	   }
	  } else {
	   $retval = 0;
	  }
	 } while(0);
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_dict_iter_pair_coll($it,$key,$r) {
	 $it = $it|0;
	 $key = $key|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $it$addr = 0, $key$addr = 0, $r$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $key$addr = $key;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $1 = $key$addr;
	 $2 = $r$addr;
	 $call = (_xmmsv_dict_iter_pair($0,$1,$2)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_dict_iter_set_string($it,$elem) {
	 $it = $it|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $elem$addr = 0, $it$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_string($0)|0);
	 $v = $call;
	 $1 = $it$addr;
	 $2 = $v;
	 $call1 = (_xmmsv_dict_iter_set($1,$2)|0);
	 $ret = $call1;
	 $3 = $v;
	 _xmmsv_unref($3);
	 $4 = $ret;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsv_dict_iter_set_int($it,$0,$1) {
	 $it = $it|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $elem$addr = 0, $it$addr = 0, $ret = 0, $v = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $elem$addr = sp;
	 $it$addr = $it;
	 $2 = $elem$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $elem$addr;
	 $7 = $6;
	 $8 = HEAP32[$7>>2]|0;
	 $9 = (($6) + 4)|0;
	 $10 = $9;
	 $11 = HEAP32[$10>>2]|0;
	 $12 = (_xmmsv_new_int($8,$11)|0);
	 $v = $12;
	 $13 = $it$addr;
	 $14 = $v;
	 $call1 = (_xmmsv_dict_iter_set($13,$14)|0);
	 $ret = $call1;
	 $15 = $v;
	 _xmmsv_unref($15);
	 $16 = $ret;
	 STACKTOP = sp;return ($16|0);
	}
	function _xmmsv_dict_iter_set_float($it,$elem) {
	 $it = $it|0;
	 $elem = +$elem;
	 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $elem$addr = 0.0, $it$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_float($0)|0);
	 $v = $call;
	 $1 = $it$addr;
	 $2 = $v;
	 $call1 = (_xmmsv_dict_iter_set($1,$2)|0);
	 $ret = $call1;
	 $3 = $v;
	 _xmmsv_unref($3);
	 $4 = $ret;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsv_dict_iter_set_coll($it,$elem) {
	 $it = $it|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $call = 0, $elem$addr = 0, $it$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $elem$addr = $elem;
	 $0 = $it$addr;
	 $1 = $elem$addr;
	 $call = (_xmmsv_dict_iter_set($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function __xmmsv_new($type) {
	 $type = $type|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call2 = 0, $retval = 0, $tobool = 0, $type$addr = 0, $type1 = 0, $val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $type$addr = $type;
	 $call = (_calloc(1,32)|0);
	 $val = $call;
	 $0 = $val;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $type$addr;
	  $2 = $val;
	  $type1 = (($2) + 24|0);
	  HEAP32[$type1>>2] = $1;
	  $3 = $val;
	  $call2 = (_xmmsv_ref($3)|0);
	  $retval = $call2;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 3664;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3680;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 53;
	  _xmmsc_log(0,2,3632,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_ref($val) {
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $inc = 0, $ref = 0, $retval = 0, $tobool = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $val$addr = $val;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $ref = (($1) + 28|0);
	  $2 = HEAP32[$ref>>2]|0;
	  $inc = (($2) + 1)|0;
	  HEAP32[$ref>>2] = $inc;
	  $3 = $val$addr;
	  $retval = $3;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 3832;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3840;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3680;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 239;
	  _xmmsc_log(0,2,3720,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_new_none() {
	 var $0 = 0, $call = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (__xmmsv_new(0)|0);
	 $val = $call;
	 $0 = $val;
	 STACKTOP = sp;return ($0|0);
	}
	function _xmmsv_new_error($errstr) {
	 $errstr = $errstr|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $errstr$addr = 0, $tobool = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $errstr$addr = $errstr;
	 $call = (__xmmsv_new(1)|0);
	 $val = $call;
	 $0 = $val;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $3 = $val;
	  STACKTOP = sp;return ($3|0);
	 }
	 $1 = $errstr$addr;
	 $call1 = (FUNCTION_TABLE_ii[3 & 15]($1)|0);
	 $2 = $val;
	 HEAP32[$2>>2] = $call1;
	 $3 = $val;
	 STACKTOP = sp;return ($3|0);
	}
	function _xmmsv_new_int($0,$1) {
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $i$addr = 0, $tobool = 0;
	 var $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $i$addr = sp;
	 $2 = $i$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $call = (__xmmsv_new(2)|0);
	 $val = $call;
	 $6 = $val;
	 $tobool = ($6|0)!=(0|0);
	 if (!($tobool)) {
	  $18 = $val;
	  STACKTOP = sp;return ($18|0);
	 }
	 $7 = $i$addr;
	 $8 = $7;
	 $9 = HEAP32[$8>>2]|0;
	 $10 = (($7) + 4)|0;
	 $11 = $10;
	 $12 = HEAP32[$11>>2]|0;
	 $13 = $val;
	 $14 = $13;
	 $15 = $14;
	 HEAP32[$15>>2] = $9;
	 $16 = (($14) + 4)|0;
	 $17 = $16;
	 HEAP32[$17>>2] = $12;
	 $18 = $val;
	 STACKTOP = sp;return ($18|0);
	}
	function _xmmsv_new_float($i) {
	 $i = +$i;
	 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $call = 0, $i$addr = 0.0, $tobool = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $i$addr = $i;
	 $call = (__xmmsv_new(9)|0);
	 $val = $call;
	 $0 = $val;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $i$addr;
	  $2 = $val;
	  HEAPF32[$2>>2] = $1;
	 }
	 $3 = $val;
	 STACKTOP = sp;return ($3|0);
	}
	function _xmmsv_new_string($s) {
	 $s = $s|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call4 = 0, $call7 = 0, $retval = 0, $s$addr = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
	 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $s$addr = $s;
	 $0 = $s$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3760;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3768;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3680;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 192;
	  _xmmsc_log(0,2,3720,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $s$addr;
	 $call = (_xmmsv_utf8_validate($1)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 3792;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 3768;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 3680;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 193;
	  _xmmsc_log(0,2,3720,$vararg_buffer4);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $call4 = (__xmmsv_new(3)|0);
	 $val = $call4;
	 $2 = $val;
	 $tobool5 = ($2|0)!=(0|0);
	 if ($tobool5) {
	  $3 = $s$addr;
	  $call7 = (FUNCTION_TABLE_ii[3 & 15]($3)|0);
	  $4 = $val;
	  HEAP32[$4>>2] = $call7;
	 }
	 $5 = $val;
	 $retval = $5;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function _xmmsv_new_bin($data,$len) {
	 $data = $data|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $data$addr = 0, $len$addr = 0, $len13 = 0, $retval = 0;
	 var $tobool = 0, $tobool6 = 0, $val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $data$addr = $data;
	 $len$addr = $len;
	 $call = (__xmmsv_new(5)|0);
	 $val = $call;
	 $0 = $val;
	 $tobool = ($0|0)!=(0|0);
	 do {
	  if ($tobool) {
	   $1 = $len$addr;
	   $call1 = (_malloc($1)|0);
	   $2 = $val;
	   HEAP32[$2>>2] = $call1;
	   $3 = $val;
	   $4 = HEAP32[$3>>2]|0;
	   $tobool6 = ($4|0)!=(0|0);
	   if ($tobool6) {
	    $6 = $val;
	    $7 = HEAP32[$6>>2]|0;
	    $8 = $data$addr;
	    $9 = $len$addr;
	    _memcpy(($7|0),($8|0),($9|0))|0;
	    $10 = $len$addr;
	    $11 = $val;
	    $len13 = (($11) + 4|0);
	    HEAP32[$len13>>2] = $10;
	    break;
	   }
	   $5 = $val;
	   _free($5);
	   HEAP32[$vararg_buffer>>2] = 3816;
	   $vararg_ptr1 = (($vararg_buffer) + 4|0);
	   HEAP32[$vararg_ptr1>>2] = 3680;
	   $vararg_ptr2 = (($vararg_buffer) + 8|0);
	   HEAP32[$vararg_ptr2>>2] = 220;
	   _xmmsc_log(0,2,3632,$vararg_buffer);
	   $retval = 0;
	   $13 = $retval;
	   STACKTOP = sp;return ($13|0);
	  }
	 } while(0);
	 $12 = $val;
	 $retval = $12;
	 $13 = $retval;
	 STACKTOP = sp;return ($13|0);
	}
	function _xmmsv_unref($val) {
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp = 0, $cmp5 = 0, $dec = 0, $ref = 0, $ref3 = 0, $ref4 = 0, $tobool = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
	 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $val$addr = $val;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3832;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3856;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3680;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 254;
	  _xmmsc_log(0,2,3720,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $val$addr;
	 $ref = (($1) + 28|0);
	 $2 = HEAP32[$ref>>2]|0;
	 $cmp = ($2|0)<(1);
	 if ($cmp) {
	  HEAP32[$vararg_buffer4>>2] = 3856;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 3896;
	  _xmmsc_log(0,2,3872,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $3 = $val$addr;
	 $ref3 = (($3) + 28|0);
	 $4 = HEAP32[$ref3>>2]|0;
	 $dec = (($4) + -1)|0;
	 HEAP32[$ref3>>2] = $dec;
	 $5 = $val$addr;
	 $ref4 = (($5) + 28|0);
	 $6 = HEAP32[$ref4>>2]|0;
	 $cmp5 = ($6|0)==(0);
	 if (!($cmp5)) {
	  STACKTOP = sp;return;
	 }
	 $7 = $val$addr;
	 __xmmsv_free($7);
	 STACKTOP = sp;return;
	}
	function __xmmsv_free($val) {
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf33 = 0, $buf37 = 0, $len = 0, $tobool = 0, $tobool26 = 0, $tobool29 = 0, $type = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $val$addr = $val;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 3832;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3968;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 3680;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 69;
	  _xmmsc_log(0,2,3720,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $val$addr;
	 $type = (($1) + 24|0);
	 $2 = HEAP32[$type>>2]|0;
	 switch ($2|0) {
	 case 3:  {
	  $6 = $val$addr;
	  $7 = HEAP32[$6>>2]|0;
	  _free($7);
	  $8 = $val$addr;
	  HEAP32[$8>>2] = 0;
	  break;
	 }
	 case 9: case 2: case 10: case 0:  {
	  break;
	 }
	 case 4:  {
	  $9 = $val$addr;
	  $10 = HEAP32[$9>>2]|0;
	  __xmmsv_coll_free($10);
	  $11 = $val$addr;
	  HEAP32[$11>>2] = 0;
	  break;
	 }
	 case 7:  {
	  $18 = $val$addr;
	  $19 = HEAP32[$18>>2]|0;
	  __xmmsv_dict_free($19);
	  $20 = $val$addr;
	  HEAP32[$20>>2] = 0;
	  break;
	 }
	 case 8:  {
	  $21 = $val$addr;
	  $22 = HEAP8[$21>>0]|0;
	  $tobool26 = $22&1;
	  if (!($tobool26)) {
	   $23 = $val$addr;
	   $buf = (($23) + 4|0);
	   $24 = HEAP32[$buf>>2]|0;
	   $tobool29 = ($24|0)!=(0|0);
	   if ($tobool29) {
	    $25 = $val$addr;
	    $buf33 = (($25) + 4|0);
	    $26 = HEAP32[$buf33>>2]|0;
	    _free($26);
	   }
	  }
	  $27 = $val$addr;
	  $buf37 = (($27) + 4|0);
	  HEAP32[$buf37>>2] = 0;
	  break;
	 }
	 case 6:  {
	  $15 = $val$addr;
	  $16 = HEAP32[$15>>2]|0;
	  __xmmsv_list_free($16);
	  $17 = $val$addr;
	  HEAP32[$17>>2] = 0;
	  break;
	 }
	 case 1:  {
	  $3 = $val$addr;
	  $4 = HEAP32[$3>>2]|0;
	  _free($4);
	  $5 = $val$addr;
	  HEAP32[$5>>2] = 0;
	  break;
	 }
	 case 5:  {
	  $12 = $val$addr;
	  $13 = HEAP32[$12>>2]|0;
	  _free($13);
	  $14 = $val$addr;
	  $len = (($14) + 4|0);
	  HEAP32[$len>>2] = 0;
	  break;
	 }
	 default: {
	 }
	 }
	 $28 = $val$addr;
	 _free($28);
	 STACKTOP = sp;return;
	}
	function _xmmsv_get_type($val) {
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $retval = 0, $tobool = 0, $type = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $val$addr = $val;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $type = (($1) + 24|0);
	  $2 = HEAP32[$type>>2]|0;
	  $retval = $2;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 3920;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3936;
	  _xmmsc_log(0,2,3872,$vararg_buffer);
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsv_is_type($val,$t) {
	 $val = $val|0;
	 $t = $t|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $conv = 0, $retval = 0, $t$addr = 0, $tobool = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $val$addr = $val;
	 $t$addr = $t;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $call = (_xmmsv_get_type($1)|0);
	  $2 = $t$addr;
	  $cmp = ($call|0)==($2|0);
	  $conv = $cmp&1;
	  $retval = $conv;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 3952;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 3936;
	  _xmmsc_log(0,2,3872,$vararg_buffer);
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsv_is_error($val) {
	 $val = $val|0;
	 var $0 = 0, $call = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $0 = $val$addr;
	 $call = (_xmmsv_is_type($0,1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_get_error($val,$r) {
	 $val = $val|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $r$addr = 0, $retval = 0, $tobool = 0, $type = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $type = (($1) + 24|0);
	  $2 = HEAP32[$type>>2]|0;
	  $cmp = ($2|0)!=(1);
	  if (!($cmp)) {
	   $3 = $val$addr;
	   $4 = HEAP32[$3>>2]|0;
	   $5 = $r$addr;
	   HEAP32[$5>>2] = $4;
	   $retval = 1;
	   $6 = $retval;
	   STACKTOP = sp;return ($6|0);
	  }
	 }
	 $retval = 0;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function _xmmsv_get_int32($val,$r) {
	 $val = $val|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $r$addr = 0, $retval = 0, $tobool = 0, $type = 0, $val$addr = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 0;
	  $50 = $retval;
	  STACKTOP = sp;return ($50|0);
	 }
	 $1 = $val$addr;
	 $type = (($1) + 24|0);
	 $2 = HEAP32[$type>>2]|0;
	 $cmp = ($2|0)==(2);
	 if (!($cmp)) {
	  $retval = 0;
	  $50 = $retval;
	  STACKTOP = sp;return ($50|0);
	 }
	 $3 = $val$addr;
	 $4 = $3;
	 $5 = $4;
	 $6 = HEAP32[$5>>2]|0;
	 $7 = (($4) + 4)|0;
	 $8 = $7;
	 $9 = HEAP32[$8>>2]|0;
	 $10 = (0)<($9|0);
	 $11 = (0)==($9|0);
	 $12 = (2147483647)<($6>>>0);
	 $13 = $11 & $12;
	 $14 = $10 | $13;
	 if ($14) {
	  $23 = 0;$26 = 2147483647;
	 } else {
	  $15 = $val$addr;
	  $16 = $15;
	  $17 = $16;
	  $18 = HEAP32[$17>>2]|0;
	  $19 = (($16) + 4)|0;
	  $20 = $19;
	  $21 = HEAP32[$20>>2]|0;
	  $23 = $21;$26 = $18;
	 }
	 $22 = (-1)>($23|0);
	 $24 = (-1)==($23|0);
	 $25 = (2147483648)>($26>>>0);
	 $27 = $24 & $25;
	 $28 = $22 | $27;
	 if ($28) {
	  $49 = -2147483648;$51 = -1;
	 } else {
	  $29 = $val$addr;
	  $30 = $29;
	  $31 = $30;
	  $32 = HEAP32[$31>>2]|0;
	  $33 = (($30) + 4)|0;
	  $34 = $33;
	  $35 = HEAP32[$34>>2]|0;
	  $36 = (0)<($35|0);
	  $37 = (0)==($35|0);
	  $38 = (2147483647)<($32>>>0);
	  $39 = $37 & $38;
	  $40 = $36 | $39;
	  if ($40) {
	   $52 = 2147483647;$53 = 0;
	  } else {
	   $41 = $val$addr;
	   $42 = $41;
	   $43 = $42;
	   $44 = HEAP32[$43>>2]|0;
	   $45 = (($42) + 4)|0;
	   $46 = $45;
	   $47 = HEAP32[$46>>2]|0;
	   $52 = $44;$53 = $47;
	  }
	  $49 = $52;$51 = $53;
	 }
	 $48 = $r$addr;
	 HEAP32[$48>>2] = $49;
	 $retval = 1;
	 $50 = $retval;
	 STACKTOP = sp;return ($50|0);
	}
	function _xmmsv_get_int64($val,$r) {
	 $val = $val|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $r$addr = 0, $retval = 0, $tobool = 0;
	 var $type = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $val$addr;
	 $type = (($1) + 24|0);
	 $2 = HEAP32[$type>>2]|0;
	 $cmp = ($2|0)==(2);
	 if ($cmp) {
	  $3 = $val$addr;
	  $4 = $3;
	  $5 = $4;
	  $6 = HEAP32[$5>>2]|0;
	  $7 = (($4) + 4)|0;
	  $8 = $7;
	  $9 = HEAP32[$8>>2]|0;
	  $10 = $r$addr;
	  $11 = $10;
	  $12 = $11;
	  HEAP32[$12>>2] = $6;
	  $13 = (($11) + 4)|0;
	  $14 = $13;
	  HEAP32[$14>>2] = $9;
	  $retval = 1;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 } else {
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 return 0|0;
	}
	function _xmmsv_get_float($val,$r) {
	 $val = $val|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $cmp = 0, $r$addr = 0, $retval = 0, $tobool = 0, $type = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $type = (($1) + 24|0);
	  $2 = HEAP32[$type>>2]|0;
	  $cmp = ($2|0)!=(9);
	  if (!($cmp)) {
	   $3 = $val$addr;
	   $4 = +HEAPF32[$3>>2];
	   $5 = $r$addr;
	   HEAPF32[$5>>2] = $4;
	   $retval = 1;
	   $6 = $retval;
	   STACKTOP = sp;return ($6|0);
	  }
	 }
	 $retval = 0;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function _xmmsv_get_string($val,$r) {
	 $val = $val|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cmp = 0, $r$addr = 0, $retval = 0, $tobool = 0, $type = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $type = (($1) + 24|0);
	  $2 = HEAP32[$type>>2]|0;
	  $cmp = ($2|0)!=(3);
	  if (!($cmp)) {
	   $3 = $val$addr;
	   $4 = HEAP32[$3>>2]|0;
	   $5 = $r$addr;
	   HEAP32[$5>>2] = $4;
	   $retval = 1;
	   $6 = $retval;
	   STACKTOP = sp;return ($6|0);
	  }
	 }
	 $retval = 0;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function _xmmsv_get_coll($val,$c) {
	 $val = $val|0;
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c$addr = 0, $cmp = 0, $retval = 0, $tobool = 0, $type = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $c$addr = $c;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $type = (($1) + 24|0);
	  $2 = HEAP32[$type>>2]|0;
	  $cmp = ($2|0)!=(4);
	  if (!($cmp)) {
	   $3 = $val$addr;
	   $4 = $c$addr;
	   HEAP32[$4>>2] = $3;
	   $retval = 1;
	   $5 = $retval;
	   STACKTOP = sp;return ($5|0);
	  }
	 }
	 $retval = 0;
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_get_bin($val,$r,$rlen) {
	 $val = $val|0;
	 $r = $r|0;
	 $rlen = $rlen|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $len = 0, $r$addr = 0, $retval = 0, $rlen$addr = 0, $tobool = 0, $type = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $r$addr = $r;
	 $rlen$addr = $rlen;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $type = (($1) + 24|0);
	  $2 = HEAP32[$type>>2]|0;
	  $cmp = ($2|0)!=(5);
	  if (!($cmp)) {
	   $3 = $val$addr;
	   $4 = HEAP32[$3>>2]|0;
	   $5 = $r$addr;
	   HEAP32[$5>>2] = $4;
	   $6 = $val$addr;
	   $len = (($6) + 4|0);
	   $7 = HEAP32[$len>>2]|0;
	   $8 = $rlen$addr;
	   HEAP32[$8>>2] = $7;
	   $retval = 1;
	   $9 = $retval;
	   STACKTOP = sp;return ($9|0);
	  }
	 }
	 $retval = 0;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function __xmmsv_list_free($l) {
	 $l = $l|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $i = 0;
	 var $inc = 0, $it = 0, $iterators = 0, $iterators1 = 0, $l$addr = 0, $size = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $l$addr = $l;
	 while(1) {
	  $0 = $l$addr;
	  $iterators = (($0) + 24|0);
	  $1 = HEAP32[$iterators>>2]|0;
	  $tobool = ($1|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $2 = $l$addr;
	  $iterators1 = (($2) + 24|0);
	  $3 = HEAP32[$iterators1>>2]|0;
	  $4 = HEAP32[$3>>2]|0;
	  $it = $4;
	  $5 = $it;
	  __xmmsv_list_iter_free($5);
	 }
	 $i = 0;
	 while(1) {
	  $6 = $i;
	  $7 = $l$addr;
	  $size = (($7) + 8|0);
	  $8 = HEAP32[$size>>2]|0;
	  $cmp = ($6|0)<($8|0);
	  if (!($cmp)) {
	   break;
	  }
	  $9 = $i;
	  $10 = $l$addr;
	  $11 = HEAP32[$10>>2]|0;
	  $arrayidx = (($11) + ($9<<2)|0);
	  $12 = HEAP32[$arrayidx>>2]|0;
	  _xmmsv_unref($12);
	  $13 = $i;
	  $inc = (($13) + 1)|0;
	  $i = $inc;
	 }
	 $14 = $l$addr;
	 $15 = HEAP32[$14>>2]|0;
	 _free($15);
	 $16 = $l$addr;
	 _free($16);
	 STACKTOP = sp;return;
	}
	function __xmmsv_list_iter_free($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $it$addr = 0, $iterators = 0, $iterators2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $0 = $it$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $iterators = (($1) + 24|0);
	 $2 = HEAP32[$iterators>>2]|0;
	 $3 = $it$addr;
	 $call = (_x_list_remove($2,$3)|0);
	 $4 = $it$addr;
	 $5 = HEAP32[$4>>2]|0;
	 $iterators2 = (($5) + 24|0);
	 HEAP32[$iterators2>>2] = $call;
	 $6 = $it$addr;
	 _free($6);
	 STACKTOP = sp;return;
	}
	function _xmmsv_new_list() {
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $parent_value = 0, $tobool = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (__xmmsv_new(6)|0);
	 $val = $call;
	 $0 = $val;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $5 = $val;
	  STACKTOP = sp;return ($5|0);
	 }
	 $call1 = (__xmmsv_list_new()|0);
	 $1 = $val;
	 HEAP32[$1>>2] = $call1;
	 $2 = $val;
	 $3 = $val;
	 $4 = HEAP32[$3>>2]|0;
	 $parent_value = (($4) + 4|0);
	 HEAP32[$parent_value>>2] = $2;
	 $5 = $val;
	 STACKTOP = sp;return ($5|0);
	}
	function __xmmsv_list_new() {
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $list = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $call = (_calloc(1,28)|0);
	 $list = $call;
	 $0 = $list;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $list;
	  $retval = $1;
	  $2 = $retval;
	  STACKTOP = sp;return ($2|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 5176;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4048;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 69;
	  _xmmsc_log(0,2,4952,$vararg_buffer);
	  $retval = 0;
	  $2 = $retval;
	  STACKTOP = sp;return ($2|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_get($listv,$pos,$val) {
	 $listv = $listv|0;
	 $pos = $pos|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call4 = 0, $l = 0, $listv$addr = 0, $pos$addr = 0, $retval = 0;
	 var $size = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, $tobool8 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer = sp + 16|0;
	 $pos$addr = sp + 36|0;
	 $listv$addr = $listv;
	 HEAP32[$pos$addr>>2] = $pos;
	 $val$addr = $val;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4032;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 331;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4032;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 332;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $2 = $listv$addr;
	 $3 = HEAP32[$2>>2]|0;
	 $l = $3;
	 $4 = $l;
	 $size = (($4) + 8|0);
	 $5 = HEAP32[$size>>2]|0;
	 $call4 = (__xmmsv_list_position_normalize($pos$addr,$5,0)|0);
	 $tobool5 = ($call4|0)!=(0);
	 if (!($tobool5)) {
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $6 = $val$addr;
	 $tobool8 = ($6|0)!=(0|0);
	 if ($tobool8) {
	  $7 = HEAP32[$pos$addr>>2]|0;
	  $8 = $l;
	  $9 = HEAP32[$8>>2]|0;
	  $arrayidx = (($9) + ($7<<2)|0);
	  $10 = HEAP32[$arrayidx>>2]|0;
	  $11 = $val$addr;
	  HEAP32[$11>>2] = $10;
	 }
	 $retval = 1;
	 $12 = $retval;
	 STACKTOP = sp;return ($12|0);
	}
	function __xmmsv_list_position_normalize($pos,$size,$allow_append) {
	 $pos = $pos|0;
	 $size = $size|0;
	 $allow_append = $allow_append|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $allow_append$addr = 0;
	 var $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp3 = 0, $cmp7 = 0, $pos$addr = 0, $retval = 0, $size$addr = 0, $sub = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $pos$addr = $pos;
	 $size$addr = $size;
	 $allow_append$addr = $allow_append;
	 $0 = $size$addr;
	 $cmp = ($0|0)>=(0);
	 if (!($cmp)) {
	  HEAP32[$vararg_buffer>>2] = 5128;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5144;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 45;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $1 = $pos$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $cmp1 = ($2|0)<(0);
	 do {
	  if ($cmp1) {
	   $3 = $pos$addr;
	   $4 = HEAP32[$3>>2]|0;
	   $sub = (0 - ($4))|0;
	   $5 = $size$addr;
	   $cmp3 = ($sub|0)>($5|0);
	   if (!($cmp3)) {
	    $6 = $size$addr;
	    $7 = $pos$addr;
	    $8 = HEAP32[$7>>2]|0;
	    $add = (($6) + ($8))|0;
	    $9 = $pos$addr;
	    HEAP32[$9>>2] = $add;
	    break;
	   }
	   $retval = 0;
	   $17 = $retval;
	   STACKTOP = sp;return ($17|0);
	  }
	 } while(0);
	 $10 = $pos$addr;
	 $11 = HEAP32[$10>>2]|0;
	 $12 = $size$addr;
	 $cmp7 = ($11|0)>($12|0);
	 if ($cmp7) {
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $13 = $allow_append$addr;
	 $tobool = ($13|0)!=(0);
	 if (!($tobool)) {
	  $14 = $pos$addr;
	  $15 = HEAP32[$14>>2]|0;
	  $16 = $size$addr;
	  $cmp10 = ($15|0)==($16|0);
	  if ($cmp10) {
	   $retval = 0;
	   $17 = $retval;
	   STACKTOP = sp;return ($17|0);
	  }
	 }
	 $retval = 1;
	 $17 = $retval;
	 STACKTOP = sp;return ($17|0);
	}
	function _xmmsv_list_set($listv,$pos,$val) {
	 $listv = $listv|0;
	 $pos = $pos|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx14 = 0, $call = 0;
	 var $call12 = 0, $call7 = 0, $l = 0, $listv$addr = 0, $old_val = 0, $pos$addr = 0, $retval = 0, $size = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool8 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp + 32|0;
	 $pos$addr = sp + 48|0;
	 $listv$addr = $listv;
	 HEAP32[$pos$addr>>2] = $pos;
	 $val$addr = $val;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4120;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 363;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $1 = $val$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 4136;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4120;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 364;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $2 = $listv$addr;
	 $call = (_xmmsv_is_type($2,6)|0);
	 $tobool4 = ($call|0)!=(0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer10>>2] = 4080;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 4120;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 4048;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 365;
	  _xmmsc_log(0,2,3984,$vararg_buffer10);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $3 = $listv$addr;
	 $4 = HEAP32[$3>>2]|0;
	 $l = $4;
	 $5 = $l;
	 $size = (($5) + 8|0);
	 $6 = HEAP32[$size>>2]|0;
	 $call7 = (__xmmsv_list_position_normalize($pos$addr,$6,0)|0);
	 $tobool8 = ($call7|0)!=(0);
	 if ($tobool8) {
	  $7 = HEAP32[$pos$addr>>2]|0;
	  $8 = $l;
	  $9 = HEAP32[$8>>2]|0;
	  $arrayidx = (($9) + ($7<<2)|0);
	  $10 = HEAP32[$arrayidx>>2]|0;
	  $old_val = $10;
	  $11 = $val$addr;
	  $call12 = (_xmmsv_ref($11)|0);
	  $12 = HEAP32[$pos$addr>>2]|0;
	  $13 = $l;
	  $14 = HEAP32[$13>>2]|0;
	  $arrayidx14 = (($14) + ($12<<2)|0);
	  HEAP32[$arrayidx14>>2] = $call12;
	  $15 = $old_val;
	  _xmmsv_unref($15);
	  $retval = 1;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 } else {
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_insert($listv,$pos,$val) {
	 $listv = $listv|0;
	 $pos = $pos|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call7 = 0, $listv$addr = 0, $pos$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp + 32|0;
	 $listv$addr = $listv;
	 $pos$addr = $pos;
	 $val$addr = $val;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4144;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 393;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4144;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 394;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $2 = $val$addr;
	 $tobool4 = ($2|0)!=(0|0);
	 if ($tobool4) {
	  $3 = $listv$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = $pos$addr;
	  $6 = $val$addr;
	  $call7 = (__xmmsv_list_insert($4,$5,$6)|0);
	  $retval = $call7;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 4136;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 4144;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 4048;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 395;
	  _xmmsc_log(0,2,3984,$vararg_buffer10);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function __xmmsv_list_insert($l,$pos,$val) {
	 $l = $l|0;
	 $pos = $pos|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr23 = 0, $add$ptr25 = 0, $allocated = 0, $allocated10 = 0, $allocated13 = 0, $arrayidx = 0, $call = 0, $call15 = 0, $call28 = 0, $call3 = 0;
	 var $cmp = 0, $cmp11 = 0, $cmp21 = 0, $cmp32 = 0, $double_size = 0, $inc = 0, $inc35 = 0, $it = 0, $iterators = 0, $l$addr = 0, $mul = 0, $n = 0, $next = 0, $pos$addr = 0, $position = 0, $position34 = 0, $restricted = 0, $restricttype = 0, $retval = 0, $shl = 0;
	 var $size = 0, $size20 = 0, $size26 = 0, $size30 = 0, $size8 = 0, $sub = 0, $success = 0, $tobool = 0, $tobool1 = 0, $tobool16 = 0, $tobool31 = 0, $tobool4 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
	 var $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $pos$addr = sp + 44|0;
	 $l$addr = $l;
	 HEAP32[$pos$addr>>2] = $pos;
	 $val$addr = $val;
	 $0 = $l$addr;
	 $size = (($0) + 8|0);
	 $1 = HEAP32[$size>>2]|0;
	 $call = (__xmmsv_list_position_normalize($pos$addr,$1,1)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $retval = 0;
	  $48 = $retval;
	  STACKTOP = sp;return ($48|0);
	 }
	 $2 = $l$addr;
	 $restricted = (($2) + 16|0);
	 $3 = HEAP8[$restricted>>0]|0;
	 $tobool1 = $3&1;
	 do {
	  if ($tobool1) {
	   $4 = $val$addr;
	   $5 = $l$addr;
	   $restricttype = (($5) + 20|0);
	   $6 = HEAP32[$restricttype>>2]|0;
	   $call3 = (_xmmsv_is_type($4,$6)|0);
	   $tobool4 = ($call3|0)!=(0);
	   if ($tobool4) {
	    break;
	   }
	   HEAP32[$vararg_buffer>>2] = 5064;
	   $vararg_ptr1 = (($vararg_buffer) + 4|0);
	   HEAP32[$vararg_ptr1>>2] = 5104;
	   $vararg_ptr2 = (($vararg_buffer) + 8|0);
	   HEAP32[$vararg_ptr2>>2] = 4048;
	   $vararg_ptr3 = (($vararg_buffer) + 12|0);
	   HEAP32[$vararg_ptr3>>2] = 128;
	   _xmmsc_log(0,2,3984,$vararg_buffer);
	   $retval = 0;
	   $48 = $retval;
	   STACKTOP = sp;return ($48|0);
	  }
	 } while(0);
	 $7 = $l$addr;
	 $size8 = (($7) + 8|0);
	 $8 = HEAP32[$size8>>2]|0;
	 $9 = $l$addr;
	 $allocated = (($9) + 12|0);
	 $10 = HEAP32[$allocated>>2]|0;
	 $cmp = ($8|0)==($10|0);
	 do {
	  if ($cmp) {
	   $11 = $l$addr;
	   $allocated10 = (($11) + 12|0);
	   $12 = HEAP32[$allocated10>>2]|0;
	   $cmp11 = ($12|0)>(0);
	   if ($cmp11) {
	    $13 = $l$addr;
	    $allocated13 = (($13) + 12|0);
	    $14 = HEAP32[$allocated13>>2]|0;
	    $shl = $14 << 1;
	    $double_size = $shl;
	   } else {
	    $double_size = 1;
	   }
	   $15 = $l$addr;
	   $16 = $double_size;
	   $call15 = (__xmmsv_list_resize($15,$16)|0);
	   $success = $call15;
	   $17 = $success;
	   $tobool16 = ($17|0)!=(0);
	   if ($tobool16) {
	    break;
	   }
	   HEAP32[$vararg_buffer4>>2] = 5008;
	   $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	   HEAP32[$vararg_ptr7>>2] = 5104;
	   $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	   HEAP32[$vararg_ptr8>>2] = 4048;
	   $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	   HEAP32[$vararg_ptr9>>2] = 141;
	   _xmmsc_log(0,2,3984,$vararg_buffer4);
	   $retval = 0;
	   $48 = $retval;
	   STACKTOP = sp;return ($48|0);
	  }
	 } while(0);
	 $18 = $l$addr;
	 $size20 = (($18) + 8|0);
	 $19 = HEAP32[$size20>>2]|0;
	 $20 = HEAP32[$pos$addr>>2]|0;
	 $cmp21 = ($19|0)>($20|0);
	 if ($cmp21) {
	  $21 = $l$addr;
	  $22 = HEAP32[$21>>2]|0;
	  $23 = HEAP32[$pos$addr>>2]|0;
	  $add$ptr = (($22) + ($23<<2)|0);
	  $add$ptr23 = (($add$ptr) + 4|0);
	  $24 = $l$addr;
	  $25 = HEAP32[$24>>2]|0;
	  $26 = HEAP32[$pos$addr>>2]|0;
	  $add$ptr25 = (($25) + ($26<<2)|0);
	  $27 = $l$addr;
	  $size26 = (($27) + 8|0);
	  $28 = HEAP32[$size26>>2]|0;
	  $29 = HEAP32[$pos$addr>>2]|0;
	  $sub = (($28) - ($29))|0;
	  $mul = $sub<<2;
	  _memmove(($add$ptr23|0),($add$ptr25|0),($mul|0))|0;
	 }
	 $30 = $val$addr;
	 $call28 = (_xmmsv_ref($30)|0);
	 $31 = HEAP32[$pos$addr>>2]|0;
	 $32 = $l$addr;
	 $33 = HEAP32[$32>>2]|0;
	 $arrayidx = (($33) + ($31<<2)|0);
	 HEAP32[$arrayidx>>2] = $call28;
	 $34 = $l$addr;
	 $size30 = (($34) + 8|0);
	 $35 = HEAP32[$size30>>2]|0;
	 $inc = (($35) + 1)|0;
	 HEAP32[$size30>>2] = $inc;
	 $36 = $l$addr;
	 $iterators = (($36) + 24|0);
	 $37 = HEAP32[$iterators>>2]|0;
	 $n = $37;
	 while(1) {
	  $38 = $n;
	  $tobool31 = ($38|0)!=(0|0);
	  if (!($tobool31)) {
	   break;
	  }
	  $39 = $n;
	  $40 = HEAP32[$39>>2]|0;
	  $it = $40;
	  $41 = $it;
	  $position = (($41) + 4|0);
	  $42 = HEAP32[$position>>2]|0;
	  $43 = HEAP32[$pos$addr>>2]|0;
	  $cmp32 = ($42|0)>($43|0);
	  if ($cmp32) {
	   $44 = $it;
	   $position34 = (($44) + 4|0);
	   $45 = HEAP32[$position34>>2]|0;
	   $inc35 = (($45) + 1)|0;
	   HEAP32[$position34>>2] = $inc35;
	  }
	  $46 = $n;
	  $next = (($46) + 4|0);
	  $47 = HEAP32[$next>>2]|0;
	  $n = $47;
	 }
	 $retval = 1;
	 $48 = $retval;
	 STACKTOP = sp;return ($48|0);
	}
	function _xmmsv_list_remove($listv,$pos) {
	 $listv = $listv|0;
	 $pos = $pos|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call4 = 0, $listv$addr = 0, $pos$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
	 var $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $listv$addr = $listv;
	 $pos$addr = $pos;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4168;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 411;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if ($tobool1) {
	  $2 = $listv$addr;
	  $3 = HEAP32[$2>>2]|0;
	  $4 = $pos$addr;
	  $call4 = (__xmmsv_list_remove($3,$4)|0);
	  $retval = $call4;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4168;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 412;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 return 0|0;
	}
	function __xmmsv_list_remove($l,$pos) {
	 $l = $l|0;
	 $pos = $pos|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
	 var $9 = 0, $add$ptr = 0, $add$ptr6 = 0, $add$ptr7 = 0, $allocated = 0, $arrayidx = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp11 = 0, $cmp19 = 0, $dec = 0, $dec22 = 0, $half_size = 0, $it = 0, $iterators = 0, $l$addr = 0, $mul = 0, $n = 0, $next = 0;
	 var $pos$addr = 0, $position = 0, $position21 = 0, $retval = 0, $shr = 0, $size = 0, $size1 = 0, $size10 = 0, $size2 = 0, $size8 = 0, $sub = 0, $success = 0, $tobool = 0, $tobool14 = 0, $tobool18 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $pos$addr = sp + 28|0;
	 $l$addr = $l;
	 HEAP32[$pos$addr>>2] = $pos;
	 $0 = $l$addr;
	 $size = (($0) + 8|0);
	 $1 = HEAP32[$size>>2]|0;
	 $call = (__xmmsv_list_position_normalize($pos$addr,$1,0)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $retval = 0;
	  $40 = $retval;
	  STACKTOP = sp;return ($40|0);
	 }
	 $2 = HEAP32[$pos$addr>>2]|0;
	 $3 = $l$addr;
	 $4 = HEAP32[$3>>2]|0;
	 $arrayidx = (($4) + ($2<<2)|0);
	 $5 = HEAP32[$arrayidx>>2]|0;
	 _xmmsv_unref($5);
	 $6 = $l$addr;
	 $size1 = (($6) + 8|0);
	 $7 = HEAP32[$size1>>2]|0;
	 $dec = (($7) + -1)|0;
	 HEAP32[$size1>>2] = $dec;
	 $8 = HEAP32[$pos$addr>>2]|0;
	 $9 = $l$addr;
	 $size2 = (($9) + 8|0);
	 $10 = HEAP32[$size2>>2]|0;
	 $cmp = ($8|0)<($10|0);
	 if ($cmp) {
	  $11 = $l$addr;
	  $12 = HEAP32[$11>>2]|0;
	  $13 = HEAP32[$pos$addr>>2]|0;
	  $add$ptr = (($12) + ($13<<2)|0);
	  $14 = $l$addr;
	  $15 = HEAP32[$14>>2]|0;
	  $16 = HEAP32[$pos$addr>>2]|0;
	  $add$ptr6 = (($15) + ($16<<2)|0);
	  $add$ptr7 = (($add$ptr6) + 4|0);
	  $17 = $l$addr;
	  $size8 = (($17) + 8|0);
	  $18 = HEAP32[$size8>>2]|0;
	  $19 = HEAP32[$pos$addr>>2]|0;
	  $sub = (($18) - ($19))|0;
	  $mul = $sub<<2;
	  _memmove(($add$ptr|0),($add$ptr7|0),($mul|0))|0;
	 }
	 $20 = $l$addr;
	 $allocated = (($20) + 12|0);
	 $21 = HEAP32[$allocated>>2]|0;
	 $shr = $21 >> 1;
	 $half_size = $shr;
	 $22 = $l$addr;
	 $size10 = (($22) + 8|0);
	 $23 = HEAP32[$size10>>2]|0;
	 $24 = $half_size;
	 $cmp11 = ($23|0)<=($24|0);
	 do {
	  if ($cmp11) {
	   $25 = $l$addr;
	   $26 = $half_size;
	   $call13 = (__xmmsv_list_resize($25,$26)|0);
	   $success = $call13;
	   $27 = $success;
	   $tobool14 = ($27|0)!=(0);
	   if ($tobool14) {
	    break;
	   }
	   HEAP32[$vararg_buffer>>2] = 5008;
	   $vararg_ptr1 = (($vararg_buffer) + 4|0);
	   HEAP32[$vararg_ptr1>>2] = 5016;
	   $vararg_ptr2 = (($vararg_buffer) + 8|0);
	   HEAP32[$vararg_ptr2>>2] = 4048;
	   $vararg_ptr3 = (($vararg_buffer) + 12|0);
	   HEAP32[$vararg_ptr3>>2] = 197;
	   _xmmsc_log(0,2,3984,$vararg_buffer);
	   $retval = 0;
	   $40 = $retval;
	   STACKTOP = sp;return ($40|0);
	  }
	 } while(0);
	 $28 = $l$addr;
	 $iterators = (($28) + 24|0);
	 $29 = HEAP32[$iterators>>2]|0;
	 $n = $29;
	 while(1) {
	  $30 = $n;
	  $tobool18 = ($30|0)!=(0|0);
	  if (!($tobool18)) {
	   break;
	  }
	  $31 = $n;
	  $32 = HEAP32[$31>>2]|0;
	  $it = $32;
	  $33 = $it;
	  $position = (($33) + 4|0);
	  $34 = HEAP32[$position>>2]|0;
	  $35 = HEAP32[$pos$addr>>2]|0;
	  $cmp19 = ($34|0)>($35|0);
	  if ($cmp19) {
	   $36 = $it;
	   $position21 = (($36) + 4|0);
	   $37 = HEAP32[$position21>>2]|0;
	   $dec22 = (($37) + -1)|0;
	   HEAP32[$position21>>2] = $dec22;
	  }
	  $38 = $n;
	  $next = (($38) + 4|0);
	  $39 = HEAP32[$next>>2]|0;
	  $n = $39;
	 }
	 $retval = 1;
	 $40 = $retval;
	 STACKTOP = sp;return ($40|0);
	}
	function _xmmsv_list_move($listv,$old_pos,$new_pos) {
	 $listv = $listv|0;
	 $old_pos = $old_pos|0;
	 $new_pos = $new_pos|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call4 = 0, $listv$addr = 0, $new_pos$addr = 0, $old_pos$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
	 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $listv$addr = $listv;
	 $old_pos$addr = $old_pos;
	 $new_pos$addr = $new_pos;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4192;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 434;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if ($tobool1) {
	  $2 = $listv$addr;
	  $3 = HEAP32[$2>>2]|0;
	  $4 = $old_pos$addr;
	  $5 = $new_pos$addr;
	  $call4 = (__xmmsv_list_move($3,$4,$5)|0);
	  $retval = $call4;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4192;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 435;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function __xmmsv_list_move($l,$old_pos,$new_pos) {
	 $l = $l|0;
	 $old_pos = $old_pos|0;
	 $new_pos = $new_pos|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
	 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr27 = 0, $add$ptr28 = 0, $add$ptr30 = 0;
	 var $add$ptr9 = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx34 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp41 = 0, $cmp44 = 0, $cmp47 = 0, $dec = 0, $inc = 0, $it = 0, $iterators = 0, $iterators35 = 0, $l$addr = 0, $mul = 0;
	 var $mul32 = 0, $n = 0, $new_pos$addr = 0, $next = 0, $next55 = 0, $old_pos$addr = 0, $position = 0, $position15 = 0, $position18 = 0, $position21 = 0, $position22 = 0, $position40 = 0, $position43 = 0, $position46 = 0, $position49 = 0, $position51 = 0, $retval = 0, $size = 0, $size1 = 0, $sub = 0;
	 var $sub31 = 0, $tobool = 0, $tobool13 = 0, $tobool3 = 0, $tobool37 = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $old_pos$addr = sp + 20|0;
	 $new_pos$addr = sp + 24|0;
	 $l$addr = $l;
	 HEAP32[$old_pos$addr>>2] = $old_pos;
	 HEAP32[$new_pos$addr>>2] = $new_pos;
	 $0 = $l$addr;
	 $size = (($0) + 8|0);
	 $1 = HEAP32[$size>>2]|0;
	 $call = (__xmmsv_list_position_normalize($old_pos$addr,$1,0)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $retval = 0;
	  $74 = $retval;
	  STACKTOP = sp;return ($74|0);
	 }
	 $2 = $l$addr;
	 $size1 = (($2) + 8|0);
	 $3 = HEAP32[$size1>>2]|0;
	 $call2 = (__xmmsv_list_position_normalize($new_pos$addr,$3,0)|0);
	 $tobool3 = ($call2|0)!=(0);
	 if (!($tobool3)) {
	  $retval = 0;
	  $74 = $retval;
	  STACKTOP = sp;return ($74|0);
	 }
	 $4 = HEAP32[$old_pos$addr>>2]|0;
	 $5 = $l$addr;
	 $6 = HEAP32[$5>>2]|0;
	 $arrayidx = (($6) + ($4<<2)|0);
	 $7 = HEAP32[$arrayidx>>2]|0;
	 $v = $7;
	 $8 = HEAP32[$old_pos$addr>>2]|0;
	 $9 = HEAP32[$new_pos$addr>>2]|0;
	 $cmp = ($8|0)<($9|0);
	 if ($cmp) {
	  $10 = $l$addr;
	  $11 = HEAP32[$10>>2]|0;
	  $12 = HEAP32[$old_pos$addr>>2]|0;
	  $add$ptr = (($11) + ($12<<2)|0);
	  $13 = $l$addr;
	  $14 = HEAP32[$13>>2]|0;
	  $15 = HEAP32[$old_pos$addr>>2]|0;
	  $add$ptr9 = (($14) + ($15<<2)|0);
	  $add$ptr10 = (($add$ptr9) + 4|0);
	  $16 = HEAP32[$new_pos$addr>>2]|0;
	  $17 = HEAP32[$old_pos$addr>>2]|0;
	  $sub = (($16) - ($17))|0;
	  $mul = $sub<<2;
	  _memmove(($add$ptr|0),($add$ptr10|0),($mul|0))|0;
	  $18 = $v;
	  $19 = HEAP32[$new_pos$addr>>2]|0;
	  $20 = $l$addr;
	  $21 = HEAP32[$20>>2]|0;
	  $arrayidx12 = (($21) + ($19<<2)|0);
	  HEAP32[$arrayidx12>>2] = $18;
	  $22 = $l$addr;
	  $iterators = (($22) + 24|0);
	  $23 = HEAP32[$iterators>>2]|0;
	  $n = $23;
	  while(1) {
	   $24 = $n;
	   $tobool13 = ($24|0)!=(0|0);
	   if (!($tobool13)) {
	    break;
	   }
	   $25 = $n;
	   $26 = HEAP32[$25>>2]|0;
	   $it = $26;
	   $27 = $it;
	   $position = (($27) + 4|0);
	   $28 = HEAP32[$position>>2]|0;
	   $29 = HEAP32[$old_pos$addr>>2]|0;
	   $cmp14 = ($28|0)>=($29|0);
	   if ($cmp14) {
	    $30 = $it;
	    $position15 = (($30) + 4|0);
	    $31 = HEAP32[$position15>>2]|0;
	    $32 = HEAP32[$new_pos$addr>>2]|0;
	    $cmp16 = ($31|0)<=($32|0);
	    if ($cmp16) {
	     $33 = $it;
	     $position18 = (($33) + 4|0);
	     $34 = HEAP32[$position18>>2]|0;
	     $35 = HEAP32[$old_pos$addr>>2]|0;
	     $cmp19 = ($34|0)==($35|0);
	     if ($cmp19) {
	      $36 = HEAP32[$new_pos$addr>>2]|0;
	      $37 = $it;
	      $position21 = (($37) + 4|0);
	      HEAP32[$position21>>2] = $36;
	     } else {
	      $38 = $it;
	      $position22 = (($38) + 4|0);
	      $39 = HEAP32[$position22>>2]|0;
	      $dec = (($39) + -1)|0;
	      HEAP32[$position22>>2] = $dec;
	     }
	    }
	   }
	   $40 = $n;
	   $next = (($40) + 4|0);
	   $41 = HEAP32[$next>>2]|0;
	   $n = $41;
	  }
	 } else {
	  $42 = $l$addr;
	  $43 = HEAP32[$42>>2]|0;
	  $44 = HEAP32[$new_pos$addr>>2]|0;
	  $add$ptr27 = (($43) + ($44<<2)|0);
	  $add$ptr28 = (($add$ptr27) + 4|0);
	  $45 = $l$addr;
	  $46 = HEAP32[$45>>2]|0;
	  $47 = HEAP32[$new_pos$addr>>2]|0;
	  $add$ptr30 = (($46) + ($47<<2)|0);
	  $48 = HEAP32[$old_pos$addr>>2]|0;
	  $49 = HEAP32[$new_pos$addr>>2]|0;
	  $sub31 = (($48) - ($49))|0;
	  $mul32 = $sub31<<2;
	  _memmove(($add$ptr28|0),($add$ptr30|0),($mul32|0))|0;
	  $50 = $v;
	  $51 = HEAP32[$new_pos$addr>>2]|0;
	  $52 = $l$addr;
	  $53 = HEAP32[$52>>2]|0;
	  $arrayidx34 = (($53) + ($51<<2)|0);
	  HEAP32[$arrayidx34>>2] = $50;
	  $54 = $l$addr;
	  $iterators35 = (($54) + 24|0);
	  $55 = HEAP32[$iterators35>>2]|0;
	  $n = $55;
	  while(1) {
	   $56 = $n;
	   $tobool37 = ($56|0)!=(0|0);
	   if (!($tobool37)) {
	    break;
	   }
	   $57 = $n;
	   $58 = HEAP32[$57>>2]|0;
	   $it = $58;
	   $59 = $it;
	   $position40 = (($59) + 4|0);
	   $60 = HEAP32[$position40>>2]|0;
	   $61 = HEAP32[$new_pos$addr>>2]|0;
	   $cmp41 = ($60|0)>=($61|0);
	   if ($cmp41) {
	    $62 = $it;
	    $position43 = (($62) + 4|0);
	    $63 = HEAP32[$position43>>2]|0;
	    $64 = HEAP32[$old_pos$addr>>2]|0;
	    $cmp44 = ($63|0)<=($64|0);
	    if ($cmp44) {
	     $65 = $it;
	     $position46 = (($65) + 4|0);
	     $66 = HEAP32[$position46>>2]|0;
	     $67 = HEAP32[$old_pos$addr>>2]|0;
	     $cmp47 = ($66|0)==($67|0);
	     if ($cmp47) {
	      $68 = HEAP32[$new_pos$addr>>2]|0;
	      $69 = $it;
	      $position49 = (($69) + 4|0);
	      HEAP32[$position49>>2] = $68;
	     } else {
	      $70 = $it;
	      $position51 = (($70) + 4|0);
	      $71 = HEAP32[$position51>>2]|0;
	      $inc = (($71) + 1)|0;
	      HEAP32[$position51>>2] = $inc;
	     }
	    }
	   }
	   $72 = $n;
	   $next55 = (($72) + 4|0);
	   $73 = HEAP32[$next55>>2]|0;
	   $n = $73;
	  }
	 }
	 $retval = 1;
	 $74 = $retval;
	 STACKTOP = sp;return ($74|0);
	}
	function _xmmsv_list_append($listv,$val) {
	 $listv = $listv|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call7 = 0, $listv$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0;
	 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $listv$addr = $listv;
	 $val$addr = $val;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4208;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 451;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4208;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 452;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $2 = $val$addr;
	 $tobool4 = ($2|0)!=(0|0);
	 if ($tobool4) {
	  $3 = $listv$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = $val$addr;
	  $call7 = (__xmmsv_list_append($4,$5)|0);
	  $retval = $call7;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 4136;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 4208;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 4048;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 453;
	  _xmmsc_log(0,2,3984,$vararg_buffer10);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function __xmmsv_list_append($l,$val) {
	 $l = $l|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $l$addr = 0, $size = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $l$addr = $l;
	 $val$addr = $val;
	 $0 = $l$addr;
	 $1 = $l$addr;
	 $size = (($1) + 8|0);
	 $2 = HEAP32[$size>>2]|0;
	 $3 = $val$addr;
	 $call = (__xmmsv_list_insert($0,$2,$3)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_list_clear($listv) {
	 $listv = $listv|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $listv$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $listv$addr = $listv;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4232;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 467;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if ($tobool1) {
	  $2 = $listv$addr;
	  $3 = HEAP32[$2>>2]|0;
	  __xmmsv_list_clear($3);
	  $retval = 1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4232;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 468;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function __xmmsv_list_clear($l) {
	 $l = $l|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
	 var $9 = 0, $allocated = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, $it = 0, $iterators = 0, $l$addr = 0, $n = 0, $next = 0, $position = 0, $size = 0, $size3 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $l$addr = $l;
	 $i = 0;
	 while(1) {
	  $0 = $i;
	  $1 = $l$addr;
	  $size = (($1) + 8|0);
	  $2 = HEAP32[$size>>2]|0;
	  $cmp = ($0|0)<($2|0);
	  if (!($cmp)) {
	   break;
	  }
	  $3 = $i;
	  $4 = $l$addr;
	  $5 = HEAP32[$4>>2]|0;
	  $arrayidx = (($5) + ($3<<2)|0);
	  $6 = HEAP32[$arrayidx>>2]|0;
	  _xmmsv_unref($6);
	  $7 = $i;
	  $inc = (($7) + 1)|0;
	  $i = $inc;
	 }
	 $8 = $l$addr;
	 $9 = HEAP32[$8>>2]|0;
	 _free($9);
	 $10 = $l$addr;
	 HEAP32[$10>>2] = 0;
	 $11 = $l$addr;
	 $size3 = (($11) + 8|0);
	 HEAP32[$size3>>2] = 0;
	 $12 = $l$addr;
	 $allocated = (($12) + 12|0);
	 HEAP32[$allocated>>2] = 0;
	 $13 = $l$addr;
	 $iterators = (($13) + 24|0);
	 $14 = HEAP32[$iterators>>2]|0;
	 $n = $14;
	 while(1) {
	  $15 = $n;
	  $tobool = ($15|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $16 = $n;
	  $17 = HEAP32[$16>>2]|0;
	  $it = $17;
	  $18 = $it;
	  $position = (($18) + 4|0);
	  HEAP32[$position>>2] = 0;
	  $19 = $n;
	  $next = (($19) + 4|0);
	  $20 = HEAP32[$next>>2]|0;
	  $n = $20;
	 }
	 STACKTOP = sp;return;
	}
	function _xmmsv_list_sort($listv,$comparator) {
	 $listv = $listv|0;
	 $comparator = $comparator|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $comparator$addr = 0, $listv$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0;
	 var $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $listv$addr = $listv;
	 $comparator$addr = $comparator;
	 $0 = $comparator$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4256;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4272;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 484;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $listv$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 4024;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4272;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 485;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $2 = $listv$addr;
	 $call = (_xmmsv_is_type($2,6)|0);
	 $tobool4 = ($call|0)!=(0);
	 if ($tobool4) {
	  $3 = $listv$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = $comparator$addr;
	  __xmmsv_list_sort($4,$5);
	  $retval = 1;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 4080;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 4272;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 4048;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 486;
	  _xmmsc_log(0,2,3984,$vararg_buffer10);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function __xmmsv_list_sort($l,$comparator) {
	 $l = $l|0;
	 $comparator = $comparator|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $comparator$addr = 0, $l$addr = 0, $size = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $l$addr = $l;
	 $comparator$addr = $comparator;
	 $0 = $l$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $2 = $l$addr;
	 $size = (($2) + 8|0);
	 $3 = HEAP32[$size>>2]|0;
	 $4 = $comparator$addr;
	 _qsort($1,$3,4,$4);
	 STACKTOP = sp;return;
	}
	function _xmmsv_list_foreach($listv,$func,$user_data) {
	 $listv = $listv|0;
	 $func = $func|0;
	 $user_data = $user_data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call4 = 0, $call8 = 0, $func$addr = 0, $it = 0, $listv$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0;
	 var $tobool9 = 0, $user_data$addr = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp + 32|0;
	 $it = sp + 64|0;
	 $v = sp + 68|0;
	 $listv$addr = $listv;
	 $func$addr = $func;
	 $user_data$addr = $user_data;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4288;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 508;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4288;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 509;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $2 = $listv$addr;
	 $call4 = (_xmmsv_get_list_iter($2,$it)|0);
	 $tobool5 = ($call4|0)!=(0);
	 if (!($tobool5)) {
	  HEAP32[$vararg_buffer10>>2] = 4312;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 4288;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 4048;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 510;
	  _xmmsc_log(0,2,3984,$vararg_buffer10);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 while(1) {
	  $3 = HEAP32[$it>>2]|0;
	  $call8 = (_xmmsv_list_iter_entry($3,$v)|0);
	  $tobool9 = ($call8|0)!=(0);
	  if (!($tobool9)) {
	   break;
	  }
	  $4 = $func$addr;
	  $5 = HEAP32[$v>>2]|0;
	  $6 = $user_data$addr;
	  FUNCTION_TABLE_vii[$4 & 0]($5,$6);
	  $7 = HEAP32[$it>>2]|0;
	  _xmmsv_list_iter_next($7);
	 }
	 $8 = HEAP32[$it>>2]|0;
	 __xmmsv_list_iter_free($8);
	 $retval = 1;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsv_get_list_iter($val,$it) {
	 $val = $val|0;
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $it$addr = 0, $new_it = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $type = 0, $val$addr = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $it$addr = $it;
	 $0 = $val$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $val$addr;
	  $type = (($1) + 24|0);
	  $2 = HEAP32[$type>>2]|0;
	  $cmp = ($2|0)!=(6);
	  if (!($cmp)) {
	   $4 = $val$addr;
	   $5 = HEAP32[$4>>2]|0;
	   $call = (__xmmsv_list_iter_new($5)|0);
	   $new_it = $call;
	   $6 = $new_it;
	   $tobool1 = ($6|0)!=(0|0);
	   if ($tobool1) {
	    $8 = $new_it;
	    $9 = $it$addr;
	    HEAP32[$9>>2] = $8;
	    $retval = 1;
	    $10 = $retval;
	    STACKTOP = sp;return ($10|0);
	   } else {
	    $7 = $it$addr;
	    HEAP32[$7>>2] = 0;
	    $retval = 0;
	    $10 = $retval;
	    STACKTOP = sp;return ($10|0);
	   }
	  }
	 }
	 $3 = $it$addr;
	 HEAP32[$3>>2] = 0;
	 $retval = 0;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function _xmmsv_list_iter_entry($it,$val) {
	 $it = $it|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $call = 0, $it$addr = 0, $position = 0, $retval = 0, $tobool = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $val$addr = $val;
	 $0 = $it$addr;
	 $call = (_xmmsv_list_iter_valid($0)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = $it$addr;
	  $position = (($1) + 4|0);
	  $2 = HEAP32[$position>>2]|0;
	  $3 = $it$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = HEAP32[$4>>2]|0;
	  $arrayidx = (($5) + ($2<<2)|0);
	  $6 = HEAP32[$arrayidx>>2]|0;
	  $7 = $val$addr;
	  HEAP32[$7>>2] = $6;
	  $retval = 1;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_next($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp = 0, $inc = 0, $it$addr = 0, $position = 0, $position2 = 0, $size = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4656;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 783;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $it$addr;
	 $position = (($1) + 4|0);
	 $2 = HEAP32[$position>>2]|0;
	 $3 = $it$addr;
	 $4 = HEAP32[$3>>2]|0;
	 $size = (($4) + 8|0);
	 $5 = HEAP32[$size>>2]|0;
	 $cmp = ($2|0)<($5|0);
	 if (!($cmp)) {
	  STACKTOP = sp;return;
	 }
	 $6 = $it$addr;
	 $position2 = (($6) + 4|0);
	 $7 = HEAP32[$position2>>2]|0;
	 $inc = (($7) + 1)|0;
	 HEAP32[$position2>>2] = $inc;
	 STACKTOP = sp;return;
	}
	function _xmmsv_list_get_size($listv) {
	 $listv = $listv|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $listv$addr = 0, $retval = 0, $size = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $listv$addr = $listv;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4352;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 531;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = -1;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if ($tobool1) {
	  $2 = $listv$addr;
	  $3 = HEAP32[$2>>2]|0;
	  $size = (($3) + 8|0);
	  $4 = HEAP32[$size>>2]|0;
	  $retval = $4;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4352;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 532;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = -1;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_restrict_type($listv,$type) {
	 $listv = $listv|0;
	 $type = $type|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $listv$addr = 0, $restricted = 0, $restricted8 = 0;
	 var $restricttype = 0, $restricttype11 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $listv$addr = $listv;
	 $type$addr = $type;
	 $0 = $listv$addr;
	 $1 = $type$addr;
	 $call = (_xmmsv_list_has_type($0,$1)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4376;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4416;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 541;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $2 = $listv$addr;
	 $3 = HEAP32[$2>>2]|0;
	 $restricted = (($3) + 16|0);
	 $4 = HEAP8[$restricted>>0]|0;
	 $tobool1 = $4&1;
	 if ($tobool1) {
	  $5 = $listv$addr;
	  $6 = HEAP32[$5>>2]|0;
	  $restricttype = (($6) + 20|0);
	  $7 = HEAP32[$restricttype>>2]|0;
	  $8 = $type$addr;
	  $cmp = ($7|0)==($8|0);
	  if (!($cmp)) {
	   HEAP32[$vararg_buffer4>>2] = 4448;
	   $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	   HEAP32[$vararg_ptr7>>2] = 4416;
	   $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	   HEAP32[$vararg_ptr8>>2] = 4048;
	   $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	   HEAP32[$vararg_ptr9>>2] = 543;
	   _xmmsc_log(0,2,3984,$vararg_buffer4);
	   $retval = 0;
	   $14 = $retval;
	   STACKTOP = sp;return ($14|0);
	  }
	 }
	 $9 = $listv$addr;
	 $10 = HEAP32[$9>>2]|0;
	 $restricted8 = (($10) + 16|0);
	 HEAP8[$restricted8>>0] = 1;
	 $11 = $type$addr;
	 $12 = $listv$addr;
	 $13 = HEAP32[$12>>2]|0;
	 $restricttype11 = (($13) + 20|0);
	 HEAP32[$restricttype11>>2] = $11;
	 $retval = 1;
	 $14 = $retval;
	 STACKTOP = sp;return ($14|0);
	}
	function _xmmsv_list_has_type($listv,$type) {
	 $listv = $listv|0;
	 $type = $type|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call13 = 0, $call15 = 0;
	 var $call9 = 0, $cmp = 0, $conv = 0, $it = 0, $listv$addr = 0, $restricted = 0, $restricttype = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool14 = 0, $tobool16 = 0, $tobool4 = 0, $type$addr = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $it = sp + 56|0;
	 $v = sp + 64|0;
	 $listv$addr = $listv;
	 $type$addr = $type;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4552;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 583;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4552;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 584;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $2 = $listv$addr;
	 $3 = HEAP32[$2>>2]|0;
	 $restricted = (($3) + 16|0);
	 $4 = HEAP8[$restricted>>0]|0;
	 $tobool4 = $4&1;
	 if ($tobool4) {
	  $5 = $listv$addr;
	  $6 = HEAP32[$5>>2]|0;
	  $restricttype = (($6) + 20|0);
	  $7 = HEAP32[$restricttype>>2]|0;
	  $8 = $type$addr;
	  $cmp = ($7|0)==($8|0);
	  $conv = $cmp&1;
	  $retval = $conv;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $9 = $listv$addr;
	 $call9 = (_xmmsv_get_list_iter($9,$it)|0);
	 $tobool10 = ($call9|0)!=(0);
	 if (!($tobool10)) {
	  HEAP32[$vararg_buffer10>>2] = 4312;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 4552;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 4048;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 589;
	  _xmmsc_log(0,2,3984,$vararg_buffer10);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 while(1) {
	  $10 = HEAP32[$it>>2]|0;
	  $call13 = (_xmmsv_list_iter_entry($10,$v)|0);
	  $tobool14 = ($call13|0)!=(0);
	  if (!($tobool14)) {
	   label = 14;
	   break;
	  }
	  $11 = HEAP32[$v>>2]|0;
	  $12 = $type$addr;
	  $call15 = (_xmmsv_is_type($11,$12)|0);
	  $tobool16 = ($call15|0)!=(0);
	  if (!($tobool16)) {
	   label = 12;
	   break;
	  }
	  $14 = HEAP32[$it>>2]|0;
	  _xmmsv_list_iter_next($14);
	 }
	 if ((label|0) == 12) {
	  $13 = HEAP32[$it>>2]|0;
	  __xmmsv_list_iter_free($13);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 else if ((label|0) == 14) {
	  $15 = HEAP32[$it>>2]|0;
	  __xmmsv_list_iter_free($15);
	  $retval = 1;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_get_type($listv,$type) {
	 $listv = $listv|0;
	 $type = $type|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $listv$addr = 0, $restricted = 0, $restricttype = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $type$addr = 0;
	 var $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $listv$addr = $listv;
	 $type$addr = $type;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4528;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 560;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4528;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 561;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $2 = $listv$addr;
	 $3 = HEAP32[$2>>2]|0;
	 $restricted = (($3) + 16|0);
	 $4 = HEAP8[$restricted>>0]|0;
	 $tobool4 = $4&1;
	 if ($tobool4) {
	  $5 = $listv$addr;
	  $6 = HEAP32[$5>>2]|0;
	  $restricttype = (($6) + 20|0);
	  $7 = HEAP32[$restricttype>>2]|0;
	  $8 = $type$addr;
	  HEAP32[$8>>2] = $7;
	 } else {
	  $9 = $type$addr;
	  HEAP32[$9>>2] = 0;
	 }
	 $retval = 1;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function _xmmsv_list_index_of($listv,$val) {
	 $listv = $listv|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call4 = 0, $call8 = 0, $cmp = 0, $i = 0, $inc = 0, $it = 0, $listv$addr = 0;
	 var $ret = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, $tobool9 = 0, $v = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer = sp + 16|0;
	 $it = sp + 32|0;
	 $v = sp + 40|0;
	 $listv$addr = $listv;
	 $val$addr = $val;
	 $i = 0;
	 $ret = -1;
	 $0 = $listv$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4024;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4576;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 618;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = -1;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $1 = $listv$addr;
	 $call = (_xmmsv_is_type($1,6)|0);
	 $tobool1 = ($call|0)!=(0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 4080;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4576;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 619;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = -1;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $2 = $listv$addr;
	 $call4 = (_xmmsv_get_list_iter($2,$it)|0);
	 $tobool5 = ($call4|0)!=(0);
	 if (!($tobool5)) {
	  $retval = -1;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 while(1) {
	  $3 = HEAP32[$it>>2]|0;
	  $call8 = (_xmmsv_list_iter_entry($3,$v)|0);
	  $tobool9 = ($call8|0)!=(0);
	  if (!($tobool9)) {
	   break;
	  }
	  $4 = HEAP32[$v>>2]|0;
	  $5 = $val$addr;
	  $cmp = ($4|0)==($5|0);
	  if ($cmp) {
	   label = 10;
	   break;
	  }
	  $7 = HEAP32[$it>>2]|0;
	  _xmmsv_list_iter_next($7);
	  $8 = $i;
	  $inc = (($8) + 1)|0;
	  $i = $inc;
	 }
	 if ((label|0) == 10) {
	  $6 = $i;
	  $ret = $6;
	 }
	 $9 = HEAP32[$it>>2]|0;
	 _xmmsv_list_iter_explicit_destroy($9);
	 $10 = $ret;
	 $retval = $10;
	 $11 = $retval;
	 STACKTOP = sp;return ($11|0);
	}
	function _xmmsv_list_iter_explicit_destroy($it) {
	 $it = $it|0;
	 var $0 = 0, $it$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $0 = $it$addr;
	 __xmmsv_list_iter_free($0);
	 STACKTOP = sp;return;
	}
	function __xmmsv_list_iter_new($l) {
	 $l = $l|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $it = 0, $iterators = 0, $iterators2 = 0, $l$addr = 0, $position = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $l$addr = $l;
	 $call = (_calloc(1,8)|0);
	 $it = $call;
	 $0 = $it;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $l$addr;
	  $2 = $it;
	  HEAP32[$2>>2] = $1;
	  $3 = $it;
	  $position = (($3) + 4|0);
	  HEAP32[$position>>2] = 0;
	  $4 = $l$addr;
	  $iterators = (($4) + 24|0);
	  $5 = HEAP32[$iterators>>2]|0;
	  $6 = $it;
	  $call1 = (_x_list_prepend($5,$6)|0);
	  $7 = $l$addr;
	  $iterators2 = (($7) + 24|0);
	  HEAP32[$iterators2>>2] = $call1;
	  $8 = $it;
	  $retval = $8;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 4984;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4048;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 645;
	  _xmmsc_log(0,2,4952,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_valid($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cmp = 0, $cmp2 = 0, $it$addr = 0, $land$ext = 0, $position = 0, $position1 = 0, $size = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $it$addr;
	  $position = (($1) + 4|0);
	  $2 = HEAP32[$position>>2]|0;
	  $3 = $it$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $size = (($4) + 8|0);
	  $5 = HEAP32[$size>>2]|0;
	  $cmp = ($2|0)<($5|0);
	  if ($cmp) {
	   $6 = $it$addr;
	   $position1 = (($6) + 4|0);
	   $7 = HEAP32[$position1>>2]|0;
	   $cmp2 = ($7|0)>=(0);
	   $8 = $cmp2;
	  } else {
	   $8 = 0;
	  }
	 } else {
	  $8 = 0;
	 }
	 $land$ext = $8&1;
	 STACKTOP = sp;return ($land$ext|0);
	}
	function _xmmsv_list_iter_first($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $it$addr = 0, $position = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $it$addr;
	  $position = (($1) + 4|0);
	  HEAP32[$position>>2] = 0;
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4608;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 753;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsv_list_iter_last($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $it$addr = 0, $position = 0, $position6 = 0, $size = 0, $size3 = 0, $size5 = 0, $sub = 0;
	 var $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4632;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 766;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $it$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $size = (($2) + 8|0);
	 $3 = HEAP32[$size>>2]|0;
	 $cmp = ($3|0)>(0);
	 if ($cmp) {
	  $4 = $it$addr;
	  $5 = HEAP32[$4>>2]|0;
	  $size3 = (($5) + 8|0);
	  $6 = HEAP32[$size3>>2]|0;
	  $sub = (($6) - 1)|0;
	  $7 = $it$addr;
	  $position = (($7) + 4|0);
	  HEAP32[$position>>2] = $sub;
	  STACKTOP = sp;return;
	 } else {
	  $8 = $it$addr;
	  $9 = HEAP32[$8>>2]|0;
	  $size5 = (($9) + 8|0);
	  $10 = HEAP32[$size5>>2]|0;
	  $11 = $it$addr;
	  $position6 = (($11) + 4|0);
	  HEAP32[$position6>>2] = $10;
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsv_list_iter_prev($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $dec = 0, $it$addr = 0, $position = 0, $position2 = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4680;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 798;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $it$addr;
	 $position = (($1) + 4|0);
	 $2 = HEAP32[$position>>2]|0;
	 $cmp = ($2|0)>=(0);
	 if (!($cmp)) {
	  STACKTOP = sp;return;
	 }
	 $3 = $it$addr;
	 $position2 = (($3) + 4|0);
	 $4 = HEAP32[$position2>>2]|0;
	 $dec = (($4) + -1)|0;
	 HEAP32[$position2>>2] = $dec;
	 STACKTOP = sp;return;
	}
	function _xmmsv_list_iter_seek($it,$pos) {
	 $it = $it|0;
	 $pos = $pos|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $it$addr = 0, $pos$addr = 0, $position = 0, $retval = 0, $size = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $pos$addr = sp + 16|0;
	 $it$addr = $it;
	 HEAP32[$pos$addr>>2] = $pos;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4704;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 817;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $it$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $size = (($2) + 8|0);
	 $3 = HEAP32[$size>>2]|0;
	 $call = (__xmmsv_list_position_normalize($pos$addr,$3,1)|0);
	 $tobool1 = ($call|0)!=(0);
	 if ($tobool1) {
	  $4 = HEAP32[$pos$addr>>2]|0;
	  $5 = $it$addr;
	  $position = (($5) + 4|0);
	  HEAP32[$position>>2] = $4;
	  $retval = 1;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_tell($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $it$addr = 0, $position = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $it$addr;
	  $position = (($1) + 4|0);
	  $2 = HEAP32[$position>>2]|0;
	  $retval = $2;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4728;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 836;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = -1;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_get_parent($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $it$addr = 0, $parent_value = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $it$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $parent_value = (($2) + 4|0);
	  $3 = HEAP32[$parent_value>>2]|0;
	  $retval = $3;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4752;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 850;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_set($it,$val) {
	 $it = $it|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $it$addr = 0, $parent_value = 0, $position = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $val$addr = $val;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4784;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 866;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $val$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $it$addr;
	  $3 = HEAP32[$2>>2]|0;
	  $parent_value = (($3) + 4|0);
	  $4 = HEAP32[$parent_value>>2]|0;
	  $5 = $it$addr;
	  $position = (($5) + 4|0);
	  $6 = HEAP32[$position>>2]|0;
	  $7 = $val$addr;
	  $call = (_xmmsv_list_set($4,$6,$7)|0);
	  $retval = $call;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 4136;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4784;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 867;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_insert($it,$val) {
	 $it = $it|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $it$addr = 0, $position = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
	 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $val$addr = $val;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4808;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 883;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $val$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $it$addr;
	  $3 = HEAP32[$2>>2]|0;
	  $4 = $it$addr;
	  $position = (($4) + 4|0);
	  $5 = HEAP32[$position>>2]|0;
	  $6 = $val$addr;
	  $call = (__xmmsv_list_insert($3,$5,$6)|0);
	  $retval = $call;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 4136;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 4808;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 4048;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 884;
	  _xmmsc_log(0,2,3984,$vararg_buffer4);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_remove($it) {
	 $it = $it|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $it$addr = 0, $position = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it$addr = $it;
	 $0 = $it$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $it$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $3 = $it$addr;
	  $position = (($3) + 4|0);
	  $4 = HEAP32[$position>>2]|0;
	  $call = (__xmmsv_list_remove($2,$4)|0);
	  $retval = $call;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 4600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4832;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 899;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_flatten($list,$depth) {
	 $list = $list|0;
	 $depth = $depth|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call1 = 0, $depth$addr = 0, $list$addr = 0, $result = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $list$addr = $list;
	 $depth$addr = $depth;
	 $0 = $list$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4864;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 936;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $call = (_xmmsv_new_list()|0);
	 $result = $call;
	 $1 = $list$addr;
	 $2 = $result;
	 $3 = $depth$addr;
	 $call1 = (__xmmsv_list_flatten($1,$2,$3)|0);
	 $tobool2 = ($call1|0)!=(0);
	 if ($tobool2) {
	  $5 = $result;
	  $retval = $5;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  $4 = $result;
	  _xmmsv_unref($4);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function __xmmsv_list_flatten($list,$result,$depth) {
	 $list = $list|0;
	 $result = $result|0;
	 $depth = $depth|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $call7 = 0, $cmp = 0, $depth$addr = 0, $it = 0;
	 var $list$addr = 0, $result$addr = 0, $ret = 0, $retval = 0, $sub = 0, $tobool = 0, $tobool3 = 0, $tobool4 = 0, $val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $it = sp + 16|0;
	 $val = sp + 24|0;
	 $list$addr = $list;
	 $result$addr = $result;
	 $depth$addr = $depth;
	 $ret = 1;
	 $0 = $list$addr;
	 $call = (_xmmsv_is_type($0,6)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 4888;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 4928;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 4048;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 911;
	  _xmmsc_log(0,2,3984,$vararg_buffer);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $1 = $list$addr;
	 (_xmmsv_get_list_iter($1,$it)|0);
	 while(1) {
	  $2 = HEAP32[$it>>2]|0;
	  $call2 = (_xmmsv_list_iter_entry($2,$val)|0);
	  $tobool3 = ($call2|0)!=(0);
	  if ($tobool3) {
	   $3 = $ret;
	   $tobool4 = ($3|0)!=(0);
	   $13 = $tobool4;
	  } else {
	   $13 = 0;
	  }
	  if (!($13)) {
	   break;
	  }
	  $4 = $depth$addr;
	  $cmp = ($4|0)==(0);
	  if ($cmp) {
	   $5 = $result$addr;
	   $6 = HEAP32[$val>>2]|0;
	   (_xmmsv_list_append($5,$6)|0);
	  } else {
	   $7 = HEAP32[$val>>2]|0;
	   $8 = $result$addr;
	   $9 = $depth$addr;
	   $sub = (($9) - 1)|0;
	   $call7 = (__xmmsv_list_flatten($7,$8,$sub)|0);
	   $ret = $call7;
	  }
	  $10 = HEAP32[$it>>2]|0;
	  _xmmsv_list_iter_next($10);
	 }
	 $11 = $ret;
	 $retval = $11;
	 $12 = $retval;
	 STACKTOP = sp;return ($12|0);
	}
	function _xmmsv_list_get_string($val,$pos,$r) {
	 $val = $val|0;
	 $pos = $pos|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $pos$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $val$addr = $val;
	 $pos$addr = $pos;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $pos$addr;
	 $call = (_xmmsv_list_get($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = HEAP32[$v>>2]|0;
	  $3 = $r$addr;
	  $call1 = (_xmmsv_get_string($2,$3)|0);
	  $retval = $call1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_get_int32($val,$pos,$r) {
	 $val = $val|0;
	 $pos = $pos|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $pos$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $val$addr = $val;
	 $pos$addr = $pos;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $pos$addr;
	 $call = (_xmmsv_list_get($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = HEAP32[$v>>2]|0;
	  $3 = $r$addr;
	  $call1 = (_xmmsv_get_int32($2,$3)|0);
	  $retval = $call1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_get_int64($val,$pos,$r) {
	 $val = $val|0;
	 $pos = $pos|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $pos$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $val$addr = $val;
	 $pos$addr = $pos;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $pos$addr;
	 $call = (_xmmsv_list_get($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = HEAP32[$v>>2]|0;
	  $3 = $r$addr;
	  $call1 = (_xmmsv_get_int64($2,$3)|0);
	  $retval = $call1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_get_float($val,$pos,$r) {
	 $val = $val|0;
	 $pos = $pos|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $pos$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $val$addr = $val;
	 $pos$addr = $pos;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $pos$addr;
	 $call = (_xmmsv_list_get($0,$1,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = HEAP32[$v>>2]|0;
	  $3 = $r$addr;
	  $call1 = (_xmmsv_get_float($2,$3)|0);
	  $retval = $call1;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_get_coll($val,$pos,$r) {
	 $val = $val|0;
	 $pos = $pos|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $pos$addr = 0, $r$addr = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $pos$addr = $pos;
	 $r$addr = $r;
	 $0 = $val$addr;
	 $1 = $pos$addr;
	 $2 = $r$addr;
	 $call = (_xmmsv_list_get($0,$1,$2)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_list_set_string($list,$pos,$elem) {
	 $list = $list|0;
	 $pos = $pos|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $elem$addr = 0, $list$addr = 0, $pos$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $pos$addr = $pos;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_string($0)|0);
	 $v = $call;
	 $1 = $list$addr;
	 $2 = $pos$addr;
	 $3 = $v;
	 $call1 = (_xmmsv_list_set($1,$2,$3)|0);
	 $ret = $call1;
	 $4 = $v;
	 _xmmsv_unref($4);
	 $5 = $ret;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_list_set_int($list,$pos,$0,$1) {
	 $list = $list|0;
	 $pos = $pos|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $elem$addr = 0, $list$addr = 0, $pos$addr = 0;
	 var $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $elem$addr = sp;
	 $list$addr = $list;
	 $pos$addr = $pos;
	 $2 = $elem$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $elem$addr;
	 $7 = $6;
	 $8 = HEAP32[$7>>2]|0;
	 $9 = (($6) + 4)|0;
	 $10 = $9;
	 $11 = HEAP32[$10>>2]|0;
	 $12 = (_xmmsv_new_int($8,$11)|0);
	 $v = $12;
	 $13 = $list$addr;
	 $14 = $pos$addr;
	 $15 = $v;
	 $call1 = (_xmmsv_list_set($13,$14,$15)|0);
	 $ret = $call1;
	 $16 = $v;
	 _xmmsv_unref($16);
	 $17 = $ret;
	 STACKTOP = sp;return ($17|0);
	}
	function _xmmsv_list_set_float($list,$pos,$elem) {
	 $list = $list|0;
	 $pos = $pos|0;
	 $elem = +$elem;
	 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $elem$addr = 0.0, $list$addr = 0, $pos$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $pos$addr = $pos;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_float($0)|0);
	 $v = $call;
	 $1 = $list$addr;
	 $2 = $pos$addr;
	 $3 = $v;
	 $call1 = (_xmmsv_list_set($1,$2,$3)|0);
	 $ret = $call1;
	 $4 = $v;
	 _xmmsv_unref($4);
	 $5 = $ret;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_list_set_coll($list,$pos,$elem) {
	 $list = $list|0;
	 $pos = $pos|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $elem$addr = 0, $list$addr = 0, $pos$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $pos$addr = $pos;
	 $elem$addr = $elem;
	 $0 = $list$addr;
	 $1 = $pos$addr;
	 $2 = $elem$addr;
	 $call = (_xmmsv_list_set($0,$1,$2)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_list_insert_string($list,$pos,$elem) {
	 $list = $list|0;
	 $pos = $pos|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $elem$addr = 0, $list$addr = 0, $pos$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $pos$addr = $pos;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_string($0)|0);
	 $v = $call;
	 $1 = $list$addr;
	 $2 = $pos$addr;
	 $3 = $v;
	 $call1 = (_xmmsv_list_insert($1,$2,$3)|0);
	 $ret = $call1;
	 $4 = $v;
	 _xmmsv_unref($4);
	 $5 = $ret;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_list_insert_int($list,$pos,$0,$1) {
	 $list = $list|0;
	 $pos = $pos|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $elem$addr = 0, $list$addr = 0, $pos$addr = 0;
	 var $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $elem$addr = sp;
	 $list$addr = $list;
	 $pos$addr = $pos;
	 $2 = $elem$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $elem$addr;
	 $7 = $6;
	 $8 = HEAP32[$7>>2]|0;
	 $9 = (($6) + 4)|0;
	 $10 = $9;
	 $11 = HEAP32[$10>>2]|0;
	 $12 = (_xmmsv_new_int($8,$11)|0);
	 $v = $12;
	 $13 = $list$addr;
	 $14 = $pos$addr;
	 $15 = $v;
	 $call1 = (_xmmsv_list_insert($13,$14,$15)|0);
	 $ret = $call1;
	 $16 = $v;
	 _xmmsv_unref($16);
	 $17 = $ret;
	 STACKTOP = sp;return ($17|0);
	}
	function _xmmsv_list_insert_float($list,$pos,$elem) {
	 $list = $list|0;
	 $pos = $pos|0;
	 $elem = +$elem;
	 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $elem$addr = 0.0, $list$addr = 0, $pos$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $pos$addr = $pos;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_float($0)|0);
	 $v = $call;
	 $1 = $list$addr;
	 $2 = $pos$addr;
	 $3 = $v;
	 $call1 = (_xmmsv_list_insert($1,$2,$3)|0);
	 $ret = $call1;
	 $4 = $v;
	 _xmmsv_unref($4);
	 $5 = $ret;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsv_list_insert_coll($list,$pos,$elem) {
	 $list = $list|0;
	 $pos = $pos|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $elem$addr = 0, $list$addr = 0, $pos$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $pos$addr = $pos;
	 $elem$addr = $elem;
	 $0 = $list$addr;
	 $1 = $pos$addr;
	 $2 = $elem$addr;
	 $call = (_xmmsv_list_insert($0,$1,$2)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_list_append_string($list,$elem) {
	 $list = $list|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $elem$addr = 0, $list$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_string($0)|0);
	 $v = $call;
	 $1 = $list$addr;
	 $2 = $v;
	 $call1 = (_xmmsv_list_append($1,$2)|0);
	 $ret = $call1;
	 $3 = $v;
	 _xmmsv_unref($3);
	 $4 = $ret;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsv_list_append_int($list,$0,$1) {
	 $list = $list|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $elem$addr = 0, $list$addr = 0, $ret = 0, $v = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $elem$addr = sp;
	 $list$addr = $list;
	 $2 = $elem$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $elem$addr;
	 $7 = $6;
	 $8 = HEAP32[$7>>2]|0;
	 $9 = (($6) + 4)|0;
	 $10 = $9;
	 $11 = HEAP32[$10>>2]|0;
	 $12 = (_xmmsv_new_int($8,$11)|0);
	 $v = $12;
	 $13 = $list$addr;
	 $14 = $v;
	 $call1 = (_xmmsv_list_append($13,$14)|0);
	 $ret = $call1;
	 $15 = $v;
	 _xmmsv_unref($15);
	 $16 = $ret;
	 STACKTOP = sp;return ($16|0);
	}
	function _xmmsv_list_append_float($list,$elem) {
	 $list = $list|0;
	 $elem = +$elem;
	 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $elem$addr = 0.0, $list$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_float($0)|0);
	 $v = $call;
	 $1 = $list$addr;
	 $2 = $v;
	 $call1 = (_xmmsv_list_append($1,$2)|0);
	 $ret = $call1;
	 $3 = $v;
	 _xmmsv_unref($3);
	 $4 = $ret;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsv_list_append_coll($list,$elem) {
	 $list = $list|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $call = 0, $elem$addr = 0, $list$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $list$addr = $list;
	 $elem$addr = $elem;
	 $0 = $list$addr;
	 $1 = $elem$addr;
	 $call = (_xmmsv_list_append($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_list_iter_entry_string($it,$r) {
	 $it = $it|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $it$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $it$addr = $it;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $call = (_xmmsv_list_iter_entry($0,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = HEAP32[$v>>2]|0;
	  $2 = $r$addr;
	  $call1 = (_xmmsv_get_string($1,$2)|0);
	  $retval = $call1;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_entry_int32($it,$r) {
	 $it = $it|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $it$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $it$addr = $it;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $call = (_xmmsv_list_iter_entry($0,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = HEAP32[$v>>2]|0;
	  $2 = $r$addr;
	  $call1 = (_xmmsv_get_int32($1,$2)|0);
	  $retval = $call1;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_entry_int64($it,$r) {
	 $it = $it|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $it$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $it$addr = $it;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $call = (_xmmsv_list_iter_entry($0,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = HEAP32[$v>>2]|0;
	  $2 = $r$addr;
	  $call1 = (_xmmsv_get_int64($1,$2)|0);
	  $retval = $call1;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_entry_float($it,$r) {
	 $it = $it|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $it$addr = 0, $r$addr = 0, $retval = 0, $tobool = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v = sp;
	 $it$addr = $it;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $call = (_xmmsv_list_iter_entry($0,$v)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $1 = HEAP32[$v>>2]|0;
	  $2 = $r$addr;
	  $call1 = (_xmmsv_get_float($1,$2)|0);
	  $retval = $call1;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsv_list_iter_entry_coll($it,$r) {
	 $it = $it|0;
	 $r = $r|0;
	 var $0 = 0, $1 = 0, $call = 0, $it$addr = 0, $r$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $r$addr = $r;
	 $0 = $it$addr;
	 $1 = $r$addr;
	 $call = (_xmmsv_list_iter_entry($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_list_iter_insert_string($it,$elem) {
	 $it = $it|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $elem$addr = 0, $it$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_string($0)|0);
	 $v = $call;
	 $1 = $it$addr;
	 $2 = $v;
	 $call1 = (_xmmsv_list_iter_insert($1,$2)|0);
	 $ret = $call1;
	 $3 = $v;
	 _xmmsv_unref($3);
	 $4 = $ret;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsv_list_iter_insert_int($it,$0,$1) {
	 $it = $it|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $elem$addr = 0, $it$addr = 0, $ret = 0, $v = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $elem$addr = sp;
	 $it$addr = $it;
	 $2 = $elem$addr;
	 $3 = $2;
	 HEAP32[$3>>2] = $0;
	 $4 = (($2) + 4)|0;
	 $5 = $4;
	 HEAP32[$5>>2] = $1;
	 $6 = $elem$addr;
	 $7 = $6;
	 $8 = HEAP32[$7>>2]|0;
	 $9 = (($6) + 4)|0;
	 $10 = $9;
	 $11 = HEAP32[$10>>2]|0;
	 $12 = (_xmmsv_new_int($8,$11)|0);
	 $v = $12;
	 $13 = $it$addr;
	 $14 = $v;
	 $call1 = (_xmmsv_list_iter_insert($13,$14)|0);
	 $ret = $call1;
	 $15 = $v;
	 _xmmsv_unref($15);
	 $16 = $ret;
	 STACKTOP = sp;return ($16|0);
	}
	function _xmmsv_list_iter_insert_float($it,$elem) {
	 $it = $it|0;
	 $elem = +$elem;
	 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $elem$addr = 0.0, $it$addr = 0, $ret = 0, $v = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $elem$addr = $elem;
	 $0 = $elem$addr;
	 $call = (_xmmsv_new_float($0)|0);
	 $v = $call;
	 $1 = $it$addr;
	 $2 = $v;
	 $call1 = (_xmmsv_list_iter_insert($1,$2)|0);
	 $ret = $call1;
	 $3 = $v;
	 _xmmsv_unref($3);
	 $4 = $ret;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsv_list_iter_insert_coll($it,$elem) {
	 $it = $it|0;
	 $elem = $elem|0;
	 var $0 = 0, $1 = 0, $call = 0, $elem$addr = 0, $it$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $it$addr = $it;
	 $elem$addr = $elem;
	 $0 = $it$addr;
	 $1 = $elem$addr;
	 $call = (_xmmsv_list_iter_insert($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function __xmmsv_list_resize($l,$newsize) {
	 $l = $l|0;
	 $newsize = $newsize|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $allocated = 0, $call = 0, $cmp = 0, $cmp1 = 0, $l$addr = 0, $mul = 0, $newmem = 0, $newsize$addr = 0, $retval = 0, $vararg_buffer = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $l$addr = $l;
	 $newsize$addr = $newsize;
	 $0 = $l$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $2 = $newsize$addr;
	 $mul = $2<<2;
	 $call = (_realloc($1,$mul)|0);
	 $newmem = $call;
	 $3 = $newsize$addr;
	 $cmp = ($3|0)!=(0);
	 if ($cmp) {
	  $4 = $newmem;
	  $cmp1 = ($4|0)==(0|0);
	  if ($cmp1) {
	   HEAP32[$vararg_buffer>>2] = 5040;
	   $vararg_ptr1 = (($vararg_buffer) + 4|0);
	   HEAP32[$vararg_ptr1>>2] = 4048;
	   $vararg_ptr2 = (($vararg_buffer) + 8|0);
	   HEAP32[$vararg_ptr2>>2] = 107;
	   _xmmsc_log(0,2,4952,$vararg_buffer);
	   $retval = 0;
	   $9 = $retval;
	   STACKTOP = sp;return ($9|0);
	  }
	 }
	 $5 = $newmem;
	 $6 = $l$addr;
	 HEAP32[$6>>2] = $5;
	 $7 = $newsize$addr;
	 $8 = $l$addr;
	 $allocated = (($8) + 12|0);
	 HEAP32[$allocated>>2] = $7;
	 $retval = 1;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsv_propdict_to_dict($propdict,$src_prefs) {
	 $propdict = $propdict|0;
	 $src_prefs = $src_prefs|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
	 var $9 = 0, $best_index = 0, $best_value = 0, $call = 0, $call2 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp11 = 0, $cond = 0, $dict = 0, $key = 0, $key_it = 0, $local_prefs = 0, $match_index = 0, $propdict$addr = 0, $source = 0, $source_dict = 0, $source_it = 0;
	 var $src_prefs$addr = 0, $tobool = 0, $tobool12 = 0, $tobool3 = 0, $tobool7 = 0, $value = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $source_dict = sp + 8|0;
	 $value = sp + 32|0;
	 $key_it = sp + 48|0;
	 $source_it = sp + 16|0;
	 $key = sp;
	 $source = sp + 24|0;
	 $propdict$addr = $propdict;
	 $src_prefs$addr = $src_prefs;
	 $call = (_xmmsv_new_dict()|0);
	 $dict = $call;
	 $0 = $src_prefs$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $src_prefs$addr;
	  $cond = $1;
	 } else {
	  $cond = 3592;
	 }
	 $local_prefs = $cond;
	 $2 = $propdict$addr;
	 (_xmmsv_get_dict_iter($2,$key_it)|0);
	 while(1) {
	  $3 = HEAP32[$key_it>>2]|0;
	  $call2 = (_xmmsv_dict_iter_pair($3,$key,$source_dict)|0);
	  $tobool3 = ($call2|0)!=(0);
	  if (!($tobool3)) {
	   break;
	  }
	  $best_value = 0;
	  $best_index = -1;
	  $4 = HEAP32[$source_dict>>2]|0;
	  (_xmmsv_get_dict_iter($4,$source_it)|0);
	  while(1) {
	   $5 = HEAP32[$source_it>>2]|0;
	   $call6 = (_xmmsv_dict_iter_pair($5,$source,$value)|0);
	   $tobool7 = ($call6|0)!=(0);
	   if (!($tobool7)) {
	    break;
	   }
	   $6 = HEAP32[$source>>2]|0;
	   $7 = $local_prefs;
	   $call9 = (_find_match_index($6,$7)|0);
	   $match_index = $call9;
	   $8 = $match_index;
	   $cmp = ($8|0)>=(0);
	   do {
	    if ($cmp) {
	     $9 = $best_index;
	     $cmp10 = ($9|0)<(0);
	     if (!($cmp10)) {
	      $10 = $match_index;
	      $11 = $best_index;
	      $cmp11 = ($10|0)<($11|0);
	      if (!($cmp11)) {
	       break;
	      }
	     }
	     $12 = HEAP32[$value>>2]|0;
	     $best_value = $12;
	     $13 = $match_index;
	     $best_index = $13;
	    }
	   } while(0);
	   $14 = HEAP32[$source_it>>2]|0;
	   _xmmsv_dict_iter_next($14);
	  }
	  $15 = $best_value;
	  $tobool12 = ($15|0)!=(0|0);
	  if ($tobool12) {
	   $16 = $dict;
	   $17 = HEAP32[$key>>2]|0;
	   $18 = $best_value;
	   (_xmmsv_dict_set($16,$17,$18)|0);
	  }
	  $19 = HEAP32[$key_it>>2]|0;
	  _xmmsv_dict_iter_next($19);
	 }
	 $20 = $dict;
	 STACKTOP = sp;return ($20|0);
	}
	function _find_match_index($source,$src_prefs) {
	 $source = $source|0;
	 $src_prefs = $src_prefs|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0, $i = 0, $inc = 0, $match = 0, $source$addr = 0, $src_prefs$addr = 0, $tobool = 0, $tobool2 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $source$addr = $source;
	 $src_prefs$addr = $src_prefs;
	 $match = -1;
	 $i = 0;
	 while(1) {
	  $0 = $i;
	  $1 = $src_prefs$addr;
	  $arrayidx = (($1) + ($0<<2)|0);
	  $2 = HEAP32[$arrayidx>>2]|0;
	  $tobool = ($2|0)!=(0|0);
	  if (!($tobool)) {
	   label = 7;
	   break;
	  }
	  $3 = $source$addr;
	  $4 = $i;
	  $5 = $src_prefs$addr;
	  $arrayidx1 = (($5) + ($4<<2)|0);
	  $6 = HEAP32[$arrayidx1>>2]|0;
	  $call = (_source_match_pattern($3,$6)|0);
	  $tobool2 = ($call|0)!=(0);
	  if ($tobool2) {
	   break;
	  }
	  $8 = $i;
	  $inc = (($8) + 1)|0;
	  $i = $inc;
	 }
	 if ((label|0) == 7) {
	  $9 = $match;
	  STACKTOP = sp;return ($9|0);
	 }
	 $7 = $i;
	 $match = $7;
	 $9 = $match;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsv_encode_url_full($url,$args) {
	 $url = $url|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
	 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $add = 0, $add8 = 0, $add91 = 0, $add99 = 0, $and = 0, $and70 = 0, $arg = 0, $args$addr = 0, $arrayidx = 0;
	 var $arrayidx105 = 0, $arrayidx14 = 0, $arrayidx55 = 0, $arrayidx61 = 0, $arrayidx64 = 0, $arrayidx66 = 0, $arrayidx68 = 0, $arrayidx71 = 0, $arrayidx73 = 0, $arrayidx88 = 0, $arrayidx90 = 0, $arrayidx96 = 0, $arrayidx98 = 0, $call = 0, $call7 = 0, $call81 = 0, $call84 = 0, $call9 = 0, $call92 = 0, $call95 = 0;
	 var $chr = 0, $cmp = 0, $cmp17 = 0, $cmp20 = 0, $cmp24 = 0, $cmp28 = 0, $cmp32 = 0, $cmp36 = 0, $cmp40 = 0, $cmp44 = 0, $cmp48 = 0, $cmp52 = 0, $cmp57 = 0, $cmp85 = 0, $cond = 0, $conv = 0, $conv16 = 0, $conv19 = 0, $conv23 = 0, $conv27 = 0;
	 var $conv31 = 0, $conv35 = 0, $conv39 = 0, $conv43 = 0, $conv47 = 0, $conv51 = 0, $conv56 = 0, $conv65 = 0, $conv69 = 0, $conv87 = 0, $extra = 0, $i = 0, $inc = 0, $inc102 = 0, $inc60 = 0, $inc63 = 0, $inc67 = 0, $inc72 = 0, $inc76 = 0, $inc89 = 0;
	 var $inc97 = 0, $it = 0, $j = 0, $key = 0, $l = 0, $mul = 0, $res = 0, $retval = 0, $shr = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool3 = 0, $tobool77 = 0, $tobool82 = 0, $tobool93 = 0, $url$addr = 0, $val = 0, $vararg_buffer = 0;
	 var $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $extra = sp + 48|0;
	 $it = sp + 24|0;
	 $arg = sp + 8|0;
	 $key = sp + 16|0;
	 $val = sp + 52|0;
	 $url$addr = $url;
	 $args$addr = $args;
	 $i = 0;
	 $j = 0;
	 HEAP32[$extra>>2] = 0;
	 $0 = $url$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 5232;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5256;
	  _xmmsc_log(0,2,5208,$vararg_buffer);
	  $retval = 0;
	  $70 = $retval;
	  STACKTOP = sp;return ($70|0);
	 }
	 $1 = $args$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 do {
	  if ($tobool1) {
	   $2 = $args$addr;
	   $call = (_xmmsv_dict_foreach($2,4,$extra)|0);
	   $tobool3 = ($call|0)!=(0);
	   if ($tobool3) {
	    break;
	   }
	   $retval = 0;
	   $70 = $retval;
	   STACKTOP = sp;return ($70|0);
	  }
	 } while(0);
	 $3 = $url$addr;
	 $call7 = (_strlen(($3|0))|0);
	 $mul = ($call7*3)|0;
	 $add = (($mul) + 1)|0;
	 $4 = HEAP32[$extra>>2]|0;
	 $add8 = (($add) + ($4))|0;
	 $call9 = (_malloc($add8)|0);
	 $res = $call9;
	 $5 = $res;
	 $tobool10 = ($5|0)!=(0|0);
	 if (!($tobool10)) {
	  $retval = 0;
	  $70 = $retval;
	  STACKTOP = sp;return ($70|0);
	 }
	 $i = 0;
	 while(1) {
	  $6 = $i;
	  $7 = $url$addr;
	  $arrayidx = (($7) + ($6)|0);
	  $8 = HEAP8[$arrayidx>>0]|0;
	  $tobool13 = ($8<<24>>24)!=(0);
	  if (!($tobool13)) {
	   break;
	  }
	  $9 = $i;
	  $10 = $url$addr;
	  $arrayidx14 = (($10) + ($9)|0);
	  $11 = HEAP8[$arrayidx14>>0]|0;
	  $chr = $11;
	  $12 = $chr;
	  $conv = $12&255;
	  $cmp = ($conv|0)>=(97);
	  if ($cmp) {
	   $13 = $chr;
	   $conv16 = $13&255;
	   $cmp17 = ($conv16|0)<=(122);
	   if ($cmp17) {
	    label = 22;
	   } else {
	    label = 13;
	   }
	  } else {
	   label = 13;
	  }
	  do {
	   if ((label|0) == 13) {
	    label = 0;
	    $14 = $chr;
	    $conv19 = $14&255;
	    $cmp20 = ($conv19|0)>=(65);
	    if ($cmp20) {
	     $15 = $chr;
	     $conv23 = $15&255;
	     $cmp24 = ($conv23|0)<=(90);
	     if ($cmp24) {
	      label = 22;
	      break;
	     }
	    }
	    $16 = $chr;
	    $conv27 = $16&255;
	    $cmp28 = ($conv27|0)>=(48);
	    if ($cmp28) {
	     $17 = $chr;
	     $conv31 = $17&255;
	     $cmp32 = ($conv31|0)<=(57);
	     if ($cmp32) {
	      label = 22;
	      break;
	     }
	    }
	    $18 = $chr;
	    $conv35 = $18&255;
	    $cmp36 = ($conv35|0)==(58);
	    if ($cmp36) {
	     label = 22;
	    } else {
	     $19 = $chr;
	     $conv39 = $19&255;
	     $cmp40 = ($conv39|0)==(47);
	     if ($cmp40) {
	      label = 22;
	     } else {
	      $20 = $chr;
	      $conv43 = $20&255;
	      $cmp44 = ($conv43|0)==(45);
	      if ($cmp44) {
	       label = 22;
	      } else {
	       $21 = $chr;
	       $conv47 = $21&255;
	       $cmp48 = ($conv47|0)==(46);
	       if ($cmp48) {
	        label = 22;
	       } else {
	        $22 = $chr;
	        $conv51 = $22&255;
	        $cmp52 = ($conv51|0)==(95);
	        if ($cmp52) {
	         label = 22;
	        } else {
	         $26 = $chr;
	         $conv56 = $26&255;
	         $cmp57 = ($conv56|0)==(32);
	         if ($cmp57) {
	          $27 = $j;
	          $inc60 = (($27) + 1)|0;
	          $j = $inc60;
	          $28 = $res;
	          $arrayidx61 = (($28) + ($27)|0);
	          HEAP8[$arrayidx61>>0] = 43;
	         } else {
	          $29 = $j;
	          $inc63 = (($29) + 1)|0;
	          $j = $inc63;
	          $30 = $res;
	          $arrayidx64 = (($30) + ($29)|0);
	          HEAP8[$arrayidx64>>0] = 37;
	          $31 = $chr;
	          $conv65 = $31&255;
	          $and = $conv65 & 240;
	          $shr = $and >> 4;
	          $arrayidx66 = (5192 + ($shr)|0);
	          $32 = HEAP8[$arrayidx66>>0]|0;
	          $33 = $j;
	          $inc67 = (($33) + 1)|0;
	          $j = $inc67;
	          $34 = $res;
	          $arrayidx68 = (($34) + ($33)|0);
	          HEAP8[$arrayidx68>>0] = $32;
	          $35 = $chr;
	          $conv69 = $35&255;
	          $and70 = $conv69 & 15;
	          $arrayidx71 = (5192 + ($and70)|0);
	          $36 = HEAP8[$arrayidx71>>0]|0;
	          $37 = $j;
	          $inc72 = (($37) + 1)|0;
	          $j = $inc72;
	          $38 = $res;
	          $arrayidx73 = (($38) + ($37)|0);
	          HEAP8[$arrayidx73>>0] = $36;
	         }
	        }
	       }
	      }
	     }
	    }
	   }
	  } while(0);
	  if ((label|0) == 22) {
	   label = 0;
	   $23 = $chr;
	   $24 = $j;
	   $inc = (($24) + 1)|0;
	   $j = $inc;
	   $25 = $res;
	   $arrayidx55 = (($25) + ($24)|0);
	   HEAP8[$arrayidx55>>0] = $23;
	  }
	  $39 = $i;
	  $inc76 = (($39) + 1)|0;
	  $i = $inc76;
	 }
	 $40 = $args$addr;
	 $tobool77 = ($40|0)!=(0|0);
	 if ($tobool77) {
	  $41 = $args$addr;
	  (_xmmsv_get_dict_iter($41,$it)|0);
	  $i = 0;
	  while(1) {
	   $42 = HEAP32[$it>>2]|0;
	   $call81 = (_xmmsv_dict_iter_pair($42,$key,$val)|0);
	   $tobool82 = ($call81|0)!=(0);
	   if (!($tobool82)) {
	    break;
	   }
	   $43 = HEAP32[$key>>2]|0;
	   $call84 = (_strlen(($43|0))|0);
	   $l = $call84;
	   $44 = $i;
	   $cmp85 = ($44|0)==(0);
	   $cond = $cmp85 ? 63 : 38;
	   $conv87 = $cond&255;
	   $45 = $j;
	   $46 = $res;
	   $arrayidx88 = (($46) + ($45)|0);
	   HEAP8[$arrayidx88>>0] = $conv87;
	   $47 = $j;
	   $inc89 = (($47) + 1)|0;
	   $j = $inc89;
	   $48 = $j;
	   $49 = $res;
	   $arrayidx90 = (($49) + ($48)|0);
	   $50 = HEAP32[$key>>2]|0;
	   $51 = $l;
	   _memcpy(($arrayidx90|0),($50|0),($51|0))|0;
	   $52 = $l;
	   $53 = $j;
	   $add91 = (($53) + ($52))|0;
	   $j = $add91;
	   $54 = HEAP32[$val>>2]|0;
	   $call92 = (_xmmsv_get_string($54,$arg)|0);
	   $tobool93 = ($call92|0)!=(0);
	   if ($tobool93) {
	    $55 = HEAP32[$arg>>2]|0;
	    $call95 = (_strlen(($55|0))|0);
	    $l = $call95;
	    $56 = $j;
	    $57 = $res;
	    $arrayidx96 = (($57) + ($56)|0);
	    HEAP8[$arrayidx96>>0] = 61;
	    $58 = $j;
	    $inc97 = (($58) + 1)|0;
	    $j = $inc97;
	    $59 = $j;
	    $60 = $res;
	    $arrayidx98 = (($60) + ($59)|0);
	    $61 = HEAP32[$arg>>2]|0;
	    $62 = $l;
	    _memcpy(($arrayidx98|0),($61|0),($62|0))|0;
	    $63 = $l;
	    $64 = $j;
	    $add99 = (($64) + ($63))|0;
	    $j = $add99;
	   }
	   $65 = HEAP32[$it>>2]|0;
	   _xmmsv_dict_iter_next($65);
	   $66 = $i;
	   $inc102 = (($66) + 1)|0;
	   $i = $inc102;
	  }
	 }
	 $67 = $j;
	 $68 = $res;
	 $arrayidx105 = (($68) + ($67)|0);
	 HEAP8[$arrayidx105>>0] = 0;
	 $69 = $res;
	 $retval = $69;
	 $70 = $retval;
	 STACKTOP = sp;return ($70|0);
	}
	function __sum_len_string_dict($key,$val,$userdata) {
	 $key = $key|0;
	 $val = $val|0;
	 $userdata = $userdata|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add2 = 0, $add8 = 0, $add9 = 0, $arg = 0, $call = 0, $call1 = 0, $call3 = 0, $call6 = 0;
	 var $call7 = 0, $extra = 0, $key$addr = 0, $tobool = 0, $tobool4 = 0, $userdata$addr = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $arg = sp + 12|0;
	 $key$addr = $key;
	 $val$addr = $val;
	 $userdata$addr = $userdata;
	 $0 = $userdata$addr;
	 $extra = $0;
	 $1 = $val$addr;
	 $call = (_xmmsv_is_type($1,0)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $2 = $key$addr;
	  $call1 = (_strlen(($2|0))|0);
	  $add = (($call1) + 1)|0;
	  $3 = $extra;
	  $4 = HEAP32[$3>>2]|0;
	  $add2 = (($4) + ($add))|0;
	  HEAP32[$3>>2] = $add2;
	  STACKTOP = sp;return;
	 }
	 $5 = $val$addr;
	 $call3 = (_xmmsv_get_string($5,$arg)|0);
	 $tobool4 = ($call3|0)!=(0);
	 if ($tobool4) {
	  $6 = $key$addr;
	  $call6 = (_strlen(($6|0))|0);
	  $7 = HEAP32[$arg>>2]|0;
	  $call7 = (_strlen(($7|0))|0);
	  $add8 = (($call6) + ($call7))|0;
	  $add9 = (($add8) + 2)|0;
	  $8 = $extra;
	  $9 = HEAP32[$8>>2]|0;
	  $add10 = (($9) + ($add9))|0;
	  HEAP32[$8>>2] = $add10;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 5488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5512;
	  _xmmsc_log(0,2,5208,$vararg_buffer);
	 }
	 STACKTOP = sp;return;
	}
	function _xmmsv_encode_url($url) {
	 $url = $url|0;
	 var $0 = 0, $call = 0, $url$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $url$addr = $url;
	 $0 = $url$addr;
	 $call = (_xmmsv_encode_url_full($0,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_decode_url($inv) {
	 $inv = $inv|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx15 = 0, $arrayidx22 = 0, $arrayidx23 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx31 = 0, $arrayidx39 = 0, $arrayidx7 = 0, $call = 0, $call1 = 0;
	 var $call2 = 0, $call29 = 0, $call40 = 0, $chr = 0, $cmp = 0, $cmp11 = 0, $cmp32 = 0, $conv = 0, $conv10 = 0, $conv30 = 0, $i = 0, $inc = 0, $inc14 = 0, $inc21 = 0, $inc38 = 0, $ins = 0, $inv$addr = 0, $j = 0, $ret = 0, $retval = 0;
	 var $t = 0, $tobool = 0, $tobool18 = 0, $tobool25 = 0, $tobool3 = 0, $tobool6 = 0, $ts = 0, $url = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ins = sp + 12|0;
	 $ts = sp + 45|0;
	 $t = sp + 40|0;
	 $inv$addr = $inv;
	 $i = 0;
	 $j = 0;
	 $0 = $inv$addr;
	 $call = (_xmmsv_get_string($0,$ins)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $retval = 0;
	  $28 = $retval;
	  STACKTOP = sp;return ($28|0);
	 }
	 $1 = HEAP32[$ins>>2]|0;
	 $call1 = (_strlen(($1|0))|0);
	 $call2 = (_malloc($call1)|0);
	 $url = $call2;
	 $2 = $url;
	 $tobool3 = ($2|0)!=(0|0);
	 if (!($tobool3)) {
	  HEAP32[$vararg_buffer>>2] = 5304;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5328;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 263;
	  _xmmsc_log(0,2,5272,$vararg_buffer);
	  $retval = 0;
	  $28 = $retval;
	  STACKTOP = sp;return ($28|0);
	 }
	 while(1) {
	  $3 = $i;
	  $4 = HEAP32[$ins>>2]|0;
	  $arrayidx = (($4) + ($3)|0);
	  $5 = HEAP8[$arrayidx>>0]|0;
	  $tobool6 = ($5<<24>>24)!=(0);
	  if (!($tobool6)) {
	   label = 19;
	   break;
	  }
	  $6 = $i;
	  $inc = (($6) + 1)|0;
	  $i = $inc;
	  $7 = HEAP32[$ins>>2]|0;
	  $arrayidx7 = (($7) + ($6)|0);
	  $8 = HEAP8[$arrayidx7>>0]|0;
	  $chr = $8;
	  $9 = $chr;
	  $conv = $9&255;
	  $cmp = ($conv|0)==(43);
	  if ($cmp) {
	   $chr = 32;
	  } else {
	   $10 = $chr;
	   $conv10 = $10&255;
	   $cmp11 = ($conv10|0)==(37);
	   if ($cmp11) {
	    $11 = $i;
	    $inc14 = (($11) + 1)|0;
	    $i = $inc14;
	    $12 = HEAP32[$ins>>2]|0;
	    $arrayidx15 = (($12) + ($11)|0);
	    $13 = HEAP8[$arrayidx15>>0]|0;
	    HEAP8[$ts>>0] = $13;
	    $14 = HEAP8[$ts>>0]|0;
	    $tobool18 = ($14<<24>>24)!=(0);
	    if (!($tobool18)) {
	     label = 11;
	     break;
	    }
	    $15 = $i;
	    $inc21 = (($15) + 1)|0;
	    $i = $inc21;
	    $16 = HEAP32[$ins>>2]|0;
	    $arrayidx22 = (($16) + ($15)|0);
	    $17 = HEAP8[$arrayidx22>>0]|0;
	    $arrayidx23 = (($ts) + 1|0);
	    HEAP8[$arrayidx23>>0] = $17;
	    $arrayidx24 = (($ts) + 1|0);
	    $18 = HEAP8[$arrayidx24>>0]|0;
	    $tobool25 = ($18<<24>>24)!=(0);
	    if (!($tobool25)) {
	     label = 13;
	     break;
	    }
	    $arrayidx28 = (($ts) + 2|0);
	    HEAP8[$arrayidx28>>0] = 0;
	    $call29 = (_strtoul($ts,$t,16)|0);
	    $conv30 = $call29&255;
	    $chr = $conv30;
	    $19 = HEAP32[$t>>2]|0;
	    $arrayidx31 = (($ts) + 2|0);
	    $cmp32 = ($19|0)!=($arrayidx31|0);
	    if ($cmp32) {
	     label = 15;
	     break;
	    }
	   }
	  }
	  $20 = $chr;
	  $21 = $j;
	  $inc38 = (($21) + 1)|0;
	  $j = $inc38;
	  $22 = $url;
	  $arrayidx39 = (($22) + ($21)|0);
	  HEAP8[$arrayidx39>>0] = $20;
	 }
	 if ((label|0) == 11) {
	 }
	 else if ((label|0) == 13) {
	 }
	 else if ((label|0) == 15) {
	 }
	 else if ((label|0) == 19) {
	  $23 = $url;
	  $24 = $j;
	  $call40 = (_xmmsv_new_bin($23,$24)|0);
	  $ret = $call40;
	  $25 = $url;
	  _free($25);
	  $26 = $ret;
	  $retval = $26;
	  $28 = $retval;
	  STACKTOP = sp;return ($28|0);
	 }
	 $27 = $url;
	 _free($27);
	 $retval = 0;
	 $28 = $retval;
	 STACKTOP = sp;return ($28|0);
	}
	function _xmmsv_dict_format($target,$len,$fmt,$val) {
	 $target = $target|0;
	 $len = $len|0;
	 $fmt = $fmt|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
	 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
	 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0;
	 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
	 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
	 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
	 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
	 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
	 var $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add$ptr129 = 0, $add$ptr30 = 0, $add23 = 0, $add29 = 0, $call = 0, $call11 = 0, $call118 = 0, $call125 = 0, $call130 = 0, $call18 = 0, $call22 = 0, $call24 = 0, $call33 = 0, $call36 = 0, $call4 = 0, $call44 = 0;
	 var $call52 = 0, $call58 = 0, $call62 = 0, $call7 = 0, $call71 = 0, $call81 = 0, $call87 = 0, $call92 = 0, $cmp = 0, $cmp105 = 0, $cmp14 = 0, $cmp34 = 0, $cmp59 = 0, $cmp93 = 0, $cmp97 = 0, $cond = 0, $conv = 0.0, $duration = 0, $duration61 = 0, $end = 0;
	 var $f = 0, $fmt$addr = 0, $i = 0, $it = 0, $key = 0, $keylen = 0, $len$addr = 0, $minutes = 0, $next_key = 0, $pos = 0, $result = 0, $retval = 0, $seconds = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast15 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast16 = 0, $sub$ptr$sub = 0, $sub$ptr$sub17 = 0;
	 var $sub119 = 0, $sub12 = 0, $sub120 = 0, $sub13 = 0, $sub19 = 0, $sub20 = 0, $sub45 = 0, $sub46 = 0, $sub53 = 0, $sub54 = 0, $sub72 = 0, $sub73 = 0, $sub8 = 0, $sub82 = 0, $sub83 = 0, $target$addr = 0, $tmp = 0, $tobool = 0, $tobool1 = 0, $tobool116 = 0;
	 var $tobool126 = 0, $tobool25 = 0, $tobool37 = 0, $tobool5 = 0, $tobool63 = 0, $tobool88 = 0, $type = 0, $v = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 24|0;
	 $vararg_buffer7 = sp + 40|0;
	 $vararg_buffer4 = sp + 32|0;
	 $vararg_buffer1 = sp + 56|0;
	 $vararg_buffer = sp + 48|0;
	 $it = sp + 80|0;
	 $v = sp + 84|0;
	 $duration = sp + 16|0;
	 $seconds = sp + 124|0;
	 $duration61 = sp;
	 $minutes = sp + 145|0;
	 $result = sp + 88|0;
	 $tmp = sp + 166|0;
	 $i = sp + 8|0;
	 $f = sp + 120|0;
	 $target$addr = $target;
	 $len$addr = $len;
	 $fmt$addr = $fmt;
	 $val$addr = $val;
	 $0 = $target$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 0;
	  $161 = $retval;
	  STACKTOP = sp;return ($161|0);
	 }
	 $1 = $fmt$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  $retval = 0;
	  $161 = $retval;
	  STACKTOP = sp;return ($161|0);
	 }
	 $2 = $target$addr;
	 $3 = $len$addr;
	 _memset(($2|0),0,($3|0))|0;
	 $4 = $fmt$addr;
	 $pos = $4;
	 while(1) {
	  $5 = $target$addr;
	  $call = (_strlen(($5|0))|0);
	  $add = (($call) + 1)|0;
	  $6 = $len$addr;
	  $cmp = ($add>>>0)<($6>>>0);
	  if (!($cmp)) {
	   break;
	  }
	  $7 = $pos;
	  $call4 = (_strstr($7,5360)|0);
	  $next_key = $call4;
	  $8 = $next_key;
	  $tobool5 = ($8|0)!=(0|0);
	  if (!($tobool5)) {
	   label = 8;
	   break;
	  }
	  $13 = $target$addr;
	  $14 = $pos;
	  $15 = $next_key;
	  $16 = $pos;
	  $sub$ptr$lhs$cast = $15;
	  $sub$ptr$rhs$cast = $16;
	  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	  $17 = $len$addr;
	  $18 = $target$addr;
	  $call11 = (_strlen(($18|0))|0);
	  $sub12 = (($17) - ($call11))|0;
	  $sub13 = (($sub12) - 1)|0;
	  $cmp14 = ($sub$ptr$sub>>>0)<($sub13>>>0);
	  if ($cmp14) {
	   $19 = $next_key;
	   $20 = $pos;
	   $sub$ptr$lhs$cast15 = $19;
	   $sub$ptr$rhs$cast16 = $20;
	   $sub$ptr$sub17 = (($sub$ptr$lhs$cast15) - ($sub$ptr$rhs$cast16))|0;
	   $cond = $sub$ptr$sub17;
	  } else {
	   $21 = $len$addr;
	   $22 = $target$addr;
	   $call18 = (_strlen(($22|0))|0);
	   $sub19 = (($21) - ($call18))|0;
	   $sub20 = (($sub19) - 1)|0;
	   $cond = $sub20;
	  }
	  (_strncat($13,$14,$cond)|0);
	  $23 = $next_key;
	  $add$ptr = (($23) + 2|0);
	  $call22 = (_strcspn($add$ptr,5368)|0);
	  $keylen = $call22;
	  $24 = $keylen;
	  $add23 = (($24) + 1)|0;
	  $call24 = (_malloc($add23)|0);
	  $key = $call24;
	  $25 = $key;
	  $tobool25 = ($25|0)!=(0|0);
	  if (!($tobool25)) {
	   label = 13;
	   break;
	  }
	  $28 = $key;
	  $29 = $keylen;
	  $add29 = (($29) + 1)|0;
	  _memset(($28|0),0,($add29|0))|0;
	  $30 = $key;
	  $31 = $next_key;
	  $add$ptr30 = (($31) + 2|0);
	  $32 = $keylen;
	  (_strncpy(($30|0),($add$ptr30|0),($32|0))|0);
	  $33 = $val$addr;
	  (_xmmsv_get_dict_iter($33,$it)|0);
	  $34 = $key;
	  $call33 = (_strcmp($34,5424)|0);
	  $cmp34 = ($call33|0)==(0);
	  if ($cmp34) {
	   $35 = HEAP32[$it>>2]|0;
	   $call36 = (_xmmsv_dict_iter_find($35,5432)|0);
	   $tobool37 = ($call36|0)!=(0);
	   if ($tobool37) {
	    $36 = HEAP32[$it>>2]|0;
	    (_xmmsv_dict_iter_pair($36,0,$v)|0);
	    $37 = HEAP32[$v>>2]|0;
	    (_xmmsv_get_int32($37,$duration)|0);
	   } else {
	    $38 = $duration;
	    $39 = $38;
	    HEAP32[$39>>2] = 0;
	    $40 = (($38) + 4)|0;
	    $41 = $40;
	    HEAP32[$41>>2] = 0;
	   }
	   $42 = $duration;
	   $43 = $42;
	   $44 = HEAP32[$43>>2]|0;
	   $45 = (($42) + 4)|0;
	   $46 = $45;
	   $47 = HEAP32[$46>>2]|0;
	   $48 = ($44|0)!=(0);
	   $49 = ($47|0)!=(0);
	   $50 = $48 | $49;
	   if ($50) {
	    $54 = $duration;
	    $55 = $54;
	    $56 = HEAP32[$55>>2]|0;
	    $57 = (($54) + 4)|0;
	    $58 = $57;
	    $59 = HEAP32[$58>>2]|0;
	    $60 = (_i64Add(($56|0),($59|0),500,0)|0);
	    $61 = tempRet0;
	    $62 = $duration;
	    $63 = $62;
	    HEAP32[$63>>2] = $60;
	    $64 = (($62) + 4)|0;
	    $65 = $64;
	    HEAP32[$65>>2] = $61;
	    $66 = $duration;
	    $67 = $66;
	    $68 = HEAP32[$67>>2]|0;
	    $69 = (($66) + 4)|0;
	    $70 = $69;
	    $71 = HEAP32[$70>>2]|0;
	    $72 = (___divdi3(($68|0),($71|0),1000,0)|0);
	    $73 = tempRet0;
	    $74 = (___remdi3(($72|0),($73|0),60,0)|0);
	    $75 = tempRet0;
	    $76 = $vararg_buffer1;
	    $77 = $76;
	    HEAP32[$77>>2] = $74;
	    $78 = (($76) + 4)|0;
	    $79 = $78;
	    HEAP32[$79>>2] = $75;
	    (_snprintf($seconds,21,5456,$vararg_buffer1)|0);
	    $80 = $target$addr;
	    $81 = $len$addr;
	    $82 = $target$addr;
	    $call52 = (_strlen(($82|0))|0);
	    $sub53 = (($81) - ($call52))|0;
	    $sub54 = (($sub53) - 1)|0;
	    (_strncat($80,$seconds,$sub54)|0);
	   } else {
	    $51 = $target$addr;
	    $52 = $len$addr;
	    $53 = $target$addr;
	    $call44 = (_strlen(($53|0))|0);
	    $sub45 = (($52) - ($call44))|0;
	    $sub46 = (($sub45) - 1)|0;
	    (_strncat($51,5448,$sub46)|0);
	   }
	  } else {
	   $83 = $key;
	   $call58 = (_strcmp($83,5464)|0);
	   $cmp59 = ($call58|0)==(0);
	   if ($cmp59) {
	    $84 = HEAP32[$it>>2]|0;
	    $call62 = (_xmmsv_dict_iter_find($84,5432)|0);
	    $tobool63 = ($call62|0)!=(0);
	    if ($tobool63) {
	     $85 = HEAP32[$it>>2]|0;
	     (_xmmsv_dict_iter_pair($85,0,$v)|0);
	     $86 = HEAP32[$v>>2]|0;
	     (_xmmsv_get_int32($86,$duration61)|0);
	    } else {
	     $87 = $duration61;
	     $88 = $87;
	     HEAP32[$88>>2] = 0;
	     $89 = (($87) + 4)|0;
	     $90 = $89;
	     HEAP32[$90>>2] = 0;
	    }
	    $91 = $duration61;
	    $92 = $91;
	    $93 = HEAP32[$92>>2]|0;
	    $94 = (($91) + 4)|0;
	    $95 = $94;
	    $96 = HEAP32[$95>>2]|0;
	    $97 = ($93|0)!=(0);
	    $98 = ($96|0)!=(0);
	    $99 = $97 | $98;
	    if ($99) {
	     $103 = $duration61;
	     $104 = $103;
	     $105 = HEAP32[$104>>2]|0;
	     $106 = (($103) + 4)|0;
	     $107 = $106;
	     $108 = HEAP32[$107>>2]|0;
	     $109 = (_i64Add(($105|0),($108|0),500,0)|0);
	     $110 = tempRet0;
	     $111 = $duration61;
	     $112 = $111;
	     HEAP32[$112>>2] = $109;
	     $113 = (($111) + 4)|0;
	     $114 = $113;
	     HEAP32[$114>>2] = $110;
	     $115 = $duration61;
	     $116 = $115;
	     $117 = HEAP32[$116>>2]|0;
	     $118 = (($115) + 4)|0;
	     $119 = $118;
	     $120 = HEAP32[$119>>2]|0;
	     $121 = (___divdi3(($117|0),($120|0),60000,0)|0);
	     $122 = tempRet0;
	     $123 = $vararg_buffer4;
	     $124 = $123;
	     HEAP32[$124>>2] = $121;
	     $125 = (($123) + 4)|0;
	     $126 = $125;
	     HEAP32[$126>>2] = $122;
	     (_snprintf($minutes,21,5456,$vararg_buffer4)|0);
	     $127 = $target$addr;
	     $128 = $len$addr;
	     $129 = $target$addr;
	     $call81 = (_strlen(($129|0))|0);
	     $sub82 = (($128) - ($call81))|0;
	     $sub83 = (($sub82) - 1)|0;
	     (_strncat($127,$minutes,$sub83)|0);
	    } else {
	     $100 = $target$addr;
	     $101 = $len$addr;
	     $102 = $target$addr;
	     $call71 = (_strlen(($102|0))|0);
	     $sub72 = (($101) - ($call71))|0;
	     $sub73 = (($sub72) - 1)|0;
	     (_strncat($100,5448,$sub73)|0);
	    }
	   } else {
	    HEAP32[$result>>2] = 0;
	    $130 = HEAP32[$it>>2]|0;
	    $131 = $key;
	    $call87 = (_xmmsv_dict_iter_find($130,$131)|0);
	    $tobool88 = ($call87|0)!=(0);
	    if ($tobool88) {
	     $132 = HEAP32[$it>>2]|0;
	     (_xmmsv_dict_iter_pair($132,0,$v)|0);
	     $133 = HEAP32[$v>>2]|0;
	     $call92 = (_xmmsv_get_type($133)|0);
	     $type = $call92;
	     $134 = $type;
	     $cmp93 = ($134|0)==(3);
	     if ($cmp93) {
	      $135 = HEAP32[$v>>2]|0;
	      (_xmmsv_get_string($135,$result)|0);
	     } else {
	      $136 = $type;
	      $cmp97 = ($136|0)==(2);
	      if ($cmp97) {
	       $137 = HEAP32[$v>>2]|0;
	       (_xmmsv_get_int32($137,$i)|0);
	       $138 = $i;
	       $139 = $138;
	       $140 = HEAP32[$139>>2]|0;
	       $141 = (($138) + 4)|0;
	       $142 = $141;
	       $143 = HEAP32[$142>>2]|0;
	       $144 = $vararg_buffer7;
	       $145 = $144;
	       HEAP32[$145>>2] = $140;
	       $146 = (($144) + 4)|0;
	       $147 = $146;
	       HEAP32[$147>>2] = $143;
	       (_snprintf($tmp,21,5472,$vararg_buffer7)|0);
	       HEAP32[$result>>2] = $tmp;
	      } else {
	       $148 = $type;
	       $cmp105 = ($148|0)==(9);
	       if ($cmp105) {
	        $149 = HEAP32[$v>>2]|0;
	        (_xmmsv_get_float($149,$f)|0);
	        $150 = +HEAPF32[$f>>2];
	        $conv = $150;
	        HEAPF64[tempDoublePtr>>3]=$conv;HEAP32[$vararg_buffer10>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer10+4>>2]=HEAP32[tempDoublePtr+4>>2];
	        (_snprintf($tmp,12,5480,$vararg_buffer10)|0);
	        HEAP32[$result>>2] = $tmp;
	       }
	      }
	     }
	    }
	    $151 = HEAP32[$result>>2]|0;
	    $tobool116 = ($151|0)!=(0|0);
	    if ($tobool116) {
	     $152 = $target$addr;
	     $153 = HEAP32[$result>>2]|0;
	     $154 = $len$addr;
	     $155 = $target$addr;
	     $call118 = (_strlen(($155|0))|0);
	     $sub119 = (($154) - ($call118))|0;
	     $sub120 = (($sub119) - 1)|0;
	     (_strncat($152,$153,$sub120)|0);
	    }
	   }
	  }
	  $156 = $key;
	  _free($156);
	  $157 = $next_key;
	  $call125 = (_strchr($157,125)|0);
	  $end = $call125;
	  $158 = $end;
	  $tobool126 = ($158|0)!=(0|0);
	  if (!($tobool126)) {
	   label = 45;
	   break;
	  }
	  $159 = $end;
	  $add$ptr129 = (($159) + 1|0);
	  $pos = $add$ptr129;
	 }
	 if ((label|0) == 8) {
	  $9 = $target$addr;
	  $10 = $pos;
	  $11 = $len$addr;
	  $12 = $target$addr;
	  $call7 = (_strlen(($12|0))|0);
	  $sub = (($11) - ($call7))|0;
	  $sub8 = (($sub) - 1)|0;
	  (_strncat($9,$10,$sub8)|0);
	 }
	 else if ((label|0) == 13) {
	  $26 = HEAP32[_stderr>>2]|0;
	  $27 = $keylen;
	  HEAP32[$vararg_buffer>>2] = $27;
	  (_fprintf(($26|0),(5376|0),($vararg_buffer|0))|0);
	 }
	 else if ((label|0) == 45) {
	 }
	 $160 = $target$addr;
	 $call130 = (_strlen(($160|0))|0);
	 $retval = $call130;
	 $161 = $retval;
	 STACKTOP = sp;return ($161|0);
	}
	function _xmmsv_utf8_validate($str) {
	 $str = $str|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $arrayidx5 = 0, $c = 0, $call = 0, $cmp = 0, $cmp3 = 0, $cmp6 = 0, $conv = 0;
	 var $dec = 0, $i = 0, $inc = 0, $inc4 = 0, $l = 0, $retval = 0, $str$addr = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $str$addr = $str;
	 $i = 0;
	 L1: while(1) {
	  $0 = $i;
	  $inc = (($0) + 1)|0;
	  $i = $inc;
	  $1 = $str$addr;
	  $arrayidx = (($1) + ($0)|0);
	  $2 = HEAP8[$arrayidx>>0]|0;
	  $c = $2;
	  $3 = $c;
	  $tobool = ($3<<24>>24)!=(0);
	  if (!($tobool)) {
	   label = 3;
	   break;
	  }
	  $4 = $c;
	  $call = (__xmmsv_utf8_charlen($4)|0);
	  $l = $call;
	  $5 = $l;
	  $cmp = ($5|0)==(0);
	  if ($cmp) {
	   label = 5;
	   break;
	  }
	  while(1) {
	   $6 = $l;
	   $dec = (($6) + -1)|0;
	   $l = $dec;
	   $cmp3 = ($6|0)>(1);
	   if (!($cmp3)) {
	    break;
	   }
	   $7 = $i;
	   $inc4 = (($7) + 1)|0;
	   $i = $inc4;
	   $8 = $str$addr;
	   $arrayidx5 = (($8) + ($7)|0);
	   $9 = HEAP8[$arrayidx5>>0]|0;
	   $conv = $9 << 24 >> 24;
	   $and = $conv & 192;
	   $cmp6 = ($and|0)!=(128);
	   if ($cmp6) {
	    label = 9;
	    break L1;
	   }
	  }
	 }
	 if ((label|0) == 3) {
	  $retval = 1;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 else if ((label|0) == 5) {
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 else if ((label|0) == 9) {
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 return 0|0;
	}
	function __xmmsv_utf8_charlen($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $and = 0, $and15 = 0, $and3 = 0, $and9 = 0, $c$addr = 0, $cmp = 0, $cmp10 = 0, $cmp16 = 0, $cmp4 = 0, $conv = 0, $conv14 = 0, $conv2 = 0, $conv8 = 0, $retval = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $0 = $c$addr;
	 $conv = $0&255;
	 $and = $conv & 128;
	 $cmp = ($and|0)==(0);
	 do {
	  if ($cmp) {
	   $retval = 1;
	  } else {
	   $1 = $c$addr;
	   $conv2 = $1&255;
	   $and3 = $conv2 & 96;
	   $cmp4 = ($and3|0)==(64);
	   if ($cmp4) {
	    $retval = 2;
	    break;
	   }
	   $2 = $c$addr;
	   $conv8 = $2&255;
	   $and9 = $conv8 & 112;
	   $cmp10 = ($and9|0)==(96);
	   if ($cmp10) {
	    $retval = 3;
	    break;
	   }
	   $3 = $c$addr;
	   $conv14 = $3&255;
	   $and15 = $conv14 & 120;
	   $cmp16 = ($and15|0)==(112);
	   if ($cmp16) {
	    $retval = 4;
	    break;
	   }
	   $retval = 0;
	  }
	 } while(0);
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _source_match_pattern($source,$pattern) {
	 $source = $source|0;
	 $pattern = $pattern|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call8 = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp6 = 0;
	 var $cmp9 = 0, $conv = 0, $lpos = 0, $match = 0, $pattern$addr = 0, $source$addr = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $source$addr = $source;
	 $pattern$addr = $pattern;
	 $match = 0;
	 $0 = $pattern$addr;
	 $call = (_strlen(($0|0))|0);
	 $sub = (($call) - 1)|0;
	 $lpos = $sub;
	 $1 = $pattern$addr;
	 $2 = $source$addr;
	 $call1 = (_strcasecmp($1,$2)|0);
	 $cmp = ($call1|0)==(0);
	 if ($cmp) {
	  $match = 1;
	  $11 = $match;
	  STACKTOP = sp;return ($11|0);
	 }
	 $3 = $lpos;
	 $cmp2 = ($3|0)>=(0);
	 do {
	  if ($cmp2) {
	   $4 = $lpos;
	   $5 = $pattern$addr;
	   $arrayidx = (($5) + ($4)|0);
	   $6 = HEAP8[$arrayidx>>0]|0;
	   $conv = $6 << 24 >> 24;
	   $cmp3 = ($conv|0)==(42);
	   if ($cmp3) {
	    $7 = $lpos;
	    $cmp6 = ($7|0)==(0);
	    if (!($cmp6)) {
	     $8 = $source$addr;
	     $9 = $pattern$addr;
	     $10 = $lpos;
	     $call8 = (_strncasecmp($8,$9,$10)|0);
	     $cmp9 = ($call8|0)==(0);
	     if (!($cmp9)) {
	      break;
	     }
	    }
	    $match = 1;
	   }
	  }
	 } while(0);
	 $11 = $match;
	 STACKTOP = sp;return ($11|0);
	}
	function _xmms_socket_error_recoverable() {
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $retval = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (_xmms_socket_errno()|0);
	 $cmp = ($call|0)==(11);
	 if ($cmp) {
	  label = 3;
	 } else {
	  $call1 = (_xmms_socket_errno()|0);
	  $cmp2 = ($call1|0)==(4);
	  if ($cmp2) {
	   label = 3;
	  } else {
	   $$expand_i1_val2 = 0;
	   $retval = $$expand_i1_val2;
	  }
	 }
	 if ((label|0) == 3) {
	  $$expand_i1_val = 1;
	  $retval = $$expand_i1_val;
	 }
	 $$pre_trunc = $retval;
	 $0 = $$pre_trunc&1;
	 STACKTOP = sp;return ($0|0);
	}
	function _xmms_getaddrinfo($node,$service,$hints,$res) {
	 $node = $node|0;
	 $service = $service|0;
	 $hints = $hints|0;
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $hints$addr = 0, $node$addr = 0, $res$addr = 0, $service$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $node$addr = $node;
	 $service$addr = $service;
	 $hints$addr = $hints;
	 $res$addr = $res;
	 $0 = $node$addr;
	 $1 = $service$addr;
	 $2 = $hints$addr;
	 $3 = $res$addr;
	 $call = (_getaddrinfo(($0|0),($1|0),($2|0),($3|0))|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmms_freeaddrinfo($res) {
	 $res = $res|0;
	 var $0 = 0, $res$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $0 = $res$addr;
	 _freeaddrinfo(($0|0));
	 STACKTOP = sp;return;
	}
	function _xmms_sockets_initialize() {
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = sp;return 1;
	}
	function _xmms_socket_set_nonblock($socket) {
	 $socket = $socket|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp3 = 0, $flags = 0, $or = 0, $retval = 0, $socket$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer1 = sp + 8|0;
	 $vararg_buffer = sp;
	 $socket$addr = $socket;
	 $0 = $socket$addr;
	 HEAP32[$vararg_buffer>>2] = 0;
	 $call = (_fcntl(($0|0),3,($vararg_buffer|0))|0);
	 $flags = $call;
	 $1 = $flags;
	 $cmp = ($1|0)==(-1);
	 if ($cmp) {
	  $2 = $socket$addr;
	  (_close(($2|0))|0);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $flags;
	 $or = $3 | 2048;
	 $flags = $or;
	 $4 = $socket$addr;
	 $5 = $flags;
	 HEAP32[$vararg_buffer1>>2] = $5;
	 $call2 = (_fcntl(($4|0),4,($vararg_buffer1|0))|0);
	 $flags = $call2;
	 $6 = $flags;
	 $cmp3 = ($6|0)==(-1);
	 if ($cmp3) {
	  $7 = $socket$addr;
	  (_close(($7|0))|0);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  $retval = 1;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmms_socket_valid($socket) {
	 $socket = $socket|0;
	 var $0 = 0, $1 = 0, $cmp = 0, $retval = 0, $socket$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $socket$addr = $socket;
	 $0 = $socket$addr;
	 $cmp = ($0|0)<(0);
	 if ($cmp) {
	  $retval = 0;
	 } else {
	  $retval = 1;
	 }
	 $1 = $retval;
	 STACKTOP = sp;return ($1|0);
	}
	function _xmms_socket_invalidate($socket) {
	 $socket = $socket|0;
	 var $0 = 0, $socket$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $socket$addr = $socket;
	 $0 = $socket$addr;
	 HEAP32[$0>>2] = -1;
	 STACKTOP = sp;return;
	}
	function _xmms_socket_close($socket) {
	 $socket = $socket|0;
	 var $0 = 0, $socket$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $socket$addr = $socket;
	 $0 = $socket$addr;
	 (_close(($0|0))|0);
	 STACKTOP = sp;return;
	}
	function _xmms_socket_errno() {
	 var $0 = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (___errno_location()|0);
	 $0 = HEAP32[$call>>2]|0;
	 STACKTOP = sp;return ($0|0);
	}
	function _xmms_ipc_msg_alloc() {
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $msg = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (_calloc(1,8)|0);
	 $msg = $call;
	 $call1 = (_xmmsv_new_bitbuffer()|0);
	 $0 = $msg;
	 HEAP32[$0>>2] = $call1;
	 $1 = $msg;
	 $2 = HEAP32[$1>>2]|0;
	 (_xmmsv_bitbuffer_put_data($2,5544,16)|0);
	 $3 = $msg;
	 STACKTOP = sp;return ($3|0);
	}
	function _xmms_ipc_msg_destroy($msg) {
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $msg$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $msg$addr = $msg;
	 $0 = $msg$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $msg$addr;
	  $2 = HEAP32[$1>>2]|0;
	  _xmmsv_unref($2);
	  $3 = $msg$addr;
	  _free($3);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 5600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5608;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5632;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 56;
	  _xmmsc_log(0,2,5560,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmms_ipc_msg_get_object($msg) {
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $msg$addr = 0, $obj = 0;
	 var $p = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $obj = sp;
	 $msg$addr = $msg;
	 $0 = $msg$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $msg$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $call = (_xmmsv_bitbuffer_pos($2)|0);
	  $p = $call;
	  $3 = $msg$addr;
	  $4 = HEAP32[$3>>2]|0;
	  (_xmmsv_bitbuffer_goto($4,0)|0);
	  $5 = $msg$addr;
	  $6 = HEAP32[$5>>2]|0;
	  (_xmmsv_bitbuffer_get_bits($6,32,$obj)|0);
	  $7 = $msg$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $9 = $p;
	  (_xmmsv_bitbuffer_goto($8,$9)|0);
	  $10 = $obj;
	  $11 = $10;
	  $12 = HEAP32[$11>>2]|0;
	  $13 = (($10) + 4)|0;
	  $14 = $13;
	  $15 = HEAP32[$14>>2]|0;
	  $retval = $12;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 5600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5656;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5632;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 98;
	  _xmmsc_log(0,2,5560,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_msg_get_cmd($msg) {
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmd = 0, $msg$addr = 0;
	 var $p = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $cmd = sp;
	 $msg$addr = $msg;
	 $0 = $msg$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $msg$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $call = (_xmmsv_bitbuffer_pos($2)|0);
	  $p = $call;
	  $3 = $msg$addr;
	  $4 = HEAP32[$3>>2]|0;
	  (_xmmsv_bitbuffer_goto($4,32)|0);
	  $5 = $msg$addr;
	  $6 = HEAP32[$5>>2]|0;
	  (_xmmsv_bitbuffer_get_bits($6,32,$cmd)|0);
	  $7 = $msg$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $9 = $p;
	  (_xmmsv_bitbuffer_goto($8,$9)|0);
	  $10 = $cmd;
	  $11 = $10;
	  $12 = HEAP32[$11>>2]|0;
	  $13 = (($10) + 4)|0;
	  $14 = $13;
	  $15 = HEAP32[$14>>2]|0;
	  $retval = $12;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 5600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5680;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5632;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 123;
	  _xmmsc_log(0,2,5560,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_msg_set_cookie($msg,$cookie) {
	 $msg = $msg|0;
	 $cookie = $cookie|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cookie$addr = 0, $msg$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $msg$addr = $msg;
	 $cookie$addr = $cookie;
	 $0 = $msg$addr;
	 $1 = HEAP32[$0>>2]|0;
	 (_xmmsv_bitbuffer_goto($1,64)|0);
	 $2 = $msg$addr;
	 $3 = HEAP32[$2>>2]|0;
	 $4 = $cookie$addr;
	 (_xmmsv_bitbuffer_put_bits($3,32,$4,0)|0);
	 $5 = $msg$addr;
	 $6 = HEAP32[$5>>2]|0;
	 (_xmmsv_bitbuffer_end($6)|0);
	 STACKTOP = sp;return;
	}
	function _xmms_ipc_msg_get_cookie($msg) {
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cookie = 0, $msg$addr = 0;
	 var $p = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $cookie = sp;
	 $msg$addr = $msg;
	 $0 = $msg$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $msg$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $call = (_xmmsv_bitbuffer_pos($2)|0);
	  $p = $call;
	  $3 = $msg$addr;
	  $4 = HEAP32[$3>>2]|0;
	  (_xmmsv_bitbuffer_goto($4,64)|0);
	  $5 = $msg$addr;
	  $6 = HEAP32[$5>>2]|0;
	  (_xmmsv_bitbuffer_get_bits($6,32,$cookie)|0);
	  $7 = $msg$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $9 = $p;
	  (_xmmsv_bitbuffer_goto($8,$9)|0);
	  $10 = $cookie;
	  $11 = $10;
	  $12 = HEAP32[$11>>2]|0;
	  $13 = (($10) + 4)|0;
	  $14 = $13;
	  $15 = HEAP32[$14>>2]|0;
	  $retval = $12;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 5600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5704;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5632;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 156;
	  _xmmsc_log(0,2,5560,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_msg_new($object,$cmd) {
	 $object = $object|0;
	 $cmd = $cmd|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmd$addr = 0, $msg = 0, $object$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $object$addr = $object;
	 $cmd$addr = $cmd;
	 $call = (_xmms_ipc_msg_alloc()|0);
	 $msg = $call;
	 $0 = $msg;
	 $1 = $cmd$addr;
	 _xmms_ipc_msg_set_cmd($0,$1);
	 $2 = $msg;
	 $3 = $object$addr;
	 _xmms_ipc_msg_set_object($2,$3);
	 $4 = $msg;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmms_ipc_msg_set_cmd($msg,$cmd) {
	 $msg = $msg|0;
	 $cmd = $cmd|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmd$addr = 0, $msg$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $msg$addr = $msg;
	 $cmd$addr = $cmd;
	 $0 = $msg$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $msg$addr;
	  $2 = HEAP32[$1>>2]|0;
	  (_xmmsv_bitbuffer_goto($2,32)|0);
	  $3 = $msg$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = $cmd$addr;
	  (_xmmsv_bitbuffer_put_bits($4,32,$5,0)|0);
	  $6 = $msg$addr;
	  $7 = HEAP32[$6>>2]|0;
	  (_xmmsv_bitbuffer_end($7)|0);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 5600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5904;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5632;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 135;
	  _xmmsc_log(0,2,5560,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmms_ipc_msg_set_object($msg,$object) {
	 $msg = $msg|0;
	 $object = $object|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $msg$addr = 0, $object$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $msg$addr = $msg;
	 $object$addr = $object;
	 $0 = $msg$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $msg$addr;
	  $2 = HEAP32[$1>>2]|0;
	  (_xmmsv_bitbuffer_goto($2,0)|0);
	  $3 = $msg$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = $object$addr;
	  (_xmmsv_bitbuffer_put_bits($4,32,$5,0)|0);
	  $6 = $msg$addr;
	  $7 = HEAP32[$6>>2]|0;
	  (_xmmsv_bitbuffer_end($7)|0);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 5600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5880;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5632;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 110;
	  _xmmsc_log(0,2,5560,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmms_ipc_msg_write_transport($msg,$transport,$disconnected) {
	 $msg = $msg|0;
	 $transport = $transport|0;
	 $disconnected = $disconnected|0;
	 var $$expand_i1_val = 0, $$expand_i1_val17 = 0, $$expand_i1_val19 = 0, $$expand_i1_val21 = 0, $$expand_i1_val23 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
	 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $buf = 0;
	 var $call12 = 0, $call15 = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp13 = 0, $cmp31 = 0, $cmp31$expand_i1_val = 0, $disconnected$addr = 0, $div = 0, $len = 0, $msg$addr = 0, $ret = 0, $retval = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool18 = 0, $tobool21 = 0, $tobool23 = 0;
	 var $transport$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $xfered = 0, $xfered10 = 0, $xfered11 = 0, $xfered27 = 0, $xfered30 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $msg$addr = $msg;
	 $transport$addr = $transport;
	 $disconnected$addr = $disconnected;
	 $0 = $msg$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 5600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5728;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5632;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 195;
	  _xmmsc_log(0,2,5560,$vararg_buffer);
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $30 = $$pre_trunc&1;
	  STACKTOP = sp;return ($30|0);
	 }
	 $1 = $transport$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 5760;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 5728;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 5632;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 196;
	  _xmmsc_log(0,2,5560,$vararg_buffer4);
	  $$expand_i1_val17 = 0;
	  $retval = $$expand_i1_val17;
	  $$pre_trunc = $retval;
	  $30 = $$pre_trunc&1;
	  STACKTOP = sp;return ($30|0);
	 }
	 $2 = $msg$addr;
	 $3 = HEAP32[$2>>2]|0;
	 (_xmmsv_bitbuffer_align($3)|0);
	 $4 = $msg$addr;
	 $5 = HEAP32[$4>>2]|0;
	 $call5 = (_xmmsv_bitbuffer_len($5)|0);
	 $div = (($call5|0) / 8)&-1;
	 $len = $div;
	 $6 = $len;
	 $7 = $msg$addr;
	 $xfered = (($7) + 4|0);
	 $8 = HEAP32[$xfered>>2]|0;
	 $cmp = ($6>>>0)>($8>>>0);
	 if (!($cmp)) {
	  HEAP32[$vararg_buffer10>>2] = 5776;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 5728;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 5632;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 202;
	  _xmmsc_log(0,2,5560,$vararg_buffer10);
	  $$expand_i1_val19 = 1;
	  $retval = $$expand_i1_val19;
	  $$pre_trunc = $retval;
	  $30 = $$pre_trunc&1;
	  STACKTOP = sp;return ($30|0);
	 }
	 $9 = $msg$addr;
	 $10 = HEAP32[$9>>2]|0;
	 $call9 = (_xmmsv_bitbuffer_buffer($10)|0);
	 $11 = $msg$addr;
	 $xfered10 = (($11) + 4|0);
	 $12 = HEAP32[$xfered10>>2]|0;
	 $add$ptr = (($call9) + ($12)|0);
	 $buf = $add$ptr;
	 $13 = $transport$addr;
	 $14 = $buf;
	 $15 = $len;
	 $16 = $msg$addr;
	 $xfered11 = (($16) + 4|0);
	 $17 = HEAP32[$xfered11>>2]|0;
	 $sub = (($15) - ($17))|0;
	 $call12 = (_xmms_ipc_transport_write($13,$14,$sub)|0);
	 $ret = $call12;
	 $18 = $ret;
	 $cmp13 = ($18|0)==(-1);
	 if ($cmp13) {
	  $call15 = (_xmms_socket_error_recoverable()|0);
	  if ($call15) {
	   $$expand_i1_val21 = 0;
	   $retval = $$expand_i1_val21;
	   $$pre_trunc = $retval;
	   $30 = $$pre_trunc&1;
	   STACKTOP = sp;return ($30|0);
	  }
	  $19 = $disconnected$addr;
	  $tobool18 = ($19|0)!=(0|0);
	  if ($tobool18) {
	   $20 = $disconnected$addr;
	   HEAP8[$20>>0] = 1;
	  }
	  $$expand_i1_val23 = 0;
	  $retval = $$expand_i1_val23;
	  $$pre_trunc = $retval;
	  $30 = $$pre_trunc&1;
	  STACKTOP = sp;return ($30|0);
	 }
	 $21 = $ret;
	 $tobool21 = ($21|0)!=(0);
	 if ($tobool21) {
	  $24 = $ret;
	  $25 = $msg$addr;
	  $xfered27 = (($25) + 4|0);
	  $26 = HEAP32[$xfered27>>2]|0;
	  $add = (($26) + ($24))|0;
	  HEAP32[$xfered27>>2] = $add;
	 } else {
	  $22 = $disconnected$addr;
	  $tobool23 = ($22|0)!=(0|0);
	  if ($tobool23) {
	   $23 = $disconnected$addr;
	   HEAP8[$23>>0] = 1;
	  }
	 }
	 $27 = $len;
	 $28 = $msg$addr;
	 $xfered30 = (($28) + 4|0);
	 $29 = HEAP32[$xfered30>>2]|0;
	 $cmp31 = ($27|0)==($29|0);
	 $cmp31$expand_i1_val = $cmp31&1;
	 $retval = $cmp31$expand_i1_val;
	 $$pre_trunc = $retval;
	 $30 = $$pre_trunc&1;
	 STACKTOP = sp;return ($30|0);
	}
	function _xmms_ipc_msg_read_transport($msg,$transport,$disconnected) {
	 $msg = $msg|0;
	 $transport = $transport|0;
	 $disconnected = $disconnected|0;
	 var $$expand_i1_val = 0, $$expand_i1_val17 = 0, $$expand_i1_val19 = 0, $$expand_i1_val21 = 0, $$expand_i1_val23 = 0, $$expand_i1_val25 = 0, $$expand_i1_val27 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
	 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
	 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add39 = 0, $buf = 0, $call = 0, $call18 = 0, $call21 = 0, $cmp = 0, $cmp11 = 0, $cmp15 = 0, $cmp19 = 0, $cmp27 = 0, $cmp6 = 0, $disconnected$addr = 0, $len = 0, $msg$addr = 0;
	 var $mul = 0, $ret = 0, $retval = 0, $rlen = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool24 = 0, $tobool29 = 0, $transport$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0;
	 var $vararg_ptr8 = 0, $vararg_ptr9 = 0, $xfered = 0, $xfered10 = 0, $xfered14 = 0, $xfered33 = 0, $xfered38 = 0, $xfered5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $buf = sp + 80|0;
	 $msg$addr = $msg;
	 $transport$addr = $transport;
	 $disconnected$addr = $disconnected;
	 $0 = $msg$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 5600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5800;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5632;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 241;
	  _xmmsc_log(0,2,5560,$vararg_buffer);
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $36 = $$pre_trunc&1;
	  STACKTOP = sp;return ($36|0);
	 }
	 $1 = $transport$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 5760;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 5800;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 5632;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 242;
	  _xmmsc_log(0,2,5560,$vararg_buffer4);
	  $$expand_i1_val17 = 0;
	  $retval = $$expand_i1_val17;
	  $$pre_trunc = $retval;
	  $36 = $$pre_trunc&1;
	  STACKTOP = sp;return ($36|0);
	 }
	 while(1) {
	  $len = 16;
	  $2 = $msg$addr;
	  $xfered = (($2) + 4|0);
	  $3 = HEAP32[$xfered>>2]|0;
	  $cmp = ($3>>>0)>=(16);
	  if ($cmp) {
	   $4 = $msg$addr;
	   $call = (_xmms_ipc_msg_get_length($4)|0);
	   $5 = $len;
	   $add = (($5) + ($call))|0;
	   $len = $add;
	   $6 = $msg$addr;
	   $xfered5 = (($6) + 4|0);
	   $7 = HEAP32[$xfered5>>2]|0;
	   $8 = $len;
	   $cmp6 = ($7|0)==($8|0);
	   if ($cmp6) {
	    label = 8;
	    break;
	   }
	  }
	  $9 = $msg$addr;
	  $xfered10 = (($9) + 4|0);
	  $10 = HEAP32[$xfered10>>2]|0;
	  $11 = $len;
	  $cmp11 = ($10>>>0)<($11>>>0);
	  if (!($cmp11)) {
	   label = 11;
	   break;
	  }
	  $12 = $len;
	  $13 = $msg$addr;
	  $xfered14 = (($13) + 4|0);
	  $14 = HEAP32[$xfered14>>2]|0;
	  $sub = (($12) - ($14))|0;
	  $rlen = $sub;
	  $15 = $rlen;
	  $cmp15 = ($15>>>0)>(512);
	  if ($cmp15) {
	   $rlen = 512;
	  }
	  $16 = $transport$addr;
	  $17 = $rlen;
	  $call18 = (_xmms_ipc_transport_read($16,$buf,$17)|0);
	  $ret = $call18;
	  $18 = $ret;
	  $cmp19 = ($18|0)==(-1);
	  if ($cmp19) {
	   label = 15;
	   break;
	  }
	  $21 = $ret;
	  $cmp27 = ($21|0)==(0);
	  if ($cmp27) {
	   label = 21;
	   break;
	  }
	  $24 = $msg$addr;
	  $25 = HEAP32[$24>>2]|0;
	  $26 = $msg$addr;
	  $xfered33 = (($26) + 4|0);
	  $27 = HEAP32[$xfered33>>2]|0;
	  $mul = $27<<3;
	  (_xmmsv_bitbuffer_goto($25,$mul)|0);
	  $28 = $msg$addr;
	  $29 = HEAP32[$28>>2]|0;
	  $30 = $ret;
	  (_xmmsv_bitbuffer_put_data($29,$buf,$30)|0);
	  $31 = $ret;
	  $32 = $msg$addr;
	  $xfered38 = (($32) + 4|0);
	  $33 = HEAP32[$xfered38>>2]|0;
	  $add39 = (($33) + ($31))|0;
	  HEAP32[$xfered38>>2] = $add39;
	  $34 = $msg$addr;
	  $35 = HEAP32[$34>>2]|0;
	  (_xmmsv_bitbuffer_goto($35,128)|0);
	 }
	 if ((label|0) == 8) {
	  $$expand_i1_val19 = 1;
	  $retval = $$expand_i1_val19;
	  $$pre_trunc = $retval;
	  $36 = $$pre_trunc&1;
	  STACKTOP = sp;return ($36|0);
	 }
	 else if ((label|0) == 11) {
	  HEAP32[$vararg_buffer10>>2] = 5832;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 5800;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 5632;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 255;
	  _xmmsc_log(0,2,5560,$vararg_buffer10);
	  $$expand_i1_val21 = 0;
	  $retval = $$expand_i1_val21;
	  $$pre_trunc = $retval;
	  $36 = $$pre_trunc&1;
	  STACKTOP = sp;return ($36|0);
	 }
	 else if ((label|0) == 15) {
	  $call21 = (_xmms_socket_error_recoverable()|0);
	  if ($call21) {
	   $$expand_i1_val23 = 0;
	   $retval = $$expand_i1_val23;
	   $$pre_trunc = $retval;
	   $36 = $$pre_trunc&1;
	   STACKTOP = sp;return ($36|0);
	  }
	  $19 = $disconnected$addr;
	  $tobool24 = ($19|0)!=(0|0);
	  if ($tobool24) {
	   $20 = $disconnected$addr;
	   HEAP8[$20>>0] = 1;
	  }
	  $$expand_i1_val25 = 0;
	  $retval = $$expand_i1_val25;
	  $$pre_trunc = $retval;
	  $36 = $$pre_trunc&1;
	  STACKTOP = sp;return ($36|0);
	 }
	 else if ((label|0) == 21) {
	  $22 = $disconnected$addr;
	  $tobool29 = ($22|0)!=(0|0);
	  if ($tobool29) {
	   $23 = $disconnected$addr;
	   HEAP8[$23>>0] = 1;
	  }
	  $$expand_i1_val27 = 0;
	  $retval = $$expand_i1_val27;
	  $$pre_trunc = $retval;
	  $36 = $$pre_trunc&1;
	  STACKTOP = sp;return ($36|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_msg_get_length($msg) {
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $len = 0, $msg$addr = 0;
	 var $p = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp + 8|0;
	 $len = sp;
	 $msg$addr = $msg;
	 $0 = $msg$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $msg$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $call = (_xmmsv_bitbuffer_pos($2)|0);
	  $p = $call;
	  $3 = $msg$addr;
	  $4 = HEAP32[$3>>2]|0;
	  (_xmmsv_bitbuffer_goto($4,96)|0);
	  $5 = $msg$addr;
	  $6 = HEAP32[$5>>2]|0;
	  (_xmmsv_bitbuffer_get_bits($6,32,$len)|0);
	  $7 = $msg$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $9 = $p;
	  (_xmmsv_bitbuffer_goto($8,$9)|0);
	  $10 = $len;
	  $11 = $10;
	  $12 = HEAP32[$11>>2]|0;
	  $13 = (($10) + 4)|0;
	  $14 = $13;
	  $15 = HEAP32[$14>>2]|0;
	  $retval = $12;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 5600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 5856;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5632;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 83;
	  _xmmsc_log(0,2,5560,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_msg_put_value($msg,$v) {
	 $msg = $msg|0;
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call3 = 0, $msg$addr = 0, $retval = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $msg$addr = $msg;
	 $v$addr = $v;
	 $0 = $msg$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $2 = $v$addr;
	 $call = (_xmmsv_bitbuffer_serialize_value($1,$2)|0);
	 $tobool = ($call|0)!=(0);
	 if ($tobool) {
	  $3 = $msg$addr;
	  $4 = HEAP32[$3>>2]|0;
	  _xmms_ipc_msg_update_length($4);
	  $5 = $msg$addr;
	  $6 = HEAP32[$5>>2]|0;
	  $call3 = (_xmmsv_bitbuffer_pos($6)|0);
	  $retval = $call3;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_msg_update_length($bb) {
	 $bb = $bb|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $bb$addr = 0, $call = 0, $div = 0, $len = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $bb$addr = $bb;
	 $0 = $bb$addr;
	 $call = (_xmmsv_bitbuffer_len($0)|0);
	 $len = $call;
	 $1 = $len;
	 $div = (($1|0) / 8)&-1;
	 $len = $div;
	 $2 = $len;
	 $sub = (($2) - 16)|0;
	 $len = $sub;
	 $3 = $bb$addr;
	 (_xmmsv_bitbuffer_goto($3,96)|0);
	 $4 = $bb$addr;
	 $5 = $len;
	 $6 = ($5|0)<(0);
	 $7 = $6 << 31 >> 31;
	 (_xmmsv_bitbuffer_put_bits($4,32,$5,$7)|0);
	 $8 = $bb$addr;
	 (_xmmsv_bitbuffer_end($8)|0);
	 STACKTOP = sp;return;
	}
	function _xmms_ipc_msg_get_value($msg,$val) {
	 $msg = $msg|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $msg$addr = 0, $tobool = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $msg$addr = $msg;
	 $val$addr = $val;
	 $0 = $msg$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $2 = $val$addr;
	 $call = (_xmmsv_bitbuffer_deserialize_value($1,$2)|0);
	 $tobool = ($call|0)!=(0);
	 STACKTOP = sp;return ($tobool|0);
	}
	function _xmms_ipc_tcp_client_init($url,$ipv6) {
	 $url = $url|0;
	 $ipv6 = $ipv6|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_reuseaddr = 0, $addrinfo = 0, $addrinfos = 0, $ai_addr = 0, $ai_addrlen = 0, $ai_family = 0, $ai_family26 = 0, $ai_next = 0, $ai_protocol = 0;
	 var $ai_protocol28 = 0, $ai_socktype = 0, $ai_socktype27 = 0, $call = 0, $call21 = 0, $call29 = 0, $call30 = 0, $call35 = 0, $call37 = 0, $call49 = 0, $call54 = 0, $call57 = 0, $cmp = 0, $cmp38 = 0, $cmp47 = 0, $cond = 0, $cond12 = 0, $cond20 = 0, $cond3 = 0, $connected = 0;
	 var $conv = 0, $conv14 = 0, $conv6 = 0, $destroy_func = 0, $fd = 0, $fd55 = 0, $gai_errno = 0, $hints = 0, $host = 0, $host4 = 0, $host56 = 0, $host9 = 0, $ipct = 0, $ipv6$addr = 0, $land$ext = 0, $port = 0, $port17 = 0, $read_func = 0, $retval = 0, $reuseaddr = 0;
	 var $tobool = 0, $tobool1 = 0, $tobool15 = 0, $tobool2 = 0, $tobool22 = 0, $tobool25 = 0, $tobool31 = 0, $tobool40 = 0, $tobool44 = 0, $tobool50 = 0, $tobool7 = 0, $url$addr = 0, $write_func = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $hints = sp + 40|0;
	 $addrinfos = sp + 24|0;
	 $_reuseaddr = sp + 12|0;
	 $url$addr = $url;
	 $ipv6$addr = $ipv6;
	 $fd = -1;
	 $call = (_xmms_sockets_initialize()|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $retval = 0;
	  $50 = $retval;
	  STACKTOP = sp;return ($50|0);
	 }
	 ;HEAP32[$hints+0>>2]=0|0;HEAP32[$hints+4>>2]=0|0;HEAP32[$hints+8>>2]=0|0;HEAP32[$hints+12>>2]=0|0;HEAP32[$hints+16>>2]=0|0;HEAP32[$hints+20>>2]=0|0;HEAP32[$hints+24>>2]=0|0;HEAP32[$hints+28>>2]=0|0;
	 HEAP32[$hints>>2] = 0;
	 $0 = $url$addr;
	 $host = (($0) + 16|0);
	 $1 = HEAP32[$host>>2]|0;
	 $2 = HEAP8[$1>>0]|0;
	 $conv = $2 << 24 >> 24;
	 $tobool1 = ($conv|0)!=(0);
	 if ($tobool1) {
	  $3 = $ipv6$addr;
	  $tobool2 = ($3|0)!=(0);
	  $cond = $tobool2 ? 10 : 2;
	  $cond3 = $cond;
	 } else {
	  $cond3 = 0;
	 }
	 $ai_family = (($hints) + 4|0);
	 HEAP32[$ai_family>>2] = $cond3;
	 $ai_socktype = (($hints) + 8|0);
	 HEAP32[$ai_socktype>>2] = 1;
	 $ai_protocol = (($hints) + 12|0);
	 HEAP32[$ai_protocol>>2] = 0;
	 $4 = $url$addr;
	 $host4 = (($4) + 16|0);
	 $5 = HEAP32[$host4>>2]|0;
	 $6 = HEAP8[$5>>0]|0;
	 $conv6 = $6 << 24 >> 24;
	 $tobool7 = ($conv6|0)!=(0);
	 if ($tobool7) {
	  $7 = $url$addr;
	  $host9 = (($7) + 16|0);
	  $8 = HEAP32[$host9>>2]|0;
	  $cond12 = $8;
	 } else {
	  $cond12 = 0;
	 }
	 $9 = $url$addr;
	 $port = (($9) + 20|0);
	 $10 = HEAP32[$port>>2]|0;
	 $11 = HEAP8[$10>>0]|0;
	 $conv14 = $11 << 24 >> 24;
	 $tobool15 = ($conv14|0)!=(0);
	 if ($tobool15) {
	  $12 = $url$addr;
	  $port17 = (($12) + 20|0);
	  $13 = HEAP32[$port17>>2]|0;
	  $cond20 = $13;
	 } else {
	  $cond20 = 5928;
	 }
	 $call21 = (_xmms_getaddrinfo($cond12,$cond20,$hints,$addrinfos)|0);
	 $gai_errno = $call21;
	 $tobool22 = ($call21|0)!=(0);
	 if ($tobool22) {
	  $retval = 0;
	  $50 = $retval;
	  STACKTOP = sp;return ($50|0);
	 }
	 $14 = HEAP32[$addrinfos>>2]|0;
	 $addrinfo = $14;
	 while(1) {
	  $15 = $addrinfo;
	  $tobool25 = ($15|0)!=(0|0);
	  if (!($tobool25)) {
	   break;
	  }
	  HEAP32[$_reuseaddr>>2] = 1;
	  $connected = 0;
	  $reuseaddr = $_reuseaddr;
	  $16 = $addrinfo;
	  $ai_family26 = (($16) + 4|0);
	  $17 = HEAP32[$ai_family26>>2]|0;
	  $18 = $addrinfo;
	  $ai_socktype27 = (($18) + 8|0);
	  $19 = HEAP32[$ai_socktype27>>2]|0;
	  $20 = $addrinfo;
	  $ai_protocol28 = (($20) + 12|0);
	  $21 = HEAP32[$ai_protocol28>>2]|0;
	  $call29 = (_socket(($17|0),($19|0),($21|0))|0);
	  $fd = $call29;
	  $22 = $fd;
	  $call30 = (_xmms_socket_valid($22)|0);
	  $tobool31 = ($call30|0)!=(0);
	  if (!($tobool31)) {
	   label = 17;
	   break;
	  }
	  $23 = $fd;
	  $24 = $reuseaddr;
	  (_setsockopt(($23|0),1,2,($24|0),4)|0);
	  $25 = $fd;
	  $26 = $addrinfo;
	  $ai_addr = (($26) + 20|0);
	  $27 = HEAP32[$ai_addr>>2]|0;
	  $28 = $addrinfo;
	  $ai_addrlen = (($28) + 16|0);
	  $29 = HEAP32[$ai_addrlen>>2]|0;
	  $call35 = (_connect(($25|0),($27|0),($29|0))|0);
	  $connected = $call35;
	  $30 = $connected;
	  $cmp = ($30|0)==(-1);
	  if ($cmp) {
	   $call37 = (_xmms_socket_errno()|0);
	   $cmp38 = ($call37|0)==(115);
	   $31 = $cmp38;
	  } else {
	   $31 = 0;
	  }
	  $land$ext = $31&1;
	  $connected = $land$ext;
	  $32 = $connected;
	  $tobool40 = ($32|0)!=(0);
	  if ($tobool40) {
	   label = 21;
	   break;
	  }
	  $33 = $fd;
	  (_close(($33|0))|0);
	  $34 = $addrinfo;
	  $ai_next = (($34) + 28|0);
	  $35 = HEAP32[$ai_next>>2]|0;
	  $addrinfo = $35;
	 }
	 if ((label|0) == 17) {
	  $retval = 0;
	  $50 = $retval;
	  STACKTOP = sp;return ($50|0);
	 }
	 else if ((label|0) == 21) {
	 }
	 $36 = HEAP32[$addrinfos>>2]|0;
	 _xmms_freeaddrinfo($36);
	 $37 = $addrinfo;
	 $tobool44 = ($37|0)!=(0|0);
	 if (!($tobool44)) {
	  $retval = 0;
	  $50 = $retval;
	  STACKTOP = sp;return ($50|0);
	 }
	 $38 = $fd;
	 $cmp47 = ($38|0)!=(-1);
	 if (!($cmp47)) {
	  ___assert_fail((5936|0),(5952|0),131,(5984|0));
	  // unreachable;
	 }
	 $39 = $fd;
	 $call49 = (_xmms_socket_set_nonblock($39)|0);
	 $tobool50 = ($call49|0)!=(0);
	 if ($tobool50) {
	  $call54 = (_calloc(1,36)|0);
	  $ipct = $call54;
	  $41 = $fd;
	  $42 = $ipct;
	  $fd55 = (($42) + 8|0);
	  HEAP32[$fd55>>2] = $41;
	  $43 = $url$addr;
	  $host56 = (($43) + 16|0);
	  $44 = HEAP32[$host56>>2]|0;
	  $call57 = (FUNCTION_TABLE_ii[3 & 15]($44)|0);
	  $45 = $ipct;
	  HEAP32[$45>>2] = $call57;
	  $46 = $ipct;
	  $read_func = (($46) + 28|0);
	  HEAP32[$read_func>>2] = 5;
	  $47 = $ipct;
	  $write_func = (($47) + 24|0);
	  HEAP32[$write_func>>2] = 6;
	  $48 = $ipct;
	  $destroy_func = (($48) + 32|0);
	  HEAP32[$destroy_func>>2] = 7;
	  $49 = $ipct;
	  $retval = $49;
	  $50 = $retval;
	  STACKTOP = sp;return ($50|0);
	 } else {
	  $40 = $fd;
	  (_close(($40|0))|0);
	  $retval = 0;
	  $50 = $retval;
	  STACKTOP = sp;return ($50|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_tcp_read($ipct,$buffer,$len) {
	 $ipct = $ipct|0;
	 $buffer = $buffer|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buffer$addr = 0, $call = 0, $fd = 0, $fd4 = 0, $ipct$addr = 0, $len$addr = 0, $ret = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0;
	 var $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $ipct$addr = $ipct;
	 $buffer$addr = $buffer;
	 $len$addr = $len;
	 $0 = $ipct$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6128;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6168;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5952;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 53;
	  _xmmsc_log(0,2,6048,$vararg_buffer);
	  $retval = -1;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $buffer$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $ipct$addr;
	  $fd4 = (($2) + 8|0);
	  $3 = HEAP32[$fd4>>2]|0;
	  $fd = $3;
	  $4 = $fd;
	  $5 = $buffer$addr;
	  $6 = $len$addr;
	  $call = (_recv(($4|0),($5|0),($6|0),0)|0);
	  $ret = $call;
	  $7 = $ret;
	  $retval = $7;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 6160;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 6168;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 5952;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 54;
	  _xmmsc_log(0,2,6048,$vararg_buffer4);
	  $retval = -1;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_tcp_write($ipct,$buffer,$len) {
	 $ipct = $ipct|0;
	 $buffer = $buffer|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buffer$addr = 0, $call = 0, $fd = 0, $fd4 = 0, $ipct$addr = 0, $len$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer = sp + 16|0;
	 $ipct$addr = $ipct;
	 $buffer$addr = $buffer;
	 $len$addr = $len;
	 $0 = $ipct$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6128;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6136;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5952;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 67;
	  _xmmsc_log(0,2,6048,$vararg_buffer);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $buffer$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $ipct$addr;
	  $fd4 = (($2) + 8|0);
	  $3 = HEAP32[$fd4>>2]|0;
	  $fd = $3;
	  $4 = $fd;
	  $5 = $buffer$addr;
	  $6 = $len$addr;
	  $call = (_send(($4|0),($5|0),($6|0),0)|0);
	  $retval = $call;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 6160;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 6136;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 5952;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 68;
	  _xmmsc_log(0,2,6048,$vararg_buffer4);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_tcp_destroy($ipct) {
	 $ipct = $ipct|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $fd = 0, $ipct$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipct$addr = $ipct;
	 $0 = $ipct$addr;
	 $1 = HEAP32[$0>>2]|0;
	 _free($1);
	 $2 = $ipct$addr;
	 $fd = (($2) + 8|0);
	 $3 = HEAP32[$fd>>2]|0;
	 (_close(($3|0))|0);
	 STACKTOP = sp;return;
	}
	function _xmms_ipc_tcp_server_init($url,$ipv6) {
	 $url = $url|0;
	 $ipv6 = $ipv6|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_nodelay = 0, $_reuseaddr = 0, $accept_func = 0, $addrinfo = 0, $addrinfos = 0, $ai_addr = 0, $ai_addrlen = 0, $ai_family = 0;
	 var $ai_family26 = 0, $ai_next = 0, $ai_protocol = 0, $ai_protocol28 = 0, $ai_socktype = 0, $ai_socktype27 = 0, $call = 0, $call21 = 0, $call29 = 0, $call30 = 0, $call36 = 0, $call38 = 0, $call49 = 0, $call54 = 0, $call57 = 0, $cmp = 0, $cmp39 = 0, $cmp47 = 0, $cond = 0, $cond12 = 0;
	 var $cond20 = 0, $cond3 = 0, $conv = 0, $conv14 = 0, $conv6 = 0, $destroy_func = 0, $fd = 0, $fd55 = 0, $gai_errno = 0, $hints = 0, $host = 0, $host4 = 0, $host56 = 0, $host9 = 0, $ipct = 0, $ipv6$addr = 0, $nodelay = 0, $port = 0, $port17 = 0, $read_func = 0;
	 var $retval = 0, $reuseaddr = 0, $tobool = 0, $tobool1 = 0, $tobool15 = 0, $tobool2 = 0, $tobool22 = 0, $tobool25 = 0, $tobool31 = 0, $tobool44 = 0, $tobool50 = 0, $tobool7 = 0, $url$addr = 0, $write_func = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $hints = sp + 40|0;
	 $addrinfos = sp + 16|0;
	 $_reuseaddr = sp + 24|0;
	 $_nodelay = sp + 4|0;
	 $url$addr = $url;
	 $ipv6$addr = $ipv6;
	 $fd = -1;
	 $call = (_xmms_sockets_initialize()|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  $retval = 0;
	  $51 = $retval;
	  STACKTOP = sp;return ($51|0);
	 }
	 ;HEAP32[$hints+0>>2]=0|0;HEAP32[$hints+4>>2]=0|0;HEAP32[$hints+8>>2]=0|0;HEAP32[$hints+12>>2]=0|0;HEAP32[$hints+16>>2]=0|0;HEAP32[$hints+20>>2]=0|0;HEAP32[$hints+24>>2]=0|0;HEAP32[$hints+28>>2]=0|0;
	 HEAP32[$hints>>2] = 1;
	 $0 = $url$addr;
	 $host = (($0) + 16|0);
	 $1 = HEAP32[$host>>2]|0;
	 $2 = HEAP8[$1>>0]|0;
	 $conv = $2 << 24 >> 24;
	 $tobool1 = ($conv|0)!=(0);
	 if ($tobool1) {
	  $3 = $ipv6$addr;
	  $tobool2 = ($3|0)!=(0);
	  $cond = $tobool2 ? 10 : 2;
	  $cond3 = $cond;
	 } else {
	  $cond3 = 0;
	 }
	 $ai_family = (($hints) + 4|0);
	 HEAP32[$ai_family>>2] = $cond3;
	 $ai_socktype = (($hints) + 8|0);
	 HEAP32[$ai_socktype>>2] = 1;
	 $ai_protocol = (($hints) + 12|0);
	 HEAP32[$ai_protocol>>2] = 0;
	 $4 = $url$addr;
	 $host4 = (($4) + 16|0);
	 $5 = HEAP32[$host4>>2]|0;
	 $6 = HEAP8[$5>>0]|0;
	 $conv6 = $6 << 24 >> 24;
	 $tobool7 = ($conv6|0)!=(0);
	 if ($tobool7) {
	  $7 = $url$addr;
	  $host9 = (($7) + 16|0);
	  $8 = HEAP32[$host9>>2]|0;
	  $cond12 = $8;
	 } else {
	  $cond12 = 0;
	 }
	 $9 = $url$addr;
	 $port = (($9) + 20|0);
	 $10 = HEAP32[$port>>2]|0;
	 $11 = HEAP8[$10>>0]|0;
	 $conv14 = $11 << 24 >> 24;
	 $tobool15 = ($conv14|0)!=(0);
	 if ($tobool15) {
	  $12 = $url$addr;
	  $port17 = (($12) + 20|0);
	  $13 = HEAP32[$port17>>2]|0;
	  $cond20 = $13;
	 } else {
	  $cond20 = 5928;
	 }
	 $call21 = (_xmms_getaddrinfo($cond12,$cond20,$hints,$addrinfos)|0);
	 $gai_errno = $call21;
	 $tobool22 = ($call21|0)!=(0);
	 if ($tobool22) {
	  $retval = 0;
	  $51 = $retval;
	  STACKTOP = sp;return ($51|0);
	 }
	 $14 = HEAP32[$addrinfos>>2]|0;
	 $addrinfo = $14;
	 while(1) {
	  $15 = $addrinfo;
	  $tobool25 = ($15|0)!=(0|0);
	  if (!($tobool25)) {
	   break;
	  }
	  HEAP32[$_reuseaddr>>2] = 1;
	  HEAP32[$_nodelay>>2] = 1;
	  $reuseaddr = $_reuseaddr;
	  $nodelay = $_nodelay;
	  $16 = $addrinfo;
	  $ai_family26 = (($16) + 4|0);
	  $17 = HEAP32[$ai_family26>>2]|0;
	  $18 = $addrinfo;
	  $ai_socktype27 = (($18) + 8|0);
	  $19 = HEAP32[$ai_socktype27>>2]|0;
	  $20 = $addrinfo;
	  $ai_protocol28 = (($20) + 12|0);
	  $21 = HEAP32[$ai_protocol28>>2]|0;
	  $call29 = (_socket(($17|0),($19|0),($21|0))|0);
	  $fd = $call29;
	  $22 = $fd;
	  $call30 = (_xmms_socket_valid($22)|0);
	  $tobool31 = ($call30|0)!=(0);
	  if (!($tobool31)) {
	   label = 17;
	   break;
	  }
	  $23 = $fd;
	  $24 = $reuseaddr;
	  (_setsockopt(($23|0),1,2,($24|0),4)|0);
	  $25 = $fd;
	  $26 = $nodelay;
	  (_setsockopt(($25|0),6,1,($26|0),4)|0);
	  $27 = $fd;
	  $28 = $addrinfo;
	  $ai_addr = (($28) + 20|0);
	  $29 = HEAP32[$ai_addr>>2]|0;
	  $30 = $addrinfo;
	  $ai_addrlen = (($30) + 16|0);
	  $31 = HEAP32[$ai_addrlen>>2]|0;
	  $call36 = (_bind(($27|0),($29|0),($31|0))|0);
	  $cmp = ($call36|0)!=(-1);
	  if ($cmp) {
	   $32 = $fd;
	   $call38 = (_listen(($32|0),128)|0);
	   $cmp39 = ($call38|0)!=(-1);
	   if ($cmp39) {
	    label = 20;
	    break;
	   }
	  }
	  $33 = $fd;
	  (_close(($33|0))|0);
	  $34 = $addrinfo;
	  $ai_next = (($34) + 28|0);
	  $35 = HEAP32[$ai_next>>2]|0;
	  $addrinfo = $35;
	 }
	 if ((label|0) == 17) {
	  $retval = 0;
	  $51 = $retval;
	  STACKTOP = sp;return ($51|0);
	 }
	 else if ((label|0) == 20) {
	 }
	 $36 = HEAP32[$addrinfos>>2]|0;
	 _xmms_freeaddrinfo($36);
	 $37 = $addrinfo;
	 $tobool44 = ($37|0)!=(0|0);
	 if (!($tobool44)) {
	  $retval = 0;
	  $51 = $retval;
	  STACKTOP = sp;return ($51|0);
	 }
	 $38 = $fd;
	 $cmp47 = ($38|0)!=(-1);
	 if (!($cmp47)) {
	  ___assert_fail((5936|0),(5952|0),238,(6016|0));
	  // unreachable;
	 }
	 $39 = $fd;
	 $call49 = (_xmms_socket_set_nonblock($39)|0);
	 $tobool50 = ($call49|0)!=(0);
	 if ($tobool50) {
	  $call54 = (_calloc(1,36)|0);
	  $ipct = $call54;
	  $41 = $fd;
	  $42 = $ipct;
	  $fd55 = (($42) + 8|0);
	  HEAP32[$fd55>>2] = $41;
	  $43 = $url$addr;
	  $host56 = (($43) + 16|0);
	  $44 = HEAP32[$host56>>2]|0;
	  $call57 = (FUNCTION_TABLE_ii[3 & 15]($44)|0);
	  $45 = $ipct;
	  HEAP32[$45>>2] = $call57;
	  $46 = $ipct;
	  $read_func = (($46) + 28|0);
	  HEAP32[$read_func>>2] = 5;
	  $47 = $ipct;
	  $write_func = (($47) + 24|0);
	  HEAP32[$write_func>>2] = 6;
	  $48 = $ipct;
	  $accept_func = (($48) + 20|0);
	  HEAP32[$accept_func>>2] = 8;
	  $49 = $ipct;
	  $destroy_func = (($49) + 32|0);
	  HEAP32[$destroy_func>>2] = 7;
	  $50 = $ipct;
	  $retval = $50;
	  $51 = $retval;
	  STACKTOP = sp;return ($51|0);
	 } else {
	  $40 = $fd;
	  (_close(($40|0))|0);
	  $retval = 0;
	  $51 = $retval;
	  STACKTOP = sp;return ($51|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_tcp_accept($transport) {
	 $transport = $transport|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_nodelay = 0, $_reuseaddr = 0, $call = 0;
	 var $call12 = 0, $call2 = 0, $call5 = 0, $destroy_func = 0, $fd = 0, $fd1 = 0, $fd13 = 0, $nodelay = 0, $read_func = 0, $ret = 0, $retval = 0, $reuseaddr = 0, $sockaddr = 0, $socklen = 0, $tobool = 0, $tobool3 = 0, $tobool6 = 0, $transport$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $write_func = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $sockaddr = sp + 56|0;
	 $socklen = sp + 16|0;
	 $_reuseaddr = sp + 24|0;
	 $_nodelay = sp + 40|0;
	 $transport$addr = $transport;
	 $0 = $transport$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6088;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6104;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 5952;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 155;
	  _xmmsc_log(0,2,6048,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 HEAP32[$socklen>>2] = 16;
	 $1 = $transport$addr;
	 $fd1 = (($1) + 8|0);
	 $2 = HEAP32[$fd1>>2]|0;
	 $call = (_accept(($2|0),($sockaddr|0),($socklen|0))|0);
	 $fd = $call;
	 $3 = $fd;
	 $call2 = (_xmms_socket_valid($3)|0);
	 $tobool3 = ($call2|0)!=(0);
	 if (!($tobool3)) {
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 HEAP32[$_reuseaddr>>2] = 1;
	 HEAP32[$_nodelay>>2] = 1;
	 $reuseaddr = $_reuseaddr;
	 $nodelay = $_nodelay;
	 $4 = $fd;
	 $call5 = (_xmms_socket_set_nonblock($4)|0);
	 $tobool6 = ($call5|0)!=(0);
	 if ($tobool6) {
	  $6 = $fd;
	  $7 = $reuseaddr;
	  (_setsockopt(($6|0),1,2,($7|0),4)|0);
	  $8 = $fd;
	  $9 = $nodelay;
	  (_setsockopt(($8|0),6,1,($9|0),4)|0);
	  $call12 = (_calloc(1,36)|0);
	  $ret = $call12;
	  $10 = $fd;
	  $11 = $ret;
	  $fd13 = (($11) + 8|0);
	  HEAP32[$fd13>>2] = $10;
	  $12 = $ret;
	  $read_func = (($12) + 28|0);
	  HEAP32[$read_func>>2] = 5;
	  $13 = $ret;
	  $write_func = (($13) + 24|0);
	  HEAP32[$write_func>>2] = 6;
	  $14 = $ret;
	  $destroy_func = (($14) + 32|0);
	  HEAP32[$destroy_func>>2] = 7;
	  $15 = $ret;
	  $retval = $15;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 } else {
	  $5 = $fd;
	  (_close(($5|0))|0);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_transport_destroy($ipct) {
	 $ipct = $ipct|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $destroy_func = 0, $ipct$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipct$addr = $ipct;
	 $0 = $ipct$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $ipct$addr;
	  $destroy_func = (($1) + 32|0);
	  $2 = HEAP32[$destroy_func>>2]|0;
	  $3 = $ipct$addr;
	  FUNCTION_TABLE_vi[$2 & 15]($3);
	  $4 = $ipct$addr;
	  _free($4);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 6232;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6240;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 6272;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 31;
	  _xmmsc_log(0,2,6192,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmms_ipc_transport_read($ipct,$buffer,$len) {
	 $ipct = $ipct|0;
	 $buffer = $buffer|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buffer$addr = 0, $call = 0, $ipct$addr = 0, $len$addr = 0, $read_func = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipct$addr = $ipct;
	 $buffer$addr = $buffer;
	 $len$addr = $len;
	 $0 = $ipct$addr;
	 $read_func = (($0) + 28|0);
	 $1 = HEAP32[$read_func>>2]|0;
	 $2 = $ipct$addr;
	 $3 = $buffer$addr;
	 $4 = $len$addr;
	 $call = (FUNCTION_TABLE_iiii[$1 & 31]($2,$3,$4)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmms_ipc_transport_write($ipct,$buffer,$len) {
	 $ipct = $ipct|0;
	 $buffer = $buffer|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $buffer$addr = 0, $call = 0, $ipct$addr = 0, $len$addr = 0, $write_func = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipct$addr = $ipct;
	 $buffer$addr = $buffer;
	 $len$addr = $len;
	 $0 = $ipct$addr;
	 $write_func = (($0) + 24|0);
	 $1 = HEAP32[$write_func>>2]|0;
	 $2 = $ipct$addr;
	 $3 = $buffer$addr;
	 $4 = $len$addr;
	 $call = (FUNCTION_TABLE_iiii[$1 & 31]($2,$3,$4)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmms_ipc_transport_fd_get($ipct) {
	 $ipct = $ipct|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $fd = 0, $ipct$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipct$addr = $ipct;
	 $0 = $ipct$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $ipct$addr;
	  $fd = (($1) + 8|0);
	  $2 = HEAP32[$fd>>2]|0;
	  $retval = $2;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 6232;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6304;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 6272;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 53;
	  _xmmsc_log(0,2,6192,$vararg_buffer);
	  $retval = -1;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_server_accept($ipct) {
	 $ipct = $ipct|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $accept_func = 0, $accept_func4 = 0, $call = 0, $ipct$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipct$addr = $ipct;
	 $0 = $ipct$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6232;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6336;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 6272;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 60;
	  _xmmsc_log(0,2,6192,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $ipct$addr;
	 $accept_func = (($1) + 20|0);
	 $2 = HEAP32[$accept_func>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if ($tobool1) {
	  $3 = $ipct$addr;
	  $accept_func4 = (($3) + 20|0);
	  $4 = HEAP32[$accept_func4>>2]|0;
	  $5 = $ipct$addr;
	  $call = (FUNCTION_TABLE_ii[$4 & 15]($5)|0);
	  $retval = $call;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_hostname($path) {
	 $path = $path|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call1 = 0, $call2 = 0, $call6 = 0, $host = 0, $host5 = 0, $path$addr = 0, $ret = 0, $tobool = 0, $tobool3 = 0, $url = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $path$addr = $path;
	 $ret = 0;
	 $0 = $path$addr;
	 $call = (_parse_url($0)|0);
	 $url = $call;
	 $1 = $url;
	 $2 = HEAP32[$1>>2]|0;
	 $call1 = (_strcasecmp($2,6360)|0);
	 $tobool = ($call1|0)!=(0);
	 if ($tobool) {
	  $7 = $url;
	  _free_url($7);
	  $8 = $ret;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $url;
	 $host = (($3) + 16|0);
	 $4 = HEAP32[$host>>2]|0;
	 $call2 = (_strlen(($4|0))|0);
	 $tobool3 = ($call2|0)!=(0);
	 if ($tobool3) {
	  $5 = $url;
	  $host5 = (($5) + 16|0);
	  $6 = HEAP32[$host5>>2]|0;
	  $call6 = (FUNCTION_TABLE_ii[3 & 15]($6)|0);
	  $ret = $call6;
	 }
	 $7 = $url;
	 _free_url($7);
	 $8 = $ret;
	 STACKTOP = sp;return ($8|0);
	}
	function _parse_url($url) {
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr36 = 0, $add$ptr42 = 0, $arrayidx41 = 0, $call = 0, $call1 = 0, $call10 = 0, $call11 = 0, $call13 = 0, $call16 = 0, $call17 = 0, $call19 = 0, $call22 = 0, $call23 = 0;
	 var $call27 = 0, $call30 = 0, $call33 = 0, $call34 = 0, $call4 = 0, $call43 = 0, $call44 = 0, $call48 = 0, $call5 = 0, $call51 = 0, $call52 = 0, $call7 = 0, $cmp = 0, $conv = 0, $end = 0, $host = 0, $host58 = 0, $ipv6_host = 0, $ipv6_host47 = 0, $password = 0;
	 var $password57 = 0, $path = 0, $path60 = 0, $port = 0, $port59 = 0, $protocol = 0, $result = 0, $retval = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast37 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast38 = 0, $sub$ptr$sub = 0, $sub$ptr$sub39 = 0, $sub40 = 0, $tmp1 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0;
	 var $tobool = 0, $tobool14 = 0, $tobool2 = 0, $tobool20 = 0, $tobool28 = 0, $tobool31 = 0, $tobool49 = 0, $tobool8 = 0, $url$addr = 0, $username = 0, $username56 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tmp1 = sp + 44|0;
	 $tmp2 = sp + 36|0;
	 $tmp3 = sp + 32|0;
	 $tmp4 = sp + 40|0;
	 $protocol = sp + 52|0;
	 $username = sp + 20|0;
	 $password = sp;
	 $host = sp + 28|0;
	 $port = sp + 4|0;
	 $path = sp + 24|0;
	 $url$addr = $url;
	 $call = (_calloc(1,28)|0);
	 $result = $call;
	 $0 = $result;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 0;
	  $45 = $retval;
	  STACKTOP = sp;return ($45|0);
	 }
	 $1 = $url$addr;
	 $call1 = (_strstrsplit($1,6368,$protocol,$tmp1)|0);
	 $tobool2 = ($call1|0)!=(0);
	 if ($tobool2) {
	  $call4 = (FUNCTION_TABLE_ii[3 & 15](6376)|0);
	  HEAP32[$protocol>>2] = $call4;
	  $2 = $url$addr;
	  $call5 = (FUNCTION_TABLE_ii[3 & 15]($2)|0);
	  HEAP32[$tmp1>>2] = $call5;
	 }
	 $3 = HEAP32[$tmp1>>2]|0;
	 $call7 = (_strchrsplit($3,47,$tmp2,$path)|0);
	 $tobool8 = ($call7|0)!=(0);
	 if ($tobool8) {
	  $4 = HEAP32[$tmp1>>2]|0;
	  $call10 = (FUNCTION_TABLE_ii[3 & 15]($4)|0);
	  HEAP32[$tmp2>>2] = $call10;
	  $call11 = (FUNCTION_TABLE_ii[3 & 15](6376)|0);
	  HEAP32[$path>>2] = $call11;
	 }
	 $5 = HEAP32[$tmp2>>2]|0;
	 $call13 = (_strchrsplit($5,64,$tmp3,$tmp4)|0);
	 $tobool14 = ($call13|0)!=(0);
	 if ($tobool14) {
	  $call16 = (FUNCTION_TABLE_ii[3 & 15](6376)|0);
	  HEAP32[$tmp3>>2] = $call16;
	  $6 = HEAP32[$tmp2>>2]|0;
	  $call17 = (FUNCTION_TABLE_ii[3 & 15]($6)|0);
	  HEAP32[$tmp4>>2] = $call17;
	 }
	 $7 = HEAP32[$tmp3>>2]|0;
	 $call19 = (_strchrsplit($7,58,$username,$password)|0);
	 $tobool20 = ($call19|0)!=(0);
	 if ($tobool20) {
	  $8 = HEAP32[$tmp3>>2]|0;
	  $call22 = (FUNCTION_TABLE_ii[3 & 15]($8)|0);
	  HEAP32[$username>>2] = $call22;
	  $call23 = (FUNCTION_TABLE_ii[3 & 15](6376)|0);
	  HEAP32[$password>>2] = $call23;
	 }
	 $9 = HEAP32[$tmp4>>2]|0;
	 $10 = HEAP8[$9>>0]|0;
	 $conv = $10 << 24 >> 24;
	 $cmp = ($conv|0)==(91);
	 if ($cmp) {
	  $11 = $result;
	  $ipv6_host = (($11) + 12|0);
	  HEAP32[$ipv6_host>>2] = 1;
	  $12 = HEAP32[$tmp4>>2]|0;
	  $add$ptr = (($12) + 1|0);
	  $call27 = (_strchr($add$ptr,93)|0);
	  $end = $call27;
	  $13 = $end;
	  $tobool28 = ($13|0)!=(0|0);
	  if ($tobool28) {
	   $14 = HEAP32[$tmp4>>2]|0;
	   $15 = $end;
	   $call30 = (_strpchrsplit($14,$15,58,$host,$port)|0);
	   $tobool31 = ($call30|0)!=(0);
	   if ($tobool31) {
	    $16 = HEAP32[$tmp4>>2]|0;
	    $call33 = (FUNCTION_TABLE_ii[3 & 15]($16)|0);
	    HEAP32[$host>>2] = $call33;
	    $call34 = (FUNCTION_TABLE_ii[3 & 15](6376)|0);
	    HEAP32[$port>>2] = $call34;
	   }
	   $17 = HEAP32[$host>>2]|0;
	   $18 = HEAP32[$host>>2]|0;
	   $add$ptr36 = (($18) + 1|0);
	   $19 = $end;
	   $20 = HEAP32[$tmp4>>2]|0;
	   $sub$ptr$lhs$cast = $19;
	   $sub$ptr$rhs$cast = $20;
	   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	   $sub = (($sub$ptr$sub) - 1)|0;
	   _memmove(($17|0),($add$ptr36|0),($sub|0))|0;
	   $21 = $end;
	   $22 = HEAP32[$tmp4>>2]|0;
	   $sub$ptr$lhs$cast37 = $21;
	   $sub$ptr$rhs$cast38 = $22;
	   $sub$ptr$sub39 = (($sub$ptr$lhs$cast37) - ($sub$ptr$rhs$cast38))|0;
	   $sub40 = (($sub$ptr$sub39) - 1)|0;
	   $23 = HEAP32[$host>>2]|0;
	   $arrayidx41 = (($23) + ($sub40)|0);
	   HEAP8[$arrayidx41>>0] = 0;
	  } else {
	   $24 = HEAP32[$tmp4>>2]|0;
	   $add$ptr42 = (($24) + 1|0);
	   $call43 = (FUNCTION_TABLE_ii[3 & 15]($add$ptr42)|0);
	   HEAP32[$host>>2] = $call43;
	   $call44 = (FUNCTION_TABLE_ii[3 & 15](6376)|0);
	   HEAP32[$port>>2] = $call44;
	  }
	 } else {
	  $25 = $result;
	  $ipv6_host47 = (($25) + 12|0);
	  HEAP32[$ipv6_host47>>2] = 0;
	  $26 = HEAP32[$tmp4>>2]|0;
	  $call48 = (_strrchrsplit($26,58,$host,$port)|0);
	  $tobool49 = ($call48|0)!=(0);
	  if ($tobool49) {
	   $27 = HEAP32[$tmp4>>2]|0;
	   $call51 = (FUNCTION_TABLE_ii[3 & 15]($27)|0);
	   HEAP32[$host>>2] = $call51;
	   $call52 = (FUNCTION_TABLE_ii[3 & 15](6376)|0);
	   HEAP32[$port>>2] = $call52;
	  }
	 }
	 $28 = HEAP32[$tmp1>>2]|0;
	 _free($28);
	 $29 = HEAP32[$tmp2>>2]|0;
	 _free($29);
	 $30 = HEAP32[$tmp3>>2]|0;
	 _free($30);
	 $31 = HEAP32[$tmp4>>2]|0;
	 _free($31);
	 $32 = HEAP32[$protocol>>2]|0;
	 $33 = $result;
	 HEAP32[$33>>2] = $32;
	 $34 = HEAP32[$username>>2]|0;
	 $35 = $result;
	 $username56 = (($35) + 4|0);
	 HEAP32[$username56>>2] = $34;
	 $36 = HEAP32[$password>>2]|0;
	 $37 = $result;
	 $password57 = (($37) + 8|0);
	 HEAP32[$password57>>2] = $36;
	 $38 = HEAP32[$host>>2]|0;
	 $39 = $result;
	 $host58 = (($39) + 16|0);
	 HEAP32[$host58>>2] = $38;
	 $40 = HEAP32[$port>>2]|0;
	 $41 = $result;
	 $port59 = (($41) + 20|0);
	 HEAP32[$port59>>2] = $40;
	 $42 = HEAP32[$path>>2]|0;
	 $43 = $result;
	 $path60 = (($43) + 24|0);
	 HEAP32[$path60>>2] = $42;
	 $44 = $result;
	 $retval = $44;
	 $45 = $retval;
	 STACKTOP = sp;return ($45|0);
	}
	function _strstrsplit($str,$sep,$former_result,$latter_result) {
	 $str = $str|0;
	 $sep = $sep|0;
	 $former_result = $former_result|0;
	 $latter_result = $latter_result|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $add = 0, $add$ptr = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call12 = 0, $call13 = 0, $former = 0, $former_result$addr = 0, $latter = 0, $latter_result$addr = 0, $retval = 0, $sep$addr = 0, $split = 0, $str$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast5 = 0, $sub$ptr$lhs$cast9 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast10 = 0;
	 var $sub$ptr$rhs$cast6 = 0, $sub$ptr$sub = 0, $sub$ptr$sub11 = 0, $sub$ptr$sub7 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $str$addr = $str;
	 $sep$addr = $sep;
	 $former_result$addr = $former_result;
	 $latter_result$addr = $latter_result;
	 $0 = $str$addr;
	 $1 = $sep$addr;
	 $call = (_strstr($0,$1)|0);
	 $split = $call;
	 $2 = $split;
	 $tobool = ($2|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 1;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 $3 = $split;
	 $4 = $str$addr;
	 $sub$ptr$lhs$cast = $3;
	 $sub$ptr$rhs$cast = $4;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $add = (($sub$ptr$sub) + 1)|0;
	 $call1 = (_malloc($add)|0);
	 $former = $call1;
	 $5 = $former;
	 $tobool2 = ($5|0)!=(0|0);
	 if ($tobool2) {
	  $6 = $former;
	  $7 = $str$addr;
	  $8 = $split;
	  $9 = $str$addr;
	  $sub$ptr$lhs$cast5 = $8;
	  $sub$ptr$rhs$cast6 = $9;
	  $sub$ptr$sub7 = (($sub$ptr$lhs$cast5) - ($sub$ptr$rhs$cast6))|0;
	  (_strncpy(($6|0),($7|0),($sub$ptr$sub7|0))|0);
	  $10 = $split;
	  $11 = $str$addr;
	  $sub$ptr$lhs$cast9 = $10;
	  $sub$ptr$rhs$cast10 = $11;
	  $sub$ptr$sub11 = (($sub$ptr$lhs$cast9) - ($sub$ptr$rhs$cast10))|0;
	  $12 = $former;
	  $arrayidx = (($12) + ($sub$ptr$sub11)|0);
	  HEAP8[$arrayidx>>0] = 0;
	  $13 = $split;
	  $14 = $sep$addr;
	  $call12 = (_strlen(($14|0))|0);
	  $add$ptr = (($13) + ($call12)|0);
	  $call13 = (FUNCTION_TABLE_ii[3 & 15]($add$ptr)|0);
	  $latter = $call13;
	  $15 = $former;
	  $16 = $former_result$addr;
	  HEAP32[$16>>2] = $15;
	  $17 = $latter;
	  $18 = $latter_result$addr;
	  HEAP32[$18>>2] = $17;
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 } else {
	  $retval = 1;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 return 0|0;
	}
	function _strchrsplit($str,$sep,$former_result,$latter_result) {
	 $str = $str|0;
	 $sep = $sep|0;
	 $former_result = $former_result|0;
	 $latter_result = $latter_result|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
	 var $add$ptr = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call12 = 0, $conv = 0, $former = 0, $former_result$addr = 0, $latter = 0, $latter_result$addr = 0, $retval = 0, $sep$addr = 0, $split = 0, $str$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast5 = 0, $sub$ptr$lhs$cast9 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast10 = 0, $sub$ptr$rhs$cast6 = 0;
	 var $sub$ptr$sub = 0, $sub$ptr$sub11 = 0, $sub$ptr$sub7 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $str$addr = $str;
	 $sep$addr = $sep;
	 $former_result$addr = $former_result;
	 $latter_result$addr = $latter_result;
	 $0 = $str$addr;
	 $1 = $sep$addr;
	 $conv = $1 << 24 >> 24;
	 $call = (_strchr($0,$conv)|0);
	 $split = $call;
	 $2 = $split;
	 $tobool = ($2|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 1;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 $3 = $split;
	 $4 = $str$addr;
	 $sub$ptr$lhs$cast = $3;
	 $sub$ptr$rhs$cast = $4;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $add = (($sub$ptr$sub) + 1)|0;
	 $call1 = (_malloc($add)|0);
	 $former = $call1;
	 $5 = $former;
	 $tobool2 = ($5|0)!=(0|0);
	 if ($tobool2) {
	  $6 = $former;
	  $7 = $str$addr;
	  $8 = $split;
	  $9 = $str$addr;
	  $sub$ptr$lhs$cast5 = $8;
	  $sub$ptr$rhs$cast6 = $9;
	  $sub$ptr$sub7 = (($sub$ptr$lhs$cast5) - ($sub$ptr$rhs$cast6))|0;
	  (_strncpy(($6|0),($7|0),($sub$ptr$sub7|0))|0);
	  $10 = $split;
	  $11 = $str$addr;
	  $sub$ptr$lhs$cast9 = $10;
	  $sub$ptr$rhs$cast10 = $11;
	  $sub$ptr$sub11 = (($sub$ptr$lhs$cast9) - ($sub$ptr$rhs$cast10))|0;
	  $12 = $former;
	  $arrayidx = (($12) + ($sub$ptr$sub11)|0);
	  HEAP8[$arrayidx>>0] = 0;
	  $13 = $split;
	  $add$ptr = (($13) + 1|0);
	  $call12 = (FUNCTION_TABLE_ii[3 & 15]($add$ptr)|0);
	  $latter = $call12;
	  $14 = $former;
	  $15 = $former_result$addr;
	  HEAP32[$15>>2] = $14;
	  $16 = $latter;
	  $17 = $latter_result$addr;
	  HEAP32[$17>>2] = $16;
	  $retval = 0;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 } else {
	  $retval = 1;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 return 0|0;
	}
	function _strpchrsplit($str,$pos,$sep,$former_result,$latter_result) {
	 $str = $str|0;
	 $pos = $pos|0;
	 $sep = $sep|0;
	 $former_result = $former_result|0;
	 $latter_result = $latter_result|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
	 var $add$ptr = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call12 = 0, $conv = 0, $former = 0, $former_result$addr = 0, $latter = 0, $latter_result$addr = 0, $pos$addr = 0, $retval = 0, $sep$addr = 0, $split = 0, $str$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast5 = 0, $sub$ptr$lhs$cast9 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast10 = 0;
	 var $sub$ptr$rhs$cast6 = 0, $sub$ptr$sub = 0, $sub$ptr$sub11 = 0, $sub$ptr$sub7 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $str$addr = $str;
	 $pos$addr = $pos;
	 $sep$addr = $sep;
	 $former_result$addr = $former_result;
	 $latter_result$addr = $latter_result;
	 $0 = $pos$addr;
	 $1 = $sep$addr;
	 $conv = $1 << 24 >> 24;
	 $call = (_strchr($0,$conv)|0);
	 $split = $call;
	 $2 = $split;
	 $tobool = ($2|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 1;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 $3 = $split;
	 $4 = $str$addr;
	 $sub$ptr$lhs$cast = $3;
	 $sub$ptr$rhs$cast = $4;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $add = (($sub$ptr$sub) + 1)|0;
	 $call1 = (_malloc($add)|0);
	 $former = $call1;
	 $5 = $former;
	 $tobool2 = ($5|0)!=(0|0);
	 if ($tobool2) {
	  $6 = $former;
	  $7 = $str$addr;
	  $8 = $split;
	  $9 = $str$addr;
	  $sub$ptr$lhs$cast5 = $8;
	  $sub$ptr$rhs$cast6 = $9;
	  $sub$ptr$sub7 = (($sub$ptr$lhs$cast5) - ($sub$ptr$rhs$cast6))|0;
	  (_strncpy(($6|0),($7|0),($sub$ptr$sub7|0))|0);
	  $10 = $split;
	  $11 = $str$addr;
	  $sub$ptr$lhs$cast9 = $10;
	  $sub$ptr$rhs$cast10 = $11;
	  $sub$ptr$sub11 = (($sub$ptr$lhs$cast9) - ($sub$ptr$rhs$cast10))|0;
	  $12 = $former;
	  $arrayidx = (($12) + ($sub$ptr$sub11)|0);
	  HEAP8[$arrayidx>>0] = 0;
	  $13 = $split;
	  $add$ptr = (($13) + 1|0);
	  $call12 = (FUNCTION_TABLE_ii[3 & 15]($add$ptr)|0);
	  $latter = $call12;
	  $14 = $former;
	  $15 = $former_result$addr;
	  HEAP32[$15>>2] = $14;
	  $16 = $latter;
	  $17 = $latter_result$addr;
	  HEAP32[$17>>2] = $16;
	  $retval = 0;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 } else {
	  $retval = 1;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 return 0|0;
	}
	function _strrchrsplit($str,$sep,$former_result,$latter_result) {
	 $str = $str|0;
	 $sep = $sep|0;
	 $former_result = $former_result|0;
	 $latter_result = $latter_result|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
	 var $add$ptr = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call12 = 0, $conv = 0, $former = 0, $former_result$addr = 0, $latter = 0, $latter_result$addr = 0, $retval = 0, $sep$addr = 0, $split = 0, $str$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast5 = 0, $sub$ptr$lhs$cast9 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast10 = 0, $sub$ptr$rhs$cast6 = 0;
	 var $sub$ptr$sub = 0, $sub$ptr$sub11 = 0, $sub$ptr$sub7 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $str$addr = $str;
	 $sep$addr = $sep;
	 $former_result$addr = $former_result;
	 $latter_result$addr = $latter_result;
	 $0 = $str$addr;
	 $1 = $sep$addr;
	 $conv = $1 << 24 >> 24;
	 $call = (_strrchr($0,$conv)|0);
	 $split = $call;
	 $2 = $split;
	 $tobool = ($2|0)!=(0|0);
	 if (!($tobool)) {
	  $retval = 1;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 $3 = $split;
	 $4 = $str$addr;
	 $sub$ptr$lhs$cast = $3;
	 $sub$ptr$rhs$cast = $4;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $add = (($sub$ptr$sub) + 1)|0;
	 $call1 = (_malloc($add)|0);
	 $former = $call1;
	 $5 = $former;
	 $tobool2 = ($5|0)!=(0|0);
	 if ($tobool2) {
	  $6 = $former;
	  $7 = $str$addr;
	  $8 = $split;
	  $9 = $str$addr;
	  $sub$ptr$lhs$cast5 = $8;
	  $sub$ptr$rhs$cast6 = $9;
	  $sub$ptr$sub7 = (($sub$ptr$lhs$cast5) - ($sub$ptr$rhs$cast6))|0;
	  (_strncpy(($6|0),($7|0),($sub$ptr$sub7|0))|0);
	  $10 = $split;
	  $11 = $str$addr;
	  $sub$ptr$lhs$cast9 = $10;
	  $sub$ptr$rhs$cast10 = $11;
	  $sub$ptr$sub11 = (($sub$ptr$lhs$cast9) - ($sub$ptr$rhs$cast10))|0;
	  $12 = $former;
	  $arrayidx = (($12) + ($sub$ptr$sub11)|0);
	  HEAP8[$arrayidx>>0] = 0;
	  $13 = $split;
	  $add$ptr = (($13) + 1|0);
	  $call12 = (FUNCTION_TABLE_ii[3 & 15]($add$ptr)|0);
	  $latter = $call12;
	  $14 = $former;
	  $15 = $former_result$addr;
	  HEAP32[$15>>2] = $14;
	  $16 = $latter;
	  $17 = $latter_result$addr;
	  HEAP32[$17>>2] = $16;
	  $retval = 0;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 } else {
	  $retval = 1;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 return 0|0;
	}
	function _free_url($url) {
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $host = 0, $password = 0, $path = 0, $port = 0, $url$addr = 0, $username = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $url$addr = $url;
	 $0 = $url$addr;
	 $1 = HEAP32[$0>>2]|0;
	 _free($1);
	 $2 = $url$addr;
	 $username = (($2) + 4|0);
	 $3 = HEAP32[$username>>2]|0;
	 _free($3);
	 $4 = $url$addr;
	 $password = (($4) + 8|0);
	 $5 = HEAP32[$password>>2]|0;
	 _free($5);
	 $6 = $url$addr;
	 $host = (($6) + 16|0);
	 $7 = HEAP32[$host>>2]|0;
	 _free($7);
	 $8 = $url$addr;
	 $port = (($8) + 20|0);
	 $9 = HEAP32[$port>>2]|0;
	 _free($9);
	 $10 = $url$addr;
	 $path = (($10) + 24|0);
	 $11 = HEAP32[$path>>2]|0;
	 _free($11);
	 $12 = $url$addr;
	 _free($12);
	 STACKTOP = sp;return;
	}
	function _xmms_ipc_usocket_client_init($url) {
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
	 var $7 = 0, $8 = 0, $9 = 0, $call = 0, $call12 = 0, $call17 = 0, $call2 = 0, $call20 = 0, $call7 = 0, $cmp = 0, $cmp13 = 0, $cmp3 = 0, $cmp8 = 0, $destroy_func = 0, $fd = 0, $fd18 = 0, $flags = 0, $ipct = 0, $or = 0, $path = 0;
	 var $path19 = 0, $read_func = 0, $retval = 0, $saddr = 0, $sun_path = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $write_func = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer1 = sp + 16|0;
	 $vararg_buffer = sp + 8|0;
	 $saddr = sp + 40|0;
	 $url$addr = $url;
	 $call = (_socket(1,1,0)|0);
	 $fd = $call;
	 $0 = $fd;
	 $cmp = ($0|0)==(-1);
	 if ($cmp) {
	  $retval = 0;
	  $22 = $retval;
	  STACKTOP = sp;return ($22|0);
	 }
	 HEAP16[$saddr>>1] = 1;
	 $sun_path = (($saddr) + 2|0);
	 $1 = $url$addr;
	 $path = (($1) + 24|0);
	 $2 = HEAP32[$path>>2]|0;
	 HEAP32[$vararg_buffer>>2] = $2;
	 (_snprintf($sun_path,108,6384,$vararg_buffer)|0);
	 $3 = $fd;
	 $call2 = (_connect(($3|0),($saddr|0),110)|0);
	 $cmp3 = ($call2|0)==(-1);
	 if ($cmp3) {
	  $4 = $fd;
	  (_close(($4|0))|0);
	  $retval = 0;
	  $22 = $retval;
	  STACKTOP = sp;return ($22|0);
	 }
	 $5 = $fd;
	 HEAP32[$vararg_buffer1>>2] = 0;
	 $call7 = (_fcntl(($5|0),3,($vararg_buffer1|0))|0);
	 $flags = $call7;
	 $6 = $flags;
	 $cmp8 = ($6|0)==(-1);
	 if ($cmp8) {
	  $7 = $fd;
	  (_close(($7|0))|0);
	  $retval = 0;
	  $22 = $retval;
	  STACKTOP = sp;return ($22|0);
	 }
	 $8 = $flags;
	 $or = $8 | 2048;
	 $flags = $or;
	 $9 = $fd;
	 $10 = $flags;
	 HEAP32[$vararg_buffer4>>2] = $10;
	 $call12 = (_fcntl(($9|0),4,($vararg_buffer4|0))|0);
	 $flags = $call12;
	 $11 = $flags;
	 $cmp13 = ($11|0)==(-1);
	 if ($cmp13) {
	  $12 = $fd;
	  (_close(($12|0))|0);
	  $retval = 0;
	  $22 = $retval;
	  STACKTOP = sp;return ($22|0);
	 } else {
	  $call17 = (_calloc(1,36)|0);
	  $ipct = $call17;
	  $13 = $fd;
	  $14 = $ipct;
	  $fd18 = (($14) + 8|0);
	  HEAP32[$fd18>>2] = $13;
	  $15 = $url$addr;
	  $path19 = (($15) + 24|0);
	  $16 = HEAP32[$path19>>2]|0;
	  $call20 = (FUNCTION_TABLE_ii[3 & 15]($16)|0);
	  $17 = $ipct;
	  HEAP32[$17>>2] = $call20;
	  $18 = $ipct;
	  $read_func = (($18) + 28|0);
	  HEAP32[$read_func>>2] = 9;
	  $19 = $ipct;
	  $write_func = (($19) + 24|0);
	  HEAP32[$write_func>>2] = 10;
	  $20 = $ipct;
	  $destroy_func = (($20) + 32|0);
	  HEAP32[$destroy_func>>2] = 11;
	  $21 = $ipct;
	  $retval = $21;
	  $22 = $retval;
	  STACKTOP = sp;return ($22|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_usocket_read($ipct,$buffer,$len) {
	 $ipct = $ipct|0;
	 $buffer = $buffer|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buffer$addr = 0, $call = 0, $fd = 0, $fd4 = 0, $ipct$addr = 0, $len$addr = 0, $ret = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0;
	 var $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $ipct$addr = $ipct;
	 $buffer$addr = $buffer;
	 $len$addr = $len;
	 $0 = $ipct$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6504;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6544;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 6472;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 48;
	  _xmmsc_log(0,2,6392,$vararg_buffer);
	  $retval = -1;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $buffer$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $ipct$addr;
	  $fd4 = (($2) + 8|0);
	  $3 = HEAP32[$fd4>>2]|0;
	  $fd = $3;
	  $4 = $fd;
	  $5 = $buffer$addr;
	  $6 = $len$addr;
	  $call = (_recv(($4|0),($5|0),($6|0),0)|0);
	  $ret = $call;
	  $7 = $ret;
	  $retval = $7;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 6536;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 6544;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 6472;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 49;
	  _xmmsc_log(0,2,6392,$vararg_buffer4);
	  $retval = -1;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_usocket_write($ipct,$buffer,$len) {
	 $ipct = $ipct|0;
	 $buffer = $buffer|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buffer$addr = 0, $call = 0, $fd = 0, $fd4 = 0, $ipct$addr = 0, $len$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer = sp + 16|0;
	 $ipct$addr = $ipct;
	 $buffer$addr = $buffer;
	 $len$addr = $len;
	 $0 = $ipct$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6504;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6512;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 6472;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 62;
	  _xmmsc_log(0,2,6392,$vararg_buffer);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $buffer$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $ipct$addr;
	  $fd4 = (($2) + 8|0);
	  $3 = HEAP32[$fd4>>2]|0;
	  $fd = $3;
	  $4 = $fd;
	  $5 = $buffer$addr;
	  $6 = $len$addr;
	  $call = (_send(($4|0),($5|0),($6|0),0)|0);
	  $retval = $call;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 6536;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 6512;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 6472;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 63;
	  _xmmsc_log(0,2,6392,$vararg_buffer4);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_usocket_destroy($ipct) {
	 $ipct = $ipct|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $fd = 0, $ipct$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipct$addr = $ipct;
	 $0 = $ipct$addr;
	 $1 = HEAP32[$0>>2]|0;
	 _free($1);
	 $2 = $ipct$addr;
	 $fd = (($2) + 8|0);
	 $3 = HEAP32[$fd>>2]|0;
	 (_close(($3|0))|0);
	 STACKTOP = sp;return;
	}
	function _xmms_ipc_usocket_server_init($url) {
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $accept_func = 0, $call = 0, $call16 = 0, $call22 = 0, $call27 = 0, $call32 = 0, $call35 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp17 = 0, $cmp23 = 0, $cmp28 = 0;
	 var $cmp5 = 0, $cmp8 = 0, $destroy_func = 0, $fd = 0, $fd33 = 0, $flags = 0, $ipct = 0, $or = 0, $path = 0, $path34 = 0, $read_func = 0, $retval = 0, $saddr = 0, $sun_path = 0, $sun_path12 = 0, $sun_path2 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
	 var $write_func = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer1 = sp + 16|0;
	 $vararg_buffer = sp + 8|0;
	 $saddr = sp + 40|0;
	 $url$addr = $url;
	 $call = (_socket(1,1,0)|0);
	 $fd = $call;
	 $0 = $fd;
	 $cmp = ($0|0)==(-1);
	 if ($cmp) {
	  $retval = 0;
	  $26 = $retval;
	  STACKTOP = sp;return ($26|0);
	 }
	 HEAP16[$saddr>>1] = 1;
	 $sun_path = (($saddr) + 2|0);
	 $1 = $url$addr;
	 $path = (($1) + 24|0);
	 $2 = HEAP32[$path>>2]|0;
	 HEAP32[$vararg_buffer>>2] = $2;
	 (_snprintf($sun_path,108,6384,$vararg_buffer)|0);
	 $sun_path2 = (($saddr) + 2|0);
	 $call4 = (_access(($sun_path2|0),0)|0);
	 $cmp5 = ($call4|0)==(0);
	 do {
	  if ($cmp5) {
	   $3 = $fd;
	   $call7 = (_connect(($3|0),($saddr|0),110)|0);
	   $cmp8 = ($call7|0)!=(-1);
	   if (!($cmp8)) {
	    $sun_path12 = (($saddr) + 2|0);
	    (_unlink(($sun_path12|0))|0);
	    break;
	   }
	   $4 = $fd;
	   (_close(($4|0))|0);
	   $retval = 0;
	   $26 = $retval;
	   STACKTOP = sp;return ($26|0);
	  }
	 } while(0);
	 $5 = $fd;
	 $call16 = (_bind(($5|0),($saddr|0),110)|0);
	 $cmp17 = ($call16|0)==(-1);
	 if ($cmp17) {
	  $6 = $fd;
	  (_close(($6|0))|0);
	  $retval = 0;
	  $26 = $retval;
	  STACKTOP = sp;return ($26|0);
	 }
	 $7 = $fd;
	 (_listen(($7|0),5)|0);
	 $8 = $fd;
	 HEAP32[$vararg_buffer1>>2] = 0;
	 $call22 = (_fcntl(($8|0),3,($vararg_buffer1|0))|0);
	 $flags = $call22;
	 $9 = $flags;
	 $cmp23 = ($9|0)==(-1);
	 if ($cmp23) {
	  $10 = $fd;
	  (_close(($10|0))|0);
	  $retval = 0;
	  $26 = $retval;
	  STACKTOP = sp;return ($26|0);
	 }
	 $11 = $flags;
	 $or = $11 | 2048;
	 $flags = $or;
	 $12 = $fd;
	 $13 = $flags;
	 HEAP32[$vararg_buffer4>>2] = $13;
	 $call27 = (_fcntl(($12|0),4,($vararg_buffer4|0))|0);
	 $flags = $call27;
	 $14 = $flags;
	 $cmp28 = ($14|0)==(-1);
	 if ($cmp28) {
	  $15 = $fd;
	  (_close(($15|0))|0);
	  $retval = 0;
	  $26 = $retval;
	  STACKTOP = sp;return ($26|0);
	 } else {
	  $call32 = (_calloc(1,36)|0);
	  $ipct = $call32;
	  $16 = $fd;
	  $17 = $ipct;
	  $fd33 = (($17) + 8|0);
	  HEAP32[$fd33>>2] = $16;
	  $18 = $url$addr;
	  $path34 = (($18) + 24|0);
	  $19 = HEAP32[$path34>>2]|0;
	  $call35 = (FUNCTION_TABLE_ii[3 & 15]($19)|0);
	  $20 = $ipct;
	  HEAP32[$20>>2] = $call35;
	  $21 = $ipct;
	  $read_func = (($21) + 28|0);
	  HEAP32[$read_func>>2] = 9;
	  $22 = $ipct;
	  $write_func = (($22) + 24|0);
	  HEAP32[$write_func>>2] = 10;
	  $23 = $ipct;
	  $accept_func = (($23) + 20|0);
	  HEAP32[$accept_func>>2] = 12;
	  $24 = $ipct;
	  $destroy_func = (($24) + 32|0);
	  HEAP32[$destroy_func>>2] = 11;
	  $25 = $ipct;
	  $retval = $25;
	  $26 = $retval;
	  STACKTOP = sp;return ($26|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_usocket_accept($transport) {
	 $transport = $transport|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0;
	 var $call13 = 0, $call3 = 0, $call8 = 0, $cmp = 0, $cmp4 = 0, $cmp9 = 0, $destroy_func = 0, $fd = 0, $fd1 = 0, $fd14 = 0, $flags = 0, $or = 0, $read_func = 0, $ret = 0, $retval = 0, $sin = 0, $sin_len = 0, $tobool = 0, $transport$addr = 0, $vararg_buffer = 0;
	 var $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $write_func = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer7 = sp;
	 $vararg_buffer4 = sp + 24|0;
	 $vararg_buffer = sp + 8|0;
	 $sin = sp + 52|0;
	 $sin_len = sp + 40|0;
	 $transport$addr = $transport;
	 $0 = $transport$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6432;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6448;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 6472;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 125;
	  _xmmsc_log(0,2,6392,$vararg_buffer);
	  $retval = 0;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 HEAP32[$sin_len>>2] = 110;
	 $1 = $transport$addr;
	 $fd1 = (($1) + 8|0);
	 $2 = HEAP32[$fd1>>2]|0;
	 $call = (_accept(($2|0),($sin|0),($sin_len|0))|0);
	 $fd = $call;
	 $3 = $fd;
	 $cmp = ($3|0)>=(0);
	 if (!($cmp)) {
	  $retval = 0;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 $4 = $fd;
	 HEAP32[$vararg_buffer4>>2] = 0;
	 $call3 = (_fcntl(($4|0),3,($vararg_buffer4|0))|0);
	 $flags = $call3;
	 $5 = $flags;
	 $cmp4 = ($5|0)==(-1);
	 if ($cmp4) {
	  $6 = $fd;
	  (_close(($6|0))|0);
	  $retval = 0;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 $7 = $flags;
	 $or = $7 | 2048;
	 $flags = $or;
	 $8 = $fd;
	 $9 = $flags;
	 HEAP32[$vararg_buffer7>>2] = $9;
	 $call8 = (_fcntl(($8|0),4,($vararg_buffer7|0))|0);
	 $flags = $call8;
	 $10 = $flags;
	 $cmp9 = ($10|0)==(-1);
	 if ($cmp9) {
	  $11 = $fd;
	  (_close(($11|0))|0);
	  $retval = 0;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 } else {
	  $call13 = (_calloc(1,36)|0);
	  $ret = $call13;
	  $12 = $fd;
	  $13 = $ret;
	  $fd14 = (($13) + 8|0);
	  HEAP32[$fd14>>2] = $12;
	  $14 = $ret;
	  $read_func = (($14) + 28|0);
	  HEAP32[$read_func>>2] = 9;
	  $15 = $ret;
	  $write_func = (($15) + 24|0);
	  HEAP32[$write_func>>2] = 10;
	  $16 = $ret;
	  $destroy_func = (($16) + 32|0);
	  HEAP32[$destroy_func>>2] = 11;
	  $17 = $ret;
	  $retval = $17;
	  $18 = $retval;
	  STACKTOP = sp;return ($18|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_client_init($path) {
	 $path = $path|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call4 = 0, $ipv6_host = 0, $path$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $transport = 0, $url = 0, $vararg_buffer = 0, $vararg_buffer4 = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $path$addr = $path;
	 $transport = 0;
	 $0 = $path$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6608;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6616;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 6640;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 14;
	  _xmmsc_log(0,2,6568,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $path$addr;
	 $call = (_parse_url($1)|0);
	 $url = $call;
	 $2 = $url;
	 $tobool1 = ($2|0)!=(0|0);
	 if ($tobool1) {
	  $3 = $url;
	  $4 = $url;
	  $ipv6_host = (($4) + 12|0);
	  $5 = HEAP32[$ipv6_host>>2]|0;
	  $call4 = (_xmms_ipc_tcp_client_init($3,$5)|0);
	  $transport = $call4;
	  $6 = $url;
	  _free_url($6);
	  $7 = $transport;
	  $retval = $7;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 6680;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 6616;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 6640;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 17;
	  _xmmsc_log(0,2,6568,$vararg_buffer4);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmms_ipc_server_init($path) {
	 $path = $path|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call12 = 0, $call15 = 0;
	 var $call4 = 0, $call7 = 0, $ipv6_host = 0, $path$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool13 = 0, $tobool5 = 0, $tobool8 = 0, $transport = 0, $url = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $path$addr = $path;
	 $transport = 0;
	 $0 = $path$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6608;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6688;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 6640;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 39;
	  _xmmsc_log(0,2,6568,$vararg_buffer);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $path$addr;
	 $call = (_parse_url($1)|0);
	 $url = $call;
	 $2 = $url;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 6680;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 6688;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 6640;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 42;
	  _xmmsc_log(0,2,6568,$vararg_buffer4);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $3 = $url;
	 $4 = HEAP32[$3>>2]|0;
	 $call4 = (_strcasecmp($4,6712)|0);
	 $tobool5 = ($call4|0)!=(0);
	 if ($tobool5) {
	  $5 = $url;
	  $6 = HEAP32[$5>>2]|0;
	  $call7 = (_strcasecmp($6,6720)|0);
	  $tobool8 = ($call7|0)!=(0);
	  if ($tobool8) {
	   $8 = $url;
	   $9 = HEAP32[$8>>2]|0;
	   $call12 = (_strcasecmp($9,6728)|0);
	   $tobool13 = ($call12|0)!=(0);
	   if (!($tobool13)) {
	    $10 = $url;
	    $11 = $url;
	    $ipv6_host = (($11) + 12|0);
	    $12 = HEAP32[$ipv6_host>>2]|0;
	    $call15 = (_xmms_ipc_tcp_server_init($10,$12)|0);
	    $transport = $call15;
	   }
	  } else {
	   label = 7;
	  }
	 } else {
	  label = 7;
	 }
	 if ((label|0) == 7) {
	  $7 = $url;
	  $call10 = (_xmms_ipc_usocket_server_init($7)|0);
	  $transport = $call10;
	 }
	 $13 = $url;
	 _free_url($13);
	 $14 = $transport;
	 $retval = $14;
	 $15 = $retval;
	 STACKTOP = sp;return ($15|0);
	}
	function _xmms_valist_to_strlist($first,$ap) {
	 $first = $first|0;
	 $ap = $ap|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $ap$addr = 0, $arglist_current = 0, $arglist_next = 0, $arrayidx = 0;
	 var $arrayidx3 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp1 = 0, $cur = 0, $first$addr = 0, $i = 0, $inc = 0, $ret = 0, $size = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $first$addr = $first;
	 $ap$addr = $ap;
	 $0 = $first$addr;
	 $cur = $0;
	 $ret = 0;
	 $size = 4;
	 $1 = $first$addr;
	 $cmp = ($1|0)==(0|0);
	 if ($cmp) {
	  _abort();
	  // unreachable;
	 }
	 $i = 0;
	 while(1) {
	  $2 = $cur;
	  $cmp1 = ($2|0)!=(0|0);
	  if (!($cmp1)) {
	   break;
	  }
	  $3 = $size;
	  $add = (($3) + 4)|0;
	  $size = $add;
	  $4 = $ret;
	  $5 = $size;
	  $call = (_realloc($4,$5)|0);
	  $ret = $call;
	  $6 = $cur;
	  $call2 = (FUNCTION_TABLE_ii[3 & 15]($6)|0);
	  $7 = $i;
	  $8 = $ret;
	  $arrayidx = (($8) + ($7<<2)|0);
	  HEAP32[$arrayidx>>2] = $call2;
	  $9 = $ap$addr;
	  $arglist_current = HEAP32[$9>>2]|0;
	  $10 = HEAP32[$arglist_current>>2]|0;
	  $arglist_next = (($arglist_current) + 4|0);
	  HEAP32[$9>>2] = $arglist_next;
	  $cur = $10;
	  $11 = $i;
	  $inc = (($11) + 1)|0;
	  $i = $inc;
	 }
	 $12 = $i;
	 $13 = $ret;
	 $arrayidx3 = (($13) + ($12<<2)|0);
	 HEAP32[$arrayidx3>>2] = 0;
	 $14 = $ret;
	 STACKTOP = sp;return ($14|0);
	}
	function _xmms_vargs_to_strlist($first,$varargs) {
	 $first = $first|0;
	 $varargs = $varargs|0;
	 var $0 = 0, $1 = 0, $2 = 0, $ap = 0, $call = 0, $cmp = 0, $first$addr = 0, $ret = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp + 8|0;
	 $first$addr = $first;
	 $ret = 0;
	 $0 = $first$addr;
	 $cmp = ($0|0)==(0|0);
	 if ($cmp) {
	  _abort();
	  // unreachable;
	 } else {
	  HEAP32[$ap>>2] = $varargs;
	  $1 = $first$addr;
	  $call = (_xmms_valist_to_strlist($1,$ap)|0);
	  $ret = $call;
	  $2 = $ret;
	  STACKTOP = sp;return ($2|0);
	 }
	 return 0|0;
	}
	function _xmms_strlist_len($data) {
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $data$addr = 0, $i = 0, $inc = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $data$addr = $data;
	 $0 = $data$addr;
	 $cmp = ($0|0)==(0|0);
	 if ($cmp) {
	  _abort();
	  // unreachable;
	 }
	 $i = 0;
	 while(1) {
	  $1 = $i;
	  $2 = $data$addr;
	  $arrayidx = (($2) + ($1<<2)|0);
	  $3 = HEAP32[$arrayidx>>2]|0;
	  $cmp1 = ($3|0)!=(0|0);
	  if (!($cmp1)) {
	   break;
	  }
	  $4 = $i;
	  $inc = (($4) + 1)|0;
	  $i = $inc;
	 }
	 $5 = $i;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmms_strlist_destroy($data) {
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $arrayidx2 = 0, $cmp = 0, $cmp1 = 0, $data$addr = 0, $i = 0, $inc = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $data$addr = $data;
	 $0 = $data$addr;
	 $cmp = ($0|0)==(0|0);
	 if ($cmp) {
	  _abort();
	  // unreachable;
	 }
	 $i = 0;
	 while(1) {
	  $1 = $i;
	  $2 = $data$addr;
	  $arrayidx = (($2) + ($1<<2)|0);
	  $3 = HEAP32[$arrayidx>>2]|0;
	  $cmp1 = ($3|0)!=(0|0);
	  if (!($cmp1)) {
	   break;
	  }
	  $4 = $i;
	  $5 = $data$addr;
	  $arrayidx2 = (($5) + ($4<<2)|0);
	  $6 = HEAP32[$arrayidx2>>2]|0;
	  _free($6);
	  $7 = $i;
	  $inc = (($7) + 1)|0;
	  $i = $inc;
	 }
	 $8 = $data$addr;
	 _free($8);
	 STACKTOP = sp;return;
	}
	function _xmms_strlist_prepend_copy($data,$newstr) {
	 $data = $data|0;
	 $newstr = $newstr|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add6 = 0, $add8 = 0, $arrayidx3 = 0, $arrayidx4 = 0;
	 var $arrayidx7 = 0, $arrayidx9 = 0, $call = 0, $call1 = 0, $call2 = 0, $call5 = 0, $cmp = 0, $data$addr = 0, $i = 0, $inc = 0, $mul = 0, $newstr$addr = 0, $ret = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $data$addr = $data;
	 $newstr$addr = $newstr;
	 $0 = $data$addr;
	 $call = (_xmms_strlist_len($0)|0);
	 $add = (($call) + 2)|0;
	 $mul = $add<<2;
	 $call1 = (_malloc($mul)|0);
	 $ret = $call1;
	 $1 = $newstr$addr;
	 $call2 = (FUNCTION_TABLE_ii[3 & 15]($1)|0);
	 $2 = $ret;
	 HEAP32[$2>>2] = $call2;
	 $i = 0;
	 while(1) {
	  $3 = $i;
	  $4 = $data$addr;
	  $arrayidx3 = (($4) + ($3<<2)|0);
	  $5 = HEAP32[$arrayidx3>>2]|0;
	  $cmp = ($5|0)!=(0|0);
	  if (!($cmp)) {
	   break;
	  }
	  $6 = $i;
	  $7 = $data$addr;
	  $arrayidx4 = (($7) + ($6<<2)|0);
	  $8 = HEAP32[$arrayidx4>>2]|0;
	  $call5 = (FUNCTION_TABLE_ii[3 & 15]($8)|0);
	  $9 = $i;
	  $add6 = (($9) + 1)|0;
	  $10 = $ret;
	  $arrayidx7 = (($10) + ($add6<<2)|0);
	  HEAP32[$arrayidx7>>2] = $call5;
	  $11 = $i;
	  $inc = (($11) + 1)|0;
	  $i = $inc;
	 }
	 $12 = $i;
	 $add8 = (($12) + 1)|0;
	 $13 = $ret;
	 $arrayidx9 = (($13) + ($add8<<2)|0);
	 HEAP32[$arrayidx9>>2] = 0;
	 $14 = $ret;
	 STACKTOP = sp;return ($14|0);
	}
	function _xmms_strlist_copy($strlist) {
	 $strlist = $strlist|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx2 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $call = 0, $call1 = 0;
	 var $call3 = 0, $cmp = 0, $i = 0, $inc = 0, $mul = 0, $ret = 0, $strlist$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $strlist$addr = $strlist;
	 $0 = $strlist$addr;
	 $call = (_xmms_strlist_len($0)|0);
	 $add = (($call) + 1)|0;
	 $mul = $add<<2;
	 $call1 = (_malloc($mul)|0);
	 $ret = $call1;
	 $i = 0;
	 while(1) {
	  $1 = $i;
	  $2 = $strlist$addr;
	  $arrayidx = (($2) + ($1<<2)|0);
	  $3 = HEAP32[$arrayidx>>2]|0;
	  $cmp = ($3|0)!=(0|0);
	  if (!($cmp)) {
	   break;
	  }
	  $4 = $i;
	  $5 = $strlist$addr;
	  $arrayidx2 = (($5) + ($4<<2)|0);
	  $6 = HEAP32[$arrayidx2>>2]|0;
	  $call3 = (FUNCTION_TABLE_ii[3 & 15]($6)|0);
	  $7 = $i;
	  $8 = $ret;
	  $arrayidx4 = (($8) + ($7<<2)|0);
	  HEAP32[$arrayidx4>>2] = $call3;
	  $9 = $i;
	  $inc = (($9) + 1)|0;
	  $i = $inc;
	 }
	 $10 = $i;
	 $11 = $ret;
	 $arrayidx5 = (($11) + ($10<<2)|0);
	 HEAP32[$arrayidx5>>2] = 0;
	 $12 = $ret;
	 STACKTOP = sp;return ($12|0);
	}
	function _xmms_default_ipcpath_get($buf,$len) {
	 $buf = $buf|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buf$addr = 0, $call = 0, $call1 = 0, $call3 = 0, $cmp = 0, $len$addr = 0, $retval = 0, $tobool = 0, $xmmspath = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $call = (_getenv((6736|0))|0);
	 $xmmspath = $call;
	 $0 = $xmmspath;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $xmmspath;
	  $call1 = (_strlen(($1|0))|0);
	  $2 = $len$addr;
	  $cmp = ($call1>>>0)<($2>>>0);
	  if ($cmp) {
	   $3 = $buf$addr;
	   $4 = $xmmspath;
	   (_strcpy(($3|0),($4|0))|0);
	   $7 = $buf$addr;
	   $retval = $7;
	   $8 = $retval;
	   STACKTOP = sp;return ($8|0);
	  }
	 }
	 $5 = $buf$addr;
	 $6 = $len$addr;
	 $call3 = (_xmms_fallback_ipcpath_get($5,$6)|0);
	 $retval = $call3;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _x_vasprintf($fmt,$args) {
	 $fmt = $fmt|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add7 = 0, $ap = 0, $args$addr = 0, $bound = 0, $c = 0, $call = 0, $call6 = 0, $cmp = 0;
	 var $fmt$addr = 0, $mul = 0, $res = 0, $retval = 0, $tobool = 0, $vacopy_currentptr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer = sp + 16|0;
	 $c = sp + 72|0;
	 $ap = sp + 56|0;
	 $fmt$addr = $fmt;
	 $args$addr = $args;
	 $0 = $fmt$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 6792;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 6800;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 6816;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 62;
	  _xmmsc_log(0,2,6752,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $args$addr;
	 $vacopy_currentptr = HEAP32[$1>>2]|0;
	 HEAP32[$ap>>2] = $vacopy_currentptr;
	 $2 = $fmt$addr;
	 $call = (_vsnprintf($c,1,$2,$ap)|0);
	 $bound = $call;
	 $3 = $bound;
	 $cmp = ($3|0)>=(0);
	 if ($cmp) {
	  $4 = $bound;
	  $add = (($4) + 1)|0;
	  $mul = $add;
	  $call6 = (_malloc($mul)|0);
	  $res = $call6;
	  $5 = $res;
	  $6 = $bound;
	  $add7 = (($6) + 1)|0;
	  $7 = $fmt$addr;
	  $8 = $args$addr;
	  (_vsnprintf($5,$add7,$7,$8)|0);
	  $9 = $res;
	  $retval = $9;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 6848;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 6800;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 6816;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 68;
	  _xmmsc_log(0,2,6752,$vararg_buffer4);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 return 0|0;
	}
	function _x_asprintf($fmt,$varargs) {
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $0 = 0, $1 = 0, $ap = 0, $call = 0, $fmt$addr = 0, $res = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp + 8|0;
	 $fmt$addr = $fmt;
	 HEAP32[$ap>>2] = $varargs;
	 $0 = $fmt$addr;
	 $call = (_x_vasprintf($0,$ap)|0);
	 $res = $call;
	 $1 = $res;
	 STACKTOP = sp;return ($1|0);
	}
	function _xmms_usercachedir_get($buf,$len) {
	 $buf = $buf|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $buf$addr = 0, $call = 0, $len$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $0 = $buf$addr;
	 $1 = $len$addr;
	 $call = (_xdg_dir_get(6864,6880,$0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xdg_dir_get($env,$default_dir,$buf,$len) {
	 $env = $env|0;
	 $default_dir = $default_dir|0;
	 $buf = $buf|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf$addr = 0, $call = 0;
	 var $call6 = 0, $call7 = 0, $cmp = 0, $conv = 0, $default_dir$addr = 0, $env$addr = 0, $home = 0, $len$addr = 0, $pw = 0, $pw_dir = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer1 = sp;
	 $vararg_buffer = sp + 8|0;
	 $env$addr = $env;
	 $default_dir$addr = $default_dir;
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $0 = $buf$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $len$addr;
	  $cmp = ($1|0)<=(0);
	  if (!($cmp)) {
	   $2 = $env$addr;
	   $call = (_getenv(($2|0))|0);
	   $home = $call;
	   $3 = $home;
	   $tobool1 = ($3|0)!=(0|0);
	   if ($tobool1) {
	    $4 = $home;
	    $5 = HEAP8[$4>>0]|0;
	    $conv = $5 << 24 >> 24;
	    $tobool2 = ($conv|0)!=(0);
	    if ($tobool2) {
	     $6 = $buf$addr;
	     $7 = $len$addr;
	     $8 = $home;
	     HEAP32[$vararg_buffer>>2] = $8;
	     (_snprintf($6,$7,6960,$vararg_buffer)|0);
	     $9 = $buf$addr;
	     $retval = $9;
	     $17 = $retval;
	     STACKTOP = sp;return ($17|0);
	    }
	   }
	   $call6 = (_getuid()|0);
	   $call7 = (_getpwuid(($call6|0))|0);
	   $pw = $call7;
	   $10 = $pw;
	   $tobool8 = ($10|0)!=(0|0);
	   if ($tobool8) {
	    $11 = $buf$addr;
	    $12 = $len$addr;
	    $13 = $pw;
	    $pw_dir = (($13) + 20|0);
	    $14 = HEAP32[$pw_dir>>2]|0;
	    $15 = $default_dir$addr;
	    HEAP32[$vararg_buffer1>>2] = $14;
	    $vararg_ptr4 = (($vararg_buffer1) + 4|0);
	    HEAP32[$vararg_ptr4>>2] = $15;
	    (_snprintf($11,$12,6976,$vararg_buffer1)|0);
	    $16 = $buf$addr;
	    $retval = $16;
	    $17 = $retval;
	    STACKTOP = sp;return ($17|0);
	   } else {
	    $retval = 0;
	    $17 = $retval;
	    STACKTOP = sp;return ($17|0);
	   }
	  }
	 }
	 $retval = 0;
	 $17 = $retval;
	 STACKTOP = sp;return ($17|0);
	}
	function _xmms_userconfdir_get($buf,$len) {
	 $buf = $buf|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $buf$addr = 0, $call = 0, $len$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $0 = $buf$addr;
	 $1 = $len$addr;
	 $call = (_xdg_dir_get(6904,6920,$0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmms_fallback_ipcpath_get($buf,$len) {
	 $buf = $buf|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buf$addr = 0, $call = 0, $call1 = 0, $len$addr = 0, $pw = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $call = (_getuid()|0);
	 $call1 = (_getpwuid(($call|0))|0);
	 $pw = $call1;
	 $0 = $pw;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $pw;
	  $2 = HEAP32[$1>>2]|0;
	  $tobool2 = ($2|0)!=(0|0);
	  if ($tobool2) {
	   $3 = $buf$addr;
	   $4 = $len$addr;
	   $5 = $pw;
	   $6 = HEAP32[$5>>2]|0;
	   HEAP32[$vararg_buffer>>2] = $6;
	   (_snprintf($3,$4,6936,$vararg_buffer)|0);
	   $7 = $buf$addr;
	   $retval = $7;
	   $8 = $retval;
	   STACKTOP = sp;return ($8|0);
	  }
	 }
	 $retval = 0;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmms_sleep_ms($n) {
	 $n = $n|0;
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $div = 0, $mul = 0, $n$addr = 0, $rem = 0, $retval = 0, $sleeptime = 0, $tv_nsec = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $sleeptime = sp;
	 $n$addr = $n;
	 $0 = $n$addr;
	 $div = (($0|0) / 1000)&-1;
	 HEAP32[$sleeptime>>2] = $div;
	 $1 = $n$addr;
	 $rem = (($1|0) % 1000)&-1;
	 $mul = ($rem*1000000)|0;
	 $tv_nsec = (($sleeptime) + 4|0);
	 HEAP32[$tv_nsec>>2] = $mul;
	 while(1) {
	  $call = (_nanosleep(($sleeptime|0),($sleeptime|0))|0);
	  $cmp = ($call|0)==(-1);
	  if (!($cmp)) {
	   label = 6;
	   break;
	  }
	  $call1 = (___errno_location()|0);
	  $2 = HEAP32[$call1>>2]|0;
	  $cmp2 = ($2|0)!=(4);
	  if ($cmp2) {
	   label = 4;
	   break;
	  }
	 }
	 if ((label|0) == 4) {
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $3 = $$pre_trunc&1;
	  STACKTOP = sp;return ($3|0);
	 }
	 else if ((label|0) == 6) {
	  $$expand_i1_val2 = 1;
	  $retval = $$expand_i1_val2;
	  $$pre_trunc = $retval;
	  $3 = $$pre_trunc&1;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsc_log_handler_set($f,$udata) {
	 $f = $f|0;
	 $udata = $udata|0;
	 var $0 = 0, $1 = 0, $f$addr = 0, $udata$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$addr = $f;
	 $udata$addr = $udata;
	 $0 = $f$addr;
	 HEAP32[6984>>2] = $0;
	 $1 = $udata$addr;
	 HEAP32[6992>>2] = $1;
	 STACKTOP = sp;return;
	}
	function _xmmsc_log_handler_get($f,$udata) {
	 $f = $f|0;
	 $udata = $udata|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f$addr = 0, $tobool = 0, $tobool1 = 0, $udata$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$addr = $f;
	 $udata$addr = $udata;
	 $0 = $f$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = HEAP32[6984>>2]|0;
	  $2 = $f$addr;
	  HEAP32[$2>>2] = $1;
	 }
	 $3 = $udata$addr;
	 $tobool1 = ($3|0)!=(0|0);
	 if (!($tobool1)) {
	  STACKTOP = sp;return;
	 }
	 $4 = HEAP32[6992>>2]|0;
	 $5 = $udata$addr;
	 HEAP32[$5>>2] = $4;
	 STACKTOP = sp;return;
	}
	function _xmmsc_log_default_handler($domain,$level,$msg,$unused) {
	 $domain = $domain|0;
	 $level = $level|0;
	 $msg = $msg|0;
	 $unused = $unused|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx4 = 0, $arrayidx6 = 0, $cmp = 0, $cmp1 = 0, $conv = 0;
	 var $domain$addr = 0, $level$addr = 0, $msg$addr = 0, $tobool = 0, $tobool2 = 0, $unused$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer5 = sp;
	 $vararg_buffer1 = sp + 8|0;
	 $vararg_buffer = sp + 24|0;
	 $domain$addr = $domain;
	 $level$addr = $level;
	 $msg$addr = $msg;
	 $unused$addr = $unused;
	 $0 = $level$addr;
	 $cmp = ($0>>>0)<(0);
	 if ($cmp) {
	  label = 3;
	 } else {
	  $1 = $level$addr;
	  $cmp1 = ($1>>>0)>=(6);
	  if ($cmp1) {
	   label = 3;
	  }
	 }
	 if ((label|0) == 3) {
	  $2 = HEAP32[_stderr>>2]|0;
	  (_fprintf(($2|0),(7000|0),($vararg_buffer|0))|0);
	  $level$addr = 0;
	 }
	 $3 = $domain$addr;
	 $tobool = ($3|0)!=(0|0);
	 if ($tobool) {
	  $4 = $domain$addr;
	  $5 = HEAP8[$4>>0]|0;
	  $conv = $5 << 24 >> 24;
	  $tobool2 = ($conv|0)!=(0);
	  if ($tobool2) {
	   $6 = HEAP32[_stderr>>2]|0;
	   $7 = $level$addr;
	   $arrayidx4 = (7048 + ($7<<2)|0);
	   $8 = HEAP32[$arrayidx4>>2]|0;
	   $9 = $domain$addr;
	   $10 = $msg$addr;
	   HEAP32[$vararg_buffer1>>2] = $8;
	   $vararg_ptr3 = (($vararg_buffer1) + 4|0);
	   HEAP32[$vararg_ptr3>>2] = $9;
	   $vararg_ptr4 = (($vararg_buffer1) + 8|0);
	   HEAP32[$vararg_ptr4>>2] = $10;
	   (_fprintf(($6|0),(7032|0),($vararg_buffer1|0))|0);
	   _xmms_dump_stack();
	   STACKTOP = sp;return;
	  }
	 }
	 $11 = HEAP32[_stderr>>2]|0;
	 $12 = $level$addr;
	 $arrayidx6 = (7048 + ($12<<2)|0);
	 $13 = HEAP32[$arrayidx6>>2]|0;
	 $14 = $msg$addr;
	 HEAP32[$vararg_buffer5>>2] = $13;
	 $vararg_ptr8 = (($vararg_buffer5) + 4|0);
	 HEAP32[$vararg_ptr8>>2] = $14;
	 (_fprintf(($11|0),(7072|0),($vararg_buffer5|0))|0);
	 _xmms_dump_stack();
	 STACKTOP = sp;return;
	}
	function _xmmsc_log($domain,$level,$fmt,$varargs) {
	 $domain = $domain|0;
	 $level = $level|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $0 = 0, $1 = 0, $2 = 0, $ap = 0, $domain$addr = 0, $fmt$addr = 0, $level$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 $domain$addr = $domain;
	 $level$addr = $level;
	 $fmt$addr = $fmt;
	 HEAP32[$ap>>2] = $varargs;
	 $0 = $domain$addr;
	 $1 = $level$addr;
	 $2 = $fmt$addr;
	 _xmmsc_log_va($0,$1,$2,$ap);
	 STACKTOP = sp;return;
	}
	function _xmmsc_log_va($domain,$level,$fmt,$ap) {
	 $domain = $domain|0;
	 $level = $level|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ap$addr = 0, $call = 0, $domain$addr = 0, $fmt$addr = 0, $level$addr = 0, $msg = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $domain$addr = $domain;
	 $level$addr = $level;
	 $fmt$addr = $fmt;
	 $ap$addr = $ap;
	 $0 = $fmt$addr;
	 $1 = $ap$addr;
	 $call = (_x_vasprintf($0,$1)|0);
	 $msg = $call;
	 $2 = $domain$addr;
	 $3 = $level$addr;
	 $4 = $msg;
	 _xmmsc_log_handle($2,$3,$4);
	 $5 = $msg;
	 _free($5);
	 STACKTOP = sp;return;
	}
	function _xmmsc_log_handle($domain,$level,$msg) {
	 $domain = $domain|0;
	 $level = $level|0;
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $domain$addr = 0, $level$addr = 0, $msg$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $domain$addr = $domain;
	 $level$addr = $level;
	 $msg$addr = $msg;
	 $0 = HEAP32[6984>>2]|0;
	 $1 = $domain$addr;
	 $2 = $level$addr;
	 $3 = $msg$addr;
	 $4 = HEAP32[6992>>2]|0;
	 FUNCTION_TABLE_viiii[$0 & 1]($1,$2,$3,$4);
	 STACKTOP = sp;return;
	}
	function _xmms_dump_stack() {
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = sp;return;
	}
	function _tv2ts($t) {
	 $t = $t|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0.0, $conv = 0.0, $conv1 = 0.0, $div = 0.0, $t$addr = 0, $tv_usec = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $t$addr = $t;
	 $0 = $t$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $conv = (+($1|0));
	 $2 = $t$addr;
	 $tv_usec = (($2) + 4|0);
	 $3 = HEAP32[$tv_usec>>2]|0;
	 $conv1 = (+($3|0));
	 $div = $conv1 / 1.0E+6;
	 $add = $conv + $div;
	 STACKTOP = sp;return (+$add);
	}
	function _net2ts($s) {
	 $s = $s|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0.0, $arrayidx1 = 0, $call = 0, $call2 = 0, $conv = 0.0, $conv3 = 0.0, $div = 0.0, $s$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $s$addr = $s;
	 $0 = $s$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $call = (_ntohl(($1|0))|0);
	 $conv = (+($call|0));
	 $2 = $s$addr;
	 $arrayidx1 = (($2) + 4|0);
	 $3 = HEAP32[$arrayidx1>>2]|0;
	 $call2 = (_ntohl(($3|0))|0);
	 $conv3 = (+($call2|0));
	 $div = $conv3 / 1.0E+6;
	 $add = $conv + $div;
	 STACKTOP = sp;return (+$add);
	}
	function _ts2net($d,$t) {
	 $d = $d|0;
	 $t = +$t;
	 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $arrayidx4 = 0, $call = 0.0, $call1 = 0, $call3 = 0, $conv = 0, $conv2 = 0, $d$addr = 0, $mul = 0.0, $s = 0, $t$addr = 0.0, $u = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $s = sp + 8|0;
	 $d$addr = $d;
	 $t$addr = $t;
	 $0 = $t$addr;
	 $call = (+_modf((+$0),($s|0)));
	 $u = $call;
	 $1 = +HEAPF64[$s>>3];
	 $conv = (~~(($1)));
	 $call1 = (_htonl(($conv|0))|0);
	 $2 = $d$addr;
	 HEAP32[$2>>2] = $call1;
	 $3 = $u;
	 $mul = $3 * 1.0E+6;
	 $conv2 = (~~(($mul)));
	 $call3 = (_htonl(($conv2|0))|0);
	 $4 = $d$addr;
	 $arrayidx4 = (($4) + 4|0);
	 HEAP32[$arrayidx4>>2] = $call3;
	 STACKTOP = sp;return;
	}
	function _tv2net($d,$t) {
	 $d = $d|0;
	 $t = $t|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx2 = 0, $call = 0, $call1 = 0, $d$addr = 0, $t$addr = 0, $tv_usec = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $d$addr = $d;
	 $t$addr = $t;
	 $0 = $t$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $call = (_htonl(($1|0))|0);
	 $2 = $d$addr;
	 HEAP32[$2>>2] = $call;
	 $3 = $t$addr;
	 $tv_usec = (($3) + 4|0);
	 $4 = HEAP32[$tv_usec>>2]|0;
	 $call1 = (_htonl(($4|0))|0);
	 $5 = $d$addr;
	 $arrayidx2 = (($5) + 4|0);
	 HEAP32[$arrayidx2>>2] = $call1;
	 STACKTOP = sp;return;
	}
	function _packet_init_data($p) {
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__unaligned_data = 0, $__unaligned_grace = 0, $arrayidx2 = 0, $arrayidx3 = 0, $buffer = 0, $call = 0, $p$addr = 0, $size = 0, $tobool = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $p$addr = $p;
	 $call = (_malloc(2063)|0);
	 $buffer = $call;
	 $0 = $buffer;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $9 = $buffer;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $buffer;
	 HEAP8[$1>>0] = 86;
	 $2 = $buffer;
	 $3 = $p$addr;
	 HEAP32[$3>>2] = $2;
	 $4 = $buffer;
	 $arrayidx2 = (($4) + 1|0);
	 $5 = $p$addr;
	 $__unaligned_grace = (($5) + 4|0);
	 HEAP32[$__unaligned_grace>>2] = $arrayidx2;
	 $6 = $buffer;
	 $arrayidx3 = (($6) + 3|0);
	 $7 = $p$addr;
	 $__unaligned_data = (($7) + 8|0);
	 HEAP32[$__unaligned_data>>2] = $arrayidx3;
	 $8 = $p$addr;
	 $size = (($8) + 12|0);
	 HEAP32[$size>>2] = 2063;
	 $9 = $buffer;
	 STACKTOP = sp;return ($9|0);
	}
	function _packet_init_timing($p) {
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__unaligned_clientstamp = 0, $__unaligned_id = 0, $__unaligned_serverstamp = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $buffer = 0, $call = 0;
	 var $p$addr = 0, $size = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $p$addr = $p;
	 $call = (_malloc(21)|0);
	 $buffer = $call;
	 $0 = $buffer;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  $11 = $buffer;
	  STACKTOP = sp;return ($11|0);
	 }
	 $1 = $buffer;
	 HEAP8[$1>>0] = 84;
	 $2 = $buffer;
	 $3 = $p$addr;
	 HEAP32[$3>>2] = $2;
	 $4 = $buffer;
	 $arrayidx2 = (($4) + 1|0);
	 $5 = $p$addr;
	 $__unaligned_id = (($5) + 4|0);
	 HEAP32[$__unaligned_id>>2] = $arrayidx2;
	 $6 = $buffer;
	 $arrayidx3 = (($6) + 5|0);
	 $7 = $p$addr;
	 $__unaligned_clientstamp = (($7) + 8|0);
	 HEAP32[$__unaligned_clientstamp>>2] = $arrayidx3;
	 $8 = $buffer;
	 $arrayidx4 = (($8) + 13|0);
	 $9 = $p$addr;
	 $__unaligned_serverstamp = (($9) + 12|0);
	 HEAP32[$__unaligned_serverstamp>>2] = $arrayidx4;
	 $10 = $p$addr;
	 $size = (($10) + 16|0);
	 HEAP32[$size>>2] = 21;
	 $11 = $buffer;
	 STACKTOP = sp;return ($11|0);
	}
	function _xmmsc_coll_get($conn,$collname,$ns) {
	 $conn = $conn|0;
	 $collname = $collname|0;
	 $ns = $ns|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $collname$addr = 0, $conn$addr = 0, $ipc = 0, $ns$addr = 0, $retval = 0;
	 var $tobool = 0, $tobool1 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 24|0;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 16|0;
	 $conn$addr = $conn;
	 $collname$addr = $collname;
	 $ns$addr = $ns;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7152;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7152;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $collname$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if ($tobool4) {
	  $4 = $conn$addr;
	  $5 = $collname$addr;
	  $call = (_xmmsv_new_string($5)|0);
	  $call7 = (___xmmsv_null_to_none($call)|0);
	  $call8 = (___xmmsv_identity_xmmsv($call7)|0);
	  $6 = $ns$addr;
	  $call9 = (_xmmsv_new_string($6)|0);
	  $call10 = (___xmmsv_null_to_none($call9)|0);
	  $call11 = (___xmmsv_identity_xmmsv($call10)|0);
	  HEAP32[$vararg_buffer10>>2] = $call8;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = $call11;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 0;
	  $call12 = (_xmmsc_send_cmd($4,6,32,$vararg_buffer10)|0);
	  $retval = $call12;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 7152;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 7232;
	  _xmmsc_log(0,2,7128,$vararg_buffer6);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function ___xmmsv_identity_xmmsv($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function ___xmmsv_null_to_none($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $v$addr;
	  $cond = $1;
	 } else {
	  $call = (_xmmsv_new_none()|0);
	  $cond = $call;
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _xmmsc_coll_sync($conn) {
	 $conn = $conn|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $conn$addr = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7256;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7256;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $conn$addr;
	 HEAP32[$vararg_buffer6>>2] = 0;
	 $call = (_xmmsc_send_cmd($3,11,32,$vararg_buffer6)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_coll_list($conn,$ns) {
	 $conn = $conn|0;
	 $ns = $ns|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call4 = 0, $call5 = 0, $call6 = 0, $conn$addr = 0, $ipc = 0, $ns$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $ns$addr = $ns;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7272;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7272;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $3 = $conn$addr;
	 $4 = $ns$addr;
	 $call = (_xmmsv_new_string($4)|0);
	 $call4 = (___xmmsv_null_to_none($call)|0);
	 $call5 = (___xmmsv_identity_xmmsv($call4)|0);
	 HEAP32[$vararg_buffer6>>2] = $call5;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call6 = (_xmmsc_send_cmd($3,6,33,$vararg_buffer6)|0);
	 $retval = $call6;
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsc_coll_save($conn,$coll,$name,$ns) {
	 $conn = $conn|0;
	 $coll = $coll|0;
	 $name = $name|0;
	 $ns = $ns|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call13 = 0, $call14 = 0, $call15 = 0, $call16 = 0, $call17 = 0, $coll$addr = 0;
	 var $conn$addr = 0, $ipc = 0, $name$addr = 0, $ns$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr5 = 0;
	 var $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp + 8|0;
	 $vararg_buffer10 = sp + 24|0;
	 $vararg_buffer6 = sp + 40|0;
	 $vararg_buffer2 = sp + 32|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $coll$addr = $coll;
	 $name$addr = $name;
	 $ns$addr = $ns;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7288;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7288;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $coll$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 7288;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 7304;
	  _xmmsc_log(0,2,7128,$vararg_buffer6);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $4 = $name$addr;
	 $tobool7 = ($4|0)!=(0|0);
	 if ($tobool7) {
	  $5 = $conn$addr;
	  $6 = $name$addr;
	  $call = (_xmmsv_new_string($6)|0);
	  $call10 = (___xmmsv_null_to_none($call)|0);
	  $call11 = (___xmmsv_identity_xmmsv($call10)|0);
	  $7 = $ns$addr;
	  $call12 = (_xmmsv_new_string($7)|0);
	  $call13 = (___xmmsv_null_to_none($call12)|0);
	  $call14 = (___xmmsv_identity_xmmsv($call13)|0);
	  $8 = $coll$addr;
	  $call15 = (_xmmsv_ref($8)|0);
	  $call16 = (___xmmsv_identity_xmmsv($call15)|0);
	  HEAP32[$vararg_buffer14>>2] = $call11;
	  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	  HEAP32[$vararg_ptr17>>2] = $call14;
	  $vararg_ptr18 = (($vararg_buffer14) + 8|0);
	  HEAP32[$vararg_ptr18>>2] = $call16;
	  $vararg_ptr19 = (($vararg_buffer14) + 12|0);
	  HEAP32[$vararg_ptr19>>2] = 0;
	  $call17 = (_xmmsc_send_cmd($5,6,34,$vararg_buffer14)|0);
	  $retval = $call17;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 7288;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 7232;
	  _xmmsc_log(0,2,7128,$vararg_buffer10);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsc_coll_remove($conn,$name,$ns) {
	 $conn = $conn|0;
	 $name = $name|0;
	 $ns = $ns|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $conn$addr = 0, $ipc = 0, $name$addr = 0, $ns$addr = 0, $retval = 0;
	 var $tobool = 0, $tobool1 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 24|0;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 16|0;
	 $conn$addr = $conn;
	 $name$addr = $name;
	 $ns$addr = $ns;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7328;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7328;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $name$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if ($tobool4) {
	  $4 = $conn$addr;
	  $5 = $name$addr;
	  $call = (_xmmsv_new_string($5)|0);
	  $call7 = (___xmmsv_null_to_none($call)|0);
	  $call8 = (___xmmsv_identity_xmmsv($call7)|0);
	  $6 = $ns$addr;
	  $call9 = (_xmmsv_new_string($6)|0);
	  $call10 = (___xmmsv_null_to_none($call9)|0);
	  $call11 = (___xmmsv_identity_xmmsv($call10)|0);
	  HEAP32[$vararg_buffer10>>2] = $call8;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = $call11;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 0;
	  $call12 = (_xmmsc_send_cmd($4,6,35,$vararg_buffer10)|0);
	  $retval = $call12;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 7328;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 7232;
	  _xmmsc_log(0,2,7128,$vararg_buffer6);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _xmmsc_coll_find($conn,$mediaid,$ns) {
	 $conn = $conn|0;
	 $mediaid = $mediaid|0;
	 $ns = $ns|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $conn$addr = 0, $ipc = 0, $mediaid$addr = 0, $ns$addr = 0, $retval = 0;
	 var $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $conn$addr = $conn;
	 $mediaid$addr = $mediaid;
	 $ns$addr = $ns;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7352;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7352;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $conn$addr;
	 $4 = $mediaid$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv($7)|0);
	 $8 = $ns$addr;
	 $call5 = (_xmmsv_new_string($8)|0);
	 $call6 = (___xmmsv_null_to_none($call5)|0);
	 $call7 = (___xmmsv_identity_xmmsv($call6)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call7;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = 0;
	 $call8 = (_xmmsc_send_cmd($3,6,36,$vararg_buffer6)|0);
	 $retval = $call8;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsc_coll_rename($conn,$from_name,$to_name,$ns) {
	 $conn = $conn|0;
	 $from_name = $from_name|0;
	 $to_name = $to_name|0;
	 $ns = $ns|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call13 = 0, $call14 = 0, $call15 = 0, $call16 = 0, $call17 = 0, $call18 = 0;
	 var $conn$addr = 0, $from_name$addr = 0, $ipc = 0, $ns$addr = 0, $retval = 0, $to_name$addr = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0;
	 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp + 8|0;
	 $vararg_buffer10 = sp + 24|0;
	 $vararg_buffer6 = sp + 40|0;
	 $vararg_buffer2 = sp + 32|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $from_name$addr = $from_name;
	 $to_name$addr = $to_name;
	 $ns$addr = $ns;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7368;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7368;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $from_name$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 7368;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 7392;
	  _xmmsc_log(0,2,7128,$vararg_buffer6);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $4 = $to_name$addr;
	 $tobool7 = ($4|0)!=(0|0);
	 if ($tobool7) {
	  $5 = $conn$addr;
	  $6 = $from_name$addr;
	  $call = (_xmmsv_new_string($6)|0);
	  $call10 = (___xmmsv_null_to_none($call)|0);
	  $call11 = (___xmmsv_identity_xmmsv($call10)|0);
	  $7 = $to_name$addr;
	  $call12 = (_xmmsv_new_string($7)|0);
	  $call13 = (___xmmsv_null_to_none($call12)|0);
	  $call14 = (___xmmsv_identity_xmmsv($call13)|0);
	  $8 = $ns$addr;
	  $call15 = (_xmmsv_new_string($8)|0);
	  $call16 = (___xmmsv_null_to_none($call15)|0);
	  $call17 = (___xmmsv_identity_xmmsv($call16)|0);
	  HEAP32[$vararg_buffer14>>2] = $call11;
	  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	  HEAP32[$vararg_ptr17>>2] = $call14;
	  $vararg_ptr18 = (($vararg_buffer14) + 8|0);
	  HEAP32[$vararg_ptr18>>2] = $call17;
	  $vararg_ptr19 = (($vararg_buffer14) + 12|0);
	  HEAP32[$vararg_ptr19>>2] = 0;
	  $call18 = (_xmmsc_send_cmd($5,6,37,$vararg_buffer14)|0);
	  $retval = $call18;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 7368;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 7416;
	  _xmmsc_log(0,2,7128,$vararg_buffer10);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsc_coll_query_ids($conn,$coll,$order,$limit_start,$limit_len) {
	 $conn = $conn|0;
	 $coll = $coll|0;
	 $order = $order|0;
	 $limit_start = $limit_start|0;
	 $limit_len = $limit_len|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call13 = 0;
	 var $call14 = 0, $call15 = 0, $call16 = 0, $call17 = 0, $call18 = 0, $call19 = 0, $call2 = 0, $call20 = 0, $call21 = 0, $call22 = 0, $call23 = 0, $call24 = 0, $call25 = 0, $call26 = 0, $call27 = 0, $call28 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call6 = 0;
	 var $call7 = 0, $call8 = 0, $call9 = 0, $coll$addr = 0, $conn$addr = 0, $get = 0, $limit_len$addr = 0, $limit_start$addr = 0, $limited = 0, $metadata = 0, $order$addr = 0, $ordered = 0, $ret = 0, $spec = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0;
	 var $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer9 = sp + 32|0;
	 $vararg_buffer1 = sp;
	 $vararg_buffer = sp + 24|0;
	 $conn$addr = $conn;
	 $coll$addr = $coll;
	 $order$addr = $order;
	 $limit_start$addr = $limit_start;
	 $limit_len$addr = $limit_len;
	 $call = (_xmmsv_new_string(7440)|0);
	 $call1 = (___xmmsv_null_to_none($call)|0);
	 $call2 = (___xmmsv_identity_xmmsv($call1)|0);
	 HEAP32[$vararg_buffer>>2] = 0;
	 $call3 = (_xmmsv_build_list($call2,$vararg_buffer)|0);
	 $get = $call3;
	 $call4 = (___xmmsv_identity_const_charp(7448)|0);
	 $call5 = (_xmmsv_new_string(7456)|0);
	 $call6 = (___xmmsv_null_to_none($call5)|0);
	 $call7 = (___xmmsv_identity_xmmsv($call6)|0);
	 $call8 = (___xmmsv_identity_const_charp(7472)|0);
	 $call9 = (_xmmsv_new_string(7488)|0);
	 $call10 = (___xmmsv_null_to_none($call9)|0);
	 $call11 = (___xmmsv_identity_xmmsv($call10)|0);
	 $call12 = (___xmmsv_identity_const_charp(7496)|0);
	 $0 = $get;
	 $call13 = (___xmmsv_identity_xmmsv($0)|0);
	 HEAP32[$vararg_buffer1>>2] = $call7;
	 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
	 HEAP32[$vararg_ptr4>>2] = $call8;
	 $vararg_ptr5 = (($vararg_buffer1) + 8|0);
	 HEAP32[$vararg_ptr5>>2] = $call11;
	 $vararg_ptr6 = (($vararg_buffer1) + 12|0);
	 HEAP32[$vararg_ptr6>>2] = $call12;
	 $vararg_ptr7 = (($vararg_buffer1) + 16|0);
	 HEAP32[$vararg_ptr7>>2] = $call13;
	 $vararg_ptr8 = (($vararg_buffer1) + 20|0);
	 HEAP32[$vararg_ptr8>>2] = 0;
	 $call14 = (_xmmsv_build_dict($call4,$vararg_buffer1)|0);
	 $metadata = $call14;
	 $call15 = (___xmmsv_identity_const_charp(7448)|0);
	 $call16 = (_xmmsv_new_string(7504)|0);
	 $call17 = (___xmmsv_null_to_none($call16)|0);
	 $call18 = (___xmmsv_identity_xmmsv($call17)|0);
	 $call19 = (___xmmsv_identity_const_charp(7520)|0);
	 $call20 = (_xmmsv_new_string(7536)|0);
	 $call21 = (___xmmsv_null_to_none($call20)|0);
	 $call22 = (___xmmsv_identity_xmmsv($call21)|0);
	 $call23 = (___xmmsv_identity_const_charp(7552)|0);
	 $1 = $metadata;
	 $call24 = (___xmmsv_identity_xmmsv($1)|0);
	 HEAP32[$vararg_buffer9>>2] = $call18;
	 $vararg_ptr12 = (($vararg_buffer9) + 4|0);
	 HEAP32[$vararg_ptr12>>2] = $call19;
	 $vararg_ptr13 = (($vararg_buffer9) + 8|0);
	 HEAP32[$vararg_ptr13>>2] = $call22;
	 $vararg_ptr14 = (($vararg_buffer9) + 12|0);
	 HEAP32[$vararg_ptr14>>2] = $call23;
	 $vararg_ptr15 = (($vararg_buffer9) + 16|0);
	 HEAP32[$vararg_ptr15>>2] = $call24;
	 $vararg_ptr16 = (($vararg_buffer9) + 20|0);
	 HEAP32[$vararg_ptr16>>2] = 0;
	 $call25 = (_xmmsv_build_dict($call15,$vararg_buffer9)|0);
	 $spec = $call25;
	 $2 = $coll$addr;
	 $3 = $order$addr;
	 $call26 = (_xmmsv_coll_add_order_operators($2,$3)|0);
	 $ordered = $call26;
	 $4 = $ordered;
	 $5 = $limit_start$addr;
	 $6 = $limit_len$addr;
	 $call27 = (_xmmsv_coll_add_limit_operator($4,$5,$6)|0);
	 $limited = $call27;
	 $7 = $conn$addr;
	 $8 = $limited;
	 $9 = $spec;
	 $call28 = (_xmmsc_coll_query($7,$8,$9)|0);
	 $ret = $call28;
	 $10 = $ordered;
	 _xmmsv_unref($10);
	 $11 = $limited;
	 _xmmsv_unref($11);
	 $12 = $spec;
	 _xmmsv_unref($12);
	 $13 = $ret;
	 STACKTOP = sp;return ($13|0);
	}
	function ___xmmsv_identity_const_charp($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function _xmmsc_coll_query($conn,$coll,$fetch) {
	 $conn = $conn|0;
	 $coll = $coll|0;
	 $fetch = $fetch|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call13 = 0, $coll$addr = 0, $conn$addr = 0, $fetch$addr = 0, $ipc = 0, $retval = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp + 32|0;
	 $vararg_buffer10 = sp + 16|0;
	 $vararg_buffer6 = sp + 24|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $coll$addr = $coll;
	 $fetch$addr = $fetch;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7608;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7608;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $coll$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 7608;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 7304;
	  _xmmsc_log(0,2,7128,$vararg_buffer6);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $4 = $fetch$addr;
	 $tobool7 = ($4|0)!=(0|0);
	 if ($tobool7) {
	  $5 = $conn$addr;
	  $6 = $coll$addr;
	  $call = (_xmmsv_ref($6)|0);
	  $call10 = (___xmmsv_identity_xmmsv($call)|0);
	  $7 = $fetch$addr;
	  $call11 = (_xmmsv_ref($7)|0);
	  $call12 = (___xmmsv_identity_xmmsv($call11)|0);
	  HEAP32[$vararg_buffer14>>2] = $call10;
	  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	  HEAP32[$vararg_ptr17>>2] = $call12;
	  $vararg_ptr18 = (($vararg_buffer14) + 8|0);
	  HEAP32[$vararg_ptr18>>2] = 0;
	  $call13 = (_xmmsc_send_cmd($5,6,38,$vararg_buffer14)|0);
	  $retval = $call13;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 7608;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 7632;
	  _xmmsc_log(0,2,7128,$vararg_buffer10);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmmsc_coll_query_infos($conn,$coll,$order,$limit_start,$limit_len,$fetch,$group) {
	 $conn = $conn|0;
	 $coll = $coll|0;
	 $order = $order|0;
	 $limit_start = $limit_start|0;
	 $limit_len = $limit_len|0;
	 $fetch = $fetch|0;
	 $group = $group|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
	 var $8 = 0, $9 = 0, $call = 0, $call14 = 0, $call15 = 0, $call17 = 0, $call20 = 0, $call21 = 0, $call22 = 0, $call23 = 0, $call24 = 0, $coll$addr = 0, $conn$addr = 0, $fetch$addr = 0, $group$addr = 0, $ipc = 0, $limit_len$addr = 0, $limit_start$addr = 0, $order$addr = 0, $ordered = 0;
	 var $retval = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool4 = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp;
	 $vararg_buffer10 = sp + 48|0;
	 $vararg_buffer6 = sp + 32|0;
	 $vararg_buffer2 = sp + 40|0;
	 $vararg_buffer = sp + 24|0;
	 $conn$addr = $conn;
	 $coll$addr = $coll;
	 $order$addr = $order;
	 $limit_start$addr = $limit_start;
	 $limit_len$addr = $limit_len;
	 $fetch$addr = $fetch;
	 $group$addr = $group;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7560;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $21 = $retval;
	  STACKTOP = sp;return ($21|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7560;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $21 = $retval;
	  STACKTOP = sp;return ($21|0);
	 }
	 $3 = $coll$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 7560;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 7304;
	  _xmmsc_log(0,2,7128,$vararg_buffer6);
	  $retval = 0;
	  $21 = $retval;
	  STACKTOP = sp;return ($21|0);
	 }
	 $4 = $fetch$addr;
	 $tobool7 = ($4|0)!=(0|0);
	 if (!($tobool7)) {
	  HEAP32[$vararg_buffer10>>2] = 7560;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 7584;
	  _xmmsc_log(0,2,7128,$vararg_buffer10);
	  $retval = 0;
	  $21 = $retval;
	  STACKTOP = sp;return ($21|0);
	 }
	 $5 = $group$addr;
	 $tobool10 = ($5|0)!=(0|0);
	 if ($tobool10) {
	  $6 = $group$addr;
	  (_xmmsv_ref($6)|0);
	 } else {
	  $call = (_xmmsv_new_list()|0);
	  $group$addr = $call;
	 }
	 $7 = $coll$addr;
	 $8 = $order$addr;
	 $call14 = (_xmmsv_coll_add_order_operators($7,$8)|0);
	 $ordered = $call14;
	 $9 = $conn$addr;
	 $10 = $ordered;
	 $call15 = (___xmmsv_identity_xmmsv($10)|0);
	 $11 = $limit_start$addr;
	 $12 = ($11|0)<(0);
	 $13 = $12 << 31 >> 31;
	 $14 = (_xmmsv_new_int($11,$13)|0);
	 $call17 = (___xmmsv_identity_xmmsv($14)|0);
	 $15 = $limit_len$addr;
	 $16 = ($15|0)<(0);
	 $17 = $16 << 31 >> 31;
	 $18 = (_xmmsv_new_int($15,$17)|0);
	 $call20 = (___xmmsv_identity_xmmsv($18)|0);
	 $19 = $fetch$addr;
	 $call21 = (_xmmsv_ref($19)|0);
	 $call22 = (___xmmsv_identity_xmmsv($call21)|0);
	 $20 = $group$addr;
	 $call23 = (___xmmsv_identity_xmmsv($20)|0);
	 HEAP32[$vararg_buffer14>>2] = $call15;
	 $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	 HEAP32[$vararg_ptr17>>2] = $call17;
	 $vararg_ptr18 = (($vararg_buffer14) + 8|0);
	 HEAP32[$vararg_ptr18>>2] = $call20;
	 $vararg_ptr19 = (($vararg_buffer14) + 12|0);
	 HEAP32[$vararg_ptr19>>2] = $call22;
	 $vararg_ptr20 = (($vararg_buffer14) + 16|0);
	 HEAP32[$vararg_ptr20>>2] = $call23;
	 $vararg_ptr21 = (($vararg_buffer14) + 20|0);
	 HEAP32[$vararg_ptr21>>2] = 0;
	 $call24 = (_xmmsc_send_cmd($9,6,39,$vararg_buffer14)|0);
	 $retval = $call24;
	 $21 = $retval;
	 STACKTOP = sp;return ($21|0);
	}
	function _xmmsc_broadcast_collection_changed($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7664;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7664;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,11)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_coll_idlist_from_playlist_file($conn,$path) {
	 $conn = $conn|0;
	 $path = $path|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $conn$addr = 0, $enc_url = 0, $ipc = 0, $path$addr = 0, $res = 0, $retval = 0;
	 var $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $path$addr = $path;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 7704;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 7168;
	  _xmmsc_log(0,2,7128,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 7704;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 7192;
	  _xmmsc_log(0,2,7128,$vararg_buffer2);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $path$addr;
	 $call = (_xmmsv_encode_url($3)|0);
	 $enc_url = $call;
	 $4 = $conn$addr;
	 $5 = $enc_url;
	 $call4 = (_xmmsv_new_string($5)|0);
	 $call5 = (___xmmsv_null_to_none($call4)|0);
	 $call6 = (___xmmsv_identity_xmmsv($call5)|0);
	 HEAP32[$vararg_buffer6>>2] = $call6;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call7 = (_xmmsc_send_cmd($4,6,40,$vararg_buffer6)|0);
	 $res = $call7;
	 $6 = $enc_url;
	 _free($6);
	 $7 = $res;
	 $retval = $7;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmmsv_coll_parse($pattern,$coll) {
	 $pattern = $pattern|0;
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $call = 0, $coll$addr = 0, $pattern$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $pattern$addr = $pattern;
	 $coll$addr = $coll;
	 $0 = $pattern$addr;
	 $1 = $coll$addr;
	 $call = (_xmmsv_coll_parse_custom($0,13,14,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsv_coll_parse_custom($pattern,$parse_f,$build_f,$coll) {
	 $pattern = $pattern|0;
	 $parse_f = $parse_f|0;
	 $build_f = $build_f|0;
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
	 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $build_f$addr = 0, $call = 0, $call1 = 0, $call7 = 0, $cmp = 0, $cmp10 = 0, $cmp2 = 0, $cmp3 = 0, $coll$addr = 0, $conv = 0, $endstr = 0, $k = 0, $last = 0;
	 var $next = 0, $next5 = 0, $next9 = 0, $parse_f$addr = 0, $pattern$addr = 0, $tobool = 0, $tobool8 = 0, $tokens = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $next = sp + 24|0;
	 $pattern$addr = $pattern;
	 $parse_f$addr = $parse_f;
	 $build_f$addr = $build_f;
	 $coll$addr = $coll;
	 $0 = $pattern$addr;
	 $1 = $pattern$addr;
	 $call = (_strlen(($1|0))|0);
	 $add$ptr = (($0) + ($call)|0);
	 $endstr = $add$ptr;
	 $tokens = 0;
	 $last = 0;
	 while(1) {
	  $2 = $pattern$addr;
	  $3 = $endstr;
	  $cmp = ($2>>>0)<($3>>>0);
	  if (!($cmp)) {
	   break;
	  }
	  $4 = $parse_f$addr;
	  $5 = $pattern$addr;
	  $call1 = (FUNCTION_TABLE_iii[$4 & 31]($5,$next)|0);
	  $k = $call1;
	  $6 = $k;
	  $cmp2 = ($6|0)==(0|0);
	  if ($cmp2) {
	   label = 5;
	   break;
	  }
	  $7 = $k;
	  $8 = HEAP32[$7>>2]|0;
	  $cmp3 = ($8|0)==(0);
	  if ($cmp3) {
	   label = 5;
	   break;
	  }
	  $9 = $last;
	  $tobool = ($9|0)!=(0|0);
	  if ($tobool) {
	   $11 = $k;
	   $12 = $last;
	   $next5 = (($12) + 8|0);
	   HEAP32[$next5>>2] = $11;
	  } else {
	   $10 = $k;
	   $tokens = $10;
	  }
	  $13 = $k;
	  $last = $13;
	  $14 = HEAP32[$next>>2]|0;
	  $pattern$addr = $14;
	 }
	 if ((label|0) == 5) {
	 }
	 $15 = $build_f$addr;
	 $16 = $tokens;
	 $call7 = (FUNCTION_TABLE_ii[$15 & 15]($16)|0);
	 $17 = $coll$addr;
	 HEAP32[$17>>2] = $call7;
	 $18 = $tokens;
	 $k = $18;
	 while(1) {
	  $19 = $k;
	  $tobool8 = ($19|0)!=(0|0);
	  if (!($tobool8)) {
	   break;
	  }
	  $20 = $k;
	  $next9 = (($20) + 8|0);
	  $21 = HEAP32[$next9>>2]|0;
	  $last = $21;
	  $22 = $k;
	  _coll_token_free($22);
	  $23 = $last;
	  $k = $23;
	 }
	 $24 = $coll$addr;
	 $25 = HEAP32[$24>>2]|0;
	 $cmp10 = ($25|0)!=(0|0);
	 $conv = $cmp10&1;
	 STACKTOP = sp;return ($conv|0);
	}
	function _xmmsv_coll_default_parse_tokens($str,$newpos) {
	 $str = $str|0;
	 $newpos = $newpos|0;
	 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
	 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
	 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
	 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
	 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
	 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
	 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
	 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add$ptr100 = 0, $add$ptr16 = 0, $add$ptr23 = 0, $add$ptr30 = 0, $add$ptr37 = 0, $add$ptr44 = 0, $add$ptr51 = 0, $add$ptr58 = 0, $add$ptr65 = 0, $add$ptr72 = 0, $add$ptr79 = 0, $add$ptr86 = 0;
	 var $add$ptr93 = 0, $add152 = 0, $arrayidx = 0, $arrayidx250 = 0, $call = 0, $call101 = 0, $call111 = 0, $call112 = 0, $call151 = 0, $call154 = 0, $call17 = 0, $call221 = 0, $call24 = 0, $call256 = 0, $call31 = 0, $call38 = 0, $call45 = 0, $call47 = 0, $call52 = 0, $call54 = 0;
	 var $call59 = 0, $call66 = 0, $call73 = 0, $call75 = 0, $call80 = 0, $call82 = 0, $call87 = 0, $call89 = 0, $call94 = 0, $call96 = 0, $cmp = 0, $cmp104 = 0, $cmp107 = 0, $cmp115 = 0, $cmp119 = 0, $cmp124 = 0, $cmp13 = 0, $cmp131 = 0, $cmp135 = 0, $cmp145 = 0;
	 var $cmp157 = 0, $cmp163 = 0, $cmp171 = 0, $cmp177 = 0, $cmp181 = 0, $cmp185 = 0, $cmp189 = 0, $cmp192 = 0, $cmp199 = 0, $cmp20 = 0, $cmp203 = 0, $cmp211 = 0, $cmp215 = 0, $cmp225 = 0, $cmp229 = 0, $cmp237 = 0, $cmp241 = 0, $cmp27 = 0, $cmp34 = 0, $cmp41 = 0;
	 var $cmp48 = 0, $cmp5 = 0, $cmp55 = 0, $cmp62 = 0, $cmp69 = 0, $cmp76 = 0, $cmp8 = 0, $cmp83 = 0, $cmp90 = 0, $cmp97 = 0, $conv = 0, $conv103 = 0, $conv106 = 0, $conv114 = 0, $conv117 = 0, $conv118 = 0, $conv12 = 0, $conv123 = 0, $conv130 = 0, $conv134 = 0;
	 var $conv143 = 0, $conv144 = 0, $conv156 = 0, $conv162 = 0, $conv170 = 0, $conv176 = 0, $conv180 = 0, $conv184 = 0, $conv188 = 0, $conv19 = 0, $conv198 = 0, $conv202 = 0, $conv210 = 0, $conv214 = 0, $conv220 = 0, $conv224 = 0, $conv228 = 0, $conv236 = 0, $conv240 = 0, $conv26 = 0;
	 var $conv33 = 0, $conv4 = 0, $conv40 = 0, $conv61 = 0, $conv68 = 0, $conv7 = 0, $escape = 0, $i = 0, $inc = 0, $inc249 = 0, $incdec$ptr = 0, $incdec$ptr110 = 0, $incdec$ptr141 = 0, $incdec$ptr148 = 0, $incdec$ptr174 = 0, $incdec$ptr251 = 0, $mul = 0, $mul153 = 0, $newpos$addr = 0, $quote = 0;
	 var $retval = 0, $str$addr = 0, $strval = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tmp = 0, $tobool = 0, $tobool122 = 0, $tobool127 = 0, $tobool160 = 0, $tobool168 = 0, $tobool222 = 0, $tobool234 = 0, $tobool246 = 0, $tobool253 = 0, $type = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $str$addr = $str;
	 $newpos$addr = $newpos;
	 $escape = 0;
	 while(1) {
	  $0 = $str$addr;
	  $1 = HEAP8[$0>>0]|0;
	  $conv = $1 << 24 >> 24;
	  $cmp = ($conv|0)==(32);
	  if (!($cmp)) {
	   break;
	  }
	  $2 = $str$addr;
	  $incdec$ptr = (($2) + 1|0);
	  $str$addr = $incdec$ptr;
	 }
	 $3 = $str$addr;
	 $4 = HEAP8[$3>>0]|0;
	 $conv4 = $4 << 24 >> 24;
	 $cmp5 = ($conv4|0)==(0);
	 if ($cmp5) {
	  $retval = 0;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $5 = $str$addr;
	 $tmp = $5;
	 $6 = $tmp;
	 $7 = HEAP8[$6>>0]|0;
	 $conv7 = $7 << 24 >> 24;
	 $cmp8 = ($conv7|0)==(40);
	 if ($cmp8) {
	  $8 = $tmp;
	  $add$ptr = (($8) + 1|0);
	  $9 = $newpos$addr;
	  HEAP32[$9>>2] = $add$ptr;
	  $call = (_coll_token_new(1,0)|0);
	  $retval = $call;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $10 = $tmp;
	 $11 = HEAP8[$10>>0]|0;
	 $conv12 = $11 << 24 >> 24;
	 $cmp13 = ($conv12|0)==(41);
	 if ($cmp13) {
	  $12 = $tmp;
	  $add$ptr16 = (($12) + 1|0);
	  $13 = $newpos$addr;
	  HEAP32[$13>>2] = $add$ptr16;
	  $call17 = (_coll_token_new(2,0)|0);
	  $retval = $call17;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $14 = $tmp;
	 $15 = HEAP8[$14>>0]|0;
	 $conv19 = $15 << 24 >> 24;
	 $cmp20 = ($conv19|0)==(35);
	 if ($cmp20) {
	  $16 = $tmp;
	  $add$ptr23 = (($16) + 1|0);
	  $17 = $newpos$addr;
	  HEAP32[$17>>2] = $add$ptr23;
	  $call24 = (_coll_token_new(4,0)|0);
	  $retval = $call24;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $18 = $tmp;
	 $19 = HEAP8[$18>>0]|0;
	 $conv26 = $19 << 24 >> 24;
	 $cmp27 = ($conv26|0)==(43);
	 if ($cmp27) {
	  $20 = $tmp;
	  $add$ptr30 = (($20) + 1|0);
	  $21 = $newpos$addr;
	  HEAP32[$21>>2] = $add$ptr30;
	  $call31 = (_coll_token_new(14,0)|0);
	  $retval = $call31;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $22 = $tmp;
	 $23 = HEAP8[$22>>0]|0;
	 $conv33 = $23 << 24 >> 24;
	 $cmp34 = ($conv33|0)==(58);
	 if ($cmp34) {
	  $24 = $tmp;
	  $add$ptr37 = (($24) + 1|0);
	  $25 = $newpos$addr;
	  HEAP32[$25>>2] = $add$ptr37;
	  $call38 = (_coll_token_new(15,0)|0);
	  $retval = $call38;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $26 = $tmp;
	 $27 = HEAP8[$26>>0]|0;
	 $conv40 = $27 << 24 >> 24;
	 $cmp41 = ($conv40|0)==(126);
	 if ($cmp41) {
	  $28 = $tmp;
	  $add$ptr44 = (($28) + 1|0);
	  $29 = $newpos$addr;
	  HEAP32[$29>>2] = $add$ptr44;
	  $call45 = (_coll_token_new(16,0)|0);
	  $retval = $call45;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $30 = $tmp;
	 $call47 = (_strncmp(7744,$30,2)|0);
	 $cmp48 = ($call47|0)==(0);
	 if ($cmp48) {
	  $31 = $tmp;
	  $add$ptr51 = (($31) + 2|0);
	  $32 = $newpos$addr;
	  HEAP32[$32>>2] = $add$ptr51;
	  $call52 = (_coll_token_new(19,0)|0);
	  $retval = $call52;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $33 = $tmp;
	 $call54 = (_strncmp(7752,$33,2)|0);
	 $cmp55 = ($call54|0)==(0);
	 if ($cmp55) {
	  $34 = $tmp;
	  $add$ptr58 = (($34) + 2|0);
	  $35 = $newpos$addr;
	  HEAP32[$35>>2] = $add$ptr58;
	  $call59 = (_coll_token_new(20,0)|0);
	  $retval = $call59;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $36 = $tmp;
	 $37 = HEAP8[$36>>0]|0;
	 $conv61 = $37 << 24 >> 24;
	 $cmp62 = ($conv61|0)==(60);
	 if ($cmp62) {
	  $38 = $tmp;
	  $add$ptr65 = (($38) + 1|0);
	  $39 = $newpos$addr;
	  HEAP32[$39>>2] = $add$ptr65;
	  $call66 = (_coll_token_new(17,0)|0);
	  $retval = $call66;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $40 = $tmp;
	 $41 = HEAP8[$40>>0]|0;
	 $conv68 = $41 << 24 >> 24;
	 $cmp69 = ($conv68|0)==(62);
	 if ($cmp69) {
	  $42 = $tmp;
	  $add$ptr72 = (($42) + 1|0);
	  $43 = $newpos$addr;
	  HEAP32[$43>>2] = $add$ptr72;
	  $call73 = (_coll_token_new(18,0)|0);
	  $retval = $call73;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $44 = $tmp;
	 $call75 = (_strncmp(7760,$44,2)|0);
	 $cmp76 = ($call75|0)==(0);
	 if ($cmp76) {
	  $45 = $tmp;
	  $add$ptr79 = (($45) + 2|0);
	  $46 = $newpos$addr;
	  HEAP32[$46>>2] = $add$ptr79;
	  $call80 = (_coll_token_new(11,0)|0);
	  $retval = $call80;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $47 = $tmp;
	 $call82 = (_strncmp(7768,$47,3)|0);
	 $cmp83 = ($call82|0)==(0);
	 if ($cmp83) {
	  $48 = $tmp;
	  $add$ptr86 = (($48) + 3|0);
	  $49 = $newpos$addr;
	  HEAP32[$49>>2] = $add$ptr86;
	  $call87 = (_coll_token_new(12,0)|0);
	  $retval = $call87;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $50 = $tmp;
	 $call89 = (_strncmp(7776,$50,3)|0);
	 $cmp90 = ($call89|0)==(0);
	 if ($cmp90) {
	  $51 = $tmp;
	  $add$ptr93 = (($51) + 3|0);
	  $52 = $newpos$addr;
	  HEAP32[$52>>2] = $add$ptr93;
	  $call94 = (_coll_token_new(13,0)|0);
	  $retval = $call94;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $53 = $tmp;
	 $call96 = (_strncmp(7784,$53,3)|0);
	 $cmp97 = ($call96|0)==(0);
	 if ($cmp97) {
	  $54 = $tmp;
	  $add$ptr100 = (($54) + 3|0);
	  $55 = $newpos$addr;
	  HEAP32[$55>>2] = $add$ptr100;
	  $call101 = (_coll_token_new(3,0)|0);
	  $retval = $call101;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 $56 = $tmp;
	 $57 = HEAP8[$56>>0]|0;
	 $conv103 = $57 << 24 >> 24;
	 $cmp104 = ($conv103|0)==(34);
	 if ($cmp104) {
	  label = 36;
	 } else {
	  $58 = $tmp;
	  $59 = HEAP8[$58>>0]|0;
	  $conv106 = $59 << 24 >> 24;
	  $cmp107 = ($conv106|0)==(39);
	  if ($cmp107) {
	   label = 36;
	  } else {
	   $i = 0;
	   $type = 7;
	   $89 = $tmp;
	   $call151 = (_strlen(($89|0))|0);
	   $add152 = (($call151) + 1)|0;
	   $mul153 = $add152;
	   $call154 = (_calloc(1,$mul153)|0);
	   $strval = $call154;
	   while(1) {
	    $90 = $tmp;
	    $91 = HEAP8[$90>>0]|0;
	    $conv156 = $91 << 24 >> 24;
	    $cmp157 = ($conv156|0)!=(0);
	    if ($cmp157) {
	     $92 = $escape;
	     $tobool160 = ($92|0)!=(0);
	     if ($tobool160) {
	      $145 = 1;
	     } else {
	      $93 = $tmp;
	      $94 = HEAP8[$93>>0]|0;
	      $conv162 = $94 << 24 >> 24;
	      $cmp163 = ($conv162|0)!=(32);
	      $145 = $cmp163;
	     }
	     $144 = $145;
	    } else {
	     $144 = 0;
	    }
	    if (!($144)) {
	     break;
	    }
	    $95 = $escape;
	    $tobool168 = ($95|0)!=(0);
	    if (!($tobool168)) {
	     $96 = $tmp;
	     $97 = HEAP8[$96>>0]|0;
	     $conv170 = $97 << 24 >> 24;
	     $cmp171 = ($conv170|0)==(92);
	     if ($cmp171) {
	      $escape = 1;
	      $98 = $tmp;
	      $incdec$ptr174 = (($98) + 1|0);
	      $tmp = $incdec$ptr174;
	      continue;
	     }
	     $99 = $tmp;
	     $100 = HEAP8[$99>>0]|0;
	     $conv176 = $100 << 24 >> 24;
	     $cmp177 = ($conv176|0)==(58);
	     if ($cmp177) {
	      label = 69;
	      break;
	     }
	     $101 = $tmp;
	     $102 = HEAP8[$101>>0]|0;
	     $conv180 = $102 << 24 >> 24;
	     $cmp181 = ($conv180|0)==(126);
	     if ($cmp181) {
	      label = 69;
	      break;
	     }
	     $103 = $tmp;
	     $104 = HEAP8[$103>>0]|0;
	     $conv184 = $104 << 24 >> 24;
	     $cmp185 = ($conv184|0)==(60);
	     if ($cmp185) {
	      label = 69;
	      break;
	     }
	     $105 = $tmp;
	     $106 = HEAP8[$105>>0]|0;
	     $conv188 = $106 << 24 >> 24;
	     $cmp189 = ($conv188|0)==(62);
	     if ($cmp189) {
	      label = 69;
	      break;
	     }
	     $109 = $tmp;
	     $110 = HEAP8[$109>>0]|0;
	     $conv198 = $110 << 24 >> 24;
	     $cmp199 = ($conv198|0)==(40);
	     if ($cmp199) {
	      label = 75;
	      break;
	     }
	     $111 = $tmp;
	     $112 = HEAP8[$111>>0]|0;
	     $conv202 = $112 << 24 >> 24;
	     $cmp203 = ($conv202|0)==(41);
	     if ($cmp203) {
	      label = 75;
	      break;
	     }
	    }
	    $113 = $type;
	    L91: do {
	     if ((($113|0) == 7)) {
	      $114 = $tmp;
	      $115 = HEAP8[$114>>0]|0;
	      $conv210 = $115 << 24 >> 24;
	      $cmp211 = ($conv210|0)==(44);
	      do {
	       if (!($cmp211)) {
	        $116 = $tmp;
	        $117 = HEAP8[$116>>0]|0;
	        $conv214 = $117 << 24 >> 24;
	        $cmp215 = ($conv214|0)==(45);
	        if ($cmp215) {
	         break;
	        }
	        label = 84;
	        break L91;
	       }
	      } while(0);
	      $type = 8;
	     } else if ((($113|0) == 8)) {
	      label = 84;
	     } else if ((($113|0) == 5)) {
	      label = 89;
	     } else if ((($113|0) == 6)) {
	     } else {
	      $type = 0;
	     }
	    } while(0);
	    if ((label|0) == 84) {
	     label = 0;
	     $118 = $tmp;
	     $119 = HEAP8[$118>>0]|0;
	     $conv220 = $119 << 24 >> 24;
	     $call221 = (_isdigit($conv220)|0);
	     $tobool222 = ($call221|0)!=(0);
	     do {
	      if (!($tobool222)) {
	       $120 = $tmp;
	       $121 = HEAP8[$120>>0]|0;
	       $conv224 = $121 << 24 >> 24;
	       $cmp225 = ($conv224|0)!=(44);
	       if (!($cmp225)) {
	        break;
	       }
	       $122 = $tmp;
	       $123 = HEAP8[$122>>0]|0;
	       $conv228 = $123 << 24 >> 24;
	       $cmp229 = ($conv228|0)!=(45);
	       if (!($cmp229)) {
	        break;
	       }
	       $type = 5;
	      }
	     } while(0);
	     label = 89;
	    }
	    if ((label|0) == 89) {
	     label = 0;
	     $124 = $escape;
	     $tobool234 = ($124|0)!=(0);
	     do {
	      if (!($tobool234)) {
	       $125 = $tmp;
	       $126 = HEAP8[$125>>0]|0;
	       $conv236 = $126 << 24 >> 24;
	       $cmp237 = ($conv236|0)==(42);
	       if (!($cmp237)) {
	        $127 = $tmp;
	        $128 = HEAP8[$127>>0]|0;
	        $conv240 = $128 << 24 >> 24;
	        $cmp241 = ($conv240|0)==(63);
	        if (!($cmp241)) {
	         break;
	        }
	       }
	       $type = 6;
	      }
	     } while(0);
	    }
	    $129 = $escape;
	    $tobool246 = ($129|0)!=(0);
	    if ($tobool246) {
	     $escape = 0;
	    }
	    $130 = $tmp;
	    $131 = HEAP8[$130>>0]|0;
	    $132 = $i;
	    $inc249 = (($132) + 1)|0;
	    $i = $inc249;
	    $133 = $strval;
	    $arrayidx250 = (($133) + ($132)|0);
	    HEAP8[$arrayidx250>>0] = $131;
	    $134 = $tmp;
	    $incdec$ptr251 = (($134) + 1|0);
	    $tmp = $incdec$ptr251;
	   }
	   if ((label|0) == 69) {
	    $107 = $tmp;
	    $108 = $str$addr;
	    $sub$ptr$lhs$cast = $107;
	    $sub$ptr$rhs$cast = $108;
	    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	    $cmp192 = ($sub$ptr$sub|0)==(1);
	    if ($cmp192) {
	     $type = 10;
	    } else {
	     $type = 9;
	    }
	   }
	   else if ((label|0) == 75) {
	   }
	   $135 = $tmp;
	   $136 = $newpos$addr;
	   HEAP32[$136>>2] = $135;
	  }
	 }
	 if ((label|0) == 36) {
	  $i = 0;
	  $60 = $tmp;
	  $61 = HEAP8[$60>>0]|0;
	  $quote = $61;
	  $type = 5;
	  $62 = $tmp;
	  $incdec$ptr110 = (($62) + 1|0);
	  $tmp = $incdec$ptr110;
	  $63 = $tmp;
	  $call111 = (_strlen(($63|0))|0);
	  $add = (($call111) + 1)|0;
	  $mul = $add;
	  $call112 = (_calloc(1,$mul)|0);
	  $strval = $call112;
	  while(1) {
	   $64 = $tmp;
	   $65 = HEAP8[$64>>0]|0;
	   $conv114 = $65 << 24 >> 24;
	   $cmp115 = ($conv114|0)!=(0);
	   if ($cmp115) {
	    $66 = $escape;
	    $tobool = ($66|0)!=(0);
	    if ($tobool) {
	     $143 = 1;
	    } else {
	     $67 = $tmp;
	     $68 = HEAP8[$67>>0]|0;
	     $conv117 = $68 << 24 >> 24;
	     $69 = $quote;
	     $conv118 = $69 << 24 >> 24;
	     $cmp119 = ($conv117|0)!=($conv118|0);
	     $143 = $cmp119;
	    }
	    $142 = $143;
	   } else {
	    $142 = 0;
	   }
	   if (!($142)) {
	    break;
	   }
	   $70 = $escape;
	   $tobool122 = ($70|0)!=(0);
	   do {
	    if ($tobool122) {
	     label = 45;
	    } else {
	     $71 = $tmp;
	     $72 = HEAP8[$71>>0]|0;
	     $conv123 = $72 << 24 >> 24;
	     $cmp124 = ($conv123|0)==(92);
	     if (!($cmp124)) {
	      label = 45;
	      break;
	     }
	     $escape = 1;
	    }
	   } while(0);
	   if ((label|0) == 45) {
	    label = 0;
	    $73 = $escape;
	    $tobool127 = ($73|0)!=(0);
	    if ($tobool127) {
	     $escape = 0;
	    } else {
	     $74 = $tmp;
	     $75 = HEAP8[$74>>0]|0;
	     $conv130 = $75 << 24 >> 24;
	     $cmp131 = ($conv130|0)==(42);
	     if ($cmp131) {
	      label = 49;
	     } else {
	      $76 = $tmp;
	      $77 = HEAP8[$76>>0]|0;
	      $conv134 = $77 << 24 >> 24;
	      $cmp135 = ($conv134|0)==(63);
	      if ($cmp135) {
	       label = 49;
	      }
	     }
	     if ((label|0) == 49) {
	      label = 0;
	      $type = 6;
	     }
	    }
	    $78 = $tmp;
	    $79 = HEAP8[$78>>0]|0;
	    $80 = $i;
	    $inc = (($80) + 1)|0;
	    $i = $inc;
	    $81 = $strval;
	    $arrayidx = (($81) + ($80)|0);
	    HEAP8[$arrayidx>>0] = $79;
	   }
	   $82 = $tmp;
	   $incdec$ptr141 = (($82) + 1|0);
	   $tmp = $incdec$ptr141;
	  }
	  $83 = $tmp;
	  $84 = HEAP8[$83>>0]|0;
	  $conv143 = $84 << 24 >> 24;
	  $85 = $quote;
	  $conv144 = $85 << 24 >> 24;
	  $cmp145 = ($conv143|0)==($conv144|0);
	  if ($cmp145) {
	   $86 = $tmp;
	   $incdec$ptr148 = (($86) + 1|0);
	   $tmp = $incdec$ptr148;
	  }
	  $87 = $tmp;
	  $88 = $newpos$addr;
	  HEAP32[$88>>2] = $87;
	 }
	 $137 = $escape;
	 $tobool253 = ($137|0)!=(0);
	 if ($tobool253) {
	  $138 = $strval;
	  _free($138);
	  $retval = 0;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 } else {
	  $139 = $type;
	  $140 = $strval;
	  $call256 = (_coll_token_new($139,$140)|0);
	  $retval = $call256;
	  $141 = $retval;
	  STACKTOP = sp;return ($141|0);
	 }
	 return 0|0;
	}
	function _xmmsv_coll_default_parse_build($tokens) {
	 $tokens = $tokens|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call1 = 0, $coll = 0, $tk = 0, $tobool = 0, $tobool2 = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll = sp;
	 $tokens$addr = $tokens;
	 $0 = $tokens$addr;
	 (_coll_parse_prepare($0)|0);
	 $1 = $tokens$addr;
	 $call1 = (_coll_parse_operation($1,$coll)|0);
	 $tk = $call1;
	 $2 = $tk;
	 $tobool = ($2|0)!=(0|0);
	 if ($tobool) {
	  $3 = HEAP32[$coll>>2]|0;
	  $tobool2 = ($3|0)!=(0|0);
	  if ($tobool2) {
	   $4 = HEAP32[$coll>>2]|0;
	   _xmmsv_unref($4);
	   HEAP32[$coll>>2] = 0;
	  }
	 }
	 $5 = HEAP32[$coll>>2]|0;
	 STACKTOP = sp;return ($5|0);
	}
	function _coll_token_free($token) {
	 $token = $token|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $string = 0, $string1 = 0, $token$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $token$addr = $token;
	 $0 = $token$addr;
	 $string = (($0) + 4|0);
	 $1 = HEAP32[$string>>2]|0;
	 $cmp = ($1|0)!=(0|0);
	 if ($cmp) {
	  $2 = $token$addr;
	  $string1 = (($2) + 4|0);
	  $3 = HEAP32[$string1>>2]|0;
	  _free($3);
	 }
	 $4 = $token$addr;
	 _free($4);
	 STACKTOP = sp;return;
	}
	function _coll_token_new($type,$string) {
	 $type = $type|0;
	 $string = $string|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $string$addr = 0, $string2 = 0, $token = 0, $type$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $type$addr = $type;
	 $string$addr = $string;
	 $call = (_calloc(1,12)|0);
	 $token = $call;
	 $0 = $type$addr;
	 $1 = $token;
	 HEAP32[$1>>2] = $0;
	 $2 = $string$addr;
	 $3 = $token;
	 $string2 = (($3) + 4|0);
	 HEAP32[$string2>>2] = $2;
	 $4 = $token;
	 STACKTOP = sp;return ($4|0);
	}
	function _coll_parse_prepare($tokens) {
	 $tokens = $tokens|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
	 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx42 = 0, $arrayidx45 = 0, $arrayidx51 = 0, $arrayidx53 = 0, $arrayidx57 = 0, $arrayidx63 = 0, $arrayidx65 = 0, $call = 0, $call16 = 0, $call36 = 0, $call37 = 0;
	 var $cmp = 0, $cmp13 = 0, $cmp17 = 0, $cmp2 = 0, $cmp26 = 0, $cmp31 = 0, $cmp33 = 0, $cmp39 = 0, $cmp4 = 0, $cmp47 = 0, $cmp54 = 0, $cmp59 = 0, $cmp71 = 0, $cmp77 = 0, $conv = 0, $conv46 = 0, $conv58 = 0, $curr = 0, $i = 0, $inc = 0;
	 var $inc49 = 0, $inc52 = 0, $inc62 = 0, $mul = 0, $newstr = 0, $next = 0, $o = 0, $prev = 0, $string = 0, $string15 = 0, $string35 = 0, $string38 = 0, $string44 = 0, $string50 = 0, $string56 = 0, $string66 = 0, $string67 = 0, $sub = 0, $tobool = 0, $tokens$addr = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $prev = 0;
	 $0 = $tokens$addr;
	 $curr = $0;
	 $prev = 0;
	 $1 = $tokens$addr;
	 $curr = $1;
	 while(1) {
	  $2 = $curr;
	  $tobool = ($2|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $3 = $prev;
	  $cmp = ($3|0)==(0|0);
	  if ($cmp) {
	  } else {
	   $4 = $curr;
	   $5 = HEAP32[$4>>2]|0;
	   if ((($5|0) == 17) | (($5|0) == 18) | (($5|0) == 19) | (($5|0) == 20)) {
	    $6 = $prev;
	    $7 = HEAP32[$6>>2]|0;
	    $cmp2 = ($7|0)==(5);
	    if ($cmp2) {
	     $8 = $prev;
	     $string = (($8) + 4|0);
	     $9 = HEAP32[$string>>2]|0;
	     $call = (_strlen(($9|0))|0);
	     $cmp4 = ($call|0)==(1);
	     if ($cmp4) {
	      $10 = $prev;
	      HEAP32[$10>>2] = 10;
	     } else {
	      $11 = $prev;
	      HEAP32[$11>>2] = 9;
	     }
	    }
	   } else {
	   }
	   $12 = $prev;
	   $13 = HEAP32[$12>>2]|0;
	   if ((($13|0) == 14)) {
	    $14 = $curr;
	    $15 = HEAP32[$14>>2]|0;
	    $cmp13 = ($15|0)==(5);
	    if ($cmp13) {
	     $16 = $curr;
	     $string15 = (($16) + 4|0);
	     $17 = HEAP32[$string15>>2]|0;
	     $call16 = (_strlen(($17|0))|0);
	     $cmp17 = ($call16|0)==(1);
	     if ($cmp17) {
	      $18 = $curr;
	      HEAP32[$18>>2] = 10;
	     } else {
	      $19 = $curr;
	      HEAP32[$19>>2] = 9;
	     }
	    }
	   } else if ((($13|0) == 16)) {
	    $20 = $curr;
	    $21 = HEAP32[$20>>2]|0;
	    $cmp26 = ($21|0)==(7);
	    if ($cmp26) {
	     $22 = $curr;
	     HEAP32[$22>>2] = 5;
	    }
	    $23 = $curr;
	    $24 = HEAP32[$23>>2]|0;
	    $cmp31 = ($24|0)==(5);
	    if ($cmp31) {
	     label = 24;
	    } else {
	     $25 = $curr;
	     $26 = HEAP32[$25>>2]|0;
	     $cmp33 = ($26|0)==(6);
	     if ($cmp33) {
	      label = 24;
	     }
	    }
	    if ((label|0) == 24) {
	     label = 0;
	     $27 = $curr;
	     $string35 = (($27) + 4|0);
	     $28 = HEAP32[$string35>>2]|0;
	     $call36 = (_strlen(($28|0))|0);
	     $add = (($call36) + 3)|0;
	     $mul = $add;
	     $call37 = (_calloc(1,$mul)|0);
	     $newstr = $call37;
	     $i = 0;
	     $o = 0;
	     $29 = $i;
	     $30 = $curr;
	     $string38 = (($30) + 4|0);
	     $31 = HEAP32[$string38>>2]|0;
	     $arrayidx = (($31) + ($29)|0);
	     $32 = HEAP8[$arrayidx>>0]|0;
	     $conv = $32 << 24 >> 24;
	     $cmp39 = ($conv|0)!=(42);
	     if ($cmp39) {
	      $33 = $o;
	      $inc = (($33) + 1)|0;
	      $o = $inc;
	      $34 = $newstr;
	      $arrayidx42 = (($34) + ($33)|0);
	      HEAP8[$arrayidx42>>0] = 42;
	     }
	     while(1) {
	      $35 = $i;
	      $36 = $curr;
	      $string44 = (($36) + 4|0);
	      $37 = HEAP32[$string44>>2]|0;
	      $arrayidx45 = (($37) + ($35)|0);
	      $38 = HEAP8[$arrayidx45>>0]|0;
	      $conv46 = $38 << 24 >> 24;
	      $cmp47 = ($conv46|0)!=(0);
	      if (!($cmp47)) {
	       break;
	      }
	      $39 = $i;
	      $inc49 = (($39) + 1)|0;
	      $i = $inc49;
	      $40 = $curr;
	      $string50 = (($40) + 4|0);
	      $41 = HEAP32[$string50>>2]|0;
	      $arrayidx51 = (($41) + ($39)|0);
	      $42 = HEAP8[$arrayidx51>>0]|0;
	      $43 = $o;
	      $inc52 = (($43) + 1)|0;
	      $o = $inc52;
	      $44 = $newstr;
	      $arrayidx53 = (($44) + ($43)|0);
	      HEAP8[$arrayidx53>>0] = $42;
	     }
	     $45 = $i;
	     $cmp54 = ($45|0)>(0);
	     if ($cmp54) {
	      $46 = $i;
	      $sub = (($46) - 1)|0;
	      $47 = $curr;
	      $string56 = (($47) + 4|0);
	      $48 = HEAP32[$string56>>2]|0;
	      $arrayidx57 = (($48) + ($sub)|0);
	      $49 = HEAP8[$arrayidx57>>0]|0;
	      $conv58 = $49 << 24 >> 24;
	      $cmp59 = ($conv58|0)!=(42);
	      if ($cmp59) {
	       $50 = $o;
	       $inc62 = (($50) + 1)|0;
	       $o = $inc62;
	       $51 = $newstr;
	       $arrayidx63 = (($51) + ($50)|0);
	       HEAP8[$arrayidx63>>0] = 42;
	      }
	     }
	     $52 = $o;
	     $53 = $newstr;
	     $arrayidx65 = (($53) + ($52)|0);
	     HEAP8[$arrayidx65>>0] = 0;
	     $54 = $curr;
	     $string66 = (($54) + 4|0);
	     $55 = HEAP32[$string66>>2]|0;
	     _free($55);
	     $56 = $newstr;
	     $57 = $curr;
	     $string67 = (($57) + 4|0);
	     HEAP32[$string67>>2] = $56;
	    }
	   } else if ((($13|0) == 15)) {
	    $58 = $curr;
	    $59 = HEAP32[$58>>2]|0;
	    $cmp71 = ($59|0)==(6);
	    if ($cmp71) {
	     $60 = $prev;
	     HEAP32[$60>>2] = 16;
	    } else {
	     $61 = $curr;
	     $62 = HEAP32[$61>>2]|0;
	     $cmp77 = ($62|0)==(7);
	     if ($cmp77) {
	      $63 = $curr;
	      HEAP32[$63>>2] = 5;
	     }
	    }
	   } else {
	   }
	  }
	  $64 = $curr;
	  $prev = $64;
	  $65 = $curr;
	  $next = (($65) + 8|0);
	  $66 = HEAP32[$next>>2]|0;
	  $curr = $66;
	 }
	 STACKTOP = sp;return 1;
	}
	function _coll_parse_operation($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $call = 0, $ret$addr = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $1 = $ret$addr;
	 $call = (_coll_parse_andop($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _coll_parse_andop($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $call = 0, $ret$addr = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $1 = $ret$addr;
	 $call = (_coll_parse_andop_append($0,0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _coll_parse_andop_append($tokens,$operator,$ret) {
	 $tokens = $tokens|0;
	 $operator = $operator|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call14 = 0, $call4 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $first = 0, $operator$addr = 0;
	 var $ret$addr = 0, $retval = 0, $tk = 0, $tmp = 0, $tobool = 0, $tobool2 = 0, $tobool6 = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $first = sp + 4|0;
	 $tmp = sp;
	 $tokens$addr = $tokens;
	 $operator$addr = $operator;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $call = (_coll_parse_orop($0,$first)|0);
	 $tk = $call;
	 $1 = HEAP32[$first>>2]|0;
	 $tobool = ($1|0)!=(0|0);
	 if (!($tobool)) {
	  $2 = $ret$addr;
	  HEAP32[$2>>2] = 0;
	  $3 = $tokens$addr;
	  $retval = $3;
	  $30 = $retval;
	  STACKTOP = sp;return ($30|0);
	 }
	 $4 = $tk;
	 $tobool2 = ($4|0)!=(0|0);
	 if ($tobool2) {
	  $5 = $tk;
	  $6 = HEAP32[$5>>2]|0;
	  $cmp = ($6|0)==(12);
	  if ($cmp) {
	   $7 = $tk;
	   $call4 = (_coll_next_token($7)|0);
	   $tk = $call4;
	  }
	 }
	 $8 = $operator$addr;
	 $tobool6 = ($8|0)!=(0|0);
	 if ($tobool6) {
	  $22 = $operator$addr;
	  $23 = HEAP32[$first>>2]|0;
	  _xmmsv_coll_add_operand($22,$23);
	  $24 = HEAP32[$first>>2]|0;
	  _xmmsv_unref($24);
	  $25 = $tk;
	  $26 = $operator$addr;
	  $call14 = (_coll_parse_andop_append($25,$26,$tmp)|0);
	  $tk = $call14;
	  $27 = $operator$addr;
	  $28 = $ret$addr;
	  HEAP32[$28>>2] = $27;
	 } else {
	  $call8 = (_xmmsv_new_coll(3)|0);
	  $operator$addr = $call8;
	  $9 = $operator$addr;
	  $10 = HEAP32[$first>>2]|0;
	  _xmmsv_coll_add_operand($9,$10);
	  $11 = $tk;
	  $12 = $operator$addr;
	  $call9 = (_coll_parse_andop_append($11,$12,$tmp)|0);
	  $tk = $call9;
	  $13 = HEAP32[$tmp>>2]|0;
	  $cmp10 = ($13|0)==(0|0);
	  if ($cmp10) {
	   $14 = $operator$addr;
	   $15 = HEAP32[$first>>2]|0;
	   _xmmsv_coll_remove_operand($14,$15);
	   $16 = $operator$addr;
	   _xmmsv_unref($16);
	   $17 = HEAP32[$first>>2]|0;
	   $18 = $ret$addr;
	   HEAP32[$18>>2] = $17;
	  } else {
	   $19 = HEAP32[$first>>2]|0;
	   _xmmsv_unref($19);
	   $20 = $operator$addr;
	   $21 = $ret$addr;
	   HEAP32[$21>>2] = $20;
	  }
	 }
	 $29 = $tk;
	 $retval = $29;
	 $30 = $retval;
	 STACKTOP = sp;return ($30|0);
	}
	function _coll_parse_orop($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $call = 0, $ret$addr = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $1 = $ret$addr;
	 $call = (_coll_parse_orop_append($0,0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _coll_next_token($token) {
	 $token = $token|0;
	 var $0 = 0, $1 = 0, $2 = 0, $cond = 0, $next = 0, $tobool = 0, $token$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $token$addr = $token;
	 $0 = $token$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $token$addr;
	  $next = (($1) + 8|0);
	  $2 = HEAP32[$next>>2]|0;
	  $cond = $2;
	  STACKTOP = sp;return ($cond|0);
	 } else {
	  $cond = 0;
	  STACKTOP = sp;return ($cond|0);
	 }
	 return 0|0;
	}
	function _coll_parse_orop_append($tokens,$operator,$ret) {
	 $tokens = $tokens|0;
	 $operator = $operator|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
	 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call15 = 0, $call16 = 0, $call5 = 0, $cmp = 0, $cmp13 = 0, $first = 0, $operator$addr = 0, $ret$addr = 0, $retval = 0, $tk = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool3 = 0, $tobool8 = 0;
	 var $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $first = sp + 4|0;
	 $tokens$addr = $tokens;
	 $operator$addr = $operator;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $call = (_coll_parse_expr($0,$first)|0);
	 $tk = $call;
	 $1 = HEAP32[$first>>2]|0;
	 $tobool = ($1|0)!=(0|0);
	 if (!($tobool)) {
	  $2 = $ret$addr;
	  HEAP32[$2>>2] = 0;
	  $3 = $tokens$addr;
	  $retval = $3;
	  $23 = $retval;
	  STACKTOP = sp;return ($23|0);
	 }
	 $4 = $tk;
	 $tobool1 = ($4|0)!=(0|0);
	 if ($tobool1) {
	  $5 = $tk;
	  $6 = HEAP32[$5>>2]|0;
	  $cmp = ($6|0)==(11);
	  if ($cmp) {
	   $7 = $operator$addr;
	   $tobool3 = ($7|0)!=(0|0);
	   if (!($tobool3)) {
	    $call5 = (_xmmsv_new_coll(2)|0);
	    $operator$addr = $call5;
	   }
	  }
	 }
	 $8 = $operator$addr;
	 $tobool8 = ($8|0)!=(0|0);
	 if ($tobool8) {
	  $9 = $operator$addr;
	  $10 = HEAP32[$first>>2]|0;
	  _xmmsv_coll_add_operand($9,$10);
	  $11 = HEAP32[$first>>2]|0;
	  _xmmsv_unref($11);
	  $12 = $tk;
	  $tobool10 = ($12|0)!=(0|0);
	  if ($tobool10) {
	   $13 = $tk;
	   $14 = HEAP32[$13>>2]|0;
	   $cmp13 = ($14|0)==(11);
	   if ($cmp13) {
	    $15 = $tk;
	    $call15 = (_coll_next_token($15)|0);
	    $16 = $operator$addr;
	    $17 = $ret$addr;
	    $call16 = (_coll_parse_orop_append($call15,$16,$17)|0);
	    $tk = $call16;
	   }
	  }
	  $18 = $operator$addr;
	  $19 = $ret$addr;
	  HEAP32[$19>>2] = $18;
	 } else {
	  $20 = HEAP32[$first>>2]|0;
	  $21 = $ret$addr;
	  HEAP32[$21>>2] = $20;
	 }
	 $22 = $tk;
	 $retval = $22;
	 $23 = $retval;
	 STACKTOP = sp;return ($23|0);
	}
	function _coll_parse_expr($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call16 = 0, $call22 = 0, $call4 = 0, $cmp = 0, $coll = 0, $pos = 0, $ret$addr = 0;
	 var $retval = 0, $tobool = 0, $tobool11 = 0, $tobool17 = 0, $tobool23 = 0, $tobool5 = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll = sp + 4|0;
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $cmp = ($0|0)==(0|0);
	 if ($cmp) {
	  $1 = $ret$addr;
	  HEAP32[$1>>2] = 0;
	  $2 = $tokens$addr;
	  $retval = $2;
	  $30 = $retval;
	  STACKTOP = sp;return ($30|0);
	 }
	 $3 = $tokens$addr;
	 $call = (_coll_parse_posseq($3,$coll)|0);
	 $pos = $call;
	 $4 = HEAP32[$coll>>2]|0;
	 $tobool = ($4|0)!=(0|0);
	 if ($tobool) {
	  $5 = HEAP32[$coll>>2]|0;
	  $6 = $ret$addr;
	  HEAP32[$6>>2] = $5;
	  $7 = $pos;
	  $retval = $7;
	  $30 = $retval;
	  STACKTOP = sp;return ($30|0);
	 }
	 $8 = $tokens$addr;
	 $call4 = (_coll_parse_idseq($8,$coll)|0);
	 $pos = $call4;
	 $9 = HEAP32[$coll>>2]|0;
	 $tobool5 = ($9|0)!=(0|0);
	 if ($tobool5) {
	  $10 = HEAP32[$coll>>2]|0;
	  $11 = $ret$addr;
	  HEAP32[$11>>2] = $10;
	  $12 = $pos;
	  $retval = $12;
	  $30 = $retval;
	  STACKTOP = sp;return ($30|0);
	 }
	 $13 = $tokens$addr;
	 $call10 = (_coll_parse_filter($13,$coll)|0);
	 $pos = $call10;
	 $14 = HEAP32[$coll>>2]|0;
	 $tobool11 = ($14|0)!=(0|0);
	 if ($tobool11) {
	  $15 = HEAP32[$coll>>2]|0;
	  $16 = $ret$addr;
	  HEAP32[$16>>2] = $15;
	  $17 = $pos;
	  $retval = $17;
	  $30 = $retval;
	  STACKTOP = sp;return ($30|0);
	 }
	 $18 = $tokens$addr;
	 $call16 = (_coll_parse_parenexpr($18,$coll)|0);
	 $pos = $call16;
	 $19 = HEAP32[$coll>>2]|0;
	 $tobool17 = ($19|0)!=(0|0);
	 if ($tobool17) {
	  $20 = HEAP32[$coll>>2]|0;
	  $21 = $ret$addr;
	  HEAP32[$21>>2] = $20;
	  $22 = $pos;
	  $retval = $22;
	  $30 = $retval;
	  STACKTOP = sp;return ($30|0);
	 }
	 $23 = $tokens$addr;
	 $call22 = (_coll_parse_unaryop($23,$coll)|0);
	 $pos = $call22;
	 $24 = HEAP32[$coll>>2]|0;
	 $tobool23 = ($24|0)!=(0|0);
	 if ($tobool23) {
	  $25 = HEAP32[$coll>>2]|0;
	  $26 = $ret$addr;
	  HEAP32[$26>>2] = $25;
	  $27 = $pos;
	  $retval = $27;
	  $30 = $retval;
	  STACKTOP = sp;return ($30|0);
	 }
	 $28 = $ret$addr;
	 HEAP32[$28>>2] = 0;
	 $29 = $tokens$addr;
	 $retval = $29;
	 $30 = $retval;
	 STACKTOP = sp;return ($30|0);
	}
	function _coll_parse_posseq($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $call = 0, $ret$addr = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $1 = $ret$addr;
	 $call = (_coll_parse_sequence($0,7992,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _coll_parse_idseq($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $ret$addr = 0, $retval = 0;
	 var $tk = 0, $tobool = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $tk = $0;
	 $1 = $tk;
	 $tobool = ($1|0)!=(0|0);
	 if ($tobool) {
	  $2 = $tk;
	  $3 = HEAP32[$2>>2]|0;
	  $cmp = ($3|0)!=(4);
	  if (!($cmp)) {
	   $6 = $tk;
	   $call = (_coll_next_token($6)|0);
	   $tk = $call;
	   $7 = $tk;
	   $8 = $ret$addr;
	   $call1 = (_coll_parse_sequence($7,7968,$8)|0);
	   $tk = $call1;
	   $9 = $ret$addr;
	   $cmp2 = ($9|0)==(0|0);
	   if ($cmp2) {
	    $10 = $tokens$addr;
	    $cond = $10;
	   } else {
	    $11 = $tk;
	    $cond = $11;
	   }
	   $retval = $cond;
	   $12 = $retval;
	   STACKTOP = sp;return ($12|0);
	  }
	 }
	 $4 = $ret$addr;
	 HEAP32[$4>>2] = 0;
	 $5 = $tokens$addr;
	 $retval = $5;
	 $12 = $retval;
	 STACKTOP = sp;return ($12|0);
	}
	function _coll_parse_filter($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
	 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call11 = 0, $call14 = 0, $call2 = 0, $call7 = 0, $cmp = 0, $cmp8 = 0, $coll = 0, $pos = 0, $ret$addr = 0, $retval = 0, $string = 0, $tobool = 0, $tobool15 = 0, $tobool3 = 0;
	 var $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll = sp + 4|0;
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $call = (_coll_parse_unaryfilter($0,$coll)|0);
	 $pos = $call;
	 $1 = HEAP32[$coll>>2]|0;
	 $tobool = ($1|0)!=(0|0);
	 if ($tobool) {
	  $2 = HEAP32[$coll>>2]|0;
	  $3 = $ret$addr;
	  HEAP32[$3>>2] = $2;
	  $4 = $pos;
	  $retval = $4;
	  $23 = $retval;
	  STACKTOP = sp;return ($23|0);
	 }
	 $5 = $tokens$addr;
	 $call2 = (_coll_parse_binaryfilter($5,$coll)|0);
	 $pos = $call2;
	 $6 = HEAP32[$coll>>2]|0;
	 $tobool3 = ($6|0)!=(0|0);
	 if ($tobool3) {
	  $7 = HEAP32[$coll>>2]|0;
	  $8 = $ret$addr;
	  HEAP32[$8>>2] = $7;
	  $9 = $pos;
	  $retval = $9;
	  $23 = $retval;
	  STACKTOP = sp;return ($23|0);
	 }
	 $10 = $tokens$addr;
	 $11 = HEAP32[$10>>2]|0;
	 $cmp = ($11|0)==(6);
	 if ($cmp) {
	  $12 = $tokens$addr;
	  $string = (($12) + 4|0);
	  $13 = HEAP32[$string>>2]|0;
	  $call7 = (_strcmp($13,7840)|0);
	  $cmp8 = ($call7|0)==(0);
	  if ($cmp8) {
	   $call10 = (_xmmsv_new_coll(1)|0);
	   $14 = $ret$addr;
	   HEAP32[$14>>2] = $call10;
	   $15 = $tokens$addr;
	   $call11 = (_coll_next_token($15)|0);
	   $retval = $call11;
	   $23 = $retval;
	   STACKTOP = sp;return ($23|0);
	  }
	 }
	 $16 = $tokens$addr;
	 $call14 = (_coll_parse_autofilter($16,$coll)|0);
	 $pos = $call14;
	 $17 = HEAP32[$coll>>2]|0;
	 $tobool15 = ($17|0)!=(0|0);
	 if ($tobool15) {
	  $18 = HEAP32[$coll>>2]|0;
	  $19 = $ret$addr;
	  HEAP32[$19>>2] = $18;
	  $20 = $pos;
	  $retval = $20;
	  $23 = $retval;
	  STACKTOP = sp;return ($23|0);
	 }
	 $21 = $ret$addr;
	 HEAP32[$21>>2] = 0;
	 $22 = $tokens$addr;
	 $retval = $22;
	 $23 = $retval;
	 STACKTOP = sp;return ($23|0);
	}
	function _coll_parse_parenexpr($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0;
	 var $call11 = 0, $cmp = 0, $cmp5 = 0, $expr = 0, $ret$addr = 0, $retval = 0, $tk = 0, $tobool = 0, $tobool2 = 0, $tobool7 = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $expr = sp;
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $tk = $0;
	 $1 = $tk;
	 $tobool = ($1|0)!=(0|0);
	 if ($tobool) {
	  $2 = $tk;
	  $3 = HEAP32[$2>>2]|0;
	  $cmp = ($3|0)!=(1);
	  if (!($cmp)) {
	   $6 = $tk;
	   $call = (_coll_next_token($6)|0);
	   $call1 = (_coll_parse_operation($call,$expr)|0);
	   $tk = $call1;
	   $7 = $tk;
	   $tobool2 = ($7|0)!=(0|0);
	   if ($tobool2) {
	    $8 = $tk;
	    $9 = HEAP32[$8>>2]|0;
	    $cmp5 = ($9|0)!=(2);
	    if (!($cmp5)) {
	     $14 = HEAP32[$expr>>2]|0;
	     $15 = $ret$addr;
	     HEAP32[$15>>2] = $14;
	     $16 = $tk;
	     $call11 = (_coll_next_token($16)|0);
	     $retval = $call11;
	     $17 = $retval;
	     STACKTOP = sp;return ($17|0);
	    }
	   }
	   $10 = HEAP32[$expr>>2]|0;
	   $tobool7 = ($10|0)!=(0|0);
	   if ($tobool7) {
	    $11 = HEAP32[$expr>>2]|0;
	    _xmmsv_unref($11);
	   }
	   $12 = $ret$addr;
	   HEAP32[$12>>2] = 0;
	   $13 = $tokens$addr;
	   $retval = $13;
	   $17 = $retval;
	   STACKTOP = sp;return ($17|0);
	  }
	 }
	 $4 = $ret$addr;
	 HEAP32[$4>>2] = 0;
	 $5 = $tokens$addr;
	 $retval = $5;
	 $17 = $retval;
	 STACKTOP = sp;return ($17|0);
	}
	function _coll_parse_unaryop($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $coll = 0, $pos = 0, $ret$addr = 0, $retval = 0, $tobool = 0;
	 var $tobool3 = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll = sp + 4|0;
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $call = (_coll_parse_notop($0,$coll)|0);
	 $pos = $call;
	 $1 = HEAP32[$coll>>2]|0;
	 $tobool = ($1|0)!=(0|0);
	 if ($tobool) {
	  $2 = HEAP32[$coll>>2]|0;
	  $3 = $ret$addr;
	  HEAP32[$3>>2] = $2;
	  $4 = $pos;
	  $retval = $4;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $5 = $tokens$addr;
	 $call2 = (_coll_parse_reference($5,$coll)|0);
	 $pos = $call2;
	 $6 = HEAP32[$coll>>2]|0;
	 $tobool3 = ($6|0)!=(0|0);
	 if ($tobool3) {
	  $7 = HEAP32[$coll>>2]|0;
	  $8 = $ret$addr;
	  HEAP32[$8>>2] = $7;
	  $9 = $pos;
	  $retval = $9;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $10 = $ret$addr;
	 HEAP32[$10>>2] = 0;
	 $11 = $tokens$addr;
	 $retval = $11;
	 $12 = $retval;
	 STACKTOP = sp;return ($12|0);
	}
	function _coll_parse_notop($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call5 = 0;
	 var $cmp = 0, $coll = 0, $operand = 0, $ret$addr = 0, $retval = 0, $tk = 0, $tobool = 0, $tobool2 = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $operand = sp + 4|0;
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $tk = $0;
	 $1 = $tk;
	 $tobool = ($1|0)!=(0|0);
	 if ($tobool) {
	  $2 = $tk;
	  $3 = HEAP32[$2>>2]|0;
	  $cmp = ($3|0)!=(13);
	  if (!($cmp)) {
	   $6 = $tk;
	   $call = (_coll_next_token($6)|0);
	   $call1 = (_coll_parse_expr($call,$operand)|0);
	   $tk = $call1;
	   $7 = HEAP32[$operand>>2]|0;
	   $tobool2 = ($7|0)!=(0|0);
	   if ($tobool2) {
	    $call5 = (_xmmsv_new_coll(4)|0);
	    $coll = $call5;
	    $10 = $coll;
	    $11 = HEAP32[$operand>>2]|0;
	    _xmmsv_coll_add_operand($10,$11);
	    $12 = HEAP32[$operand>>2]|0;
	    _xmmsv_unref($12);
	    $13 = $coll;
	    $14 = $ret$addr;
	    HEAP32[$14>>2] = $13;
	    $15 = $tk;
	    $retval = $15;
	    $16 = $retval;
	    STACKTOP = sp;return ($16|0);
	   } else {
	    $8 = $ret$addr;
	    HEAP32[$8>>2] = 0;
	    $9 = $tokens$addr;
	    $retval = $9;
	    $16 = $retval;
	    STACKTOP = sp;return ($16|0);
	   }
	  }
	 }
	 $4 = $ret$addr;
	 HEAP32[$4>>2] = 0;
	 $5 = $tokens$addr;
	 $retval = $5;
	 $16 = $retval;
	 STACKTOP = sp;return ($16|0);
	}
	function _coll_parse_reference($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $call = 0, $call15 = 0, $call16 = 0, $call23 = 0, $call24 = 0;
	 var $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp12 = 0, $cmp18 = 0, $cmp5 = 0, $coll = 0, $namespace = 0, $reference = 0, $ret$addr = 0, $retval = 0, $slash = 0, $string = 0, $string11 = 0, $string14 = 0, $string20 = 0, $tk = 0, $tobool = 0, $tobool2 = 0, $tokens$addr = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $tk = $0;
	 $1 = $tk;
	 $tobool = ($1|0)!=(0|0);
	 if ($tobool) {
	  $2 = $tk;
	  $3 = HEAP32[$2>>2]|0;
	  $cmp = ($3|0)!=(3);
	  if (!($cmp)) {
	   $6 = $tk;
	   $call = (_coll_next_token($6)|0);
	   $tk = $call;
	   $7 = $tk;
	   $tobool2 = ($7|0)!=(0|0);
	   if ($tobool2) {
	    $8 = $tk;
	    $9 = HEAP32[$8>>2]|0;
	    $cmp5 = ($9|0)!=(5);
	    if (!($cmp5)) {
	     $12 = $tk;
	     $string = (($12) + 4|0);
	     $13 = HEAP32[$string>>2]|0;
	     $call9 = (_strchr($13,47)|0);
	     $slash = $call9;
	     $14 = $slash;
	     $cmp10 = ($14|0)!=(0|0);
	     if ($cmp10) {
	      $15 = $slash;
	      $16 = $tk;
	      $string11 = (($16) + 4|0);
	      $17 = HEAP32[$string11>>2]|0;
	      $cmp12 = ($15>>>0)>($17>>>0);
	      if ($cmp12) {
	       $18 = $tk;
	       $string14 = (($18) + 4|0);
	       $19 = HEAP32[$string14>>2]|0;
	       $20 = $slash;
	       $call15 = (_string_substr($19,$20)|0);
	       $namespace = $call15;
	      } else {
	       label = 14;
	      }
	     } else {
	      label = 14;
	     }
	     if ((label|0) == 14) {
	      $call16 = (FUNCTION_TABLE_ii[3 & 15](7792)|0);
	      $namespace = $call16;
	     }
	     $21 = $slash;
	     $cmp18 = ($21|0)==(0|0);
	     if ($cmp18) {
	      $22 = $tk;
	      $string20 = (($22) + 4|0);
	      $23 = HEAP32[$string20>>2]|0;
	      $reference = $23;
	     } else {
	      $24 = $slash;
	      $add$ptr = (($24) + 1|0);
	      $reference = $add$ptr;
	     }
	     $call23 = (_xmmsv_new_coll(0)|0);
	     $coll = $call23;
	     $25 = $coll;
	     $26 = $namespace;
	     _xmmsv_coll_attribute_set_string($25,7808,$26);
	     $27 = $coll;
	     $28 = $reference;
	     _xmmsv_coll_attribute_set_string($27,7824,$28);
	     $29 = $namespace;
	     _free($29);
	     $30 = $coll;
	     $31 = $ret$addr;
	     HEAP32[$31>>2] = $30;
	     $32 = $tk;
	     $call24 = (_coll_next_token($32)|0);
	     $retval = $call24;
	     $33 = $retval;
	     STACKTOP = sp;return ($33|0);
	    }
	   }
	   $10 = $ret$addr;
	   HEAP32[$10>>2] = 0;
	   $11 = $tokens$addr;
	   $retval = $11;
	   $33 = $retval;
	   STACKTOP = sp;return ($33|0);
	  }
	 }
	 $4 = $ret$addr;
	 HEAP32[$4>>2] = 0;
	 $5 = $tokens$addr;
	 $retval = $5;
	 $33 = $retval;
	 STACKTOP = sp;return ($33|0);
	}
	function _string_substr($start,$end) {
	 $start = $start|0;
	 $end = $end|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $arrayidx = 0, $buf = 0, $call = 0, $end$addr = 0, $len = 0, $mul = 0, $start$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $start$addr = $start;
	 $end$addr = $end;
	 $0 = $end$addr;
	 $1 = $start$addr;
	 $sub$ptr$lhs$cast = $0;
	 $sub$ptr$rhs$cast = $1;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $len = $sub$ptr$sub;
	 $2 = $len;
	 $add = (($2) + 1)|0;
	 $mul = $add;
	 $call = (_calloc(1,$mul)|0);
	 $buf = $call;
	 $3 = $buf;
	 $4 = $start$addr;
	 $5 = $len;
	 (_strncpy(($3|0),($4|0),($5|0))|0);
	 $6 = $len;
	 $7 = $buf;
	 $arrayidx = (($7) + ($6)|0);
	 HEAP8[$arrayidx>>0] = 0;
	 $8 = $buf;
	 STACKTOP = sp;return ($8|0);
	}
	function _coll_parse_unaryfilter($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0;
	 var $call1 = 0, $call5 = 0, $call6 = 0, $cmp = 0, $coll = 0, $prop = 0, $ret$addr = 0, $retval = 0, $tk = 0, $tobool = 0, $tobool2 = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $0 = $tokens$addr;
	 $tk = $0;
	 $1 = $tk;
	 $tobool = ($1|0)!=(0|0);
	 if ($tobool) {
	  $2 = $tk;
	  $3 = HEAP32[$2>>2]|0;
	  $cmp = ($3|0)!=(14);
	  if (!($cmp)) {
	   $6 = $tk;
	   $call = (_coll_next_token($6)|0);
	   $tk = $call;
	   $7 = $tk;
	   $call1 = (_coll_parse_prop($7)|0);
	   $prop = $call1;
	   $8 = $prop;
	   $tobool2 = ($8|0)!=(0|0);
	   if ($tobool2) {
	    $call5 = (_xmmsv_new_coll(5)|0);
	    $coll = $call5;
	    $11 = $coll;
	    $12 = $prop;
	    _xmmsv_coll_attribute_set_string($11,7888,$12);
	    $13 = $coll;
	    _coll_append_universe($13);
	    $14 = $prop;
	    _free($14);
	    $15 = $coll;
	    $16 = $ret$addr;
	    HEAP32[$16>>2] = $15;
	    $17 = $tk;
	    $call6 = (_coll_next_token($17)|0);
	    $retval = $call6;
	    $18 = $retval;
	    STACKTOP = sp;return ($18|0);
	   } else {
	    $9 = $ret$addr;
	    HEAP32[$9>>2] = 0;
	    $10 = $tokens$addr;
	    $retval = $10;
	    $18 = $retval;
	    STACKTOP = sp;return ($18|0);
	   }
	  }
	 }
	 $4 = $ret$addr;
	 HEAP32[$4>>2] = 0;
	 $5 = $tokens$addr;
	 $retval = $5;
	 $18 = $retval;
	 STACKTOP = sp;return ($18|0);
	}
	function _coll_parse_binaryfilter($tokens,$ret) {
	 $tokens = $tokens|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call13 = 0, $call4 = 0, $call40 = 0, $call43 = 0, $call5 = 0, $cmp = 0, $cmp16 = 0, $cmp22 = 0, $cmp28 = 0, $cmp34 = 0, $coll = 0, $operand = 0, $operation = 0, $prop = 0;
	 var $ret$addr = 0, $retval = 0, $string = 0, $string18 = 0, $string24 = 0, $string30 = 0, $string36 = 0, $strval = 0, $tk = 0, $tobool = 0, $tobool1 = 0, $tobool38 = 0, $tobool6 = 0, $tobool7 = 0, $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $ret$addr = $ret;
	 $coll = 0;
	 $0 = $tokens$addr;
	 $tk = $0;
	 $1 = $tk;
	 $tobool = ($1|0)!=(0|0);
	 if (!($tobool)) {
	  $2 = $ret$addr;
	  HEAP32[$2>>2] = 0;
	  $3 = $tokens$addr;
	  $retval = $3;
	  $44 = $retval;
	  STACKTOP = sp;return ($44|0);
	 }
	 $4 = $tk;
	 $call = (_coll_parse_prop($4)|0);
	 $prop = $call;
	 $5 = $prop;
	 $tobool1 = ($5|0)!=(0|0);
	 if (!($tobool1)) {
	  $retval = 0;
	  $44 = $retval;
	  STACKTOP = sp;return ($44|0);
	 }
	 $6 = $tk;
	 $call4 = (_coll_next_token($6)|0);
	 $tk = $call4;
	 $7 = $tk;
	 $call5 = (_coll_next_token($7)|0);
	 $operand = $call5;
	 $8 = $tk;
	 $tobool6 = ($8|0)!=(0|0);
	 if ($tobool6) {
	  $9 = $operand;
	  $tobool7 = ($9|0)!=(0|0);
	  if ($tobool7) {
	   $strval = 0;
	   $10 = $tk;
	   $11 = HEAP32[$10>>2]|0;
	   switch ($11|0) {
	   case 17:  {
	    $operation = 10;
	    $17 = $operand;
	    $18 = HEAP32[$17>>2]|0;
	    $cmp16 = ($18|0)==(7);
	    if ($cmp16) {
	     $19 = $operand;
	     $string18 = (($19) + 4|0);
	     $20 = HEAP32[$string18>>2]|0;
	     $strval = $20;
	    }
	    break;
	   }
	   case 15:  {
	    $operation = 8;
	    $12 = $operand;
	    $13 = HEAP32[$12>>2]|0;
	    $cmp = ($13|0)==(5);
	    if ($cmp) {
	     $14 = $operand;
	     $string = (($14) + 4|0);
	     $15 = HEAP32[$string>>2]|0;
	     $strval = $15;
	    }
	    break;
	   }
	   case 16:  {
	    $operation = 6;
	    $16 = $operand;
	    $call13 = (_coll_parse_strval($16)|0);
	    $strval = $call13;
	    break;
	   }
	   case 18:  {
	    $operation = 12;
	    $21 = $operand;
	    $22 = HEAP32[$21>>2]|0;
	    $cmp22 = ($22|0)==(7);
	    if ($cmp22) {
	     $23 = $operand;
	     $string24 = (($23) + 4|0);
	     $24 = HEAP32[$string24>>2]|0;
	     $strval = $24;
	    }
	    break;
	   }
	   case 19:  {
	    $operation = 11;
	    $25 = $operand;
	    $26 = HEAP32[$25>>2]|0;
	    $cmp28 = ($26|0)==(7);
	    if ($cmp28) {
	     $27 = $operand;
	     $string30 = (($27) + 4|0);
	     $28 = HEAP32[$string30>>2]|0;
	     $strval = $28;
	    }
	    break;
	   }
	   case 20:  {
	    $operation = 13;
	    $29 = $operand;
	    $30 = HEAP32[$29>>2]|0;
	    $cmp34 = ($30|0)==(7);
	    if ($cmp34) {
	     $31 = $operand;
	     $string36 = (($31) + 4|0);
	     $32 = HEAP32[$string36>>2]|0;
	     $strval = $32;
	    }
	    break;
	   }
	   default: {
	   }
	   }
	   $33 = $strval;
	   $tobool38 = ($33|0)!=(0|0);
	   if ($tobool38) {
	    $34 = $operation;
	    $call40 = (_xmmsv_new_coll($34)|0);
	    $coll = $call40;
	    $35 = $coll;
	    $36 = $prop;
	    _xmmsv_coll_attribute_set_string($35,7888,$36);
	    $37 = $coll;
	    $38 = $strval;
	    _xmmsv_coll_attribute_set_string($37,7896,$38);
	    $39 = $coll;
	    _coll_append_universe($39);
	   }
	  }
	 }
	 $40 = $prop;
	 _free($40);
	 $41 = $coll;
	 $42 = $ret$addr;
	 HEAP32[$42>>2] = $41;
	 $43 = $operand;
	 $call43 = (_coll_next_token($43)|0);
	 $retval = $call43;
	 $44 = $retval;
	 STACKTOP = sp;return ($44|0);
	}
	function _coll_parse_autofilter($token,$ret) {
	 $token = $token|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx18 = 0, $call = 0, $call12 = 0, $call15 = 0, $call17 = 0, $call19 = 0, $call4 = 0, $cmp = 0, $cmp16 = 0, $cmp2 = 0;
	 var $cmp7 = 0, $coll = 0, $coll_autofilter = 0, $i = 0, $inc = 0, $operand = 0, $operation = 0, $ret$addr = 0, $retval = 0, $strval = 0, $tobool = 0, $token$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll_autofilter = sp + 24|0;
	 $token$addr = $token;
	 $ret$addr = $ret;
	 ;HEAP32[$coll_autofilter+0>>2]=HEAP32[7872+0>>2]|0;HEAP32[$coll_autofilter+4>>2]=HEAP32[7872+4>>2]|0;HEAP32[$coll_autofilter+8>>2]=HEAP32[7872+8>>2]|0;HEAP32[$coll_autofilter+12>>2]=HEAP32[7872+12>>2]|0;
	 $0 = $token$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $cmp = ($1|0)==(15);
	 if ($cmp) {
	  $operation = 8;
	  $2 = $token$addr;
	  $call = (_coll_next_token($2)|0);
	  $token$addr = $call;
	 } else {
	  $3 = $token$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $cmp2 = ($4|0)==(16);
	  if ($cmp2) {
	   $operation = 6;
	   $5 = $token$addr;
	   $call4 = (_coll_next_token($5)|0);
	   $token$addr = $call4;
	  } else {
	   $6 = $token$addr;
	   $7 = HEAP32[$6>>2]|0;
	   $cmp7 = ($7|0)==(6);
	   if ($cmp7) {
	    $operation = 6;
	   } else {
	    $operation = 7;
	   }
	  }
	 }
	 $8 = $token$addr;
	 $call12 = (_coll_parse_strval($8)|0);
	 $strval = $call12;
	 $9 = $strval;
	 $tobool = ($9|0)!=(0|0);
	 if (!($tobool)) {
	  $10 = $ret$addr;
	  HEAP32[$10>>2] = 0;
	  $11 = $token$addr;
	  $retval = $11;
	  $28 = $retval;
	  STACKTOP = sp;return ($28|0);
	 }
	 $call15 = (_xmmsv_new_coll(2)|0);
	 $coll = $call15;
	 $i = 0;
	 while(1) {
	  $12 = $i;
	  $arrayidx = (($coll_autofilter) + ($12<<2)|0);
	  $13 = HEAP32[$arrayidx>>2]|0;
	  $cmp16 = ($13|0)!=(0|0);
	  if (!($cmp16)) {
	   break;
	  }
	  $14 = $operation;
	  $call17 = (_xmmsv_new_coll($14)|0);
	  $operand = $call17;
	  $15 = $operand;
	  $16 = $i;
	  $arrayidx18 = (($coll_autofilter) + ($16<<2)|0);
	  $17 = HEAP32[$arrayidx18>>2]|0;
	  _xmmsv_coll_attribute_set_string($15,7888,$17);
	  $18 = $operand;
	  $19 = $strval;
	  _xmmsv_coll_attribute_set_string($18,7896,$19);
	  $20 = $coll;
	  $21 = $operand;
	  _xmmsv_coll_add_operand($20,$21);
	  $22 = $operand;
	  _coll_append_universe($22);
	  $23 = $operand;
	  _xmmsv_unref($23);
	  $24 = $i;
	  $inc = (($24) + 1)|0;
	  $i = $inc;
	 }
	 $25 = $coll;
	 $26 = $ret$addr;
	 HEAP32[$26>>2] = $25;
	 $27 = $token$addr;
	 $call19 = (_coll_next_token($27)|0);
	 $retval = $call19;
	 $28 = $retval;
	 STACKTOP = sp;return ($28|0);
	}
	function _coll_parse_strval($token) {
	 $token = $token|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp = 0, $cmp2 = 0, $retval = 0, $string = 0, $tobool = 0, $token$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $token$addr = $token;
	 $0 = $token$addr;
	 $tobool = ($0|0)!=(0|0);
	 do {
	  if ($tobool) {
	   $1 = $token$addr;
	   $2 = HEAP32[$1>>2]|0;
	   $cmp = ($2|0)!=(5);
	   if ($cmp) {
	    $3 = $token$addr;
	    $4 = HEAP32[$3>>2]|0;
	    $cmp2 = ($4|0)!=(6);
	    if ($cmp2) {
	     break;
	    }
	   }
	   $5 = $token$addr;
	   $string = (($5) + 4|0);
	   $6 = HEAP32[$string>>2]|0;
	   $retval = $6;
	   $7 = $retval;
	   STACKTOP = sp;return ($7|0);
	  }
	 } while(0);
	 $retval = 0;
	 $7 = $retval;
	 STACKTOP = sp;return ($7|0);
	}
	function _coll_append_universe($coll) {
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $coll$addr = 0, $univ = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $coll$addr = $coll;
	 $call = (_xmmsv_new_coll(1)|0);
	 $univ = $call;
	 $0 = $coll$addr;
	 $1 = $univ;
	 _xmmsv_coll_add_operand($0,$1);
	 $2 = $univ;
	 _xmmsv_unref($2);
	 STACKTOP = sp;return;
	}
	function _coll_parse_prop($token) {
	 $token = $token|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx7 = 0, $call = 0, $call11 = 0;
	 var $cmp = 0, $cmp4 = 0, $conv = 0, $conv3 = 0, $i = 0, $inc = 0, $longstr = 0, $retval = 0, $string = 0, $string10 = 0, $string2 = 0, $tobool = 0, $tobool1 = 0, $token$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $token$addr = $token;
	 $0 = $token$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $token$addr;
	  $string = (($1) + 4|0);
	  $2 = HEAP32[$string>>2]|0;
	  $tobool1 = ($2|0)!=(0|0);
	  if ($tobool1) {
	   $3 = $token$addr;
	   $4 = HEAP32[$3>>2]|0;
	   if ((($4|0) == 10)) {
	    label = 5;
	   } else if (!((($4|0) == 9))) {
	    $retval = 0;
	    $15 = $retval;
	    STACKTOP = sp;return ($15|0);
	   }
	   do {
	    if ((label|0) == 5) {
	     $i = 0;
	     while(1) {
	      $5 = $i;
	      $cmp = ($5>>>0)<(7);
	      if (!($cmp)) {
	       label = 11;
	       break;
	      }
	      $6 = $token$addr;
	      $string2 = (($6) + 4|0);
	      $7 = HEAP32[$string2>>2]|0;
	      $8 = HEAP8[$7>>0]|0;
	      $conv = $8 << 24 >> 24;
	      $9 = $i;
	      $arrayidx = (7904 + (($9*9)|0)|0);
	      $10 = HEAP8[$arrayidx>>0]|0;
	      $conv3 = $10 << 24 >> 24;
	      $cmp4 = ($conv|0)==($conv3|0);
	      if ($cmp4) {
	       break;
	      }
	      $12 = $i;
	      $inc = (($12) + 1)|0;
	      $i = $inc;
	     }
	     if ((label|0) == 11) {
	      break;
	     }
	     $11 = $i;
	     $arrayidx7 = (7904 + (($11*9)|0)|0);
	     $longstr = (($arrayidx7) + 1|0);
	     $call = (FUNCTION_TABLE_ii[3 & 15]($longstr)|0);
	     $retval = $call;
	     $15 = $retval;
	     STACKTOP = sp;return ($15|0);
	    }
	   } while(0);
	   $13 = $token$addr;
	   $string10 = (($13) + 4|0);
	   $14 = HEAP32[$string10>>2]|0;
	   $call11 = (FUNCTION_TABLE_ii[3 & 15]($14)|0);
	   $retval = $call11;
	   $15 = $retval;
	   STACKTOP = sp;return ($15|0);
	  }
	 }
	 $retval = 0;
	 $15 = $retval;
	 STACKTOP = sp;return ($15|0);
	}
	function _coll_parse_sequence($tokens,$field,$ret) {
	 $tokens = $tokens|0;
	 $field = $field|0;
	 $ret = $ret|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
	 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr39 = 0;
	 var $add$ptr65 = 0, $add$ptr71 = 0, $buf = 0, $call = 0, $call10 = 0, $call11 = 0, $call13 = 0, $call26 = 0, $call27 = 0, $call28 = 0, $call34 = 0, $call40 = 0, $call41 = 0, $call42 = 0, $call50 = 0, $call51 = 0, $call6 = 0, $call66 = 0, $call70 = 0, $call76 = 0;
	 var $cmp = 0, $cmp1 = 0, $cmp14 = 0, $cmp17 = 0, $cmp23 = 0, $cmp36 = 0, $cmp4 = 0, $cmp61 = 0, $cmp67 = 0, $cmp7 = 0, $coll = 0, $coll_from = 0, $coll_to = 0, $conv = 0, $conv60 = 0, $end = 0, $field$addr = 0, $id = 0, $len_from = 0, $len_to = 0;
	 var $num = 0, $parent = 0, $ret$addr = 0, $retval = 0, $seq = 0, $start = 0, $string = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast20 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast21 = 0, $sub$ptr$sub = 0, $sub$ptr$sub22 = 0, $tobool = 0, $tobool29 = 0, $tobool43 = 0, $tobool52 = 0, $tobool57 = 0, $tobool73 = 0;
	 var $tokens$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tokens$addr = $tokens;
	 $field$addr = $field;
	 $ret$addr = $ret;
	 $0 = $field$addr;
	 $call = (_strcmp($0,7968)|0);
	 $cmp = ($call|0)==(0);
	 $conv = $cmp&1;
	 $id = $conv;
	 $1 = $tokens$addr;
	 $tobool = ($1|0)!=(0|0);
	 do {
	  if ($tobool) {
	   $2 = $tokens$addr;
	   $3 = HEAP32[$2>>2]|0;
	   $cmp1 = ($3|0)!=(7);
	   if ($cmp1) {
	    $4 = $tokens$addr;
	    $5 = HEAP32[$4>>2]|0;
	    $cmp4 = ($5|0)!=(8);
	    if ($cmp4) {
	     break;
	    }
	   }
	   $8 = $tokens$addr;
	   $string = (($8) + 4|0);
	   $9 = HEAP32[$string>>2]|0;
	   $start = $9;
	   $10 = $start;
	   $call6 = (_strchr($10,44)|0);
	   $end = $call6;
	   $11 = $end;
	   $cmp7 = ($11|0)!=(0|0);
	   if ($cmp7) {
	    $call10 = (_xmmsv_new_coll(2)|0);
	    $parent = $call10;
	   } else {
	    $parent = 0;
	    $12 = $start;
	    $13 = $start;
	    $call11 = (_strlen(($13|0))|0);
	    $add$ptr = (($12) + ($call11)|0);
	    $end = $add$ptr;
	   }
	   while(1) {
	    $14 = $start;
	    $call13 = (_strchr($14,45)|0);
	    $seq = $call13;
	    $15 = $seq;
	    $cmp14 = ($15|0)!=(0|0);
	    if ($cmp14) {
	     $16 = $seq;
	     $17 = $end;
	     $cmp17 = ($16>>>0)<($17>>>0);
	     if ($cmp17) {
	      $18 = $seq;
	      $19 = $start;
	      $sub$ptr$lhs$cast = $18;
	      $sub$ptr$rhs$cast = $19;
	      $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	      $len_from = $sub$ptr$sub;
	      $20 = $end;
	      $21 = $seq;
	      $sub$ptr$lhs$cast20 = $20;
	      $sub$ptr$rhs$cast21 = $21;
	      $sub$ptr$sub22 = (($sub$ptr$lhs$cast20) - ($sub$ptr$rhs$cast21))|0;
	      $sub = (($sub$ptr$sub22) - 1)|0;
	      $len_to = $sub;
	      $22 = $len_from;
	      $cmp23 = ($22|0)>(0);
	      if ($cmp23) {
	       $23 = $start;
	       $24 = $seq;
	       $call26 = (_string_substr($23,$24)|0);
	       $buf = $call26;
	       $25 = $buf;
	       $call27 = (_string_intadd($25,-1)|0);
	       $num = $call27;
	       $call28 = (_xmmsv_new_coll(12)|0);
	       $coll_from = $call28;
	       $26 = $id;
	       $tobool29 = ($26|0)!=(0);
	       if ($tobool29) {
	        $27 = $coll_from;
	        _xmmsv_coll_attribute_set_string($27,7976,7968);
	       } else {
	        $28 = $coll_from;
	        $29 = $field$addr;
	        _xmmsv_coll_attribute_set_string($28,7888,$29);
	       }
	       $30 = $coll_from;
	       $31 = $num;
	       _xmmsv_coll_attribute_set_string($30,7896,$31);
	       $32 = $coll_from;
	       _coll_append_universe($32);
	       $33 = $buf;
	       _free($33);
	       $34 = $num;
	       _free($34);
	      } else {
	       $call34 = (_xmmsv_new_coll(1)|0);
	       $coll_from = $call34;
	      }
	      $35 = $len_to;
	      $cmp36 = ($35|0)>(0);
	      if ($cmp36) {
	       $36 = $seq;
	       $add$ptr39 = (($36) + 1|0);
	       $37 = $end;
	       $call40 = (_string_substr($add$ptr39,$37)|0);
	       $buf = $call40;
	       $38 = $buf;
	       $call41 = (_string_intadd($38,1)|0);
	       $num = $call41;
	       $call42 = (_xmmsv_new_coll(10)|0);
	       $coll_to = $call42;
	       $39 = $id;
	       $tobool43 = ($39|0)!=(0);
	       if ($tobool43) {
	        $40 = $coll_to;
	        _xmmsv_coll_attribute_set_string($40,7976,7968);
	       } else {
	        $41 = $coll_to;
	        $42 = $field$addr;
	        _xmmsv_coll_attribute_set_string($41,7888,$42);
	       }
	       $43 = $coll_to;
	       $44 = $num;
	       _xmmsv_coll_attribute_set_string($43,7896,$44);
	       $45 = $coll_to;
	       $46 = $coll_from;
	       _xmmsv_coll_add_operand($45,$46);
	       $47 = $coll_from;
	       _xmmsv_unref($47);
	       $48 = $buf;
	       _free($48);
	       $49 = $num;
	       _free($49);
	      } else {
	       $50 = $coll_from;
	       $coll_to = $50;
	      }
	      $51 = $coll_to;
	      $coll = $51;
	     } else {
	      label = 24;
	     }
	    } else {
	     label = 24;
	    }
	    if ((label|0) == 24) {
	     label = 0;
	     $52 = $start;
	     $53 = $end;
	     $call50 = (_string_substr($52,$53)|0);
	     $num = $call50;
	     $call51 = (_xmmsv_new_coll(8)|0);
	     $coll = $call51;
	     $54 = $id;
	     $tobool52 = ($54|0)!=(0);
	     if ($tobool52) {
	      $55 = $coll;
	      _xmmsv_coll_attribute_set_string($55,7976,7968);
	     } else {
	      $56 = $coll;
	      $57 = $field$addr;
	      _xmmsv_coll_attribute_set_string($56,7888,$57);
	     }
	     $58 = $coll;
	     $59 = $num;
	     _xmmsv_coll_attribute_set_string($58,7896,$59);
	     $60 = $coll;
	     _coll_append_universe($60);
	     $61 = $num;
	     _free($61);
	    }
	    $62 = $parent;
	    $tobool57 = ($62|0)!=(0|0);
	    if ($tobool57) {
	     $63 = $parent;
	     $64 = $coll;
	     _xmmsv_coll_add_operand($63,$64);
	    }
	    $65 = $end;
	    $66 = HEAP8[$65>>0]|0;
	    $conv60 = $66 << 24 >> 24;
	    $cmp61 = ($conv60|0)==(0);
	    if ($cmp61) {
	     break;
	    }
	    $67 = $end;
	    $add$ptr65 = (($67) + 1|0);
	    $start = $add$ptr65;
	    $68 = $start;
	    $call66 = (_strchr($68,44)|0);
	    $end = $call66;
	    $69 = $end;
	    $cmp67 = ($69|0)==(0|0);
	    if ($cmp67) {
	     $70 = $start;
	     $71 = $start;
	     $call70 = (_strlen(($71|0))|0);
	     $add$ptr71 = (($70) + ($call70)|0);
	     $end = $add$ptr71;
	    }
	   }
	   $72 = $parent;
	   $tobool73 = ($72|0)!=(0|0);
	   if ($tobool73) {
	    $73 = $parent;
	    $coll = $73;
	   }
	   $74 = $coll;
	   $75 = $ret$addr;
	   HEAP32[$75>>2] = $74;
	   $76 = $tokens$addr;
	   $call76 = (_coll_next_token($76)|0);
	   $retval = $call76;
	   $77 = $retval;
	   STACKTOP = sp;return ($77|0);
	  }
	 } while(0);
	 $6 = $ret$addr;
	 HEAP32[$6>>2] = 0;
	 $7 = $tokens$addr;
	 $retval = $7;
	 $77 = $retval;
	 STACKTOP = sp;return ($77|0);
	}
	function _string_intadd($number,$delta) {
	 $number = $number|0;
	 $delta = $delta|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add3 = 0, $add4 = 0, $buf = 0, $call = 0, $call2 = 0, $call5 = 0, $cmp = 0;
	 var $conv = 0, $delta$addr = 0, $endptr = 0, $len = 0, $mul = 0, $n = 0, $number$addr = 0, $retval = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $endptr = sp + 12|0;
	 $number$addr = $number;
	 $delta$addr = $delta;
	 $0 = $number$addr;
	 $call = (_strtol($0,$endptr,10)|0);
	 $n = $call;
	 $1 = HEAP32[$endptr>>2]|0;
	 $2 = HEAP8[$1>>0]|0;
	 $conv = $2 << 24 >> 24;
	 $cmp = ($conv|0)!=(0);
	 if ($cmp) {
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 } else {
	  $3 = $delta$addr;
	  $4 = $n;
	  $add = (($4) + ($3))|0;
	  $n = $add;
	  $5 = $number$addr;
	  $call2 = (_strlen(($5|0))|0);
	  $add3 = (($call2) + 1)|0;
	  $len = $add3;
	  $6 = $len;
	  $add4 = (($6) + 1)|0;
	  $mul = $add4;
	  $call5 = (_calloc(1,$mul)|0);
	  $buf = $call5;
	  $7 = $buf;
	  $8 = $len;
	  $9 = $n;
	  HEAP32[$vararg_buffer>>2] = $9;
	  (_snprintf($7,$8,7984,$vararg_buffer)|0);
	  $10 = $buf;
	  $retval = $10;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 return 0|0;
	}
	function _xmmsc_bindata_add($c,$data,$len) {
	 $c = $c|0;
	 $data = $data|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $bin = 0, $c$addr = 0, $call = 0, $call4 = 0, $call5 = 0, $data$addr = 0, $ipc = 0, $len$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0;
	 var $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $data$addr = $data;
	 $len$addr = $len;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8032;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8056;
	  _xmmsc_log(0,2,8008,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 8032;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 8080;
	  _xmmsc_log(0,2,8008,$vararg_buffer2);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $data$addr;
	 $4 = $len$addr;
	 $call = (_xmmsv_new_bin($3,$4)|0);
	 $bin = $call;
	 $5 = $c$addr;
	 $6 = $bin;
	 $call4 = (___xmmsv_identity_xmmsv350($6)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call5 = (_xmmsc_send_cmd($5,10,33,$vararg_buffer6)|0);
	 $retval = $call5;
	 $7 = $retval;
	 STACKTOP = sp;return ($7|0);
	}
	function ___xmmsv_identity_xmmsv350($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function _xmmsc_bindata_retrieve($c,$hash) {
	 $c = $c|0;
	 $hash = $hash|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c$addr = 0, $call = 0, $call4 = 0, $call5 = 0, $call6 = 0, $hash$addr = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $hash$addr = $hash;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8120;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8056;
	  _xmmsc_log(0,2,8008,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 8120;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 8080;
	  _xmmsc_log(0,2,8008,$vararg_buffer2);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $3 = $c$addr;
	 $4 = $hash$addr;
	 $call = (_xmmsv_new_string($4)|0);
	 $call4 = (___xmmsv_null_to_none351($call)|0);
	 $call5 = (___xmmsv_identity_xmmsv350($call4)|0);
	 HEAP32[$vararg_buffer6>>2] = $call5;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call6 = (_xmmsc_send_cmd($3,10,32,$vararg_buffer6)|0);
	 $retval = $call6;
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function ___xmmsv_null_to_none351($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $v$addr;
	  $cond = $1;
	 } else {
	  $call = (_xmmsv_new_none()|0);
	  $cond = $call;
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _xmmsc_bindata_remove($c,$hash) {
	 $c = $c|0;
	 $hash = $hash|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c$addr = 0, $call = 0, $call4 = 0, $call5 = 0, $call6 = 0, $hash$addr = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $hash$addr = $hash;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8144;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8056;
	  _xmmsc_log(0,2,8008,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 8144;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 8080;
	  _xmmsc_log(0,2,8008,$vararg_buffer2);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $3 = $c$addr;
	 $4 = $hash$addr;
	 $call = (_xmmsv_new_string($4)|0);
	 $call4 = (___xmmsv_null_to_none351($call)|0);
	 $call5 = (___xmmsv_identity_xmmsv350($call4)|0);
	 HEAP32[$vararg_buffer6>>2] = $call5;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call6 = (_xmmsc_send_cmd($3,10,34,$vararg_buffer6)|0);
	 $retval = $call6;
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsc_bindata_list($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8168;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8056;
	  _xmmsc_log(0,2,8008,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 8168;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 8080;
	  _xmmsc_log(0,2,8008,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 HEAP32[$vararg_buffer6>>2] = 0;
	 $call = (_xmmsc_send_cmd($3,10,35,$vararg_buffer6)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_config_register_value($c,$key,$value) {
	 $c = $c|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $ipc = 0, $key$addr = 0, $retval = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool4 = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 24|0;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8216;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8248;
	  _xmmsc_log(0,2,8192,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 8216;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 8272;
	  _xmmsc_log(0,2,8192,$vararg_buffer2);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $key$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if ($tobool4) {
	  $4 = $c$addr;
	  $5 = $key$addr;
	  $call = (_xmmsv_new_string($5)|0);
	  $call7 = (___xmmsv_null_to_none357($call)|0);
	  $call8 = (___xmmsv_identity_xmmsv356($call7)|0);
	  $6 = $value$addr;
	  $call9 = (_xmmsv_new_string($6)|0);
	  $call10 = (___xmmsv_null_to_none357($call9)|0);
	  $call11 = (___xmmsv_identity_xmmsv356($call10)|0);
	  HEAP32[$vararg_buffer10>>2] = $call8;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = $call11;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 0;
	  $call12 = (_xmmsc_send_cmd($4,3,34,$vararg_buffer10)|0);
	  $retval = $call12;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 8216;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 8312;
	  _xmmsc_log(0,2,8192,$vararg_buffer6);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function ___xmmsv_identity_xmmsv356($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function ___xmmsv_null_to_none357($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $v$addr;
	  $cond = $1;
	 } else {
	  $call = (_xmmsv_new_none()|0);
	  $cond = $call;
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _xmmsc_config_set_value($c,$key,$val) {
	 $c = $c|0;
	 $key = $key|0;
	 $val = $val|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $ipc = 0, $key$addr = 0, $retval = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool4 = 0, $val$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 24|0;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $key$addr = $key;
	 $val$addr = $val;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8328;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8248;
	  _xmmsc_log(0,2,8192,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 8328;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 8272;
	  _xmmsc_log(0,2,8192,$vararg_buffer2);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $key$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if ($tobool4) {
	  $4 = $c$addr;
	  $5 = $key$addr;
	  $call = (_xmmsv_new_string($5)|0);
	  $call7 = (___xmmsv_null_to_none357($call)|0);
	  $call8 = (___xmmsv_identity_xmmsv356($call7)|0);
	  $6 = $val$addr;
	  $call9 = (_xmmsv_new_string($6)|0);
	  $call10 = (___xmmsv_null_to_none357($call9)|0);
	  $call11 = (___xmmsv_identity_xmmsv356($call10)|0);
	  HEAP32[$vararg_buffer10>>2] = $call8;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = $call11;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 0;
	  $call12 = (_xmmsc_send_cmd($4,3,33,$vararg_buffer10)|0);
	  $retval = $call12;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 8328;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 8312;
	  _xmmsc_log(0,2,8192,$vararg_buffer6);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _xmmsc_config_get_value($c,$key) {
	 $c = $c|0;
	 $key = $key|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $c$addr = 0, $call = 0, $call7 = 0, $call8 = 0, $call9 = 0, $ipc = 0, $key$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
	 var $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $key$addr = $key;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8352;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8248;
	  _xmmsc_log(0,2,8192,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 8352;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 8272;
	  _xmmsc_log(0,2,8192,$vararg_buffer2);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $3 = $key$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if ($tobool4) {
	  $4 = $c$addr;
	  $5 = $key$addr;
	  $call = (_xmmsv_new_string($5)|0);
	  $call7 = (___xmmsv_null_to_none357($call)|0);
	  $call8 = (___xmmsv_identity_xmmsv356($call7)|0);
	  HEAP32[$vararg_buffer10>>2] = $call8;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 0;
	  $call9 = (_xmmsc_send_cmd($4,3,32,$vararg_buffer10)|0);
	  $retval = $call9;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 8352;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 8312;
	  _xmmsc_log(0,2,8192,$vararg_buffer6);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 return 0|0;
	}
	function _xmmsc_config_list_values($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8376;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8248;
	  _xmmsc_log(0,2,8192,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 8376;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 8272;
	  _xmmsc_log(0,2,8192,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,3,35)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_broadcast_config_value_changed($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8408;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8248;
	  _xmmsc_log(0,2,8192,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 8408;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 8272;
	  _xmmsc_log(0,2,8192,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,1)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_ipc_io_in_callback($ipc) {
	 $ipc = $ipc|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $call = 0, $call10 = 0, $disco = 0, $disconnect = 0, $ipc$addr = 0, $lnot = 0, $lnot$ext = 0, $lnot19 = 0, $msg = 0, $read_msg = 0, $read_msg12 = 0, $read_msg13 = 0, $read_msg7 = 0, $read_msg9 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool15 = 0, $tobool18 = 0, $tobool4 = 0;
	 var $tobool5 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $disco = sp + 44|0;
	 $ipc$addr = $ipc;
	 HEAP8[$disco>>0] = 0;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8496;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 66;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 $1 = $ipc$addr;
	 $disconnect = (($1) + 20|0);
	 $2 = HEAP8[$disconnect>>0]|0;
	 $tobool1 = $2&1;
	 if ($tobool1) {
	  HEAP32[$vararg_buffer4>>2] = 8568;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 8496;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 8528;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 67;
	  _xmmsc_log(0,2,8448,$vararg_buffer4);
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 while(1) {
	  $3 = HEAP8[$disco>>0]|0;
	  $tobool4 = $3&1;
	  $lnot = $tobool4 ^ 1;
	  if (!($lnot)) {
	   break;
	  }
	  $4 = $ipc$addr;
	  $read_msg = (($4) + 4|0);
	  $5 = HEAP32[$read_msg>>2]|0;
	  $tobool5 = ($5|0)!=(0|0);
	  if (!($tobool5)) {
	   $call = (_xmms_ipc_msg_alloc()|0);
	   $6 = $ipc$addr;
	   $read_msg7 = (($6) + 4|0);
	   HEAP32[$read_msg7>>2] = $call;
	  }
	  $7 = $ipc$addr;
	  $read_msg9 = (($7) + 4|0);
	  $8 = HEAP32[$read_msg9>>2]|0;
	  $9 = $ipc$addr;
	  $10 = HEAP32[$9>>2]|0;
	  $call10 = (_xmms_ipc_msg_read_transport($8,$10,$disco)|0);
	  if (!($call10)) {
	   label = 11;
	   break;
	  }
	  $11 = $ipc$addr;
	  $read_msg12 = (($11) + 4|0);
	  $12 = HEAP32[$read_msg12>>2]|0;
	  $msg = $12;
	  $13 = $ipc$addr;
	  $read_msg13 = (($13) + 4|0);
	  HEAP32[$read_msg13>>2] = 0;
	  $14 = $ipc$addr;
	  $15 = $msg;
	  _xmmsc_ipc_exec_msg($14,$15);
	 }
	 if ((label|0) == 11) {
	 }
	 $16 = HEAP8[$disco>>0]|0;
	 $tobool15 = $16&1;
	 if ($tobool15) {
	  $17 = $ipc$addr;
	  _xmmsc_ipc_disconnect($17);
	 }
	 $18 = HEAP8[$disco>>0]|0;
	 $tobool18 = $18&1;
	 $lnot19 = $tobool18 ^ 1;
	 $lnot$ext = $lnot19&1;
	 $retval = $lnot$ext;
	 $19 = $retval;
	 STACKTOP = sp;return ($19|0);
	}
	function _xmmsc_ipc_exec_msg($ipc,$msg) {
	 $ipc = $ipc|0;
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $ipc$addr = 0, $msg$addr = 0, $res = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipc$addr = $ipc;
	 $msg$addr = $msg;
	 $0 = $ipc$addr;
	 $1 = $msg$addr;
	 $call = (_xmms_ipc_msg_get_cookie($1)|0);
	 $call1 = (_xmmsc_ipc_result_lookup($0,$call)|0);
	 $res = $call1;
	 $2 = $res;
	 $tobool = ($2|0)!=(0|0);
	 if ($tobool) {
	  $4 = $res;
	  $5 = $msg$addr;
	  _xmmsc_result_run($4,$5);
	  STACKTOP = sp;return;
	 } else {
	  $3 = $msg$addr;
	  _xmms_ipc_msg_destroy($3);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_ipc_disconnect($ipc) {
	 $ipc = $ipc|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $disconnect = 0, $disconnect_callback = 0, $disconnect_callback5 = 0, $disconnect_data = 0, $ipc$addr = 0, $read_msg = 0;
	 var $read_msg1 = 0, $read_msg2 = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipc$addr = $ipc;
	 $0 = $ipc$addr;
	 $disconnect = (($0) + 20|0);
	 HEAP8[$disconnect>>0] = 1;
	 $1 = $ipc$addr;
	 $read_msg = (($1) + 4|0);
	 $2 = HEAP32[$read_msg>>2]|0;
	 $tobool = ($2|0)!=(0|0);
	 if ($tobool) {
	  $3 = $ipc$addr;
	  $read_msg1 = (($3) + 4|0);
	  $4 = HEAP32[$read_msg1>>2]|0;
	  _xmms_ipc_msg_destroy($4);
	  $5 = $ipc$addr;
	  $read_msg2 = (($5) + 4|0);
	  HEAP32[$read_msg2>>2] = 0;
	 }
	 $6 = $ipc$addr;
	 $call = (FUNCTION_TABLE_ii[3 & 15](8696)|0);
	 _xmmsc_ipc_error_set($6,$call);
	 $7 = $ipc$addr;
	 $disconnect_callback = (($7) + 36|0);
	 $8 = HEAP32[$disconnect_callback>>2]|0;
	 $tobool3 = ($8|0)!=(0|0);
	 if (!($tobool3)) {
	  STACKTOP = sp;return;
	 }
	 $9 = $ipc$addr;
	 $disconnect_callback5 = (($9) + 36|0);
	 $10 = HEAP32[$disconnect_callback5>>2]|0;
	 $11 = $ipc$addr;
	 $disconnect_data = (($11) + 40|0);
	 $12 = HEAP32[$disconnect_data>>2]|0;
	 FUNCTION_TABLE_vi[$10 & 15]($12);
	 STACKTOP = sp;return;
	}
	function _xmmsc_ipc_io_out($ipc) {
	 $ipc = $ipc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $disconnect = 0, $ipc$addr = 0, $land$ext = 0, $lnot = 0, $out_msg = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8592;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 97;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $ipc$addr;
	 $out_msg = (($1) + 12|0);
	 $2 = HEAP32[$out_msg>>2]|0;
	 $call = (_x_queue_is_empty($2)|0);
	 if ($call) {
	  $5 = 0;
	 } else {
	  $3 = $ipc$addr;
	  $disconnect = (($3) + 20|0);
	  $4 = HEAP8[$disconnect>>0]|0;
	  $tobool1 = $4&1;
	  $lnot = $tobool1 ^ 1;
	  $5 = $lnot;
	 }
	 $land$ext = $5&1;
	 $retval = $land$ext;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function _xmmsc_ipc_io_out_callback($ipc) {
	 $ipc = $ipc|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
	 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call17 = 0, $call5 = 0, $call6 = 0, $disco = 0, $disconnect = 0, $ipc$addr = 0, $lnot = 0, $lnot$ext = 0, $lnot21 = 0, $msg = 0, $need_out_callback = 0, $need_out_callback16 = 0, $need_out_data = 0, $out_msg = 0, $out_msg4 = 0;
	 var $out_msg8 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool14 = 0, $tobool20 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $disco = sp + 44|0;
	 $ipc$addr = $ipc;
	 HEAP8[$disco>>0] = 0;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8616;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 107;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  $retval = 0;
	  $23 = $retval;
	  STACKTOP = sp;return ($23|0);
	 }
	 $1 = $ipc$addr;
	 $disconnect = (($1) + 20|0);
	 $2 = HEAP8[$disconnect>>0]|0;
	 $tobool1 = $2&1;
	 if ($tobool1) {
	  HEAP32[$vararg_buffer4>>2] = 8568;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 8616;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 8528;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 108;
	  _xmmsc_log(0,2,8448,$vararg_buffer4);
	  $retval = 0;
	  $23 = $retval;
	  STACKTOP = sp;return ($23|0);
	 }
	 while(1) {
	  $3 = $ipc$addr;
	  $out_msg = (($3) + 12|0);
	  $4 = HEAP32[$out_msg>>2]|0;
	  $call = (_x_queue_is_empty($4)|0);
	  $lnot = $call ^ 1;
	  if (!($lnot)) {
	   break;
	  }
	  $5 = $ipc$addr;
	  $out_msg4 = (($5) + 12|0);
	  $6 = HEAP32[$out_msg4>>2]|0;
	  $call5 = (_x_queue_peek_head($6)|0);
	  $msg = $call5;
	  $7 = $msg;
	  $8 = $ipc$addr;
	  $9 = HEAP32[$8>>2]|0;
	  $call6 = (_xmms_ipc_msg_write_transport($7,$9,$disco)|0);
	  if (!($call6)) {
	   label = 9;
	   break;
	  }
	  $10 = $ipc$addr;
	  $out_msg8 = (($10) + 12|0);
	  $11 = HEAP32[$out_msg8>>2]|0;
	  (_x_queue_pop_head($11)|0);
	  $12 = $msg;
	  _xmms_ipc_msg_destroy($12);
	 }
	 if ((label|0) == 9) {
	 }
	 $13 = HEAP8[$disco>>0]|0;
	 $tobool11 = $13&1;
	 if ($tobool11) {
	  $14 = $ipc$addr;
	  _xmmsc_ipc_disconnect($14);
	 } else {
	  $15 = $ipc$addr;
	  $need_out_callback = (($15) + 48|0);
	  $16 = HEAP32[$need_out_callback>>2]|0;
	  $tobool14 = ($16|0)!=(0|0);
	  if ($tobool14) {
	   $17 = $ipc$addr;
	   $need_out_callback16 = (($17) + 48|0);
	   $18 = HEAP32[$need_out_callback16>>2]|0;
	   $19 = $ipc$addr;
	   $call17 = (_xmmsc_ipc_io_out($19)|0);
	   $20 = $ipc$addr;
	   $need_out_data = (($20) + 52|0);
	   $21 = HEAP32[$need_out_data>>2]|0;
	   FUNCTION_TABLE_vii[$18 & 0]($call17,$21);
	  }
	 }
	 $22 = HEAP8[$disco>>0]|0;
	 $tobool20 = $22&1;
	 $lnot21 = $tobool20 ^ 1;
	 $lnot$ext = $lnot21&1;
	 $retval = $lnot$ext;
	 $23 = $retval;
	 STACKTOP = sp;return ($23|0);
	}
	function _xmmsc_ipc_fd_get($ipc) {
	 $ipc = $ipc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $ipc$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $ipc$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $call = (_xmms_ipc_transport_fd_get($2)|0);
	  $retval = $call;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8648;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 134;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  $retval = -1;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsc_ipc_error_get($ipc) {
	 $ipc = $ipc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $error = 0, $ipc$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $ipc$addr;
	  $error = (($1) + 16|0);
	  $2 = HEAP32[$error>>2]|0;
	  $retval = $2;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8672;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 142;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsc_ipc_error_set($ipc,$error) {
	 $ipc = $ipc|0;
	 $error = $error|0;
	 var $0 = 0, $1 = 0, $2 = 0, $error$addr = 0, $error1 = 0, $ipc$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $error$addr = $error;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $error$addr;
	  $2 = $ipc$addr;
	  $error1 = (($2) + 16|0);
	  HEAP32[$error1>>2] = $1;
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8896;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 266;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_ipc_disconnected($ipc) {
	 $ipc = $ipc|0;
	 var $$expand_i1_val = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $disconnect = 0, $ipc$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool1$expand_i1_val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $ipc$addr;
	  $disconnect = (($1) + 20|0);
	  $2 = HEAP8[$disconnect>>0]|0;
	  $tobool1 = $2&1;
	  $tobool1$expand_i1_val = $tobool1&1;
	  $retval = $tobool1$expand_i1_val;
	  $$pre_trunc = $retval;
	  $3 = $$pre_trunc&1;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8712;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 163;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  $$expand_i1_val = 1;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $3 = $$pre_trunc&1;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsc_ipc_init() {
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call1 = 0, $disconnect = 0, $ipc = 0, $out_msg = 0, $results_list = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (_calloc(1,60)|0);
	 $ipc = $call;
	 $0 = $ipc;
	 $disconnect = (($0) + 20|0);
	 HEAP8[$disconnect>>0] = 0;
	 $1 = $ipc;
	 $results_list = (($1) + 8|0);
	 HEAP32[$results_list>>2] = 0;
	 $call1 = (_x_queue_new()|0);
	 $2 = $ipc;
	 $out_msg = (($2) + 12|0);
	 HEAP32[$out_msg>>2] = $call1;
	 $3 = $ipc;
	 STACKTOP = sp;return ($3|0);
	}
	function _xmmsc_ipc_disconnect_set($ipc,$disconnect_callback,$userdata,$free_func) {
	 $ipc = $ipc|0;
	 $disconnect_callback = $disconnect_callback|0;
	 $userdata = $userdata|0;
	 $free_func = $free_func|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $disconnect_callback$addr = 0, $disconnect_callback1 = 0, $disconnect_data = 0, $disconnect_data_free_func = 0, $free_func$addr = 0, $ipc$addr = 0, $tobool = 0, $userdata$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $disconnect_callback$addr = $disconnect_callback;
	 $userdata$addr = $userdata;
	 $free_func$addr = $free_func;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $disconnect_callback$addr;
	  $2 = $ipc$addr;
	  $disconnect_callback1 = (($2) + 36|0);
	  HEAP32[$disconnect_callback1>>2] = $1;
	  $3 = $userdata$addr;
	  $4 = $ipc$addr;
	  $disconnect_data = (($4) + 40|0);
	  HEAP32[$disconnect_data>>2] = $3;
	  $5 = $free_func$addr;
	  $6 = $ipc$addr;
	  $disconnect_data_free_func = (($6) + 44|0);
	  HEAP32[$disconnect_data_free_func>>2] = $5;
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8736;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 182;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_ipc_need_out_callback_set($ipc,$callback,$userdata,$free_func) {
	 $ipc = $ipc|0;
	 $callback = $callback|0;
	 $userdata = $userdata|0;
	 $free_func = $free_func|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $callback$addr = 0, $free_func$addr = 0, $ipc$addr = 0, $need_out_callback = 0, $need_out_data = 0, $need_out_data_free_func = 0, $tobool = 0, $userdata$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $callback$addr = $callback;
	 $userdata$addr = $userdata;
	 $free_func$addr = $free_func;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $callback$addr;
	  $2 = $ipc$addr;
	  $need_out_callback = (($2) + 48|0);
	  HEAP32[$need_out_callback>>2] = $1;
	  $3 = $userdata$addr;
	  $4 = $ipc$addr;
	  $need_out_data = (($4) + 52|0);
	  HEAP32[$need_out_data>>2] = $3;
	  $5 = $free_func$addr;
	  $6 = $ipc$addr;
	  $need_out_data_free_func = (($6) + 56|0);
	  HEAP32[$need_out_data_free_func>>2] = $5;
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8768;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 191;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_ipc_lock_set($ipc,$lock,$lockfunc,$unlockfunc) {
	 $ipc = $ipc|0;
	 $lock = $lock|0;
	 $lockfunc = $lockfunc|0;
	 $unlockfunc = $unlockfunc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ipc$addr = 0, $lock$addr = 0, $lockdata = 0, $lockfunc$addr = 0, $lockfunc1 = 0, $unlockfunc$addr = 0, $unlockfunc2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipc$addr = $ipc;
	 $lock$addr = $lock;
	 $lockfunc$addr = $lockfunc;
	 $unlockfunc$addr = $unlockfunc;
	 $0 = $lock$addr;
	 $1 = $ipc$addr;
	 $lockdata = (($1) + 24|0);
	 HEAP32[$lockdata>>2] = $0;
	 $2 = $lockfunc$addr;
	 $3 = $ipc$addr;
	 $lockfunc1 = (($3) + 28|0);
	 HEAP32[$lockfunc1>>2] = $2;
	 $4 = $unlockfunc$addr;
	 $5 = $ipc$addr;
	 $unlockfunc2 = (($5) + 32|0);
	 HEAP32[$unlockfunc2>>2] = $4;
	 STACKTOP = sp;return;
	}
	function _xmmsc_ipc_result_register($ipc,$res) {
	 $ipc = $ipc|0;
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $ipc$addr = 0, $res$addr = 0, $results_list = 0, $results_list4 = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
	 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $res$addr = $res;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8800;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 208;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $res$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $ipc$addr;
	  _xmmsc_ipc_lock($2);
	  $3 = $ipc$addr;
	  $results_list = (($3) + 8|0);
	  $4 = HEAP32[$results_list>>2]|0;
	  $5 = $res$addr;
	  $call = (_x_list_prepend($4,$5)|0);
	  $6 = $ipc$addr;
	  $results_list4 = (($6) + 8|0);
	  HEAP32[$results_list4>>2] = $call;
	  $7 = $ipc$addr;
	  _xmmsc_ipc_unlock($7);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 8832;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 8800;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 8528;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 209;
	  _xmmsc_log(0,2,8448,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_ipc_lock($ipc) {
	 $ipc = $ipc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ipc$addr = 0, $lockdata = 0, $lockdata1 = 0, $lockfunc = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipc$addr = $ipc;
	 $0 = $ipc$addr;
	 $lockdata = (($0) + 24|0);
	 $1 = HEAP32[$lockdata>>2]|0;
	 $tobool = ($1|0)!=(0|0);
	 if (!($tobool)) {
	  STACKTOP = sp;return;
	 }
	 $2 = $ipc$addr;
	 $lockfunc = (($2) + 28|0);
	 $3 = HEAP32[$lockfunc>>2]|0;
	 $4 = $ipc$addr;
	 $lockdata1 = (($4) + 24|0);
	 $5 = HEAP32[$lockdata1>>2]|0;
	 FUNCTION_TABLE_vi[$3 & 15]($5);
	 STACKTOP = sp;return;
	}
	function _xmmsc_ipc_unlock($ipc) {
	 $ipc = $ipc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ipc$addr = 0, $lockdata = 0, $lockdata1 = 0, $tobool = 0, $unlockfunc = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipc$addr = $ipc;
	 $0 = $ipc$addr;
	 $lockdata = (($0) + 24|0);
	 $1 = HEAP32[$lockdata>>2]|0;
	 $tobool = ($1|0)!=(0|0);
	 if (!($tobool)) {
	  STACKTOP = sp;return;
	 }
	 $2 = $ipc$addr;
	 $unlockfunc = (($2) + 32|0);
	 $3 = HEAP32[$unlockfunc>>2]|0;
	 $4 = $ipc$addr;
	 $lockdata1 = (($4) + 24|0);
	 $5 = HEAP32[$lockdata1>>2]|0;
	 FUNCTION_TABLE_vi[$3 & 15]($5);
	 STACKTOP = sp;return;
	}
	function _xmmsc_ipc_result_lookup($ipc,$cookie) {
	 $ipc = $ipc|0;
	 $cookie = $cookie|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cond = 0, $cookie$addr = 0;
	 var $ipc$addr = 0, $n = 0, $next = 0, $res = 0, $results_list = 0, $retval = 0, $tmp = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $cookie$addr = $cookie;
	 $res = 0;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8840;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 222;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $ipc$addr;
	 _xmmsc_ipc_lock($1);
	 $2 = $ipc$addr;
	 $results_list = (($2) + 8|0);
	 $3 = HEAP32[$results_list>>2]|0;
	 $n = $3;
	 while(1) {
	  $4 = $n;
	  $tobool1 = ($4|0)!=(0|0);
	  if (!($tobool1)) {
	   break;
	  }
	  $5 = $n;
	  $6 = HEAP32[$5>>2]|0;
	  $tmp = $6;
	  $7 = $cookie$addr;
	  $8 = $tmp;
	  $call = (_xmmsc_result_cookie_get($8)|0);
	  $cmp = ($7|0)==($call|0);
	  if ($cmp) {
	   label = 6;
	   break;
	  }
	  $10 = $n;
	  $tobool4 = ($10|0)!=(0|0);
	  if ($tobool4) {
	   $11 = $n;
	   $next = (($11) + 4|0);
	   $12 = HEAP32[$next>>2]|0;
	   $cond = $12;
	  } else {
	   $cond = 0;
	  }
	  $n = $cond;
	 }
	 if ((label|0) == 6) {
	  $9 = $tmp;
	  $res = $9;
	 }
	 $13 = $ipc$addr;
	 _xmmsc_ipc_unlock($13);
	 $14 = $res;
	 $retval = $14;
	 $15 = $retval;
	 STACKTOP = sp;return ($15|0);
	}
	function _xmmsc_ipc_result_unregister($ipc,$res) {
	 $ipc = $ipc|0;
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0;
	 var $call5 = 0, $call8 = 0, $cmp = 0, $cond = 0, $ipc$addr = 0, $n = 0, $next = 0, $res$addr = 0, $results_list = 0, $results_list7 = 0, $results_list9 = 0, $tmp = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
	 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $res$addr = $res;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8864;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 245;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $res$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 8832;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 8864;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 8528;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 246;
	  _xmmsc_log(0,2,8448,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $2 = $ipc$addr;
	 _xmmsc_ipc_lock($2);
	 $3 = $ipc$addr;
	 $results_list = (($3) + 8|0);
	 $4 = HEAP32[$results_list>>2]|0;
	 $n = $4;
	 while(1) {
	  $5 = $n;
	  $tobool4 = ($5|0)!=(0|0);
	  if (!($tobool4)) {
	   break;
	  }
	  $6 = $n;
	  $7 = HEAP32[$6>>2]|0;
	  $tmp = $7;
	  $8 = $res$addr;
	  $call = (_xmmsc_result_cookie_get($8)|0);
	  $9 = $tmp;
	  $call5 = (_xmmsc_result_cookie_get($9)|0);
	  $cmp = ($call|0)==($call5|0);
	  if ($cmp) {
	   label = 8;
	   break;
	  }
	  $15 = $n;
	  $tobool11 = ($15|0)!=(0|0);
	  if ($tobool11) {
	   $16 = $n;
	   $next = (($16) + 4|0);
	   $17 = HEAP32[$next>>2]|0;
	   $cond = $17;
	  } else {
	   $cond = 0;
	  }
	  $n = $cond;
	 }
	 if ((label|0) == 8) {
	  $10 = $ipc$addr;
	  $results_list7 = (($10) + 8|0);
	  $11 = HEAP32[$results_list7>>2]|0;
	  $12 = $n;
	  $call8 = (_x_list_delete_link($11,$12)|0);
	  $13 = $ipc$addr;
	  $results_list9 = (($13) + 8|0);
	  HEAP32[$results_list9>>2] = $call8;
	  $14 = $res$addr;
	  _xmmsc_result_clear_weakrefs($14);
	 }
	 $18 = $ipc$addr;
	 _xmmsc_ipc_unlock($18);
	 STACKTOP = sp;return;
	}
	function _xmmsc_ipc_wait_for_event($ipc,$timeout) {
	 $ipc = $ipc|0;
	 $timeout = $timeout|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__b = 0, $__b8 = 0, $__i = 0, $__i7 = 0, $add = 0, $and = 0, $and49 = 0, $arrayidx = 0, $arrayidx26 = 0, $arrayidx34 = 0, $arrayidx46 = 0, $call = 0;
	 var $call19 = 0, $call29 = 0, $call39 = 0, $cmp = 0, $dec = 0, $dec16 = 0, $disconnect = 0, $div = 0, $div24 = 0, $div32 = 0, $div44 = 0, $fd = 0, $incdec$ptr = 0, $incdec$ptr14 = 0, $ipc$addr = 0, $or = 0, $or27 = 0, $rem = 0, $rem22 = 0, $rem35 = 0;
	 var $rem47 = 0, $rfdset = 0, $shl = 0, $shl23 = 0, $shl36 = 0, $shl48 = 0, $timeout$addr = 0, $tmout = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool20 = 0, $tobool37 = 0, $tobool4 = 0, $tobool40 = 0, $tobool50 = 0, $tv_usec = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $wfdset = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $rfdset = sp + 176|0;
	 $wfdset = sp + 40|0;
	 $tmout = sp + 168|0;
	 $ipc$addr = $ipc;
	 $timeout$addr = $timeout;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8920;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 278;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $ipc$addr;
	 $disconnect = (($1) + 20|0);
	 $2 = HEAP8[$disconnect>>0]|0;
	 $tobool1 = $2&1;
	 if ($tobool1) {
	  HEAP32[$vararg_buffer4>>2] = 8568;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 8920;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 8528;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 279;
	  _xmmsc_log(0,2,8448,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $3 = $timeout$addr;
	 HEAP32[$tmout>>2] = $3;
	 $tv_usec = (($tmout) + 4|0);
	 HEAP32[$tv_usec>>2] = 0;
	 $4 = $ipc$addr;
	 $5 = HEAP32[$4>>2]|0;
	 $call = (_xmms_ipc_transport_fd_get($5)|0);
	 $fd = $call;
	 $__b = $rfdset;
	 $__i = 32;
	 while(1) {
	  $6 = $__i;
	  $tobool4 = ($6|0)!=(0);
	  if (!($tobool4)) {
	   break;
	  }
	  $7 = $__b;
	  $incdec$ptr = (($7) + 4|0);
	  $__b = $incdec$ptr;
	  HEAP32[$7>>2] = 0;
	  $8 = $__i;
	  $dec = (($8) + -1)|0;
	  $__i = $dec;
	 }
	 $9 = $fd;
	 $rem = (($9>>>0) % 32)&-1;
	 $shl = 1 << $rem;
	 $10 = $fd;
	 $div = (($10>>>0) / 32)&-1;
	 $arrayidx = (($rfdset) + ($div<<2)|0);
	 $11 = HEAP32[$arrayidx>>2]|0;
	 $or = $11 | $shl;
	 HEAP32[$arrayidx>>2] = $or;
	 $__b8 = $wfdset;
	 $__i7 = 32;
	 while(1) {
	  $12 = $__i7;
	  $tobool12 = ($12|0)!=(0);
	  if (!($tobool12)) {
	   break;
	  }
	  $13 = $__b8;
	  $incdec$ptr14 = (($13) + 4|0);
	  $__b8 = $incdec$ptr14;
	  HEAP32[$13>>2] = 0;
	  $14 = $__i7;
	  $dec16 = (($14) + -1)|0;
	  $__i7 = $dec16;
	 }
	 $15 = $ipc$addr;
	 $call19 = (_xmmsc_ipc_io_out($15)|0);
	 $tobool20 = ($call19|0)!=(0);
	 if ($tobool20) {
	  $16 = $fd;
	  $rem22 = (($16>>>0) % 32)&-1;
	  $shl23 = 1 << $rem22;
	  $17 = $fd;
	  $div24 = (($17>>>0) / 32)&-1;
	  $arrayidx26 = (($wfdset) + ($div24<<2)|0);
	  $18 = HEAP32[$arrayidx26>>2]|0;
	  $or27 = $18 | $shl23;
	  HEAP32[$arrayidx26>>2] = $or27;
	 }
	 $19 = $fd;
	 $add = (($19) + 1)|0;
	 $call29 = (_select(($add|0),($rfdset|0),($wfdset|0),(0|0),($tmout|0))|0);
	 $cmp = ($call29|0)==(-1);
	 if ($cmp) {
	  STACKTOP = sp;return;
	 }
	 $20 = $fd;
	 $div32 = (($20>>>0) / 32)&-1;
	 $arrayidx34 = (($rfdset) + ($div32<<2)|0);
	 $21 = HEAP32[$arrayidx34>>2]|0;
	 $22 = $fd;
	 $rem35 = (($22>>>0) % 32)&-1;
	 $shl36 = 1 << $rem35;
	 $and = $21 & $shl36;
	 $tobool37 = ($and|0)!=(0);
	 do {
	  if ($tobool37) {
	   $23 = $ipc$addr;
	   $call39 = (_xmmsc_ipc_io_in_callback($23)|0);
	   $tobool40 = ($call39|0)!=(0);
	   if ($tobool40) {
	    break;
	   }
	   STACKTOP = sp;return;
	  }
	 } while(0);
	 $24 = $fd;
	 $div44 = (($24>>>0) / 32)&-1;
	 $arrayidx46 = (($wfdset) + ($div44<<2)|0);
	 $25 = HEAP32[$arrayidx46>>2]|0;
	 $26 = $fd;
	 $rem47 = (($26>>>0) % 32)&-1;
	 $shl48 = 1 << $rem47;
	 $and49 = $25 & $shl48;
	 $tobool50 = ($and49|0)!=(0);
	 if (!($tobool50)) {
	  STACKTOP = sp;return;
	 }
	 $27 = $ipc$addr;
	 (_xmmsc_ipc_io_out_callback($27)|0);
	 STACKTOP = sp;return;
	}
	function _xmmsc_ipc_msg_write($ipc,$msg,$cookie) {
	 $ipc = $ipc|0;
	 $msg = $msg|0;
	 $cookie = $cookie|0;
	 var $$expand_i1_val = 0, $$expand_i1_val5 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cookie$addr = 0, $ipc$addr = 0, $msg$addr = 0, $need_out_callback = 0;
	 var $need_out_callback3 = 0, $need_out_data = 0, $out_msg = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $msg$addr = $msg;
	 $cookie$addr = $cookie;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8952;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 311;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $12 = $$pre_trunc&1;
	  STACKTOP = sp;return ($12|0);
	 }
	 $1 = $msg$addr;
	 $2 = $cookie$addr;
	 _xmms_ipc_msg_set_cookie($1,$2);
	 $3 = $ipc$addr;
	 $out_msg = (($3) + 12|0);
	 $4 = HEAP32[$out_msg>>2]|0;
	 $5 = $msg$addr;
	 _x_queue_push_tail($4,$5);
	 $6 = $ipc$addr;
	 $need_out_callback = (($6) + 48|0);
	 $7 = HEAP32[$need_out_callback>>2]|0;
	 $tobool1 = ($7|0)!=(0|0);
	 if ($tobool1) {
	  $8 = $ipc$addr;
	  $need_out_callback3 = (($8) + 48|0);
	  $9 = HEAP32[$need_out_callback3>>2]|0;
	  $10 = $ipc$addr;
	  $need_out_data = (($10) + 52|0);
	  $11 = HEAP32[$need_out_data>>2]|0;
	  FUNCTION_TABLE_vii[$9 & 0](1,$11);
	 }
	 $$expand_i1_val5 = 1;
	 $retval = $$expand_i1_val5;
	 $$pre_trunc = $retval;
	 $12 = $$pre_trunc&1;
	 STACKTOP = sp;return ($12|0);
	}
	function _xmmsc_ipc_destroy($ipc) {
	 $ipc = $ipc|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $disconnect_data = 0, $disconnect_data25 = 0, $disconnect_data_free_func = 0, $disconnect_data_free_func24 = 0, $error = 0, $error18 = 0, $f = 0, $f32 = 0, $ipc$addr = 0, $n = 0, $need_out_data = 0, $need_out_data34 = 0;
	 var $need_out_data_free_func = 0, $need_out_data_free_func33 = 0, $next = 0, $out_msg = 0, $out_msg10 = 0, $read_msg = 0, $read_msg14 = 0, $results_list = 0, $results_list3 = 0, $tmp = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool16 = 0, $tobool2 = 0, $tobool20 = 0, $tobool21 = 0, $tobool27 = 0, $tobool29 = 0, $tobool4 = 0;
	 var $tobool8 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ipc$addr = $ipc;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  STACKTOP = sp;return;
	 }
	 $1 = $ipc$addr;
	 $results_list = (($1) + 8|0);
	 $2 = HEAP32[$results_list>>2]|0;
	 $n = $2;
	 while(1) {
	  $3 = $n;
	  $tobool1 = ($3|0)!=(0|0);
	  if (!($tobool1)) {
	   break;
	  }
	  $4 = $n;
	  $5 = HEAP32[$4>>2]|0;
	  $tmp = $5;
	  $6 = $tmp;
	  _xmmsc_result_clear_weakrefs($6);
	  $7 = $n;
	  $tobool2 = ($7|0)!=(0|0);
	  if ($tobool2) {
	   $8 = $n;
	   $next = (($8) + 4|0);
	   $9 = HEAP32[$next>>2]|0;
	   $cond = $9;
	  } else {
	   $cond = 0;
	  }
	  $n = $cond;
	 }
	 $10 = $ipc$addr;
	 $results_list3 = (($10) + 8|0);
	 $11 = HEAP32[$results_list3>>2]|0;
	 _x_list_free($11);
	 $12 = $ipc$addr;
	 $13 = HEAP32[$12>>2]|0;
	 $tobool4 = ($13|0)!=(0|0);
	 if ($tobool4) {
	  $14 = $ipc$addr;
	  $15 = HEAP32[$14>>2]|0;
	  _xmms_ipc_transport_destroy($15);
	 }
	 $16 = $ipc$addr;
	 $out_msg = (($16) + 12|0);
	 $17 = HEAP32[$out_msg>>2]|0;
	 $tobool8 = ($17|0)!=(0|0);
	 if ($tobool8) {
	  $18 = $ipc$addr;
	  $out_msg10 = (($18) + 12|0);
	  $19 = HEAP32[$out_msg10>>2]|0;
	  _x_queue_free($19);
	 }
	 $20 = $ipc$addr;
	 $read_msg = (($20) + 4|0);
	 $21 = HEAP32[$read_msg>>2]|0;
	 $tobool12 = ($21|0)!=(0|0);
	 if ($tobool12) {
	  $22 = $ipc$addr;
	  $read_msg14 = (($22) + 4|0);
	  $23 = HEAP32[$read_msg14>>2]|0;
	  _xmms_ipc_msg_destroy($23);
	 }
	 $24 = $ipc$addr;
	 $error = (($24) + 16|0);
	 $25 = HEAP32[$error>>2]|0;
	 $tobool16 = ($25|0)!=(0|0);
	 if ($tobool16) {
	  $26 = $ipc$addr;
	  $error18 = (($26) + 16|0);
	  $27 = HEAP32[$error18>>2]|0;
	  _free($27);
	 }
	 $28 = $ipc$addr;
	 $disconnect_data = (($28) + 40|0);
	 $29 = HEAP32[$disconnect_data>>2]|0;
	 $tobool20 = ($29|0)!=(0|0);
	 if ($tobool20) {
	  $30 = $ipc$addr;
	  $disconnect_data_free_func = (($30) + 44|0);
	  $31 = HEAP32[$disconnect_data_free_func>>2]|0;
	  $tobool21 = ($31|0)!=(0|0);
	  if ($tobool21) {
	   $32 = $ipc$addr;
	   $disconnect_data_free_func24 = (($32) + 44|0);
	   $33 = HEAP32[$disconnect_data_free_func24>>2]|0;
	   $f = $33;
	   $34 = $f;
	   $35 = $ipc$addr;
	   $disconnect_data25 = (($35) + 40|0);
	   $36 = HEAP32[$disconnect_data25>>2]|0;
	   FUNCTION_TABLE_vi[$34 & 15]($36);
	  }
	 }
	 $37 = $ipc$addr;
	 $need_out_data = (($37) + 52|0);
	 $38 = HEAP32[$need_out_data>>2]|0;
	 $tobool27 = ($38|0)!=(0|0);
	 if ($tobool27) {
	  $39 = $ipc$addr;
	  $need_out_data_free_func = (($39) + 56|0);
	  $40 = HEAP32[$need_out_data_free_func>>2]|0;
	  $tobool29 = ($40|0)!=(0|0);
	  if ($tobool29) {
	   $41 = $ipc$addr;
	   $need_out_data_free_func33 = (($41) + 56|0);
	   $42 = HEAP32[$need_out_data_free_func33>>2]|0;
	   $f32 = $42;
	   $43 = $f32;
	   $44 = $ipc$addr;
	   $need_out_data34 = (($44) + 52|0);
	   $45 = HEAP32[$need_out_data34>>2]|0;
	   FUNCTION_TABLE_vi[$43 & 15]($45);
	  }
	 }
	 $46 = $ipc$addr;
	 _free($46);
	 STACKTOP = sp;return;
	}
	function _xmmsc_ipc_connect($ipc,$path) {
	 $ipc = $ipc|0;
	 $path = $path|0;
	 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val15 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call7 = 0, $error = 0, $ipc$addr = 0, $path$addr = 0, $retval = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool5 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $ipc$addr = $ipc;
	 $path$addr = $path;
	 $0 = $ipc$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 8488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 8976;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 8528;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 370;
	  _xmmsc_log(0,2,8448,$vararg_buffer);
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $7 = $$pre_trunc&1;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $path$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 9000;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 8976;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 8528;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 371;
	  _xmmsc_log(0,2,8448,$vararg_buffer4);
	  $$expand_i1_val11 = 0;
	  $retval = $$expand_i1_val11;
	  $$pre_trunc = $retval;
	  $7 = $$pre_trunc&1;
	  STACKTOP = sp;return ($7|0);
	 }
	 $2 = $path$addr;
	 $call = (_xmms_ipc_client_init($2)|0);
	 $3 = $ipc$addr;
	 HEAP32[$3>>2] = $call;
	 $4 = $ipc$addr;
	 $5 = HEAP32[$4>>2]|0;
	 $tobool5 = ($5|0)!=(0|0);
	 if ($tobool5) {
	  $$expand_i1_val15 = 1;
	  $retval = $$expand_i1_val15;
	  $$pre_trunc = $retval;
	  $7 = $$pre_trunc&1;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  $call7 = (FUNCTION_TABLE_ii[3 & 15](9008)|0);
	  $6 = $ipc$addr;
	  $error = (($6) + 16|0);
	  HEAP32[$error>>2] = $call7;
	  $$expand_i1_val13 = 0;
	  $retval = $$expand_i1_val13;
	  $$pre_trunc = $retval;
	  $7 = $$pre_trunc&1;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _xmmsc_medialib_get_id($conn,$url) {
	 $conn = $conn|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call7 = 0, $conn$addr = 0, $enc_url = 0, $ipc = 0, $res = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0;
	 var $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 8|0;
	 $conn$addr = $conn;
	 $url$addr = $url;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9056;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9056;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $url$addr;
	 $call = (_xmmsv_encode_url($3)|0);
	 $enc_url = $call;
	 $4 = $enc_url;
	 $tobool4 = ($4|0)!=(0|0);
	 if ($tobool4) {
	  $5 = $conn$addr;
	  $6 = $enc_url;
	  $call7 = (_xmmsc_medialib_get_id_encoded($5,$6)|0);
	  $res = $call7;
	  $7 = $enc_url;
	  _free($7);
	  $8 = $res;
	  $retval = $8;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsc_medialib_get_id_encoded($conn,$url) {
	 $conn = $conn|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $conn$addr = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $url$addr = $url;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9144;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9144;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $3 = $conn$addr;
	 $4 = $url$addr;
	 $call = (_do_methodcall($3,35,$4)|0);
	 $retval = $call;
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _do_methodcall($conn,$id,$arg) {
	 $conn = $conn|0;
	 $id = $id|0;
	 $arg = $arg|0;
	 var $0 = 0, $1 = 0, $2 = 0, $arg$addr = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $conn$addr = 0, $id$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $id$addr = $id;
	 $arg$addr = $arg;
	 $0 = $conn$addr;
	 $1 = $id$addr;
	 $2 = $arg$addr;
	 $call = (_xmmsv_new_string($2)|0);
	 $call1 = (___xmmsv_null_to_none373($call)|0);
	 $call2 = (___xmmsv_identity_xmmsv372($call1)|0);
	 HEAP32[$vararg_buffer>>2] = $call2;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAP32[$vararg_ptr1>>2] = 0;
	 $call3 = (_xmmsc_send_cmd($0,5,$1,$vararg_buffer)|0);
	 STACKTOP = sp;return ($call3|0);
	}
	function _xmmsc_medialib_move_entry($conn,$entry1,$url) {
	 $conn = $conn|0;
	 $entry1 = $entry1|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $conn$addr = 0, $entry$addr = 0, $ipc = 0, $retval = 0, $tobool = 0;
	 var $tobool2 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $conn$addr = $conn;
	 $entry$addr = $entry1;
	 $url$addr = $url;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9176;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool2 = ($2|0)!=(0|0);
	 if (!($tobool2)) {
	  HEAP32[$vararg_buffer2>>2] = 9176;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $conn$addr;
	 $4 = $entry$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call5 = (___xmmsv_identity_xmmsv372($7)|0);
	 $8 = $url$addr;
	 $call6 = (_xmmsv_new_string($8)|0);
	 $call7 = (___xmmsv_null_to_none373($call6)|0);
	 $call8 = (___xmmsv_identity_xmmsv372($call7)|0);
	 HEAP32[$vararg_buffer6>>2] = $call5;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call8;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = 0;
	 $call9 = (_xmmsc_send_cmd($3,5,40,$vararg_buffer6)|0);
	 $retval = $call9;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function ___xmmsv_identity_xmmsv372($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function ___xmmsv_null_to_none373($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $v$addr;
	  $cond = $1;
	 } else {
	  $call = (_xmmsv_new_none()|0);
	  $cond = $call;
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _xmmsc_medialib_remove_entry($conn,$entry1) {
	 $conn = $conn|0;
	 $entry1 = $entry1|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call5 = 0, $call6 = 0, $conn$addr = 0, $entry$addr = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $entry$addr = $entry1;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9208;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool2 = ($2|0)!=(0|0);
	 if (!($tobool2)) {
	  HEAP32[$vararg_buffer2>>2] = 9208;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $conn$addr;
	 $4 = $entry$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call5 = (___xmmsv_identity_xmmsv372($7)|0);
	 HEAP32[$vararg_buffer6>>2] = $call5;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call6 = (_xmmsc_send_cmd($3,5,36,$vararg_buffer6)|0);
	 $retval = $call6;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmmsc_medialib_add_entry($conn,$url) {
	 $conn = $conn|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $call = 0, $conn$addr = 0, $url$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $conn$addr = $conn;
	 $url$addr = $url;
	 $0 = $conn$addr;
	 $1 = $url$addr;
	 $call = (_xmmsc_medialib_add_entry_full($0,$1,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_medialib_add_entry_full($conn,$url,$args) {
	 $conn = $conn|0;
	 $url = $url|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args$addr = 0, $call = 0, $call7 = 0, $conn$addr = 0, $enc_url = 0, $ipc = 0, $res = 0, $retval = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool4 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $url$addr = $url;
	 $args$addr = $args;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9272;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9272;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $url$addr;
	 $4 = $args$addr;
	 $call = (_xmmsv_encode_url_full($3,$4)|0);
	 $enc_url = $call;
	 $5 = $enc_url;
	 $tobool4 = ($5|0)!=(0|0);
	 if ($tobool4) {
	  $6 = $conn$addr;
	  $7 = $enc_url;
	  $call7 = (_xmmsc_medialib_add_entry_encoded($6,$7)|0);
	  $res = $call7;
	  $8 = $enc_url;
	  _free($8);
	  $9 = $res;
	  $retval = $9;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 } else {
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 return 0|0;
	}
	function _xmmsc_medialib_add_entry_args($conn,$url,$numargs,$args) {
	 $conn = $conn|0;
	 $url = $url|0;
	 $numargs = $numargs|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args$addr = 0, $call = 0, $call7 = 0, $conn$addr = 0, $enc_url = 0, $ipc = 0, $numargs$addr = 0, $res = 0;
	 var $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 8|0;
	 $conn$addr = $conn;
	 $url$addr = $url;
	 $numargs$addr = $numargs;
	 $args$addr = $args;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9240;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9240;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $3 = $url$addr;
	 $4 = $numargs$addr;
	 $5 = $args$addr;
	 $call = (__xmmsc_medialib_encode_url_old($3,$4,$5)|0);
	 $enc_url = $call;
	 $6 = $enc_url;
	 $tobool4 = ($6|0)!=(0|0);
	 if ($tobool4) {
	  $7 = $conn$addr;
	  $8 = $enc_url;
	  $call7 = (_xmmsc_medialib_add_entry_encoded($7,$8)|0);
	  $res = $call7;
	  $9 = $enc_url;
	  _free($9);
	  $10 = $res;
	  $retval = $10;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 } else {
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 return 0|0;
	}
	function __xmmsc_medialib_encode_url_old($url,$narg,$args) {
	 $url = $url|0;
	 $narg = $narg|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
	 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add1 = 0, $add3 = 0, $add4 = 0, $add93 = 0, $and = 0, $and71 = 0, $args$addr = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx13 = 0, $arrayidx56 = 0, $arrayidx62 = 0;
	 var $arrayidx65 = 0, $arrayidx67 = 0, $arrayidx69 = 0, $arrayidx72 = 0, $arrayidx74 = 0, $arrayidx84 = 0, $arrayidx89 = 0, $arrayidx91 = 0, $arrayidx92 = 0, $arrayidx97 = 0, $call = 0, $call2 = 0, $call5 = 0, $call85 = 0, $chr = 0, $cmp = 0, $cmp14 = 0, $cmp17 = 0, $cmp20 = 0, $cmp24 = 0;
	 var $cmp28 = 0, $cmp32 = 0, $cmp36 = 0, $cmp40 = 0, $cmp44 = 0, $cmp48 = 0, $cmp52 = 0, $cmp58 = 0, $cmp81 = 0, $cmp86 = 0, $cond = 0, $conv = 0, $conv16 = 0, $conv19 = 0, $conv23 = 0, $conv27 = 0, $conv31 = 0, $conv35 = 0, $conv39 = 0, $conv43 = 0;
	 var $conv47 = 0, $conv51 = 0, $conv57 = 0, $conv66 = 0, $conv70 = 0, $conv88 = 0, $extra = 0, $i = 0, $inc = 0, $inc55 = 0, $inc61 = 0, $inc64 = 0, $inc68 = 0, $inc73 = 0, $inc78 = 0, $inc90 = 0, $inc95 = 0, $j = 0, $l = 0, $mul = 0;
	 var $narg$addr = 0, $res = 0, $retval = 0, $shr = 0, $tobool = 0, $tobool11 = 0, $tobool6 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $url$addr = $url;
	 $narg$addr = $narg;
	 $args$addr = $args;
	 $i = 0;
	 $j = 0;
	 $extra = 0;
	 $0 = $url$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10000;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $66 = $retval;
	  STACKTOP = sp;return ($66|0);
	 }
	 $i = 0;
	 while(1) {
	  $1 = $i;
	  $2 = $narg$addr;
	  $cmp = ($1|0)<($2|0);
	  if (!($cmp)) {
	   break;
	  }
	  $3 = $i;
	  $4 = $args$addr;
	  $arrayidx = (($4) + ($3<<2)|0);
	  $5 = HEAP32[$arrayidx>>2]|0;
	  $call = (_strlen(($5|0))|0);
	  $add = (($call) + 2)|0;
	  $6 = $extra;
	  $add1 = (($6) + ($add))|0;
	  $extra = $add1;
	  $7 = $i;
	  $inc = (($7) + 1)|0;
	  $i = $inc;
	 }
	 $8 = $url$addr;
	 $call2 = (_strlen(($8|0))|0);
	 $mul = ($call2*3)|0;
	 $add3 = (($mul) + 1)|0;
	 $9 = $extra;
	 $add4 = (($add3) + ($9))|0;
	 $call5 = (_malloc($add4)|0);
	 $res = $call5;
	 $10 = $res;
	 $tobool6 = ($10|0)!=(0|0);
	 if (!($tobool6)) {
	  $retval = 0;
	  $66 = $retval;
	  STACKTOP = sp;return ($66|0);
	 }
	 $i = 0;
	 while(1) {
	  $11 = $i;
	  $12 = $url$addr;
	  $arrayidx10 = (($12) + ($11)|0);
	  $13 = HEAP8[$arrayidx10>>0]|0;
	  $tobool11 = ($13<<24>>24)!=(0);
	  if (!($tobool11)) {
	   break;
	  }
	  $14 = $i;
	  $15 = $url$addr;
	  $arrayidx13 = (($15) + ($14)|0);
	  $16 = HEAP8[$arrayidx13>>0]|0;
	  $chr = $16;
	  $17 = $chr;
	  $conv = $17&255;
	  $cmp14 = ($conv|0)>=(97);
	  if ($cmp14) {
	   $18 = $chr;
	   $conv16 = $18&255;
	   $cmp17 = ($conv16|0)<=(122);
	   if ($cmp17) {
	    label = 22;
	   } else {
	    label = 13;
	   }
	  } else {
	   label = 13;
	  }
	  do {
	   if ((label|0) == 13) {
	    label = 0;
	    $19 = $chr;
	    $conv19 = $19&255;
	    $cmp20 = ($conv19|0)>=(65);
	    if ($cmp20) {
	     $20 = $chr;
	     $conv23 = $20&255;
	     $cmp24 = ($conv23|0)<=(90);
	     if ($cmp24) {
	      label = 22;
	      break;
	     }
	    }
	    $21 = $chr;
	    $conv27 = $21&255;
	    $cmp28 = ($conv27|0)>=(48);
	    if ($cmp28) {
	     $22 = $chr;
	     $conv31 = $22&255;
	     $cmp32 = ($conv31|0)<=(57);
	     if ($cmp32) {
	      label = 22;
	      break;
	     }
	    }
	    $23 = $chr;
	    $conv35 = $23&255;
	    $cmp36 = ($conv35|0)==(58);
	    if ($cmp36) {
	     label = 22;
	    } else {
	     $24 = $chr;
	     $conv39 = $24&255;
	     $cmp40 = ($conv39|0)==(47);
	     if ($cmp40) {
	      label = 22;
	     } else {
	      $25 = $chr;
	      $conv43 = $25&255;
	      $cmp44 = ($conv43|0)==(45);
	      if ($cmp44) {
	       label = 22;
	      } else {
	       $26 = $chr;
	       $conv47 = $26&255;
	       $cmp48 = ($conv47|0)==(46);
	       if ($cmp48) {
	        label = 22;
	       } else {
	        $27 = $chr;
	        $conv51 = $27&255;
	        $cmp52 = ($conv51|0)==(95);
	        if ($cmp52) {
	         label = 22;
	        } else {
	         $31 = $chr;
	         $conv57 = $31&255;
	         $cmp58 = ($conv57|0)==(32);
	         if ($cmp58) {
	          $32 = $j;
	          $inc61 = (($32) + 1)|0;
	          $j = $inc61;
	          $33 = $res;
	          $arrayidx62 = (($33) + ($32)|0);
	          HEAP8[$arrayidx62>>0] = 43;
	         } else {
	          $34 = $j;
	          $inc64 = (($34) + 1)|0;
	          $j = $inc64;
	          $35 = $res;
	          $arrayidx65 = (($35) + ($34)|0);
	          HEAP8[$arrayidx65>>0] = 37;
	          $36 = $chr;
	          $conv66 = $36&255;
	          $and = $conv66 & 240;
	          $shr = $and >> 4;
	          $arrayidx67 = (9952 + ($shr)|0);
	          $37 = HEAP8[$arrayidx67>>0]|0;
	          $38 = $j;
	          $inc68 = (($38) + 1)|0;
	          $j = $inc68;
	          $39 = $res;
	          $arrayidx69 = (($39) + ($38)|0);
	          HEAP8[$arrayidx69>>0] = $37;
	          $40 = $chr;
	          $conv70 = $40&255;
	          $and71 = $conv70 & 15;
	          $arrayidx72 = (9952 + ($and71)|0);
	          $41 = HEAP8[$arrayidx72>>0]|0;
	          $42 = $j;
	          $inc73 = (($42) + 1)|0;
	          $j = $inc73;
	          $43 = $res;
	          $arrayidx74 = (($43) + ($42)|0);
	          HEAP8[$arrayidx74>>0] = $41;
	         }
	        }
	       }
	      }
	     }
	    }
	   }
	  } while(0);
	  if ((label|0) == 22) {
	   label = 0;
	   $28 = $chr;
	   $29 = $j;
	   $inc55 = (($29) + 1)|0;
	   $j = $inc55;
	   $30 = $res;
	   $arrayidx56 = (($30) + ($29)|0);
	   HEAP8[$arrayidx56>>0] = $28;
	  }
	  $44 = $i;
	  $inc78 = (($44) + 1)|0;
	  $i = $inc78;
	 }
	 $i = 0;
	 while(1) {
	  $45 = $i;
	  $46 = $narg$addr;
	  $cmp81 = ($45|0)<($46|0);
	  if (!($cmp81)) {
	   break;
	  }
	  $47 = $i;
	  $48 = $args$addr;
	  $arrayidx84 = (($48) + ($47<<2)|0);
	  $49 = HEAP32[$arrayidx84>>2]|0;
	  $call85 = (_strlen(($49|0))|0);
	  $l = $call85;
	  $50 = $i;
	  $cmp86 = ($50|0)==(0);
	  $cond = $cmp86 ? 63 : 38;
	  $conv88 = $cond&255;
	  $51 = $j;
	  $52 = $res;
	  $arrayidx89 = (($52) + ($51)|0);
	  HEAP8[$arrayidx89>>0] = $conv88;
	  $53 = $j;
	  $inc90 = (($53) + 1)|0;
	  $j = $inc90;
	  $54 = $j;
	  $55 = $res;
	  $arrayidx91 = (($55) + ($54)|0);
	  $56 = $i;
	  $57 = $args$addr;
	  $arrayidx92 = (($57) + ($56<<2)|0);
	  $58 = HEAP32[$arrayidx92>>2]|0;
	  $59 = $l;
	  _memcpy(($arrayidx91|0),($58|0),($59|0))|0;
	  $60 = $l;
	  $61 = $j;
	  $add93 = (($61) + ($60))|0;
	  $j = $add93;
	  $62 = $i;
	  $inc95 = (($62) + 1)|0;
	  $i = $inc95;
	 }
	 $63 = $j;
	 $64 = $res;
	 $arrayidx97 = (($64) + ($63)|0);
	 HEAP8[$arrayidx97>>0] = 0;
	 $65 = $res;
	 $retval = $65;
	 $66 = $retval;
	 STACKTOP = sp;return ($66|0);
	}
	function _xmmsc_medialib_add_entry_encoded($conn,$url) {
	 $conn = $conn|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call9 = 0, $conn$addr = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $url$addr = $url;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9304;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9304;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $3 = $url$addr;
	 $call = (__xmmsc_medialib_verify_url($3)|0);
	 $tobool4 = ($call|0)!=(0);
	 if ($tobool4) {
	  $4 = $conn$addr;
	  $5 = $url$addr;
	  $call9 = (_do_methodcall($4,41,$5)|0);
	  $retval = $call9;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 HEAP32[$vararg_buffer6>>2] = 9304;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 9344;
	 _xmmsc_log(0,2,9032,$vararg_buffer6);
	 $retval = 0;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function __xmmsc_medialib_verify_url($url) {
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx12 = 0, $arrayidx17 = 0, $arrayidx22 = 0, $arrayidx27 = 0, $arrayidx3 = 0;
	 var $arrayidx32 = 0, $arrayidx37 = 0, $arrayidx42 = 0, $arrayidx47 = 0, $arrayidx52 = 0, $arrayidx57 = 0, $arrayidx62 = 0, $arrayidx67 = 0, $arrayidx7 = 0, $arrayidx72 = 0, $cmp = 0, $cmp14 = 0, $cmp19 = 0, $cmp24 = 0, $cmp29 = 0, $cmp34 = 0, $cmp39 = 0, $cmp44 = 0, $cmp49 = 0, $cmp5 = 0;
	 var $cmp54 = 0, $cmp59 = 0, $cmp64 = 0, $cmp69 = 0, $cmp74 = 0, $cmp9 = 0, $conv = 0, $conv13 = 0, $conv18 = 0, $conv23 = 0, $conv28 = 0, $conv33 = 0, $conv38 = 0, $conv4 = 0, $conv43 = 0, $conv48 = 0, $conv53 = 0, $conv58 = 0, $conv63 = 0, $conv68 = 0;
	 var $conv73 = 0, $conv8 = 0, $i = 0, $inc = 0, $retval = 0, $tobool = 0, $url$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $url$addr = $url;
	 $i = 0;
	 L1: while(1) {
	  $0 = $i;
	  $1 = $url$addr;
	  $arrayidx = (($1) + ($0)|0);
	  $2 = HEAP8[$arrayidx>>0]|0;
	  $tobool = ($2<<24>>24)!=(0);
	  if (!($tobool)) {
	   label = 22;
	   break;
	  }
	  $3 = $i;
	  $4 = $url$addr;
	  $arrayidx1 = (($4) + ($3)|0);
	  $5 = HEAP8[$arrayidx1>>0]|0;
	  $conv = $5 << 24 >> 24;
	  $cmp = ($conv|0)>=(97);
	  if ($cmp) {
	   $6 = $i;
	   $7 = $url$addr;
	   $arrayidx3 = (($7) + ($6)|0);
	   $8 = HEAP8[$arrayidx3>>0]|0;
	   $conv4 = $8 << 24 >> 24;
	   $cmp5 = ($conv4|0)<=(122);
	   if (!($cmp5)) {
	    label = 5;
	   }
	  } else {
	   label = 5;
	  }
	  do {
	   if ((label|0) == 5) {
	    label = 0;
	    $9 = $i;
	    $10 = $url$addr;
	    $arrayidx7 = (($10) + ($9)|0);
	    $11 = HEAP8[$arrayidx7>>0]|0;
	    $conv8 = $11 << 24 >> 24;
	    $cmp9 = ($conv8|0)>=(65);
	    if ($cmp9) {
	     $12 = $i;
	     $13 = $url$addr;
	     $arrayidx12 = (($13) + ($12)|0);
	     $14 = HEAP8[$arrayidx12>>0]|0;
	     $conv13 = $14 << 24 >> 24;
	     $cmp14 = ($conv13|0)<=(90);
	     if ($cmp14) {
	      break;
	     }
	    }
	    $15 = $i;
	    $16 = $url$addr;
	    $arrayidx17 = (($16) + ($15)|0);
	    $17 = HEAP8[$arrayidx17>>0]|0;
	    $conv18 = $17 << 24 >> 24;
	    $cmp19 = ($conv18|0)>=(48);
	    if ($cmp19) {
	     $18 = $i;
	     $19 = $url$addr;
	     $arrayidx22 = (($19) + ($18)|0);
	     $20 = HEAP8[$arrayidx22>>0]|0;
	     $conv23 = $20 << 24 >> 24;
	     $cmp24 = ($conv23|0)<=(57);
	     if ($cmp24) {
	      break;
	     }
	    }
	    $21 = $i;
	    $22 = $url$addr;
	    $arrayidx27 = (($22) + ($21)|0);
	    $23 = HEAP8[$arrayidx27>>0]|0;
	    $conv28 = $23 << 24 >> 24;
	    $cmp29 = ($conv28|0)==(58);
	    if (!($cmp29)) {
	     $24 = $i;
	     $25 = $url$addr;
	     $arrayidx32 = (($25) + ($24)|0);
	     $26 = HEAP8[$arrayidx32>>0]|0;
	     $conv33 = $26 << 24 >> 24;
	     $cmp34 = ($conv33|0)==(47);
	     if (!($cmp34)) {
	      $27 = $i;
	      $28 = $url$addr;
	      $arrayidx37 = (($28) + ($27)|0);
	      $29 = HEAP8[$arrayidx37>>0]|0;
	      $conv38 = $29 << 24 >> 24;
	      $cmp39 = ($conv38|0)==(45);
	      if (!($cmp39)) {
	       $30 = $i;
	       $31 = $url$addr;
	       $arrayidx42 = (($31) + ($30)|0);
	       $32 = HEAP8[$arrayidx42>>0]|0;
	       $conv43 = $32 << 24 >> 24;
	       $cmp44 = ($conv43|0)==(46);
	       if (!($cmp44)) {
	        $33 = $i;
	        $34 = $url$addr;
	        $arrayidx47 = (($34) + ($33)|0);
	        $35 = HEAP8[$arrayidx47>>0]|0;
	        $conv48 = $35 << 24 >> 24;
	        $cmp49 = ($conv48|0)==(95);
	        if (!($cmp49)) {
	         $36 = $i;
	         $37 = $url$addr;
	         $arrayidx52 = (($37) + ($36)|0);
	         $38 = HEAP8[$arrayidx52>>0]|0;
	         $conv53 = $38 << 24 >> 24;
	         $cmp54 = ($conv53|0)==(43);
	         if (!($cmp54)) {
	          $39 = $i;
	          $40 = $url$addr;
	          $arrayidx57 = (($40) + ($39)|0);
	          $41 = HEAP8[$arrayidx57>>0]|0;
	          $conv58 = $41 << 24 >> 24;
	          $cmp59 = ($conv58|0)==(37);
	          if (!($cmp59)) {
	           $42 = $i;
	           $43 = $url$addr;
	           $arrayidx62 = (($43) + ($42)|0);
	           $44 = HEAP8[$arrayidx62>>0]|0;
	           $conv63 = $44 << 24 >> 24;
	           $cmp64 = ($conv63|0)==(63);
	           if (!($cmp64)) {
	            $45 = $i;
	            $46 = $url$addr;
	            $arrayidx67 = (($46) + ($45)|0);
	            $47 = HEAP8[$arrayidx67>>0]|0;
	            $conv68 = $47 << 24 >> 24;
	            $cmp69 = ($conv68|0)==(61);
	            if (!($cmp69)) {
	             $48 = $i;
	             $49 = $url$addr;
	             $arrayidx72 = (($49) + ($48)|0);
	             $50 = HEAP8[$arrayidx72>>0]|0;
	             $conv73 = $50 << 24 >> 24;
	             $cmp74 = ($conv73|0)==(38);
	             if (!($cmp74)) {
	              label = 19;
	              break L1;
	             }
	            }
	           }
	          }
	         }
	        }
	       }
	      }
	     }
	    }
	   }
	  } while(0);
	  $51 = $i;
	  $inc = (($51) + 1)|0;
	  $i = $inc;
	 }
	 if ((label|0) == 19) {
	  $retval = 0;
	  $52 = $retval;
	  STACKTOP = sp;return ($52|0);
	 }
	 else if ((label|0) == 22) {
	  $retval = 1;
	  $52 = $retval;
	  STACKTOP = sp;return ($52|0);
	 }
	 return 0|0;
	}
	function _xmmsc_medialib_import_path($conn,$path) {
	 $conn = $conn|0;
	 $path = $path|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call7 = 0, $conn$addr = 0, $enc_path = 0, $ipc = 0, $path$addr = 0, $res = 0, $retval = 0, $tobool = 0, $tobool1 = 0;
	 var $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 8|0;
	 $conn$addr = $conn;
	 $path$addr = $path;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9368;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9368;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $path$addr;
	 $call = (_xmmsv_encode_url($3)|0);
	 $enc_path = $call;
	 $4 = $enc_path;
	 $tobool4 = ($4|0)!=(0|0);
	 if ($tobool4) {
	  $5 = $conn$addr;
	  $6 = $enc_path;
	  $call7 = (_xmmsc_medialib_import_path_encoded($5,$6)|0);
	  $res = $call7;
	  $7 = $enc_path;
	  _free($7);
	  $8 = $res;
	  $retval = $8;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsc_medialib_import_path_encoded($conn,$path) {
	 $conn = $conn|0;
	 $path = $path|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call9 = 0, $conn$addr = 0, $ipc = 0, $path$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $path$addr = $path;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9400;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9400;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $3 = $path$addr;
	 $call = (__xmmsc_medialib_verify_url($3)|0);
	 $tobool4 = ($call|0)!=(0);
	 if ($tobool4) {
	  $4 = $conn$addr;
	  $5 = $path$addr;
	  $call9 = (_do_methodcall($4,33,$5)|0);
	  $retval = $call9;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 HEAP32[$vararg_buffer6>>2] = 9400;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 9344;
	 _xmmsc_log(0,2,9032,$vararg_buffer6);
	 $retval = 0;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function _xmmsc_medialib_path_import($conn,$path) {
	 $conn = $conn|0;
	 $path = $path|0;
	 var $0 = 0, $1 = 0, $call = 0, $conn$addr = 0, $path$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $conn$addr = $conn;
	 $path$addr = $path;
	 $0 = $conn$addr;
	 $1 = $path$addr;
	 $call = (_xmmsc_medialib_import_path($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_medialib_path_import_encoded($conn,$path) {
	 $conn = $conn|0;
	 $path = $path|0;
	 var $0 = 0, $1 = 0, $call = 0, $conn$addr = 0, $path$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $conn$addr = $conn;
	 $path$addr = $path;
	 $0 = $conn$addr;
	 $1 = $path$addr;
	 $call = (_xmmsc_medialib_import_path_encoded($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_medialib_rehash($conn,$id) {
	 $conn = $conn|0;
	 $id = $id|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call4 = 0, $call5 = 0, $conn$addr = 0, $id$addr = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $conn$addr = $conn;
	 $id$addr = $id;
	 $0 = $conn$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9440;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $conn$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9440;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $conn$addr;
	 $4 = $id$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv372($7)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call5 = (_xmmsc_send_cmd($3,5,34,$vararg_buffer6)|0);
	 $retval = $call5;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmmsc_medialib_get_info($c,$id) {
	 $c = $c|0;
	 $id = $id|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c$addr = 0, $call4 = 0, $call5 = 0, $id$addr = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $id$addr = $id;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9464;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9464;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $c$addr;
	 $4 = $id$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv372($7)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call5 = (_xmmsc_send_cmd($3,5,32,$vararg_buffer6)|0);
	 $retval = $call5;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmmsc_broadcast_medialib_entry_added($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9488;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9488;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,8)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_broadcast_medialib_entry_changed($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9528;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9528;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,9)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_broadcast_medialib_entry_updated($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9568;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9568;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,9)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_broadcast_medialib_entry_removed($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9608;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9608;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,10)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_medialib_entry_property_set_int($c,$id,$key,$value) {
	 $c = $c|0;
	 $id = $id|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call5 = 0, $clientname = 0, $id$addr = 0, $ipc = 0, $key$addr = 0, $retval = 0, $tmp = 0, $tobool = 0, $tobool1 = 0;
	 var $value$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 8|0;
	 $tmp = sp + 48|0;
	 $c$addr = $c;
	 $id$addr = $id;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9648;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9648;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $c$addr;
	 $clientname = (($3) + 16|0);
	 $4 = HEAP32[$clientname>>2]|0;
	 HEAP32[$vararg_buffer6>>2] = $4;
	 (_snprintf($tmp,256,9688,$vararg_buffer6)|0);
	 $5 = $c$addr;
	 $6 = $id$addr;
	 $7 = $key$addr;
	 $8 = $value$addr;
	 $call5 = (_xmmsc_medialib_entry_property_set_int_with_source($5,$6,$tmp,$7,$8)|0);
	 $retval = $call5;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsc_medialib_entry_property_set_int_with_source($c,$id,$source,$key,$value) {
	 $c = $c|0;
	 $id = $id|0;
	 $source = $source|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call10 = 0, $call13 = 0, $call14 = 0, $call4 = 0;
	 var $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $id$addr = 0, $ipc = 0, $key$addr = 0, $retval = 0, $source$addr = 0, $tobool = 0, $tobool1 = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0;
	 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 24|0;
	 $vararg_buffer = sp + 32|0;
	 $c$addr = $c;
	 $id$addr = $id;
	 $source$addr = $source;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9704;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9704;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $3 = $c$addr;
	 $4 = $id$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv372($7)|0);
	 $8 = $source$addr;
	 $call5 = (_xmmsv_new_string($8)|0);
	 $call6 = (___xmmsv_null_to_none373($call5)|0);
	 $call7 = (___xmmsv_identity_xmmsv372($call6)|0);
	 $9 = $key$addr;
	 $call8 = (_xmmsv_new_string($9)|0);
	 $call9 = (___xmmsv_null_to_none373($call8)|0);
	 $call10 = (___xmmsv_identity_xmmsv372($call9)|0);
	 $10 = $value$addr;
	 $11 = ($10|0)<(0);
	 $12 = $11 << 31 >> 31;
	 $13 = (_xmmsv_new_int($10,$12)|0);
	 $call13 = (___xmmsv_identity_xmmsv372($13)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call7;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = $call10;
	 $vararg_ptr11 = (($vararg_buffer6) + 12|0);
	 HEAP32[$vararg_ptr11>>2] = $call13;
	 $vararg_ptr12 = (($vararg_buffer6) + 16|0);
	 HEAP32[$vararg_ptr12>>2] = 0;
	 $call14 = (_xmmsc_send_cmd($3,5,38,$vararg_buffer6)|0);
	 $retval = $call14;
	 $14 = $retval;
	 STACKTOP = sp;return ($14|0);
	}
	function _xmmsc_medialib_entry_property_set_str($c,$id,$key,$value) {
	 $c = $c|0;
	 $id = $id|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call5 = 0, $clientname = 0, $id$addr = 0, $ipc = 0, $key$addr = 0, $retval = 0, $tmp = 0, $tobool = 0, $tobool1 = 0;
	 var $value$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 8|0;
	 $tmp = sp + 48|0;
	 $c$addr = $c;
	 $id$addr = $id;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9760;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9760;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $c$addr;
	 $clientname = (($3) + 16|0);
	 $4 = HEAP32[$clientname>>2]|0;
	 HEAP32[$vararg_buffer6>>2] = $4;
	 (_snprintf($tmp,256,9688,$vararg_buffer6)|0);
	 $5 = $c$addr;
	 $6 = $id$addr;
	 $7 = $key$addr;
	 $8 = $value$addr;
	 $call5 = (_xmmsc_medialib_entry_property_set_str_with_source($5,$6,$tmp,$7,$8)|0);
	 $retval = $call5;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsc_medialib_entry_property_set_str_with_source($c,$id,$source,$key,$value) {
	 $c = $c|0;
	 $id = $id|0;
	 $source = $source|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call13 = 0, $call14 = 0, $call4 = 0, $call5 = 0;
	 var $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $id$addr = 0, $ipc = 0, $key$addr = 0, $retval = 0, $source$addr = 0, $tobool = 0, $tobool1 = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0;
	 var $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 24|0;
	 $vararg_buffer = sp + 32|0;
	 $c$addr = $c;
	 $id$addr = $id;
	 $source$addr = $source;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9800;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9800;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $3 = $c$addr;
	 $4 = $id$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv372($7)|0);
	 $8 = $source$addr;
	 $call5 = (_xmmsv_new_string($8)|0);
	 $call6 = (___xmmsv_null_to_none373($call5)|0);
	 $call7 = (___xmmsv_identity_xmmsv372($call6)|0);
	 $9 = $key$addr;
	 $call8 = (_xmmsv_new_string($9)|0);
	 $call9 = (___xmmsv_null_to_none373($call8)|0);
	 $call10 = (___xmmsv_identity_xmmsv372($call9)|0);
	 $10 = $value$addr;
	 $call11 = (_xmmsv_new_string($10)|0);
	 $call12 = (___xmmsv_null_to_none373($call11)|0);
	 $call13 = (___xmmsv_identity_xmmsv372($call12)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call7;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = $call10;
	 $vararg_ptr11 = (($vararg_buffer6) + 12|0);
	 HEAP32[$vararg_ptr11>>2] = $call13;
	 $vararg_ptr12 = (($vararg_buffer6) + 16|0);
	 HEAP32[$vararg_ptr12>>2] = 0;
	 $call14 = (_xmmsc_send_cmd($3,5,37,$vararg_buffer6)|0);
	 $retval = $call14;
	 $11 = $retval;
	 STACKTOP = sp;return ($11|0);
	}
	function _xmmsc_medialib_entry_property_remove($c,$id,$key) {
	 $c = $c|0;
	 $id = $id|0;
	 $key = $key|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c$addr = 0, $call5 = 0, $clientname = 0, $id$addr = 0, $ipc = 0, $key$addr = 0, $retval = 0, $tmp = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0;
	 var $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp + 16|0;
	 $tmp = sp + 40|0;
	 $c$addr = $c;
	 $id$addr = $id;
	 $key$addr = $key;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9856;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $c$addr;
	 $clientname = (($3) + 16|0);
	 $4 = HEAP32[$clientname>>2]|0;
	 HEAP32[$vararg_buffer6>>2] = $4;
	 (_snprintf($tmp,256,9688,$vararg_buffer6)|0);
	 $5 = $c$addr;
	 $6 = $id$addr;
	 $7 = $key$addr;
	 $call5 = (_xmmsc_medialib_entry_property_remove_with_source($5,$6,$tmp,$7)|0);
	 $retval = $call5;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmmsc_medialib_entry_property_remove_with_source($c,$id,$source,$key) {
	 $c = $c|0;
	 $id = $id|0;
	 $source = $source|0;
	 $key = $key|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call10 = 0, $call11 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0;
	 var $id$addr = 0, $ipc = 0, $key$addr = 0, $retval = 0, $source$addr = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $id$addr = $id;
	 $source$addr = $source;
	 $key$addr = $key;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 9896;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 9080;
	  _xmmsc_log(0,2,9032,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 9896;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 9104;
	  _xmmsc_log(0,2,9032,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $c$addr;
	 $4 = $id$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv372($7)|0);
	 $8 = $source$addr;
	 $call5 = (_xmmsv_new_string($8)|0);
	 $call6 = (___xmmsv_null_to_none373($call5)|0);
	 $call7 = (___xmmsv_identity_xmmsv372($call6)|0);
	 $9 = $key$addr;
	 $call8 = (_xmmsv_new_string($9)|0);
	 $call9 = (___xmmsv_null_to_none373($call8)|0);
	 $call10 = (___xmmsv_identity_xmmsv372($call9)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call7;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = $call10;
	 $vararg_ptr11 = (($vararg_buffer6) + 12|0);
	 HEAP32[$vararg_ptr11>>2] = 0;
	 $call11 = (_xmmsc_send_cmd($3,5,39,$vararg_buffer6)|0);
	 $retval = $call11;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function _xmmsc_medialib_encode_url_full($url,$args) {
	 $url = $url|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $args$addr = 0, $call = 0, $url$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $url$addr = $url;
	 $args$addr = $args;
	 $0 = $url$addr;
	 $1 = $args$addr;
	 $call = (_xmmsv_encode_url_full($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_medialib_encode_url($url) {
	 $url = $url|0;
	 var $0 = 0, $call = 0, $url$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $url$addr = $url;
	 $0 = $url$addr;
	 $call = (_xmmsv_encode_url_full($0,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_playback_tickle($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10040;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10040;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,4,35)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playback_stop($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10128;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10128;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,4,33)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playback_pause($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10152;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10152;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,4,34)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playback_start($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10176;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10176;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,4,32)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playback_seek_ms($c,$milliseconds,$whence) {
	 $c = $c|0;
	 $milliseconds = $milliseconds|0;
	 $whence = $whence|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call4 = 0, $call7 = 0, $call8 = 0, $ipc = 0, $milliseconds$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0;
	 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $whence$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $milliseconds$addr = $milliseconds;
	 $whence$addr = $whence;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10200;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10200;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $c$addr;
	 $4 = $milliseconds$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv378($7)|0);
	 $8 = $whence$addr;
	 $9 = (_xmmsv_new_int($8,0)|0);
	 $call7 = (___xmmsv_identity_xmmsv378($9)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call7;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = 0;
	 $call8 = (_xmmsc_send_cmd($3,4,37,$vararg_buffer6)|0);
	 $retval = $call8;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function ___xmmsv_identity_xmmsv378($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function _xmmsc_playback_seek_samples($c,$samples,$whence) {
	 $c = $c|0;
	 $samples = $samples|0;
	 $whence = $whence|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call4 = 0, $call7 = 0, $call8 = 0, $ipc = 0, $retval = 0, $samples$addr = 0, $tobool = 0, $tobool1 = 0;
	 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $whence$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $samples$addr = $samples;
	 $whence$addr = $whence;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10224;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10224;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $c$addr;
	 $4 = $samples$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv378($7)|0);
	 $8 = $whence$addr;
	 $9 = (_xmmsv_new_int($8,0)|0);
	 $call7 = (___xmmsv_identity_xmmsv378($9)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call7;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = 0;
	 $call8 = (_xmmsc_send_cmd($3,4,38,$vararg_buffer6)|0);
	 $retval = $call8;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function _xmmsc_broadcast_playback_status($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10256;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10256;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,2)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playback_status($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10288;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10288;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,4,39)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_broadcast_playback_current_id($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10312;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10312;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,5)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playback_current_id($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10352;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10352;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,4,40)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_signal_playback_playtime($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10384;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10384;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_signal_msg($3,4)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playback_playtime($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10416;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10416;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,4,36)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playback_volume_set($c,$channel,$volume) {
	 $c = $c|0;
	 $channel = $channel|0;
	 $volume = $volume|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call7 = 0, $call8 = 0, $channel$addr = 0, $ipc = 0, $retval = 0;
	 var $tobool = 0, $tobool1 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $volume$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 24|0;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $channel$addr = $channel;
	 $volume$addr = $volume;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10440;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10440;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $channel$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if ($tobool4) {
	  $4 = $c$addr;
	  $5 = $channel$addr;
	  $call = (_xmmsv_new_string($5)|0);
	  $call7 = (___xmmsv_null_to_none379($call)|0);
	  $call8 = (___xmmsv_identity_xmmsv378($call7)|0);
	  $6 = $volume$addr;
	  $7 = ($6|0)<(0);
	  $8 = $7 << 31 >> 31;
	  $9 = (_xmmsv_new_int($6,$8)|0);
	  $call10 = (___xmmsv_identity_xmmsv378($9)|0);
	  HEAP32[$vararg_buffer10>>2] = $call8;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = $call10;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = 0;
	  $call11 = (_xmmsc_send_cmd($4,4,41,$vararg_buffer10)|0);
	  $retval = $call11;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 10440;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 10472;
	  _xmmsc_log(0,2,10016,$vararg_buffer6);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 return 0|0;
	}
	function ___xmmsv_null_to_none379($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $v$addr;
	  $cond = $1;
	 } else {
	  $call = (_xmmsv_new_none()|0);
	  $cond = $call;
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _xmmsc_playback_volume_get($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10496;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10496;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,4,42)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_broadcast_playback_volume_changed($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10528;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10064;
	  _xmmsc_log(0,2,10016,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10528;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10088;
	  _xmmsc_log(0,2,10016,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,3)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playlist_current_pos($c,$playlist) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $c$addr = 0, $call = 0, $call6 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $ipc = 0, $playlist$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
	 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10592;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10592;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $4 = $c$addr;
	 $5 = $playlist$addr;
	 $call = (_xmmsv_new_string($5)|0);
	 $call6 = (___xmmsv_null_to_none397($call)|0);
	 $call7 = (___xmmsv_identity_xmmsv396($call6)|0);
	 HEAP32[$vararg_buffer6>>2] = $call7;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call8 = (_xmmsc_send_cmd($4,2,40,$vararg_buffer6)|0);
	 $retval = $call8;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function ___xmmsv_identity_xmmsv396($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function ___xmmsv_null_to_none397($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $v$addr;
	  $cond = $1;
	 } else {
	  $call = (_xmmsv_new_none()|0);
	  $cond = $call;
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _xmmsc_playlist_current_active($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10696;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10696;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,2,41)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playlist_list($c) {
	 $c = $c|0;
	 var $0 = 0, $c$addr = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $0 = $c$addr;
	 $call = (_xmmsc_coll_list($0,10728)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_playlist_create($c,$playlist) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call7 = 0, $ipc = 0, $playlist$addr = 0, $plcoll = 0, $res = 0, $retval = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10744;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10744;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $playlist$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if ($tobool4) {
	  $call = (_xmmsv_new_coll(17)|0);
	  $plcoll = $call;
	  $4 = $plcoll;
	  _xmmsv_coll_attribute_set_string($4,10800,10808);
	  $5 = $c$addr;
	  $6 = $plcoll;
	  $7 = $playlist$addr;
	  $call7 = (_xmmsc_coll_save($5,$6,$7,10728)|0);
	  $res = $call7;
	  $8 = $plcoll;
	  _xmmsv_unref($8);
	  $9 = $res;
	  $retval = $9;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 10744;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 10768;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 return 0|0;
	}
	function _xmmsc_playlist_shuffle($c,$playlist) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call12 = 0;
	 var $call13 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $ipc = 0, $playlist$addr = 0, $reference = 0, $retval = 0, $shuffled = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0;
	 var $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10816;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10816;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $call = (_xmmsv_new_coll(0)|0);
	 $reference = $call;
	 $4 = $reference;
	 _xmmsv_coll_attribute_set_string($4,10840,10728);
	 $5 = $reference;
	 $6 = $playlist$addr;
	 _xmmsv_coll_attribute_set_string($5,10856,$6);
	 $call6 = (_xmmsv_new_coll(14)|0);
	 $shuffled = $call6;
	 $7 = $shuffled;
	 _xmmsv_coll_attribute_set_string($7,10800,10872);
	 $8 = $shuffled;
	 $9 = $reference;
	 _xmmsv_coll_add_operand($8,$9);
	 $10 = $reference;
	 _xmmsv_unref($10);
	 $11 = $c$addr;
	 $12 = $playlist$addr;
	 $call7 = (_xmmsv_new_string($12)|0);
	 $call8 = (___xmmsv_null_to_none397($call7)|0);
	 $call9 = (___xmmsv_identity_xmmsv396($call8)|0);
	 $13 = $shuffled;
	 $call10 = (___xmmsv_identity_xmmsv396($13)|0);
	 $14 = (_xmmsv_new_int(2,0)|0);
	 $call12 = (___xmmsv_identity_xmmsv396($14)|0);
	 HEAP32[$vararg_buffer6>>2] = $call9;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call10;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = $call12;
	 $vararg_ptr11 = (($vararg_buffer6) + 12|0);
	 HEAP32[$vararg_ptr11>>2] = 0;
	 $call13 = (_xmmsc_send_cmd($11,2,32,$vararg_buffer6)|0);
	 $retval = $call13;
	 $15 = $retval;
	 STACKTOP = sp;return ($15|0);
	}
	function _xmmsc_playlist_sort($c,$playlist,$properties) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $properties = $properties|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0;
	 var $call12 = 0, $call13 = 0, $call14 = 0, $call15 = 0, $call16 = 0, $call17 = 0, $call19 = 0, $call20 = 0, $cmp = 0, $contains_strings_only = 0, $ipc = 0, $ordered = 0, $playlist$addr = 0, $properties$addr = 0, $reference = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool9 = 0;
	 var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp + 32|0;
	 $vararg_buffer10 = sp + 8|0;
	 $vararg_buffer6 = sp + 24|0;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $properties$addr = $properties;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10880;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10880;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $3 = $properties$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 10880;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 10904;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 $4 = $playlist$addr;
	 $cmp = ($4|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $5 = $properties$addr;
	 $call = (_xmmsv_list_restrict_type($5,3)|0);
	 $contains_strings_only = $call;
	 $6 = $contains_strings_only;
	 $tobool9 = ($6|0)!=(0);
	 if ($tobool9) {
	  $call12 = (_xmmsv_new_coll(0)|0);
	  $reference = $call12;
	  $7 = $reference;
	  _xmmsv_coll_attribute_set_string($7,10840,10728);
	  $8 = $reference;
	  $9 = $playlist$addr;
	  _xmmsv_coll_attribute_set_string($8,10856,$9);
	  $10 = $reference;
	  $11 = $properties$addr;
	  $call13 = (_xmmsv_coll_add_order_operators($10,$11)|0);
	  $ordered = $call13;
	  $12 = $reference;
	  _xmmsv_unref($12);
	  $13 = $c$addr;
	  $14 = $playlist$addr;
	  $call14 = (_xmmsv_new_string($14)|0);
	  $call15 = (___xmmsv_null_to_none397($call14)|0);
	  $call16 = (___xmmsv_identity_xmmsv396($call15)|0);
	  $15 = $ordered;
	  $call17 = (___xmmsv_identity_xmmsv396($15)|0);
	  $16 = (_xmmsv_new_int(1,0)|0);
	  $call19 = (___xmmsv_identity_xmmsv396($16)|0);
	  HEAP32[$vararg_buffer14>>2] = $call16;
	  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	  HEAP32[$vararg_ptr17>>2] = $call17;
	  $vararg_ptr18 = (($vararg_buffer14) + 8|0);
	  HEAP32[$vararg_ptr18>>2] = $call19;
	  $vararg_ptr19 = (($vararg_buffer14) + 12|0);
	  HEAP32[$vararg_ptr19>>2] = 0;
	  $call20 = (_xmmsc_send_cmd($13,2,32,$vararg_buffer14)|0);
	  $retval = $call20;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 } else {
	  HEAP32[$vararg_buffer10>>2] = 10880;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 10928;
	  _xmmsc_log(0,2,10568,$vararg_buffer10);
	  $retval = 0;
	  $17 = $retval;
	  STACKTOP = sp;return ($17|0);
	 }
	 return 0|0;
	}
	function _xmmsc_playlist_clear($c,$playlist) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c$addr = 0, $call = 0, $call11 = 0, $call12 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $empty = 0, $ipc = 0;
	 var $playlist$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10968;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $call = (_xmmsv_new_coll(17)|0);
	 $empty = $call;
	 $4 = $c$addr;
	 $5 = $playlist$addr;
	 $call6 = (_xmmsv_new_string($5)|0);
	 $call7 = (___xmmsv_null_to_none397($call6)|0);
	 $call8 = (___xmmsv_identity_xmmsv396($call7)|0);
	 $6 = $empty;
	 $call9 = (___xmmsv_identity_xmmsv396($6)|0);
	 $7 = (_xmmsv_new_int(0,0)|0);
	 $call11 = (___xmmsv_identity_xmmsv396($7)|0);
	 HEAP32[$vararg_buffer6>>2] = $call8;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call9;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = $call11;
	 $vararg_ptr11 = (($vararg_buffer6) + 12|0);
	 HEAP32[$vararg_ptr11>>2] = 0;
	 $call12 = (_xmmsc_send_cmd($4,2,32,$vararg_buffer6)|0);
	 $retval = $call12;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmmsc_playlist_replace($c,$playlist,$coll,$action) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $coll = $coll|0;
	 $action = $action|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$addr = 0, $c$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call14 = 0, $call15 = 0, $call9 = 0;
	 var $cmp = 0, $coll$addr = 0, $ipc = 0, $playlist$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 16|0;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp + 32|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $coll$addr = $coll;
	 $action$addr = $action;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 10992;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 10992;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $coll$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 10992;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11016;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $4 = $playlist$addr;
	 $cmp = ($4|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $5 = $c$addr;
	 $6 = $playlist$addr;
	 $call = (_xmmsv_new_string($6)|0);
	 $call9 = (___xmmsv_null_to_none397($call)|0);
	 $call10 = (___xmmsv_identity_xmmsv396($call9)|0);
	 $7 = $coll$addr;
	 $call11 = (_xmmsv_ref($7)|0);
	 $call12 = (___xmmsv_identity_xmmsv396($call11)|0);
	 $8 = $action$addr;
	 $9 = (_xmmsv_new_int($8,0)|0);
	 $call14 = (___xmmsv_identity_xmmsv396($9)|0);
	 HEAP32[$vararg_buffer10>>2] = $call10;
	 $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	 HEAP32[$vararg_ptr13>>2] = $call12;
	 $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	 HEAP32[$vararg_ptr14>>2] = $call14;
	 $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	 HEAP32[$vararg_ptr15>>2] = 0;
	 $call15 = (_xmmsc_send_cmd($5,2,32,$vararg_buffer10)|0);
	 $retval = $call15;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function _xmmsc_playlist_remove($c,$playlist) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 var $0 = 0, $1 = 0, $c$addr = 0, $call = 0, $playlist$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $0 = $c$addr;
	 $1 = $playlist$addr;
	 $call = (_xmmsc_coll_remove($0,$1,10728)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_playlist_list_entries($c,$playlist) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $c$addr = 0, $call = 0, $call6 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $ipc = 0, $playlist$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
	 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11040;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11040;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $4 = $c$addr;
	 $5 = $playlist$addr;
	 $call = (_xmmsv_new_string($5)|0);
	 $call6 = (___xmmsv_null_to_none397($call)|0);
	 $call7 = (___xmmsv_identity_xmmsv396($call6)|0);
	 HEAP32[$vararg_buffer6>>2] = $call7;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call8 = (_xmmsc_send_cmd($4,2,39,$vararg_buffer6)|0);
	 $retval = $call8;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function _xmmsc_playlist_insert_id($c,$playlist,$pos,$id) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $pos = $pos|0;
	 $id = $id|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call12 = 0, $call13 = 0;
	 var $call14 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $coll = 0, $id$addr = 0, $ipc = 0, $playlist$addr = 0, $pos$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0;
	 var $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $pos$addr = $pos;
	 $id$addr = $id;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11072;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11072;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $call = (_xmmsv_new_coll(17)|0);
	 $coll = $call;
	 $4 = $coll;
	 $5 = $id$addr;
	 $6 = ($5|0)<(0);
	 $7 = $6 << 31 >> 31;
	 (_xmmsv_coll_idlist_append($4,$5,$7)|0);
	 $8 = $c$addr;
	 $9 = $playlist$addr;
	 $call7 = (_xmmsv_new_string($9)|0);
	 $call8 = (___xmmsv_null_to_none397($call7)|0);
	 $call9 = (___xmmsv_identity_xmmsv396($call8)|0);
	 $10 = $pos$addr;
	 $11 = ($10|0)<(0);
	 $12 = $11 << 31 >> 31;
	 $13 = (_xmmsv_new_int($10,$12)|0);
	 $call12 = (___xmmsv_identity_xmmsv396($13)|0);
	 $14 = $coll;
	 $call13 = (___xmmsv_identity_xmmsv396($14)|0);
	 HEAP32[$vararg_buffer6>>2] = $call9;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call12;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = $call13;
	 $vararg_ptr11 = (($vararg_buffer6) + 12|0);
	 HEAP32[$vararg_ptr11>>2] = 0;
	 $call14 = (_xmmsc_send_cmd($8,2,43,$vararg_buffer6)|0);
	 $retval = $call14;
	 $15 = $retval;
	 STACKTOP = sp;return ($15|0);
	}
	function _xmmsc_playlist_insert_url($c,$playlist,$pos,$url) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $pos = $pos|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $c$addr = 0, $call = 0, $playlist$addr = 0, $pos$addr = 0, $url$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $pos$addr = $pos;
	 $url$addr = $url;
	 $0 = $c$addr;
	 $1 = $playlist$addr;
	 $2 = $pos$addr;
	 $3 = $url$addr;
	 $call = (_xmmsc_playlist_insert_full($0,$1,$2,$3,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_playlist_insert_full($c,$playlist,$pos,$url,$args) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $pos = $pos|0;
	 $url = $url|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args$addr = 0, $c$addr = 0, $call = 0, $call10 = 0, $enc_url = 0, $ipc = 0;
	 var $playlist$addr = 0, $pos$addr = 0, $res = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $pos$addr = $pos;
	 $url$addr = $url;
	 $args$addr = $args;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11232;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11232;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 11232;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11128;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $4 = $url$addr;
	 $5 = $args$addr;
	 $call = (_xmmsv_encode_url_full($4,$5)|0);
	 $enc_url = $call;
	 $6 = $enc_url;
	 $tobool7 = ($6|0)!=(0|0);
	 if ($tobool7) {
	  $7 = $c$addr;
	  $8 = $playlist$addr;
	  $9 = $pos$addr;
	  $10 = $enc_url;
	  $call10 = (_xmmsc_playlist_insert_encoded($7,$8,$9,$10)|0);
	  $res = $call10;
	  $11 = $enc_url;
	  _free($11);
	  $12 = $res;
	  $retval = $12;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 } else {
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 return 0|0;
	}
	function _xmmsc_playlist_rinsert($c,$playlist,$pos,$url) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $pos = $pos|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $enc_url = 0, $ipc = 0, $playlist$addr = 0, $pos$addr = 0;
	 var $res = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $pos$addr = $pos;
	 $url$addr = $url;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11104;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11104;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 11104;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11128;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $4 = $url$addr;
	 $call = (_xmmsv_encode_url($4)|0);
	 $enc_url = $call;
	 $5 = $enc_url;
	 $tobool7 = ($5|0)!=(0|0);
	 if ($tobool7) {
	  $6 = $c$addr;
	  $7 = $playlist$addr;
	  $8 = $pos$addr;
	  $9 = $enc_url;
	  $call10 = (_xmmsc_playlist_rinsert_encoded($6,$7,$8,$9)|0);
	  $res = $call10;
	  $10 = $enc_url;
	  _free($10);
	  $11 = $res;
	  $retval = $11;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 } else {
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 return 0|0;
	}
	function _xmmsc_playlist_rinsert_encoded($c,$playlist,$pos,$url) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $pos = $pos|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call14 = 0, $call15 = 0, $call16 = 0, $call18 = 0;
	 var $call19 = 0, $call20 = 0, $call21 = 0, $call22 = 0, $cmp = 0, $ipc = 0, $playlist$addr = 0, $pos$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp + 8|0;
	 $vararg_buffer10 = sp + 24|0;
	 $vararg_buffer6 = sp + 40|0;
	 $vararg_buffer2 = sp + 32|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $pos$addr = $pos;
	 $url$addr = $url;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11144;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11144;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 11144;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11128;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $4 = $url$addr;
	 $call = (__xmmsc_medialib_verify_url($4)|0);
	 $tobool7 = ($call|0)!=(0);
	 if (!($tobool7)) {
	  HEAP32[$vararg_buffer10>>2] = 11144;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 11176;
	  _xmmsc_log(0,2,10568,$vararg_buffer10);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $5 = $playlist$addr;
	 $cmp = ($5|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $6 = $c$addr;
	 $7 = $playlist$addr;
	 $call14 = (_xmmsv_new_string($7)|0);
	 $call15 = (___xmmsv_null_to_none397($call14)|0);
	 $call16 = (___xmmsv_identity_xmmsv396($call15)|0);
	 $8 = $pos$addr;
	 $9 = ($8|0)<(0);
	 $10 = $9 << 31 >> 31;
	 $11 = (_xmmsv_new_int($8,$10)|0);
	 $call18 = (___xmmsv_identity_xmmsv396($11)|0);
	 $12 = $url$addr;
	 $call19 = (_xmmsv_new_string($12)|0);
	 $call20 = (___xmmsv_null_to_none397($call19)|0);
	 $call21 = (___xmmsv_identity_xmmsv396($call20)|0);
	 HEAP32[$vararg_buffer14>>2] = $call16;
	 $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	 HEAP32[$vararg_ptr17>>2] = $call18;
	 $vararg_ptr18 = (($vararg_buffer14) + 8|0);
	 HEAP32[$vararg_ptr18>>2] = $call21;
	 $vararg_ptr19 = (($vararg_buffer14) + 12|0);
	 HEAP32[$vararg_ptr19>>2] = 0;
	 $call22 = (_xmmsc_send_cmd($6,2,46,$vararg_buffer14)|0);
	 $retval = $call22;
	 $13 = $retval;
	 STACKTOP = sp;return ($13|0);
	}
	function _xmmsc_playlist_insert_args($c,$playlist,$pos,$url,$numargs,$args) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $pos = $pos|0;
	 $url = $url|0;
	 $numargs = $numargs|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args$addr = 0, $c$addr = 0, $call = 0, $call10 = 0, $enc_url = 0;
	 var $ipc = 0, $numargs$addr = 0, $playlist$addr = 0, $pos$addr = 0, $res = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $pos$addr = $pos;
	 $url$addr = $url;
	 $numargs$addr = $numargs;
	 $args$addr = $args;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11200;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11200;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 11200;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11128;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $4 = $url$addr;
	 $5 = $numargs$addr;
	 $6 = $args$addr;
	 $call = (__xmmsc_medialib_encode_url_old($4,$5,$6)|0);
	 $enc_url = $call;
	 $7 = $enc_url;
	 $tobool7 = ($7|0)!=(0|0);
	 if ($tobool7) {
	  $8 = $c$addr;
	  $9 = $playlist$addr;
	  $10 = $pos$addr;
	  $11 = $enc_url;
	  $call10 = (_xmmsc_playlist_insert_encoded($8,$9,$10,$11)|0);
	  $res = $call10;
	  $12 = $enc_url;
	  _free($12);
	  $13 = $res;
	  $retval = $13;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 } else {
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 return 0|0;
	}
	function _xmmsc_playlist_insert_encoded($c,$playlist,$pos,$url) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $pos = $pos|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call7 = 0, $call8 = 0, $call9 = 0;
	 var $cmp = 0, $playlist$addr = 0, $pos$addr = 0, $retval = 0, $tobool = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $pos$addr = $pos;
	 $url$addr = $url;
	 $0 = $url$addr;
	 $call = (__xmmsc_medialib_verify_url($0)|0);
	 $tobool = ($call|0)!=(0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11264;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 11176;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $playlist$addr;
	 $cmp = ($1|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $2 = $c$addr;
	 $3 = $playlist$addr;
	 $call3 = (_xmmsv_new_string($3)|0);
	 $call4 = (___xmmsv_null_to_none397($call3)|0);
	 $call5 = (___xmmsv_identity_xmmsv396($call4)|0);
	 $4 = $pos$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call7 = (___xmmsv_identity_xmmsv396($7)|0);
	 $8 = $url$addr;
	 $call8 = (_xmmsv_new_string($8)|0);
	 $call9 = (___xmmsv_null_to_none397($call8)|0);
	 $call10 = (___xmmsv_identity_xmmsv396($call9)|0);
	 HEAP32[$vararg_buffer2>>2] = $call5;
	 $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	 HEAP32[$vararg_ptr5>>2] = $call7;
	 $vararg_ptr6 = (($vararg_buffer2) + 8|0);
	 HEAP32[$vararg_ptr6>>2] = $call10;
	 $vararg_ptr7 = (($vararg_buffer2) + 12|0);
	 HEAP32[$vararg_ptr7>>2] = 0;
	 $call11 = (_xmmsc_send_cmd($2,2,42,$vararg_buffer2)|0);
	 $retval = $call11;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsc_playlist_insert_collection($c,$playlist,$pos,$coll,$order) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $pos = $pos|0;
	 $coll = $coll|0;
	 $order = $order|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call6 = 0;
	 var $call7 = 0, $call8 = 0, $cmp = 0, $coll$addr = 0, $ipc = 0, $order$addr = 0, $ordered = 0, $playlist$addr = 0, $pos$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $pos$addr = $pos;
	 $coll$addr = $coll;
	 $order$addr = $order;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11296;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11296;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $4 = $coll$addr;
	 $5 = $order$addr;
	 $call = (_xmmsv_coll_add_order_operators($4,$5)|0);
	 $ordered = $call;
	 $6 = $c$addr;
	 $7 = $playlist$addr;
	 $call6 = (_xmmsv_new_string($7)|0);
	 $call7 = (___xmmsv_null_to_none397($call6)|0);
	 $call8 = (___xmmsv_identity_xmmsv396($call7)|0);
	 $8 = $pos$addr;
	 $9 = ($8|0)<(0);
	 $10 = $9 << 31 >> 31;
	 $11 = (_xmmsv_new_int($8,$10)|0);
	 $call10 = (___xmmsv_identity_xmmsv396($11)|0);
	 $12 = $ordered;
	 $call11 = (___xmmsv_identity_xmmsv396($12)|0);
	 HEAP32[$vararg_buffer6>>2] = $call8;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call10;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = $call11;
	 $vararg_ptr11 = (($vararg_buffer6) + 12|0);
	 HEAP32[$vararg_ptr11>>2] = 0;
	 $call12 = (_xmmsc_send_cmd($6,2,43,$vararg_buffer6)|0);
	 $retval = $call12;
	 $13 = $retval;
	 STACKTOP = sp;return ($13|0);
	}
	function _xmmsc_playlist_add_id($c,$playlist,$id) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $id = $id|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $cmp = 0;
	 var $coll = 0, $id$addr = 0, $ipc = 0, $playlist$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $id$addr = $id;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11336;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11336;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $call = (_xmmsv_new_coll(17)|0);
	 $coll = $call;
	 $4 = $coll;
	 $5 = $id$addr;
	 $6 = ($5|0)<(0);
	 $7 = $6 << 31 >> 31;
	 (_xmmsv_coll_idlist_append($4,$5,$7)|0);
	 $8 = $c$addr;
	 $9 = $playlist$addr;
	 $call7 = (_xmmsv_new_string($9)|0);
	 $call8 = (___xmmsv_null_to_none397($call7)|0);
	 $call9 = (___xmmsv_identity_xmmsv396($call8)|0);
	 $10 = $coll;
	 $call10 = (___xmmsv_identity_xmmsv396($10)|0);
	 HEAP32[$vararg_buffer6>>2] = $call9;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call10;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = 0;
	 $call11 = (_xmmsc_send_cmd($8,2,36,$vararg_buffer6)|0);
	 $retval = $call11;
	 $11 = $retval;
	 STACKTOP = sp;return ($11|0);
	}
	function _xmmsc_playlist_add_url($c,$playlist,$url) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $c$addr = 0, $call = 0, $playlist$addr = 0, $url$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $url$addr = $url;
	 $0 = $c$addr;
	 $1 = $playlist$addr;
	 $2 = $url$addr;
	 $call = (_xmmsc_playlist_add_full($0,$1,$2,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_playlist_add_full($c,$playlist,$url,$args) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $url = $url|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args$addr = 0, $c$addr = 0, $call = 0, $call10 = 0, $enc_url = 0, $ipc = 0, $playlist$addr = 0;
	 var $res = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $url$addr = $url;
	 $args$addr = $args;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11440;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11440;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 11440;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11128;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 $4 = $url$addr;
	 $5 = $args$addr;
	 $call = (_xmmsv_encode_url_full($4,$5)|0);
	 $enc_url = $call;
	 $6 = $enc_url;
	 $tobool7 = ($6|0)!=(0|0);
	 if ($tobool7) {
	  $7 = $c$addr;
	  $8 = $playlist$addr;
	  $9 = $enc_url;
	  $call10 = (_xmmsc_playlist_add_encoded($7,$8,$9)|0);
	  $res = $call10;
	  $10 = $enc_url;
	  _free($10);
	  $11 = $res;
	  $retval = $11;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 } else {
	  $retval = 0;
	  $12 = $retval;
	  STACKTOP = sp;return ($12|0);
	 }
	 return 0|0;
	}
	function _xmmsc_playlist_radd($c,$playlist,$url) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $enc_url = 0, $ipc = 0, $playlist$addr = 0, $res = 0, $retval = 0;
	 var $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $url$addr = $url;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11360;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11360;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 11360;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11128;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $4 = $url$addr;
	 $call = (_xmmsv_encode_url($4)|0);
	 $enc_url = $call;
	 $5 = $enc_url;
	 $tobool7 = ($5|0)!=(0|0);
	 if ($tobool7) {
	  $6 = $c$addr;
	  $7 = $playlist$addr;
	  $8 = $enc_url;
	  $call10 = (_xmmsc_playlist_radd_encoded($6,$7,$8)|0);
	  $res = $call10;
	  $9 = $enc_url;
	  _free($9);
	  $10 = $res;
	  $retval = $10;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 } else {
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 return 0|0;
	}
	function _xmmsc_playlist_radd_encoded($c,$playlist,$url) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call14 = 0, $call15 = 0, $call16 = 0, $call17 = 0, $call18 = 0, $call19 = 0, $call20 = 0, $cmp = 0;
	 var $ipc = 0, $playlist$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp + 32|0;
	 $vararg_buffer10 = sp + 16|0;
	 $vararg_buffer6 = sp + 24|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $url$addr = $url;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11384;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11384;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 11384;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11128;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $4 = $url$addr;
	 $call = (__xmmsc_medialib_verify_url($4)|0);
	 $tobool7 = ($call|0)!=(0);
	 if (!($tobool7)) {
	  HEAP32[$vararg_buffer10>>2] = 11384;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 11176;
	  _xmmsc_log(0,2,10568,$vararg_buffer10);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $5 = $playlist$addr;
	 $cmp = ($5|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $6 = $c$addr;
	 $7 = $playlist$addr;
	 $call14 = (_xmmsv_new_string($7)|0);
	 $call15 = (___xmmsv_null_to_none397($call14)|0);
	 $call16 = (___xmmsv_identity_xmmsv396($call15)|0);
	 $8 = $url$addr;
	 $call17 = (_xmmsv_new_string($8)|0);
	 $call18 = (___xmmsv_null_to_none397($call17)|0);
	 $call19 = (___xmmsv_identity_xmmsv396($call18)|0);
	 HEAP32[$vararg_buffer14>>2] = $call16;
	 $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	 HEAP32[$vararg_ptr17>>2] = $call19;
	 $vararg_ptr18 = (($vararg_buffer14) + 8|0);
	 HEAP32[$vararg_ptr18>>2] = 0;
	 $call20 = (_xmmsc_send_cmd($6,2,45,$vararg_buffer14)|0);
	 $retval = $call20;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsc_playlist_add_args($c,$playlist,$url,$nargs,$args) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $url = $url|0;
	 $nargs = $nargs|0;
	 $args = $args|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args$addr = 0, $c$addr = 0, $call = 0, $call10 = 0, $enc_url = 0, $ipc = 0;
	 var $nargs$addr = 0, $playlist$addr = 0, $res = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $url$addr = $url;
	 $nargs$addr = $nargs;
	 $args$addr = $args;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11416;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11416;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 11416;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11128;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 $4 = $url$addr;
	 $5 = $nargs$addr;
	 $6 = $args$addr;
	 $call = (__xmmsc_medialib_encode_url_old($4,$5,$6)|0);
	 $enc_url = $call;
	 $7 = $enc_url;
	 $tobool7 = ($7|0)!=(0|0);
	 if ($tobool7) {
	  $8 = $c$addr;
	  $9 = $playlist$addr;
	  $10 = $enc_url;
	  $call10 = (_xmmsc_playlist_add_encoded($8,$9,$10)|0);
	  $res = $call10;
	  $11 = $enc_url;
	  _free($11);
	  $12 = $res;
	  $retval = $12;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 } else {
	  $retval = 0;
	  $13 = $retval;
	  STACKTOP = sp;return ($13|0);
	 }
	 return 0|0;
	}
	function _xmmsc_playlist_add_encoded($c,$playlist,$url) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call14 = 0, $call15 = 0, $call16 = 0, $call17 = 0, $call18 = 0, $call19 = 0, $call20 = 0, $cmp = 0;
	 var $ipc = 0, $playlist$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp + 32|0;
	 $vararg_buffer10 = sp + 16|0;
	 $vararg_buffer6 = sp + 24|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $url$addr = $url;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11464;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11464;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 11464;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 11128;
	  _xmmsc_log(0,2,10568,$vararg_buffer6);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $4 = $url$addr;
	 $call = (__xmmsc_medialib_verify_url($4)|0);
	 $tobool7 = ($call|0)!=(0);
	 if (!($tobool7)) {
	  HEAP32[$vararg_buffer10>>2] = 11464;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 11176;
	  _xmmsc_log(0,2,10568,$vararg_buffer10);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $5 = $playlist$addr;
	 $cmp = ($5|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $6 = $c$addr;
	 $7 = $playlist$addr;
	 $call14 = (_xmmsv_new_string($7)|0);
	 $call15 = (___xmmsv_null_to_none397($call14)|0);
	 $call16 = (___xmmsv_identity_xmmsv396($call15)|0);
	 $8 = $url$addr;
	 $call17 = (_xmmsv_new_string($8)|0);
	 $call18 = (___xmmsv_null_to_none397($call17)|0);
	 $call19 = (___xmmsv_identity_xmmsv396($call18)|0);
	 HEAP32[$vararg_buffer14>>2] = $call16;
	 $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	 HEAP32[$vararg_ptr17>>2] = $call19;
	 $vararg_ptr18 = (($vararg_buffer14) + 8|0);
	 HEAP32[$vararg_ptr18>>2] = 0;
	 $call20 = (_xmmsc_send_cmd($6,2,35,$vararg_buffer14)|0);
	 $retval = $call20;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsc_playlist_add_idlist($c,$playlist,$coll) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $coll = $coll|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $coll$addr = 0, $ipc = 0, $playlist$addr = 0, $retval = 0;
	 var $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $coll$addr = $coll;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11496;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11496;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $4 = $c$addr;
	 $5 = $playlist$addr;
	 $call = (_xmmsv_new_string($5)|0);
	 $call6 = (___xmmsv_null_to_none397($call)|0);
	 $call7 = (___xmmsv_identity_xmmsv396($call6)|0);
	 $6 = $coll$addr;
	 $call8 = (_xmmsv_ref($6)|0);
	 $call9 = (___xmmsv_identity_xmmsv396($call8)|0);
	 HEAP32[$vararg_buffer6>>2] = $call7;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call9;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = 0;
	 $call10 = (_xmmsc_send_cmd($4,2,36,$vararg_buffer6)|0);
	 $retval = $call10;
	 $7 = $retval;
	 STACKTOP = sp;return ($7|0);
	}
	function _xmmsc_playlist_add_collection($c,$playlist,$coll,$order) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $coll = $coll|0;
	 $order = $order|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $coll$addr = 0, $ipc = 0;
	 var $order$addr = 0, $ordered = 0, $playlist$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $coll$addr = $coll;
	 $order$addr = $order;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11528;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11528;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $4 = $coll$addr;
	 $5 = $order$addr;
	 $call = (_xmmsv_coll_add_order_operators($4,$5)|0);
	 $ordered = $call;
	 $6 = $c$addr;
	 $7 = $playlist$addr;
	 $call6 = (_xmmsv_new_string($7)|0);
	 $call7 = (___xmmsv_null_to_none397($call6)|0);
	 $call8 = (___xmmsv_identity_xmmsv396($call7)|0);
	 $8 = $ordered;
	 $call9 = (___xmmsv_identity_xmmsv396($8)|0);
	 HEAP32[$vararg_buffer6>>2] = $call8;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call9;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = 0;
	 $call10 = (_xmmsc_send_cmd($6,2,36,$vararg_buffer6)|0);
	 $retval = $call10;
	 $9 = $retval;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsc_playlist_move_entry($c,$playlist,$cur_pos,$new_pos) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $cur_pos = $cur_pos|0;
	 $new_pos = $new_pos|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call12 = 0, $call13 = 0, $call6 = 0;
	 var $call7 = 0, $call9 = 0, $cmp = 0, $cur_pos$addr = 0, $ipc = 0, $new_pos$addr = 0, $playlist$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $cur_pos$addr = $cur_pos;
	 $new_pos$addr = $new_pos;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11560;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11560;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $4 = $c$addr;
	 $5 = $playlist$addr;
	 $call = (_xmmsv_new_string($5)|0);
	 $call6 = (___xmmsv_null_to_none397($call)|0);
	 $call7 = (___xmmsv_identity_xmmsv396($call6)|0);
	 $6 = $cur_pos$addr;
	 $7 = ($6|0)<(0);
	 $8 = $7 << 31 >> 31;
	 $9 = (_xmmsv_new_int($6,$8)|0);
	 $call9 = (___xmmsv_identity_xmmsv396($9)|0);
	 $10 = $new_pos$addr;
	 $11 = ($10|0)<(0);
	 $12 = $11 << 31 >> 31;
	 $13 = (_xmmsv_new_int($10,$12)|0);
	 $call12 = (___xmmsv_identity_xmmsv396($13)|0);
	 HEAP32[$vararg_buffer6>>2] = $call7;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call9;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = $call12;
	 $vararg_ptr11 = (($vararg_buffer6) + 12|0);
	 HEAP32[$vararg_ptr11>>2] = 0;
	 $call13 = (_xmmsc_send_cmd($4,2,38,$vararg_buffer6)|0);
	 $retval = $call13;
	 $14 = $retval;
	 STACKTOP = sp;return ($14|0);
	}
	function _xmmsc_playlist_remove_entry($c,$playlist,$pos) {
	 $c = $c|0;
	 $playlist = $playlist|0;
	 $pos = $pos|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call6 = 0, $call7 = 0, $call9 = 0, $cmp = 0, $ipc = 0, $playlist$addr = 0;
	 var $pos$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $playlist$addr = $playlist;
	 $pos$addr = $pos;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11592;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11592;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $playlist$addr;
	 $cmp = ($3|0)==(0|0);
	 if ($cmp) {
	  $playlist$addr = 10688;
	 }
	 $4 = $c$addr;
	 $5 = $playlist$addr;
	 $call = (_xmmsv_new_string($5)|0);
	 $call6 = (___xmmsv_null_to_none397($call)|0);
	 $call7 = (___xmmsv_identity_xmmsv396($call6)|0);
	 $6 = $pos$addr;
	 $7 = ($6|0)<(0);
	 $8 = $7 << 31 >> 31;
	 $9 = (_xmmsv_new_int($6,$8)|0);
	 $call9 = (___xmmsv_identity_xmmsv396($9)|0);
	 HEAP32[$vararg_buffer6>>2] = $call7;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = $call9;
	 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	 HEAP32[$vararg_ptr10>>2] = 0;
	 $call10 = (_xmmsc_send_cmd($4,2,37,$vararg_buffer6)|0);
	 $retval = $call10;
	 $10 = $retval;
	 STACKTOP = sp;return ($10|0);
	}
	function _xmmsc_broadcast_playlist_changed($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11624;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11624;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,0)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_broadcast_playlist_current_pos($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11664;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11664;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,6)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_playlist_set_next($c,$pos) {
	 $c = $c|0;
	 $pos = $pos|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c$addr = 0, $call4 = 0, $call5 = 0, $ipc = 0, $pos$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $pos$addr = $pos;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11704;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11704;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $c$addr;
	 $4 = $pos$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv396($7)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call5 = (_xmmsc_send_cmd($3,2,33,$vararg_buffer6)|0);
	 $retval = $call5;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmmsc_playlist_set_next_rel($c,$pos) {
	 $c = $c|0;
	 $pos = $pos|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c$addr = 0, $call4 = 0, $call5 = 0, $ipc = 0, $pos$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $pos$addr = $pos;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11728;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11728;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $8 = $retval;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $c$addr;
	 $4 = $pos$addr;
	 $5 = ($4|0)<(0);
	 $6 = $5 << 31 >> 31;
	 $7 = (_xmmsv_new_int($4,$6)|0);
	 $call4 = (___xmmsv_identity_xmmsv396($7)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call5 = (_xmmsc_send_cmd($3,2,34,$vararg_buffer6)|0);
	 $retval = $call5;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmmsc_playlist_load($c,$name) {
	 $c = $c|0;
	 $name = $name|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c$addr = 0, $call = 0, $call4 = 0, $call5 = 0, $call6 = 0, $ipc = 0, $name$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $name$addr = $name;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11760;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11760;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $3 = $c$addr;
	 $4 = $name$addr;
	 $call = (_xmmsv_new_string($4)|0);
	 $call4 = (___xmmsv_null_to_none397($call)|0);
	 $call5 = (___xmmsv_identity_xmmsv396($call4)|0);
	 HEAP32[$vararg_buffer6>>2] = $call5;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call6 = (_xmmsc_send_cmd($3,2,44,$vararg_buffer6)|0);
	 $retval = $call6;
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsc_broadcast_playlist_loaded($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11784;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 10624;
	  _xmmsc_log(0,2,10568,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 11784;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 10648;
	  _xmmsc_log(0,2,10568,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,7)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_result_ref($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $inc = 0, $ref = 0, $res$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $res$addr;
	  $ref = (($1) + 4|0);
	  $2 = HEAP32[$ref>>2]|0;
	  $inc = (($2) + 1)|0;
	  HEAP32[$ref>>2] = $inc;
	  $3 = $res$addr;
	  $retval = $3;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 11864;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 142;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_get_class($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $res$addr = 0, $retval = 0, $tobool = 0, $type = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $res$addr;
	  $type = (($1) + 8|0);
	  $2 = HEAP32[$type>>2]|0;
	  $retval = $2;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 11928;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 177;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_disconnect($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $res$addr = 0, $tobool = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 11952;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 189;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $res$addr;
	 $type = (($1) + 8|0);
	 $2 = HEAP32[$type>>2]|0;
	 if ((($2|0) == 0) | (($2|0) == 2) | (($2|0) == 1)) {
	  $3 = $res$addr;
	  _xmmsc_result_notifier_delete_all($3);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 11952;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12000;
	  _xmmsc_log(0,2,11976,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_result_notifier_delete_all($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $n = 0, $next = 0, $next2 = 0, $notifiers = 0, $notifiers3 = 0, $res$addr = 0, $tobool = 0, $tobool1 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $0 = $res$addr;
	 $notifiers = (($0) + 12|0);
	 $1 = HEAP32[$notifiers>>2]|0;
	 $n = $1;
	 while(1) {
	  $2 = $n;
	  $tobool = ($2|0)!=(0|0);
	  if (!($tobool)) {
	   break;
	  }
	  $3 = $n;
	  $tobool1 = ($3|0)!=(0|0);
	  if ($tobool1) {
	   $4 = $n;
	   $next2 = (($4) + 4|0);
	   $5 = HEAP32[$next2>>2]|0;
	   $cond = $5;
	  } else {
	   $cond = 0;
	  }
	  $next = $cond;
	  $6 = $res$addr;
	  $7 = $n;
	  _xmmsc_result_notifier_delete($6,$7);
	  $8 = $next;
	  $n = $8;
	 }
	 $9 = $res$addr;
	 $notifiers3 = (($9) + 12|0);
	 HEAP32[$notifiers3>>2] = 0;
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_cookie_get($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cookie = 0, $res$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $res$addr;
	  $cookie = (($1) + 24|0);
	  $2 = HEAP32[$cookie>>2]|0;
	  $retval = $2;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12024;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 255;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_c2c_set($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $is_c2c = 0, $res$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $res$addr;
	  $is_c2c = (($1) + 21|0);
	  HEAP8[$is_c2c>>0] = 1;
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12048;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 266;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_result_visc_set($res,$visc) {
	 $res = $res|0;
	 $visc = $visc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $res$addr = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $visc$addr = 0, $visc1 = 0, $visc5 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $visc$addr = $visc;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12072;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 274;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $res$addr;
	 $visc1 = (($1) + 36|0);
	 $2 = HEAP32[$visc1>>2]|0;
	 $tobool2 = ($2|0)!=(0|0);
	 if ($tobool2) {
	  HEAP32[$vararg_buffer4>>2] = 12096;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12072;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 275;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  STACKTOP = sp;return;
	 } else {
	  $3 = $visc$addr;
	  $4 = $res$addr;
	  $visc5 = (($4) + 36|0);
	  HEAP32[$visc5>>2] = $3;
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_result_visc_get($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $res$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $visc = 0, $visc4 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12112;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 282;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $res$addr;
	 $visc = (($1) + 36|0);
	 $2 = HEAP32[$visc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if ($tobool1) {
	  $3 = $res$addr;
	  $visc4 = (($3) + 36|0);
	  $4 = HEAP32[$visc4>>2]|0;
	  $retval = $4;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 12136;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12112;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 283;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_get_connection($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $res$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12152;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 290;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $res$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if ($tobool1) {
	  $3 = $res$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $retval = $4;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 12184;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12152;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 291;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_unref($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp = 0, $cmp5 = 0, $dec = 0, $ref = 0, $ref3 = 0, $ref4 = 0, $res$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
	 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12192;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 305;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $res$addr;
	 $ref = (($1) + 4|0);
	 $2 = HEAP32[$ref>>2]|0;
	 $cmp = ($2|0)<(1);
	 if ($cmp) {
	  HEAP32[$vararg_buffer4>>2] = 12192;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12216;
	  _xmmsc_log(0,2,11976,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $3 = $res$addr;
	 $ref3 = (($3) + 4|0);
	 $4 = HEAP32[$ref3>>2]|0;
	 $dec = (($4) + -1)|0;
	 HEAP32[$ref3>>2] = $dec;
	 $5 = $res$addr;
	 $ref4 = (($5) + 4|0);
	 $6 = HEAP32[$ref4>>2]|0;
	 $cmp5 = ($6|0)==(0);
	 if (!($cmp5)) {
	  STACKTOP = sp;return;
	 }
	 $7 = $res$addr;
	 _xmmsc_result_free($7);
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_free($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $data7 = 0, $ipc = 0, $ipc3 = 0, $res$addr = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0;
	 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12768;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 154;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $res$addr;
	 $ipc = (($1) + 16|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if ($tobool1) {
	  $3 = $res$addr;
	  $ipc3 = (($3) + 16|0);
	  $4 = HEAP32[$ipc3>>2]|0;
	  $5 = $res$addr;
	  _xmmsc_ipc_result_unregister($4,$5);
	 }
	 $6 = $res$addr;
	 $data = (($6) + 32|0);
	 $7 = HEAP32[$data>>2]|0;
	 $tobool5 = ($7|0)!=(0|0);
	 if ($tobool5) {
	  $8 = $res$addr;
	  $data7 = (($8) + 32|0);
	  $9 = HEAP32[$data7>>2]|0;
	  _xmmsv_unref($9);
	 }
	 $10 = $res$addr;
	 _xmmsc_result_notifier_delete_all($10);
	 $11 = $res$addr;
	 _free($11);
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_notifier_set_default($res,$func,$user_data) {
	 $res = $res|0;
	 $func = $func|0;
	 $user_data = $user_data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $func$addr = 0, $res$addr = 0, $user_data$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $func$addr = $func;
	 $user_data$addr = $user_data;
	 $0 = $res$addr;
	 $1 = $func$addr;
	 $2 = $user_data$addr;
	 _xmmsc_result_notifier_set_default_full($0,$1,$2,0);
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_notifier_set_default_full($res,$func,$user_data,$free_func) {
	 $res = $res|0;
	 $func = $func|0;
	 $user_data = $user_data|0;
	 $free_func = $free_func|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cb = 0, $free_func$addr = 0, $func$addr = 0, $res$addr = 0, $tobool = 0, $tobool1 = 0, $user_data$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
	 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer = sp + 16|0;
	 $res$addr = $res;
	 $func$addr = $func;
	 $user_data$addr = $user_data;
	 $free_func$addr = $free_func;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12240;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 366;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $func$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $func$addr;
	  $3 = $user_data$addr;
	  $4 = $free_func$addr;
	  $call = (_xmmsc_result_callback_new_default($2,$3,$4)|0);
	  $cb = $call;
	  $5 = $res$addr;
	  $6 = $cb;
	  _xmmsc_result_notifier_add($5,$6);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 12280;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12240;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 366;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_result_callback_new_default($f,$udata,$free_f) {
	 $f = $f|0;
	 $udata = $udata|0;
	 $free_f = $free_f|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cb = 0, $f$addr = 0, $free_f$addr = 0, $free_func = 0, $func = 0, $retval = 0, $tobool = 0, $udata$addr = 0, $user_data = 0;
	 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $f$addr = $f;
	 $udata$addr = $udata;
	 $free_f$addr = $free_f;
	 $call = (_calloc(1,16)|0);
	 $cb = $call;
	 $0 = $cb;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $cb;
	  HEAP32[$1>>2] = 0;
	  $2 = $udata$addr;
	  $3 = $cb;
	  $user_data = (($3) + 8|0);
	  HEAP32[$user_data>>2] = $2;
	  $4 = $free_f$addr;
	  $5 = $cb;
	  $free_func = (($5) + 12|0);
	  HEAP32[$free_func>>2] = $4;
	  $6 = $f$addr;
	  $7 = $cb;
	  $func = (($7) + 4|0);
	  HEAP32[$func>>2] = $6;
	  $8 = $cb;
	  $retval = $8;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 12632;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 11888;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 661;
	  _xmmsc_log(0,2,12512,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_notifier_add($res,$cb) {
	 $res = $res|0;
	 $cb = $cb|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call1 = 0, $cb$addr = 0, $notifiers = 0, $notifiers2 = 0, $res$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $cb$addr = $cb;
	 $0 = $res$addr;
	 (_xmmsc_result_ref($0)|0);
	 $1 = $res$addr;
	 $notifiers = (($1) + 12|0);
	 $2 = HEAP32[$notifiers>>2]|0;
	 $3 = $cb$addr;
	 $call1 = (_x_list_append($2,$3)|0);
	 $4 = $res$addr;
	 $notifiers2 = (($4) + 12|0);
	 HEAP32[$notifiers2>>2] = $call1;
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_notifier_set_raw($res,$func,$user_data) {
	 $res = $res|0;
	 $func = $func|0;
	 $user_data = $user_data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $func$addr = 0, $res$addr = 0, $user_data$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $func$addr = $func;
	 $user_data$addr = $user_data;
	 $0 = $res$addr;
	 $1 = $func$addr;
	 $2 = $user_data$addr;
	 _xmmsc_result_notifier_set_raw_full($0,$1,$2,0);
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_notifier_set_raw_full($res,$func,$user_data,$free_func) {
	 $res = $res|0;
	 $func = $func|0;
	 $user_data = $user_data|0;
	 $free_func = $free_func|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cb = 0, $free_func$addr = 0, $func$addr = 0, $res$addr = 0, $tobool = 0, $tobool1 = 0, $user_data$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
	 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer = sp + 16|0;
	 $res$addr = $res;
	 $func$addr = $func;
	 $user_data$addr = $user_data;
	 $free_func$addr = $free_func;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12288;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 395;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $func$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $func$addr;
	  $3 = $user_data$addr;
	  $4 = $free_func$addr;
	  $call = (_xmmsc_result_callback_new_raw($2,$3,$4)|0);
	  $cb = $call;
	  $5 = $res$addr;
	  $6 = $cb;
	  _xmmsc_result_notifier_add($5,$6);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 12280;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12288;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 395;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_result_callback_new_raw($f,$udata,$free_f) {
	 $f = $f|0;
	 $udata = $udata|0;
	 $free_f = $free_f|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cb = 0, $f$addr = 0, $free_f$addr = 0, $free_func = 0, $func = 0, $retval = 0, $tobool = 0, $udata$addr = 0, $user_data = 0;
	 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $f$addr = $f;
	 $udata$addr = $udata;
	 $free_f$addr = $free_f;
	 $call = (_calloc(1,16)|0);
	 $cb = $call;
	 $0 = $cb;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $cb;
	  HEAP32[$1>>2] = 1;
	  $2 = $udata$addr;
	  $3 = $cb;
	  $user_data = (($3) + 8|0);
	  HEAP32[$user_data>>2] = $2;
	  $4 = $free_f$addr;
	  $5 = $cb;
	  $free_func = (($5) + 12|0);
	  HEAP32[$free_func>>2] = $4;
	  $6 = $f$addr;
	  $7 = $cb;
	  $func = (($7) + 4|0);
	  HEAP32[$func>>2] = $6;
	  $8 = $cb;
	  $retval = $8;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 12600;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 11888;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 662;
	  _xmmsc_log(0,2,12512,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_notifier_set_c2c($res,$func,$user_data) {
	 $res = $res|0;
	 $func = $func|0;
	 $user_data = $user_data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $func$addr = 0, $res$addr = 0, $user_data$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $func$addr = $func;
	 $user_data$addr = $user_data;
	 $0 = $res$addr;
	 $1 = $func$addr;
	 $2 = $user_data$addr;
	 _xmmsc_result_notifier_set_c2c_full($0,$1,$2,0);
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_notifier_set_c2c_full($res,$func,$user_data,$free_func) {
	 $res = $res|0;
	 $func = $func|0;
	 $user_data = $user_data|0;
	 $free_func = $free_func|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cb = 0, $free_func$addr = 0, $func$addr = 0, $res$addr = 0, $tobool = 0, $tobool1 = 0, $user_data$addr = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
	 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp;
	 $vararg_buffer = sp + 16|0;
	 $res$addr = $res;
	 $func$addr = $func;
	 $user_data$addr = $user_data;
	 $free_func$addr = $free_func;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12328;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 425;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $func$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if ($tobool1) {
	  $2 = $func$addr;
	  $3 = $user_data$addr;
	  $4 = $free_func$addr;
	  $call = (_xmmsc_result_callback_new_c2c($2,$3,$4)|0);
	  $cb = $call;
	  $5 = $res$addr;
	  $6 = $cb;
	  _xmmsc_result_notifier_add($5,$6);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 12280;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12328;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 425;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_result_callback_new_c2c($f,$udata,$free_f) {
	 $f = $f|0;
	 $udata = $udata|0;
	 $free_f = $free_f|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cb = 0, $f$addr = 0, $free_f$addr = 0, $free_func = 0, $func = 0, $retval = 0, $tobool = 0, $udata$addr = 0, $user_data = 0;
	 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $f$addr = $f;
	 $udata$addr = $udata;
	 $free_f$addr = $free_f;
	 $call = (_calloc(1,16)|0);
	 $cb = $call;
	 $0 = $cb;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $cb;
	  HEAP32[$1>>2] = 2;
	  $2 = $udata$addr;
	  $3 = $cb;
	  $user_data = (($3) + 8|0);
	  HEAP32[$user_data>>2] = $2;
	  $4 = $free_f$addr;
	  $5 = $cb;
	  $free_func = (($5) + 12|0);
	  HEAP32[$free_func>>2] = $4;
	  $6 = $f$addr;
	  $7 = $cb;
	  $func = (($7) + 4|0);
	  HEAP32[$func>>2] = $6;
	  $8 = $cb;
	  $retval = $8;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 12568;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 11888;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 663;
	  _xmmsc_log(0,2,12512,$vararg_buffer);
	  $retval = 0;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_wait($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $data = 0, $err = 0, $ipc = 0, $ipc5 = 0, $ipc7 = 0;
	 var $lnot = 0, $parsed = 0, $res$addr = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool6 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $err = 0;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12368;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 437;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $res$addr;
	 $ipc = (($1) + 16|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 12392;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12368;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 438;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 while(1) {
	  $3 = $res$addr;
	  $parsed = (($3) + 20|0);
	  $4 = HEAP8[$parsed>>0]|0;
	  $tobool4 = $4&1;
	  if ($tobool4) {
	   $12 = 0;
	  } else {
	   $5 = $res$addr;
	   $ipc5 = (($5) + 16|0);
	   $6 = HEAP32[$ipc5>>2]|0;
	   $call = (_xmmsc_ipc_error_get($6)|0);
	   $err = $call;
	   $tobool6 = ($call|0)!=(0|0);
	   $lnot = $tobool6 ^ 1;
	   $12 = $lnot;
	  }
	  if (!($12)) {
	   break;
	  }
	  $7 = $res$addr;
	  $ipc7 = (($7) + 16|0);
	  $8 = HEAP32[$ipc7>>2]|0;
	  _xmmsc_ipc_wait_for_event($8,5);
	 }
	 $9 = $err;
	 $tobool8 = ($9|0)!=(0|0);
	 if (!($tobool8)) {
	  STACKTOP = sp;return;
	 }
	 $10 = $err;
	 $call10 = (_xmmsv_new_error($10)|0);
	 $11 = $res$addr;
	 $data = (($11) + 32|0);
	 HEAP32[$data>>2] = $call10;
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_get_value($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $data = 0, $parsed = 0, $res$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12408;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 467;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $res$addr;
	 $parsed = (($1) + 20|0);
	 $2 = HEAP8[$parsed>>0]|0;
	 $tobool1 = $2&1;
	 if ($tobool1) {
	  $3 = $res$addr;
	  $data = (($3) + 32|0);
	  $4 = HEAP32[$data>>2]|0;
	  $retval = $4;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 } else {
	  HEAP32[$vararg_buffer4>>2] = 12432;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12408;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 468;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  $retval = 0;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_seterror($res,$errstr) {
	 $res = $res|0;
	 $errstr = $errstr|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $data = 0, $data1 = 0, $data2 = 0, $errstr$addr = 0, $res$addr = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $errstr$addr = $errstr;
	 $0 = $res$addr;
	 $data = (($0) + 32|0);
	 $1 = HEAP32[$data>>2]|0;
	 $tobool = ($1|0)!=(0|0);
	 if ($tobool) {
	  $2 = $res$addr;
	  $data1 = (($2) + 32|0);
	  $3 = HEAP32[$data1>>2]|0;
	  _xmmsv_unref($3);
	 }
	 $4 = $errstr$addr;
	 $call = (_xmmsv_new_error($4)|0);
	 $5 = $res$addr;
	 $data2 = (($5) + 32|0);
	 HEAP32[$data2>>2] = $call;
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_restartable($res,$signalid) {
	 $res = $res|0;
	 $signalid = $signalid|0;
	 var $0 = 0, $1 = 0, $2 = 0, $res$addr = 0, $restart_signal = 0, $signalid$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $signalid$addr = $signalid;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $signalid$addr;
	  $2 = $res$addr;
	  $restart_signal = (($2) + 28|0);
	  HEAP32[$restart_signal>>2] = $1;
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12448;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 492;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_result_run($res,$msg) {
	 $res = $res|0;
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $cb = 0, $cmp = 0;
	 var $cmp17 = 0, $cmp21 = 0, $cond = 0, $data25 = 0, $data26 = 0, $is_c2c = 0, $keep = 0, $msg$addr = 0, $n = 0, $next = 0, $next9 = 0, $notifiers = 0, $notifiers14 = 0, $res$addr = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool15 = 0, $tobool23 = 0, $tobool7 = 0;
	 var $tobool8 = 0, $type = 0, $type16 = 0, $type20 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $msg$addr = $msg;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12480;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 545;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $msg$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 12504;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12480;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 546;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $2 = $res$addr;
	 $3 = $msg$addr;
	 $call = (_xmmsc_result_parse_msg($2,$3)|0);
	 if (!($call)) {
	  $4 = $msg$addr;
	  _xmms_ipc_msg_destroy($4);
	  STACKTOP = sp;return;
	 }
	 $5 = $msg$addr;
	 _xmms_ipc_msg_destroy($5);
	 $6 = $res$addr;
	 (_xmmsc_result_ref($6)|0);
	 $7 = $res$addr;
	 $notifiers = (($7) + 12|0);
	 $8 = HEAP32[$notifiers>>2]|0;
	 $n = $8;
	 while(1) {
	  $9 = $n;
	  $tobool7 = ($9|0)!=(0|0);
	  if (!($tobool7)) {
	   break;
	  }
	  $10 = $n;
	  $tobool8 = ($10|0)!=(0|0);
	  if ($tobool8) {
	   $11 = $n;
	   $next9 = (($11) + 4|0);
	   $12 = HEAP32[$next9>>2]|0;
	   $cond = $12;
	  } else {
	   $cond = 0;
	  }
	  $next = $cond;
	  $13 = $n;
	  $14 = HEAP32[$13>>2]|0;
	  $cb = $14;
	  $15 = $res$addr;
	  $16 = $cb;
	  $call10 = (_xmmsc_result_run_callback($15,$16)|0);
	  $keep = $call10;
	  $17 = $keep;
	  $tobool11 = ($17|0)!=(0);
	  if ($tobool11) {
	   $18 = $res$addr;
	   $type = (($18) + 8|0);
	   $19 = HEAP32[$type>>2]|0;
	   $cmp = ($19|0)==(0);
	   if ($cmp) {
	    label = 14;
	   }
	  } else {
	   label = 14;
	  }
	  if ((label|0) == 14) {
	   label = 0;
	   $20 = $res$addr;
	   $21 = $n;
	   _xmmsc_result_notifier_delete($20,$21);
	  }
	  $22 = $next;
	  $n = $22;
	 }
	 $23 = $res$addr;
	 $notifiers14 = (($23) + 12|0);
	 $24 = HEAP32[$notifiers14>>2]|0;
	 $tobool15 = ($24|0)!=(0|0);
	 if ($tobool15) {
	  $25 = $res$addr;
	  $type16 = (($25) + 8|0);
	  $26 = HEAP32[$type16>>2]|0;
	  $cmp17 = ($26|0)==(1);
	  if ($cmp17) {
	   $27 = $res$addr;
	   _xmmsc_result_restart($27);
	  }
	 }
	 $28 = $res$addr;
	 $type20 = (($28) + 8|0);
	 $29 = HEAP32[$type20>>2]|0;
	 $cmp21 = ($29|0)!=(0);
	 if ($cmp21) {
	  $30 = $res$addr;
	  $is_c2c = (($30) + 21|0);
	  $31 = HEAP8[$is_c2c>>0]|0;
	  $tobool23 = $31&1;
	  if (!($tobool23)) {
	   $32 = $res$addr;
	   $data25 = (($32) + 32|0);
	   $33 = HEAP32[$data25>>2]|0;
	   _xmmsv_unref($33);
	   $34 = $res$addr;
	   $data26 = (($34) + 32|0);
	   HEAP32[$data26>>2] = 0;
	  }
	 }
	 $35 = $res$addr;
	 _xmmsc_result_unref($35);
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_parse_msg($res,$msg) {
	 $res = $res|0;
	 $msg = $msg|0;
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call3 = 0;
	 var $call8 = 0, $cmp = 0, $data = 0, $error = 0, $errstr = 0, $msg$addr = 0, $parsed = 0, $parsed10 = 0, $res$addr = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $errstr = sp + 4|0;
	 $error = sp;
	 $res$addr = $res;
	 $msg$addr = $msg;
	 $0 = $msg$addr;
	 $call = (_xmms_ipc_msg_get_cmd($0)|0);
	 $cmp = ($call|0)==(1);
	 if (!($cmp)) {
	  $9 = $msg$addr;
	  $10 = $res$addr;
	  $data = (($10) + 32|0);
	  $call8 = (_xmms_ipc_msg_get_value($9,$data)|0);
	  if ($call8) {
	   $11 = $res$addr;
	   $parsed10 = (($11) + 20|0);
	   HEAP8[$parsed10>>0] = 1;
	   $$expand_i1_val2 = 1;
	   $retval = $$expand_i1_val2;
	   $$pre_trunc = $retval;
	   $12 = $$pre_trunc&1;
	   STACKTOP = sp;return ($12|0);
	  } else {
	   $$expand_i1_val4 = 0;
	   $retval = $$expand_i1_val4;
	   $$pre_trunc = $retval;
	   $12 = $$pre_trunc&1;
	   STACKTOP = sp;return ($12|0);
	  }
	 }
	 $1 = $msg$addr;
	 $call1 = (_xmms_ipc_msg_get_value($1,$error)|0);
	 if ($call1) {
	  $3 = HEAP32[$error>>2]|0;
	  $call3 = (_xmmsv_get_error($3,$errstr)|0);
	  $tobool = ($call3|0)!=(0);
	  if ($tobool) {
	   $5 = $res$addr;
	   $6 = HEAP32[$errstr>>2]|0;
	   _xmmsc_result_seterror($5,$6);
	  } else {
	   $4 = $res$addr;
	   _xmmsc_result_seterror($4,12744);
	  }
	  $7 = HEAP32[$error>>2]|0;
	  _xmmsv_unref($7);
	 } else {
	  $2 = $res$addr;
	  _xmmsc_result_seterror($2,12728);
	 }
	 $8 = $res$addr;
	 $parsed = (($8) + 20|0);
	 HEAP8[$parsed>>0] = 1;
	 $$expand_i1_val = 1;
	 $retval = $$expand_i1_val;
	 $$pre_trunc = $retval;
	 $12 = $$pre_trunc&1;
	 STACKTOP = sp;return ($12|0);
	}
	function _xmmsc_result_run_callback($res,$cb) {
	 $res = $res|0;
	 $cb = $cb|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
	 var $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call16 = 0, $call18 = 0, $call4 = 0, $call5 = 0, $cb$addr = 0, $cmp = 0, $cmp7 = 0, $data = 0, $data15 = 0, $data3 = 0, $data9 = 0, $func = 0, $is_c2c = 0, $res$addr = 0, $ret = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool13 = 0, $user_data = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $cb$addr = $cb;
	 $val = 0;
	 $0 = $res$addr;
	 $is_c2c = (($0) + 21|0);
	 $1 = HEAP8[$is_c2c>>0]|0;
	 $tobool = $1&1;
	 if ($tobool) {
	  $2 = $res$addr;
	  $data = (($2) + 32|0);
	  $3 = HEAP32[$data>>2]|0;
	  $call = (_xmmsv_is_error($3)|0);
	  $tobool1 = ($call|0)!=(0);
	  if ($tobool1) {
	   label = 6;
	  } else {
	   $4 = $cb$addr;
	   $5 = HEAP32[$4>>2]|0;
	   $cmp = ($5|0)==(0);
	   if ($cmp) {
	    $6 = $res$addr;
	    $data3 = (($6) + 32|0);
	    $7 = HEAP32[$data3>>2]|0;
	    $call4 = (_xmmsv_c2c_message_get_payload(($7|0))|0);
	    $call5 = (_xmmsv_ref($call4)|0);
	    $val = $call5;
	   }
	  }
	 } else {
	  label = 6;
	 }
	 if ((label|0) == 6) {
	  $8 = $cb$addr;
	  $9 = HEAP32[$8>>2]|0;
	  $cmp7 = ($9|0)==(2);
	  if ($cmp7) {
	   $10 = $res$addr;
	   $data9 = (($10) + 32|0);
	   $11 = HEAP32[$data9>>2]|0;
	   $call10 = (_xmmsv_c2c_message_format(0,0,0,($11|0))|0);
	   $val = $call10;
	  }
	 }
	 $12 = $val;
	 $tobool13 = ($12|0)!=(0|0);
	 if (!($tobool13)) {
	  $13 = $res$addr;
	  $data15 = (($13) + 32|0);
	  $14 = HEAP32[$data15>>2]|0;
	  $call16 = (_xmmsv_ref($14)|0);
	  $val = $call16;
	 }
	 $15 = $cb$addr;
	 $func = (($15) + 4|0);
	 $16 = HEAP32[$func>>2]|0;
	 $17 = $val;
	 $18 = $cb$addr;
	 $user_data = (($18) + 8|0);
	 $19 = HEAP32[$user_data>>2]|0;
	 $call18 = (FUNCTION_TABLE_iii[$16 & 31]($17,$19)|0);
	 $ret = $call18;
	 $20 = $val;
	 _xmmsv_unref($20);
	 $21 = $ret;
	 STACKTOP = sp;return ($21|0);
	}
	function _xmmsc_result_notifier_delete($res,$node) {
	 $res = $res|0;
	 $node = $node|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cb = 0, $free_func = 0, $free_func1 = 0, $node$addr = 0, $res$addr = 0, $tobool = 0, $user_data = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $node$addr = $node;
	 $0 = $node$addr;
	 $1 = HEAP32[$0>>2]|0;
	 $cb = $1;
	 $2 = $cb;
	 $free_func = (($2) + 12|0);
	 $3 = HEAP32[$free_func>>2]|0;
	 $tobool = ($3|0)!=(0|0);
	 if ($tobool) {
	  $4 = $cb;
	  $free_func1 = (($4) + 12|0);
	  $5 = HEAP32[$free_func1>>2]|0;
	  $6 = $cb;
	  $user_data = (($6) + 8|0);
	  $7 = HEAP32[$user_data>>2]|0;
	  FUNCTION_TABLE_vi[$5 & 15]($7);
	 }
	 $8 = $res$addr;
	 $9 = $node$addr;
	 _xmmsc_result_notifier_remove($8,$9);
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_restart($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cookie = 0, $res$addr = 0, $restart_signal = 0, $tobool = 0, $tobool1 = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
	 var $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 11856;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12672;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 11888;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 205;
	  _xmmsc_log(0,2,11816,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $res$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer4>>2] = 12184;
	  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
	  HEAP32[$vararg_ptr7>>2] = 12672;
	  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
	  HEAP32[$vararg_ptr8>>2] = 11888;
	  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
	  HEAP32[$vararg_ptr9>>2] = 206;
	  _xmmsc_log(0,2,11816,$vararg_buffer4);
	  STACKTOP = sp;return;
	 }
	 $3 = $res$addr;
	 $type = (($3) + 8|0);
	 $4 = HEAP32[$type>>2]|0;
	 $cmp = ($4|0)!=(1);
	 if ($cmp) {
	  HEAP32[$vararg_buffer10>>2] = 12672;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 12696;
	  _xmmsc_log(0,2,11976,$vararg_buffer10);
	  STACKTOP = sp;return;
	 } else {
	  $5 = $res$addr;
	  $6 = HEAP32[$5>>2]|0;
	  $7 = $res$addr;
	  $restart_signal = (($7) + 28|0);
	  $8 = HEAP32[$restart_signal>>2]|0;
	  $call = (_xmmsc_write_signal_msg($6,$8)|0);
	  $9 = $res$addr;
	  $cookie = (($9) + 24|0);
	  HEAP32[$cookie>>2] = $call;
	  STACKTOP = sp;return;
	 }
	}
	function _xmmsc_result_new($c,$type,$cookie) {
	 $c = $c|0;
	 $type = $type|0;
	 $cookie = $cookie|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $cookie$addr = 0;
	 var $cookie3 = 0, $data = 0, $ipc = 0, $ipc5 = 0, $ipc6 = 0, $res = 0, $retval = 0, $tobool = 0, $type$addr = 0, $type2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $type$addr = $type;
	 $cookie$addr = $cookie;
	 $call = (_calloc(1,40)|0);
	 $res = $call;
	 $0 = $res;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $c$addr;
	  $2 = $res;
	  HEAP32[$2>>2] = $1;
	  $3 = $res;
	  $data = (($3) + 32|0);
	  HEAP32[$data>>2] = 0;
	  $4 = $type$addr;
	  $5 = $res;
	  $type2 = (($5) + 8|0);
	  HEAP32[$type2>>2] = $4;
	  $6 = $cookie$addr;
	  $7 = $res;
	  $cookie3 = (($7) + 24|0);
	  HEAP32[$cookie3>>2] = $6;
	  $8 = $res;
	  (_xmmsc_result_ref($8)|0);
	  $9 = $c$addr;
	  $ipc = (($9) + 4|0);
	  $10 = HEAP32[$ipc>>2]|0;
	  $11 = $res;
	  _xmmsc_ipc_result_register($10,$11);
	  $12 = $c$addr;
	  $ipc5 = (($12) + 4|0);
	  $13 = HEAP32[$ipc5>>2]|0;
	  $14 = $res;
	  $ipc6 = (($14) + 16|0);
	  HEAP32[$ipc6>>2] = $13;
	  $15 = $res;
	  $retval = $15;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 12544;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 11888;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 610;
	  _xmmsc_log(0,2,12512,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 return 0|0;
	}
	function _xmmsc_result_clear_weakrefs($result) {
	 $result = $result|0;
	 var $0 = 0, $1 = 0, $ipc = 0, $result$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $result$addr = $result;
	 $0 = $result$addr;
	 HEAP32[$0>>2] = 0;
	 $1 = $result$addr;
	 $ipc = (($1) + 16|0);
	 HEAP32[$ipc>>2] = 0;
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_notifier_remove($res,$node) {
	 $res = $res|0;
	 $node = $node|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $node$addr = 0, $notifiers = 0, $notifiers1 = 0, $res$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $node$addr = $node;
	 $0 = $node$addr;
	 $1 = HEAP32[$0>>2]|0;
	 _free($1);
	 $2 = $res$addr;
	 $notifiers = (($2) + 12|0);
	 $3 = HEAP32[$notifiers>>2]|0;
	 $4 = $node$addr;
	 $call = (_x_list_delete_link($3,$4)|0);
	 $5 = $res$addr;
	 $notifiers1 = (($5) + 12|0);
	 HEAP32[$notifiers1>>2] = $call;
	 $6 = $res$addr;
	 _xmmsc_result_unref($6);
	 STACKTOP = sp;return;
	}
	function _xmmsc_main_list_plugins($c,$type) {
	 $c = $c|0;
	 $type = $type|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $c$addr = 0, $call4 = 0, $call5 = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
	 var $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $type$addr = $type;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 12816;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12840;
	  _xmmsc_log(0,2,12792,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 12816;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 12864;
	  _xmmsc_log(0,2,12792,$vararg_buffer2);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $3 = $c$addr;
	 $4 = $type$addr;
	 $5 = (_xmmsv_new_int($4,0)|0);
	 $call4 = (___xmmsv_identity_xmmsv424($5)|0);
	 HEAP32[$vararg_buffer6>>2] = $call4;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call5 = (_xmmsc_send_cmd($3,1,34,$vararg_buffer6)|0);
	 $retval = $call5;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function ___xmmsv_identity_xmmsv424($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function _xmmsc_main_stats($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 12904;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12840;
	  _xmmsc_log(0,2,12792,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 12904;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 12864;
	  _xmmsc_log(0,2,12792,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,1,35)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_broadcast_mediainfo_reader_status($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 12928;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12840;
	  _xmmsc_log(0,2,12792,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 12928;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 12864;
	  _xmmsc_log(0,2,12792,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,13)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_signal_mediainfo_reader_unindexed($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 12968;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 12840;
	  _xmmsc_log(0,2,12792,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 12968;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 12864;
	  _xmmsc_log(0,2,12792,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_signal_msg($3,14)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_init($clientname) {
	 $clientname = $clientname|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $arrayidx = 0, $arrayidx5 = 0, $c = 0, $call = 0, $call16 = 0, $call21 = 0, $call6 = 0, $clientname$addr = 0, $clientname17 = 0, $cmp = 0, $cmp12 = 0, $conv = 0, $conv11 = 0, $conv8 = 0, $i = 0, $inc = 0, $j = 0, $retval = 0, $sc_root = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool18 = 0, $tobool4 = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $visc = 0, $visv = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 8|0;
	 $clientname$addr = $clientname;
	 $i = 0;
	 $0 = $clientname$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13032;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13048;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 $call = (_calloc(1,304)|0);
	 $c = $call;
	 $tobool1 = ($call|0)!=(0|0);
	 if (!($tobool1)) {
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 while(1) {
	  $1 = $i;
	  $2 = $clientname$addr;
	  $arrayidx = (($2) + ($1)|0);
	  $3 = HEAP8[$arrayidx>>0]|0;
	  $tobool4 = ($3<<24>>24)!=(0);
	  if (!($tobool4)) {
	   break;
	  }
	  $4 = $i;
	  $5 = $clientname$addr;
	  $arrayidx5 = (($5) + ($4)|0);
	  $6 = HEAP8[$arrayidx5>>0]|0;
	  $j = $6;
	  $7 = $j;
	  $conv = $7 << 24 >> 24;
	  $call6 = (_isalnum($conv)|0);
	  $tobool7 = ($call6|0)!=(0);
	  if (!($tobool7)) {
	   $8 = $j;
	   $conv8 = $8 << 24 >> 24;
	   $cmp = ($conv8|0)!=(95);
	   if ($cmp) {
	    $9 = $j;
	    $conv11 = $9 << 24 >> 24;
	    $cmp12 = ($conv11|0)!=(45);
	    if ($cmp12) {
	     label = 10;
	     break;
	    }
	   }
	  }
	  $11 = $i;
	  $inc = (($11) + 1)|0;
	  $i = $inc;
	 }
	 if ((label|0) == 10) {
	  $10 = $c;
	  _free($10);
	  HEAP32[$vararg_buffer2>>2] = 13032;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13072;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 $12 = $clientname$addr;
	 $call16 = (FUNCTION_TABLE_ii[3 & 15]($12)|0);
	 $13 = $c;
	 $clientname17 = (($13) + 16|0);
	 HEAP32[$clientname17>>2] = $call16;
	 $tobool18 = ($call16|0)!=(0|0);
	 if ($tobool18) {
	  $15 = $c;
	  $visc = (($15) + 20|0);
	  HEAP32[$visc>>2] = 0;
	  $16 = $c;
	  $visv = (($16) + 24|0);
	  HEAP32[$visv>>2] = 0;
	  $17 = $c;
	  $sc_root = (($17) + 40|0);
	  HEAP32[$sc_root>>2] = 0;
	  $18 = $c;
	  $call21 = (_xmmsc_ref($18)|0);
	  $retval = $call21;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 } else {
	  $14 = $c;
	  _free($14);
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 return 0|0;
	}
	function _xmmsc_ref($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $inc = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $c$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $inc = (($2) + 1)|0;
	  HEAP32[$1>>2] = $inc;
	  $3 = $c$addr;
	  $retval = $3;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 13360;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 return 0|0;
	}
	function _xmmsc_send_hello($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $c$addr = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $clientname = 0, $protocol_version = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $protocol_version = 23;
	 $0 = $c$addr;
	 $1 = (_xmmsv_new_int(23,0)|0);
	 $call1 = (___xmmsv_identity_xmmsv437($1)|0);
	 $2 = $c$addr;
	 $clientname = (($2) + 16|0);
	 $3 = HEAP32[$clientname>>2]|0;
	 $call2 = (_xmmsv_new_string($3)|0);
	 $call3 = (___xmmsv_null_to_none438($call2)|0);
	 $call4 = (___xmmsv_identity_xmmsv437($call3)|0);
	 HEAP32[$vararg_buffer>>2] = $call1;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAP32[$vararg_ptr1>>2] = $call4;
	 $vararg_ptr2 = (($vararg_buffer) + 8|0);
	 HEAP32[$vararg_ptr2>>2] = 0;
	 $call5 = (_xmmsc_send_cmd($0,1,32,$vararg_buffer)|0);
	 STACKTOP = sp;return ($call5|0);
	}
	function _xmmsc_send_cmd($c,$obj,$cmd,$varargs) {
	 $c = $c|0;
	 $obj = $obj|0;
	 $cmd = $cmd|0;
	 $varargs = $varargs|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $args = 0, $c$addr = 0, $call = 0, $call4 = 0, $call8 = 0, $cmd$addr = 0, $first_arg = 0, $msg = 0;
	 var $obj$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp + 16|0;
	 $c$addr = $c;
	 $obj$addr = $obj;
	 $cmd$addr = $cmd;
	 $0 = $obj$addr;
	 $1 = $cmd$addr;
	 $call = (_xmms_ipc_msg_new($0,$1)|0);
	 $msg = $call;
	 HEAP32[$ap>>2] = $varargs;
	 $arglist_current = HEAP32[$ap>>2]|0;
	 $2 = HEAP32[$arglist_current>>2]|0;
	 $arglist_next = (($arglist_current) + 4|0);
	 HEAP32[$ap>>2] = $arglist_next;
	 $first_arg = $2;
	 $3 = $first_arg;
	 $call4 = (_xmmsv_build_list_va($3,$ap)|0);
	 $args = $call4;
	 $4 = $msg;
	 $5 = $args;
	 (_xmms_ipc_msg_put_value($4,$5)|0);
	 $6 = $args;
	 _xmmsv_unref($6);
	 $7 = $c$addr;
	 $8 = $msg;
	 $call8 = (_xmmsc_send_msg($7,$8)|0);
	 STACKTOP = sp;return ($call8|0);
	}
	function ___xmmsv_identity_xmmsv437($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function ___xmmsv_null_to_none438($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $v$addr;
	  $cond = $1;
	 } else {
	  $call = (_xmmsv_new_none()|0);
	  $cond = $call;
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _xmmsc_connect($c,$ipcpath) {
	 $c = $c|0;
	 $ipcpath = $ipcpath|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call13 = 0, $call15 = 0, $error = 0, $ipc = 0, $ipc17 = 0;
	 var $ipcpath$addr = 0, $path = 0, $path11 = 0, $path6 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool3 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $ipcpath$addr = $ipcpath;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13144;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 $1 = $ipcpath$addr;
	 $tobool1 = ($1|0)!=(0|0);
	 do {
	  if ($tobool1) {
	   $3 = $c$addr;
	   $path6 = (($3) + 44|0);
	   $4 = $ipcpath$addr;
	   HEAP32[$vararg_buffer2>>2] = $4;
	   (_snprintf($path6,255,13184,$vararg_buffer2)|0);
	  } else {
	   $2 = $c$addr;
	   $path = (($2) + 44|0);
	   $call = (_xmms_default_ipcpath_get($path,255)|0);
	   $tobool3 = ($call|0)!=(0|0);
	   if ($tobool3) {
	    break;
	   }
	   $retval = 0;
	   $11 = $retval;
	   STACKTOP = sp;return ($11|0);
	  }
	 } while(0);
	 $call10 = (_xmmsc_ipc_init()|0);
	 $ipc = $call10;
	 $5 = $ipc;
	 $6 = $c$addr;
	 $path11 = (($6) + 44|0);
	 $call13 = (_xmmsc_ipc_connect($5,$path11)|0);
	 if ($call13) {
	  $9 = $ipc;
	  $10 = $c$addr;
	  $ipc17 = (($10) + 4|0);
	  HEAP32[$ipc17>>2] = $9;
	  $retval = 1;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 } else {
	  $call15 = (FUNCTION_TABLE_ii[3 & 15](13192)|0);
	  $7 = $c$addr;
	  $error = (($7) + 8|0);
	  HEAP32[$error>>2] = $call15;
	  $8 = $ipc;
	  _xmmsc_ipc_destroy($8);
	  $retval = 0;
	  $11 = $retval;
	  STACKTOP = sp;return ($11|0);
	 }
	 return 0|0;
	}
	function _xmmsc_disconnect_callback_set($c,$callback,$userdata) {
	 $c = $c|0;
	 $callback = $callback|0;
	 $userdata = $userdata|0;
	 var $0 = 0, $1 = 0, $2 = 0, $c$addr = 0, $callback$addr = 0, $userdata$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $callback$addr = $callback;
	 $userdata$addr = $userdata;
	 $0 = $c$addr;
	 $1 = $callback$addr;
	 $2 = $userdata$addr;
	 _xmmsc_disconnect_callback_set_full($0,$1,$2,0);
	 STACKTOP = sp;return;
	}
	function _xmmsc_disconnect_callback_set_full($c,$callback,$userdata,$free_func) {
	 $c = $c|0;
	 $callback = $callback|0;
	 $userdata = $userdata|0;
	 $free_func = $free_func|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $callback$addr = 0, $free_func$addr = 0, $ipc = 0, $ipc4 = 0, $tobool = 0, $tobool1 = 0, $userdata$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $callback$addr = $callback;
	 $userdata$addr = $userdata;
	 $free_func$addr = $free_func;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13216;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13216;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  STACKTOP = sp;return;
	 }
	 $3 = $c$addr;
	 $ipc4 = (($3) + 4|0);
	 $4 = HEAP32[$ipc4>>2]|0;
	 $5 = $callback$addr;
	 $6 = $userdata$addr;
	 $7 = $free_func$addr;
	 _xmmsc_ipc_disconnect_set($4,$5,$6,$7);
	 STACKTOP = sp;return;
	}
	function _xmmsc_get_last_error($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $c$addr = 0, $error = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $c$addr;
	  $error = (($1) + 8|0);
	  $2 = HEAP32[$error>>2]|0;
	  $retval = $2;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 13296;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = 0;
	  $3 = $retval;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _xmmsc_unref($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $cmp = 0, $cmp5 = 0, $dec = 0, $tobool = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13320;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $c$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $cmp = ($2|0)<(1);
	 if ($cmp) {
	  HEAP32[$vararg_buffer2>>2] = 13320;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13336;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  STACKTOP = sp;return;
	 }
	 $3 = $c$addr;
	 $4 = HEAP32[$3>>2]|0;
	 $dec = (($4) + -1)|0;
	 HEAP32[$3>>2] = $dec;
	 $5 = $c$addr;
	 $6 = HEAP32[$5>>2]|0;
	 $cmp5 = ($6|0)==(0);
	 if (!($cmp5)) {
	  STACKTOP = sp;return;
	 }
	 $7 = $c$addr;
	 _xmmsc_deinit($7);
	 STACKTOP = sp;return;
	}
	function _xmmsc_deinit($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $clientname = 0, $error = 0, $ipc = 0, $sc_root = 0, $sc_root1 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $0 = $c$addr;
	 $ipc = (($0) + 4|0);
	 $1 = HEAP32[$ipc>>2]|0;
	 _xmmsc_ipc_destroy($1);
	 $2 = $c$addr;
	 $sc_root = (($2) + 40|0);
	 $3 = HEAP32[$sc_root>>2]|0;
	 $tobool = ($3|0)!=(0|0);
	 if ($tobool) {
	  $4 = $c$addr;
	  $sc_root1 = (($4) + 40|0);
	  $5 = HEAP32[$sc_root1>>2]|0;
	  _xmmsc_sc_interface_entity_destroy(($5|0));
	 }
	 $6 = $c$addr;
	 $error = (($6) + 8|0);
	 $7 = HEAP32[$error>>2]|0;
	 _free($7);
	 $8 = $c$addr;
	 $clientname = (($8) + 16|0);
	 $9 = HEAP32[$clientname>>2]|0;
	 _free($9);
	 $10 = $c$addr;
	 _free($10);
	 STACKTOP = sp;return;
	}
	function _xmmsc_lock_set($c,$lock,$lockfunc,$unlockfunc) {
	 $c = $c|0;
	 $lock = $lock|0;
	 $lockfunc = $lockfunc|0;
	 $unlockfunc = $unlockfunc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $ipc = 0, $ipc4 = 0, $lock$addr = 0, $lockfunc$addr = 0, $tobool = 0, $tobool1 = 0, $unlockfunc$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $lock$addr = $lock;
	 $lockfunc$addr = $lockfunc;
	 $unlockfunc$addr = $unlockfunc;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13376;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13376;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  STACKTOP = sp;return;
	 }
	 $3 = $c$addr;
	 $ipc4 = (($3) + 4|0);
	 $4 = HEAP32[$ipc4>>2]|0;
	 $5 = $lock$addr;
	 $6 = $lockfunc$addr;
	 $7 = $unlockfunc$addr;
	 _xmmsc_ipc_lock_set($4,$5,$6,$7);
	 STACKTOP = sp;return;
	}
	function _xmmsc_quit($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13392;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13392;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,1,33)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_send_msg_no_arg($c,$object,$method) {
	 $c = $c|0;
	 $object = $object|0;
	 $method = $method|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $c$addr = 0, $call = 0, $call1 = 0, $call3 = 0, $call4 = 0, $cookie = 0, $method$addr = 0, $msg = 0, $object$addr = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $object$addr = $object;
	 $method$addr = $method;
	 $0 = $object$addr;
	 $1 = $method$addr;
	 $call = (_xmms_ipc_msg_new($0,$1)|0);
	 $msg = $call;
	 $call1 = (_xmmsv_new_list()|0);
	 $args = $call1;
	 $2 = $msg;
	 $3 = $args;
	 (_xmms_ipc_msg_put_value($2,$3)|0);
	 $4 = $args;
	 _xmmsv_unref($4);
	 $5 = $c$addr;
	 $6 = $msg;
	 $call3 = (_xmmsc_write_msg_to_ipc($5,$6)|0);
	 $cookie = $call3;
	 $7 = $c$addr;
	 $8 = $cookie;
	 $call4 = (_xmmsc_result_new($7,0,$8)|0);
	 STACKTOP = sp;return ($call4|0);
	}
	function _xmmsc_broadcast_quit($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13408;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13408;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_broadcast_msg($3,12)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_send_broadcast_msg($c,$signalid) {
	 $c = $c|0;
	 $signalid = $signalid|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call1 = 0, $call2 = 0, $signalid$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $signalid$addr = $signalid;
	 $0 = $c$addr;
	 $1 = $signalid$addr;
	 $2 = ($1|0)<(0);
	 $3 = $2 << 31 >> 31;
	 $4 = (_xmmsv_new_int($1,$3)|0);
	 $call1 = (___xmmsv_identity_xmmsv437($4)|0);
	 HEAP32[$vararg_buffer>>2] = $call1;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAP32[$vararg_ptr1>>2] = 0;
	 $call2 = (_xmmsc_send_cmd($0,0,33,$vararg_buffer)|0);
	 STACKTOP = sp;return ($call2|0);
	}
	function _xmmsc_userconfdir_get($buf,$len) {
	 $buf = $buf|0;
	 $len = $len|0;
	 var $0 = 0, $1 = 0, $buf$addr = 0, $call = 0, $len$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$addr = $buf;
	 $len$addr = $len;
	 $0 = $buf$addr;
	 $1 = $len$addr;
	 $call = (_xmms_userconfdir_get($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _xmmsc_write_signal_msg($c,$signalid) {
	 $c = $c|0;
	 $signalid = $signalid|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $c$addr = 0, $call = 0, $call2 = 0, $call3 = 0, $call5 = 0, $cookie = 0, $msg = 0, $signalid$addr = 0, $vararg_buffer = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $signalid$addr = $signalid;
	 $call = (_xmms_ipc_msg_new(0,32)|0);
	 $msg = $call;
	 $0 = $signalid$addr;
	 $1 = ($0|0)<(0);
	 $2 = $1 << 31 >> 31;
	 $3 = (_xmmsv_new_int($0,$2)|0);
	 $call2 = (___xmmsv_identity_xmmsv437($3)|0);
	 HEAP32[$vararg_buffer>>2] = 0;
	 $call3 = (_xmmsv_build_list($call2,$vararg_buffer)|0);
	 $args = $call3;
	 $4 = $msg;
	 $5 = $args;
	 (_xmms_ipc_msg_put_value($4,$5)|0);
	 $6 = $args;
	 _xmmsv_unref($6);
	 $7 = $c$addr;
	 $8 = $msg;
	 $call5 = (_xmmsc_write_msg_to_ipc($7,$8)|0);
	 $cookie = $call5;
	 $9 = $cookie;
	 STACKTOP = sp;return ($9|0);
	}
	function _xmmsc_write_msg_to_ipc($c,$msg) {
	 $c = $c|0;
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c$addr = 0, $call = 0, $cookie = 0, $ipc = 0, $msg$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $msg$addr = $msg;
	 $0 = $c$addr;
	 $call = (_xmmsc_next_id($0)|0);
	 $cookie = $call;
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $3 = $msg$addr;
	 $4 = $cookie;
	 (_xmmsc_ipc_msg_write($2,$3,$4)|0);
	 $5 = $cookie;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsc_send_signal_msg($c,$signalid) {
	 $c = $c|0;
	 $signalid = $signalid|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $call1 = 0, $call2 = 0, $res = 0, $signalid$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $signalid$addr = $signalid;
	 $0 = $c$addr;
	 $1 = $signalid$addr;
	 $2 = ($1|0)<(0);
	 $3 = $2 << 31 >> 31;
	 $4 = (_xmmsv_new_int($1,$3)|0);
	 $call1 = (___xmmsv_identity_xmmsv437($4)|0);
	 HEAP32[$vararg_buffer>>2] = $call1;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAP32[$vararg_ptr1>>2] = 0;
	 $call2 = (_xmmsc_send_cmd($0,0,32,$vararg_buffer)|0);
	 $res = $call2;
	 $5 = $res;
	 $6 = $signalid$addr;
	 _xmmsc_result_restartable($5,$6);
	 $7 = $res;
	 STACKTOP = sp;return ($7|0);
	}
	function _xmmsc_send_msg($c,$msg) {
	 $c = $c|0;
	 $msg = $msg|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $call = 0, $call1 = 0, $call10 = 0, $call2 = 0, $call5 = 0, $cmp = 0, $cmp3 = 0, $cmp6 = 0, $cookie = 0, $msg$addr = 0, $type = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $msg$addr = $msg;
	 $0 = $c$addr;
	 $1 = $msg$addr;
	 $call = (_xmmsc_write_msg_to_ipc($0,$1)|0);
	 $cookie = $call;
	 $type = 0;
	 $2 = $msg$addr;
	 $call1 = (_xmms_ipc_msg_get_object($2)|0);
	 $cmp = ($call1|0)==(0);
	 if ($cmp) {
	  $3 = $msg$addr;
	  $call2 = (_xmms_ipc_msg_get_cmd($3)|0);
	  $cmp3 = ($call2|0)==(32);
	  if ($cmp3) {
	   $type = 1;
	  } else {
	   $4 = $msg$addr;
	   $call5 = (_xmms_ipc_msg_get_cmd($4)|0);
	   $cmp6 = ($call5|0)==(33);
	   if ($cmp6) {
	    $type = 2;
	   }
	  }
	 }
	 $5 = $c$addr;
	 $6 = $type;
	 $7 = $cookie;
	 $call10 = (_xmmsc_result_new($5,$6,$7)|0);
	 STACKTOP = sp;return ($call10|0);
	}
	function _xmmsc_send_cmd_cookie($c,$obj,$cmd,$varargs) {
	 $c = $c|0;
	 $obj = $obj|0;
	 $cmd = $cmd|0;
	 $varargs = $varargs|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $args = 0, $c$addr = 0, $call = 0, $call4 = 0, $call8 = 0, $cmd$addr = 0, $first_arg = 0, $msg = 0;
	 var $obj$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp + 16|0;
	 $c$addr = $c;
	 $obj$addr = $obj;
	 $cmd$addr = $cmd;
	 $0 = $obj$addr;
	 $1 = $cmd$addr;
	 $call = (_xmms_ipc_msg_new($0,$1)|0);
	 $msg = $call;
	 HEAP32[$ap>>2] = $varargs;
	 $arglist_current = HEAP32[$ap>>2]|0;
	 $2 = HEAP32[$arglist_current>>2]|0;
	 $arglist_next = (($arglist_current) + 4|0);
	 HEAP32[$ap>>2] = $arglist_next;
	 $first_arg = $2;
	 $3 = $first_arg;
	 $call4 = (_xmmsv_build_list_va($3,$ap)|0);
	 $args = $call4;
	 $4 = $msg;
	 $5 = $args;
	 (_xmms_ipc_msg_put_value($4,$5)|0);
	 $6 = $args;
	 _xmmsv_unref($6);
	 $7 = $c$addr;
	 $8 = $msg;
	 $call8 = (_xmmsc_write_msg_to_ipc($7,$8)|0);
	 STACKTOP = sp;return ($call8|0);
	}
	function _xmmsc_io_want_out($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c$addr = 0, $call = 0, $ipc = 0, $ipc4 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13432;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = -1;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13432;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  $retval = -1;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $3 = $c$addr;
	 $ipc4 = (($3) + 4|0);
	 $4 = HEAP32[$ipc4>>2]|0;
	 $call = (_xmmsc_ipc_io_out($4)|0);
	 $retval = $call;
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsc_io_out_handle($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $call = 0, $call9 = 0, $ipc = 0, $ipc4 = 0, $ipc8 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
	 var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13456;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13456;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $c$addr;
	 $ipc4 = (($3) + 4|0);
	 $4 = HEAP32[$ipc4>>2]|0;
	 $call = (_xmmsc_ipc_io_out($4)|0);
	 $tobool5 = ($call|0)!=(0);
	 if ($tobool5) {
	  $5 = $c$addr;
	  $ipc8 = (($5) + 4|0);
	  $6 = HEAP32[$ipc8>>2]|0;
	  $call9 = (_xmmsc_ipc_io_out_callback($6)|0);
	  $retval = $call9;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 13456;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 13480;
	  _xmmsc_log(0,2,13008,$vararg_buffer6);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _xmmsc_io_in_handle($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $call = 0, $call8 = 0, $ipc = 0, $ipc4 = 0, $ipc7 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13504;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13504;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $c$addr;
	 $ipc4 = (($3) + 4|0);
	 $4 = HEAP32[$ipc4>>2]|0;
	 $call = (_xmmsc_ipc_disconnected($4)|0);
	 if ($call) {
	  HEAP32[$vararg_buffer6>>2] = 13504;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 13528;
	  _xmmsc_log(0,2,13008,$vararg_buffer6);
	  $retval = -1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 } else {
	  $5 = $c$addr;
	  $ipc7 = (($5) + 4|0);
	  $6 = HEAP32[$ipc7>>2]|0;
	  $call8 = (_xmmsc_ipc_io_in_callback($6)|0);
	  $retval = $call8;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 return 0|0;
	}
	function _xmmsc_io_fd_get($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c$addr = 0, $call = 0, $ipc = 0, $ipc4 = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13576;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  $retval = -1;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13576;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  $retval = -1;
	  $5 = $retval;
	  STACKTOP = sp;return ($5|0);
	 }
	 $3 = $c$addr;
	 $ipc4 = (($3) + 4|0);
	 $4 = HEAP32[$ipc4>>2]|0;
	 $call = (_xmmsc_ipc_fd_get($4)|0);
	 $retval = $call;
	 $5 = $retval;
	 STACKTOP = sp;return ($5|0);
	}
	function _xmmsc_io_need_out_callback_set($c,$callback,$userdata) {
	 $c = $c|0;
	 $callback = $callback|0;
	 $userdata = $userdata|0;
	 var $0 = 0, $1 = 0, $2 = 0, $c$addr = 0, $callback$addr = 0, $userdata$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $callback$addr = $callback;
	 $userdata$addr = $userdata;
	 $0 = $c$addr;
	 $1 = $callback$addr;
	 $2 = $userdata$addr;
	 _xmmsc_io_need_out_callback_set_full($0,$1,$2,0);
	 STACKTOP = sp;return;
	}
	function _xmmsc_io_need_out_callback_set_full($c,$callback,$userdata,$free_func) {
	 $c = $c|0;
	 $callback = $callback|0;
	 $userdata = $userdata|0;
	 $free_func = $free_func|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $callback$addr = 0, $free_func$addr = 0, $ipc = 0, $ipc4 = 0, $tobool = 0, $tobool1 = 0, $userdata$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $callback$addr = $callback;
	 $userdata$addr = $userdata;
	 $free_func$addr = $free_func;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13592;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13592;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  STACKTOP = sp;return;
	 }
	 $3 = $c$addr;
	 $ipc4 = (($3) + 4|0);
	 $4 = HEAP32[$ipc4>>2]|0;
	 $5 = $callback$addr;
	 $6 = $userdata$addr;
	 $7 = $free_func$addr;
	 _xmmsc_ipc_need_out_callback_set($4,$5,$6,$7);
	 STACKTOP = sp;return;
	}
	function _xmmsc_io_disconnect($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $ipc = 0, $ipc4 = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13632;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13160;
	  _xmmsc_log(0,2,13008,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13632;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13256;
	  _xmmsc_log(0,2,13008,$vararg_buffer2);
	  STACKTOP = sp;return;
	 }
	 $3 = $c$addr;
	 $ipc4 = (($3) + 4|0);
	 $4 = HEAP32[$ipc4>>2]|0;
	 _xmmsc_ipc_disconnect($4);
	 STACKTOP = sp;return;
	}
	function _xmmsc_next_id($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $c$addr = 0, $cookie = 0, $inc = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $0 = $c$addr;
	 $cookie = (($0) + 12|0);
	 $1 = HEAP32[$cookie>>2]|0;
	 $inc = (($1) + 1)|0;
	 HEAP32[$cookie>>2] = $inc;
	 STACKTOP = sp;return ($1|0);
	}
	function _xmmsc_xform_media_browse($c,$url) {
	 $c = $c|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $enc_url = 0, $ipc = 0, $res = 0, $retval = 0, $tobool = 0, $tobool1 = 0;
	 var $tobool4 = 0, $tobool7 = 0, $url$addr = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $url$addr = $url;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13680;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13712;
	  _xmmsc_log(0,2,13656,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13680;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13736;
	  _xmmsc_log(0,2,13656,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 13680;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 13776;
	  _xmmsc_log(0,2,13656,$vararg_buffer6);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $4 = $url$addr;
	 $call = (_xmmsv_encode_url($4)|0);
	 $enc_url = $call;
	 $5 = $enc_url;
	 $tobool7 = ($5|0)!=(0|0);
	 if ($tobool7) {
	  $6 = $c$addr;
	  $7 = $enc_url;
	  $call10 = (_xmmsc_xform_media_browse_encoded($6,$7)|0);
	  $res = $call10;
	  $8 = $enc_url;
	  _free($8);
	  $9 = $res;
	  $retval = $9;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 } else {
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 return 0|0;
	}
	function _xmmsc_xform_media_browse_encoded($c,$url) {
	 $c = $c|0;
	 $url = $url|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$addr = 0, $call = 0, $call12 = 0, $call13 = 0, $call14 = 0, $call15 = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0;
	 var $url$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer14 = sp + 32|0;
	 $vararg_buffer10 = sp + 16|0;
	 $vararg_buffer6 = sp + 24|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $url$addr = $url;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13792;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13712;
	  _xmmsc_log(0,2,13656,$vararg_buffer);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 13792;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 13736;
	  _xmmsc_log(0,2,13656,$vararg_buffer2);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $url$addr;
	 $tobool4 = ($3|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 13792;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 13776;
	  _xmmsc_log(0,2,13656,$vararg_buffer6);
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $4 = $url$addr;
	 $call = (__xmmsc_medialib_verify_url($4)|0);
	 $tobool7 = ($call|0)!=(0);
	 if ($tobool7) {
	  $5 = $c$addr;
	  $6 = $url$addr;
	  $call12 = (_xmmsv_new_string($6)|0);
	  $call13 = (___xmmsv_null_to_none454($call12)|0);
	  $call14 = (___xmmsv_identity_xmmsv453($call13)|0);
	  HEAP32[$vararg_buffer14>>2] = $call14;
	  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	  HEAP32[$vararg_ptr17>>2] = 0;
	  $call15 = (_xmmsc_send_cmd($5,9,32,$vararg_buffer14)|0);
	  $retval = $call15;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 HEAP32[$vararg_buffer10>>2] = 13792;
	 $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	 HEAP32[$vararg_ptr13>>2] = 13832;
	 _xmmsc_log(0,2,13656,$vararg_buffer10);
	 $retval = 0;
	 $7 = $retval;
	 STACKTOP = sp;return ($7|0);
	}
	function ___xmmsv_identity_xmmsv453($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function ___xmmsv_null_to_none454($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $v$addr;
	  $cond = $1;
	 } else {
	  $call = (_xmmsv_new_none()|0);
	  $cond = $call;
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _x_queue_new() {
	 var $0 = 0, $call = 0, $queue = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $call = (_calloc(1,12)|0);
	 $queue = $call;
	 $0 = $queue;
	 STACKTOP = sp;return ($0|0);
	}
	function _x_queue_free($queue) {
	 $queue = $queue|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $queue$addr = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $queue$addr = $queue;
	 $0 = $queue$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $queue$addr;
	  $2 = HEAP32[$1>>2]|0;
	  _x_list_free($2);
	  $3 = $queue$addr;
	  _free($3);
	  STACKTOP = sp;return;
	 } else {
	  HEAP32[$vararg_buffer>>2] = 13896;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13904;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 13920;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 24;
	  _xmmsc_log(0,2,13856,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	}
	function _x_queue_push_head($queue,$data) {
	 $queue = $queue|0;
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $data$addr = 0, $inc = 0, $length = 0, $queue$addr = 0, $tail = 0, $tail5 = 0, $tobool = 0;
	 var $tobool2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $queue$addr = $queue;
	 $data$addr = $data;
	 $0 = $queue$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13896;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13960;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 13920;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 34;
	  _xmmsc_log(0,2,13856,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $queue$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $3 = $data$addr;
	 $call = (_x_list_prepend($2,$3)|0);
	 $4 = $queue$addr;
	 HEAP32[$4>>2] = $call;
	 $5 = $queue$addr;
	 $tail = (($5) + 4|0);
	 $6 = HEAP32[$tail>>2]|0;
	 $tobool2 = ($6|0)!=(0|0);
	 if (!($tobool2)) {
	  $7 = $queue$addr;
	  $8 = HEAP32[$7>>2]|0;
	  $9 = $queue$addr;
	  $tail5 = (($9) + 4|0);
	  HEAP32[$tail5>>2] = $8;
	 }
	 $10 = $queue$addr;
	 $length = (($10) + 8|0);
	 $11 = HEAP32[$length>>2]|0;
	 $inc = (($11) + 1)|0;
	 HEAP32[$length>>2] = $inc;
	 STACKTOP = sp;return;
	}
	function _x_queue_push_tail($queue,$data) {
	 $queue = $queue|0;
	 $data = $data|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $data$addr = 0, $inc = 0;
	 var $length = 0, $next = 0, $next6 = 0, $queue$addr = 0, $tail = 0, $tail1 = 0, $tail2 = 0, $tail5 = 0, $tail7 = 0, $tail8 = 0, $tobool = 0, $tobool3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $queue$addr = $queue;
	 $data$addr = $data;
	 $0 = $queue$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13896;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 13984;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 13920;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 47;
	  _xmmsc_log(0,2,13856,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $queue$addr;
	 $tail = (($1) + 4|0);
	 $2 = HEAP32[$tail>>2]|0;
	 $3 = $data$addr;
	 $call = (_x_list_append($2,$3)|0);
	 $4 = $queue$addr;
	 $tail1 = (($4) + 4|0);
	 HEAP32[$tail1>>2] = $call;
	 $5 = $queue$addr;
	 $tail2 = (($5) + 4|0);
	 $6 = HEAP32[$tail2>>2]|0;
	 $next = (($6) + 4|0);
	 $7 = HEAP32[$next>>2]|0;
	 $tobool3 = ($7|0)!=(0|0);
	 if ($tobool3) {
	  $8 = $queue$addr;
	  $tail5 = (($8) + 4|0);
	  $9 = HEAP32[$tail5>>2]|0;
	  $next6 = (($9) + 4|0);
	  $10 = HEAP32[$next6>>2]|0;
	  $11 = $queue$addr;
	  $tail7 = (($11) + 4|0);
	  HEAP32[$tail7>>2] = $10;
	 } else {
	  $12 = $queue$addr;
	  $tail8 = (($12) + 4|0);
	  $13 = HEAP32[$tail8>>2]|0;
	  $14 = $queue$addr;
	  HEAP32[$14>>2] = $13;
	 }
	 $15 = $queue$addr;
	 $length = (($15) + 8|0);
	 $16 = HEAP32[$length>>2]|0;
	 $inc = (($16) + 1)|0;
	 HEAP32[$length>>2] = $inc;
	 STACKTOP = sp;return;
	}
	function _x_queue_pop_head($queue) {
	 $queue = $queue|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $data = 0, $dec = 0, $length = 0, $next = 0, $node = 0, $prev = 0, $queue$addr = 0, $retval = 0, $tail = 0, $tobool = 0, $tobool1 = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $queue$addr = $queue;
	 $0 = $queue$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13896;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14008;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 13920;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 62;
	  _xmmsc_log(0,2,13856,$vararg_buffer);
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 $1 = $queue$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 $3 = $queue$addr;
	 $4 = HEAP32[$3>>2]|0;
	 $node = $4;
	 $5 = $node;
	 $6 = HEAP32[$5>>2]|0;
	 $data = $6;
	 $7 = $node;
	 $next = (($7) + 4|0);
	 $8 = HEAP32[$next>>2]|0;
	 $9 = $queue$addr;
	 HEAP32[$9>>2] = $8;
	 $10 = $queue$addr;
	 $11 = HEAP32[$10>>2]|0;
	 $tobool7 = ($11|0)!=(0|0);
	 if ($tobool7) {
	  $12 = $queue$addr;
	  $13 = HEAP32[$12>>2]|0;
	  $prev = (($13) + 8|0);
	  HEAP32[$prev>>2] = 0;
	 } else {
	  $14 = $queue$addr;
	  $tail = (($14) + 4|0);
	  HEAP32[$tail>>2] = 0;
	 }
	 $15 = $queue$addr;
	 $length = (($15) + 8|0);
	 $16 = HEAP32[$length>>2]|0;
	 $dec = (($16) + -1)|0;
	 HEAP32[$length>>2] = $dec;
	 $17 = $node;
	 _x_list_free_1($17);
	 $18 = $data;
	 $retval = $18;
	 $19 = $retval;
	 STACKTOP = sp;return ($19|0);
	}
	function _x_queue_pop_tail($queue) {
	 $queue = $queue|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $data = 0, $dec = 0, $length = 0, $next = 0, $node = 0, $prev = 0, $queue$addr = 0, $retval = 0, $tail = 0, $tail3 = 0, $tail5 = 0, $tail6 = 0, $tail9 = 0, $tobool = 0, $tobool1 = 0, $tobool7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $queue$addr = $queue;
	 $0 = $queue$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13896;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14032;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 13920;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 86;
	  _xmmsc_log(0,2,13856,$vararg_buffer);
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 $1 = $queue$addr;
	 $tail = (($1) + 4|0);
	 $2 = HEAP32[$tail>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  $retval = 0;
	  $19 = $retval;
	  STACKTOP = sp;return ($19|0);
	 }
	 $3 = $queue$addr;
	 $tail3 = (($3) + 4|0);
	 $4 = HEAP32[$tail3>>2]|0;
	 $node = $4;
	 $5 = $node;
	 $6 = HEAP32[$5>>2]|0;
	 $data = $6;
	 $7 = $node;
	 $prev = (($7) + 8|0);
	 $8 = HEAP32[$prev>>2]|0;
	 $9 = $queue$addr;
	 $tail5 = (($9) + 4|0);
	 HEAP32[$tail5>>2] = $8;
	 $10 = $queue$addr;
	 $tail6 = (($10) + 4|0);
	 $11 = HEAP32[$tail6>>2]|0;
	 $tobool7 = ($11|0)!=(0|0);
	 if ($tobool7) {
	  $12 = $queue$addr;
	  $tail9 = (($12) + 4|0);
	  $13 = HEAP32[$tail9>>2]|0;
	  $next = (($13) + 4|0);
	  HEAP32[$next>>2] = 0;
	 } else {
	  $14 = $queue$addr;
	  HEAP32[$14>>2] = 0;
	 }
	 $15 = $queue$addr;
	 $length = (($15) + 8|0);
	 $16 = HEAP32[$length>>2]|0;
	 $dec = (($16) + -1)|0;
	 HEAP32[$length>>2] = $dec;
	 $17 = $node;
	 _x_list_free_1($17);
	 $18 = $data;
	 $retval = $18;
	 $19 = $retval;
	 STACKTOP = sp;return ($19|0);
	}
	function _x_queue_peek_head($queue) {
	 $queue = $queue|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cond = 0, $queue$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $queue$addr = $queue;
	 $0 = $queue$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13896;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14056;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 13920;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 110;
	  _xmmsc_log(0,2,13856,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $queue$addr;
	 $2 = HEAP32[$1>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if ($tobool1) {
	  $3 = $queue$addr;
	  $4 = HEAP32[$3>>2]|0;
	  $5 = HEAP32[$4>>2]|0;
	  $cond = $5;
	 } else {
	  $cond = 0;
	 }
	 $retval = $cond;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function _x_queue_peek_tail($queue) {
	 $queue = $queue|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $cond = 0, $queue$addr = 0, $retval = 0, $tail = 0, $tail2 = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $queue$addr = $queue;
	 $0 = $queue$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 13896;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14080;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 13920;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 118;
	  _xmmsc_log(0,2,13856,$vararg_buffer);
	  $retval = 0;
	  $6 = $retval;
	  STACKTOP = sp;return ($6|0);
	 }
	 $1 = $queue$addr;
	 $tail = (($1) + 4|0);
	 $2 = HEAP32[$tail>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if ($tobool1) {
	  $3 = $queue$addr;
	  $tail2 = (($3) + 4|0);
	  $4 = HEAP32[$tail2>>2]|0;
	  $5 = HEAP32[$4>>2]|0;
	  $cond = $5;
	 } else {
	  $cond = 0;
	 }
	 $retval = $cond;
	 $6 = $retval;
	 STACKTOP = sp;return ($6|0);
	}
	function _x_queue_is_empty($queue) {
	 $queue = $queue|0;
	 var $$expand_i1_val = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp$expand_i1_val = 0, $queue$addr = 0, $retval = 0, $tobool = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $queue$addr = $queue;
	 $0 = $queue$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $queue$addr;
	  $2 = HEAP32[$1>>2]|0;
	  $cmp = ($2|0)==(0|0);
	  $cmp$expand_i1_val = $cmp&1;
	  $retval = $cmp$expand_i1_val;
	  $$pre_trunc = $retval;
	  $3 = $$pre_trunc&1;
	  STACKTOP = sp;return ($3|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 13896;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14104;
	  $vararg_ptr2 = (($vararg_buffer) + 8|0);
	  HEAP32[$vararg_ptr2>>2] = 13920;
	  $vararg_ptr3 = (($vararg_buffer) + 12|0);
	  HEAP32[$vararg_ptr3>>2] = 126;
	  _xmmsc_log(0,2,13856,$vararg_buffer);
	  $$expand_i1_val = 1;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $3 = $$pre_trunc&1;
	  STACKTOP = sp;return ($3|0);
	 }
	 return 0|0;
	}
	function _get_dataset($c,$vv) {
	 $c = $c|0;
	 $vv = $vv|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $c$addr = 0, $cmp = 0, $cmp1 = 0, $retval = 0, $visc = 0, $visv = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $vv$addr = $vv;
	 $0 = $vv$addr;
	 $cmp = ($0|0)<(0);
	 if (!($cmp)) {
	  $1 = $vv$addr;
	  $2 = $c$addr;
	  $visc = (($2) + 20|0);
	  $3 = HEAP32[$visc>>2]|0;
	  $cmp1 = ($1|0)>=($3|0);
	  if (!($cmp1)) {
	   $4 = $vv$addr;
	   $5 = $c$addr;
	   $visv = (($5) + 24|0);
	   $6 = HEAP32[$visv>>2]|0;
	   $arrayidx = (($6) + ($4<<2)|0);
	   $7 = HEAP32[$arrayidx>>2]|0;
	   $retval = $7;
	   $8 = $retval;
	   STACKTOP = sp;return ($8|0);
	  }
	 }
	 $retval = 0;
	 $8 = $retval;
	 STACKTOP = sp;return ($8|0);
	}
	function _xmmsc_visualization_version($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $c$addr = 0, $call = 0, $ipc = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14152;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14184;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 14152;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 14208;
	  _xmmsc_log(0,2,14128,$vararg_buffer2);
	  $retval = 0;
	  $4 = $retval;
	  STACKTOP = sp;return ($4|0);
	 }
	 $3 = $c$addr;
	 $call = (_xmmsc_send_msg_no_arg($3,7,32)|0);
	 $retval = $call;
	 $4 = $retval;
	 STACKTOP = sp;return ($4|0);
	}
	function _xmmsc_visualization_init($c) {
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx19 = 0;
	 var $arrayidx21 = 0, $arrayidx26 = 0, $c$addr = 0, $call = 0, $call14 = 0, $call22 = 0, $cmp = 0, $idx = 0, $inc = 0, $ipc = 0, $mul = 0, $res = 0, $retval = 0, $state = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool16 = 0, $tobool23 = 0, $tobool7 = 0;
	 var $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $visc = 0, $visc11 = 0, $visc13 = 0, $visc4 = 0, $visc9 = 0, $visv = 0, $visv15 = 0, $visv18 = 0, $visv20 = 0, $visv25 = 0;
	 var $visv5 = 0, $visv6 = 0, $vv = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer11 = sp + 32|0;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $res = 0;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14248;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14184;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  $retval = 0;
	  $37 = $retval;
	  STACKTOP = sp;return ($37|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 14248;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 14208;
	  _xmmsc_log(0,2,14128,$vararg_buffer2);
	  $retval = 0;
	  $37 = $retval;
	  STACKTOP = sp;return ($37|0);
	 }
	 $3 = $c$addr;
	 $visc = (($3) + 20|0);
	 $4 = HEAP32[$visc>>2]|0;
	 $inc = (($4) + 1)|0;
	 HEAP32[$visc>>2] = $inc;
	 $5 = $c$addr;
	 $visv = (($5) + 24|0);
	 $6 = HEAP32[$visv>>2]|0;
	 $7 = $c$addr;
	 $visc4 = (($7) + 20|0);
	 $8 = HEAP32[$visc4>>2]|0;
	 $mul = $8<<2;
	 $call = (_realloc($6,$mul)|0);
	 $9 = $c$addr;
	 $visv5 = (($9) + 24|0);
	 HEAP32[$visv5>>2] = $call;
	 $10 = $c$addr;
	 $visv6 = (($10) + 24|0);
	 $11 = HEAP32[$visv6>>2]|0;
	 $tobool7 = ($11|0)!=(0|0);
	 if (!($tobool7)) {
	  HEAP32[$vararg_buffer6>>2] = 14248;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 14312;
	  $vararg_ptr10 = (($vararg_buffer6) + 8|0);
	  HEAP32[$vararg_ptr10>>2] = 73;
	  _xmmsc_log(0,2,14280,$vararg_buffer6);
	  $12 = $c$addr;
	  $visc9 = (($12) + 20|0);
	  HEAP32[$visc9>>2] = 0;
	 }
	 $13 = $c$addr;
	 $visc11 = (($13) + 20|0);
	 $14 = HEAP32[$visc11>>2]|0;
	 $cmp = ($14|0)>(0);
	 if ($cmp) {
	  $15 = $c$addr;
	  $visc13 = (($15) + 20|0);
	  $16 = HEAP32[$visc13>>2]|0;
	  $sub = (($16) - 1)|0;
	  $vv = $sub;
	  $call14 = (_calloc(1,168)|0);
	  $17 = $vv;
	  $18 = $c$addr;
	  $visv15 = (($18) + 24|0);
	  $19 = HEAP32[$visv15>>2]|0;
	  $arrayidx = (($19) + ($17<<2)|0);
	  HEAP32[$arrayidx>>2] = $call14;
	  $tobool16 = ($call14|0)!=(0|0);
	  if ($tobool16) {
	   $20 = $vv;
	   $21 = $vv;
	   $22 = $c$addr;
	   $visv18 = (($22) + 24|0);
	   $23 = HEAP32[$visv18>>2]|0;
	   $arrayidx19 = (($23) + ($21<<2)|0);
	   $24 = HEAP32[$arrayidx19>>2]|0;
	   $idx = (($24) + 164|0);
	   HEAP32[$idx>>2] = $20;
	   $25 = $vv;
	   $26 = $c$addr;
	   $visv20 = (($26) + 24|0);
	   $27 = HEAP32[$visv20>>2]|0;
	   $arrayidx21 = (($27) + ($25<<2)|0);
	   $28 = HEAP32[$arrayidx21>>2]|0;
	   $state = (($28) + 156|0);
	   HEAP32[$state>>2] = 0;
	   $29 = $c$addr;
	   $call22 = (_xmmsc_send_msg_no_arg($29,7,33)|0);
	   $res = $call22;
	   $30 = $res;
	   $tobool23 = ($30|0)!=(0|0);
	   if ($tobool23) {
	    $31 = $res;
	    $32 = $vv;
	    $33 = $c$addr;
	    $visv25 = (($33) + 24|0);
	    $34 = HEAP32[$visv25>>2]|0;
	    $arrayidx26 = (($34) + ($32<<2)|0);
	    $35 = HEAP32[$arrayidx26>>2]|0;
	    _xmmsc_result_visc_set($31,$35);
	   }
	  } else {
	   HEAP32[$vararg_buffer11>>2] = 14248;
	   $vararg_ptr14 = (($vararg_buffer11) + 4|0);
	   HEAP32[$vararg_ptr14>>2] = 14312;
	   $vararg_ptr15 = (($vararg_buffer11) + 8|0);
	   HEAP32[$vararg_ptr15>>2] = 79;
	   _xmmsc_log(0,2,14280,$vararg_buffer11);
	  }
	 }
	 $36 = $res;
	 $retval = $36;
	 $37 = $retval;
	 STACKTOP = sp;return ($37|0);
	}
	function _xmmsc_visualization_init_handle($res) {
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $call6 = 0, $id = 0, $idx = 0, $res$addr = 0, $retval = 0, $tobool = 0, $tobool3 = 0;
	 var $type = 0, $val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $visc = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $call = (_xmmsc_result_get_value($0)|0);
	 $call1 = (_xmmsv_is_error($call)|0);
	 $tobool = ($call1|0)!=(0);
	 if ($tobool) {
	  $retval = -1;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 $1 = $res$addr;
	 $call2 = (_xmmsc_result_visc_get($1)|0);
	 $visc = $call2;
	 $2 = $visc;
	 $tobool3 = ($2|0)!=(0|0);
	 if ($tobool3) {
	  $3 = $res$addr;
	  $call6 = (_xmmsc_result_get_value($3)|0);
	  $val = $call6;
	  $4 = $val;
	  $5 = $visc;
	  $id = (($5) + 160|0);
	  (_xmmsv_get_int32($4,$id)|0);
	  $6 = $visc;
	  $type = (($6) + 152|0);
	  HEAP32[$type>>2] = 2;
	  $7 = $visc;
	  $idx = (($7) + 164|0);
	  $8 = HEAP32[$idx>>2]|0;
	  $retval = $8;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 } else {
	  HEAP32[$vararg_buffer>>2] = 14368;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14400;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  $retval = -1;
	  $9 = $retval;
	  STACKTOP = sp;return ($9|0);
	 }
	 return 0|0;
	}
	function _xmmsc_visualization_start($c,$vv) {
	 $c = $c|0;
	 $vv = $vv|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call8 = 0;
	 var $ipc = 0, $res = 0, $retval = 0, $state = 0, $state11 = 0, $state12 = 0, $state14 = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool9 = 0, $type = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0;
	 var $vararg_ptr9 = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp + 16|0;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp + 24|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $vv$addr = $vv;
	 $res = 0;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14416;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14184;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 14416;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 14208;
	  _xmmsc_log(0,2,14128,$vararg_buffer2);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $3 = $c$addr;
	 $4 = $vv$addr;
	 $call = (_get_dataset($3,$4)|0);
	 $v = $call;
	 $5 = $v;
	 $tobool4 = ($5|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 14416;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 14448;
	  _xmmsc_log(0,2,14128,$vararg_buffer6);
	  $retval = 0;
	  $16 = $retval;
	  STACKTOP = sp;return ($16|0);
	 }
	 $6 = $v;
	 $state = (($6) + 156|0);
	 $7 = HEAP32[$state>>2]|0;
	 if ((($7|0) == 4) | (($7|0) == 5)) {
	 } else if ((($7|0) == 2) | (($7|0) == 0)) {
	  $8 = $v;
	  $type = (($8) + 152|0);
	  HEAP32[$type>>2] = 1;
	  $9 = $c$addr;
	  $10 = $vv$addr;
	  $call8 = (_setup_udp_prepare($9,$10)|0);
	  $res = $call8;
	  $11 = $res;
	  $tobool9 = ($11|0)!=(0|0);
	  if ($tobool9) {
	   $12 = $v;
	   $state11 = (($12) + 156|0);
	   HEAP32[$state11>>2] = 3;
	  } else {
	   $13 = $v;
	   $state12 = (($13) + 156|0);
	   HEAP32[$state12>>2] = 4;
	  }
	 } else {
	  $14 = $v;
	  $state14 = (($14) + 156|0);
	  HEAP32[$state14>>2] = 4;
	  HEAP32[$vararg_buffer10>>2] = 14416;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 14504;
	  _xmmsc_log(0,2,14128,$vararg_buffer10);
	 }
	 $15 = $res;
	 $retval = $15;
	 $16 = $retval;
	 STACKTOP = sp;return ($16|0);
	}
	function _xmmsc_visualization_start_handle($c,$res) {
	 $c = $c|0;
	 $res = $res|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
	 var $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call14 = 0, $call18 = 0, $call2 = 0, $call5 = 0, $error = 0, $error15 = 0, $frombool = 0, $frombool11 = 0, $id = 0, $res$addr = 0, $ret = 0, $state = 0, $state16 = 0, $state21 = 0, $state23 = 0;
	 var $state6 = 0, $state7 = 0, $tobool = 0, $tobool12 = 0, $tobool3 = 0, $type = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $call = (_xmmsc_result_visc_get($0)|0);
	 $v = $call;
	 $1 = $v;
	 $tobool = ($1|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14520;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14400;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $2 = $v;
	 $state = (($2) + 156|0);
	 $3 = HEAP32[$state>>2]|0;
	 if ((($3|0) == 3)) {
	  $9 = $res$addr;
	  $call10 = (_setup_udp_handle($9)|0);
	  $frombool11 = $call10&1;
	  $ret = $frombool11;
	  $10 = $ret;
	  $tobool12 = $10&1;
	  if ($tobool12) {
	   $20 = $v;
	   $state21 = (($20) + 156|0);
	   HEAP32[$state21>>2] = 5;
	  } else {
	   $call14 = (FUNCTION_TABLE_ii[3 & 15](14624)|0);
	   $11 = $c$addr;
	   $error15 = (($11) + 8|0);
	   HEAP32[$error15>>2] = $call14;
	   $12 = $v;
	   $state16 = (($12) + 156|0);
	   HEAP32[$state16>>2] = 4;
	   $13 = $v;
	   $type = (($13) + 152|0);
	   HEAP32[$type>>2] = 2;
	   $14 = $c$addr;
	   $15 = $v;
	   $id = (($15) + 160|0);
	   $16 = HEAP32[$id>>2]|0;
	   $17 = ($16|0)<(0);
	   $18 = $17 << 31 >> 31;
	   $19 = (_xmmsv_new_int($16,$18)|0);
	   $call18 = (___xmmsv_identity_xmmsv483($19)|0);
	   HEAP32[$vararg_buffer2>>2] = $call18;
	   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	   HEAP32[$vararg_ptr5>>2] = 0;
	   (_xmmsc_send_cmd($14,7,38,$vararg_buffer2)|0);
	  }
	  STACKTOP = sp;return;
	 } else if ((($3|0) == 1)) {
	  $4 = $res$addr;
	  $call2 = (_setup_shm_handle($4)|0);
	  $frombool = $call2&1;
	  $ret = $frombool;
	  $5 = $ret;
	  $tobool3 = $5&1;
	  if ($tobool3) {
	   $8 = $v;
	   $state7 = (($8) + 156|0);
	   HEAP32[$state7>>2] = 5;
	  } else {
	   $call5 = (FUNCTION_TABLE_ii[3 & 15](14560)|0);
	   $6 = $c$addr;
	   $error = (($6) + 8|0);
	   HEAP32[$error>>2] = $call5;
	   $7 = $v;
	   $state6 = (($7) + 156|0);
	   HEAP32[$state6>>2] = 2;
	  }
	  STACKTOP = sp;return;
	 } else if ((($3|0) == 4) | (($3|0) == 5)) {
	  STACKTOP = sp;return;
	 } else {
	  $21 = $v;
	  $state23 = (($21) + 156|0);
	  HEAP32[$state23>>2] = 4;
	  HEAP32[$vararg_buffer6>>2] = 14520;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 14504;
	  _xmmsc_log(0,2,14128,$vararg_buffer6);
	  STACKTOP = sp;return;
	 }
	}
	function ___xmmsv_identity_xmmsv483($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function _xmmsc_visualization_started($c,$vv) {
	 $c = $c|0;
	 $vv = $vv|0;
	 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c$addr = 0, $call = 0, $cmp = 0, $cmp$expand_i1_val = 0, $ipc = 0, $retval = 0, $state = 0;
	 var $tobool = 0, $tobool1 = 0, $tobool4 = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $vv$addr = $vv;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14672;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14184;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $8 = $$pre_trunc&1;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 14672;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 14208;
	  _xmmsc_log(0,2,14128,$vararg_buffer2);
	  $$expand_i1_val11 = 0;
	  $retval = $$expand_i1_val11;
	  $$pre_trunc = $retval;
	  $8 = $$pre_trunc&1;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $c$addr;
	 $4 = $vv$addr;
	 $call = (_get_dataset($3,$4)|0);
	 $v = $call;
	 $5 = $v;
	 $tobool4 = ($5|0)!=(0|0);
	 if ($tobool4) {
	  $6 = $v;
	  $state = (($6) + 156|0);
	  $7 = HEAP32[$state>>2]|0;
	  $cmp = ($7|0)==(5);
	  $cmp$expand_i1_val = $cmp&1;
	  $retval = $cmp$expand_i1_val;
	  $$pre_trunc = $retval;
	  $8 = $$pre_trunc&1;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 14672;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 14448;
	  _xmmsc_log(0,2,14128,$vararg_buffer6);
	  $$expand_i1_val13 = 0;
	  $retval = $$expand_i1_val13;
	  $$pre_trunc = $retval;
	  $8 = $$pre_trunc&1;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmmsc_visualization_errored($c,$vv) {
	 $c = $c|0;
	 $vv = $vv|0;
	 var $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $c$addr = 0, $call = 0, $cmp = 0, $cmp$expand_i1_val = 0, $ipc = 0, $retval = 0, $state = 0;
	 var $tobool = 0, $tobool1 = 0, $tobool4 = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp + 16|0;
	 $c$addr = $c;
	 $vv$addr = $vv;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14704;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14184;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $8 = $$pre_trunc&1;
	  STACKTOP = sp;return ($8|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 14704;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 14208;
	  _xmmsc_log(0,2,14128,$vararg_buffer2);
	  $$expand_i1_val11 = 0;
	  $retval = $$expand_i1_val11;
	  $$pre_trunc = $retval;
	  $8 = $$pre_trunc&1;
	  STACKTOP = sp;return ($8|0);
	 }
	 $3 = $c$addr;
	 $4 = $vv$addr;
	 $call = (_get_dataset($3,$4)|0);
	 $v = $call;
	 $5 = $v;
	 $tobool4 = ($5|0)!=(0|0);
	 if ($tobool4) {
	  $6 = $v;
	  $state = (($6) + 156|0);
	  $7 = HEAP32[$state>>2]|0;
	  $cmp = ($7|0)==(4);
	  $cmp$expand_i1_val = $cmp&1;
	  $retval = $cmp$expand_i1_val;
	  $$pre_trunc = $retval;
	  $8 = $$pre_trunc&1;
	  STACKTOP = sp;return ($8|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 14704;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 14448;
	  _xmmsc_log(0,2,14128,$vararg_buffer6);
	  $$expand_i1_val13 = 0;
	  $retval = $$expand_i1_val13;
	  $$pre_trunc = $retval;
	  $8 = $$pre_trunc&1;
	  STACKTOP = sp;return ($8|0);
	 }
	 return 0|0;
	}
	function _xmmsc_visualization_property_set($c,$vv,$key,$value) {
	 $c = $c|0;
	 $vv = $vv|0;
	 $key = $key|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0;
	 var $call13 = 0, $call14 = 0, $call15 = 0, $call8 = 0, $call9 = 0, $id = 0, $ipc = 0, $key$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $v = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0;
	 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp;
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 24|0;
	 $vararg_buffer = sp + 32|0;
	 $c$addr = $c;
	 $vv$addr = $vv;
	 $key$addr = $key;
	 $value$addr = $value;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14736;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14184;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 14736;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 14208;
	  _xmmsc_log(0,2,14128,$vararg_buffer2);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $3 = $c$addr;
	 $4 = $vv$addr;
	 $call = (_get_dataset($3,$4)|0);
	 $v = $call;
	 $5 = $v;
	 $tobool4 = ($5|0)!=(0|0);
	 if ($tobool4) {
	  $6 = $c$addr;
	  $7 = $v;
	  $id = (($7) + 160|0);
	  $8 = HEAP32[$id>>2]|0;
	  $9 = ($8|0)<(0);
	  $10 = $9 << 31 >> 31;
	  $11 = (_xmmsv_new_int($8,$10)|0);
	  $call8 = (___xmmsv_identity_xmmsv483($11)|0);
	  $12 = $key$addr;
	  $call9 = (_xmmsv_new_string($12)|0);
	  $call10 = (___xmmsv_null_to_none484($call9)|0);
	  $call11 = (___xmmsv_identity_xmmsv483($call10)|0);
	  $13 = $value$addr;
	  $call12 = (_xmmsv_new_string($13)|0);
	  $call13 = (___xmmsv_null_to_none484($call12)|0);
	  $call14 = (___xmmsv_identity_xmmsv483($call13)|0);
	  HEAP32[$vararg_buffer10>>2] = $call8;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = $call11;
	  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
	  HEAP32[$vararg_ptr14>>2] = $call14;
	  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
	  HEAP32[$vararg_ptr15>>2] = 0;
	  $call15 = (_xmmsc_send_cmd($6,7,36,$vararg_buffer10)|0);
	  $retval = $call15;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 14736;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 14776;
	  _xmmsc_log(0,2,14128,$vararg_buffer6);
	  $retval = 0;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 return 0|0;
	}
	function ___xmmsv_null_to_none484($v) {
	 $v = $v|0;
	 var $0 = 0, $1 = 0, $call = 0, $cond = 0, $tobool = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 $tobool = ($0|0)!=(0|0);
	 if ($tobool) {
	  $1 = $v$addr;
	  $cond = $1;
	 } else {
	  $call = (_xmmsv_new_none()|0);
	  $cond = $call;
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _xmmsc_visualization_properties_set($c,$vv,$props) {
	 $c = $c|0;
	 $vv = $vv|0;
	 $props = $props|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call10 = 0, $call14 = 0;
	 var $call15 = 0, $call16 = 0, $call17 = 0, $cmp = 0, $id = 0, $ipc = 0, $props$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool7 = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
	 var $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer18 = sp + 40|0;
	 $vararg_buffer14 = sp + 24|0;
	 $vararg_buffer10 = sp + 32|0;
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp;
	 $vararg_buffer = sp + 8|0;
	 $c$addr = $c;
	 $vv$addr = $vv;
	 $props$addr = $props;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14816;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14184;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 14816;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 14208;
	  _xmmsc_log(0,2,14128,$vararg_buffer2);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $3 = $c$addr;
	 $4 = $vv$addr;
	 $call = (_get_dataset($3,$4)|0);
	 $v = $call;
	 $5 = $v;
	 $tobool4 = ($5|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 14816;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 14776;
	  _xmmsc_log(0,2,14128,$vararg_buffer6);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $6 = $props$addr;
	 $tobool7 = ($6|0)!=(0|0);
	 if (!($tobool7)) {
	  HEAP32[$vararg_buffer10>>2] = 14816;
	  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	  HEAP32[$vararg_ptr13>>2] = 14856;
	  _xmmsc_log(0,2,14128,$vararg_buffer10);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $7 = $props$addr;
	 $call10 = (_xmmsv_get_type($7)|0);
	 $cmp = ($call10|0)!=(7);
	 if ($cmp) {
	  HEAP32[$vararg_buffer14>>2] = 14816;
	  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
	  HEAP32[$vararg_ptr17>>2] = 14880;
	  _xmmsc_log(0,2,14128,$vararg_buffer14);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 } else {
	  $8 = $c$addr;
	  $9 = $v;
	  $id = (($9) + 160|0);
	  $10 = HEAP32[$id>>2]|0;
	  $11 = ($10|0)<(0);
	  $12 = $11 << 31 >> 31;
	  $13 = (_xmmsv_new_int($10,$12)|0);
	  $call14 = (___xmmsv_identity_xmmsv483($13)|0);
	  $14 = $props$addr;
	  $call15 = (_xmmsv_ref($14)|0);
	  $call16 = (___xmmsv_identity_xmmsv483($call15)|0);
	  HEAP32[$vararg_buffer18>>2] = $call14;
	  $vararg_ptr21 = (($vararg_buffer18) + 4|0);
	  HEAP32[$vararg_ptr21>>2] = $call16;
	  $vararg_ptr22 = (($vararg_buffer18) + 8|0);
	  HEAP32[$vararg_ptr22>>2] = 0;
	  $call17 = (_xmmsc_send_cmd($8,7,37,$vararg_buffer18)|0);
	  $retval = $call17;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 return 0|0;
	}
	function _xmmsc_visualization_shutdown($c,$vv) {
	 $c = $c|0;
	 $vv = $vv|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
	 var $8 = 0, $9 = 0, $arrayidx = 0, $c$addr = 0, $call = 0, $call8 = 0, $cmp = 0, $cmp14 = 0, $id = 0, $ipc = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $type = 0, $type13 = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $visv = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer10 = sp;
	 $vararg_buffer6 = sp + 8|0;
	 $vararg_buffer2 = sp + 16|0;
	 $vararg_buffer = sp + 24|0;
	 $c$addr = $c;
	 $vv$addr = $vv;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14920;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14184;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  STACKTOP = sp;return;
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 14920;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 14208;
	  _xmmsc_log(0,2,14128,$vararg_buffer2);
	  STACKTOP = sp;return;
	 }
	 $3 = $c$addr;
	 $4 = $vv$addr;
	 $call = (_get_dataset($3,$4)|0);
	 $v = $call;
	 $5 = $v;
	 $tobool4 = ($5|0)!=(0|0);
	 if (!($tobool4)) {
	  HEAP32[$vararg_buffer6>>2] = 14920;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 14776;
	  _xmmsc_log(0,2,14128,$vararg_buffer6);
	  STACKTOP = sp;return;
	 }
	 $6 = $c$addr;
	 $7 = $v;
	 $id = (($7) + 160|0);
	 $8 = HEAP32[$id>>2]|0;
	 $9 = ($8|0)<(0);
	 $10 = $9 << 31 >> 31;
	 $11 = (_xmmsv_new_int($8,$10)|0);
	 $call8 = (___xmmsv_identity_xmmsv483($11)|0);
	 HEAP32[$vararg_buffer10>>2] = $call8;
	 $vararg_ptr13 = (($vararg_buffer10) + 4|0);
	 HEAP32[$vararg_ptr13>>2] = 0;
	 (_xmmsc_send_cmd($6,7,38,$vararg_buffer10)|0);
	 $12 = $v;
	 $type = (($12) + 152|0);
	 $13 = HEAP32[$type>>2]|0;
	 $cmp = ($13|0)==(0);
	 if ($cmp) {
	  $14 = $v;
	  _cleanup_shm($14);
	 }
	 $15 = $v;
	 $type13 = (($15) + 152|0);
	 $16 = HEAP32[$type13>>2]|0;
	 $cmp14 = ($16|0)==(1);
	 if ($cmp14) {
	  $17 = $v;
	  _cleanup_udp($17);
	 }
	 $18 = $v;
	 _free($18);
	 $19 = $vv$addr;
	 $20 = $c$addr;
	 $visv = (($20) + 24|0);
	 $21 = HEAP32[$visv>>2]|0;
	 $arrayidx = (($21) + ($19<<2)|0);
	 HEAP32[$arrayidx>>2] = 0;
	 STACKTOP = sp;return;
	}
	function _check_drawtime($ts,$drawtime) {
	 $ts = +$ts;
	 $drawtime = $drawtime|0;
	 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $add = 0, $call1 = 0.0, $cmp = 0, $cmp2 = 0, $cmp6 = 0, $conv = 0.0, $conv11 = 0, $diff = 0.0, $drawtime$addr = 0, $mul = 0.0, $mul10 = 0.0, $retval = 0;
	 var $sub = 0.0, $sub5 = 0.0, $time = 0, $ts$addr = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $time = sp + 16|0;
	 $ts$addr = $ts;
	 $drawtime$addr = $drawtime;
	 $0 = $drawtime$addr;
	 $cmp = ($0|0)<=(0);
	 if ($cmp) {
	  $retval = 0;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 (_gettimeofday(($time|0),(0|0))|0);
	 $1 = $ts$addr;
	 $call1 = (+_tv2ts($time));
	 $sub = $1 - $call1;
	 $diff = $sub;
	 $2 = $diff;
	 $cmp2 = $2 < 0.0;
	 if ($cmp2) {
	  $retval = 1;
	  $7 = $retval;
	  STACKTOP = sp;return ($7|0);
	 }
	 $3 = $drawtime$addr;
	 $add = (($3) + 10)|0;
	 $conv = (+($add|0));
	 $mul = $conv * 0.00100000000000000002082;
	 $4 = $diff;
	 $sub5 = $4 - $mul;
	 $diff = $sub5;
	 $5 = $diff;
	 $cmp6 = $5 < 0.0;
	 if ($cmp6) {
	  $diff = 0.0;
	 }
	 $6 = $diff;
	 $mul10 = $6 * 1000.0;
	 $conv11 = (~~(($mul10)));
	 (_xmms_sleep_ms($conv11)|0);
	 $retval = 0;
	 $7 = $retval;
	 STACKTOP = sp;return ($7|0);
	}
	function _xmmsc_visualization_chunk_get($c,$vv,$buffer,$drawtime,$blocking) {
	 $c = $c|0;
	 $vv = $vv|0;
	 $buffer = $buffer|0;
	 $drawtime = $drawtime|0;
	 $blocking = $blocking|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blocking$addr = 0, $buffer$addr = 0, $c$addr = 0, $call = 0, $call7 = 0, $drawtime$addr = 0, $ipc = 0, $retval = 0, $tobool = 0;
	 var $tobool1 = 0, $tobool4 = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $vv$addr = $vv;
	 $buffer$addr = $buffer;
	 $drawtime$addr = $drawtime;
	 $blocking$addr = $blocking;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 14952;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 14184;
	  _xmmsc_log(0,2,14128,$vararg_buffer);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 14952;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 14208;
	  _xmmsc_log(0,2,14128,$vararg_buffer2);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 $3 = $c$addr;
	 $4 = $vv$addr;
	 $call = (_get_dataset($3,$4)|0);
	 $v = $call;
	 $5 = $v;
	 $tobool4 = ($5|0)!=(0|0);
	 if ($tobool4) {
	  $6 = $v;
	  $7 = $buffer$addr;
	  $8 = $drawtime$addr;
	  $9 = $blocking$addr;
	  $call7 = (_package_read_do($6,$7,$8,$9)|0);
	  $retval = $call7;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 } else {
	  HEAP32[$vararg_buffer6>>2] = 14952;
	  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	  HEAP32[$vararg_ptr9>>2] = 14776;
	  _xmmsc_log(0,2,14128,$vararg_buffer6);
	  $retval = 0;
	  $10 = $retval;
	  STACKTOP = sp;return ($10|0);
	 }
	 return 0|0;
	}
	function _package_read_do($v,$buffer,$drawtime,$blocking) {
	 $v = $v|0;
	 $buffer = $buffer|0;
	 $drawtime = $drawtime|0;
	 $blocking = $blocking|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blocking$addr = 0, $buffer$addr = 0, $call = 0, $call5 = 0, $cmp = 0;
	 var $cmp2 = 0, $drawtime$addr = 0, $retval = 0, $type = 0, $type1 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $buffer$addr = $buffer;
	 $drawtime$addr = $drawtime;
	 $blocking$addr = $blocking;
	 $0 = $v$addr;
	 $type = (($0) + 152|0);
	 $1 = HEAP32[$type>>2]|0;
	 $cmp = ($1|0)==(0);
	 if ($cmp) {
	  $2 = $v$addr;
	  $3 = $v$addr;
	  $4 = $buffer$addr;
	  $5 = $drawtime$addr;
	  $6 = $blocking$addr;
	  $call = (_read_do_shm($2,$3,$4,$5,$6)|0);
	  $retval = $call;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $7 = $v$addr;
	 $type1 = (($7) + 152|0);
	 $8 = HEAP32[$type1>>2]|0;
	 $cmp2 = ($8|0)==(1);
	 if ($cmp2) {
	  $9 = $v$addr;
	  $10 = $v$addr;
	  $11 = $buffer$addr;
	  $12 = $drawtime$addr;
	  $13 = $blocking$addr;
	  $call5 = (_read_do_udp($9,$10,$11,$12,$13)|0);
	  $retval = $call5;
	  $14 = $retval;
	  STACKTOP = sp;return ($14|0);
	 }
	 $retval = -1;
	 $14 = $retval;
	 STACKTOP = sp;return ($14|0);
	}
	function _setup_udp_prepare($c,$vv) {
	 $c = $c|0;
	 $vv = $vv|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$addr = 0, $call = 0, $call5 = 0, $call6 = 0;
	 var $id = 0, $ipc = 0, $res = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool7 = 0, $v = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer6 = sp + 16|0;
	 $vararg_buffer2 = sp + 8|0;
	 $vararg_buffer = sp;
	 $c$addr = $c;
	 $vv$addr = $vv;
	 $0 = $c$addr;
	 $tobool = ($0|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 15008;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 15032;
	  _xmmsc_log(0,2,14984,$vararg_buffer);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $1 = $c$addr;
	 $ipc = (($1) + 4|0);
	 $2 = HEAP32[$ipc>>2]|0;
	 $tobool1 = ($2|0)!=(0|0);
	 if (!($tobool1)) {
	  HEAP32[$vararg_buffer2>>2] = 15008;
	  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
	  HEAP32[$vararg_ptr5>>2] = 15056;
	  _xmmsc_log(0,2,14984,$vararg_buffer2);
	  $retval = 0;
	  $15 = $retval;
	  STACKTOP = sp;return ($15|0);
	 }
	 $3 = $c$addr;
	 $4 = $vv$addr;
	 $call = (_get_dataset($3,$4)|0);
	 $v = $call;
	 $5 = $c$addr;
	 $6 = $v;
	 $id = (($6) + 160|0);
	 $7 = HEAP32[$id>>2]|0;
	 $8 = ($7|0)<(0);
	 $9 = $8 << 31 >> 31;
	 $10 = (_xmmsv_new_int($7,$9)|0);
	 $call5 = (___xmmsv_identity_xmmsv497($10)|0);
	 HEAP32[$vararg_buffer6>>2] = $call5;
	 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
	 HEAP32[$vararg_ptr9>>2] = 0;
	 $call6 = (_xmmsc_send_cmd($5,7,35,$vararg_buffer6)|0);
	 $res = $call6;
	 $11 = $res;
	 $tobool7 = ($11|0)!=(0|0);
	 if ($tobool7) {
	  $12 = $res;
	  $13 = $v;
	  _xmmsc_result_visc_set($12,$13);
	 }
	 $14 = $res;
	 $retval = $14;
	 $15 = $retval;
	 STACKTOP = sp;return ($15|0);
	}
	function ___xmmsv_identity_xmmsv497($v) {
	 $v = $v|0;
	 var $0 = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $v$addr = $v;
	 $0 = $v$addr;
	 STACKTOP = sp;return ($0|0);
	}
	function _setup_udp_handle($res) {
	 $res = $res|0;
	 var $$expand_i1_val = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $call5 = 0, $call7 = 0;
	 var $call8 = 0, $frombool = 0, $id = 0, $port = 0, $res$addr = 0, $ret = 0, $retval = 0, $t = 0, $tobool = 0, $tobool10 = 0, $tobool10$expand_i1_val = 0, $tobool3 = 0, $val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $visc = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $port = sp + 24|0;
	 $res$addr = $res;
	 $0 = $res$addr;
	 $call = (_xmmsc_result_visc_get($0)|0);
	 $visc = $call;
	 $1 = $visc;
	 $tobool = ($1|0)!=(0|0);
	 if (!($tobool)) {
	  HEAP32[$vararg_buffer>>2] = 15096;
	  $vararg_ptr1 = (($vararg_buffer) + 4|0);
	  HEAP32[$vararg_ptr1>>2] = 15120;
	  _xmmsc_log(0,2,14984,$vararg_buffer);
	  $$expand_i1_val = 1;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $12 = $$pre_trunc&1;
	  STACKTOP = sp;return ($12|0);
	 }
	 $2 = $visc;
	 $t = $2;
	 $3 = $res$addr;
	 $call1 = (_xmmsc_result_get_value($3)|0);
	 $call2 = (_xmmsv_is_error($call1)|0);
	 $tobool3 = ($call2|0)!=(0);
	 if ($tobool3) {
	  $ret = 0;
	 } else {
	  $4 = $res$addr;
	  $call5 = (_xmmsc_result_get_value($4)|0);
	  $val = $call5;
	  $5 = $val;
	  (_xmmsv_get_int32($5,$port)|0);
	  $6 = $res$addr;
	  $call7 = (_xmmsc_result_get_connection($6)|0);
	  $7 = $t;
	  $8 = $visc;
	  $id = (($8) + 160|0);
	  $9 = HEAP32[$id>>2]|0;
	  $10 = HEAP32[$port>>2]|0;
	  $call8 = (_setup_socket($call7,$7,$9,$10)|0);
	  $frombool = $call8&1;
	  $ret = $frombool;
	 }
	 $11 = $ret;
	 $tobool10 = $11&1;
	 $tobool10$expand_i1_val = $tobool10&1;
	 $retval = $tobool10$expand_i1_val;
	 $$pre_trunc = $retval;
	 $12 = $$pre_trunc&1;
	 STACKTOP = sp;return ($12|0);
	}
	function _setup_socket($c,$t,$id,$port) {
	 $c = $c|0;
	 $t = $t|0;
	 $id = $id|0;
	 $port = $port|0;
	 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
	 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
	 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai_addr = 0, $ai_addr35 = 0, $ai_addrlen = 0;
	 var $ai_addrlen36 = 0, $ai_family = 0, $ai_family10 = 0, $ai_family27 = 0, $ai_next = 0, $ai_protocol = 0, $ai_protocol12 = 0, $ai_protocol29 = 0, $ai_socktype = 0, $ai_socktype11 = 0, $ai_socktype28 = 0, $arrayidx = 0, $arrayidx32 = 0, $arrayidx34 = 0, $arrayidx52 = 0, $c$addr = 0, $call13 = 0, $call15 = 0, $call2 = 0, $call21 = 0;
	 var $call3 = 0, $call30 = 0, $call43 = 0, $call47 = 0, $call5 = 0, $call53 = 0.0, $call7 = 0, $cmp = 0, $cmp22 = 0, $cmp41 = 0, $cmp9 = 0, $error = 0, $error44 = 0, $hints = 0, $host = 0, $id$addr = 0, $packet = 0, $packet_id = 0, $path = 0, $port$addr = 0;
	 var $portstr = 0, $result = 0, $retval = 0, $rp = 0, $socket = 0, $socket19 = 0, $socket24 = 0, $socket31 = 0, $socket33 = 0, $socket38 = 0, $socket48 = 0, $socket51 = 0, $t$addr = 0, $timediff = 0, $tobool = 0, $tobool16 = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $hints = sp + 16|0;
	 $result = sp + 60|0;
	 $portstr = sp + 78|0;
	 $packet = sp + 73|0;
	 $c$addr = $c;
	 $t$addr = $t;
	 $id$addr = $id;
	 $port$addr = $port;
	 $arrayidx = (($packet) + 1|0);
	 $packet_id = $arrayidx;
	 $0 = $port$addr;
	 HEAP32[$vararg_buffer>>2] = $0;
	 (_sprintf($portstr,15160,$vararg_buffer)|0);
	 ;HEAP32[$hints+0>>2]=0|0;HEAP32[$hints+4>>2]=0|0;HEAP32[$hints+8>>2]=0|0;HEAP32[$hints+12>>2]=0|0;HEAP32[$hints+16>>2]=0|0;HEAP32[$hints+20>>2]=0|0;HEAP32[$hints+24>>2]=0|0;HEAP32[$hints+28>>2]=0|0;
	 $ai_family = (($hints) + 4|0);
	 HEAP32[$ai_family>>2] = 0;
	 $ai_socktype = (($hints) + 8|0);
	 HEAP32[$ai_socktype>>2] = 2;
	 HEAP32[$hints>>2] = 0;
	 $ai_protocol = (($hints) + 12|0);
	 HEAP32[$ai_protocol>>2] = 0;
	 $1 = $c$addr;
	 $path = (($1) + 44|0);
	 $call2 = (_xmms_ipc_hostname($path)|0);
	 $host = $call2;
	 $2 = $host;
	 $tobool = ($2|0)!=(0|0);
	 if (!($tobool)) {
	  $call3 = (FUNCTION_TABLE_ii[3 & 15](15168)|0);
	  $host = $call3;
	 }
	 $3 = $host;
	 $call5 = (_xmms_getaddrinfo($3,$portstr,$hints,$result)|0);
	 $cmp = ($call5|0)!=(0);
	 if ($cmp) {
	  $call7 = (FUNCTION_TABLE_ii[3 & 15](15184)|0);
	  $4 = $c$addr;
	  $error = (($4) + 8|0);
	  HEAP32[$error>>2] = $call7;
	  $5 = $host;
	  _free($5);
	  $$expand_i1_val = 0;
	  $retval = $$expand_i1_val;
	  $$pre_trunc = $retval;
	  $52 = $$pre_trunc&1;
	  STACKTOP = sp;return ($52|0);
	 }
	 $6 = $host;
	 _free($6);
	 $7 = HEAP32[$result>>2]|0;
	 $rp = $7;
	 while(1) {
	  $8 = $rp;
	  $cmp9 = ($8|0)!=(0|0);
	  if (!($cmp9)) {
	   break;
	  }
	  $9 = $rp;
	  $ai_family10 = (($9) + 4|0);
	  $10 = HEAP32[$ai_family10>>2]|0;
	  $11 = $rp;
	  $ai_socktype11 = (($11) + 8|0);
	  $12 = HEAP32[$ai_socktype11>>2]|0;
	  $13 = $rp;
	  $ai_protocol12 = (($13) + 12|0);
	  $14 = HEAP32[$ai_protocol12>>2]|0;
	  $call13 = (_socket(($10|0),($12|0),($14|0))|0);
	  $15 = $t$addr;
	  $socket = (($15) + 128|0);
	  HEAP32[$socket>>2] = $call13;
	  $call15 = (_xmms_socket_valid($call13)|0);
	  $tobool16 = ($call15|0)!=(0);
	  if ($tobool16) {
	   $16 = $t$addr;
	   $socket19 = (($16) + 128|0);
	   $17 = HEAP32[$socket19>>2]|0;
	   $18 = $rp;
	   $ai_addr = (($18) + 20|0);
	   $19 = HEAP32[$ai_addr>>2]|0;
	   $20 = $rp;
	   $ai_addrlen = (($20) + 16|0);
	   $21 = HEAP32[$ai_addrlen>>2]|0;
	   $call21 = (_connect(($17|0),($19|0),($21|0))|0);
	   $cmp22 = ($call21|0)!=(-1);
	   if ($cmp22) {
	    label = 10;
	    break;
	   }
	   $37 = $t$addr;
	   $socket38 = (($37) + 128|0);
	   $38 = HEAP32[$socket38>>2]|0;
	   _xmms_socket_close($38);
	  } else {
	  }
	  $39 = $rp;
	  $ai_next = (($39) + 28|0);
	  $40 = HEAP32[$ai_next>>2]|0;
	  $rp = $40;
	 }
	 if ((label|0) == 10) {
	  $22 = $t$addr;
	  $socket24 = (($22) + 128|0);
	  $23 = HEAP32[$socket24>>2]|0;
	  (_xmms_socket_set_nonblock($23)|0);
	  $24 = $rp;
	  $ai_family27 = (($24) + 4|0);
	  $25 = HEAP32[$ai_family27>>2]|0;
	  $26 = $rp;
	  $ai_socktype28 = (($26) + 8|0);
	  $27 = HEAP32[$ai_socktype28>>2]|0;
	  $28 = $rp;
	  $ai_protocol29 = (($28) + 12|0);
	  $29 = HEAP32[$ai_protocol29>>2]|0;
	  $call30 = (_socket(($25|0),($27|0),($29|0))|0);
	  $30 = $t$addr;
	  $socket31 = (($30) + 128|0);
	  $arrayidx32 = (($socket31) + 4|0);
	  HEAP32[$arrayidx32>>2] = $call30;
	  $31 = $t$addr;
	  $socket33 = (($31) + 128|0);
	  $arrayidx34 = (($socket33) + 4|0);
	  $32 = HEAP32[$arrayidx34>>2]|0;
	  $33 = $rp;
	  $ai_addr35 = (($33) + 20|0);
	  $34 = HEAP32[$ai_addr35>>2]|0;
	  $35 = $rp;
	  $ai_addrlen36 = (($35) + 16|0);
	  $36 = HEAP32[$ai_addrlen36>>2]|0;
	  (_connect(($32|0),($34|0),($36|0))|0);
	 }
	 $41 = $rp;
	 $cmp41 = ($41|0)==(0|0);
	 if ($cmp41) {
	  $call43 = (FUNCTION_TABLE_ii[3 & 15](15208)|0);
	  $42 = $c$addr;
	  $error44 = (($42) + 8|0);
	  HEAP32[$error44>>2] = $call43;
	  $$expand_i1_val2 = 0;
	  $retval = $$expand_i1_val2;
	  $$pre_trunc = $retval;
	  $52 = $$pre_trunc&1;
	  STACKTOP = sp;return ($52|0);
	 } else {
	  $43 = HEAP32[$result>>2]|0;
	  _xmms_freeaddrinfo($43);
	  HEAP8[$packet>>0] = 72;
	  $44 = $id$addr;
	  $call47 = (_htonl(($44|0))|0);
	  $45 = $packet_id;
	  HEAP32[$45>>2] = $call47;
	  $46 = $t$addr;
	  $socket48 = (($46) + 128|0);
	  $47 = HEAP32[$socket48>>2]|0;
	  (_send(($47|0),($packet|0),5,0)|0);
	  $48 = $id$addr;
	  $49 = $t$addr;
	  $socket51 = (($49) + 128|0);
	  $arrayidx52 = (($socket51) + 4|0);
	  $50 = HEAP32[$arrayidx52>>2]|0;
	  $call53 = (+_udp_timediff($48,$50));
	  $51 = $t$addr;
	  $timediff = (($51) + 136|0);
	  HEAPF64[$timediff>>3] = $call53;
	  $$expand_i1_val4 = 1;
	  $retval = $$expand_i1_val4;
	  $$pre_trunc = $retval;
	  $52 = $$pre_trunc&1;
	  STACKTOP = sp;return ($52|0);
	 }
	 return 0|0;
	}
	function _cleanup_udp($t) {
	 $t = $t|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arrayidx2 = 0, $socket = 0, $socket1 = 0, $t$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $t$addr = $t;
	 $0 = $t$addr;
	 $socket = (($0) + 128|0);
	 $1 = HEAP32[$socket>>2]|0;
	 _xmms_socket_close($1);
	 $2 = $t$addr;
	 $socket1 = (($2) + 128|0);
	 $arrayidx2 = (($socket1) + 4|0);
	 $3 = HEAP32[$arrayidx2>>2]|0;
	 _xmms_socket_close($3);
	 STACKTOP = sp;return;
	}
	function _read_do_udp($t,$v,$buffer,$drawtime,$blocking) {
	 $t = $t|0;
	 $v = $v|0;
	 $buffer = $buffer|0;
	 $drawtime = $drawtime|0;
	 $blocking = $blocking|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, $__s8 = 0, $__unaligned_data = 0, $__unaligned_grace = 0, $arrayidx21 = 0, $arrayidx30 = 0, $arrayidx66 = 0, $arrayidx68 = 0;
	 var $blocking$addr = 0, $buffer$addr = 0, $call = 0, $call10 = 0, $call22 = 0.0, $call28 = 0, $call3 = 0, $call31 = 0, $call32 = 0.0, $call47 = 0, $call56 = 0.0, $call57 = 0, $call61 = 0, $call67 = 0, $cmp = 0, $cmp12 = 0, $cmp16 = 0, $cmp36 = 0, $cmp4 = 0, $cmp41 = 0;
	 var $cmp45 = 0, $cmp63 = 0, $conv = 0, $conv11 = 0, $conv24 = 0, $conv40 = 0, $conv62 = 0, $data = 0, $data65 = 0, $drawtime$addr = 0, $grace = 0, $grace15 = 0, $grace19 = 0, $grace25 = 0, $i = 0, $id = 0, $inc = 0, $interim = 0.0, $old = 0, $packet = 0;
	 var $packet_d = 0, $ret = 0, $retval = 0, $rtv = 0, $size = 0, $size2 = 0, $size60 = 0, $socket = 0, $socket20 = 0, $sub = 0.0, $t$addr = 0, $timediff = 0, $timediff33 = 0, $tobool = 0, $tobool58 = 0, $tobool70 = 0, $tv_usec = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 2160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $packet_d = sp + 48|0;
	 $data = sp + 68|0;
	 $grace = sp + 2144|0;
	 $rtv = sp + 8|0;
	 $t$addr = $t;
	 $v$addr = $v;
	 $buffer$addr = $buffer;
	 $drawtime$addr = $drawtime;
	 $blocking$addr = $blocking;
	 $call = (_packet_init_data($packet_d)|0);
	 $packet = $call;
	 $0 = $blocking$addr;
	 $tobool = ($0|0)!=(0);
	 if ($tobool) {
	  $1 = $t$addr;
	  $2 = $blocking$addr;
	  (_wait_for_socket($1,$2)|0);
	 }
	 $3 = $t$addr;
	 $socket = (($3) + 128|0);
	 $4 = HEAP32[$socket>>2]|0;
	 $5 = $packet;
	 $size2 = (($packet_d) + 12|0);
	 $6 = HEAP32[$size2>>2]|0;
	 $call3 = (_recv(($4|0),($5|0),($6|0),0)|0);
	 $ret = $call3;
	 $7 = $ret;
	 $cmp = ($7|0)>(0);
	 if ($cmp) {
	  $8 = HEAP32[$packet_d>>2]|0;
	  $9 = HEAP8[$8>>0]|0;
	  $conv = $9 << 24 >> 24;
	  $cmp4 = ($conv|0)==(86);
	  if ($cmp4) {
	   $__unaligned_data = (($packet_d) + 8|0);
	   $10 = HEAP32[$__unaligned_data>>2]|0;
	   $__s = $10;
	   $11 = $__s;
	   _memcpy(($data|0),($11|0),2060)|0;
	   $__unaligned_grace = (($packet_d) + 4|0);
	   $12 = HEAP32[$__unaligned_grace>>2]|0;
	   $__s8 = $12;
	   $13 = $__s8;
	   ;HEAP16[$grace+0>>1]=HEAP16[$13+0>>1]|0;
	   $14 = HEAP16[$grace>>1]|0;
	   $call10 = (_ntohs(($14|0))|0);
	   HEAP16[$grace>>1] = $call10;
	   $15 = HEAP16[$grace>>1]|0;
	   $conv11 = $15&65535;
	   $cmp12 = ($conv11|0)<(1000);
	   if ($cmp12) {
	    $16 = $t$addr;
	    $grace15 = (($16) + 144|0);
	    $17 = HEAP32[$grace15>>2]|0;
	    $cmp16 = ($17|0)!=(0);
	    if ($cmp16) {
	     $18 = $t$addr;
	     $grace19 = (($18) + 144|0);
	     HEAP32[$grace19>>2] = 0;
	     $19 = $v$addr;
	     $id = (($19) + 160|0);
	     $20 = HEAP32[$id>>2]|0;
	     $21 = $t$addr;
	     $socket20 = (($21) + 128|0);
	     $arrayidx21 = (($socket20) + 4|0);
	     $22 = HEAP32[$arrayidx21>>2]|0;
	     $call22 = (+_udp_timediff($20,$22));
	     $23 = $t$addr;
	     $timediff = (($23) + 136|0);
	     HEAPF64[$timediff>>3] = $call22;
	    }
	   } else {
	    $24 = HEAP16[$grace>>1]|0;
	    $conv24 = $24&65535;
	    $25 = $t$addr;
	    $grace25 = (($25) + 144|0);
	    HEAP32[$grace25>>2] = $conv24;
	   }
	   $26 = HEAP32[$data>>2]|0;
	   $call28 = (_ntohl(($26|0))|0);
	   HEAP32[$rtv>>2] = $call28;
	   $arrayidx30 = (($data) + 4|0);
	   $27 = HEAP32[$arrayidx30>>2]|0;
	   $call31 = (_ntohl(($27|0))|0);
	   $tv_usec = (($rtv) + 4|0);
	   HEAP32[$tv_usec>>2] = $call31;
	   $call32 = (+_tv2ts($rtv));
	   $interim = $call32;
	   $28 = $t$addr;
	   $timediff33 = (($28) + 136|0);
	   $29 = +HEAPF64[$timediff33>>3];
	   $30 = $interim;
	   $sub = $30 - $29;
	   $interim = $sub;
	   $31 = $interim;
	   _ts2net($data,$31);
	   $ret = 1;
	   $call56 = (+_net2ts($data));
	   $38 = $drawtime$addr;
	   $call57 = (_check_drawtime($call56,$38)|0);
	   $old = $call57;
	   $39 = $old;
	   $tobool58 = ($39|0)!=(0);
	   if (!($tobool58)) {
	    $size60 = (($data) + 10|0);
	    $40 = HEAP16[$size60>>1]|0;
	    $call61 = (_ntohs(($40|0))|0);
	    $conv62 = $call61&65535;
	    $size = $conv62;
	    $i = 0;
	    while(1) {
	     $41 = $i;
	     $42 = $size;
	     $cmp63 = ($41|0)<($42|0);
	     if (!($cmp63)) {
	      break;
	     }
	     $43 = $i;
	     $data65 = (($data) + 12|0);
	     $arrayidx66 = (($data65) + ($43<<1)|0);
	     $44 = HEAP16[$arrayidx66>>1]|0;
	     $call67 = (_ntohs(($44|0))|0);
	     $45 = $i;
	     $46 = $buffer$addr;
	     $arrayidx68 = (($46) + ($45<<1)|0);
	     HEAP16[$arrayidx68>>1] = $call67;
	     $47 = $i;
	     $inc = (($47) + 1)|0;
	     $i = $inc;
	    }
	   }
	   $48 = $packet;
	   _free($48);
	   $49 = $old;
	   $tobool70 = ($49|0)!=(0);
	   if ($tobool70) {
	    $retval = 0;
	    $51 = $retval;
	    STACKTOP = sp;return ($51|0);
	   } else {
	    $50 = $size;
	    $retval = $50;
	    $51 = $retval;
	    STACKTOP = sp;return ($51|0);
	   }
	  }
	 }
	 $32 = $ret;
	 $cmp36 = ($32|0)==(1);
	 if ($cmp36) {
	  $33 = HEAP32[$packet_d>>2]|0;
	  $34 = HEAP8[$33>>0]|0;
	  $conv40 = $34 << 24 >> 24;
	  $cmp41 = ($conv40|0)==(75);
	  if ($cmp41) {
	   $ret = -1;
	  } else {
	   label = 18;
	  }
	 } else {
	  label = 18;
	 }
	 if ((label|0) == 18) {
	  $35 = $ret;
	  $cmp45 = ($35|0)>(-1);
	  if ($cmp45) {
	   label = 20;
	  } else {
	   $call47 = (_xmms_socket_error_recoverable()|0);
	   if ($call47) {
	    label = 20;
	   } else {
	    $ret = -1;
	   }
	  }
	  if ((label|0) == 20) {
	   $ret = 0;
	  }
	 }
	 $36 = $packet;
	 _free($36);
	 $37 = $ret;
	 $retval = $37;
	 $51 = $retval;
	 STACKTOP = sp;return ($51|0);
	}
	function _wait_for_socket($t,$blocking) {
	 $t = $t|0;
	 $blocking = $blocking|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__b = 0, $__i = 0, $add = 0, $arrayidx4 = 0, $blocking$addr = 0, $call = 0, $dec = 0;
	 var $div = 0, $div5 = 0, $incdec$ptr = 0, $mul = 0, $or = 0, $rem = 0, $rem6 = 0, $ret = 0, $rfds = 0, $shl = 0, $socket = 0, $socket1 = 0, $socket7 = 0, $t$addr = 0, $time = 0, $tobool = 0, $tv_usec = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $rfds = sp + 32|0;
	 $time = sp + 8|0;
	 $t$addr = $t;
	 $blocking$addr = $blocking;
	 $__b = $rfds;
	 $__i = 32;
	 while(1) {
	  $0 = $__i;
	  $tobool = ($0|0)!=(0);
	  if (!($tobool)) {
	   break;
	  }
	  $1 = $__b;
	  $incdec$ptr = (($1) + 4|0);
	  $__b = $incdec$ptr;
	  HEAP32[$1>>2] = 0;
	  $2 = $__i;
	  $dec = (($2) + -1)|0;
	  $__i = $dec;
	 }
	 $3 = $t$addr;
	 $socket = (($3) + 128|0);
	 $4 = HEAP32[$socket>>2]|0;
	 $rem = (($4>>>0) % 32)&-1;
	 $shl = 1 << $rem;
	 $5 = $t$addr;
	 $socket1 = (($5) + 128|0);
	 $6 = HEAP32[$socket1>>2]|0;
	 $div = (($6>>>0) / 32)&-1;
	 $arrayidx4 = (($rfds) + ($div<<2)|0);
	 $7 = HEAP32[$arrayidx4>>2]|0;
	 $or = $7 | $shl;
	 HEAP32[$arrayidx4>>2] = $or;
	 $8 = $blocking$addr;
	 $div5 = (($8>>>0) / 1000)&-1;
	 HEAP32[$time>>2] = $div5;
	 $9 = $blocking$addr;
	 $rem6 = (($9>>>0) % 1000)&-1;
	 $mul = ($rem6*1000)|0;
	 $tv_usec = (($time) + 4|0);
	 HEAP32[$tv_usec>>2] = $mul;
	 $10 = $t$addr;
	 $socket7 = (($10) + 128|0);
	 $11 = HEAP32[$socket7>>2]|0;
	 $add = (($11) + 1)|0;
	 $call = (_select(($add|0),($rfds|0),(0|0),(0|0),($time|0))|0);
	 $ret = $call;
	 $12 = $ret;
	 STACKTOP = sp;return ($12|0);
	}
	function _udp_timediff($id,$socket) {
	 $id = $id|0;
	 $socket = $socket|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__d = 0;
	 var $__d4 = 0, $__d9 = 0, $__s = 0, $__s12 = 0, $__s26 = 0, $__s32 = 0, $__s47 = 0, $__s5 = 0, $__s52 = 0, $__unaligned_clientstamp = 0, $__unaligned_clientstamp10 = 0, $__unaligned_clientstamp27 = 0, $__unaligned_clientstamp33 = 0, $__unaligned_id = 0, $__unaligned_serverstamp = 0, $__unaligned_serverstamp53 = 0, $add = 0.0, $arrayidx11 = 0, $arrayidx34 = 0, $arrayidx54 = 0;
	 var $call = 0, $call13 = 0, $call19 = 0, $call2 = 0, $call38 = 0, $call41 = 0, $call43 = 0.0, $call44 = 0.0, $call58 = 0, $call6 = 0, $call61 = 0, $call63 = 0.0, $cmp = 0, $cmp21 = 0, $cmp22 = 0, $cmp66 = 0, $conv = 0, $conv70 = 0.0, $diff = 0.0, $diffc = 0;
	 var $div = 0.0, $div71 = 0.0, $i = 0, $id$addr = 0, $inc = 0, $inc45 = 0, $lag = 0.0, $packet = 0, $packet_d = 0, $rtv = 0, $size = 0, $size18 = 0, $size20 = 0, $socket$addr = 0, $sub = 0.0, $sub64 = 0.0, $time = 0, $tv_usec = 0, $tv_usec35 = 0, $tv_usec40 = 0;
	 var $tv_usec42 = 0, $tv_usec55 = 0, $tv_usec60 = 0, $tv_usec62 = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $time = sp + 32|0;
	 $packet_d = sp + 56|0;
	 $__s = sp + 48|0;
	 $__s5 = sp + 84|0;
	 $__s12 = sp + 92|0;
	 $rtv = sp + 96|0;
	 $id$addr = $id;
	 $socket$addr = $socket;
	 $diff = 0.0;
	 $diffc = 0;
	 $call = (_packet_init_timing($packet_d)|0);
	 $packet = $call;
	 (_gettimeofday(($time|0),(0|0))|0);
	 $__unaligned_id = (($packet_d) + 4|0);
	 $0 = HEAP32[$__unaligned_id>>2]|0;
	 $__d = $0;
	 $1 = $id$addr;
	 $call2 = (_htonl(($1|0))|0);
	 HEAP32[$__s>>2] = $call2;
	 $2 = $__d;
	 ;HEAP32[$2+0>>2]=HEAP32[$__s+0>>2]|0;
	 $__unaligned_clientstamp = (($packet_d) + 8|0);
	 $3 = HEAP32[$__unaligned_clientstamp>>2]|0;
	 $__d4 = $3;
	 $4 = HEAP32[$time>>2]|0;
	 $call6 = (_htonl(($4|0))|0);
	 HEAP32[$__s5>>2] = $call6;
	 $5 = $__d4;
	 ;HEAP32[$5+0>>2]=HEAP32[$__s5+0>>2]|0;
	 $__unaligned_clientstamp10 = (($packet_d) + 8|0);
	 $6 = HEAP32[$__unaligned_clientstamp10>>2]|0;
	 $arrayidx11 = (($6) + 4|0);
	 $__d9 = $arrayidx11;
	 $tv_usec = (($time) + 4|0);
	 $7 = HEAP32[$tv_usec>>2]|0;
	 $call13 = (_htonl(($7|0))|0);
	 HEAP32[$__s12>>2] = $call13;
	 $8 = $__d9;
	 ;HEAP32[$8+0>>2]=HEAP32[$__s12+0>>2]|0;
	 $i = 0;
	 while(1) {
	  $9 = $i;
	  $cmp = ($9|0)<(10);
	  if (!($cmp)) {
	   break;
	  }
	  $10 = $socket$addr;
	  $11 = $packet;
	  $size = (($packet_d) + 16|0);
	  $12 = HEAP32[$size>>2]|0;
	  (_send(($10|0),($11|0),($12|0),0)|0);
	  $13 = $i;
	  $inc = (($13) + 1)|0;
	  $i = $inc;
	 }
	 (_printf((15136|0),($vararg_buffer|0))|0);
	 while(1) {
	  $14 = $socket$addr;
	  $15 = $packet;
	  $size18 = (($packet_d) + 16|0);
	  $16 = HEAP32[$size18>>2]|0;
	  $call19 = (_recv(($14|0),($15|0),($16|0),0)|0);
	  $size20 = (($packet_d) + 16|0);
	  $17 = HEAP32[$size20>>2]|0;
	  $cmp21 = ($call19|0)==($17|0);
	  if ($cmp21) {
	   $18 = HEAP32[$packet_d>>2]|0;
	   $19 = HEAP8[$18>>0]|0;
	   $conv = $19 << 24 >> 24;
	   $cmp22 = ($conv|0)==(84);
	   if ($cmp22) {
	    (_gettimeofday(($time|0),(0|0))|0);
	    $__unaligned_clientstamp27 = (($packet_d) + 8|0);
	    $20 = HEAP32[$__unaligned_clientstamp27>>2]|0;
	    $__s26 = $20;
	    $21 = $__s26;
	    ;HEAP32[$rtv+0>>2]=HEAP32[$21+0>>2]|0;
	    $__unaligned_clientstamp33 = (($packet_d) + 8|0);
	    $22 = HEAP32[$__unaligned_clientstamp33>>2]|0;
	    $arrayidx34 = (($22) + 4|0);
	    $__s32 = $arrayidx34;
	    $tv_usec35 = (($rtv) + 4|0);
	    $23 = $__s32;
	    ;HEAP32[$tv_usec35+0>>2]=HEAP32[$23+0>>2]|0;
	    $24 = HEAP32[$rtv>>2]|0;
	    $call38 = (_ntohl(($24|0))|0);
	    HEAP32[$rtv>>2] = $call38;
	    $tv_usec40 = (($rtv) + 4|0);
	    $25 = HEAP32[$tv_usec40>>2]|0;
	    $call41 = (_ntohl(($25|0))|0);
	    $tv_usec42 = (($rtv) + 4|0);
	    HEAP32[$tv_usec42>>2] = $call41;
	    $call43 = (+_tv2ts($time));
	    $call44 = (+_tv2ts($rtv));
	    $sub = $call43 - $call44;
	    $div = $sub / 2.0;
	    $lag = $div;
	    $26 = $diffc;
	    $inc45 = (($26) + 1)|0;
	    $diffc = $inc45;
	    $__unaligned_serverstamp = (($packet_d) + 12|0);
	    $27 = HEAP32[$__unaligned_serverstamp>>2]|0;
	    $__s47 = $27;
	    $28 = $__s47;
	    ;HEAP32[$rtv+0>>2]=HEAP32[$28+0>>2]|0;
	    $__unaligned_serverstamp53 = (($packet_d) + 12|0);
	    $29 = HEAP32[$__unaligned_serverstamp53>>2]|0;
	    $arrayidx54 = (($29) + 4|0);
	    $__s52 = $arrayidx54;
	    $tv_usec55 = (($rtv) + 4|0);
	    $30 = $__s52;
	    ;HEAP32[$tv_usec55+0>>2]=HEAP32[$30+0>>2]|0;
	    $31 = HEAP32[$rtv>>2]|0;
	    $call58 = (_ntohl(($31|0))|0);
	    HEAP32[$rtv>>2] = $call58;
	    $tv_usec60 = (($rtv) + 4|0);
	    $32 = HEAP32[$tv_usec60>>2]|0;
	    $call61 = (_ntohl(($32|0))|0);
	    $tv_usec62 = (($rtv) + 4|0);
	    HEAP32[$tv_usec62>>2] = $call61;
	    $call63 = (+_tv2ts($rtv));
	    $33 = $lag;
	    $sub64 = $call63 - $33;
	    $34 = $diff;
	    $add = $34 + $sub64;
	    $diff = $add;
	    (_putchar(46)|0);
	   }
	  }
	  $35 = $diffc;
	  $cmp66 = ($35|0)<(10);
	  if (!($cmp66)) {
	   break;
	  }
	 }
	 $36 = $packet;
	 _free($36);
	 (_puts((15152|0))|0);
	 $37 = $diff;
	 $38 = $diffc;
	 $conv70 = (+($38|0));
	 $div71 = $37 / $conv70;
	 STACKTOP = sp;return (+$div71);
	}
	function _setup_shm_prepare($c,$vv) {
	 $c = $c|0;
	 $vv = $vv|0;
	 var $c$addr = 0, $vv$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $vv$addr = $vv;
	 STACKTOP = sp;return (0|0);
	}
	function _setup_shm_handle($res) {
	 $res = $res|0;
	 var $res$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 STACKTOP = sp;return 0;
	}
	function _cleanup_shm($t) {
	 $t = $t|0;
	 var $t$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $t$addr = $t;
	 STACKTOP = sp;return;
	}
	function _read_do_shm($t,$v,$buffer,$drawtime,$blocking) {
	 $t = $t|0;
	 $v = $v|0;
	 $buffer = $buffer|0;
	 $drawtime = $drawtime|0;
	 $blocking = $blocking|0;
	 var $blocking$addr = 0, $buffer$addr = 0, $drawtime$addr = 0, $t$addr = 0, $v$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $t$addr = $t;
	 $v$addr = $v;
	 $buffer$addr = $buffer;
	 $drawtime$addr = $drawtime;
	 $blocking$addr = $blocking;
	 STACKTOP = sp;return -1;
	}
	function _xmmsc_mainloop_emscripten_init($c) {
	 $c = $c|0;
	 var $0 = 0, $c$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c$addr = $c;
	 $0 = $c$addr;
	 HEAP32[15232>>2] = $0;
	 _emscripten_set_main_loop((15|0),30,0);
	 STACKTOP = sp;return;
	}
	function _xmmsc_mainloop_emscripten_loop() {
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
	 var $7 = 0, $8 = 0, $9 = 0, $__b = 0, $__b4 = 0, $__i = 0, $__i3 = 0, $add = 0, $and = 0, $and40 = 0, $arrayidx = 0, $arrayidx21 = 0, $arrayidx28 = 0, $arrayidx37 = 0, $call = 0, $call15 = 0, $call23 = 0, $cmp = 0, $dec = 0, $dec12 = 0;
	 var $div = 0, $div19 = 0, $div26 = 0, $div35 = 0, $fd = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $or = 0, $or22 = 0, $rem = 0, $rem17 = 0, $rem29 = 0, $rem38 = 0, $rfdset = 0, $shl = 0, $shl18 = 0, $shl30 = 0, $shl39 = 0, $tmout = 0, $tobool = 0;
	 var $tobool16 = 0, $tobool31 = 0, $tobool41 = 0, $tobool8 = 0, $wfdset = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $rfdset = sp + 8|0;
	 $wfdset = sp + 144|0;
	 $tmout = sp + 272|0;
	 $0 = HEAP32[15232>>2]|0;
	 $call = (_xmmsc_io_fd_get($0)|0);
	 $fd = $call;
	 ;HEAP32[$tmout+0>>2]=0|0;HEAP32[$tmout+4>>2]=0|0;
	 $__b = $rfdset;
	 $__i = 32;
	 while(1) {
	  $1 = $__i;
	  $tobool = ($1|0)!=(0);
	  if (!($tobool)) {
	   break;
	  }
	  $2 = $__b;
	  $incdec$ptr = (($2) + 4|0);
	  $__b = $incdec$ptr;
	  HEAP32[$2>>2] = 0;
	  $3 = $__i;
	  $dec = (($3) + -1)|0;
	  $__i = $dec;
	 }
	 $4 = $fd;
	 $rem = (($4>>>0) % 32)&-1;
	 $shl = 1 << $rem;
	 $5 = $fd;
	 $div = (($5>>>0) / 32)&-1;
	 $arrayidx = (($rfdset) + ($div<<2)|0);
	 $6 = HEAP32[$arrayidx>>2]|0;
	 $or = $6 | $shl;
	 HEAP32[$arrayidx>>2] = $or;
	 $__b4 = $wfdset;
	 $__i3 = 32;
	 while(1) {
	  $7 = $__i3;
	  $tobool8 = ($7|0)!=(0);
	  if (!($tobool8)) {
	   break;
	  }
	  $8 = $__b4;
	  $incdec$ptr10 = (($8) + 4|0);
	  $__b4 = $incdec$ptr10;
	  HEAP32[$8>>2] = 0;
	  $9 = $__i3;
	  $dec12 = (($9) + -1)|0;
	  $__i3 = $dec12;
	 }
	 $10 = HEAP32[15232>>2]|0;
	 $call15 = (_xmmsc_io_want_out($10)|0);
	 $tobool16 = ($call15|0)!=(0);
	 if ($tobool16) {
	  $11 = $fd;
	  $rem17 = (($11>>>0) % 32)&-1;
	  $shl18 = 1 << $rem17;
	  $12 = $fd;
	  $div19 = (($12>>>0) / 32)&-1;
	  $arrayidx21 = (($wfdset) + ($div19<<2)|0);
	  $13 = HEAP32[$arrayidx21>>2]|0;
	  $or22 = $13 | $shl18;
	  HEAP32[$arrayidx21>>2] = $or22;
	 }
	 $14 = $fd;
	 $add = (($14) + 1)|0;
	 $call23 = (_select(($add|0),($rfdset|0),($wfdset|0),(0|0),($tmout|0))|0);
	 $cmp = ($call23|0)==(-1);
	 if ($cmp) {
	  STACKTOP = sp;return;
	 }
	 $15 = $fd;
	 $div26 = (($15>>>0) / 32)&-1;
	 $arrayidx28 = (($rfdset) + ($div26<<2)|0);
	 $16 = HEAP32[$arrayidx28>>2]|0;
	 $17 = $fd;
	 $rem29 = (($17>>>0) % 32)&-1;
	 $shl30 = 1 << $rem29;
	 $and = $16 & $shl30;
	 $tobool31 = ($and|0)!=(0);
	 if ($tobool31) {
	  $18 = HEAP32[15232>>2]|0;
	  (_xmmsc_io_in_handle($18)|0);
	 }
	 $19 = $fd;
	 $div35 = (($19>>>0) / 32)&-1;
	 $arrayidx37 = (($wfdset) + ($div35<<2)|0);
	 $20 = HEAP32[$arrayidx37>>2]|0;
	 $21 = $fd;
	 $rem38 = (($21>>>0) % 32)&-1;
	 $shl39 = 1 << $rem38;
	 $and40 = $20 & $shl39;
	 $tobool41 = ($and40|0)!=(0);
	 if ($tobool41) {
	  $22 = HEAP32[15232>>2]|0;
	  (_xmmsc_io_out_handle($22)|0);
	 }
	 STACKTOP = sp;return;
	}
	function _xmmsc_result_emscripten_notifier_set($res,$user_data) {
	 $res = $res|0;
	 $user_data = $user_data|0;
	 var $0 = 0, $1 = 0, $2 = 0, $res$addr = 0, $user_data$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $res$addr = $res;
	 $user_data$addr = $user_data;
	 $0 = $res$addr;
	 $1 = $user_data$addr;
	 _xmmsc_result_notifier_set_default($0,16,$1);
	 $2 = $res$addr;
	 _xmmsc_result_unref($2);
	 STACKTOP = sp;return;
	}
	function _xmmsc_emscripten_result_cb($val,$user_data) {
	 $val = $val|0;
	 $user_data = $user_data|0;
	 var $0 = 0, $1 = 0, $call = 0, $user_data$addr = 0, $val$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $val$addr = $val;
	 $user_data$addr = $user_data;
	 $0 = $val$addr;
	 $1 = $user_data$addr;
	 $call = (_emscripten_asm_const_int((15240|0),($0|0),($1|0))|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _strlwr($str) {
	 $str = $str|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $conv1 = 0, $incdec$ptr = 0, $str$addr$06 = 0, $tobool = 0, $tobool5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP8[$str>>0]|0;
	 $tobool5 = ($0<<24>>24)==(0);
	 if ($tobool5) {
	  STACKTOP = sp;return ($str|0);
	 } else {
	  $1 = $0;$str$addr$06 = $str;
	 }
	 while(1) {
	  $conv = $1 << 24 >> 24;
	  $call = (_tolower($conv)|0);
	  $conv1 = $call&255;
	  HEAP8[$str$addr$06>>0] = $conv1;
	  $incdec$ptr = (($str$addr$06) + 1|0);
	  $2 = HEAP8[$incdec$ptr>>0]|0;
	  $tobool = ($2<<24>>24)==(0);
	  if ($tobool) {
	   break;
	  } else {
	   $1 = $2;$str$addr$06 = $incdec$ptr;
	  }
	 }
	 STACKTOP = sp;return ($str|0);
	}
	function _strtoull_l($s,$p,$base,$loc) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 $loc = $loc|0;
	 var $0 = 0, $1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (_strtoull($s,$p,$base)|0);
	 $1 = tempRet0;
	 tempRet0 = $1;
	 STACKTOP = sp;return ($0|0);
	}
	function _strtoll_l($s,$p,$base,$loc) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 $loc = $loc|0;
	 var $0 = 0, $1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (_strtoll($s,$p,$base)|0);
	 $1 = tempRet0;
	 tempRet0 = $1;
	 STACKTOP = sp;return ($0|0);
	}
	function _strtoul_l($s,$p,$base,$loc) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 $loc = $loc|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strtoul($s,$p,$base)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _strtol_l($s,$p,$base,$loc) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 $loc = $loc|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strtol($s,$p,$base)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _strupr($str) {
	 $str = $str|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $conv1 = 0, $incdec$ptr = 0, $str$addr$06 = 0, $tobool = 0, $tobool5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP8[$str>>0]|0;
	 $tobool5 = ($0<<24>>24)==(0);
	 if ($tobool5) {
	  STACKTOP = sp;return ($str|0);
	 } else {
	  $1 = $0;$str$addr$06 = $str;
	 }
	 while(1) {
	  $conv = $1 << 24 >> 24;
	  $call = (_toupper($conv)|0);
	  $conv1 = $call&255;
	  HEAP8[$str$addr$06>>0] = $conv1;
	  $incdec$ptr = (($str$addr$06) + 1|0);
	  $2 = HEAP8[$incdec$ptr>>0]|0;
	  $tobool = ($2<<24>>24)==(0);
	  if ($tobool) {
	   break;
	  } else {
	   $1 = $2;$str$addr$06 = $incdec$ptr;
	  }
	 }
	 STACKTOP = sp;return ($str|0);
	}
	function _isalnum($c) {
	 $c = $c|0;
	 var $0 = 0, $call = 0, $isdigit = 0, $isdigittmp = 0, $lor$ext = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isalpha($c)|0);
	 $tobool = ($call|0)==(0);
	 if ($tobool) {
	  $isdigittmp = (($c) + -48)|0;
	  $isdigit = ($isdigittmp>>>0)<(10);
	  $0 = $isdigit;
	 } else {
	  $0 = 1;
	 }
	 $lor$ext = $0&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _isalpha($c) {
	 $c = $c|0;
	 var $cmp = 0, $conv = 0, $or = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $or = $c | 32;
	 $sub = (($or) + -97)|0;
	 $cmp = ($sub>>>0)<(26);
	 $conv = $cmp&1;
	 STACKTOP = sp;return ($conv|0);
	}
	function _isascii($c) {
	 $c = $c|0;
	 var $lnot = 0, $lnot$ext = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $lnot = ($c>>>0)<(128);
	 $lnot$ext = $lnot&1;
	 STACKTOP = sp;return ($lnot$ext|0);
	}
	function _isblank($c) {
	 $c = $c|0;
	 var $$cmp1 = 0, $cmp = 0, $cmp1 = 0, $lor$ext = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($c|0)==(32);
	 $cmp1 = ($c|0)==(9);
	 $$cmp1 = $cmp | $cmp1;
	 $lor$ext = $$cmp1&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _iscntrl($c) {
	 $c = $c|0;
	 var $$cmp1 = 0, $cmp = 0, $cmp1 = 0, $lor$ext = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($c>>>0)<(32);
	 $cmp1 = ($c|0)==(127);
	 $$cmp1 = $cmp | $cmp1;
	 $lor$ext = $$cmp1&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _isgraph($c) {
	 $c = $c|0;
	 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub = (($c) + -33)|0;
	 $cmp = ($sub>>>0)<(94);
	 $conv = $cmp&1;
	 STACKTOP = sp;return ($conv|0);
	}
	function _islower($c) {
	 $c = $c|0;
	 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub = (($c) + -97)|0;
	 $cmp = ($sub>>>0)<(26);
	 $conv = $cmp&1;
	 STACKTOP = sp;return ($conv|0);
	}
	function _isprint($c) {
	 $c = $c|0;
	 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub = (($c) + -32)|0;
	 $cmp = ($sub>>>0)<(95);
	 $conv = $cmp&1;
	 STACKTOP = sp;return ($conv|0);
	}
	function _ispunct($c) {
	 $c = $c|0;
	 var $0 = 0, $call = 0, $call1 = 0, $land$ext = 0, $lnot = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isgraph($c)|0);
	 $tobool = ($call|0)==(0);
	 if ($tobool) {
	  $0 = 0;
	 } else {
	  $call1 = (_isalnum($c)|0);
	  $lnot = ($call1|0)==(0);
	  $0 = $lnot;
	 }
	 $land$ext = $0&1;
	 STACKTOP = sp;return ($land$ext|0);
	}
	function _iswalnum($wc) {
	 $wc = $wc|0;
	 var $0 = 0, $call = 0, $call1 = 0, $lor$ext = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswdigit($wc)|0);
	 $tobool = ($call|0)==(0);
	 if ($tobool) {
	  $call1 = (_iswalpha($wc)|0);
	  $tobool2 = ($call1|0)!=(0);
	  $0 = $tobool2;
	 } else {
	  $0 = 1;
	 }
	 $lor$ext = $0&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _iswalpha($wc) {
	 $wc = $wc|0;
	 var $$ = 0, $0 = 0, $1 = 0, $add = 0, $and = 0, $and4 = 0, $and6 = 0, $arrayidx = 0, $arrayidx2 = 0, $cmp = 0, $cmp7 = 0, $conv = 0, $conv3 = 0, $mul = 0, $retval$0 = 0, $shr = 0, $shr1 = 0, $shr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($wc>>>0)<(131072);
	 if ($cmp) {
	  $shr = $wc >>> 8;
	  $arrayidx = (15296 + ($shr)|0);
	  $0 = HEAP8[$arrayidx>>0]|0;
	  $conv = $0&255;
	  $mul = $conv << 5;
	  $and = $wc >>> 3;
	  $shr1 = $and & 31;
	  $add = $mul | $shr1;
	  $arrayidx2 = (15296 + ($add)|0);
	  $1 = HEAP8[$arrayidx2>>0]|0;
	  $conv3 = $1&255;
	  $and4 = $wc & 7;
	  $shr5 = $conv3 >>> $and4;
	  $and6 = $shr5 & 1;
	  $retval$0 = $and6;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $cmp7 = ($wc>>>0)<(196606);
	  $$ = $cmp7&1;
	  $retval$0 = $$;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _iswblank($wc) {
	 $wc = $wc|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isblank($wc)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswcntrl($wc) {
	 $wc = $wc|0;
	 var $0 = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp6 = 0, $lor$ext = 0, $or$cond = 0, $or$cond4 = 0, $sub = 0, $sub3 = 0, $sub5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($wc>>>0)<(32);
	 $sub = (($wc) + -127)|0;
	 $cmp1 = ($sub>>>0)<(33);
	 $or$cond = $cmp | $cmp1;
	 $sub3 = (($wc) + -8232)|0;
	 $cmp4 = ($sub3>>>0)<(2);
	 $or$cond4 = $or$cond | $cmp4;
	 if ($or$cond4) {
	  $0 = 1;
	  $lor$ext = $0&1;
	  STACKTOP = sp;return ($lor$ext|0);
	 }
	 $sub5 = (($wc) + -65529)|0;
	 $cmp6 = ($sub5>>>0)<(3);
	 $0 = $cmp6;
	 $lor$ext = $0&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _iswctype($wc,$type) {
	 $wc = $wc|0;
	 $type = $type|0;
	 var $call = 0, $call10 = 0, $call12 = 0, $call14 = 0, $call16 = 0, $call18 = 0, $call2 = 0, $call20 = 0, $call22 = 0, $call4 = 0, $call6 = 0, $call8 = 0, $retval$0 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 do {
	  switch ($type|0) {
	  case 8:  {
	   $call14 = (_iswprint($wc)|0);
	   $retval$0 = $call14;
	   break;
	  }
	  case 2:  {
	   $call2 = (_iswalpha($wc)|0);
	   $retval$0 = $call2;
	   break;
	  }
	  case 10:  {
	   $call18 = (_iswspace($wc)|0);
	   $retval$0 = $call18;
	   break;
	  }
	  case 5:  {
	   $call8 = (_iswdigit($wc)|0);
	   $retval$0 = $call8;
	   break;
	  }
	  case 12:  {
	   $call22 = (_iswxdigit($wc)|0);
	   $retval$0 = $call22;
	   break;
	  }
	  case 6:  {
	   $call10 = (_iswgraph($wc)|0);
	   $retval$0 = $call10;
	   break;
	  }
	  case 4:  {
	   $call6 = (_iswcntrl($wc)|0);
	   $retval$0 = $call6;
	   break;
	  }
	  case 1:  {
	   $call = (_iswalnum($wc)|0);
	   $retval$0 = $call;
	   break;
	  }
	  case 3:  {
	   $call4 = (_iswblank($wc)|0);
	   $retval$0 = $call4;
	   break;
	  }
	  case 11:  {
	   $call20 = (_iswupper($wc)|0);
	   $retval$0 = $call20;
	   break;
	  }
	  case 7:  {
	   $call12 = (_iswlower($wc)|0);
	   $retval$0 = $call12;
	   break;
	  }
	  case 9:  {
	   $call16 = (_iswpunct($wc)|0);
	   $retval$0 = $call16;
	   break;
	  }
	  default: {
	   $retval$0 = 0;
	  }
	  }
	 } while(0);
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _wctype($s) {
	 $s = $s|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $call = 0, $cmp = 0, $i$06 = 0, $inc = 0, $p$07 = 0, $retval$0 = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP8[$s>>0]|0;
	 $1 = 97;$i$06 = 1;$p$07 = 18272;
	 while(1) {
	  $cmp = ($0<<24>>24)==($1<<24>>24);
	  if ($cmp) {
	   $call = (_strcmp($s,$p$07)|0);
	   $tobool3 = ($call|0)==(0);
	   if ($tobool3) {
	    $retval$0 = $i$06;
	    label = 5;
	    break;
	   }
	  }
	  $inc = (($i$06) + 1)|0;
	  $add$ptr = (($p$07) + 6|0);
	  $2 = HEAP8[$add$ptr>>0]|0;
	  $tobool = ($2<<24>>24)==(0);
	  if ($tobool) {
	   $retval$0 = 0;
	   label = 5;
	   break;
	  } else {
	   $1 = $2;$i$06 = $inc;$p$07 = $add$ptr;
	  }
	 }
	 if ((label|0) == 5) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _iswdigit($wc) {
	 $wc = $wc|0;
	 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub = (($wc) + -48)|0;
	 $cmp = ($sub>>>0)<(10);
	 $conv = $cmp&1;
	 STACKTOP = sp;return ($conv|0);
	}
	function _iswgraph($wc) {
	 $wc = $wc|0;
	 var $0 = 0, $call = 0, $call1 = 0, $land$ext = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswspace($wc)|0);
	 $tobool = ($call|0)==(0);
	 if ($tobool) {
	  $call1 = (_iswprint($wc)|0);
	  $tobool2 = ($call1|0)!=(0);
	  $0 = $tobool2;
	 } else {
	  $0 = 0;
	 }
	 $land$ext = $0&1;
	 STACKTOP = sp;return ($land$ext|0);
	}
	function _iswlower($wc) {
	 $wc = $wc|0;
	 var $call = 0, $cmp1 = 0, $cmp1$ = 0, $lor$ext = 0, $not$cmp = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_towupper($wc)|0);
	 $cmp1 = ($wc|0)==(223);
	 $not$cmp = ($call|0)!=($wc|0);
	 $cmp1$ = $cmp1 | $not$cmp;
	 $lor$ext = $cmp1$&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _iswprint($wc) {
	 $wc = $wc|0;
	 var $$ = 0, $0 = 0, $add = 0, $and = 0, $and16 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp17 = 0, $cmp2 = 0, $cmp4 = 0, $cmp8 = 0, $conv = 0, $or$cond = 0, $or$cond6 = 0, $or$cond7 = 0, $retval$0 = 0, $sub = 0, $sub12 = 0, $sub7 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($wc>>>0)<(255);
	 if ($cmp) {
	  $add = (($wc) + 1)|0;
	  $and = $add & 127;
	  $cmp1 = ($and>>>0)>(32);
	  $conv = $cmp1&1;
	  $retval$0 = $conv;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $cmp2 = ($wc>>>0)<(8232);
	 $sub = (($wc) + -8234)|0;
	 $cmp4 = ($sub>>>0)<(47062);
	 $or$cond = $cmp2 | $cmp4;
	 $sub7 = (($wc) + -57344)|0;
	 $cmp8 = ($sub7>>>0)<(8185);
	 $or$cond6 = $or$cond | $cmp8;
	 if ($or$cond6) {
	  $retval$0 = 1;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $sub12 = (($wc) + -65532)|0;
	  $cmp13 = ($sub12>>>0)>(1048579);
	  $and16 = $wc & 65534;
	  $cmp17 = ($and16|0)==(65534);
	  $or$cond7 = $cmp13 | $cmp17;
	  $0 = $or$cond7&1;
	  $$ = $0 ^ 1;
	  STACKTOP = sp;return ($$|0);
	 }
	 return 0|0;
	}
	function _iswpunct($wc) {
	 $wc = $wc|0;
	 var $0 = 0, $1 = 0, $add = 0, $and = 0, $and4 = 0, $and6 = 0, $arrayidx = 0, $arrayidx2 = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mul = 0, $retval$0 = 0, $shr = 0, $shr1 = 0, $shr5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($wc>>>0)<(131072);
	 if (!($cmp)) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $shr = $wc >>> 8;
	 $arrayidx = (18352 + ($shr)|0);
	 $0 = HEAP8[$arrayidx>>0]|0;
	 $conv = $0&255;
	 $mul = $conv << 5;
	 $and = $wc >>> 3;
	 $shr1 = $and & 31;
	 $add = $mul | $shr1;
	 $arrayidx2 = (18352 + ($add)|0);
	 $1 = HEAP8[$arrayidx2>>0]|0;
	 $conv3 = $1&255;
	 $and4 = $wc & 7;
	 $shr5 = $conv3 >>> $and4;
	 $and6 = $shr5 & 1;
	 $retval$0 = $and6;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _iswspace($wc) {
	 $wc = $wc|0;
	 var $0 = 0, $call = 0, $land$ext = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($wc|0)==(0);
	 if ($tobool) {
	  $0 = 0;
	 } else {
	  $call = (_wcschr(21520,$wc)|0);
	  $tobool1 = ($call|0)!=(0|0);
	  $0 = $tobool1;
	 }
	 $land$ext = $0&1;
	 STACKTOP = sp;return ($land$ext|0);
	}
	function _iswupper($wc) {
	 $wc = $wc|0;
	 var $call = 0, $cmp = 0, $conv = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_towlower($wc)|0);
	 $cmp = ($call|0)!=($wc|0);
	 $conv = $cmp&1;
	 STACKTOP = sp;return ($conv|0);
	}
	function _iswxdigit($wc) {
	 $wc = $wc|0;
	 var $0 = 0, $cmp = 0, $cmp2 = 0, $lor$ext = 0, $or = 0, $sub = 0, $sub1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub = (($wc) + -48)|0;
	 $cmp = ($sub>>>0)<(10);
	 if ($cmp) {
	  $0 = 1;
	 } else {
	  $or = $wc | 32;
	  $sub1 = (($or) + -97)|0;
	  $cmp2 = ($sub1>>>0)<(6);
	  $0 = $cmp2;
	 }
	 $lor$ext = $0&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _toascii($c) {
	 $c = $c|0;
	 var $and = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $and = $c & 127;
	 STACKTOP = sp;return ($and|0);
	}
	function _toupper($c) {
	 $c = $c|0;
	 var $and = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_islower($c)|0);
	 $tobool = ($call|0)==(0);
	 $and = $c & 95;
	 $retval$0 = $tobool ? $c : $and;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _towupper($wc) {
	 $wc = $wc|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (___towcase($wc,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function ___towcase($wc,$lower) {
	 $wc = $wc|0;
	 $lower = $lower|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add41$neg = 0, $add55 = 0, $add67 = 0, $add97 = 0, $and = 0, $and60 = 0, $arrayidx72 = 0, $arrayidx7248 = 0, $arrayidx83 = 0, $call = 0, $cmp = 0, $cmp11 = 0;
	 var $cmp13 = 0, $cmp24 = 0, $cmp46 = 0, $cmp5 = 0, $cmp52 = 0, $cmp79 = 0, $cmp8 = 0, $cmp92 = 0, $conv = 0, $conv40 = 0, $conv45 = 0, $conv78 = 0, $conv84 = 0, $i$051 = 0, $i$150 = 0, $inc = 0, $inc87 = 0, $len = 0, $lower39 = 0, $mul = 0;
	 var $mul66 = 0, $mul96 = 0, $or$cond43 = 0, $or$cond44 = 0, $or$cond45 = 0, $retval$0 = 0, $sub = 0, $sub1 = 0, $sub10 = 0, $sub19 = 0, $sub2 = 0, $sub23 = 0, $sub34 = 0, $sub4 = 0, $sub42 = 0, $sub61 = 0, $sub7 = 0, $sub70 = 0, $sub90$neg = 0, $sub91 = 0;
	 var $sub95 = 0, $tobool = 0, $tobool36 = 0, $tobool73 = 0, $tobool7349 = 0, $tobool9 = 0, $upper = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $mul = $lower << 1;
	 $sub = (($mul) + -1)|0;
	 $sub1 = (($lower) + -1)|0;
	 $call = (_iswalpha($wc)|0);
	 $tobool = ($call|0)==(0);
	 $sub2 = (($wc) + -1536)|0;
	 $cmp = ($sub2>>>0)<(2560);
	 $or$cond43 = $tobool | $cmp;
	 $sub4 = (($wc) + -11776)|0;
	 $cmp5 = ($sub4>>>0)<(30784);
	 $or$cond44 = $or$cond43 | $cmp5;
	 $sub7 = (($wc) + -43008)|0;
	 $cmp8 = ($sub7>>>0)<(22272);
	 $or$cond45 = $or$cond44 | $cmp8;
	 if ($or$cond45) {
	  $retval$0 = $wc;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $tobool9 = ($lower|0)==(0);
	 if ($tobool9) {
	  $sub23 = (($wc) + -11520)|0;
	  $cmp24 = ($sub23>>>0)<(38);
	  if ($cmp24) {
	   $sub34 = (($wc) + -7264)|0;
	   $retval$0 = $sub34;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $i$051 = 0;
	  }
	 } else {
	  $sub10 = (($wc) + -4256)|0;
	  $cmp11 = ($sub10>>>0)<(46);
	  if ($cmp11) {
	   $cmp13 = ($wc|0)>(4293);
	   if ($cmp13) {
	    if (!((($wc|0) == 4295) | (($wc|0) == 4301))) {
	     $retval$0 = $wc;
	     STACKTOP = sp;return ($retval$0|0);
	    }
	   }
	   $sub19 = (($wc) + 7264)|0;
	   $retval$0 = $sub19;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $i$051 = 0;
	  }
	 }
	 while(1) {
	  $len = ((21608 + ($i$051<<2)|0) + 3|0);
	  $1 = HEAP8[$len>>0]|0;
	  $upper = (21608 + ($i$051<<2)|0);
	  $2 = HEAP16[$upper>>1]|0;
	  $conv = $2&65535;
	  $lower39 = ((21608 + ($i$051<<2)|0) + 2|0);
	  $3 = HEAP8[$lower39>>0]|0;
	  $conv40 = $3 << 24 >> 24;
	  $and = $conv40 & $sub1;
	  $add41$neg = (($wc) - ($conv))|0;
	  $sub42 = (($add41$neg) - ($and))|0;
	  $conv45 = $1&255;
	  $cmp46 = ($sub42>>>0)<($conv45>>>0);
	  $inc = (($i$051) + 1)|0;
	  if ($cmp46) {
	   label = 12;
	   break;
	  }
	  $tobool36 = ($inc|0)==(61);
	  if ($tobool36) {
	   break;
	  } else {
	   $i$051 = $inc;
	  }
	 }
	 if ((label|0) == 12) {
	  $cmp52 = ($3<<24>>24)==(1);
	  if ($cmp52) {
	   $add55 = (($lower) + ($wc))|0;
	   $and60 = $add41$neg & 1;
	   $sub61 = (($add55) - ($and60))|0;
	   $retval$0 = $sub61;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $mul66 = Math_imul($conv40, $sub)|0;
	   $add67 = (($mul66) + ($wc))|0;
	   $retval$0 = $add67;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 $sub70 = (1 - ($lower))|0;
	 $arrayidx7248 = (21856 + ($sub70<<1)|0);
	 $0 = HEAP16[$arrayidx7248>>1]|0;
	 $tobool7349 = ($0<<16>>16)==(0);
	 L26: do {
	  if (!($tobool7349)) {
	   $5 = $0;$i$150 = 0;
	   while(1) {
	    $conv78 = $5&65535;
	    $cmp79 = ($conv78|0)==($wc|0);
	    $inc87 = (($i$150) + 1)|0;
	    if ($cmp79) {
	     break;
	    }
	    $arrayidx72 = ((21856 + ($inc87<<2)|0) + ($sub70<<1)|0);
	    $4 = HEAP16[$arrayidx72>>1]|0;
	    $tobool73 = ($4<<16>>16)==(0);
	    if ($tobool73) {
	     break L26;
	    } else {
	     $5 = $4;$i$150 = $inc87;
	    }
	   }
	   $arrayidx83 = ((21856 + ($i$150<<2)|0) + ($lower<<1)|0);
	   $6 = HEAP16[$arrayidx83>>1]|0;
	   $conv84 = $6&65535;
	   $retval$0 = $conv84;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 } while(0);
	 $7 = ($lower*40)|0;
	 $sub90$neg = (($wc) + -66600)|0;
	 $sub91 = (($sub90$neg) + ($7))|0;
	 $cmp92 = ($sub91>>>0)<(40);
	 if (!($cmp92)) {
	  $retval$0 = $wc;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $sub95 = (($wc) + -40)|0;
	 $mul96 = ($lower*80)|0;
	 $add97 = (($sub95) + ($mul96))|0;
	 $retval$0 = $add97;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _towlower($wc) {
	 $wc = $wc|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (___towcase($wc,1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wcswidth($wcs,$n) {
	 $wcs = $wcs|0;
	 $n = $n|0;
	 var $0 = 0, $add = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cond = 0, $dec12 = 0, $dec12$in = 0, $incdec$ptr = 0, $k$011 = 0, $k$1 = 0, $l$0$lcssa = 0, $l$010 = 0, $tobool = 0, $tobool1 = 0, $tobool8 = 0, $wcs$addr$09 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool8 = ($n|0)==(0);
	 L1: do {
	  if ($tobool8) {
	   $k$1 = 0;$l$0$lcssa = 0;
	  } else {
	   $dec12$in = $n;$k$011 = 0;$l$010 = 0;$wcs$addr$09 = $wcs;
	   while(1) {
	    $dec12 = (($dec12$in) + -1)|0;
	    $0 = HEAP32[$wcs$addr$09>>2]|0;
	    $tobool1 = ($0|0)==(0);
	    if ($tobool1) {
	     $k$1 = $k$011;$l$0$lcssa = $l$010;
	     break L1;
	    }
	    $call = (_wcwidth($0)|0);
	    $cmp = ($call|0)>(-1);
	    if (!($cmp)) {
	     $k$1 = $call;$l$0$lcssa = $l$010;
	     break L1;
	    }
	    $add = (($call) + ($l$010))|0;
	    $incdec$ptr = (($wcs$addr$09) + 4|0);
	    $tobool = ($dec12|0)==(0);
	    if ($tobool) {
	     $k$1 = $call;$l$0$lcssa = $add;
	     break;
	    } else {
	     $dec12$in = $dec12;$k$011 = $call;$l$010 = $add;$wcs$addr$09 = $incdec$ptr;
	    }
	   }
	  }
	 } while(0);
	 $cmp2 = ($k$1|0)<(0);
	 $cond = $cmp2 ? $k$1 : $l$0$lcssa;
	 STACKTOP = sp;return ($cond|0);
	}
	function _wctrans($class) {
	 $class = $class|0;
	 var $$ = 0, $call = 0, $call1 = 0, $retval$0 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strcmp($class,22352)|0);
	 $tobool = ($call|0)==(0);
	 if ($tobool) {
	  $retval$0 = (1);
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call1 = (_strcmp($class,22360)|0);
	 $tobool2 = ($call1|0)==(0);
	 $$ = $tobool2 ? (2) : 0;
	 $retval$0 = $$;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _towctrans($wc,$trans) {
	 $wc = $wc|0;
	 $trans = $trans|0;
	 var $call = 0, $call3 = 0, $magicptr = 0, $retval$0 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $magicptr = $trans;
	 if ((($magicptr|0) == 2)) {
	  $call3 = (_towlower($wc)|0);
	  $retval$0 = $call3;
	 } else if ((($magicptr|0) == 1)) {
	  $call = (_towupper($wc)|0);
	  $retval$0 = $call;
	 } else {
	  $retval$0 = $wc;
	 }
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _wcwidth($wc) {
	 $wc = $wc|0;
	 var $$ = 0, $$17 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $add23 = 0, $add8 = 0, $and = 0, $and11 = 0, $and1314 = 0, $and2815 = 0, $and3 = 0, $and33 = 0, $and6 = 0, $arrayidx = 0, $arrayidx18 = 0;
	 var $arrayidx24 = 0, $arrayidx9 = 0, $cmp = 0, $cmp1 = 0, $cmp34 = 0, $cmp38 = 0, $cmp4 = 0, $cmp42 = 0, $cmp45 = 0, $cmp49 = 0, $cond = 0, $conv = 0, $conv10 = 0, $conv19 = 0, $conv25 = 0, $mul = 0, $mul20 = 0, $or$cond = 0, $or$cond16 = 0, $retval$0 = 0;
	 var $shr = 0, $shr713 = 0, $sub = 0, $sub44 = 0, $sub48 = 0, $tobool = 0, $tobool14 = 0, $tobool29 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($wc>>>0)<(255);
	 if ($cmp) {
	  $add = (($wc) + 1)|0;
	  $and = $add & 127;
	  $cmp1 = ($and>>>0)>(32);
	  if ($cmp1) {
	   $retval$0 = 1;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $tobool = ($wc|0)!=(0);
	  $cond = $tobool << 31 >> 31;
	  $retval$0 = $cond;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $and3 = $wc & -65538;
	 $cmp4 = ($and3>>>0)<(65534);
	 if ($cmp4) {
	  $shr = $wc >> 8;
	  $arrayidx = (22368 + ($shr)|0);
	  $0 = HEAP8[$arrayidx>>0]|0;
	  $conv = $0&255;
	  $mul = $conv << 5;
	  $and6 = $wc >>> 3;
	  $shr713 = $and6 & 31;
	  $add8 = $mul | $shr713;
	  $arrayidx9 = (22368 + ($add8)|0);
	  $1 = HEAP8[$arrayidx9>>0]|0;
	  $conv10 = $1&255;
	  $and11 = $wc & 7;
	  $2 = 1 << $and11;
	  $and1314 = $conv10 & $2;
	  $tobool14 = ($and1314|0)==(0);
	  if (!($tobool14)) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $arrayidx18 = (24288 + ($shr)|0);
	  $3 = HEAP8[$arrayidx18>>0]|0;
	  $conv19 = $3&255;
	  $mul20 = $conv19 << 5;
	  $add23 = $mul20 | $shr713;
	  $arrayidx24 = (24288 + ($add23)|0);
	  $4 = HEAP8[$arrayidx24>>0]|0;
	  $conv25 = $4&255;
	  $and2815 = $conv25 & $2;
	  $tobool29 = ($and2815|0)==(0);
	  $$ = $tobool29 ? 1 : 2;
	  $retval$0 = $$;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $and33 = $wc & 65534;
	 $cmp34 = ($and33|0)==(65534);
	 if ($cmp34) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $sub = (($wc) + -131072)|0;
	 $cmp38 = ($sub>>>0)<(131072);
	 if ($cmp38) {
	  $retval$0 = 2;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $cmp42 = ($wc|0)==(917505);
	  $sub44 = (($wc) + -917536)|0;
	  $cmp45 = ($sub44>>>0)<(95);
	  $or$cond = $cmp42 | $cmp45;
	  $sub48 = (($wc) + -917760)|0;
	  $cmp49 = ($sub48|0)<(239);
	  $or$cond16 = $or$cond | $cmp49;
	  $5 = $or$cond16&1;
	  $$17 = $5 ^ 1;
	  STACKTOP = sp;return ($$17|0);
	 }
	 return 0|0;
	}
	function _vwarn($fmt,$ap) {
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $0 = 0, $1 = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $0 = HEAP32[_stderr>>2]|0;
	 $1 = HEAP32[___progname>>2]|0;
	 HEAP32[$vararg_buffer>>2] = $1;
	 (_fprintf(($0|0),(25344|0),($vararg_buffer|0))|0);
	 $tobool = ($fmt|0)==(0|0);
	 if ($tobool) {
	  _perror((0|0));
	  STACKTOP = sp;return;
	 }
	 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
	 (_fwrite((25352|0),2,1,($0|0))|0);
	 _perror((0|0));
	 STACKTOP = sp;return;
	}
	function _vwarnx($fmt,$ap) {
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $0 = 0, $1 = 0, $tobool = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $0 = HEAP32[_stderr>>2]|0;
	 $1 = HEAP32[___progname>>2]|0;
	 HEAP32[$vararg_buffer>>2] = $1;
	 (_fprintf(($0|0),(25344|0),($vararg_buffer|0))|0);
	 $tobool = ($fmt|0)==(0|0);
	 if ($tobool) {
	  (_putc(10,($0|0))|0);
	  STACKTOP = sp;return;
	 }
	 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
	 (_putc(10,($0|0))|0);
	 STACKTOP = sp;return;
	}
	function _verr($status,$fmt,$ap) {
	 $status = $status|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $0 = 0, $1 = 0, $tobool$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $0 = HEAP32[_stderr>>2]|0;
	 $1 = HEAP32[___progname>>2]|0;
	 HEAP32[$vararg_buffer>>2] = $1;
	 (_fprintf(($0|0),(25344|0),($vararg_buffer|0))|0);
	 $tobool$i = ($fmt|0)==(0|0);
	 if ($tobool$i) {
	  _perror((0|0));
	  _exit(($status|0));
	  // unreachable;
	 }
	 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
	 (_fwrite((25352|0),2,1,($0|0))|0);
	 _perror((0|0));
	 _exit(($status|0));
	 // unreachable;
	}
	function _verrx($status,$fmt,$ap) {
	 $status = $status|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $0 = 0, $1 = 0, $tobool$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $0 = HEAP32[_stderr>>2]|0;
	 $1 = HEAP32[___progname>>2]|0;
	 HEAP32[$vararg_buffer>>2] = $1;
	 (_fprintf(($0|0),(25344|0),($vararg_buffer|0))|0);
	 $tobool$i = ($fmt|0)==(0|0);
	 if (!($tobool$i)) {
	  (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
	 }
	 (_putc(10,($0|0))|0);
	 _exit(($status|0));
	 // unreachable;
	}
	function _warn($fmt,$varargs) {
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $0 = 0, $1 = 0, $ap = 0, $tobool$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ap = sp + 8|0;
	 HEAP32[$ap>>2] = $varargs;
	 $0 = HEAP32[_stderr>>2]|0;
	 $1 = HEAP32[___progname>>2]|0;
	 HEAP32[$vararg_buffer>>2] = $1;
	 (_fprintf(($0|0),(25344|0),($vararg_buffer|0))|0);
	 $tobool$i = ($fmt|0)==(0|0);
	 if ($tobool$i) {
	  _perror((0|0));
	  STACKTOP = sp;return;
	 }
	 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
	 (_fwrite((25352|0),2,1,($0|0))|0);
	 _perror((0|0));
	 STACKTOP = sp;return;
	}
	function _warnx($fmt,$varargs) {
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $0 = 0, $1 = 0, $ap = 0, $tobool$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $ap = sp + 8|0;
	 HEAP32[$ap>>2] = $varargs;
	 $0 = HEAP32[_stderr>>2]|0;
	 $1 = HEAP32[___progname>>2]|0;
	 HEAP32[$vararg_buffer>>2] = $1;
	 (_fprintf(($0|0),(25344|0),($vararg_buffer|0))|0);
	 $tobool$i = ($fmt|0)==(0|0);
	 if ($tobool$i) {
	  (_putc(10,($0|0))|0);
	  STACKTOP = sp;return;
	 }
	 (_vfprintf(($0|0),($fmt|0),($ap|0))|0);
	 (_putc(10,($0|0))|0);
	 STACKTOP = sp;return;
	}
	function _err($status,$fmt,$varargs) {
	 $status = $status|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 _verr($status,$fmt,$ap);
	 // unreachable;
	}
	function _errx($status,$fmt,$varargs) {
	 $status = $status|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 _verrx($status,$fmt,$ap);
	 // unreachable;
	}
	function _iconv_open($to,$from) {
	 $to = $to|0;
	 $from = $from|0;
	 var $0 = 0, $1 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call6 = 0, $cmp = 0, $cmp2 = 0, $cmp4 = 0, $or = 0, $retval$0 = 0, $shl = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_find_charmap($to)|0);
	 $cmp = ($call|0)==(-1);
	 if (!($cmp)) {
	  $call1 = (_find_charmap($from)|0);
	  $cmp2 = ($call1|0)==(-1);
	  if (!($cmp2)) {
	   $arrayidx = (25360 + ($call)|0);
	   $0 = HEAP8[$arrayidx>>0]|0;
	   $cmp4 = ($0&255)>(207);
	   if (!($cmp4)) {
	    $shl = $call1 << 16;
	    $or = $shl | $call;
	    $1 = $or;
	    $retval$0 = $1;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  }
	 }
	 $call6 = (___errno_location()|0);
	 HEAP32[$call6>>2] = 22;
	 $retval$0 = (-1);
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _find_charmap($name) {
	 $name = $name|0;
	 var $$ph16 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr$018$i = 0, $a$addr$1$lcssa$i = 0;
	 var $a$addr$113$i = 0, $add = 0, $add$ptr = 0, $add$ptr14 = 0, $add$ptr14$us = 0, $add$ptr18 = 0, $add$ptr18$us = 0, $add$ptr6 = 0, $add$ptr9 = 0, $add$ptr9$sum = 0, $add$ptr9$sum$us = 0, $add$ptr9$sum11 = 0, $add$ptr9$sum11$us = 0, $add$ptr9$sum12 = 0, $add$ptr9$sum12$us = 0, $add$ptr9$us = 0, $add17 = 0, $add17$us = 0, $add8 = 0, $add8$us = 0;
	 var $arrayidx = 0, $arrayidx$us = 0, $b$addr$0$lcssa$i$ph = 0, $b$addr$019$i = 0, $call5 = 0, $call7 = 0, $call7$us = 0, $cmp = 0, $cmp$i = 0, $cmp$us = 0, $cmp10$i = 0, $cmp16$i = 0, $cmp22$i = 0, $cmp22$i$us = 0, $conv = 0, $conv$us = 0, $conv13$i = 0, $conv15$i = 0, $conv3$i = 0, $conv311$i = 0;
	 var $conv314$i = 0, $div = 0, $div$us = 0, $incdec$ptr$i = 0, $incdec$ptr18$i = 0, $incdec$ptr19$i = 0, $mul = 0, $mul$us = 0, $or$cond$i = 0, $or$i = 0, $or14$i = 0, $phitmp = 0, $retval$0 = 0, $s$0$be = 0, $s$0$be$us = 0, $s$018 = 0, $s$018$us = 0, $s$1$lcssa = 0, $s$115 = 0, $sub = 0;
	 var $sub$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $sub$us = 0, $sub9$i = 0, $tobool = 0, $tobool$i = 0, $tobool$us = 0, $tobool10 = 0, $tobool10$us = 0, $tobool17$i = 0, $tobool2$i = 0, $tobool3 = 0, $tobool4$i = 0, $tobool412$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP8[$name>>0]|0;
	 $tobool17$i = ($0<<24>>24)==(0);
	 L1: do {
	  if ($tobool17$i) {
	   $s$018$us = 25360;
	   while(1) {
	    $1 = HEAP8[$s$018$us>>0]|0;
	    $cmp22$i$us = ($1<<24>>24)==(0);
	    if ($cmp22$i$us) {
	     $s$1$lcssa = $s$018$us;
	     break L1;
	    }
	    $call7$us = (_strlen(($s$018$us|0))|0);
	    $add8$us = (($call7$us) + 1)|0;
	    $add$ptr9$us = (($s$018$us) + ($add8$us)|0);
	    $2 = HEAP8[$add$ptr9$us>>0]|0;
	    $tobool10$us = ($2<<24>>24)==(0);
	    do {
	     if ($tobool10$us) {
	      $add$ptr9$sum$us = (($call7$us) + 2)|0;
	      $arrayidx$us = (($s$018$us) + ($add$ptr9$sum$us)|0);
	      $3 = HEAP8[$arrayidx$us>>0]|0;
	      $cmp$us = ($3&255)>(128);
	      if ($cmp$us) {
	       $add$ptr9$sum12$us = (($call7$us) + 3)|0;
	       $add$ptr14$us = (($s$018$us) + ($add$ptr9$sum12$us)|0);
	       $s$0$be$us = $add$ptr14$us;
	       break;
	      } else {
	       $conv$us = $3&255;
	       $sub$us = (128 - ($conv$us))|0;
	       $div$us = $sub$us >>> 2;
	       $mul$us = ($div$us*5)|0;
	       $add17$us = (($call7$us) + 3)|0;
	       $add$ptr9$sum11$us = (($add17$us) + ($mul$us))|0;
	       $add$ptr18$us = (($s$018$us) + ($add$ptr9$sum11$us)|0);
	       $s$0$be$us = $add$ptr18$us;
	       break;
	      }
	     } else {
	      $s$0$be$us = $add$ptr9$us;
	     }
	    } while(0);
	    $4 = HEAP8[$s$0$be$us>>0]|0;
	    $tobool$us = ($4<<24>>24)==(0);
	    if ($tobool$us) {
	     $retval$0 = -1;
	     break;
	    } else {
	     $s$018$us = $s$0$be$us;
	    }
	   }
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $s$018 = 25360;
	   while(1) {
	    $6 = $0;$a$addr$018$i = $name;$b$addr$019$i = $s$018;
	    while(1) {
	     $5 = HEAP8[$b$addr$019$i>>0]|0;
	     $tobool2$i = ($5<<24>>24)==(0);
	     if ($tobool2$i) {
	      $$ph16 = $6;$b$addr$0$lcssa$i$ph = $b$addr$019$i;
	      label = 16;
	      break;
	     }
	     $tobool412$i = ($6<<24>>24)==(0);
	     L17: do {
	      if ($tobool412$i) {
	       $8 = 0;$a$addr$1$lcssa$i = $a$addr$018$i;
	      } else {
	       $conv311$i = $6&255;
	       $15 = $6;$a$addr$113$i = $a$addr$018$i;$conv314$i = $conv311$i;
	       while(1) {
	        $or$i = $conv314$i | 32;
	        $sub$i = (($or$i) + -97)|0;
	        $cmp$i = ($sub$i>>>0)>(26);
	        $sub9$i = (($conv314$i) + -48)|0;
	        $cmp10$i = ($sub9$i>>>0)>(10);
	        $or$cond$i = $cmp$i & $cmp10$i;
	        $incdec$ptr$i = (($a$addr$113$i) + 1|0);
	        if (!($or$cond$i)) {
	         $8 = $15;$a$addr$1$lcssa$i = $a$addr$113$i;
	         break L17;
	        }
	        $7 = HEAP8[$incdec$ptr$i>>0]|0;
	        $conv3$i = $7&255;
	        $tobool4$i = ($7<<24>>24)==(0);
	        if ($tobool4$i) {
	         $8 = 0;$a$addr$1$lcssa$i = $incdec$ptr$i;
	         break;
	        } else {
	         $15 = $7;$a$addr$113$i = $incdec$ptr$i;$conv314$i = $conv3$i;
	        }
	       }
	      }
	     } while(0);
	     $conv13$i = $8&255;
	     $or14$i = $conv13$i | 32;
	     $conv15$i = $5&255;
	     $cmp16$i = ($or14$i|0)==($conv15$i|0);
	     if (!($cmp16$i)) {
	      break;
	     }
	     $incdec$ptr18$i = (($a$addr$1$lcssa$i) + 1|0);
	     $incdec$ptr19$i = (($b$addr$019$i) + 1|0);
	     $9 = HEAP8[$incdec$ptr18$i>>0]|0;
	     $tobool$i = ($9<<24>>24)==(0);
	     if ($tobool$i) {
	      $$ph16 = 0;$b$addr$0$lcssa$i$ph = $incdec$ptr19$i;
	      label = 16;
	      break;
	     } else {
	      $6 = $9;$a$addr$018$i = $incdec$ptr18$i;$b$addr$019$i = $incdec$ptr19$i;
	     }
	    }
	    if ((label|0) == 16) {
	     label = 0;
	     $10 = HEAP8[$b$addr$0$lcssa$i$ph>>0]|0;
	     $cmp22$i = ($$ph16<<24>>24)==($10<<24>>24);
	     if ($cmp22$i) {
	      break;
	     }
	    }
	    $call7 = (_strlen(($s$018|0))|0);
	    $add8 = (($call7) + 1)|0;
	    $add$ptr9 = (($s$018) + ($add8)|0);
	    $12 = HEAP8[$add$ptr9>>0]|0;
	    $tobool10 = ($12<<24>>24)==(0);
	    do {
	     if ($tobool10) {
	      $add$ptr9$sum = (($call7) + 2)|0;
	      $arrayidx = (($s$018) + ($add$ptr9$sum)|0);
	      $13 = HEAP8[$arrayidx>>0]|0;
	      $cmp = ($13&255)>(128);
	      if ($cmp) {
	       $add$ptr9$sum12 = (($call7) + 3)|0;
	       $add$ptr14 = (($s$018) + ($add$ptr9$sum12)|0);
	       $s$0$be = $add$ptr14;
	       break;
	      } else {
	       $conv = $13&255;
	       $sub = (128 - ($conv))|0;
	       $div = $sub >>> 2;
	       $mul = ($div*5)|0;
	       $add17 = (($call7) + 3)|0;
	       $add$ptr9$sum11 = (($add17) + ($mul))|0;
	       $add$ptr18 = (($s$018) + ($add$ptr9$sum11)|0);
	       $s$0$be = $add$ptr18;
	       break;
	      }
	     } else {
	      $s$0$be = $add$ptr9;
	     }
	    } while(0);
	    $14 = HEAP8[$s$0$be>>0]|0;
	    $tobool = ($14<<24>>24)==(0);
	    if ($tobool) {
	     $retval$0 = -1;
	     label = 25;
	     break;
	    } else {
	     $s$018 = $s$0$be;
	    }
	   }
	   if ((label|0) == 25) {
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $$pre = HEAP8[$s$018>>0]|0;
	   $phitmp = ($$pre<<24>>24)==(0);
	   if ($phitmp) {
	    $s$1$lcssa = $s$018;
	   } else {
	    $s$115 = $s$018;
	    while(1) {
	     $call5 = (_strlen(($s$115|0))|0);
	     $add = (($call5) + 1)|0;
	     $add$ptr = (($s$115) + ($add)|0);
	     $11 = HEAP8[$add$ptr>>0]|0;
	     $tobool3 = ($11<<24>>24)==(0);
	     if ($tobool3) {
	      $s$1$lcssa = $add$ptr;
	      break;
	     } else {
	      $s$115 = $add$ptr;
	     }
	    }
	   }
	  }
	 } while(0);
	 $add$ptr6 = (($s$1$lcssa) + 1|0);
	 $sub$ptr$lhs$cast = $add$ptr6;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - (25360))|0;
	 $retval$0 = $sub$ptr$sub;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _iconv_close($cd) {
	 $cd = $cd|0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = sp;return 0;
	}
	function _iconv($cd0,$in,$inb,$out,$outb) {
	 $cd0 = $cd0|0;
	 $in = $in|0;
	 $inb = $inb|0;
	 $out = $out|0;
	 $outb = $outb|0;
	 var $$c$8 = 0, $$compoundliteral = 0, $$compoundliteral355 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
	 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
	 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
	 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr$sum = 0;
	 var $add$ptr1$sum = 0, $add$ptr1$sum251 = 0, $add$ptr148 = 0, $add$ptr190 = 0, $add$ptr2$sum = 0, $add$ptr223 = 0, $add$ptr233 = 0, $add$ptr287 = 0, $add$ptr3$sum = 0, $add$ptr3$sum249 = 0, $add$ptr354 = 0, $add$ptr386 = 0, $add$ptr527 = 0, $add$ptr541 = 0, $add$ptr614 = 0, $add$ptr625$sum293 = 0, $add$ptr625$sum294 = 0, $add$ptr629 = 0, $add$ptr637 = 0, $add$ptr641 = 0;
	 var $add$ptr77$sum295 = 0, $add$ptr77$sum296 = 0, $add$ptr99 = 0, $add158 = 0, $add220 = 0, $add232 = 0, $add241 = 0, $add242 = 0, $add269 = 0, $add270 = 0, $add321 = 0, $add322 = 0, $add357 = 0, $add396 = 0, $add419 = 0, $add426 = 0, $add439 = 0, $add442 = 0, $add473 = 0, $add474 = 0;
	 var $add484 = 0, $add501 = 0, $add555 = 0, $add577 = 0, $add591 = 0, $add93 = 0, $and = 0, $and$i = 0, $and$i258 = 0, $and$i274 = 0, $and$i280 = 0, $and508 = 0, $and584 = 0, $and626 = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i259 = 0, $arrayidx$i267 = 0, $arrayidx$i271 = 0, $arrayidx$i277 = 0;
	 var $arrayidx$i283 = 0, $arrayidx$i287 = 0, $arrayidx1$i = 0, $arrayidx1$i262 = 0, $arrayidx1$i290 = 0, $arrayidx10$i = 0, $arrayidx11$i = 0, $arrayidx138 = 0, $arrayidx170 = 0, $arrayidx2$i = 0, $arrayidx2$i273 = 0, $arrayidx2$i279 = 0, $arrayidx256 = 0, $arrayidx280 = 0, $arrayidx323 = 0, $arrayidx332 = 0, $arrayidx346 = 0, $arrayidx365 = 0, $arrayidx4 = 0, $arrayidx4$i = 0;
	 var $arrayidx458 = 0, $arrayidx478 = 0, $arrayidx494 = 0, $arrayidx5$i = 0, $arrayidx502 = 0, $arrayidx510 = 0, $arrayidx570 = 0, $arrayidx578 = 0, $arrayidx586 = 0, $arrayidx8$i = 0, $brmerge = 0, $brmerge324 = 0, $c$0 = 0, $c$1 = 0, $c$10 = 0, $c$11313 = 0, $c$2 = 0, $c$3309 = 0, $c$4 = 0, $c$5 = 0;
	 var $c$6302 = 0, $c$8 = 0, $c$9 = 0, $call = 0, $call356 = 0, $call533 = 0, $call539 = 0, $call644 = 0, $cmp = 0, $cmp102 = 0, $cmp108 = 0, $cmp116 = 0, $cmp119 = 0, $cmp12 = 0, $cmp130 = 0, $cmp144 = 0, $cmp150 = 0, $cmp154 = 0, $cmp162 = 0, $cmp165 = 0;
	 var $cmp176 = 0, $cmp182 = 0, $cmp186 = 0, $cmp192 = 0, $cmp195 = 0, $cmp200 = 0, $cmp203 = 0, $cmp207 = 0, $cmp211 = 0, $cmp215 = 0, $cmp226 = 0, $cmp236 = 0, $cmp244 = 0, $cmp274 = 0, $cmp283 = 0, $cmp290 = 0, $cmp294 = 0, $cmp299 = 0, $cmp30 = 0, $cmp305 = 0;
	 var $cmp309 = 0, $cmp313 = 0, $cmp335 = 0, $cmp340 = 0, $cmp349 = 0, $cmp36 = 0, $cmp367 = 0, $cmp382 = 0, $cmp390 = 0, $cmp393 = 0, $cmp398 = 0, $cmp401 = 0, $cmp404 = 0, $cmp409 = 0, $cmp415 = 0, $cmp422 = 0, $cmp431 = 0, $cmp44 = 0, $cmp444 = 0, $cmp444301 = 0;
	 var $cmp47 = 0, $cmp485 = 0, $cmp516 = 0, $cmp52 = 0, $cmp523 = 0, $cmp530 = 0, $cmp534 = 0, $cmp544 = 0, $cmp550 = 0, $cmp556 = 0, $cmp565 = 0, $cmp565312 = 0, $cmp588 = 0, $cmp59 = 0, $cmp597 = 0, $cmp605 = 0, $cmp609 = 0, $cmp617 = 0, $cmp632 = 0, $cmp64 = 0;
	 var $cmp69 = 0, $cmp73 = 0, $cmp81 = 0, $cmp90 = 0, $cmp95 = 0, $conv = 0, $conv$conv511 = 0, $conv$i = 0, $conv$i260 = 0, $conv$i266 = 0, $conv$i270 = 0, $conv$i276 = 0, $conv$i282 = 0, $conv$i288 = 0, $conv1$i = 0, $conv1$i272 = 0, $conv1$i278 = 0, $conv100 = 0, $conv11$i = 0, $conv139 = 0;
	 var $conv149 = 0, $conv15 = 0, $conv171 = 0, $conv191 = 0, $conv2$i = 0, $conv2$i263 = 0, $conv2$i284 = 0, $conv2$i291 = 0, $conv224 = 0, $conv234 = 0, $conv257 = 0, $conv281 = 0, $conv288 = 0, $conv324 = 0, $conv333 = 0, $conv338 = 0, $conv347 = 0, $conv366 = 0, $conv387 = 0, $conv459 = 0;
	 var $conv479 = 0, $conv495 = 0, $conv503 = 0, $conv511 = 0, $conv559 = 0, $conv571 = 0, $conv579 = 0, $conv587 = 0, $conv6$i = 0, $conv6$i285 = 0, $conv9$i = 0, $d$1 = 0, $d$2310 = 0, $d$5 = 0, $d$6303 = 0, $dec277 = 0, $dec277$sub199 = 0, $div = 0, $div334$mask = 0, $div493 = 0;
	 var $div569 = 0, $err$0 = 0, $err$0$ph = 0, $exitcond = 0, $exitcond319 = 0, $exitcond320 = 0, $exitcond321 = 0, $i$0307 = 0, $i447$0300 = 0, $inc133250 = 0, $inc133250$mul = 0, $inc263 = 0, $inc265 = 0, $inc267 = 0, $inc465 = 0, $inc468 = 0, $inc471 = 0, $inc547 = 0, $inc594 = 0, $incdec$ptr = 0;
	 var $j$0305 = 0, $j452$0298 = 0, $k$0306 = 0, $k$1$inc263 = 0, $k$1304 = 0, $k$3 = 0, $k$4299 = 0, $k$5$inc465 = 0, $k$5297 = 0, $k$7 = 0, $l$0 = 0, $l$2 = 0, $l$3 = 0, $mul = 0, $mul219 = 0, $mul231 = 0, $mul320 = 0, $mul434 = 0, $mul434$pn = 0, $mul438 = 0;
	 var $mul492 = 0, $mul496 = 0, $mul568 = 0, $mul572 = 0, $not$cmp260 = 0, $not$cmp462 = 0, $or = 0, $or$cond = 0, $or$cond1 = 0, $or$cond252 = 0, $or$cond253 = 0, $or$cond254 = 0, $or$cond255 = 0, $or$cond256 = 0, $or$cond257 = 0, $or$i = 0, $or$i264 = 0, $or$i292 = 0, $or12$i = 0, $or377 = 0;
	 var $or509 = 0, $or585 = 0, $or623 = 0, $or627 = 0, $or8$i = 0, $rem = 0, $rem328 = 0, $rem353 = 0, $rem497 = 0, $rem573 = 0, $retval$0 = 0, $shl = 0, $shl$i = 0, $shl$i261 = 0, $shl$i289 = 0, $shl3$i = 0, $shl329 = 0, $shl507 = 0, $shl583 = 0, $shl7$i = 0;
	 var $shr = 0, $shr$i = 0, $shr$i269 = 0, $shr$i275 = 0, $shr$i281 = 0, $shr1$i = 0, $shr327 = 0, $shr498 = 0, $shr5$i = 0, $shr574 = 0, $shr622 = 0, $st = 0, $sub = 0, $sub101 = 0, $sub107 = 0, $sub111 = 0, $sub115 = 0, $sub127 = 0, $sub129 = 0, $sub129$conv100 = 0;
	 var $sub153 = 0, $sub160 = 0, $sub161 = 0, $sub181 = 0, $sub199 = 0, $sub206 = 0, $sub225 = 0, $sub235 = 0, $sub258 = 0, $sub259 = 0, $sub289 = 0, $sub293 = 0, $sub302 = 0, $sub302$sub289 = 0, $sub304 = 0, $sub308 = 0, $sub318 = 0, $sub339 = 0, $sub388 = 0, $sub389 = 0;
	 var $sub408 = 0, $sub414 = 0, $sub421 = 0, $sub43 = 0, $sub460 = 0, $sub461 = 0, $sub491 = 0, $sub506 = 0, $sub528 = 0, $sub542 = 0, $sub560 = 0, $sub564 = 0, $sub58 = 0, $sub582 = 0, $sub615 = 0, $sub621 = 0, $sub63 = 0, $sub630 = 0, $sub638 = 0, $sub642 = 0;
	 var $sub68 = 0, $sub80 = 0, $sub85 = 0, $sub89 = 0, $tmp = 0, $tobool = 0, $tobool140 = 0, $tobool172 = 0, $tobool359 = 0, $tobool378 = 0, $tobool480 = 0, $tobool5 = 0, $tobool512 = 0, $tobool7 = 0, $tobool8 = 0, $wc = 0, $x$0317 = 0, $x$1 = 0, $x$2 = 0, $x$3 = 0;
	 var $xor$i = 0, $xor10$i = 0, $xor3$i = 0, $xor4$i = 0, $xor7$i = 0, $xor9$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $st = sp;
	 $wc = sp + 16|0;
	 $$compoundliteral = sp + 12|0;
	 $$compoundliteral355 = sp + 8|0;
	 $tmp = sp + 20|0;
	 $0 = $cd0;
	 $and = $0 & 65535;
	 $shr = $0 >>> 16;
	 $add$ptr$sum = (($shr) + 1)|0;
	 $add$ptr2$sum = (($and) + 1)|0;
	 $1 = $st;
	 $2 = $1;
	 HEAP32[$2>>2] = 0;
	 $3 = (($1) + 4)|0;
	 $4 = $3;
	 HEAP32[$4>>2] = 0;
	 $arrayidx = (25360 + ($shr)|0);
	 $5 = HEAP8[$arrayidx>>0]|0;
	 $arrayidx4 = (25360 + ($and)|0);
	 $6 = HEAP8[$arrayidx4>>0]|0;
	 $tobool = ($in|0)==(0|0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $7 = HEAP32[$in>>2]|0;
	 $tobool5 = ($7|0)==(0|0);
	 if ($tobool5) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $8 = HEAP32[$inb>>2]|0;
	 $tobool7 = ($8|0)==(0);
	 if ($tobool7) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $conv15 = $5&255;
	 $add484 = (($conv15) + 128)|0;
	 $add501 = (($shr) + 2)|0;
	 $and$i = $conv15 & 3;
	 $xor$i = $and$i ^ 1;
	 $xor4$i = $and$i ^ 2;
	 $xor9$i = $and$i ^ 3;
	 $and$i258 = $conv15 & 1;
	 $9 = $and$i258 ^ 1;
	 $sub68 = (($conv15) + -196)|0;
	 $cmp69 = ($sub68>>>0)<(2);
	 $add$ptr77$sum295 = $and$i258 | 2;
	 $add$ptr77$sum296 = $9 | 2;
	 $cmp195 = ($5<<24>>24)==(-38);
	 $cmp211 = ($5<<24>>24)==(-40);
	 $conv338 = $6&255;
	 $sub339 = (($conv338) + -192)|0;
	 $cmp340 = ($sub339>>>0)>(8);
	 $10 = $and;
	 $arrayidx346 = (103408 + ($sub339)|0);
	 $add555 = (($conv338) + 128)|0;
	 $sub564 = (128 - ($conv338))|0;
	 $cmp565312 = ($6<<24>>24)==(-128);
	 $add577 = (($and) + 2)|0;
	 $and$i274 = $conv338 & 1;
	 $11 = $and$i274 ^ 1;
	 $add$ptr625$sum293 = $and$i274 | 2;
	 $add$ptr625$sum294 = $11 | 2;
	 $and$i280 = $conv338 & 3;
	 $xor3$i = $and$i280 ^ 1;
	 $xor7$i = $and$i280 ^ 2;
	 $xor10$i = $and$i280 ^ 3;
	 $sub = (($conv15) + -192)|0;
	 $cmp12 = ($sub>>>0)<(7);
	 $13 = $7;$14 = $8;$x$0317 = 0;
	 L10: while(1) {
	  $12 = HEAP8[$13>>0]|0;
	  $conv = $12&255;
	  $cmp = ($12<<24>>24)<(0);
	  $brmerge = $cmp | $cmp12;
	  L12: do {
	   if ($brmerge) {
	    do {
	     switch ($conv15|0) {
	     case 198:  {
	      $cmp30 = ($14>>>0)<(4);
	      if ($cmp30) {
	       $err$0 = 22;
	       break L10;
	      }
	      $16 = HEAP32[$13>>2]|0;
	      $c$0 = $16;
	      label = 14;
	      break;
	     }
	     case 195: case 192:  {
	      $cmp36 = ($14>>>0)<(4);
	      if ($cmp36) {
	       $err$0 = 22;
	       break L10;
	      }
	      $arrayidx$i = (($13) + ($and$i)|0);
	      $17 = HEAP8[$arrayidx$i>>0]|0;
	      $conv$i = $17&255;
	      $shl$i = $conv$i << 24;
	      $arrayidx1$i = (($13) + ($xor$i)|0);
	      $18 = HEAP8[$arrayidx1$i>>0]|0;
	      $conv2$i = $18&255;
	      $shl3$i = $conv2$i << 16;
	      $or$i = $shl3$i | $shl$i;
	      $arrayidx5$i = (($13) + ($xor4$i)|0);
	      $19 = HEAP8[$arrayidx5$i>>0]|0;
	      $conv6$i = $19&255;
	      $shl7$i = $conv6$i << 8;
	      $or8$i = $or$i | $shl7$i;
	      $arrayidx10$i = (($13) + ($xor9$i)|0);
	      $20 = HEAP8[$arrayidx10$i>>0]|0;
	      $conv11$i = $20&255;
	      $or12$i = $or8$i | $conv11$i;
	      $c$0 = $or12$i;
	      label = 14;
	      break;
	     }
	     case 209:  {
	      $sub89 = (($conv) + -161)|0;
	      $cmp90 = ($sub89>>>0)<(63);
	      if ($cmp90) {
	       $add93 = (($conv) + 65216)|0;
	       $c$8 = $add93;$l$2 = 1;
	       label = 90;
	       break L12;
	      }
	      $cmp95 = ($14>>>0)<(2);
	      if ($cmp95) {
	       $err$0 = 22;
	       break L10;
	      }
	      $add$ptr99 = (($13) + 1|0);
	      $25 = HEAP8[$add$ptr99>>0]|0;
	      $conv100 = $25&255;
	      $sub101 = (($conv) + -129)|0;
	      $cmp102 = ($sub101>>>0)<(31);
	      if ($cmp102) {
	       $c$1 = $sub101;
	      } else {
	       $sub107 = (($conv) + -224)|0;
	       $cmp108 = ($sub107>>>0)<(16);
	       if (!($cmp108)) {
	        $err$0$ph = 84;
	        label = 115;
	        break L10;
	       }
	       $sub111 = (($conv) + -193)|0;
	       $c$1 = $sub111;
	      }
	      $mul = $c$1 << 1;
	      $sub115 = (($conv100) + -64)|0;
	      $cmp116 = ($sub115>>>0)<(95);
	      if ($cmp116) {
	       $cmp119 = ($25<<24>>24)==(127);
	       if ($cmp119) {
	        $err$0$ph = 84;
	        label = 115;
	        break L10;
	       }
	       $$lobit = ($25<<24>>24) >> 7;
	       $26 = $$lobit << 24 >> 24;
	       $sub127 = (($sub115) + ($26))|0;
	       $c$2 = $mul;$d$1 = $sub127;
	      } else {
	       $sub129 = (($conv100) + -159)|0;
	       $cmp130 = ($sub129>>>0)<(94);
	       $inc133250 = $cmp130&1;
	       $inc133250$mul = $mul | $inc133250;
	       $sub129$conv100 = $cmp130 ? $sub129 : $conv100;
	       $c$2 = $inc133250$mul;$d$1 = $sub129$conv100;
	      }
	      $arrayidx138 = ((29392 + (($c$2*188)|0)|0) + ($d$1<<1)|0);
	      $27 = HEAP16[$arrayidx138>>1]|0;
	      $conv139 = $27&65535;
	      $tobool140 = ($27<<16>>16)==(0);
	      if ($tobool140) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      } else {
	       $c$8 = $conv139;$l$2 = 2;
	       label = 90;
	       break L12;
	      }
	      break;
	     }
	     case 193: case 194: case 197: case 196:  {
	      $cmp52 = ($14>>>0)<(2);
	      if ($cmp52) {
	       $err$0 = 22;
	       break L10;
	      }
	      $arrayidx$i259 = (($13) + ($and$i258)|0);
	      $21 = HEAP8[$arrayidx$i259>>0]|0;
	      $conv$i260 = $21&255;
	      $shl$i261 = $conv$i260 << 8;
	      $arrayidx1$i262 = (($13) + ($9)|0);
	      $22 = HEAP8[$arrayidx1$i262>>0]|0;
	      $conv2$i263 = $22&255;
	      $or$i264 = $shl$i261 | $conv2$i263;
	      $sub58 = (($or$i264) + -56320)|0;
	      $cmp59 = ($sub58>>>0)<(1024);
	      if ($cmp59) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      }
	      $sub63 = (($or$i264) + -55296)|0;
	      $cmp64 = ($sub63>>>0)<(1024);
	      if (!($cmp64)) {
	       $c$8 = $or$i264;$l$2 = 2;
	       label = 90;
	       break L12;
	      }
	      if ($cmp69) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      }
	      $cmp73 = ($14>>>0)<(4);
	      if ($cmp73) {
	       $err$0 = 22;
	       break L10;
	      }
	      $arrayidx$i287 = (($13) + ($add$ptr77$sum295)|0);
	      $23 = HEAP8[$arrayidx$i287>>0]|0;
	      $conv$i288 = $23&255;
	      $shl$i289 = $conv$i288 << 8;
	      $arrayidx1$i290 = (($13) + ($add$ptr77$sum296)|0);
	      $24 = HEAP8[$arrayidx1$i290>>0]|0;
	      $conv2$i291 = $24&255;
	      $or$i292 = $shl$i289 | $conv2$i291;
	      $sub80 = (($or$i292) + -56320)|0;
	      $cmp81 = ($sub80>>>0)>(1023);
	      if ($cmp81) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      }
	      $sub85 = $or$i264 << 10;
	      $shl = (($sub85) + -56557568)|0;
	      $add = (($shl) + ($sub80))|0;
	      $c$8 = $add;$l$2 = 4;
	      label = 90;
	      break L12;
	      break;
	     }
	     case 200:  {
	      $call = (_mbrtowc($wc,$13,$14,$st)|0);
	      if ((($call|0) == 0)) {
	       $l$0 = 1;
	      } else if ((($call|0) == -1)) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      } else if ((($call|0) == -2)) {
	       $err$0 = 22;
	       break L10;
	      } else {
	       $l$0 = $call;
	      }
	      $15 = HEAP32[$wc>>2]|0;
	      $c$8 = $15;$l$2 = $l$0;
	      label = 90;
	      break L12;
	      break;
	     }
	     case 208:  {
	      $cmp144 = ($14>>>0)<(2);
	      if ($cmp144) {
	       $err$0 = 22;
	       break L10;
	      }
	      $add$ptr148 = (($13) + 1|0);
	      $28 = HEAP8[$add$ptr148>>0]|0;
	      $conv149 = $28&255;
	      $cmp150 = ($12<<24>>24)==(-114);
	      if ($cmp150) {
	       $sub153 = (($conv149) + -161)|0;
	       $cmp154 = ($sub153>>>0)>(62);
	       if ($cmp154) {
	        $err$0$ph = 84;
	        label = 115;
	        break L10;
	       }
	       $add158 = (($conv149) + 65216)|0;
	       $c$8 = $add158;$l$2 = 2;
	       label = 90;
	       break L12;
	      } else {
	       $sub160 = (($conv) + -161)|0;
	       $sub161 = (($conv149) + -161)|0;
	       $cmp162 = ($sub160>>>0)>(83);
	       $cmp165 = ($sub161>>>0)>(93);
	       $or$cond252 = $cmp162 | $cmp165;
	       if ($or$cond252) {
	        $err$0$ph = 84;
	        label = 115;
	        break L10;
	       }
	       $arrayidx170 = ((29392 + (($sub160*188)|0)|0) + ($sub161<<1)|0);
	       $29 = HEAP16[$arrayidx170>>1]|0;
	       $conv171 = $29&65535;
	       $tobool172 = ($29<<16>>16)==(0);
	       if ($tobool172) {
	        $err$0$ph = 84;
	        label = 115;
	        break L10;
	       } else {
	        $c$8 = $conv171;$l$2 = 2;
	        label = 90;
	        break L12;
	       }
	      }
	      break;
	     }
	     case 218:  {
	      $cmp176 = ($12&255)<(161);
	      if ($cmp176) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      }
	      break;
	     }
	     case 216: case 217:  {
	      break;
	     }
	     case 224:  {
	      $cmp283 = ($14>>>0)<(2);
	      if ($cmp283) {
	       $err$0 = 22;
	       break L10;
	      }
	      $add$ptr287 = (($13) + 1|0);
	      $36 = HEAP8[$add$ptr287>>0]|0;
	      $conv288 = $36&255;
	      $sub289 = (($conv288) + -64)|0;
	      $cmp290 = ($sub289>>>0)>(190);
	      $sub293 = (($conv288) + -127)|0;
	      $cmp294 = ($sub293>>>0)<(34);
	      $or$cond255 = $cmp290 | $cmp294;
	      if ($or$cond255) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      }
	      $cmp299 = ($sub289>>>0)>(62);
	      $sub302 = (($conv288) + -98)|0;
	      $sub302$sub289 = $cmp299 ? $sub302 : $sub289;
	      $sub304 = (($conv) + -161)|0;
	      $cmp305 = ($sub304>>>0)>(88);
	      if (!($cmp305)) {
	       $arrayidx365 = ((103448 + (($sub304*314)|0)|0) + ($sub302$sub289<<1)|0);
	       $41 = HEAP16[$arrayidx365>>1]|0;
	       $conv366 = $41&65535;
	       $cmp367 = ($sub304|0)==(39);
	       if ($cmp367) {
	        if ((($sub302$sub289|0) == 66) | (($sub302$sub289|0) == 58) | (($sub302$sub289|0) == 60)) {
	         $42 = 131072;
	        } else {
	         $42 = 0;
	        }
	       } else {
	        $42 = 0;
	       }
	       $or377 = $42 | $conv366;
	       $tobool378 = ($or377|0)==(0);
	       if ($tobool378) {
	        $err$0$ph = 84;
	        label = 115;
	        break L10;
	       } else {
	        $c$8 = $or377;$l$2 = 2;
	        label = 90;
	        break L12;
	       }
	      }
	      $sub308 = (($conv) + -135)|0;
	      $cmp309 = ($sub308>>>0)>(119);
	      if ($cmp309) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      }
	      $cmp313 = ($12&255)<(161);
	      $sub318 = (($conv) + -224)|0;
	      $c$4 = $cmp313 ? $sub308 : $sub318;
	      $mul320 = ($c$4*157)|0;
	      $add321 = (($sub302$sub289) + ($mul320))|0;
	      $div = $add321 >>> 4;
	      $add322 = (($div) + 4867)|0;
	      $arrayidx323 = (93064 + ($add322<<1)|0);
	      $37 = HEAP16[$arrayidx323>>1]|0;
	      $conv324 = $37&65535;
	      $rem = $add321 & 15;
	      $shr327 = $conv324 >>> $rem;
	      $rem328 = (($shr327|0) % 2)&-1;
	      $shl329 = $rem328 << 17;
	      $arrayidx332 = (93064 + ($add321<<1)|0);
	      $38 = HEAP16[$arrayidx332>>1]|0;
	      $conv333 = $38&65535;
	      $or = $conv333 | $shl329;
	      $div334$mask = $or & -65792;
	      $cmp335 = ($div334$mask|0)==(56320);
	      if (!($cmp335)) {
	       $tobool359 = ($or|0)==(0);
	       if ($tobool359) {
	        $err$0$ph = 84;
	        label = 115;
	        break L10;
	       } else {
	        $c$8 = $or;$l$2 = 2;
	        label = 90;
	        break L12;
	       }
	      }
	      if ($cmp340) {
	       $k$3 = 2;
	      } else {
	       $39 = HEAP8[$arrayidx346>>0]|0;
	       $conv347 = $39 << 24 >> 24;
	       $k$3 = $conv347;
	      }
	      $40 = HEAP32[$outb>>2]|0;
	      $cmp349 = ($k$3>>>0)>($40>>>0);
	      if ($cmp349) {
	       $err$0$ph = 7;
	       label = 115;
	       break L10;
	      }
	      $rem353 = $conv333 & 255;
	      $add$ptr354 = (103424 + ($rem353)|0);
	      HEAP32[$$compoundliteral>>2] = $add$ptr354;
	      HEAP32[$$compoundliteral355>>2] = 4;
	      $call356 = (_iconv($10,$$compoundliteral,$$compoundliteral355,$out,$outb)|0);
	      $add357 = (($call356) + ($x$0317))|0;
	      $l$3 = 2;$x$3 = $add357;
	      break L12;
	      break;
	     }
	     case 232:  {
	      $cmp382 = ($14>>>0)<(2);
	      if ($cmp382) {
	       $err$0 = 22;
	       break L10;
	      }
	      $add$ptr386 = (($13) + 1|0);
	      $43 = HEAP8[$add$ptr386>>0]|0;
	      $conv387 = $43&255;
	      $sub388 = (($conv) + -161)|0;
	      $sub389 = (($conv387) + -161)|0;
	      $cmp390 = ($sub388>>>0)>(92);
	      $cmp393 = ($sub389>>>0)>(93);
	      $or$cond256 = $cmp390 | $cmp393;
	      if (!($or$cond256)) {
	       $arrayidx478 = ((131400 + (($sub388*188)|0)|0) + ($sub389<<1)|0);
	       $45 = HEAP16[$arrayidx478>>1]|0;
	       $conv479 = $45&65535;
	       $tobool480 = ($45<<16>>16)==(0);
	       if ($tobool480) {
	        $err$0$ph = 84;
	        label = 115;
	        break L10;
	       } else {
	        $c$8 = $conv479;$l$2 = 2;
	        label = 90;
	        break L12;
	       }
	      }
	      $add396 = (($conv) + -129)|0;
	      $cmp398 = ($add396>>>0)>(92);
	      if ($cmp398) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      }
	      $cmp401 = ($add396>>>0)>(68);
	      $cmp404 = ($43&255)>(82);
	      $or$cond257 = $cmp401 & $cmp404;
	      if ($or$cond257) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      }
	      $sub408 = (($conv387) + -65)|0;
	      $cmp409 = ($sub408>>>0)<(26);
	      do {
	       if ($cmp409) {
	        $d$5 = $sub408;
	       } else {
	        $sub414 = (($conv387) + -97)|0;
	        $cmp415 = ($sub414>>>0)<(26);
	        if ($cmp415) {
	         $add419 = (($conv387) + -71)|0;
	         $d$5 = $add419;
	         break;
	        }
	        $sub421 = (($conv387) + -129)|0;
	        $cmp422 = ($sub421>>>0)<(126);
	        if (!($cmp422)) {
	         $err$0$ph = 84;
	         label = 115;
	         break L10;
	        }
	        $add426 = (($conv387) + -77)|0;
	        $d$5 = $add426;
	       }
	      } while(0);
	      $cmp431 = ($add396>>>0)<(32);
	      if ($cmp431) {
	       $mul434 = ($add396*178)|0;
	       $mul434$pn = $mul434;
	      } else {
	       $mul438 = ($sub388*84)|0;
	       $add439 = (($mul438) + 5696)|0;
	       $mul434$pn = $add439;
	      }
	      $c$5 = (($d$5) + 44032)|0;
	      $add442 = (($c$5) + ($mul434$pn))|0;
	      $cmp444301 = ($add442>>>0)<(44032);
	      if ($cmp444301) {
	       $c$8 = $add442;$l$2 = 2;
	       label = 90;
	       break L12;
	      } else {
	       $c$6302 = $add442;$d$6303 = 44032;
	      }
	      while(1) {
	       $sub461 = (($c$6302) - ($d$6303))|0;
	       $i447$0300 = 0;$k$4299 = 0;
	       while(1) {
	        $j452$0298 = 0;$k$5297 = $k$4299;
	        while(1) {
	         $arrayidx458 = ((131400 + (($i447$0300*188)|0)|0) + ($j452$0298<<1)|0);
	         $44 = HEAP16[$arrayidx458>>1]|0;
	         $conv459 = $44&65535;
	         $sub460 = (($conv459) - ($d$6303))|0;
	         $not$cmp462 = ($sub460>>>0)<=($sub461>>>0);
	         $inc465 = $not$cmp462&1;
	         $k$5$inc465 = (($inc465) + ($k$5297))|0;
	         $inc468 = (($j452$0298) + 1)|0;
	         $exitcond = ($inc468|0)==(94);
	         if ($exitcond) {
	          break;
	         } else {
	          $j452$0298 = $inc468;$k$5297 = $k$5$inc465;
	         }
	        }
	        $inc471 = (($i447$0300) + 1)|0;
	        $exitcond319 = ($inc471|0)==(93);
	        if ($exitcond319) {
	         break;
	        } else {
	         $i447$0300 = $inc471;$k$4299 = $k$5$inc465;
	        }
	       }
	       $add473 = (($c$6302) + 1)|0;
	       $add474 = (($k$5$inc465) + ($c$6302))|0;
	       $cmp444 = ($add473>>>0)>($add474>>>0);
	       if ($cmp444) {
	        $c$8 = $add474;$l$2 = 2;
	        label = 90;
	        break L12;
	       } else {
	        $c$6302 = $add474;$d$6303 = $add473;
	       }
	      }
	      break;
	     }
	     case 199:  {
	      $err$0$ph = 84;
	      label = 115;
	      break L10;
	      break;
	     }
	     default: {
	      $cmp485 = ($conv>>>0)<($add484>>>0);
	      if ($cmp485) {
	       $c$8 = $conv;$l$2 = 1;
	       label = 90;
	       break L12;
	      }
	      $sub491 = (($conv) - ($add484))|0;
	      $mul492 = ($sub491*5)|0;
	      $div493 = $mul492 >>> 2;
	      $add$ptr1$sum = (($div493) + ($add$ptr$sum))|0;
	      $arrayidx494 = (25360 + ($add$ptr1$sum)|0);
	      $46 = HEAP8[$arrayidx494>>0]|0;
	      $conv495 = $46&255;
	      $mul496 = $sub491 << 1;
	      $rem497 = $mul496 & 6;
	      $shr498 = $conv495 >>> $rem497;
	      $add$ptr1$sum251 = (($add501) + ($div493))|0;
	      $arrayidx502 = (25360 + ($add$ptr1$sum251)|0);
	      $47 = HEAP8[$arrayidx502>>0]|0;
	      $conv503 = $47&255;
	      $sub506 = (8 - ($rem497))|0;
	      $shl507 = $conv503 << $sub506;
	      $and508 = $shl507 & 1023;
	      $or509 = $and508 | $shr498;
	      $arrayidx510 = (148888 + ($or509<<1)|0);
	      $48 = HEAP16[$arrayidx510>>1]|0;
	      $conv511 = $48&65535;
	      $tobool512 = ($or509|0)==(0);
	      $conv$conv511 = $tobool512 ? $conv : $conv511;
	      $cmp516 = ($conv$conv511|0)==(1);
	      if ($cmp516) {
	       $err$0$ph = 84;
	       label = 115;
	       break L10;
	      } else {
	       $c$8 = $conv$conv511;$l$2 = 1;
	       label = 90;
	       break L12;
	      }
	     }
	     }
	    } while(0);
	    if ((label|0) == 14) {
	     label = 0;
	     $sub43 = (($c$0) + -55296)|0;
	     $cmp44 = ($sub43>>>0)<(2048);
	     $cmp47 = ($c$0>>>0)>(1114111);
	     $or$cond = $cmp44 | $cmp47;
	     if ($or$cond) {
	      $err$0$ph = 84;
	      label = 115;
	      break L10;
	     } else {
	      $c$8 = $c$0;$l$2 = 4;
	      label = 90;
	      break;
	     }
	    }
	    $sub181 = (($conv) + -129)|0;
	    $cmp182 = ($sub181>>>0)>(125);
	    if ($cmp182) {
	     $err$0$ph = 84;
	     label = 115;
	     break L10;
	    }
	    $cmp186 = ($14>>>0)<(2);
	    if ($cmp186) {
	     $err$0 = 22;
	     break L10;
	    }
	    $add$ptr190 = (($13) + 1|0);
	    $30 = HEAP8[$add$ptr190>>0]|0;
	    $conv191 = $30&255;
	    $cmp192 = ($30&255)<(161);
	    $or$cond253 = $cmp192 & $cmp195;
	    if ($or$cond253) {
	     $err$0$ph = 84;
	     label = 115;
	     break L10;
	    }
	    $sub199 = (($conv191) + -64)|0;
	    $cmp200 = ($sub199>>>0)>(190);
	    $cmp203 = ($30<<24>>24)==(127);
	    $or$cond1 = $cmp200 | $cmp203;
	    if (!($or$cond1)) {
	     $cmp274 = ($sub199>>>0)>(63);
	     $dec277 = (($conv191) + -65)|0;
	     $dec277$sub199 = $cmp274 ? $dec277 : $sub199;
	     $arrayidx280 = ((45184 + (($sub181*380)|0)|0) + ($dec277$sub199<<1)|0);
	     $35 = HEAP16[$arrayidx280>>1]|0;
	     $conv281 = $35&65535;
	     $c$8 = $conv281;$l$2 = 2;
	     label = 90;
	     break;
	    }
	    $sub206 = (($conv191) + -48)|0;
	    $cmp207 = ($sub206>>>0)<(10);
	    $or$cond254 = $cmp207 & $cmp211;
	    if (!($or$cond254)) {
	     $err$0$ph = 84;
	     label = 115;
	     break L10;
	    }
	    $cmp215 = ($14>>>0)<(4);
	    if ($cmp215) {
	     $err$0 = 22;
	     break L10;
	    }
	    $add$ptr223 = (($13) + 2|0);
	    $31 = HEAP8[$add$ptr223>>0]|0;
	    $conv224 = $31&255;
	    $sub225 = (($conv224) + -129)|0;
	    $cmp226 = ($sub225>>>0)>(126);
	    if ($cmp226) {
	     $err$0$ph = 84;
	     label = 115;
	     break L10;
	    }
	    $add$ptr233 = (($13) + 3|0);
	    $32 = HEAP8[$add$ptr233>>0]|0;
	    $conv234 = $32&255;
	    $sub235 = (($conv234) + -48)|0;
	    $cmp236 = ($sub235>>>0)>(9);
	    if ($cmp236) {
	     $err$0$ph = 84;
	     label = 115;
	     break L10;
	    }
	    $mul219 = ($sub181*10)|0;
	    $add220 = (($conv191) + ($mul219))|0;
	    $33 = ($add220*1260)|0;
	    $mul231 = ($sub225*10)|0;
	    $add232 = (($33) + -60352)|0;
	    $add241 = (($add232) + ($mul231))|0;
	    $add242 = (($add241) + ($sub235))|0;
	    $c$3309 = $add242;$d$2310 = 0;
	    while(1) {
	     $sub259 = (($c$3309) - ($d$2310))|0;
	     $i$0307 = 0;$k$0306 = 0;
	     while(1) {
	      $j$0305 = 0;$k$1304 = $k$0306;
	      while(1) {
	       $arrayidx256 = ((45184 + (($i$0307*380)|0)|0) + ($j$0305<<1)|0);
	       $34 = HEAP16[$arrayidx256>>1]|0;
	       $conv257 = $34&65535;
	       $sub258 = (($conv257) - ($d$2310))|0;
	       $not$cmp260 = ($sub258>>>0)<=($sub259>>>0);
	       $inc263 = $not$cmp260&1;
	       $k$1$inc263 = (($inc263) + ($k$1304))|0;
	       $inc265 = (($j$0305) + 1)|0;
	       $exitcond320 = ($inc265|0)==(190);
	       if ($exitcond320) {
	        break;
	       } else {
	        $j$0305 = $inc265;$k$1304 = $k$1$inc263;
	       }
	      }
	      $inc267 = (($i$0307) + 1)|0;
	      $exitcond321 = ($inc267|0)==(126);
	      if ($exitcond321) {
	       break;
	      } else {
	       $i$0307 = $inc267;$k$0306 = $k$1$inc263;
	      }
	     }
	     $add269 = (($c$3309) + 1)|0;
	     $add270 = (($k$1$inc263) + ($c$3309))|0;
	     $cmp244 = ($add269>>>0)>($add270>>>0);
	     if ($cmp244) {
	      $c$8 = $add270;$l$2 = 4;
	      label = 90;
	      break;
	     } else {
	      $c$3309 = $add270;$d$2310 = $add269;
	     }
	    }
	   } else {
	    $c$8 = $conv;$l$2 = 1;
	    label = 90;
	   }
	  } while(0);
	  L119: do {
	   if ((label|0) == 90) {
	    label = 0;
	    switch ($conv338|0) {
	    case 198:  {
	     $49 = HEAP32[$outb>>2]|0;
	     $cmp523 = ($49>>>0)<(4);
	     if ($cmp523) {
	      $err$0$ph = 7;
	      label = 115;
	      break L10;
	     }
	     $50 = HEAP32[$out>>2]|0;
	     HEAP32[$50>>2] = $c$8;
	     $add$ptr527 = (($50) + 4|0);
	     HEAP32[$out>>2] = $add$ptr527;
	     $51 = HEAP32[$outb>>2]|0;
	     $sub528 = (($51) + -4)|0;
	     HEAP32[$outb>>2] = $sub528;
	     $l$3 = $l$2;$x$3 = $x$0317;
	     break L119;
	     break;
	    }
	    case 200:  {
	     $52 = HEAP32[$outb>>2]|0;
	     $cmp530 = ($52>>>0)<(4);
	     if ($cmp530) {
	      $call533 = (_wctomb($tmp,$c$8)|0);
	      $53 = HEAP32[$outb>>2]|0;
	      $cmp534 = ($53>>>0)<($call533>>>0);
	      if ($cmp534) {
	       $err$0$ph = 7;
	       label = 115;
	       break L10;
	      }
	      $54 = HEAP32[$out>>2]|0;
	      _memcpy(($54|0),($tmp|0),($call533|0))|0;
	      $56 = $54;$k$7 = $call533;
	     } else {
	      $55 = HEAP32[$out>>2]|0;
	      $call539 = (_wctomb($55,$c$8)|0);
	      $56 = $55;$k$7 = $call539;
	     }
	     $add$ptr541 = (($56) + ($k$7)|0);
	     HEAP32[$out>>2] = $add$ptr541;
	     $57 = HEAP32[$outb>>2]|0;
	     $sub542 = (($57) - ($k$7))|0;
	     HEAP32[$outb>>2] = $sub542;
	     $l$3 = $l$2;$x$3 = $x$0317;
	     break L119;
	     break;
	    }
	    case 199:  {
	     $cmp544 = ($c$8>>>0)>(127);
	     if ($cmp544) {
	      $x$1 = $x$0317;
	      label = 99;
	     } else {
	      $c$9 = $c$8;$x$2 = $x$0317;
	     }
	     break;
	    }
	    case 193: case 194: case 197: case 196:  {
	     $cmp597 = ($c$8>>>0)<(65536);
	     $brmerge324 = $cmp597 | $cmp69;
	     if ($brmerge324) {
	      $cmp605 = ($c$8>>>0)>(65535);
	      $$c$8 = $cmp605 ? 65533 : $c$8;
	      $64 = HEAP32[$outb>>2]|0;
	      $cmp609 = ($64>>>0)<(2);
	      if ($cmp609) {
	       $err$0$ph = 7;
	       label = 115;
	       break L10;
	      }
	      $65 = HEAP32[$out>>2]|0;
	      $shr$i275 = $$c$8 >>> 8;
	      $conv$i276 = $shr$i275&255;
	      $arrayidx$i277 = (($65) + ($and$i274)|0);
	      HEAP8[$arrayidx$i277>>0] = $conv$i276;
	      $conv1$i278 = $$c$8&255;
	      $arrayidx2$i279 = (($65) + ($11)|0);
	      HEAP8[$arrayidx2$i279>>0] = $conv1$i278;
	      $add$ptr614 = (($65) + 2|0);
	      HEAP32[$out>>2] = $add$ptr614;
	      $66 = HEAP32[$outb>>2]|0;
	      $sub615 = (($66) + -2)|0;
	      HEAP32[$outb>>2] = $sub615;
	      $l$3 = $l$2;$x$3 = $x$0317;
	      break L119;
	     } else {
	      $67 = HEAP32[$outb>>2]|0;
	      $cmp617 = ($67>>>0)<(4);
	      if ($cmp617) {
	       $err$0$ph = 7;
	       label = 115;
	       break L10;
	      }
	      $sub621 = (($c$8) + -65536)|0;
	      $68 = HEAP32[$out>>2]|0;
	      $shr622 = $sub621 >>> 10;
	      $or623 = $sub621 >>> 18;
	      $shr$i269 = $or623 | 216;
	      $conv$i270 = $shr$i269&255;
	      $arrayidx$i271 = (($68) + ($and$i274)|0);
	      HEAP8[$arrayidx$i271>>0] = $conv$i270;
	      $conv1$i272 = $shr622&255;
	      $arrayidx2$i273 = (($68) + ($11)|0);
	      HEAP8[$arrayidx2$i273>>0] = $conv1$i272;
	      $and626 = $sub621 >>> 8;
	      $or627 = $and626 & 3;
	      $shr$i = $or627 | 220;
	      $conv$i266 = $shr$i&255;
	      $arrayidx$i267 = (($68) + ($add$ptr625$sum293)|0);
	      HEAP8[$arrayidx$i267>>0] = $conv$i266;
	      $conv1$i = $sub621&255;
	      $arrayidx2$i = (($68) + ($add$ptr625$sum294)|0);
	      HEAP8[$arrayidx2$i>>0] = $conv1$i;
	      $add$ptr629 = (($68) + 4|0);
	      HEAP32[$out>>2] = $add$ptr629;
	      $69 = HEAP32[$outb>>2]|0;
	      $sub630 = (($69) + -4)|0;
	      HEAP32[$outb>>2] = $sub630;
	      $l$3 = $l$2;$x$3 = $x$0317;
	      break L119;
	     }
	     break;
	    }
	    case 195: case 192:  {
	     $70 = HEAP32[$outb>>2]|0;
	     $cmp632 = ($70>>>0)<(4);
	     if ($cmp632) {
	      $err$0$ph = 7;
	      label = 115;
	      break L10;
	     }
	     $71 = HEAP32[$out>>2]|0;
	     $shr$i281 = $c$8 >>> 24;
	     $conv$i282 = $shr$i281&255;
	     $arrayidx$i283 = (($71) + ($and$i280)|0);
	     HEAP8[$arrayidx$i283>>0] = $conv$i282;
	     $shr1$i = $c$8 >>> 16;
	     $conv2$i284 = $shr1$i&255;
	     $arrayidx4$i = (($71) + ($xor3$i)|0);
	     HEAP8[$arrayidx4$i>>0] = $conv2$i284;
	     $shr5$i = $c$8 >>> 8;
	     $conv6$i285 = $shr5$i&255;
	     $arrayidx8$i = (($71) + ($xor7$i)|0);
	     HEAP8[$arrayidx8$i>>0] = $conv6$i285;
	     $conv9$i = $c$8&255;
	     $arrayidx11$i = (($71) + ($xor10$i)|0);
	     HEAP8[$arrayidx11$i>>0] = $conv9$i;
	     $add$ptr637 = (($71) + 4|0);
	     HEAP32[$out>>2] = $add$ptr637;
	     $72 = HEAP32[$outb>>2]|0;
	     $sub638 = (($72) + -4)|0;
	     HEAP32[$outb>>2] = $sub638;
	     $l$3 = $l$2;$x$3 = $x$0317;
	     break L119;
	     break;
	    }
	    default: {
	     $c$9 = $c$8;$x$2 = $x$0317;
	    }
	    }
	    L139: while(1) {
	     if ((label|0) == 99) {
	      label = 0;
	      $inc547 = (($x$1) + 1)|0;
	      $c$9 = 42;$x$2 = $inc547;
	     }
	     $58 = HEAP32[$outb>>2]|0;
	     $cmp550 = ($58|0)==(0);
	     if ($cmp550) {
	      $err$0$ph = 7;
	      label = 115;
	      break L10;
	     }
	     $cmp556 = ($c$9>>>0)<($add555>>>0);
	     if ($cmp556) {
	      $c$10 = $c$9;
	      break;
	     }
	     if ($cmp565312) {
	      $x$1 = $x$2;
	      label = 99;
	      continue;
	     } else {
	      $c$11313 = 0;
	     }
	     while(1) {
	      $mul568 = ($c$11313*5)|0;
	      $div569 = $mul568 >>> 2;
	      $add$ptr3$sum = (($div569) + ($add$ptr2$sum))|0;
	      $arrayidx570 = (25360 + ($add$ptr3$sum)|0);
	      $61 = HEAP8[$arrayidx570>>0]|0;
	      $conv571 = $61&255;
	      $mul572 = $c$11313 << 1;
	      $rem573 = $mul572 & 6;
	      $shr574 = $conv571 >>> $rem573;
	      $add$ptr3$sum249 = (($add577) + ($div569))|0;
	      $arrayidx578 = (25360 + ($add$ptr3$sum249)|0);
	      $62 = HEAP8[$arrayidx578>>0]|0;
	      $conv579 = $62&255;
	      $sub582 = (8 - ($rem573))|0;
	      $shl583 = $conv579 << $sub582;
	      $and584 = $shl583 & 1023;
	      $or585 = $and584 | $shr574;
	      $arrayidx586 = (148888 + ($or585<<1)|0);
	      $63 = HEAP16[$arrayidx586>>1]|0;
	      $conv587 = $63&65535;
	      $cmp588 = ($c$9|0)==($conv587|0);
	      $inc594 = (($c$11313) + 1)|0;
	      if ($cmp588) {
	       label = 106;
	       break L139;
	      }
	      $cmp565 = ($inc594>>>0)<($sub564>>>0);
	      if ($cmp565) {
	       $c$11313 = $inc594;
	      } else {
	       $x$1 = $x$2;
	       label = 99;
	       continue L139;
	      }
	     }
	    }
	    if ((label|0) == 106) {
	     label = 0;
	     $add591 = (($c$11313) + 128)|0;
	     $c$10 = $add591;
	    }
	    $conv559 = $c$10&255;
	    $59 = HEAP32[$out>>2]|0;
	    $incdec$ptr = (($59) + 1|0);
	    HEAP32[$out>>2] = $incdec$ptr;
	    HEAP8[$59>>0] = $conv559;
	    $60 = HEAP32[$outb>>2]|0;
	    $sub560 = (($60) + -1)|0;
	    HEAP32[$outb>>2] = $sub560;
	    $l$3 = $l$2;$x$3 = $x$2;
	   }
	  } while(0);
	  $73 = HEAP32[$in>>2]|0;
	  $add$ptr641 = (($73) + ($l$3)|0);
	  HEAP32[$in>>2] = $add$ptr641;
	  $sub642 = (($14) - ($l$3))|0;
	  HEAP32[$inb>>2] = $sub642;
	  $tobool8 = ($14|0)==($l$3|0);
	  if ($tobool8) {
	   $retval$0 = $x$3;
	   label = 117;
	   break;
	  } else {
	   $13 = $add$ptr641;$14 = $sub642;$x$0317 = $x$3;
	  }
	 }
	 if ((label|0) == 115) {
	  $err$0 = $err$0$ph;
	 }
	 else if ((label|0) == 117) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call644 = (___errno_location()|0);
	 HEAP32[$call644>>2] = $err$0;
	 $retval$0 = -1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _isalnum_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isalnum($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _isalpha_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isalpha($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _isblank_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isblank($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iscntrl_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iscntrl($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _isdigit_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $isdigittmp = (($c) + -48)|0;
	 $isdigit = ($isdigittmp>>>0)<(10);
	 $0 = $isdigit&1;
	 STACKTOP = sp;return ($0|0);
	}
	function _isgraph_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isgraph($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _islower_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_islower($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _isprint_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isprint($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _ispunct_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_ispunct($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _isspace_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isspace($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _isupper_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isupper($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _isxdigit_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isxdigit($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswalnum_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswalnum($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswalpha_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswalpha($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswblank_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswblank($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswcntrl_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswcntrl($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswctype_l($c,$t,$l) {
	 $c = $c|0;
	 $t = $t|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswctype($c,$t)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswdigit_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswdigit($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswgraph_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswgraph($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswlower_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswlower($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswprint_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswprint($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswpunct_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswpunct($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswspace_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswspace($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswupper_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswupper($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _iswxdigit_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_iswxdigit($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function ___strcoll_l($l,$r,$loc) {
	 $l = $l|0;
	 $r = $r|0;
	 $loc = $loc|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strcmp($l,$r)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _strcoll($l,$r) {
	 $l = $l|0;
	 $r = $r|0;
	 var $call$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call$i = (_strcmp($l,$r)|0);
	 STACKTOP = sp;return ($call$i|0);
	}
	function _strcasecmp_l($l,$r,$loc) {
	 $l = $l|0;
	 $r = $r|0;
	 $loc = $loc|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strcasecmp($l,$r)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _strfmon_l($s,$n,$loc,$fmt,$varargs) {
	 $s = $s|0;
	 $n = $n|0;
	 $loc = $loc|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 $call = (_vstrfmon_l($s,$n,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _vstrfmon_l($s,$n,$fmt,$ap) {
	 $s = $s|0;
	 $n = $n|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add42 = 0, $add60 = 0, $add69 = 0, $add70 = 0, $arglist_current = 0;
	 var $arglist_next = 0, $call76 = 0, $call80 = 0, $cmp30 = 0, $cmp48 = 0, $cmp7 = 0, $cmp72 = 0, $cmp77 = 0, $conv12 = 0, $conv22 = 0, $conv2210 = 0, $conv35 = 0, $conv3514 = 0, $conv3519 = 0, $conv53 = 0, $conv5323 = 0, $conv5328 = 0, $dec = 0, $fmt$addr$0$be = 0, $fmt$addr$033 = 0;
	 var $fmt$addr$1 = 0, $fmt$addr$1$pn = 0, $fmt$addr$2 = 0, $fmt$addr$3 = 0, $fmt$addr$4$lcssa = 0, $fmt$addr$48 = 0, $fmt$addr$5 = 0, $fmt$addr$513 = 0, $fmt$addr$518 = 0, $fmt$addr$6 = 0, $fmt$addr$7 = 0, $fmt$addr$722 = 0, $fmt$addr$727 = 0, $fmt$addr$8 = 0, $fw$0$lcssa = 0, $fw$09 = 0, $incdec$ptr13 = 0, $incdec$ptr20 = 0, $incdec$ptr27 = 0, $incdec$ptr4 = 0;
	 var $incdec$ptr5 = 0, $isdigit = 0, $isdigit2 = 0, $isdigit225 = 0, $isdigit4 = 0, $isdigit416 = 0, $isdigit7 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp124 = 0, $isdigittmp3 = 0, $isdigittmp315 = 0, $isdigittmp6 = 0, $left$0 = 0, $left$1 = 0, $lp$017 = 0, $lp$1 = 0, $mul = 0, $mul39 = 0, $mul57 = 0;
	 var $n$addr$0$be = 0, $n$addr$034 = 0, $or$cond = 0, $retval$0 = 0, $rp$026 = 0, $rp$1 = 0, $s$addr$0$be = 0, $s$addr$0$lcssa = 0, $s$addr$035 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub41 = 0, $sub59 = 0, $sub82 = 0, $tobool = 0, $tobool32 = 0, $tobool71 = 0, $vararg_buffer = 0;
	 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $w$0 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $tobool32 = ($n|0)==(0);
	 L1: do {
	  if ($tobool32) {
	   $s$addr$0$lcssa = $s;
	  } else {
	   $fmt$addr$033 = $fmt;$n$addr$034 = $n;$s$addr$035 = $s;
	   while(1) {
	    $0 = HEAP8[$fmt$addr$033>>0]|0;
	    if ((($0<<24>>24) == 37)) {
	     $incdec$ptr5 = (($fmt$addr$033) + 1|0);
	     $2 = HEAP8[$incdec$ptr5>>0]|0;
	     $cmp7 = ($2<<24>>24)==(37);
	     if ($cmp7) {
	      $1 = 37;$fmt$addr$1 = $incdec$ptr5;
	      label = 3;
	     } else {
	      $3 = $2;$fmt$addr$2 = $incdec$ptr5;$left$0 = 0;
	      L6: while(1) {
	       $conv12 = $3 << 24 >> 24;
	       switch ($conv12|0) {
	       case 61:  {
	        $incdec$ptr13 = (($fmt$addr$2) + 1|0);
	        $fmt$addr$3 = $incdec$ptr13;$left$1 = $left$0;
	        break;
	       }
	       case 45:  {
	        $fmt$addr$3 = $fmt$addr$2;$left$1 = 1;
	        break;
	       }
	       case 33: case 43: case 40: case 94:  {
	        $fmt$addr$3 = $fmt$addr$2;$left$1 = $left$0;
	        break;
	       }
	       default: {
	        break L6;
	       }
	       }
	       $incdec$ptr20 = (($fmt$addr$3) + 1|0);
	       $$pre = HEAP8[$incdec$ptr20>>0]|0;
	       $3 = $$pre;$fmt$addr$2 = $incdec$ptr20;$left$0 = $left$1;
	      }
	      $isdigittmp6 = (($conv12) + -48)|0;
	      $isdigit7 = ($isdigittmp6>>>0)<(10);
	      if ($isdigit7) {
	       $conv2210 = $conv12;$fmt$addr$48 = $fmt$addr$2;$fw$09 = 0;
	       while(1) {
	        $mul = ($fw$09*10)|0;
	        $sub = (($mul) + -48)|0;
	        $add = (($sub) + ($conv2210))|0;
	        $incdec$ptr27 = (($fmt$addr$48) + 1|0);
	        $4 = HEAP8[$incdec$ptr27>>0]|0;
	        $conv22 = $4 << 24 >> 24;
	        $isdigittmp = (($conv22) + -48)|0;
	        $isdigit = ($isdigittmp>>>0)<(10);
	        if ($isdigit) {
	         $conv2210 = $conv22;$fmt$addr$48 = $incdec$ptr27;$fw$09 = $add;
	        } else {
	         $5 = $4;$fmt$addr$4$lcssa = $incdec$ptr27;$fw$0$lcssa = $add;
	         break;
	        }
	       }
	      } else {
	       $5 = $3;$fmt$addr$4$lcssa = $fmt$addr$2;$fw$0$lcssa = 0;
	      }
	      $cmp30 = ($5<<24>>24)==(35);
	      if ($cmp30) {
	       $fmt$addr$513 = (($fmt$addr$4$lcssa) + 1|0);
	       $6 = HEAP8[$fmt$addr$513>>0]|0;
	       $conv3514 = $6 << 24 >> 24;
	       $isdigittmp315 = (($conv3514) + -48)|0;
	       $isdigit416 = ($isdigittmp315>>>0)<(10);
	       if ($isdigit416) {
	        $conv3519 = $conv3514;$fmt$addr$518 = $fmt$addr$513;$lp$017 = 0;
	        while(1) {
	         $mul39 = ($lp$017*10)|0;
	         $sub41 = (($mul39) + -48)|0;
	         $add42 = (($sub41) + ($conv3519))|0;
	         $fmt$addr$5 = (($fmt$addr$518) + 1|0);
	         $7 = HEAP8[$fmt$addr$5>>0]|0;
	         $conv35 = $7 << 24 >> 24;
	         $isdigittmp3 = (($conv35) + -48)|0;
	         $isdigit4 = ($isdigittmp3>>>0)<(10);
	         if ($isdigit4) {
	          $conv3519 = $conv35;$fmt$addr$518 = $fmt$addr$5;$lp$017 = $add42;
	         } else {
	          $8 = $7;$fmt$addr$6 = $fmt$addr$5;$lp$1 = $add42;
	          break;
	         }
	        }
	       } else {
	        $8 = $6;$fmt$addr$6 = $fmt$addr$513;$lp$1 = 0;
	       }
	      } else {
	       $8 = $5;$fmt$addr$6 = $fmt$addr$4$lcssa;$lp$1 = 0;
	      }
	      $cmp48 = ($8<<24>>24)==(46);
	      if ($cmp48) {
	       $fmt$addr$722 = (($fmt$addr$6) + 1|0);
	       $9 = HEAP8[$fmt$addr$722>>0]|0;
	       $conv5323 = $9 << 24 >> 24;
	       $isdigittmp124 = (($conv5323) + -48)|0;
	       $isdigit225 = ($isdigittmp124>>>0)<(10);
	       if ($isdigit225) {
	        $conv5328 = $conv5323;$fmt$addr$727 = $fmt$addr$722;$rp$026 = 0;
	        while(1) {
	         $mul57 = ($rp$026*10)|0;
	         $sub59 = (($mul57) + -48)|0;
	         $add60 = (($sub59) + ($conv5328))|0;
	         $fmt$addr$7 = (($fmt$addr$727) + 1|0);
	         $10 = HEAP8[$fmt$addr$7>>0]|0;
	         $conv53 = $10 << 24 >> 24;
	         $isdigittmp1 = (($conv53) + -48)|0;
	         $isdigit2 = ($isdigittmp1>>>0)<(10);
	         if ($isdigit2) {
	          $conv5328 = $conv53;$fmt$addr$727 = $fmt$addr$7;$rp$026 = $add60;
	         } else {
	          $fmt$addr$8 = $fmt$addr$7;$rp$1 = $add60;
	          break;
	         }
	        }
	       } else {
	        $fmt$addr$8 = $fmt$addr$722;$rp$1 = 0;
	       }
	      } else {
	       $fmt$addr$8 = $fmt$addr$6;$rp$1 = 2;
	      }
	      $add69 = (($lp$1) + 1)|0;
	      $add70 = (($add69) + ($rp$1))|0;
	      $tobool71 = ($left$0|0)==(0);
	      $cmp72 = ($fw$0$lcssa|0)>($add70|0);
	      $or$cond = $tobool71 & $cmp72;
	      $w$0 = $or$cond ? $fw$0$lcssa : $add70;
	      $arglist_current = HEAP32[$ap>>2]|0;
	      HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current+4>>2];$11 = +HEAPF64[tempDoublePtr>>3];
	      $arglist_next = (($arglist_current) + 8|0);
	      HEAP32[$ap>>2] = $arglist_next;
	      HEAP32[$vararg_buffer>>2] = $w$0;
	      $vararg_ptr1 = (($vararg_buffer) + 4|0);
	      HEAP32[$vararg_ptr1>>2] = $rp$1;
	      $vararg_ptr2 = (($vararg_buffer) + 8|0);
	      HEAPF64[tempDoublePtr>>3]=$11;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
	      $call76 = (_snprintf($s$addr$035,$n$addr$034,150136,$vararg_buffer)|0);
	      $cmp77 = ($call76>>>0)<($n$addr$034>>>0);
	      if (!($cmp77)) {
	       break;
	      }
	      $add$ptr = (($s$addr$035) + ($call76)|0);
	      $sub82 = (($n$addr$034) - ($call76))|0;
	      $fmt$addr$1$pn = $fmt$addr$8;$n$addr$0$be = $sub82;$s$addr$0$be = $add$ptr;
	     }
	    } else if ((($0<<24>>24) == 0)) {
	     $s$addr$0$lcssa = $s$addr$035;
	     break L1;
	    } else {
	     $1 = $0;$fmt$addr$1 = $fmt$addr$033;
	     label = 3;
	    }
	    if ((label|0) == 3) {
	     label = 0;
	     $incdec$ptr4 = (($s$addr$035) + 1|0);
	     HEAP8[$s$addr$035>>0] = $1;
	     $dec = (($n$addr$034) + -1)|0;
	     $fmt$addr$1$pn = $fmt$addr$1;$n$addr$0$be = $dec;$s$addr$0$be = $incdec$ptr4;
	    }
	    $fmt$addr$0$be = (($fmt$addr$1$pn) + 1|0);
	    $tobool = ($n$addr$0$be|0)==(0);
	    if ($tobool) {
	     $s$addr$0$lcssa = $s$addr$0$be;
	     break L1;
	    } else {
	     $fmt$addr$033 = $fmt$addr$0$be;$n$addr$034 = $n$addr$0$be;$s$addr$035 = $s$addr$0$be;
	    }
	   }
	   $call80 = (___errno_location()|0);
	   HEAP32[$call80>>2] = 7;
	   $retval$0 = -1;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 } while(0);
	 $sub$ptr$lhs$cast = $s$addr$0$lcssa;
	 $sub$ptr$rhs$cast = $s;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $retval$0 = $sub$ptr$sub;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strfmon($s,$n,$fmt,$varargs) {
	 $s = $s|0;
	 $n = $n|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 $call = (_vstrfmon_l($s,$n,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _strncasecmp_l($l,$r,$n,$loc) {
	 $l = $l|0;
	 $r = $r|0;
	 $n = $n|0;
	 $loc = $loc|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strncasecmp($l,$r,$n)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function ___strxfrm_l($dest,$src,$n,$loc) {
	 $dest = $dest|0;
	 $src = $src|0;
	 $n = $n|0;
	 $loc = $loc|0;
	 var $call = 0, $cmp = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strlen(($src|0))|0);
	 $cmp = ($call>>>0)<($n>>>0);
	 if ($cmp) {
	  (_strcpy(($dest|0),($src|0))|0);
	 }
	 STACKTOP = sp;return ($call|0);
	}
	function _strxfrm($dest,$src,$n) {
	 $dest = $dest|0;
	 $src = $src|0;
	 $n = $n|0;
	 var $call$i = 0, $cmp$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call$i = (_strlen(($src|0))|0);
	 $cmp$i = ($call$i>>>0)<($n>>>0);
	 if ($cmp$i) {
	  (_strcpy(($dest|0),($src|0))|0);
	 }
	 STACKTOP = sp;return ($call$i|0);
	}
	function _tolower_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_tolower($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _toupper_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_toupper($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _towctrans_l($c,$t,$l) {
	 $c = $c|0;
	 $t = $t|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_towctrans($c,$t)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _towlower_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_towlower($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _towupper_l($c,$l) {
	 $c = $c|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_towupper($c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function ___wcscoll_l($l,$r,$locale) {
	 $l = $l|0;
	 $r = $r|0;
	 $locale = $locale|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcscmp($l,$r)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wcscoll($l,$r) {
	 $l = $l|0;
	 $r = $r|0;
	 var $call$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call$i = (_wcscmp($l,$r)|0);
	 STACKTOP = sp;return ($call$i|0);
	}
	function _wcscoll_l($l,$r,$locale) {
	 $l = $l|0;
	 $r = $r|0;
	 $locale = $locale|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcscoll($l,$r)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function ___wcsxfrm_l($dest,$src,$n,$loc) {
	 $dest = $dest|0;
	 $src = $src|0;
	 $n = $n|0;
	 $loc = $loc|0;
	 var $add = 0, $arrayidx = 0, $call = 0, $cmp = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcslen($src)|0);
	 $cmp = ($call>>>0)<($n>>>0);
	 if ($cmp) {
	  $add = (($call) + 1)|0;
	  (_wmemcpy($dest,$src,$add)|0);
	 } else {
	  $tobool = ($n|0)==(0);
	  if (!($tobool)) {
	   $sub = (($n) + -1)|0;
	   (_wmemcpy($dest,$src,$sub)|0);
	   $arrayidx = (($dest) + ($sub<<2)|0);
	   HEAP32[$arrayidx>>2] = 0;
	  }
	 }
	 STACKTOP = sp;return ($call|0);
	}
	function _wcsxfrm($dest,$src,$n) {
	 $dest = $dest|0;
	 $src = $src|0;
	 $n = $n|0;
	 var $add$i = 0, $arrayidx$i = 0, $call$i = 0, $cmp$i = 0, $sub$i = 0, $tobool$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call$i = (_wcslen($src)|0);
	 $cmp$i = ($call$i>>>0)<($n>>>0);
	 if ($cmp$i) {
	  $add$i = (($call$i) + 1)|0;
	  (_wmemcpy($dest,$src,$add$i)|0);
	 } else {
	  $tobool$i = ($n|0)==(0);
	  if (!($tobool$i)) {
	   $sub$i = (($n) + -1)|0;
	   (_wmemcpy($dest,$src,$sub$i)|0);
	   $arrayidx$i = (($dest) + ($sub$i<<2)|0);
	   HEAP32[$arrayidx$i>>2] = 0;
	  }
	 }
	 STACKTOP = sp;return ($call$i|0);
	}
	function _wcsxfrm_l($dest,$src,$n,$locale) {
	 $dest = $dest|0;
	 $src = $src|0;
	 $n = $n|0;
	 $locale = $locale|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcsxfrm($dest,$src,$n)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wctrans_l($s,$l) {
	 $s = $s|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wctrans($s)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wctype_l($s,$l) {
	 $s = $s|0;
	 $l = $l|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wctype($s)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function ___cos($x,$y) {
	 $x = +$x;
	 $y = +$y;
	 var $add = 0.0, $add10 = 0.0, $add12 = 0.0, $add19 = 0.0, $add20 = 0.0, $add4 = 0.0, $add8 = 0.0, $mul = 0.0, $mul1 = 0.0, $mul11 = 0.0, $mul13 = 0.0, $mul16 = 0.0, $mul17 = 0.0, $mul2 = 0.0, $mul3 = 0.0, $mul5 = 0.0, $mul6 = 0.0, $mul7 = 0.0, $mul9 = 0.0, $sub = 0.0;
	 var $sub14 = 0.0, $sub15 = 0.0, $sub18 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $mul = $x * $x;
	 $mul1 = $mul * $mul;
	 $mul2 = $mul * 2.48015872894767294178E-5;
	 $add = $mul2 + -0.00138888888888741095749;
	 $mul3 = $mul * $add;
	 $add4 = $mul3 + 0.0416666666666666019037;
	 $mul5 = $mul * $add4;
	 $mul6 = $mul1 * $mul1;
	 $mul7 = $mul * -1.13596475577881948265E-11;
	 $add8 = $mul7 + 2.0875723212981748279E-9;
	 $mul9 = $mul * $add8;
	 $add10 = $mul9 + -2.75573143513906633035E-7;
	 $mul11 = $mul6 * $add10;
	 $add12 = $mul5 + $mul11;
	 $mul13 = $mul * 0.5;
	 $sub = 1.0 - $mul13;
	 $sub14 = 1.0 - $sub;
	 $sub15 = $sub14 - $mul13;
	 $mul16 = $mul * $add12;
	 $mul17 = $x * $y;
	 $sub18 = $mul16 - $mul17;
	 $add19 = $sub15 + $sub18;
	 $add20 = $sub + $add19;
	 STACKTOP = sp;return (+$add20);
	}
	function ___cosdf($x) {
	 $x = +$x;
	 var $add = 0.0, $add4 = 0.0, $add6 = 0.0, $add9 = 0.0, $conv = 0.0, $mul = 0.0, $mul1 = 0.0, $mul2 = 0.0, $mul3 = 0.0, $mul5 = 0.0, $mul7 = 0.0, $mul8 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $mul = $x * $x;
	 $mul1 = $mul * $mul;
	 $mul2 = $mul * 2.43904487962774090654E-5;
	 $add = $mul2 + -0.00138867637746099294692;
	 $mul3 = $mul * -0.49999999725103100312;
	 $add4 = $mul3 + 1.0;
	 $mul5 = $mul1 * 0.0416666233237390631894;
	 $add6 = $add4 + $mul5;
	 $mul7 = $mul * $mul1;
	 $mul8 = $mul7 * $add;
	 $add9 = $add6 + $mul8;
	 $conv = $add9;
	 STACKTOP = sp;return (+$conv);
	}
	function ___sin($x,$y,$iy) {
	 $x = +$x;
	 $y = +$y;
	 $iy = $iy|0;
	 var $add = 0.0, $add12 = 0.0, $add14 = 0.0, $add4 = 0.0, $add7 = 0.0, $add9 = 0.0, $cmp = 0, $mul = 0.0, $mul1 = 0.0, $mul10 = 0.0, $mul11 = 0.0, $mul13 = 0.0, $mul15 = 0.0, $mul16 = 0.0, $mul17 = 0.0, $mul19 = 0.0, $mul2 = 0.0, $mul3 = 0.0, $mul5 = 0.0, $mul6 = 0.0;
	 var $mul8 = 0.0, $retval$0 = 0.0, $sub = 0.0, $sub18 = 0.0, $sub20 = 0.0, $sub21 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $mul = $x * $x;
	 $mul1 = $mul * $mul;
	 $mul2 = $mul * 2.75573137070700676789E-6;
	 $add = $mul2 + -1.98412698298579493134E-4;
	 $mul3 = $mul * $add;
	 $add4 = $mul3 + 0.00833333333332248946124;
	 $mul5 = $mul * $mul1;
	 $mul6 = $mul * 1.58969099521155010221E-10;
	 $add7 = $mul6 + -2.50507602534068634195E-8;
	 $mul8 = $mul5 * $add7;
	 $add9 = $mul8 + $add4;
	 $mul10 = $mul * $x;
	 $cmp = ($iy|0)==(0);
	 if ($cmp) {
	  $mul11 = $mul * $add9;
	  $add12 = $mul11 + -0.166666666666666324348;
	  $mul13 = $mul10 * $add12;
	  $add14 = $mul13 + $x;
	  $retval$0 = $add14;
	  STACKTOP = sp;return (+$retval$0);
	 } else {
	  $mul15 = $y * 0.5;
	  $mul16 = $mul10 * $add9;
	  $sub = $mul15 - $mul16;
	  $mul17 = $mul * $sub;
	  $sub18 = $mul17 - $y;
	  $mul19 = $mul10 * -0.166666666666666324348;
	  $sub20 = $sub18 - $mul19;
	  $sub21 = $x - $sub20;
	  $retval$0 = $sub21;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 return +0;
	}
	function ___sindf($x) {
	 $x = +$x;
	 var $add = 0.0, $add10 = 0.0, $add5 = 0.0, $add7 = 0.0, $conv = 0.0, $mul = 0.0, $mul1 = 0.0, $mul2 = 0.0, $mul3 = 0.0, $mul4 = 0.0, $mul6 = 0.0, $mul8 = 0.0, $mul9 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $mul = $x * $x;
	 $mul1 = $mul * $mul;
	 $mul2 = $mul * 2.7183114939898219064E-6;
	 $add = $mul2 + -1.98393348360966317347E-4;
	 $mul3 = $mul * $x;
	 $mul4 = $mul * 0.0083333293858894631756;
	 $add5 = $mul4 + -0.166666666416265235595;
	 $mul6 = $mul3 * $add5;
	 $add7 = $mul6 + $x;
	 $mul8 = $mul3 * $mul1;
	 $mul9 = $mul8 * $add;
	 $add10 = $mul9 + $add7;
	 $conv = $add10;
	 STACKTOP = sp;return (+$conv);
	}
	function _ilogb($x) {
	 $x = +$x;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__x = 0.0, $__x13 = 0.0, $cond = 0, $conv = 0, $dec = 0, $e$011 = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
	 $3 = tempRet0;
	 $conv = $2 & 2047;
	 if ((($conv|0) == 2047)) {
	  $__x13 = nan;
	  $23 = $1 & 1048575;
	  $24 = ($0|0)!=(0);
	  $25 = ($23|0)!=(0);
	  $26 = $24 | $25;
	  $cond = $26 ? -2147483648 : 2147483647;
	  $retval$0 = $cond;
	  STACKTOP = sp;return ($retval$0|0);
	 } else if ((($conv|0) == 0)) {
	  $4 = (_bitshift64Shl(($0|0),($1|0),12)|0);
	  $5 = tempRet0;
	  $6 = ($4|0)==(0);
	  $7 = ($5|0)==(0);
	  $8 = $6 & $7;
	  if ($8) {
	   $__x = nan;
	   $retval$0 = -2147483648;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $9 = ($5|0)>(-1);
	  $10 = ($5|0)==(-1);
	  $11 = ($4>>>0)>(4294967295);
	  $12 = $10 & $11;
	  $13 = $9 | $12;
	  if ($13) {
	   $14 = $4;$15 = $5;$e$011 = -1023;
	  } else {
	   $retval$0 = -1023;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  while(1) {
	   $dec = (($e$011) + -1)|0;
	   $16 = (_bitshift64Shl(($14|0),($15|0),1)|0);
	   $17 = tempRet0;
	   $18 = ($17|0)>(-1);
	   $19 = ($17|0)==(-1);
	   $20 = ($16>>>0)>(4294967295);
	   $21 = $19 & $20;
	   $22 = $18 | $21;
	   if ($22) {
	    $14 = $16;$15 = $17;$e$011 = $dec;
	   } else {
	    $retval$0 = $dec;
	    break;
	   }
	  }
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $sub = (($conv) + -1023)|0;
	  $retval$0 = $sub;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _ilogbf($x) {
	 $x = +$x;
	 var $0 = 0, $__x = 0.0, $__x10 = 0.0, $and = 0, $cmp = 0, $cmp4 = 0, $cmp49 = 0, $cond = 0, $dec = 0, $e$011 = 0, $i$010 = 0, $retval$0 = 0, $shl = 0, $shl12$mask = 0, $shl5 = 0, $shr = 0, $sub = 0, $tobool13 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $shr = $0 >>> 23;
	 $and = $shr & 255;
	 do {
	  if ((($and|0) == 0)) {
	   $shl = $0 << 9;
	   $cmp = ($shl|0)==(0);
	   if ($cmp) {
	    $__x = nan;
	    $retval$0 = -2147483648;
	    break;
	   }
	   $cmp49 = ($shl|0)>(-1);
	   if ($cmp49) {
	    $e$011 = -127;$i$010 = $shl;
	    while(1) {
	     $dec = (($e$011) + -1)|0;
	     $shl5 = $i$010 << 1;
	     $cmp4 = ($shl5|0)>(-1);
	     if ($cmp4) {
	      $e$011 = $dec;$i$010 = $shl5;
	     } else {
	      $retval$0 = $dec;
	      break;
	     }
	    }
	   } else {
	    $retval$0 = -127;
	   }
	  } else if ((($and|0) == 255)) {
	   $__x10 = nan;
	   $shl12$mask = $0 & 8388607;
	   $tobool13 = ($shl12$mask|0)!=(0);
	   $cond = $tobool13 ? -2147483648 : 2147483647;
	   $retval$0 = $cond;
	  } else {
	   $sub = (($and) + -127)|0;
	   $retval$0 = $sub;
	  }
	 } while(0);
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _ilogbl($x) {
	 $x = +$x;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_ilogb($x)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _j0($x) {
	 $x = +$x;
	 var $0 = 0, $1 = 0, $add = 0.0, $add13 = 0.0, $add15 = 0.0, $add18 = 0.0, $add20 = 0.0, $add22 = 0.0, $add24 = 0.0, $add26 = 0.0, $add31 = 0.0, $and = 0, $call = 0.0, $call5 = 0.0, $cmp = 0, $cmp2 = 0, $cmp33 = 0, $cmp7 = 0, $div = 0.0, $div25 = 0.0;
	 var $div29 = 0.0, $mul = 0.0, $mul10 = 0.0, $mul11 = 0.0, $mul12 = 0.0, $mul14 = 0.0, $mul16 = 0.0, $mul17 = 0.0, $mul19 = 0.0, $mul21 = 0.0, $mul23 = 0.0, $mul28 = 0.0, $mul30 = 0.0, $mul36 = 0.0, $mul37 = 0.0, $retval$0 = 0.0, $sub = 0.0, $sub39 = 0.0, $x$addr$0 = 0.0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $and = $1 & 2147483647;
	 $cmp = ($and>>>0)>(2146435071);
	 if ($cmp) {
	  $mul = $x * $x;
	  $div = 1.0 / $mul;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $call = (+Math_abs((+$x)));
	 $cmp2 = ($and>>>0)>(1073741823);
	 if ($cmp2) {
	  $call5 = (+_common($and,$call,0));
	  $retval$0 = $call5;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp7 = ($and>>>0)>(1059061759);
	 if ($cmp7) {
	  $mul10 = $call * $call;
	  $mul11 = $mul10 * -4.61832688532103189199E-9;
	  $add = $mul11 + 1.8295404953270066567E-6;
	  $mul12 = $mul10 * $add;
	  $add13 = $mul12 + -1.89979294238854721751E-4;
	  $mul14 = $mul10 * $add13;
	  $add15 = $mul14 + 0.0156249999999999947958;
	  $mul16 = $mul10 * $add15;
	  $mul17 = $mul10 * 1.16614003333790000205E-9;
	  $add18 = $mul17 + 5.13546550207318111446E-7;
	  $mul19 = $mul10 * $add18;
	  $add20 = $mul19 + 1.1692678466333745026E-4;
	  $mul21 = $mul10 * $add20;
	  $add22 = $mul21 + 0.0156191029464890010492;
	  $mul23 = $mul10 * $add22;
	  $add24 = $mul23 + 1.0;
	  $div25 = $call * 0.5;
	  $add26 = $div25 + 1.0;
	  $sub = 1.0 - $div25;
	  $mul28 = $add26 * $sub;
	  $div29 = $mul16 / $add24;
	  $mul30 = $mul10 * $div29;
	  $add31 = $mul28 + $mul30;
	  $retval$0 = $add31;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp33 = ($and>>>0)>(939524095);
	 if ($cmp33) {
	  $mul36 = $call * 0.25;
	  $mul37 = $call * $mul36;
	  $x$addr$0 = $mul37;
	 } else {
	  $x$addr$0 = $call;
	 }
	 $sub39 = 1.0 - $x$addr$0;
	 $retval$0 = $sub39;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _common($ix,$x,$y0) {
	 $ix = $ix|0;
	 $x = +$x;
	 $y0 = $y0|0;
	 var $$$i = 0, $$$i24 = 0, $$24$i = 0, $$27$i = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
	 var $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add = 0.0, $add$i = 0.0, $add$i36 = 0.0, $add19$i = 0.0, $add19$i38 = 0.0, $add21$i = 0.0, $add21$i40 = 0.0, $add23$i = 0.0, $add23$i42 = 0.0, $add25$i = 0.0, $add25$i44 = 0.0;
	 var $add32$i = 0.0, $add33$i = 0.0, $add34$i = 0.0, $add35$i = 0.0, $add36$i = 0.0, $add37$i = 0.0, $add38$i = 0.0, $add39$i = 0.0, $add40$i = 0.0, $add41$i = 0.0, $add42$i = 0.0, $add43$i = 0.0, $add45$i = 0.0, $and$i = 0, $arrayidx12$i = 0, $arrayidx12$i30 = 0, $arrayidx13$i = 0, $arrayidx13$i31 = 0, $arrayidx14$i = 0, $arrayidx14$i32 = 0;
	 var $arrayidx15$i = 0, $arrayidx15$i33 = 0, $arrayidx16$i = 0, $arrayidx16$i34 = 0, $arrayidx27$i = 0, $arrayidx27$i45 = 0, $arrayidx28$i = 0, $arrayidx28$i46 = 0, $arrayidx29$i = 0, $arrayidx29$i47 = 0, $arrayidx30$i = 0, $arrayidx30$i48 = 0, $arrayidx31$i = 0, $c$0 = 0.0, $call = 0.0, $call1 = 0.0, $call25 = 0.0, $call4 = 0.0, $cc$0 = 0.0, $cc$1 = 0.0;
	 var $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp2$i = 0, $cmp2$i21 = 0, $cmp6$i = 0, $cmp6$i23 = 0, $cmp7 = 0, $div = 0.0, $div$i = 0.0, $div26 = 0.0, $div41$i = 0.0, $div44$i = 0.0, $div46$i = 0.0, $div9 = 0.0, $mul = 0.0, $mul$i = 0.0, $mul17$i = 0.0, $mul17$i35 = 0.0, $mul18 = 0.0;
	 var $mul18$i = 0.0, $mul18$i37 = 0.0, $mul20 = 0.0, $mul20$i = 0.0, $mul20$i39 = 0.0, $mul22$i = 0.0, $mul22$i41 = 0.0, $mul24 = 0.0, $mul24$i = 0.0, $mul24$i43 = 0.0, $mul31$i = 0.0, $mul32$i = 0.0, $mul33$i = 0.0, $mul34$i = 0.0, $mul35$i = 0.0, $mul36$i = 0.0, $mul37$i = 0.0, $mul38$i = 0.0, $mul39$i = 0.0, $mul40$i = 0.0;
	 var $mul42$i = 0.0, $mul6 = 0.0, $p$0$i = 0, $p$0$i27 = 0, $q$0$i = 0, $q$0$i26 = 0, $ss$0 = 0.0, $ss$1 = 0.0, $sub = 0.0, $sub15 = 0.0, $sub21 = 0.0, $sub3 = 0.0, $sub5 = 0.0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+Math_sin((+$x)));
	 $call1 = (+Math_cos((+$x)));
	 $tobool = ($y0|0)!=(0);
	 if ($tobool) {
	  $sub = -$call1;
	  $c$0 = $sub;
	 } else {
	  $c$0 = $call1;
	 }
	 $add = $call + $c$0;
	 $cmp = ($ix>>>0)<(2145386496);
	 if (!($cmp)) {
	  $cc$1 = $add;
	  $mul24 = $cc$1 * 0.56418958354775627928;
	  $call25 = (+Math_sqrt((+$x)));
	  $div26 = $mul24 / $call25;
	  STACKTOP = sp;return (+$div26);
	 }
	 $sub3 = $call - $c$0;
	 $mul = $x * 2.0;
	 $call4 = (+Math_cos((+$mul)));
	 $sub5 = -$call4;
	 $mul6 = $call * $c$0;
	 $cmp7 = $mul6 < 0.0;
	 if ($cmp7) {
	  $div = $sub5 / $sub3;
	  $cc$0 = $div;$ss$0 = $sub3;
	 } else {
	  $div9 = $sub5 / $add;
	  $cc$0 = $add;$ss$0 = $div9;
	 }
	 $cmp11 = ($ix>>>0)<(1207959552);
	 if (!($cmp11)) {
	  $cc$1 = $cc$0;
	  $mul24 = $cc$1 * 0.56418958354775627928;
	  $call25 = (+Math_sqrt((+$x)));
	  $div26 = $mul24 / $call25;
	  STACKTOP = sp;return (+$div26);
	 }
	 if ($tobool) {
	  $sub15 = -$ss$0;
	  $ss$1 = $sub15;
	 } else {
	  $ss$1 = $ss$0;
	 }
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $and$i = $1 & 2147483647;
	 $cmp$i = ($and$i>>>0)>(1075838975);
	 if ($cmp$i) {
	  $p$0$i = 150528;$q$0$i = 150576;
	 } else {
	  $cmp2$i = ($and$i>>>0)>(1074933386);
	  if ($cmp2$i) {
	   $p$0$i = 150616;$q$0$i = 150664;
	  } else {
	   $cmp6$i = ($and$i>>>0)>(1074191212);
	   $$$i = $cmp6$i ? 150752 : 150840;
	   $$24$i = $cmp6$i ? 150704 : 150792;
	   $p$0$i = $$24$i;$q$0$i = $$$i;
	  }
	 }
	 $mul$i = $x * $x;
	 $div$i = 1.0 / $mul$i;
	 $2 = +HEAPF64[$p$0$i>>3];
	 $arrayidx12$i = (($p$0$i) + 8|0);
	 $3 = +HEAPF64[$arrayidx12$i>>3];
	 $arrayidx13$i = (($p$0$i) + 16|0);
	 $4 = +HEAPF64[$arrayidx13$i>>3];
	 $arrayidx14$i = (($p$0$i) + 24|0);
	 $5 = +HEAPF64[$arrayidx14$i>>3];
	 $arrayidx15$i = (($p$0$i) + 32|0);
	 $6 = +HEAPF64[$arrayidx15$i>>3];
	 $arrayidx16$i = (($p$0$i) + 40|0);
	 $7 = +HEAPF64[$arrayidx16$i>>3];
	 $mul17$i = $div$i * $7;
	 $add$i = $6 + $mul17$i;
	 $mul18$i = $div$i * $add$i;
	 $add19$i = $5 + $mul18$i;
	 $mul20$i = $div$i * $add19$i;
	 $add21$i = $4 + $mul20$i;
	 $mul22$i = $div$i * $add21$i;
	 $add23$i = $3 + $mul22$i;
	 $mul24$i = $div$i * $add23$i;
	 $add25$i = $2 + $mul24$i;
	 $8 = +HEAPF64[$q$0$i>>3];
	 $arrayidx27$i = (($q$0$i) + 8|0);
	 $9 = +HEAPF64[$arrayidx27$i>>3];
	 $arrayidx28$i = (($q$0$i) + 16|0);
	 $10 = +HEAPF64[$arrayidx28$i>>3];
	 $arrayidx29$i = (($q$0$i) + 24|0);
	 $11 = +HEAPF64[$arrayidx29$i>>3];
	 $arrayidx30$i = (($q$0$i) + 32|0);
	 $12 = +HEAPF64[$arrayidx30$i>>3];
	 $mul31$i = $div$i * $12;
	 $add32$i = $11 + $mul31$i;
	 $mul33$i = $div$i * $add32$i;
	 $add34$i = $10 + $mul33$i;
	 $mul35$i = $div$i * $add34$i;
	 $add36$i = $9 + $mul35$i;
	 $mul37$i = $div$i * $add36$i;
	 $add38$i = $8 + $mul37$i;
	 $mul39$i = $div$i * $add38$i;
	 $add40$i = $mul39$i + 1.0;
	 $div41$i = $add25$i / $add40$i;
	 $add42$i = $div41$i + 1.0;
	 $mul18 = $cc$0 * $add42$i;
	 if ($cmp$i) {
	  $p$0$i27 = 150144;$q$0$i26 = 150192;
	 } else {
	  $cmp2$i21 = ($and$i>>>0)>(1074933386);
	  if ($cmp2$i21) {
	   $p$0$i27 = 150240;$q$0$i26 = 150288;
	  } else {
	   $cmp6$i23 = ($and$i>>>0)>(1074191212);
	   $$$i24 = $cmp6$i23 ? 150384 : 150480;
	   $$27$i = $cmp6$i23 ? 150336 : 150432;
	   $p$0$i27 = $$27$i;$q$0$i26 = $$$i24;
	  }
	 }
	 $13 = +HEAPF64[$p$0$i27>>3];
	 $arrayidx12$i30 = (($p$0$i27) + 8|0);
	 $14 = +HEAPF64[$arrayidx12$i30>>3];
	 $arrayidx13$i31 = (($p$0$i27) + 16|0);
	 $15 = +HEAPF64[$arrayidx13$i31>>3];
	 $arrayidx14$i32 = (($p$0$i27) + 24|0);
	 $16 = +HEAPF64[$arrayidx14$i32>>3];
	 $arrayidx15$i33 = (($p$0$i27) + 32|0);
	 $17 = +HEAPF64[$arrayidx15$i33>>3];
	 $arrayidx16$i34 = (($p$0$i27) + 40|0);
	 $18 = +HEAPF64[$arrayidx16$i34>>3];
	 $mul17$i35 = $div$i * $18;
	 $add$i36 = $17 + $mul17$i35;
	 $mul18$i37 = $div$i * $add$i36;
	 $add19$i38 = $16 + $mul18$i37;
	 $mul20$i39 = $div$i * $add19$i38;
	 $add21$i40 = $15 + $mul20$i39;
	 $mul22$i41 = $div$i * $add21$i40;
	 $add23$i42 = $14 + $mul22$i41;
	 $mul24$i43 = $div$i * $add23$i42;
	 $add25$i44 = $13 + $mul24$i43;
	 $19 = +HEAPF64[$q$0$i26>>3];
	 $arrayidx27$i45 = (($q$0$i26) + 8|0);
	 $20 = +HEAPF64[$arrayidx27$i45>>3];
	 $arrayidx28$i46 = (($q$0$i26) + 16|0);
	 $21 = +HEAPF64[$arrayidx28$i46>>3];
	 $arrayidx29$i47 = (($q$0$i26) + 24|0);
	 $22 = +HEAPF64[$arrayidx29$i47>>3];
	 $arrayidx30$i48 = (($q$0$i26) + 32|0);
	 $23 = +HEAPF64[$arrayidx30$i48>>3];
	 $arrayidx31$i = (($q$0$i26) + 40|0);
	 $24 = +HEAPF64[$arrayidx31$i>>3];
	 $mul32$i = $div$i * $24;
	 $add33$i = $23 + $mul32$i;
	 $mul34$i = $div$i * $add33$i;
	 $add35$i = $22 + $mul34$i;
	 $mul36$i = $div$i * $add35$i;
	 $add37$i = $21 + $mul36$i;
	 $mul38$i = $div$i * $add37$i;
	 $add39$i = $20 + $mul38$i;
	 $mul40$i = $div$i * $add39$i;
	 $add41$i = $19 + $mul40$i;
	 $mul42$i = $div$i * $add41$i;
	 $add43$i = $mul42$i + 1.0;
	 $div44$i = $add25$i44 / $add43$i;
	 $add45$i = $div44$i + -0.125;
	 $div46$i = $add45$i / $x;
	 $mul20 = $ss$1 * $div46$i;
	 $sub21 = $mul18 - $mul20;
	 $cc$1 = $sub21;
	 $mul24 = $cc$1 * 0.56418958354775627928;
	 $call25 = (+Math_sqrt((+$x)));
	 $div26 = $mul24 / $call25;
	 STACKTOP = sp;return (+$div26);
	}
	function _y0($x) {
	 $x = +$x;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0.0, $add$i = 0.0, $add13$i = 0.0, $add15$i = 0.0, $add18$i = 0.0, $add20 = 0.0, $add20$i = 0.0, $add22 = 0.0, $add22$i = 0.0, $add24 = 0.0, $add24$i = 0.0, $add26 = 0.0, $add26$i = 0.0, $add28 = 0.0;
	 var $add30 = 0.0, $add31$i = 0.0, $add32 = 0.0, $add34 = 0.0, $add36 = 0.0, $add42 = 0.0, $add46 = 0.0, $and$i = 0, $call = 0.0, $call$i = 0.0, $call39 = 0.0, $call44 = 0.0, $call5$i = 0.0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp15 = 0, $cmp2$i = 0, $cmp33$i = 0, $cmp7 = 0;
	 var $cmp7$i = 0, $div = 0.0, $div$i = 0.0, $div25$i = 0.0, $div29$i = 0.0, $div37 = 0.0, $mul = 0.0, $mul10$i = 0.0, $mul11$i = 0.0, $mul12$i = 0.0, $mul14$i = 0.0, $mul16$i = 0.0, $mul17$i = 0.0, $mul18 = 0.0, $mul19 = 0.0, $mul19$i = 0.0, $mul21 = 0.0, $mul21$i = 0.0, $mul23 = 0.0, $mul23$i = 0.0;
	 var $mul25 = 0.0, $mul27 = 0.0, $mul28$i = 0.0, $mul29 = 0.0, $mul30$i = 0.0, $mul31 = 0.0, $mul33 = 0.0, $mul35 = 0.0, $mul36$i = 0.0, $mul37$i = 0.0, $mul40 = 0.0, $mul41 = 0.0, $mul45 = 0.0, $retval$0 = 0.0, $retval$0$i = 0.0, $sub$i = 0.0, $sub39$i = 0.0, $x$addr$0$i = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $2 = (_bitshift64Shl(($1|0),0,1)|0);
	 $3 = tempRet0;
	 $4 = $2 | $0;
	 $3 | $1;
	 $cmp = ($4|0)==(0);
	 if ($cmp) {
	  $retval$0 = -inf;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $5 = ($1|0)<(0);
	 if ($5) {
	  $retval$0 = nan;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp7 = ($1>>>0)>(2146435071);
	 if ($cmp7) {
	  $div = 1.0 / $x;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp11 = ($1>>>0)>(1073741823);
	 if ($cmp11) {
	  $call = (+_common($1,$x,1));
	  $retval$0 = $call;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp15 = ($1>>>0)>(1044381695);
	 if (!($cmp15)) {
	  $call44 = (+Math_log((+$x)));
	  $mul45 = $call44 * 0.636619772367581382433;
	  $add46 = $mul45 + -0.0738042951086872317523;
	  $retval$0 = $add46;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $mul = $x * $x;
	 $mul18 = $mul * -3.98205194132103398453E-11;
	 $add = $mul18 + 1.95590137035022920206E-8;
	 $mul19 = $mul * $add;
	 $add20 = $mul19 + -3.81407053724364161125E-6;
	 $mul21 = $mul * $add20;
	 $add22 = $mul21 + 3.47453432093683650238E-4;
	 $mul23 = $mul * $add22;
	 $add24 = $mul23 + -0.0138185671945596898896;
	 $mul25 = $mul * $add24;
	 $add26 = $mul25 + 0.176666452509181115538;
	 $mul27 = $mul * $add26;
	 $add28 = $mul27 + -0.0738042951086872317523;
	 $mul29 = $mul * 4.41110311332675467403E-10;
	 $add30 = $mul29 + 2.59150851840457805467E-7;
	 $mul31 = $mul * $add30;
	 $add32 = $mul31 + 7.60068627350353253702E-5;
	 $mul33 = $mul * $add32;
	 $add34 = $mul33 + 0.0127304834834123699328;
	 $mul35 = $mul * $add34;
	 $add36 = $mul35 + 1.0;
	 $div37 = $add28 / $add36;
	 $and$i = $1 & 2147483647;
	 $cmp$i = ($and$i>>>0)>(2146435071);
	 do {
	  if ($cmp$i) {
	   $div$i = 1.0 / $mul;
	   $retval$0$i = $div$i;
	  } else {
	   $call$i = (+Math_abs((+$x)));
	   $cmp2$i = ($and$i>>>0)>(1073741823);
	   if ($cmp2$i) {
	    $call5$i = (+_common($and$i,$call$i,0));
	    $retval$0$i = $call5$i;
	    break;
	   }
	   $cmp7$i = ($and$i>>>0)>(1059061759);
	   if ($cmp7$i) {
	    $mul10$i = $call$i * $call$i;
	    $mul11$i = $mul10$i * -4.61832688532103189199E-9;
	    $add$i = $mul11$i + 1.8295404953270066567E-6;
	    $mul12$i = $mul10$i * $add$i;
	    $add13$i = $mul12$i + -1.89979294238854721751E-4;
	    $mul14$i = $mul10$i * $add13$i;
	    $add15$i = $mul14$i + 0.0156249999999999947958;
	    $mul16$i = $mul10$i * $add15$i;
	    $mul17$i = $mul10$i * 1.16614003333790000205E-9;
	    $add18$i = $mul17$i + 5.13546550207318111446E-7;
	    $mul19$i = $mul10$i * $add18$i;
	    $add20$i = $mul19$i + 1.1692678466333745026E-4;
	    $mul21$i = $mul10$i * $add20$i;
	    $add22$i = $mul21$i + 0.0156191029464890010492;
	    $mul23$i = $mul10$i * $add22$i;
	    $add24$i = $mul23$i + 1.0;
	    $div25$i = $call$i * 0.5;
	    $add26$i = $div25$i + 1.0;
	    $sub$i = 1.0 - $div25$i;
	    $mul28$i = $add26$i * $sub$i;
	    $div29$i = $mul16$i / $add24$i;
	    $mul30$i = $mul10$i * $div29$i;
	    $add31$i = $mul28$i + $mul30$i;
	    $retval$0$i = $add31$i;
	    break;
	   }
	   $cmp33$i = ($and$i>>>0)>(939524095);
	   if ($cmp33$i) {
	    $mul36$i = $call$i * 0.25;
	    $mul37$i = $call$i * $mul36$i;
	    $x$addr$0$i = $mul37$i;
	   } else {
	    $x$addr$0$i = $call$i;
	   }
	   $sub39$i = 1.0 - $x$addr$0$i;
	   $retval$0$i = $sub39$i;
	  }
	 } while(0);
	 $call39 = (+Math_log((+$x)));
	 $mul40 = $retval$0$i * $call39;
	 $mul41 = $mul40 * 0.636619772367581382433;
	 $add42 = $div37 + $mul41;
	 $retval$0 = $add42;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _j0f($x) {
	 $x = +$x;
	 var $0 = 0, $add = 0.0, $add10 = 0.0, $add12 = 0.0, $add15 = 0.0, $add17 = 0.0, $add19 = 0.0, $add21 = 0.0, $add23 = 0.0, $add28 = 0.0, $and = 0, $call = 0.0, $call3 = 0.0, $cmp = 0, $cmp1 = 0, $cmp30 = 0, $cmp5 = 0, $div = 0.0, $div22 = 0.0, $div26 = 0.0;
	 var $mul = 0.0, $mul11 = 0.0, $mul13 = 0.0, $mul14 = 0.0, $mul16 = 0.0, $mul18 = 0.0, $mul20 = 0.0, $mul25 = 0.0, $mul27 = 0.0, $mul32 = 0.0, $mul33 = 0.0, $mul7 = 0.0, $mul8 = 0.0, $mul9 = 0.0, $retval$0 = 0.0, $sub = 0.0, $sub35 = 0.0, $x$addr$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $and = $0 & 2147483647;
	 $cmp = ($and>>>0)>(2139095039);
	 if ($cmp) {
	  $mul = $x * $x;
	  $div = 1.0 / $mul;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $call = (+Math_abs((+$x)));
	 $cmp1 = ($and>>>0)>(1073741823);
	 if ($cmp1) {
	  $call3 = (+_common56($and,$call,0));
	  $retval$0 = $call3;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp5 = ($and>>>0)>(973078527);
	 if ($cmp5) {
	  $mul7 = $call * $call;
	  $mul8 = $mul7 * -4.61832705411779897986E-9;
	  $add = $mul8 + 1.82954045158112421632E-6;
	  $mul9 = $mul7 * $add;
	  $add10 = $mul9 + -1.8997929873876273632E-4;
	  $mul11 = $mul7 * $add10;
	  $add12 = $mul11 + 0.015625;
	  $mul13 = $mul7 * $add12;
	  $mul14 = $mul7 * 1.16614007339421732468E-9;
	  $add15 = $mul14 + 5.13546524416597094387E-7;
	  $mul16 = $mul7 * $add15;
	  $add17 = $mul16 + 1.16926785267423838377E-4;
	  $mul18 = $mul7 * $add17;
	  $add19 = $mul18 + 0.01561910286545753479;
	  $mul20 = $mul7 * $add19;
	  $add21 = $mul20 + 1.0;
	  $div22 = $call * 0.5;
	  $add23 = $div22 + 1.0;
	  $sub = 1.0 - $div22;
	  $mul25 = $add23 * $sub;
	  $div26 = $mul13 / $add21;
	  $mul27 = $mul7 * $div26;
	  $add28 = $mul25 + $mul27;
	  $retval$0 = $add28;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp30 = ($and>>>0)>(562036735);
	 if ($cmp30) {
	  $mul32 = $call * 0.25;
	  $mul33 = $call * $mul32;
	  $x$addr$0 = $mul33;
	 } else {
	  $x$addr$0 = $call;
	 }
	 $sub35 = 1.0 - $x$addr$0;
	 $retval$0 = $sub35;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _common56($ix,$x,$y0) {
	 $ix = $ix|0;
	 $x = +$x;
	 $y0 = $y0|0;
	 var $$$i = 0, $$$i22 = 0, $$24$i = 0, $$27$i = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
	 var $23 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add = 0.0, $add$i = 0.0, $add$i34 = 0.0, $add16$i = 0.0, $add16$i36 = 0.0, $add18$i = 0.0, $add18$i38 = 0.0, $add20$i = 0.0, $add20$i40 = 0.0, $add22$i = 0.0, $add22$i42 = 0.0, $add29$i = 0.0;
	 var $add30$i = 0.0, $add31$i = 0.0, $add32$i = 0.0, $add33$i = 0.0, $add34$i = 0.0, $add35$i = 0.0, $add36$i = 0.0, $add37$i = 0.0, $add38$i = 0.0, $add39$i = 0.0, $add40$i = 0.0, $add42$i = 0.0, $and$i = 0, $arrayidx10$i = 0, $arrayidx10$i29 = 0, $arrayidx11$i = 0, $arrayidx11$i30 = 0, $arrayidx12$i = 0, $arrayidx12$i31 = 0, $arrayidx13$i = 0;
	 var $arrayidx13$i32 = 0, $arrayidx24$i = 0, $arrayidx24$i43 = 0, $arrayidx25$i = 0, $arrayidx25$i44 = 0, $arrayidx26$i = 0, $arrayidx26$i45 = 0, $arrayidx27$i = 0, $arrayidx27$i46 = 0, $arrayidx28$i = 0, $arrayidx9$i = 0, $arrayidx9$i28 = 0, $c$0 = 0.0, $call = 0.0, $call1 = 0.0, $call25 = 0.0, $call4 = 0.0, $cc$0 = 0.0, $cc$1 = 0.0, $cmp = 0;
	 var $cmp$i = 0, $cmp1$i = 0, $cmp1$i19 = 0, $cmp11 = 0, $cmp4$i = 0, $cmp4$i21 = 0, $cmp7 = 0, $div = 0.0, $div$i = 0.0, $div26 = 0.0, $div38$i = 0.0, $div41$i = 0.0, $div43$i = 0.0, $div9 = 0.0, $mul = 0.0, $mul$i = 0.0, $mul14$i = 0.0, $mul14$i33 = 0.0, $mul15$i = 0.0, $mul15$i35 = 0.0;
	 var $mul17$i = 0.0, $mul17$i37 = 0.0, $mul18 = 0.0, $mul19$i = 0.0, $mul19$i39 = 0.0, $mul20 = 0.0, $mul21$i = 0.0, $mul21$i41 = 0.0, $mul24 = 0.0, $mul28$i = 0.0, $mul29$i = 0.0, $mul30$i = 0.0, $mul31$i = 0.0, $mul32$i = 0.0, $mul33$i = 0.0, $mul34$i = 0.0, $mul35$i = 0.0, $mul36$i = 0.0, $mul37$i = 0.0, $mul39$i = 0.0;
	 var $mul6 = 0.0, $p$0$i = 0, $p$0$i25 = 0, $q$0$i = 0, $q$0$i24 = 0, $ss$0 = 0.0, $ss$1 = 0.0, $sub = 0.0, $sub15 = 0.0, $sub21 = 0.0, $sub3 = 0.0, $sub5 = 0.0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+Math_sin((+$x)));
	 $call1 = (+Math_cos((+$x)));
	 $tobool = ($y0|0)!=(0);
	 if ($tobool) {
	  $sub = -$call1;
	  $c$0 = $sub;
	 } else {
	  $c$0 = $call1;
	 }
	 $add = $call + $c$0;
	 $cmp = ($ix>>>0)<(2130706432);
	 if (!($cmp)) {
	  $cc$1 = $add;
	  $mul24 = $cc$1 * 0.564189612865447998047;
	  $call25 = (+Math_sqrt((+$x)));
	  $div26 = $mul24 / $call25;
	  STACKTOP = sp;return (+$div26);
	 }
	 $sub3 = $call - $c$0;
	 $mul = $x * 2.0;
	 $call4 = (+Math_cos((+$mul)));
	 $sub5 = -$call4;
	 $mul6 = $call * $c$0;
	 $cmp7 = $mul6 < 0.0;
	 if ($cmp7) {
	  $div = $sub5 / $sub3;
	  $cc$0 = $div;$ss$0 = $sub3;
	 } else {
	  $div9 = $sub5 / $add;
	  $cc$0 = $add;$ss$0 = $div9;
	 }
	 $cmp11 = ($ix>>>0)<(1484783616);
	 if (!($cmp11)) {
	  $cc$1 = $cc$0;
	  $mul24 = $cc$1 * 0.564189612865447998047;
	  $call25 = (+Math_sqrt((+$x)));
	  $div26 = $mul24 / $call25;
	  STACKTOP = sp;return (+$div26);
	 }
	 if ($tobool) {
	  $sub15 = -$ss$0;
	  $ss$1 = $sub15;
	 } else {
	  $ss$1 = $ss$0;
	 }
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $and$i = $0 & 2147483647;
	 $cmp$i = ($and$i>>>0)>(1090519039);
	 if ($cmp$i) {
	  $p$0$i = 151072;$q$0$i = 151096;
	 } else {
	  $cmp1$i = ($and$i>>>0)>(1089936471);
	  if ($cmp1$i) {
	   $p$0$i = 151120;$q$0$i = 151144;
	  } else {
	   $cmp4$i = ($and$i>>>0)>(1077336935);
	   $$$i = $cmp4$i ? 151192 : 151240;
	   $$24$i = $cmp4$i ? 151168 : 151216;
	   $p$0$i = $$24$i;$q$0$i = $$$i;
	  }
	 }
	 $mul$i = $x * $x;
	 $div$i = 1.0 / $mul$i;
	 $1 = +HEAPF32[$p$0$i>>2];
	 $arrayidx9$i = (($p$0$i) + 4|0);
	 $2 = +HEAPF32[$arrayidx9$i>>2];
	 $arrayidx10$i = (($p$0$i) + 8|0);
	 $3 = +HEAPF32[$arrayidx10$i>>2];
	 $arrayidx11$i = (($p$0$i) + 12|0);
	 $4 = +HEAPF32[$arrayidx11$i>>2];
	 $arrayidx12$i = (($p$0$i) + 16|0);
	 $5 = +HEAPF32[$arrayidx12$i>>2];
	 $arrayidx13$i = (($p$0$i) + 20|0);
	 $6 = +HEAPF32[$arrayidx13$i>>2];
	 $mul14$i = $div$i * $6;
	 $add$i = $5 + $mul14$i;
	 $mul15$i = $div$i * $add$i;
	 $add16$i = $4 + $mul15$i;
	 $mul17$i = $div$i * $add16$i;
	 $add18$i = $3 + $mul17$i;
	 $mul19$i = $div$i * $add18$i;
	 $add20$i = $2 + $mul19$i;
	 $mul21$i = $div$i * $add20$i;
	 $add22$i = $1 + $mul21$i;
	 $7 = +HEAPF32[$q$0$i>>2];
	 $arrayidx24$i = (($q$0$i) + 4|0);
	 $8 = +HEAPF32[$arrayidx24$i>>2];
	 $arrayidx25$i = (($q$0$i) + 8|0);
	 $9 = +HEAPF32[$arrayidx25$i>>2];
	 $arrayidx26$i = (($q$0$i) + 12|0);
	 $10 = +HEAPF32[$arrayidx26$i>>2];
	 $arrayidx27$i = (($q$0$i) + 16|0);
	 $11 = +HEAPF32[$arrayidx27$i>>2];
	 $mul28$i = $div$i * $11;
	 $add29$i = $10 + $mul28$i;
	 $mul30$i = $div$i * $add29$i;
	 $add31$i = $9 + $mul30$i;
	 $mul32$i = $div$i * $add31$i;
	 $add33$i = $8 + $mul32$i;
	 $mul34$i = $div$i * $add33$i;
	 $add35$i = $7 + $mul34$i;
	 $mul36$i = $div$i * $add35$i;
	 $add37$i = $mul36$i + 1.0;
	 $div38$i = $add22$i / $add37$i;
	 $add39$i = $div38$i + 1.0;
	 $mul18 = $cc$0 * $add39$i;
	 if ($cmp$i) {
	  $p$0$i25 = 150880;$q$0$i24 = 150904;
	 } else {
	  $cmp1$i19 = ($and$i>>>0)>(1089936471);
	  if ($cmp1$i19) {
	   $p$0$i25 = 150928;$q$0$i24 = 150952;
	  } else {
	   $cmp4$i21 = ($and$i>>>0)>(1077336935);
	   $$$i22 = $cmp4$i21 ? 151000 : 151048;
	   $$27$i = $cmp4$i21 ? 150976 : 151024;
	   $p$0$i25 = $$27$i;$q$0$i24 = $$$i22;
	  }
	 }
	 $12 = +HEAPF32[$p$0$i25>>2];
	 $arrayidx9$i28 = (($p$0$i25) + 4|0);
	 $13 = +HEAPF32[$arrayidx9$i28>>2];
	 $arrayidx10$i29 = (($p$0$i25) + 8|0);
	 $14 = +HEAPF32[$arrayidx10$i29>>2];
	 $arrayidx11$i30 = (($p$0$i25) + 12|0);
	 $15 = +HEAPF32[$arrayidx11$i30>>2];
	 $arrayidx12$i31 = (($p$0$i25) + 16|0);
	 $16 = +HEAPF32[$arrayidx12$i31>>2];
	 $arrayidx13$i32 = (($p$0$i25) + 20|0);
	 $17 = +HEAPF32[$arrayidx13$i32>>2];
	 $mul14$i33 = $div$i * $17;
	 $add$i34 = $16 + $mul14$i33;
	 $mul15$i35 = $div$i * $add$i34;
	 $add16$i36 = $15 + $mul15$i35;
	 $mul17$i37 = $div$i * $add16$i36;
	 $add18$i38 = $14 + $mul17$i37;
	 $mul19$i39 = $div$i * $add18$i38;
	 $add20$i40 = $13 + $mul19$i39;
	 $mul21$i41 = $div$i * $add20$i40;
	 $add22$i42 = $12 + $mul21$i41;
	 $18 = +HEAPF32[$q$0$i24>>2];
	 $arrayidx24$i43 = (($q$0$i24) + 4|0);
	 $19 = +HEAPF32[$arrayidx24$i43>>2];
	 $arrayidx25$i44 = (($q$0$i24) + 8|0);
	 $20 = +HEAPF32[$arrayidx25$i44>>2];
	 $arrayidx26$i45 = (($q$0$i24) + 12|0);
	 $21 = +HEAPF32[$arrayidx26$i45>>2];
	 $arrayidx27$i46 = (($q$0$i24) + 16|0);
	 $22 = +HEAPF32[$arrayidx27$i46>>2];
	 $arrayidx28$i = (($q$0$i24) + 20|0);
	 $23 = +HEAPF32[$arrayidx28$i>>2];
	 $mul29$i = $div$i * $23;
	 $add30$i = $22 + $mul29$i;
	 $mul31$i = $div$i * $add30$i;
	 $add32$i = $21 + $mul31$i;
	 $mul33$i = $div$i * $add32$i;
	 $add34$i = $20 + $mul33$i;
	 $mul35$i = $div$i * $add34$i;
	 $add36$i = $19 + $mul35$i;
	 $mul37$i = $div$i * $add36$i;
	 $add38$i = $18 + $mul37$i;
	 $mul39$i = $div$i * $add38$i;
	 $add40$i = $mul39$i + 1.0;
	 $div41$i = $add22$i42 / $add40$i;
	 $add42$i = $div41$i + -0.125;
	 $div43$i = $add42$i / $x;
	 $mul20 = $ss$1 * $div43$i;
	 $sub21 = $mul18 - $mul20;
	 $cc$1 = $sub21;
	 $mul24 = $cc$1 * 0.564189612865447998047;
	 $call25 = (+Math_sqrt((+$x)));
	 $div26 = $mul24 / $call25;
	 STACKTOP = sp;return (+$div26);
	}
	function _y0f($x) {
	 $x = +$x;
	 var $0 = 0, $add = 0.0, $add$i = 0.0, $add10$i = 0.0, $add12$i = 0.0, $add13 = 0.0, $add15 = 0.0, $add15$i = 0.0, $add17 = 0.0, $add17$i = 0.0, $add19 = 0.0, $add19$i = 0.0, $add21 = 0.0, $add21$i = 0.0, $add23 = 0.0, $add23$i = 0.0, $add25 = 0.0, $add27 = 0.0, $add28$i = 0.0, $add29 = 0.0;
	 var $add35 = 0.0, $add39 = 0.0, $and = 0, $call = 0.0, $call$i = 0.0, $call3$i = 0.0, $call32 = 0.0, $call37 = 0.0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp3 = 0, $cmp30$i = 0, $cmp5$i = 0, $cmp6 = 0, $cmp9 = 0, $div = 0.0, $div$i = 0.0, $div22$i = 0.0, $div26$i = 0.0;
	 var $div30 = 0.0, $mul = 0.0, $mul11 = 0.0, $mul11$i = 0.0, $mul12 = 0.0, $mul13$i = 0.0, $mul14 = 0.0, $mul14$i = 0.0, $mul16 = 0.0, $mul16$i = 0.0, $mul18 = 0.0, $mul18$i = 0.0, $mul20 = 0.0, $mul20$i = 0.0, $mul22 = 0.0, $mul24 = 0.0, $mul25$i = 0.0, $mul26 = 0.0, $mul27$i = 0.0, $mul28 = 0.0;
	 var $mul32$i = 0.0, $mul33 = 0.0, $mul33$i = 0.0, $mul34 = 0.0, $mul38 = 0.0, $mul7$i = 0.0, $mul8$i = 0.0, $mul9$i = 0.0, $retval$0 = 0.0, $retval$0$i = 0.0, $sub$i = 0.0, $sub35$i = 0.0, $tobool = 0, $x$addr$0$i = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $and = $0 & 2147483647;
	 $cmp = ($and|0)==(0);
	 if ($cmp) {
	  $retval$0 = -inf;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $tobool = ($0|0)<(0);
	 if ($tobool) {
	  $retval$0 = nan;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp3 = ($0>>>0)>(2139095039);
	 if ($cmp3) {
	  $div = 1.0 / $x;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp6 = ($0>>>0)>(1073741823);
	 if ($cmp6) {
	  $call = (+_common56($0,$x,1));
	  $retval$0 = $call;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp9 = ($0>>>0)>(956301311);
	 if (!($cmp9)) {
	  $call37 = (+Math_log((+$x)));
	  $mul38 = $call37 * 0.636619746685028076171;
	  $add39 = $mul38 + -0.0738042965531349182129;
	  $retval$0 = $add39;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $mul = $x * $x;
	 $mul11 = $mul * -3.98205184104494236408E-11;
	 $add = $mul11 + 1.95590139639989502029E-8;
	 $mul12 = $mul * $add;
	 $add13 = $mul12 + -3.81407062377547845244E-6;
	 $mul14 = $mul * $add13;
	 $add15 = $mul14 + 3.4745343145914375782E-4;
	 $mul16 = $mul * $add15;
	 $add17 = $mul16 + -0.013818567618727684021;
	 $mul18 = $mul * $add17;
	 $add19 = $mul18 + 0.17666645348072052002;
	 $mul20 = $mul * $add19;
	 $add21 = $mul20 + -0.0738042965531349182129;
	 $mul22 = $mul * 4.41110314941539627398E-10;
	 $add23 = $mul22 + 2.59150851888989564031E-7;
	 $mul24 = $mul * $add23;
	 $add25 = $mul24 + 7.60068651288747787476E-5;
	 $mul26 = $mul * $add25;
	 $add27 = $mul26 + 0.0127304838970303535461;
	 $mul28 = $mul * $add27;
	 $add29 = $mul28 + 1.0;
	 $div30 = $add21 / $add29;
	 $cmp$i = ($and>>>0)>(2139095039);
	 do {
	  if ($cmp$i) {
	   $div$i = 1.0 / $mul;
	   $retval$0$i = $div$i;
	  } else {
	   $call$i = (+Math_abs((+$x)));
	   $cmp1$i = ($and>>>0)>(1073741823);
	   if ($cmp1$i) {
	    $call3$i = (+_common56($and,$call$i,0));
	    $retval$0$i = $call3$i;
	    break;
	   }
	   $cmp5$i = ($and>>>0)>(973078527);
	   if ($cmp5$i) {
	    $mul7$i = $call$i * $call$i;
	    $mul8$i = $mul7$i * -4.61832705411779897986E-9;
	    $add$i = $mul8$i + 1.82954045158112421632E-6;
	    $mul9$i = $mul7$i * $add$i;
	    $add10$i = $mul9$i + -1.8997929873876273632E-4;
	    $mul11$i = $mul7$i * $add10$i;
	    $add12$i = $mul11$i + 0.015625;
	    $mul13$i = $mul7$i * $add12$i;
	    $mul14$i = $mul7$i * 1.16614007339421732468E-9;
	    $add15$i = $mul14$i + 5.13546524416597094387E-7;
	    $mul16$i = $mul7$i * $add15$i;
	    $add17$i = $mul16$i + 1.16926785267423838377E-4;
	    $mul18$i = $mul7$i * $add17$i;
	    $add19$i = $mul18$i + 0.01561910286545753479;
	    $mul20$i = $mul7$i * $add19$i;
	    $add21$i = $mul20$i + 1.0;
	    $div22$i = $call$i * 0.5;
	    $add23$i = $div22$i + 1.0;
	    $sub$i = 1.0 - $div22$i;
	    $mul25$i = $add23$i * $sub$i;
	    $div26$i = $mul13$i / $add21$i;
	    $mul27$i = $mul7$i * $div26$i;
	    $add28$i = $mul25$i + $mul27$i;
	    $retval$0$i = $add28$i;
	    break;
	   }
	   $cmp30$i = ($and>>>0)>(562036735);
	   if ($cmp30$i) {
	    $mul32$i = $call$i * 0.25;
	    $mul33$i = $call$i * $mul32$i;
	    $x$addr$0$i = $mul33$i;
	   } else {
	    $x$addr$0$i = $call$i;
	   }
	   $sub35$i = 1.0 - $x$addr$0$i;
	   $retval$0$i = $sub35$i;
	  }
	 } while(0);
	 $call32 = (+Math_log((+$x)));
	 $mul33 = $retval$0$i * $call32;
	 $mul34 = $mul33 * 0.636619746685028076171;
	 $add35 = $div30 + $mul34;
	 $retval$0 = $add35;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _j1($x) {
	 $x = +$x;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0.0, $add14 = 0.0, $add16 = 0.0, $add19 = 0.0, $add21 = 0.0, $add23 = 0.0, $add25 = 0.0, $add27 = 0.0, $add30 = 0.0, $and = 0, $call = 0.0, $call6 = 0.0, $cmp = 0, $cmp3 = 0, $cmp8 = 0, $div = 0.0;
	 var $div28 = 0.0, $mul = 0.0, $mul11 = 0.0, $mul12 = 0.0, $mul13 = 0.0, $mul15 = 0.0, $mul17 = 0.0, $mul18 = 0.0, $mul20 = 0.0, $mul22 = 0.0, $mul24 = 0.0, $mul26 = 0.0, $mul31 = 0.0, $retval$0 = 0.0, $z$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
	 $3 = tempRet0;
	 $and = $1 & 2147483647;
	 $cmp = ($and>>>0)>(2146435071);
	 if ($cmp) {
	  $mul = $x * $x;
	  $div = 1.0 / $mul;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp3 = ($and>>>0)>(1073741823);
	 if ($cmp3) {
	  $call = (+Math_abs((+$x)));
	  $call6 = (+_common57($and,$call,0,$2));
	  $retval$0 = $call6;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp8 = ($and>>>0)>(939524095);
	 if ($cmp8) {
	  $mul11 = $x * $x;
	  $mul12 = $mul11 * 4.96727999609584448412E-8;
	  $add = $mul12 + -1.5995563108403559752E-5;
	  $mul13 = $mul11 * $add;
	  $add14 = $mul13 + 0.00140705666955189706048;
	  $mul15 = $mul11 * $add14;
	  $add16 = $mul15 + -0.0625;
	  $mul17 = $mul11 * $add16;
	  $mul18 = $mul11 * 1.23542274426137913908E-11;
	  $add19 = $mul18 + 5.04636257076217042715E-9;
	  $mul20 = $mul11 * $add19;
	  $add21 = $mul20 + 1.17718464042623683263E-6;
	  $mul22 = $mul11 * $add21;
	  $add23 = $mul22 + 1.8594678558863091556E-4;
	  $mul24 = $mul11 * $add23;
	  $add25 = $mul24 + 0.0191537599538363460805;
	  $mul26 = $mul11 * $add25;
	  $add27 = $mul26 + 1.0;
	  $div28 = $mul17 / $add27;
	  $z$0 = $div28;
	 } else {
	  $z$0 = $x;
	 }
	 $add30 = $z$0 + 0.5;
	 $mul31 = $add30 * $x;
	 $retval$0 = $mul31;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _common57($ix,$x,$y1,$sign) {
	 $ix = $ix|0;
	 $x = +$x;
	 $y1 = $y1|0;
	 $sign = $sign|0;
	 var $$$i = 0, $$$i25 = 0, $$24$i = 0, $$27$i = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
	 var $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add$i = 0.0, $add$i37 = 0.0, $add19$i = 0.0, $add19$i39 = 0.0, $add21$i = 0.0, $add21$i41 = 0.0, $add23$i = 0.0, $add23$i43 = 0.0, $add25$i = 0.0, $add25$i45 = 0.0, $add32$i = 0.0;
	 var $add33$i = 0.0, $add34$i = 0.0, $add35$i = 0.0, $add36$i = 0.0, $add37$i = 0.0, $add38$i = 0.0, $add39$i = 0.0, $add40$i = 0.0, $add41$i = 0.0, $add42$i = 0.0, $add43$i = 0.0, $add45$i = 0.0, $and$i = 0, $arrayidx12$i = 0, $arrayidx12$i31 = 0, $arrayidx13$i = 0, $arrayidx13$i32 = 0, $arrayidx14$i = 0, $arrayidx14$i33 = 0, $arrayidx15$i = 0;
	 var $arrayidx15$i34 = 0, $arrayidx16$i = 0, $arrayidx16$i35 = 0, $arrayidx27$i = 0, $arrayidx27$i46 = 0, $arrayidx28$i = 0, $arrayidx28$i47 = 0, $arrayidx29$i = 0, $arrayidx29$i48 = 0, $arrayidx30$i = 0, $arrayidx30$i49 = 0, $arrayidx31$i = 0, $call = 0.0, $call1 = 0.0, $call30 = 0.0, $call6 = 0.0, $cc$0 = 0.0, $cc$1 = 0.0, $cc$2 = 0.0, $cmp = 0;
	 var $cmp$i = 0, $cmp12 = 0, $cmp2$i = 0, $cmp2$i22 = 0, $cmp6$i = 0, $cmp6$i24 = 0, $cmp8 = 0, $div = 0.0, $div$i = 0.0, $div10 = 0.0, $div31 = 0.0, $div41$i = 0.0, $div44$i = 0.0, $div46$i = 0.0, $mul = 0.0, $mul$i = 0.0, $mul17$i = 0.0, $mul17$i36 = 0.0, $mul18$i = 0.0, $mul18$i38 = 0.0;
	 var $mul19 = 0.0, $mul20$i = 0.0, $mul20$i40 = 0.0, $mul21 = 0.0, $mul22$i = 0.0, $mul22$i42 = 0.0, $mul24$i = 0.0, $mul24$i44 = 0.0, $mul29 = 0.0, $mul31$i = 0.0, $mul32$i = 0.0, $mul33$i = 0.0, $mul34$i = 0.0, $mul35$i = 0.0, $mul36$i = 0.0, $mul37$i = 0.0, $mul38$i = 0.0, $mul39$i = 0.0, $mul40$i = 0.0, $mul42$i = 0.0;
	 var $mul7 = 0.0, $p$0$i = 0, $p$0$i28 = 0, $q$0$i = 0, $q$0$i27 = 0, $s$0 = 0.0, $ss$0 = 0.0, $ss$1 = 0.0, $sub = 0.0, $sub16 = 0.0, $sub2 = 0.0, $sub22 = 0.0, $sub27 = 0.0, $sub4 = 0.0, $sub5 = 0.0, $tobool = 0, $tobool25 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+Math_sin((+$x)));
	 $tobool = ($y1|0)!=(0);
	 if ($tobool) {
	  $sub = -$call;
	  $s$0 = $sub;
	 } else {
	  $s$0 = $call;
	 }
	 $call1 = (+Math_cos((+$x)));
	 $sub2 = $s$0 - $call1;
	 $cmp = ($ix>>>0)<(2145386496);
	 if ($cmp) {
	  $sub4 = -$s$0;
	  $sub5 = $sub4 - $call1;
	  $mul = $x * 2.0;
	  $call6 = (+Math_cos((+$mul)));
	  $mul7 = $s$0 * $call1;
	  $cmp8 = $mul7 > 0.0;
	  if ($cmp8) {
	   $div = $call6 / $sub5;
	   $cc$0 = $div;$ss$0 = $sub5;
	  } else {
	   $div10 = $call6 / $sub2;
	   $cc$0 = $sub2;$ss$0 = $div10;
	  }
	  $cmp12 = ($ix>>>0)<(1207959552);
	  if ($cmp12) {
	   if ($tobool) {
	    $sub16 = -$ss$0;
	    $ss$1 = $sub16;
	   } else {
	    $ss$1 = $ss$0;
	   }
	   HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	   $1 = HEAP32[tempDoublePtr+4>>2]|0;
	   $and$i = $1 & 2147483647;
	   $cmp$i = ($and$i>>>0)>(1075838975);
	   if ($cmp$i) {
	    $p$0$i = 151648;$q$0$i = 151696;
	   } else {
	    $cmp2$i = ($and$i>>>0)>(1074933386);
	    if ($cmp2$i) {
	     $p$0$i = 151736;$q$0$i = 151784;
	    } else {
	     $cmp6$i = ($and$i>>>0)>(1074191212);
	     $$$i = $cmp6$i ? 151872 : 151960;
	     $$24$i = $cmp6$i ? 151824 : 151912;
	     $p$0$i = $$24$i;$q$0$i = $$$i;
	    }
	   }
	   $mul$i = $x * $x;
	   $div$i = 1.0 / $mul$i;
	   $2 = +HEAPF64[$p$0$i>>3];
	   $arrayidx12$i = (($p$0$i) + 8|0);
	   $3 = +HEAPF64[$arrayidx12$i>>3];
	   $arrayidx13$i = (($p$0$i) + 16|0);
	   $4 = +HEAPF64[$arrayidx13$i>>3];
	   $arrayidx14$i = (($p$0$i) + 24|0);
	   $5 = +HEAPF64[$arrayidx14$i>>3];
	   $arrayidx15$i = (($p$0$i) + 32|0);
	   $6 = +HEAPF64[$arrayidx15$i>>3];
	   $arrayidx16$i = (($p$0$i) + 40|0);
	   $7 = +HEAPF64[$arrayidx16$i>>3];
	   $mul17$i = $div$i * $7;
	   $add$i = $6 + $mul17$i;
	   $mul18$i = $div$i * $add$i;
	   $add19$i = $5 + $mul18$i;
	   $mul20$i = $div$i * $add19$i;
	   $add21$i = $4 + $mul20$i;
	   $mul22$i = $div$i * $add21$i;
	   $add23$i = $3 + $mul22$i;
	   $mul24$i = $div$i * $add23$i;
	   $add25$i = $2 + $mul24$i;
	   $8 = +HEAPF64[$q$0$i>>3];
	   $arrayidx27$i = (($q$0$i) + 8|0);
	   $9 = +HEAPF64[$arrayidx27$i>>3];
	   $arrayidx28$i = (($q$0$i) + 16|0);
	   $10 = +HEAPF64[$arrayidx28$i>>3];
	   $arrayidx29$i = (($q$0$i) + 24|0);
	   $11 = +HEAPF64[$arrayidx29$i>>3];
	   $arrayidx30$i = (($q$0$i) + 32|0);
	   $12 = +HEAPF64[$arrayidx30$i>>3];
	   $mul31$i = $div$i * $12;
	   $add32$i = $11 + $mul31$i;
	   $mul33$i = $div$i * $add32$i;
	   $add34$i = $10 + $mul33$i;
	   $mul35$i = $div$i * $add34$i;
	   $add36$i = $9 + $mul35$i;
	   $mul37$i = $div$i * $add36$i;
	   $add38$i = $8 + $mul37$i;
	   $mul39$i = $div$i * $add38$i;
	   $add40$i = $mul39$i + 1.0;
	   $div41$i = $add25$i / $add40$i;
	   $add42$i = $div41$i + 1.0;
	   $mul19 = $cc$0 * $add42$i;
	   if ($cmp$i) {
	    $p$0$i28 = 151264;$q$0$i27 = 151312;
	   } else {
	    $cmp2$i22 = ($and$i>>>0)>(1074933386);
	    if ($cmp2$i22) {
	     $p$0$i28 = 151360;$q$0$i27 = 151408;
	    } else {
	     $cmp6$i24 = ($and$i>>>0)>(1074191212);
	     $$$i25 = $cmp6$i24 ? 151504 : 151600;
	     $$27$i = $cmp6$i24 ? 151456 : 151552;
	     $p$0$i28 = $$27$i;$q$0$i27 = $$$i25;
	    }
	   }
	   $13 = +HEAPF64[$p$0$i28>>3];
	   $arrayidx12$i31 = (($p$0$i28) + 8|0);
	   $14 = +HEAPF64[$arrayidx12$i31>>3];
	   $arrayidx13$i32 = (($p$0$i28) + 16|0);
	   $15 = +HEAPF64[$arrayidx13$i32>>3];
	   $arrayidx14$i33 = (($p$0$i28) + 24|0);
	   $16 = +HEAPF64[$arrayidx14$i33>>3];
	   $arrayidx15$i34 = (($p$0$i28) + 32|0);
	   $17 = +HEAPF64[$arrayidx15$i34>>3];
	   $arrayidx16$i35 = (($p$0$i28) + 40|0);
	   $18 = +HEAPF64[$arrayidx16$i35>>3];
	   $mul17$i36 = $div$i * $18;
	   $add$i37 = $17 + $mul17$i36;
	   $mul18$i38 = $div$i * $add$i37;
	   $add19$i39 = $16 + $mul18$i38;
	   $mul20$i40 = $div$i * $add19$i39;
	   $add21$i41 = $15 + $mul20$i40;
	   $mul22$i42 = $div$i * $add21$i41;
	   $add23$i43 = $14 + $mul22$i42;
	   $mul24$i44 = $div$i * $add23$i43;
	   $add25$i45 = $13 + $mul24$i44;
	   $19 = +HEAPF64[$q$0$i27>>3];
	   $arrayidx27$i46 = (($q$0$i27) + 8|0);
	   $20 = +HEAPF64[$arrayidx27$i46>>3];
	   $arrayidx28$i47 = (($q$0$i27) + 16|0);
	   $21 = +HEAPF64[$arrayidx28$i47>>3];
	   $arrayidx29$i48 = (($q$0$i27) + 24|0);
	   $22 = +HEAPF64[$arrayidx29$i48>>3];
	   $arrayidx30$i49 = (($q$0$i27) + 32|0);
	   $23 = +HEAPF64[$arrayidx30$i49>>3];
	   $arrayidx31$i = (($q$0$i27) + 40|0);
	   $24 = +HEAPF64[$arrayidx31$i>>3];
	   $mul32$i = $div$i * $24;
	   $add33$i = $23 + $mul32$i;
	   $mul34$i = $div$i * $add33$i;
	   $add35$i = $22 + $mul34$i;
	   $mul36$i = $div$i * $add35$i;
	   $add37$i = $21 + $mul36$i;
	   $mul38$i = $div$i * $add37$i;
	   $add39$i = $20 + $mul38$i;
	   $mul40$i = $div$i * $add39$i;
	   $add41$i = $19 + $mul40$i;
	   $mul42$i = $div$i * $add41$i;
	   $add43$i = $mul42$i + 1.0;
	   $div44$i = $add25$i45 / $add43$i;
	   $add45$i = $div44$i + 0.375;
	   $div46$i = $add45$i / $x;
	   $mul21 = $ss$1 * $div46$i;
	   $sub22 = $mul19 - $mul21;
	   $cc$1 = $sub22;
	  } else {
	   $cc$1 = $cc$0;
	  }
	 } else {
	  $cc$1 = $sub2;
	 }
	 $tobool25 = ($sign|0)==(0);
	 if ($tobool25) {
	  $cc$2 = $cc$1;
	  $mul29 = $cc$2 * 0.56418958354775627928;
	  $call30 = (+Math_sqrt((+$x)));
	  $div31 = $mul29 / $call30;
	  STACKTOP = sp;return (+$div31);
	 }
	 $sub27 = -$cc$1;
	 $cc$2 = $sub27;
	 $mul29 = $cc$2 * 0.56418958354775627928;
	 $call30 = (+Math_sqrt((+$x)));
	 $div31 = $mul29 / $call30;
	 STACKTOP = sp;return (+$div31);
	}
	function _y1($x) {
	 $x = +$x;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0.0, $add$i = 0.0, $add14$i = 0.0, $add16$i = 0.0, $add19$i = 0.0, $add21$i = 0.0, $add22 = 0.0, $add23$i = 0.0, $add24 = 0.0, $add25$i = 0.0, $add26 = 0.0, $add27$i = 0.0;
	 var $add28 = 0.0, $add30 = 0.0, $add30$i = 0.0, $add32 = 0.0, $add34 = 0.0, $add36 = 0.0, $add44 = 0.0, $and$i = 0, $call = 0.0, $call$i = 0.0, $call40 = 0.0, $call6$i = 0.0, $cmp = 0, $cmp$i = 0, $cmp11 = 0, $cmp15 = 0, $cmp3$i = 0, $cmp7 = 0, $cmp8$i = 0, $div = 0.0;
	 var $div$i = 0.0, $div18 = 0.0, $div28$i = 0.0, $div37 = 0.0, $div42 = 0.0, $mul = 0.0, $mul12$i = 0.0, $mul13$i = 0.0, $mul15$i = 0.0, $mul17$i = 0.0, $mul18$i = 0.0, $mul20 = 0.0, $mul20$i = 0.0, $mul21 = 0.0, $mul22$i = 0.0, $mul23 = 0.0, $mul24$i = 0.0, $mul25 = 0.0, $mul26$i = 0.0, $mul27 = 0.0;
	 var $mul29 = 0.0, $mul31 = 0.0, $mul31$i = 0.0, $mul33 = 0.0, $mul35 = 0.0, $mul38 = 0.0, $mul41 = 0.0, $mul43 = 0.0, $retval$0 = 0.0, $retval$0$i = 0.0, $sub = 0.0, $z$0$i = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $2 = (_bitshift64Shl(($1|0),0,1)|0);
	 $3 = tempRet0;
	 $4 = $2 | $0;
	 $3 | $1;
	 $cmp = ($4|0)==(0);
	 if ($cmp) {
	  $retval$0 = -inf;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $5 = ($1|0)<(0);
	 if ($5) {
	  $retval$0 = nan;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp7 = ($1>>>0)>(2146435071);
	 if ($cmp7) {
	  $div = 1.0 / $x;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp11 = ($1>>>0)>(1073741823);
	 if ($cmp11) {
	  $call = (+_common57($1,$x,1,0));
	  $retval$0 = $call;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp15 = ($1>>>0)<(1016070144);
	 if ($cmp15) {
	  $div18 = -0.636619772367581382433 / $x;
	  $retval$0 = $div18;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $mul = $x * $x;
	 $mul20 = $mul * -9.19099158039878874504E-8;
	 $add = $mul20 + 2.35252600561610495928E-5;
	 $mul21 = $mul * $add;
	 $add22 = $mul21 + -0.00191256895875763547298;
	 $mul23 = $mul * $add22;
	 $add24 = $mul23 + 0.0504438716639811282616;
	 $mul25 = $mul * $add24;
	 $add26 = $mul25 + -0.196057090646238940668;
	 $mul27 = $mul * 1.66559246207992079114E-11;
	 $add28 = $mul27 + 6.22741452364621501295E-9;
	 $mul29 = $mul * $add28;
	 $add30 = $mul29 + 1.35608801097516229404E-6;
	 $mul31 = $mul * $add30;
	 $add32 = $mul31 + 2.02552581025135171496E-4;
	 $mul33 = $mul * $add32;
	 $add34 = $mul33 + 0.0199167318236649903973;
	 $mul35 = $mul * $add34;
	 $add36 = $mul35 + 1.0;
	 $div37 = $add26 / $add36;
	 $mul38 = $div37 * $x;
	 $6 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
	 $7 = tempRet0;
	 $and$i = $1 & 2147483647;
	 $cmp$i = ($and$i>>>0)>(2146435071);
	 do {
	  if ($cmp$i) {
	   $div$i = 1.0 / $mul;
	   $retval$0$i = $div$i;
	  } else {
	   $cmp3$i = ($and$i>>>0)>(1073741823);
	   if ($cmp3$i) {
	    $call$i = (+Math_abs((+$x)));
	    $call6$i = (+_common57($and$i,$call$i,0,$6));
	    $retval$0$i = $call6$i;
	    break;
	   }
	   $cmp8$i = ($and$i>>>0)>(939524095);
	   if ($cmp8$i) {
	    $mul12$i = $mul * 4.96727999609584448412E-8;
	    $add$i = $mul12$i + -1.5995563108403559752E-5;
	    $mul13$i = $mul * $add$i;
	    $add14$i = $mul13$i + 0.00140705666955189706048;
	    $mul15$i = $mul * $add14$i;
	    $add16$i = $mul15$i + -0.0625;
	    $mul17$i = $mul * $add16$i;
	    $mul18$i = $mul * 1.23542274426137913908E-11;
	    $add19$i = $mul18$i + 5.04636257076217042715E-9;
	    $mul20$i = $mul * $add19$i;
	    $add21$i = $mul20$i + 1.17718464042623683263E-6;
	    $mul22$i = $mul * $add21$i;
	    $add23$i = $mul22$i + 1.8594678558863091556E-4;
	    $mul24$i = $mul * $add23$i;
	    $add25$i = $mul24$i + 0.0191537599538363460805;
	    $mul26$i = $mul * $add25$i;
	    $add27$i = $mul26$i + 1.0;
	    $div28$i = $mul17$i / $add27$i;
	    $z$0$i = $div28$i;
	   } else {
	    $z$0$i = $x;
	   }
	   $add30$i = $z$0$i + 0.5;
	   $mul31$i = $add30$i * $x;
	   $retval$0$i = $mul31$i;
	  }
	 } while(0);
	 $call40 = (+Math_log((+$x)));
	 $mul41 = $retval$0$i * $call40;
	 $div42 = 1.0 / $x;
	 $sub = $mul41 - $div42;
	 $mul43 = $sub * 0.636619772367581382433;
	 $add44 = $mul38 + $mul43;
	 $retval$0 = $add44;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _j1f($x) {
	 $x = +$x;
	 var $0 = 0, $add = 0.0, $add10 = 0.0, $add12 = 0.0, $add15 = 0.0, $add17 = 0.0, $add19 = 0.0, $add21 = 0.0, $add23 = 0.0, $and = 0, $call = 0.0, $call3 = 0.0, $cmp = 0, $cmp1 = 0, $cmp5 = 0, $div = 0.0, $div24 = 0.0, $mul = 0.0, $mul11 = 0.0, $mul13 = 0.0;
	 var $mul14 = 0.0, $mul16 = 0.0, $mul18 = 0.0, $mul20 = 0.0, $mul22 = 0.0, $mul28 = 0.0, $mul7 = 0.0, $mul8 = 0.0, $mul9 = 0.0, $retval$0 = 0.0, $shr = 0, $z$0 = 0.0, $z$0$in = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $shr = $0 >>> 31;
	 $and = $0 & 2147483647;
	 $cmp = ($and>>>0)>(2139095039);
	 if ($cmp) {
	  $mul = $x * $x;
	  $div = 1.0 / $mul;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp1 = ($and>>>0)>(1073741823);
	 if ($cmp1) {
	  $call = (+Math_abs((+$x)));
	  $call3 = (+_common70($and,$call,0,$shr));
	  $retval$0 = $call3;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp5 = ($and>>>0)>(838860799);
	 if ($cmp5) {
	  $mul7 = $x * $x;
	  $mul8 = $mul7 * 4.96727992072010238189E-8;
	  $add = $mul8 + -1.59955634444486349821E-5;
	  $mul9 = $mul7 * $add;
	  $add10 = $mul9 + 0.00140705669764429330826;
	  $mul11 = $mul7 * $add10;
	  $add12 = $mul11 + -0.0625;
	  $mul13 = $mul7 * $add12;
	  $mul14 = $mul7 * 1.23542270163978784581E-11;
	  $add15 = $mul14 + 5.04636243903178183245E-9;
	  $mul16 = $mul7 * $add15;
	  $add17 = $mul16 + 1.17718468573002610356E-6;
	  $mul18 = $mul7 * $add17;
	  $add19 = $mul18 + 1.85946788405999541283E-4;
	  $mul20 = $mul7 * $add19;
	  $add21 = $mul20 + 0.0191537607461214065552;
	  $mul22 = $mul7 * $add21;
	  $add23 = $mul22 + 1.0;
	  $div24 = $mul13 / $add23;
	  $z$0$in = $div24;
	 } else {
	  $z$0$in = $x;
	 }
	 $z$0 = $z$0$in + 0.5;
	 $mul28 = $z$0 * $x;
	 $retval$0 = $mul28;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _common70($ix,$x,$y1,$sign) {
	 $ix = $ix|0;
	 $x = +$x;
	 $y1 = $y1|0;
	 $sign = $sign|0;
	 var $$$i = 0, $$24$i = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0.0;
	 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add$i = 0.0, $add$i30 = 0.0, $add16$i = 0.0, $add16$i32 = 0.0, $add18$i = 0.0, $add18$i34 = 0.0, $add20$i = 0.0, $add20$i36 = 0.0, $add22$i = 0.0, $add22$i38 = 0.0, $add29$i = 0.0, $add30$i = 0.0, $add31$i = 0.0, $add32$i = 0.0;
	 var $add33$i = 0.0, $add34$i = 0.0, $add35$i = 0.0, $add36$i = 0.0, $add37$i = 0.0, $add38$i = 0.0, $add39$i = 0.0, $add40$i = 0.0, $add42$i = 0.0, $and$i = 0, $and$i18 = 0, $arrayidx10$i = 0, $arrayidx10$i25 = 0, $arrayidx11$i = 0, $arrayidx11$i26 = 0, $arrayidx12$i = 0, $arrayidx12$i27 = 0, $arrayidx13$i = 0, $arrayidx13$i28 = 0, $arrayidx24$i = 0;
	 var $arrayidx24$i39 = 0, $arrayidx25$i = 0, $arrayidx25$i40 = 0, $arrayidx26$i = 0, $arrayidx26$i41 = 0, $arrayidx27$i = 0, $arrayidx27$i42 = 0, $arrayidx28$i = 0, $arrayidx9$i = 0, $arrayidx9$i24 = 0, $call = 0.0, $call1 = 0.0, $call37 = 0.0, $call8 = 0.0, $cc$0 = 0.0, $cc$1 = 0.0, $cc$2 = 0.0, $cmp = 0, $cmp$i = 0, $cmp$i19 = 0;
	 var $cmp1$i = 0, $cmp11 = 0, $cmp16 = 0, $cmp4$i = 0, $conv = 0.0, $conv2 = 0.0, $conv24 = 0.0, $conv27 = 0.0, $conv38 = 0.0, $conv40 = 0.0, $conv9 = 0.0, $div = 0.0, $div$i = 0.0, $div14 = 0.0, $div38$i = 0.0, $div39 = 0.0, $div41$i = 0.0, $div43$i = 0.0, $mul = 0.0, $mul$i = 0.0;
	 var $mul10 = 0.0, $mul14$i = 0.0, $mul14$i29 = 0.0, $mul15$i = 0.0, $mul15$i31 = 0.0, $mul17$i = 0.0, $mul17$i33 = 0.0, $mul19$i = 0.0, $mul19$i35 = 0.0, $mul21$i = 0.0, $mul21$i37 = 0.0, $mul25 = 0.0, $mul28 = 0.0, $mul28$i = 0.0, $mul29$i = 0.0, $mul30$i = 0.0, $mul31$i = 0.0, $mul32$i = 0.0, $mul33$i = 0.0, $mul34$i = 0.0;
	 var $mul35$i = 0.0, $mul36 = 0.0, $mul36$i = 0.0, $mul37$i = 0.0, $mul39$i = 0.0, $p$0$i = 0, $p$0$i21 = 0, $q$0$i = 0, $q$0$i20 = 0, $s$0 = 0.0, $ss$0 = 0.0, $ss$1 = 0.0, $sub = 0.0, $sub21 = 0.0, $sub29 = 0.0, $sub3 = 0.0, $sub34 = 0.0, $sub6 = 0.0, $sub7 = 0.0, $tobool = 0;
	 var $tobool32 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+Math_sin((+$x)));
	 $conv = $call;
	 $tobool = ($y1|0)!=(0);
	 if ($tobool) {
	  $sub = -$conv;
	  $s$0 = $sub;
	 } else {
	  $s$0 = $conv;
	 }
	 $call1 = (+Math_cos((+$x)));
	 $conv2 = $call1;
	 $sub3 = $s$0 - $conv2;
	 $cmp = ($ix>>>0)<(2130706432);
	 if ($cmp) {
	  $sub6 = -$s$0;
	  $sub7 = $sub6 - $conv2;
	  $mul = $x * 2.0;
	  $call8 = (+Math_cos((+$mul)));
	  $conv9 = $call8;
	  $mul10 = $s$0 * $conv2;
	  $cmp11 = $mul10 > 0.0;
	  if ($cmp11) {
	   $div = $conv9 / $sub7;
	   $cc$0 = $div;$ss$0 = $sub7;
	  } else {
	   $div14 = $conv9 / $sub3;
	   $cc$0 = $sub3;$ss$0 = $div14;
	  }
	  $cmp16 = ($ix>>>0)<(1484783616);
	  if ($cmp16) {
	   if ($tobool) {
	    $sub21 = -$ss$0;
	    $ss$1 = $sub21;
	   } else {
	    $ss$1 = $ss$0;
	   }
	   $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	   $and$i = $0 & 2147483647;
	   $cmp$i = ($and$i>>>0)>(1090519039);
	   if ($cmp$i) {
	    $p$0$i = 152096;$q$0$i = 152120;
	   } else {
	    $cmp1$i = ($and$i>>>0)>(1089936471);
	    if ($cmp1$i) {
	     $p$0$i = 152144;$q$0$i = 152168;
	    } else {
	     $cmp4$i = ($and$i>>>0)>(1077336935);
	     $$$i = $cmp4$i ? 152216 : 152264;
	     $$24$i = $cmp4$i ? 152192 : 152240;
	     $p$0$i = $$24$i;$q$0$i = $$$i;
	    }
	   }
	   $mul$i = $x * $x;
	   $div$i = 1.0 / $mul$i;
	   $1 = +HEAPF32[$p$0$i>>2];
	   $arrayidx9$i = (($p$0$i) + 4|0);
	   $2 = +HEAPF32[$arrayidx9$i>>2];
	   $arrayidx10$i = (($p$0$i) + 8|0);
	   $3 = +HEAPF32[$arrayidx10$i>>2];
	   $arrayidx11$i = (($p$0$i) + 12|0);
	   $4 = +HEAPF32[$arrayidx11$i>>2];
	   $arrayidx12$i = (($p$0$i) + 16|0);
	   $5 = +HEAPF32[$arrayidx12$i>>2];
	   $arrayidx13$i = (($p$0$i) + 20|0);
	   $6 = +HEAPF32[$arrayidx13$i>>2];
	   $mul14$i = $div$i * $6;
	   $add$i = $5 + $mul14$i;
	   $mul15$i = $div$i * $add$i;
	   $add16$i = $4 + $mul15$i;
	   $mul17$i = $div$i * $add16$i;
	   $add18$i = $3 + $mul17$i;
	   $mul19$i = $div$i * $add18$i;
	   $add20$i = $2 + $mul19$i;
	   $mul21$i = $div$i * $add20$i;
	   $add22$i = $1 + $mul21$i;
	   $7 = +HEAPF32[$q$0$i>>2];
	   $arrayidx24$i = (($q$0$i) + 4|0);
	   $8 = +HEAPF32[$arrayidx24$i>>2];
	   $arrayidx25$i = (($q$0$i) + 8|0);
	   $9 = +HEAPF32[$arrayidx25$i>>2];
	   $arrayidx26$i = (($q$0$i) + 12|0);
	   $10 = +HEAPF32[$arrayidx26$i>>2];
	   $arrayidx27$i = (($q$0$i) + 16|0);
	   $11 = +HEAPF32[$arrayidx27$i>>2];
	   $mul28$i = $div$i * $11;
	   $add29$i = $10 + $mul28$i;
	   $mul30$i = $div$i * $add29$i;
	   $add31$i = $9 + $mul30$i;
	   $mul32$i = $div$i * $add31$i;
	   $add33$i = $8 + $mul32$i;
	   $mul34$i = $div$i * $add33$i;
	   $add35$i = $7 + $mul34$i;
	   $mul36$i = $div$i * $add35$i;
	   $add37$i = $mul36$i + 1.0;
	   $div38$i = $add22$i / $add37$i;
	   $add39$i = $div38$i + 1.0;
	   $conv24 = $add39$i;
	   $mul25 = $cc$0 * $conv24;
	   $and$i18 = $0 & 2145386496;
	   $cmp$i19 = ($and$i18>>>0)>(1075838975);
	   $q$0$i20 = $cmp$i19 ? 152024 : 152072;
	   $p$0$i21 = $cmp$i19 ? 152000 : 152048;
	   $12 = +HEAPF32[$p$0$i21>>2];
	   $arrayidx9$i24 = (($p$0$i21) + 4|0);
	   $13 = +HEAPF32[$arrayidx9$i24>>2];
	   $arrayidx10$i25 = (($p$0$i21) + 8|0);
	   $14 = +HEAPF32[$arrayidx10$i25>>2];
	   $arrayidx11$i26 = (($p$0$i21) + 12|0);
	   $15 = +HEAPF32[$arrayidx11$i26>>2];
	   $arrayidx12$i27 = (($p$0$i21) + 16|0);
	   $16 = +HEAPF32[$arrayidx12$i27>>2];
	   $arrayidx13$i28 = (($p$0$i21) + 20|0);
	   $17 = +HEAPF32[$arrayidx13$i28>>2];
	   $mul14$i29 = $div$i * $17;
	   $add$i30 = $16 + $mul14$i29;
	   $mul15$i31 = $div$i * $add$i30;
	   $add16$i32 = $15 + $mul15$i31;
	   $mul17$i33 = $div$i * $add16$i32;
	   $add18$i34 = $14 + $mul17$i33;
	   $mul19$i35 = $div$i * $add18$i34;
	   $add20$i36 = $13 + $mul19$i35;
	   $mul21$i37 = $div$i * $add20$i36;
	   $add22$i38 = $12 + $mul21$i37;
	   $18 = +HEAPF32[$q$0$i20>>2];
	   $arrayidx24$i39 = (($q$0$i20) + 4|0);
	   $19 = +HEAPF32[$arrayidx24$i39>>2];
	   $arrayidx25$i40 = (($q$0$i20) + 8|0);
	   $20 = +HEAPF32[$arrayidx25$i40>>2];
	   $arrayidx26$i41 = (($q$0$i20) + 12|0);
	   $21 = +HEAPF32[$arrayidx26$i41>>2];
	   $arrayidx27$i42 = (($q$0$i20) + 16|0);
	   $22 = +HEAPF32[$arrayidx27$i42>>2];
	   $arrayidx28$i = (($q$0$i20) + 20|0);
	   $23 = +HEAPF32[$arrayidx28$i>>2];
	   $mul29$i = $div$i * $23;
	   $add30$i = $22 + $mul29$i;
	   $mul31$i = $div$i * $add30$i;
	   $add32$i = $21 + $mul31$i;
	   $mul33$i = $div$i * $add32$i;
	   $add34$i = $20 + $mul33$i;
	   $mul35$i = $div$i * $add34$i;
	   $add36$i = $19 + $mul35$i;
	   $mul37$i = $div$i * $add36$i;
	   $add38$i = $18 + $mul37$i;
	   $mul39$i = $div$i * $add38$i;
	   $add40$i = $mul39$i + 1.0;
	   $div41$i = $add22$i38 / $add40$i;
	   $add42$i = $div41$i + 0.375;
	   $div43$i = $add42$i / $x;
	   $conv27 = $div43$i;
	   $mul28 = $ss$1 * $conv27;
	   $sub29 = $mul25 - $mul28;
	   $cc$1 = $sub29;
	  } else {
	   $cc$1 = $cc$0;
	  }
	 } else {
	  $cc$1 = $sub3;
	 }
	 $tobool32 = ($sign|0)==(0);
	 if ($tobool32) {
	  $cc$2 = $cc$1;
	  $mul36 = $cc$2 * 0.564189612865447998047;
	  $call37 = (+Math_sqrt((+$x)));
	  $conv38 = $call37;
	  $div39 = $mul36 / $conv38;
	  $conv40 = $div39;
	  STACKTOP = sp;return (+$conv40);
	 }
	 $sub34 = -$cc$1;
	 $cc$2 = $sub34;
	 $mul36 = $cc$2 * 0.564189612865447998047;
	 $call37 = (+Math_sqrt((+$x)));
	 $conv38 = $call37;
	 $div39 = $mul36 / $conv38;
	 $conv40 = $div39;
	 STACKTOP = sp;return (+$conv40);
	}
	function _y1f($x) {
	 $x = +$x;
	 var $0 = 0, $add = 0.0, $add$i = 0.0, $add10$i = 0.0, $add12$i = 0.0, $add15 = 0.0, $add15$i = 0.0, $add17 = 0.0, $add17$i = 0.0, $add19 = 0.0, $add19$i = 0.0, $add21 = 0.0, $add21$i = 0.0, $add23 = 0.0, $add23$i = 0.0, $add25 = 0.0, $add27 = 0.0, $add29 = 0.0, $add37 = 0.0, $and = 0;
	 var $call = 0.0, $call$i = 0.0, $call3$i = 0.0, $call33 = 0.0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp3 = 0, $cmp5$i = 0, $cmp6 = 0, $cmp9 = 0, $div = 0.0, $div$i = 0.0, $div11 = 0.0, $div24$i = 0.0, $div30 = 0.0, $div35 = 0.0, $mul = 0.0, $mul11$i = 0.0, $mul13 = 0.0;
	 var $mul13$i = 0.0, $mul14 = 0.0, $mul14$i = 0.0, $mul16 = 0.0, $mul16$i = 0.0, $mul18 = 0.0, $mul18$i = 0.0, $mul20 = 0.0, $mul20$i = 0.0, $mul22 = 0.0, $mul22$i = 0.0, $mul24 = 0.0, $mul26 = 0.0, $mul28 = 0.0, $mul28$i = 0.0, $mul31 = 0.0, $mul34 = 0.0, $mul36 = 0.0, $mul8$i = 0.0, $mul9$i = 0.0;
	 var $retval$0 = 0.0, $retval$0$i = 0.0, $shr$i = 0, $sub = 0.0, $tobool = 0, $z$0$i = 0.0, $z$0$in$i = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $and = $0 & 2147483647;
	 $cmp = ($and|0)==(0);
	 if ($cmp) {
	  $retval$0 = -inf;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $tobool = ($0|0)<(0);
	 if ($tobool) {
	  $retval$0 = nan;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp3 = ($0>>>0)>(2139095039);
	 if ($cmp3) {
	  $div = 1.0 / $x;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp6 = ($0>>>0)>(1073741823);
	 if ($cmp6) {
	  $call = (+_common70($0,$x,1,0));
	  $retval$0 = $call;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp9 = ($0>>>0)<(838860800);
	 if ($cmp9) {
	  $div11 = -0.636619746685028076171 / $x;
	  $retval$0 = $div11;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $mul = $x * $x;
	 $mul13 = $mul * -9.19099178986471088137E-8;
	 $add = $mul13 + 2.35252591664902865887E-5;
	 $mul14 = $mul * $add;
	 $add15 = $mul14 + -0.00191256892867386341095;
	 $mul16 = $mul * $add15;
	 $add17 = $mul16 + 0.0504438728094100952148;
	 $mul18 = $mul * $add17;
	 $add19 = $mul18 + -0.196057096123695373535;
	 $mul20 = $mul * 1.66559249031861256185E-11;
	 $add21 = $mul20 + 6.22741458400355440972E-9;
	 $mul22 = $mul * $add21;
	 $add23 = $mul22 + 1.35608797791064716876E-6;
	 $mul24 = $mul * $add23;
	 $add25 = $mul24 + 2.0255257550161331892E-4;
	 $mul26 = $mul * $add25;
	 $add27 = $mul26 + 0.0199167318642139434814;
	 $mul28 = $mul * $add27;
	 $add29 = $mul28 + 1.0;
	 $div30 = $add19 / $add29;
	 $mul31 = $div30 * $x;
	 $shr$i = $0 >>> 31;
	 $cmp$i = ($and>>>0)>(2139095039);
	 do {
	  if ($cmp$i) {
	   $div$i = 1.0 / $mul;
	   $retval$0$i = $div$i;
	  } else {
	   $cmp1$i = ($and>>>0)>(1073741823);
	   if ($cmp1$i) {
	    $call$i = (+Math_abs((+$x)));
	    $call3$i = (+_common70($and,$call$i,0,$shr$i));
	    $retval$0$i = $call3$i;
	    break;
	   }
	   $cmp5$i = ($and>>>0)>(838860799);
	   if ($cmp5$i) {
	    $mul8$i = $mul * 4.96727992072010238189E-8;
	    $add$i = $mul8$i + -1.59955634444486349821E-5;
	    $mul9$i = $mul * $add$i;
	    $add10$i = $mul9$i + 0.00140705669764429330826;
	    $mul11$i = $mul * $add10$i;
	    $add12$i = $mul11$i + -0.0625;
	    $mul13$i = $mul * $add12$i;
	    $mul14$i = $mul * 1.23542270163978784581E-11;
	    $add15$i = $mul14$i + 5.04636243903178183245E-9;
	    $mul16$i = $mul * $add15$i;
	    $add17$i = $mul16$i + 1.17718468573002610356E-6;
	    $mul18$i = $mul * $add17$i;
	    $add19$i = $mul18$i + 1.85946788405999541283E-4;
	    $mul20$i = $mul * $add19$i;
	    $add21$i = $mul20$i + 0.0191537607461214065552;
	    $mul22$i = $mul * $add21$i;
	    $add23$i = $mul22$i + 1.0;
	    $div24$i = $mul13$i / $add23$i;
	    $z$0$in$i = $div24$i;
	   } else {
	    $z$0$in$i = $x;
	   }
	   $z$0$i = $z$0$in$i + 0.5;
	   $mul28$i = $z$0$i * $x;
	   $retval$0$i = $mul28$i;
	  }
	 } while(0);
	 $call33 = (+Math_log((+$x)));
	 $mul34 = $retval$0$i * $call33;
	 $div35 = 1.0 / $x;
	 $sub = $mul34 - $div35;
	 $mul36 = $sub * 0.636619746685028076171;
	 $add37 = $mul31 + $mul36;
	 $retval$0 = $add37;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _jn($n,$x) {
	 $n = $n|0;
	 $x = +$x;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $a$0106 = 0.0, $a$0106$phi = 0.0, $a$1$lcssa = 0.0, $a$1110 = 0.0, $a$2116 = 0.0, $a$2116$phi = 0.0, $a$3123 = 0.0, $a$4 = 0.0, $a$5 = 0.0, $add104 = 0, $add105 = 0.0, $add113 = 0.0, $add44 = 0.0, $add57 = 0.0, $add80 = 0;
	 var $add95 = 0.0, $add99 = 0.0, $and = 0, $and24 = 0, $and40 = 0, $b$0107 = 0.0, $b$1$lcssa = 0.0, $b$1111 = 0.0, $b$2117 = 0.0, $b$3124 = 0.0, $b$4 = 0.0, $b$5 = 0.0, $b$6 = 0.0, $call = 0.0, $call120 = 0.0, $call121 = 0.0, $call158 = 0.0, $call159 = 0.0, $call160 = 0.0, $call161 = 0.0;
	 var $call22 = 0.0, $call25 = 0.0, $call41 = 0.0, $call43 = 0.0, $call46 = 0.0, $call48 = 0.0, $call51 = 0.0, $call52 = 0.0, $call55 = 0.0, $call56 = 0.0, $call58 = 0.0, $call60 = 0.0, $call61 = 0.0, $cmp = 0, $cmp102 = 0, $cmp102133 = 0, $cmp109 = 0, $cmp109129 = 0, $cmp12 = 0, $cmp123 = 0;
	 var $cmp127 = 0, $cmp127114 = 0, $cmp140 = 0, $cmp148 = 0, $cmp162 = 0, $cmp19 = 0, $cmp27 = 0, $cmp29 = 0, $cmp34 = 0, $cmp37 = 0, $cmp62104 = 0, $cmp71 = 0, $cmp74 = 0, $cmp8 = 0, $cmp81108 = 0, $conv112 = 0.0, $conv130 = 0.0, $conv143 = 0.0, $conv33 = 0.0, $conv64 = 0.0;
	 var $conv84 = 0.0, $dec = 0, $dec136 = 0, $dec155 = 0, $div = 0.0, $div115 = 0.0, $div117 = 0.0, $div133 = 0.0, $div146 = 0.0, $div151 = 0.0, $div152 = 0.0, $div166 = 0.0, $div169 = 0.0, $div66 = 0.0, $div89 = 0.0, $div97 = 0.0, $div98 = 0.0, $exitcond = 0, $exitcond139 = 0, $i$0105 = 0;
	 var $i$1109 = 0, $i$2130 = 0, $i$3115 = 0, $i$4122 = 0, $inc = 0, $inc87 = 0, $k$0137 = 0, $mul = 0.0, $mul100 = 0.0, $mul106 = 0.0, $mul114 = 0.0, $mul122 = 0.0, $mul131 = 0.0, $mul132 = 0.0, $mul144 = 0.0, $mul145 = 0.0, $mul165 = 0.0, $mul168 = 0.0, $mul65 = 0.0, $mul67 = 0.0;
	 var $mul78 = 0.0, $mul85 = 0.0, $mul86 = 0.0, $mul96 = 0.0, $nm1$0 = 0, $or = 0, $or$cond = 0, $or26 = 0, $or6 = 0, $q0$0134 = 0.0, $q0$0134$phi = 0.0, $q1$0135 = 0.0, $retval$0 = 0.0, $shr5 = 0, $sign$0 = 0, $sub = 0, $sub101 = 0.0, $sub107 = 0.0, $sub116 = 0.0, $sub134 = 0.0;
	 var $sub147 = 0.0, $sub15 = 0, $sub16 = 0.0, $sub17 = 0, $sub174 = 0.0, $sub47 = 0.0, $sub49 = 0.0, $sub53 = 0.0, $sub68 = 0.0, $t$0$lcssa = 0.0, $t$0131 = 0.0, $t$1125 = 0.0, $t$2 = 0.0, $t$3 = 0.0, $temp$0 = 0.0, $tobool = 0, $x$addr$0 = 0.0, $xor = 0, $z$0136 = 0.0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
	 $3 = tempRet0;
	 $and = $1 & 2147483647;
	 $sub = (0 - ($0))|0;
	 $or = $0 | $sub;
	 $shr5 = $or >>> 31;
	 $or6 = $and | $shr5;
	 $cmp = ($or6>>>0)>(2146435072);
	 if ($cmp) {
	  $retval$0 = $x;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp8 = ($n|0)==(0);
	 if ($cmp8) {
	  $call = (+_j0($x));
	  $retval$0 = $call;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp12 = ($n|0)<(0);
	 if ($cmp12) {
	  $sub15 = $n ^ -1;
	  $sub16 = -$x;
	  $xor = $2 ^ 1;
	  $nm1$0 = $sub15;$sign$0 = $xor;$x$addr$0 = $sub16;
	 } else {
	  $sub17 = (($n) + -1)|0;
	  $nm1$0 = $sub17;$sign$0 = $2;$x$addr$0 = $x;
	 }
	 $cmp19 = ($nm1$0|0)==(0);
	 if ($cmp19) {
	  $call22 = (+_j1($x$addr$0));
	  $retval$0 = $call22;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $and24 = $sign$0 & $n;
	 $call25 = (+Math_abs((+$x$addr$0)));
	 $or26 = $and | $0;
	 $cmp27 = ($or26|0)==(0);
	 $cmp29 = ($and|0)==(2146435072);
	 $or$cond = $cmp27 | $cmp29;
	 L16: do {
	  if ($or$cond) {
	   $b$6 = 0.0;
	  } else {
	   $conv33 = (+($nm1$0|0));
	   $cmp34 = $conv33 < $call25;
	   if ($cmp34) {
	    $cmp37 = ($and>>>0)>(1389363199);
	    if (!($cmp37)) {
	     $call60 = (+_j0($call25));
	     $call61 = (+_j1($call25));
	     $cmp62104 = ($nm1$0|0)>(0);
	     if ($cmp62104) {
	      $a$0106 = $call60;$b$0107 = $call61;$i$0105 = 0;
	     } else {
	      $b$6 = $call61;
	      break;
	     }
	     while(1) {
	      $inc = (($i$0105) + 1)|0;
	      $conv64 = (+($inc|0));
	      $mul65 = $conv64 * 2.0;
	      $div66 = $mul65 / $call25;
	      $mul67 = $b$0107 * $div66;
	      $sub68 = $mul67 - $a$0106;
	      $exitcond = ($inc|0)==($nm1$0|0);
	      if ($exitcond) {
	       $b$6 = $sub68;
	       break L16;
	      } else {
	       $a$0106$phi = $b$0107;$b$0107 = $sub68;$i$0105 = $inc;$a$0106 = $a$0106$phi;
	      }
	     }
	    }
	    $and40 = $nm1$0 & 3;
	    if ((($and40|0) == 0)) {
	     $call41 = (+Math_cos((+$call25)));
	     $call43 = (+Math_sin((+$call25)));
	     $add44 = $call43 - $call41;
	     $temp$0 = $add44;
	    } else if ((($and40|0) == 1)) {
	     $call46 = (+Math_cos((+$call25)));
	     $sub47 = -$call46;
	     $call48 = (+Math_sin((+$call25)));
	     $sub49 = $sub47 - $call48;
	     $temp$0 = $sub49;
	    } else if ((($and40|0) == 2)) {
	     $call51 = (+Math_cos((+$call25)));
	     $call52 = (+Math_sin((+$call25)));
	     $sub53 = $call51 - $call52;
	     $temp$0 = $sub53;
	    } else {
	     $call55 = (+Math_cos((+$call25)));
	     $call56 = (+Math_sin((+$call25)));
	     $add57 = $call55 + $call56;
	     $temp$0 = $add57;
	    }
	    $mul = $temp$0 * 0.56418958354775627928;
	    $call58 = (+Math_sqrt((+$call25)));
	    $div = $mul / $call58;
	    $b$6 = $div;
	    break;
	   }
	   $cmp71 = ($and>>>0)<(1041235968);
	   if ($cmp71) {
	    $cmp74 = ($nm1$0|0)>(32);
	    if ($cmp74) {
	     $b$6 = 0.0;
	     break;
	    }
	    $mul78 = $call25 * 0.5;
	    $add80 = (($nm1$0) + 1)|0;
	    $cmp81108 = ($add80|0)<(2);
	    if ($cmp81108) {
	     $a$1$lcssa = 1.0;$b$1$lcssa = $mul78;
	    } else {
	     $a$1110 = 1.0;$b$1111 = $mul78;$i$1109 = 2;
	     while(1) {
	      $conv84 = (+($i$1109|0));
	      $mul85 = $a$1110 * $conv84;
	      $mul86 = $mul78 * $b$1111;
	      $inc87 = (($i$1109) + 1)|0;
	      $4 = (($nm1$0) + 1)|0;
	      $exitcond139 = ($i$1109|0)==($4|0);
	      if ($exitcond139) {
	       $a$1$lcssa = $mul85;$b$1$lcssa = $mul86;
	       break;
	      } else {
	       $a$1110 = $mul85;$b$1111 = $mul86;$i$1109 = $inc87;
	      }
	     }
	    }
	    $div89 = $b$1$lcssa / $a$1$lcssa;
	    $b$6 = $div89;
	    break;
	   }
	   $add95 = $conv33 + 1.0;
	   $mul96 = $add95 * 2.0;
	   $div97 = $mul96 / $call25;
	   $div98 = 2.0 / $call25;
	   $add99 = $div97 + $div98;
	   $mul100 = $div97 * $add99;
	   $sub101 = $mul100 + -1.0;
	   $cmp102133 = $sub101 < 1.0E+9;
	   if ($cmp102133) {
	    $k$0137 = 1;$q0$0134 = $div97;$q1$0135 = $sub101;$z$0136 = $add99;
	    while(1) {
	     $add104 = (($k$0137) + 1)|0;
	     $add105 = $div98 + $z$0136;
	     $mul106 = $q1$0135 * $add105;
	     $sub107 = $mul106 - $q0$0134;
	     $cmp102 = $sub107 < 1.0E+9;
	     if ($cmp102) {
	      $q0$0134$phi = $q1$0135;$k$0137 = $add104;$q1$0135 = $sub107;$z$0136 = $add105;$q0$0134 = $q0$0134$phi;
	     } else {
	      break;
	     }
	    }
	    $cmp109129 = ($k$0137|0)>(-2);
	    if ($cmp109129) {
	     $i$2130 = $add104;$t$0131 = 0.0;
	     label = 28;
	    } else {
	     $t$0$lcssa = 0.0;
	    }
	   } else {
	    $i$2130 = 1;$t$0131 = 0.0;
	    label = 28;
	   }
	   if ((label|0) == 28) {
	    while(1) {
	     label = 0;
	     $conv112 = (+($i$2130|0));
	     $add113 = $add95 + $conv112;
	     $mul114 = $add113 * 2.0;
	     $div115 = $mul114 / $call25;
	     $sub116 = $div115 - $t$0131;
	     $div117 = 1.0 / $sub116;
	     $dec = (($i$2130) + -1)|0;
	     $cmp109 = ($i$2130|0)>(0);
	     if ($cmp109) {
	      $i$2130 = $dec;$t$0131 = $div117;
	      label = 28;
	     } else {
	      $t$0$lcssa = $div117;
	      break;
	     }
	    }
	   }
	   $call120 = (+Math_abs((+$div97)));
	   $call121 = (+Math_log((+$call120)));
	   $mul122 = $add95 * $call121;
	   $cmp123 = $mul122 < 709.782712893383973096;
	   $cmp127114 = ($nm1$0|0)>(0);
	   if ($cmp123) {
	    if ($cmp127114) {
	     $a$2116 = $t$0$lcssa;$b$2117 = 1.0;$i$3115 = $nm1$0;
	     while(1) {
	      $conv130 = (+($i$3115|0));
	      $mul131 = $conv130 * 2.0;
	      $mul132 = $b$2117 * $mul131;
	      $div133 = $mul132 / $call25;
	      $sub134 = $div133 - $a$2116;
	      $dec136 = (($i$3115) + -1)|0;
	      $cmp127 = ($dec136|0)>(0);
	      if ($cmp127) {
	       $a$2116$phi = $b$2117;$b$2117 = $sub134;$i$3115 = $dec136;$a$2116 = $a$2116$phi;
	      } else {
	       $a$5 = $b$2117;$b$5 = $sub134;$t$3 = $t$0$lcssa;
	       break;
	      }
	     }
	    } else {
	     $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
	    }
	   } else {
	    if ($cmp127114) {
	     $a$3123 = $t$0$lcssa;$b$3124 = 1.0;$i$4122 = $nm1$0;$t$1125 = $t$0$lcssa;
	     while(1) {
	      $conv143 = (+($i$4122|0));
	      $mul144 = $conv143 * 2.0;
	      $mul145 = $b$3124 * $mul144;
	      $div146 = $mul145 / $call25;
	      $sub147 = $div146 - $a$3123;
	      $cmp148 = $sub147 > 3.27339060789614187001E+150;
	      if ($cmp148) {
	       $div151 = $b$3124 / $sub147;
	       $div152 = $t$1125 / $sub147;
	       $a$4 = $div151;$b$4 = 1.0;$t$2 = $div152;
	      } else {
	       $a$4 = $b$3124;$b$4 = $sub147;$t$2 = $t$1125;
	      }
	      $dec155 = (($i$4122) + -1)|0;
	      $cmp140 = ($dec155|0)>(0);
	      if ($cmp140) {
	       $a$3123 = $a$4;$b$3124 = $b$4;$i$4122 = $dec155;$t$1125 = $t$2;
	      } else {
	       $a$5 = $a$4;$b$5 = $b$4;$t$3 = $t$2;
	       break;
	      }
	     }
	    } else {
	     $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
	    }
	   }
	   $call158 = (+_j0($call25));
	   $call159 = (+_j1($call25));
	   $call160 = (+Math_abs((+$call158)));
	   $call161 = (+Math_abs((+$call159)));
	   $cmp162 = !($call160 >= $call161);
	   if ($cmp162) {
	    $mul168 = $t$3 * $call159;
	    $div169 = $mul168 / $a$5;
	    $b$6 = $div169;
	    break;
	   } else {
	    $mul165 = $t$3 * $call158;
	    $div166 = $mul165 / $b$5;
	    $b$6 = $div166;
	    break;
	   }
	  }
	 } while(0);
	 $tobool = ($and24|0)==(0);
	 if ($tobool) {
	  $retval$0 = $b$6;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $sub174 = -$b$6;
	 $retval$0 = $sub174;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _yn($n,$x) {
	 $n = $n|0;
	 $x = +$x;
	 var $$sink$in45 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$047 = 0.0, $a$047$phi = 0.0, $add48 = 0.0, $add52 = 0.0, $and = 0, $and25 = 0;
	 var $and39 = 0, $b$1 = 0.0, $call = 0.0, $call32 = 0.0, $call40 = 0.0, $call42 = 0.0, $call45 = 0.0, $call47 = 0.0, $call50 = 0.0, $call51 = 0.0, $call54 = 0.0, $call55 = 0.0, $call57 = 0.0, $call59 = 0.0, $call60 = 0.0, $cmp = 0, $cmp13 = 0, $cmp17 = 0, $cmp21 = 0, $cmp28 = 0;
	 var $cmp36 = 0, $cmp68 = 0, $cmp6841 = 0, $cmp9 = 0, $conv72 = 0.0, $div = 0.0, $div74 = 0.0, $i$046 = 0, $inc = 0, $mul = 0.0, $mul73 = 0.0, $mul75 = 0.0, $nm1$0 = 0, $or = 0, $or$cond = 0, $or$cond44 = 0, $or6 = 0, $or8 = 0, $retval$0 = 0.0, $shr5 = 0;
	 var $sign$0 = 0, $sub = 0, $sub24 = 0, $sub26 = 0, $sub33 = 0.0, $sub41 = 0.0, $sub43 = 0.0, $sub56 = 0.0, $sub76 = 0.0, $sub87 = 0.0, $temp$0 = 0.0, $tobool31 = 0, $tobool85 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $and = $1 & 2147483647;
	 $sub = (0 - ($0))|0;
	 $or = $0 | $sub;
	 $shr5 = $or >>> 31;
	 $or6 = $and | $shr5;
	 $cmp = ($or6>>>0)>(2146435072);
	 if ($cmp) {
	  $retval$0 = $x;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $2 = ($1|0)<(0);
	 if ($2) {
	  $or8 = $and | $0;
	  $cmp9 = ($or8|0)==(0);
	  if (!($cmp9)) {
	   $retval$0 = nan;
	   STACKTOP = sp;return (+$retval$0);
	  }
	 }
	 $cmp13 = ($and|0)==(2146435072);
	 if ($cmp13) {
	  $retval$0 = 0.0;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp17 = ($n|0)==(0);
	 if ($cmp17) {
	  $call = (+_y0($x));
	  $retval$0 = $call;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp21 = ($n|0)<(0);
	 if ($cmp21) {
	  $sub24 = $n ^ -1;
	  $and25 = $n & 1;
	  $nm1$0 = $sub24;$sign$0 = $and25;
	 } else {
	  $sub26 = (($n) + -1)|0;
	  $nm1$0 = $sub26;$sign$0 = 0;
	 }
	 $cmp28 = ($nm1$0|0)==(0);
	 if ($cmp28) {
	  $tobool31 = ($sign$0|0)==(0);
	  $call32 = (+_y1($x));
	  if ($tobool31) {
	   $retval$0 = $call32;
	   STACKTOP = sp;return (+$retval$0);
	  }
	  $sub33 = -$call32;
	  $retval$0 = $sub33;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp36 = ($and>>>0)>(1389363199);
	 if ($cmp36) {
	  $and39 = $nm1$0 & 3;
	  if ((($and39|0) == 1)) {
	   $call45 = (+Math_sin((+$x)));
	   $call47 = (+Math_cos((+$x)));
	   $add48 = $call47 - $call45;
	   $temp$0 = $add48;
	  } else if ((($and39|0) == 0)) {
	   $call40 = (+Math_sin((+$x)));
	   $sub41 = -$call40;
	   $call42 = (+Math_cos((+$x)));
	   $sub43 = $sub41 - $call42;
	   $temp$0 = $sub43;
	  } else if ((($and39|0) == 2)) {
	   $call50 = (+Math_sin((+$x)));
	   $call51 = (+Math_cos((+$x)));
	   $add52 = $call50 + $call51;
	   $temp$0 = $add52;
	  } else {
	   $call54 = (+Math_sin((+$x)));
	   $call55 = (+Math_cos((+$x)));
	   $sub56 = $call54 - $call55;
	   $temp$0 = $sub56;
	  }
	  $mul = $temp$0 * 0.56418958354775627928;
	  $call57 = (+Math_sqrt((+$x)));
	  $div = $mul / $call57;
	  $b$1 = $div;
	 } else {
	  $call59 = (+_y0($x));
	  $call60 = (+_y1($x));
	  HEAPF64[tempDoublePtr>>3] = $call60;$3 = HEAP32[tempDoublePtr>>2]|0;
	  $4 = HEAP32[tempDoublePtr+4>>2]|0;
	  $cmp6841 = ($nm1$0|0)<(1);
	  $5 = (0)==(0);
	  $6 = ($4|0)==(-1048576);
	  $7 = $5 & $6;
	  $or$cond44 = $cmp6841 | $7;
	  if ($or$cond44) {
	   $b$1 = $call60;
	  } else {
	   $$sink$in45 = $call60;$a$047 = $call59;$i$046 = 0;
	   while(1) {
	    $inc = (($i$046) + 1)|0;
	    $conv72 = (+($inc|0));
	    $mul73 = $conv72 * 2.0;
	    $div74 = $mul73 / $x;
	    $mul75 = $$sink$in45 * $div74;
	    $sub76 = $mul75 - $a$047;
	    HEAPF64[tempDoublePtr>>3] = $sub76;$8 = HEAP32[tempDoublePtr>>2]|0;
	    $9 = HEAP32[tempDoublePtr+4>>2]|0;
	    $cmp68 = ($inc|0)>=($nm1$0|0);
	    $10 = (0)==(0);
	    $11 = ($9|0)==(-1048576);
	    $12 = $10 & $11;
	    $or$cond = $cmp68 | $12;
	    if ($or$cond) {
	     $b$1 = $sub76;
	     break;
	    } else {
	     $a$047$phi = $$sink$in45;$$sink$in45 = $sub76;$i$046 = $inc;$a$047 = $a$047$phi;
	    }
	   }
	  }
	 }
	 $tobool85 = ($sign$0|0)==(0);
	 if ($tobool85) {
	  $retval$0 = $b$1;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $sub87 = -$b$1;
	 $retval$0 = $sub87;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _jnf($n,$x) {
	 $n = $n|0;
	 $x = +$x;
	 var $$op = 0, $0 = 0, $1 = 0, $2 = 0, $a$090 = 0.0, $a$090$phi = 0.0, $a$1$lcssa = 0.0, $a$194 = 0.0, $a$2100 = 0.0, $a$2100$phi = 0.0, $a$3107 = 0.0, $a$4 = 0.0, $a$5 = 0.0, $add54 = 0.0, $add58 = 0.0, $add63 = 0, $add64 = 0.0, $add72 = 0.0, $and = 0, $and14 = 0;
	 var $b$091 = 0.0, $b$1$lcssa = 0.0, $b$195 = 0.0, $b$2101 = 0.0, $b$3108 = 0.0, $b$4 = 0.0, $b$5 = 0.0, $b$6 = 0.0, $call = 0.0, $call117 = 0.0, $call118 = 0.0, $call119 = 0.0, $call12 = 0.0, $call120 = 0.0, $call15 = 0.0, $call23 = 0.0, $call24 = 0.0, $call79 = 0.0, $call80 = 0.0, $cmp = 0;
	 var $cmp10 = 0, $cmp107 = 0, $cmp121 = 0, $cmp2 = 0, $cmp20 = 0, $cmp2588 = 0, $cmp31 = 0, $cmp4192 = 0, $cmp4192124 = 0, $cmp5 = 0, $cmp61 = 0, $cmp61117 = 0, $cmp68 = 0, $cmp68113 = 0, $cmp82 = 0, $cmp86 = 0, $cmp8698 = 0, $cmp99 = 0, $conv = 0.0, $conv102 = 0.0;
	 var $conv27 = 0.0, $conv44 = 0.0, $conv71 = 0.0, $conv89 = 0.0, $dec = 0, $dec114 = 0, $dec95 = 0, $div = 0.0, $div105 = 0.0, $div110 = 0.0, $div111 = 0.0, $div125 = 0.0, $div128 = 0.0, $div49 = 0.0, $div56 = 0.0, $div57 = 0.0, $div74 = 0.0, $div76 = 0.0, $div92 = 0.0, $exitcond = 0;
	 var $exitcond123 = 0, $i$089 = 0, $i$193 = 0, $i$2114 = 0, $i$399 = 0, $i$4106 = 0, $inc = 0, $inc47 = 0, $k$0121 = 0, $mul = 0.0, $mul103 = 0.0, $mul104 = 0.0, $mul124 = 0.0, $mul127 = 0.0, $mul28 = 0.0, $mul38 = 0.0, $mul45 = 0.0, $mul46 = 0.0, $mul55 = 0.0, $mul59 = 0.0;
	 var $mul65 = 0.0, $mul73 = 0.0, $mul81 = 0.0, $mul90 = 0.0, $mul91 = 0.0, $nm1$0 = 0, $nm1$0$op = 0, $not$cmp34 = 0, $q0$0118 = 0.0, $q0$0118$phi = 0.0, $q1$0119 = 0.0, $retval$0 = 0.0, $shr = 0, $sign$0 = 0, $sub = 0, $sub106 = 0.0, $sub133 = 0.0, $sub29 = 0.0, $sub60 = 0.0, $sub66 = 0.0;
	 var $sub7 = 0.0, $sub75 = 0.0, $sub8 = 0, $sub93 = 0.0, $t$0$lcssa = 0.0, $t$0115 = 0.0, $t$1109 = 0.0, $t$2 = 0.0, $t$3 = 0.0, $tobool = 0, $x$addr$0 = 0.0, $xor = 0, $z$0120 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $shr = $0 >>> 31;
	 $and = $0 & 2147483647;
	 $cmp = ($and>>>0)>(2139095040);
	 if ($cmp) {
	  $retval$0 = $x;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp2 = ($n|0)==(0);
	 if ($cmp2) {
	  $call = (+_j0f($x));
	  $retval$0 = $call;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp5 = ($n|0)<(0);
	 if ($cmp5) {
	  $sub = $n ^ -1;
	  $sub7 = -$x;
	  $xor = $shr ^ 1;
	  $nm1$0 = $sub;$sign$0 = $xor;$x$addr$0 = $sub7;
	 } else {
	  $sub8 = (($n) + -1)|0;
	  $nm1$0 = $sub8;$sign$0 = $shr;$x$addr$0 = $x;
	 }
	 $cmp10 = ($nm1$0|0)==(0);
	 if ($cmp10) {
	  $call12 = (+_j1f($x$addr$0));
	  $retval$0 = $call12;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $and14 = $sign$0 & $n;
	 $call15 = (+Math_abs((+$x$addr$0)));
	 L16: do {
	  if ((($and|0) == 0) | (($and|0) == 2139095040)) {
	   $b$6 = 0.0;
	  } else {
	   $conv = (+($nm1$0|0));
	   $cmp20 = $conv < $call15;
	   if ($cmp20) {
	    $call23 = (+_j0f($call15));
	    $call24 = (+_j1f($call15));
	    $cmp2588 = ($nm1$0|0)>(0);
	    if ($cmp2588) {
	     $a$090 = $call23;$b$091 = $call24;$i$089 = 0;
	    } else {
	     $b$6 = $call24;
	     break;
	    }
	    while(1) {
	     $inc = (($i$089) + 1)|0;
	     $conv27 = (+($inc|0));
	     $mul = $conv27 * 2.0;
	     $div = $mul / $call15;
	     $mul28 = $b$091 * $div;
	     $sub29 = $mul28 - $a$090;
	     $exitcond = ($inc|0)==($nm1$0|0);
	     if ($exitcond) {
	      $b$6 = $sub29;
	      break L16;
	     } else {
	      $a$090$phi = $b$091;$b$091 = $sub29;$i$089 = $inc;$a$090 = $a$090$phi;
	     }
	    }
	   }
	   $cmp31 = ($and>>>0)<(897581056);
	   if ($cmp31) {
	    $mul38 = $call15 * 0.5;
	    $nm1$0$op = (($nm1$0) + 1)|0;
	    $cmp4192124 = ($nm1$0$op|0)<(2);
	    $not$cmp34 = ($nm1$0|0)<(9);
	    $cmp4192 = $cmp4192124 & $not$cmp34;
	    if ($cmp4192) {
	     $a$1$lcssa = 1.0;$b$1$lcssa = $mul38;
	    } else {
	     $1 = ($nm1$0|0)<(8);
	     $$op = (($nm1$0) + 2)|0;
	     $2 = $1 ? $$op : 10;
	     $a$194 = 1.0;$b$195 = $mul38;$i$193 = 2;
	     while(1) {
	      $conv44 = (+($i$193|0));
	      $mul45 = $a$194 * $conv44;
	      $mul46 = $mul38 * $b$195;
	      $inc47 = (($i$193) + 1)|0;
	      $exitcond123 = ($inc47|0)==($2|0);
	      if ($exitcond123) {
	       $a$1$lcssa = $mul45;$b$1$lcssa = $mul46;
	       break;
	      } else {
	       $a$194 = $mul45;$b$195 = $mul46;$i$193 = $inc47;
	      }
	     }
	    }
	    $div49 = $b$1$lcssa / $a$1$lcssa;
	    $b$6 = $div49;
	    break;
	   }
	   $add54 = $conv + 1.0;
	   $mul55 = $add54 * 2.0;
	   $div56 = $mul55 / $call15;
	   $div57 = 2.0 / $call15;
	   $add58 = $div56 + $div57;
	   $mul59 = $div56 * $add58;
	   $sub60 = $mul59 + -1.0;
	   $cmp61117 = $sub60 < 1.0E+4;
	   if ($cmp61117) {
	    $k$0121 = 1;$q0$0118 = $div56;$q1$0119 = $sub60;$z$0120 = $add58;
	    while(1) {
	     $add63 = (($k$0121) + 1)|0;
	     $add64 = $div57 + $z$0120;
	     $mul65 = $q1$0119 * $add64;
	     $sub66 = $mul65 - $q0$0118;
	     $cmp61 = $sub66 < 1.0E+4;
	     if ($cmp61) {
	      $q0$0118$phi = $q1$0119;$k$0121 = $add63;$q1$0119 = $sub66;$z$0120 = $add64;$q0$0118 = $q0$0118$phi;
	     } else {
	      break;
	     }
	    }
	    $cmp68113 = ($k$0121|0)>(-2);
	    if ($cmp68113) {
	     $i$2114 = $add63;$t$0115 = 0.0;
	     label = 21;
	    } else {
	     $t$0$lcssa = 0.0;
	    }
	   } else {
	    $i$2114 = 1;$t$0115 = 0.0;
	    label = 21;
	   }
	   if ((label|0) == 21) {
	    while(1) {
	     label = 0;
	     $conv71 = (+($i$2114|0));
	     $add72 = $add54 + $conv71;
	     $mul73 = $add72 * 2.0;
	     $div74 = $mul73 / $call15;
	     $sub75 = $div74 - $t$0115;
	     $div76 = 1.0 / $sub75;
	     $dec = (($i$2114) + -1)|0;
	     $cmp68 = ($i$2114|0)>(0);
	     if ($cmp68) {
	      $i$2114 = $dec;$t$0115 = $div76;
	      label = 21;
	     } else {
	      $t$0$lcssa = $div76;
	      break;
	     }
	    }
	   }
	   $call79 = (+Math_abs((+$div56)));
	   $call80 = (+Math_log((+$call79)));
	   $mul81 = $add54 * $call80;
	   $cmp82 = $mul81 < 88.7216796875;
	   $cmp8698 = ($nm1$0|0)>(0);
	   if ($cmp82) {
	    if ($cmp8698) {
	     $a$2100 = $t$0$lcssa;$b$2101 = 1.0;$i$399 = $nm1$0;
	     while(1) {
	      $conv89 = (+($i$399|0));
	      $mul90 = $conv89 * 2.0;
	      $mul91 = $mul90 * $b$2101;
	      $div92 = $mul91 / $call15;
	      $sub93 = $div92 - $a$2100;
	      $dec95 = (($i$399) + -1)|0;
	      $cmp86 = ($dec95|0)>(0);
	      if ($cmp86) {
	       $a$2100$phi = $b$2101;$b$2101 = $sub93;$i$399 = $dec95;$a$2100 = $a$2100$phi;
	      } else {
	       $a$5 = $b$2101;$b$5 = $sub93;$t$3 = $t$0$lcssa;
	       break;
	      }
	     }
	    } else {
	     $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
	    }
	   } else {
	    if ($cmp8698) {
	     $a$3107 = $t$0$lcssa;$b$3108 = 1.0;$i$4106 = $nm1$0;$t$1109 = $t$0$lcssa;
	     while(1) {
	      $conv102 = (+($i$4106|0));
	      $mul103 = $conv102 * 2.0;
	      $mul104 = $mul103 * $b$3108;
	      $div105 = $mul104 / $call15;
	      $sub106 = $div105 - $a$3107;
	      $cmp107 = $sub106 > 1152921504606846976.0;
	      if ($cmp107) {
	       $div110 = $b$3108 / $sub106;
	       $div111 = $t$1109 / $sub106;
	       $a$4 = $div110;$b$4 = 1.0;$t$2 = $div111;
	      } else {
	       $a$4 = $b$3108;$b$4 = $sub106;$t$2 = $t$1109;
	      }
	      $dec114 = (($i$4106) + -1)|0;
	      $cmp99 = ($dec114|0)>(0);
	      if ($cmp99) {
	       $a$3107 = $a$4;$b$3108 = $b$4;$i$4106 = $dec114;$t$1109 = $t$2;
	      } else {
	       $a$5 = $a$4;$b$5 = $b$4;$t$3 = $t$2;
	       break;
	      }
	     }
	    } else {
	     $a$5 = $t$0$lcssa;$b$5 = 1.0;$t$3 = $t$0$lcssa;
	    }
	   }
	   $call117 = (+_j0f($call15));
	   $call118 = (+_j1f($call15));
	   $call119 = (+Math_abs((+$call117)));
	   $call120 = (+Math_abs((+$call118)));
	   $cmp121 = !($call119 >= $call120);
	   if ($cmp121) {
	    $mul127 = $t$3 * $call118;
	    $div128 = $mul127 / $a$5;
	    $b$6 = $div128;
	    break;
	   } else {
	    $mul124 = $t$3 * $call117;
	    $div125 = $mul124 / $b$5;
	    $b$6 = $div125;
	    break;
	   }
	  }
	 } while(0);
	 $tobool = ($and14|0)==(0);
	 if ($tobool) {
	  $retval$0 = $b$6;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $sub133 = -$b$6;
	 $retval$0 = $sub133;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _ynf($n,$x) {
	 $n = $n|0;
	 $x = +$x;
	 var $0 = 0, $a$025 = 0.0, $a$025$phi = 0.0, $and = 0, $and13 = 0, $b$0$lcssa = 0.0, $b$026 = 0.0, $call = 0.0, $call19 = 0.0, $call23 = 0.0, $call24 = 0.0, $cmp = 0, $cmp11 = 0, $cmp16 = 0, $cmp2 = 0, $cmp30 = 0, $cmp3023 = 0, $cmp31 = 0, $cmp5 = 0, $cmp8 = 0;
	 var $conv = 0.0, $div = 0.0, $i$024 = 0, $ib$0 = 0, $inc = 0, $mul = 0.0, $mul32 = 0.0, $nm1$0 = 0, $or$cond = 0, $retval$0 = 0.0, $sign$0 = 0, $sub = 0, $sub14 = 0, $sub20 = 0.0, $sub33 = 0.0, $sub41 = 0.0, $tobool = 0, $tobool18 = 0, $tobool39 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $and = $0 & 2147483647;
	 $cmp = ($and>>>0)>(2139095040);
	 do {
	  if ($cmp) {
	   $retval$0 = $x;
	  } else {
	   $tobool = ($0|0)>(-1);
	   $cmp2 = ($and|0)==(0);
	   $or$cond = $tobool | $cmp2;
	   if ($or$cond) {
	    $cmp5 = ($and|0)==(2139095040);
	    if ($cmp5) {
	     $retval$0 = 0.0;
	    } else {
	     $cmp8 = ($n|0)==(0);
	     if ($cmp8) {
	      $call = (+_y0f($x));
	      $retval$0 = $call;
	      break;
	     }
	     $cmp11 = ($n|0)<(0);
	     if ($cmp11) {
	      $sub = $n ^ -1;
	      $and13 = $n & 1;
	      $nm1$0 = $sub;$sign$0 = $and13;
	     } else {
	      $sub14 = (($n) + -1)|0;
	      $nm1$0 = $sub14;$sign$0 = 0;
	     }
	     $cmp16 = ($nm1$0|0)==(0);
	     if ($cmp16) {
	      $tobool18 = ($sign$0|0)==(0);
	      $call19 = (+_y1f($x));
	      if ($tobool18) {
	       $retval$0 = $call19;
	       break;
	      }
	      $sub20 = -$call19;
	      $retval$0 = $sub20;
	      break;
	     }
	     $call23 = (+_y0f($x));
	     $call24 = (+_y1f($x));
	     $cmp3023 = ($nm1$0|0)>(0);
	     L16: do {
	      if ($cmp3023) {
	       $a$025 = $call23;$b$026 = $call24;$i$024 = 0;
	       while(1) {
	        $ib$0 = (HEAPF32[tempDoublePtr>>2]=$b$026,HEAP32[tempDoublePtr>>2]|0);
	        $cmp31 = ($ib$0|0)==(-8388608);
	        if ($cmp31) {
	         $b$0$lcssa = $b$026;
	         break L16;
	        }
	        $inc = (($i$024) + 1)|0;
	        $conv = (+($inc|0));
	        $mul = $conv * 2.0;
	        $div = $mul / $x;
	        $mul32 = $b$026 * $div;
	        $sub33 = $mul32 - $a$025;
	        $cmp30 = ($inc|0)<($nm1$0|0);
	        if ($cmp30) {
	         $a$025$phi = $b$026;$b$026 = $sub33;$i$024 = $inc;$a$025 = $a$025$phi;
	        } else {
	         $b$0$lcssa = $sub33;
	         break;
	        }
	       }
	      } else {
	       $b$0$lcssa = $call24;
	      }
	     } while(0);
	     $tobool39 = ($sign$0|0)==(0);
	     if ($tobool39) {
	      $retval$0 = $b$0$lcssa;
	     } else {
	      $sub41 = -$b$0$lcssa;
	      $retval$0 = $sub41;
	     }
	    }
	   } else {
	    $retval$0 = nan;
	   }
	  }
	 } while(0);
	 STACKTOP = sp;return (+$retval$0);
	}
	function _ldexp($x,$n) {
	 $x = +$x;
	 $n = $n|0;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+_scalbn($x,$n));
	 STACKTOP = sp;return (+$call);
	}
	function _ldexpf($x,$n) {
	 $x = +$x;
	 $n = $n|0;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+_scalbnf($x,$n));
	 STACKTOP = sp;return (+$call);
	}
	function _ldexpl($x,$n) {
	 $x = +$x;
	 $n = $n|0;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+_scalbnl($x,$n));
	 STACKTOP = sp;return (+$call);
	}
	function _logb($x) {
	 $x = +$x;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call16 = 0, $cmp11 = 0, $conv17 = 0.0, $div = 0.0, $mul = 0.0, $mul14 = 0.0, $retval$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $2 = $1 & 2146435072;
	 $3 = ($2>>>0)<(2146435072);
	 $4 = ($2|0)==(2146435072);
	 $5 = (0)<(0);
	 $6 = $4 & $5;
	 $7 = $3 | $6;
	 if (!($7)) {
	  $mul = $x * $x;
	  $retval$0 = $mul;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp11 = $x == 0.0;
	 if ($cmp11) {
	  $mul14 = $x * $x;
	  $div = -1.0 / $mul14;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 } else {
	  $call16 = (_ilogb($x)|0);
	  $conv17 = (+($call16|0));
	  $retval$0 = $conv17;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 return +0;
	}
	function _logbf($x) {
	 $x = +$x;
	 var $0 = 0, $and = 0, $call16 = 0, $cmp = 0, $cmp11 = 0, $conv17 = 0.0, $div = 0.0, $mul = 0.0, $mul14 = 0.0, $retval$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $and = $0 & 2139095040;
	 $cmp = ($and>>>0)<(2139095040);
	 do {
	  if ($cmp) {
	   $cmp11 = $x == 0.0;
	   if ($cmp11) {
	    $mul14 = $x * $x;
	    $div = -1.0 / $mul14;
	    $retval$0 = $div;
	    break;
	   } else {
	    $call16 = (_ilogbf($x)|0);
	    $conv17 = (+($call16|0));
	    $retval$0 = $conv17;
	    break;
	   }
	  } else {
	   $mul = $x * $x;
	   $retval$0 = $mul;
	  }
	 } while(0);
	 STACKTOP = sp;return (+$retval$0);
	}
	function _logbl($x) {
	 $x = +$x;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call16 = 0, $cmp11 = 0, $conv17 = 0.0, $div = 0.0, $mul = 0.0, $mul14 = 0.0, $retval$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $2 = $1 & 2146435072;
	 $3 = ($2>>>0)<(2146435072);
	 $4 = ($2|0)==(2146435072);
	 $5 = (0)<(0);
	 $6 = $4 & $5;
	 $7 = $3 | $6;
	 if (!($7)) {
	  $mul = $x * $x;
	  $retval$0 = $mul;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp11 = $x == 0.0;
	 if ($cmp11) {
	  $mul14 = $x * $x;
	  $div = -1.0 / $mul14;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 } else {
	  $call16 = (_ilogbl($x)|0);
	  $conv17 = (+($call16|0));
	  $retval$0 = $conv17;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 return +0;
	}
	function _lgamma($x) {
	 $x = +$x;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+___lgamma_r($x,152288));
	 STACKTOP = sp;return (+$call);
	}
	function ___lgamma_r($x,$signgamp) {
	 $x = +$x;
	 $signgamp = $signgamp|0;
	 var $$pn = 0.0, $0 = 0, $1 = 0, $2 = 0, $add = 0.0, $add$i = 0, $add101 = 0.0, $add106 = 0.0, $add108 = 0.0, $add110 = 0.0, $add112 = 0.0, $add114 = 0.0, $add116 = 0.0, $add118 = 0.0, $add120 = 0.0, $add122 = 0.0, $add124 = 0.0, $add126 = 0.0, $add128 = 0.0, $add131 = 0.0;
	 var $add135 = 0.0, $add136 = 0.0, $add139 = 0.0, $add141 = 0.0, $add143 = 0.0, $add145 = 0.0, $add147 = 0.0, $add150 = 0.0, $add152 = 0.0, $add154 = 0.0, $add156 = 0.0, $add158 = 0.0, $add161 = 0.0, $add162 = 0.0, $add171 = 0.0, $add173 = 0.0, $add175 = 0.0, $add177 = 0.0, $add179 = 0.0, $add181 = 0.0;
	 var $add184 = 0.0, $add186 = 0.0, $add188 = 0.0, $add190 = 0.0, $add192 = 0.0, $add194 = 0.0, $add197 = 0.0, $add199 = 0.0, $add202 = 0.0, $add205 = 0.0, $add208 = 0.0, $add211 = 0.0, $add214 = 0.0, $add224 = 0.0, $add226 = 0.0, $add228 = 0.0, $add230 = 0.0, $add232 = 0.0, $add234 = 0.0, $add238 = 0.0;
	 var $add79 = 0.0, $add81 = 0.0, $add83 = 0.0, $add85 = 0.0, $add87 = 0.0, $add89 = 0.0, $add91 = 0.0, $add93 = 0.0, $add95 = 0.0, $add98 = 0.0, $call = 0.0, $call$i = 0.0, $call11$i = 0.0, $call14$i = 0.0, $call16$i = 0.0, $call213 = 0.0, $call220 = 0.0, $call29 = 0.0, $call47 = 0.0, $call9$i = 0.0;
	 var $cmp = 0, $cmp164 = 0, $cmp17 = 0, $cmp217 = 0, $cmp22 = 0, $cmp37 = 0, $cmp41 = 0, $cmp44 = 0, $cmp49 = 0, $cmp54 = 0, $cmp6 = 0, $cmp62 = 0, $cmp67 = 0, $conv$i = 0, $conv167 = 0, $conv168 = 0.0, $conv4 = 0, $conv4$i = 0.0, $conv6$i = 0.0, $div = 0.0;
	 var $div$i = 0, $div160 = 0.0, $div196 = 0.0, $div221 = 0.0, $div28 = 0.0, $mul = 0.0, $mul$i = 0.0, $mul103 = 0.0, $mul104 = 0.0, $mul105 = 0.0, $mul107 = 0.0, $mul109 = 0.0, $mul111 = 0.0, $mul113 = 0.0, $mul115 = 0.0, $mul117 = 0.0, $mul119 = 0.0, $mul121 = 0.0, $mul123 = 0.0, $mul125 = 0.0;
	 var $mul127 = 0.0, $mul129 = 0.0, $mul130 = 0.0, $mul132 = 0.0, $mul138 = 0.0, $mul140 = 0.0, $mul142 = 0.0, $mul144 = 0.0, $mul146 = 0.0, $mul148 = 0.0, $mul149 = 0.0, $mul151 = 0.0, $mul153 = 0.0, $mul155 = 0.0, $mul157 = 0.0, $mul159 = 0.0, $mul170 = 0.0, $mul172 = 0.0, $mul174 = 0.0, $mul176 = 0.0;
	 var $mul178 = 0.0, $mul180 = 0.0, $mul182 = 0.0, $mul183 = 0.0, $mul185 = 0.0, $mul187 = 0.0, $mul189 = 0.0, $mul191 = 0.0, $mul193 = 0.0, $mul195 = 0.0, $mul2$i = 0.0, $mul203 = 0.0, $mul206 = 0.0, $mul209 = 0.0, $mul212 = 0.0, $mul222 = 0.0, $mul223 = 0.0, $mul225 = 0.0, $mul227 = 0.0, $mul229 = 0.0;
	 var $mul231 = 0.0, $mul233 = 0.0, $mul237 = 0.0, $mul242 = 0.0, $mul27 = 0.0, $mul3$i = 0.0, $mul5$i = 0.0, $mul76 = 0.0, $mul77 = 0.0, $mul78 = 0.0, $mul8$i = 0.0, $mul80 = 0.0, $mul82 = 0.0, $mul84 = 0.0, $mul86 = 0.0, $mul88 = 0.0, $mul90 = 0.0, $mul92 = 0.0, $mul94 = 0.0, $mul96 = 0.0;
	 var $mul97 = 0.0, $mul99 = 0.0, $nadj$0 = 0.0, $r$0 = 0.0, $r$0$ph = 0.0, $r$0$ph134 = 0.0, $r$1 = 0.0, $retval$0 = 0.0, $retval$0$i = 0.0, $sub = 0.0, $sub$i = 0.0, $sub100 = 0.0, $sub11 = 0.0, $sub13$i = 0.0, $sub133 = 0.0, $sub134 = 0.0, $sub15 = 0.0, $sub169 = 0.0, $sub17$i = 0.0, $sub20 = 0.0;
	 var $sub235 = 0.0, $sub236 = 0.0, $sub241 = 0.0, $sub249 = 0.0, $sub25 = 0.0, $sub48 = 0.0, $sub57 = 0.0, $sub7$i = 0.0, $sub70 = 0.0, $sub72 = 0.0, $t$0 = 0.0, $x$addr$0 = 0.0, $x$addr$1 = 0.0, $y$0 = 0.0, $y$0$ph = 0.0, $y$0$ph133 = 0.0, $z$0 = 0.0, $z$1 = 0.0, $z$2 = 0.0, $z$3 = 0.0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 HEAP32[$signgamp>>2] = 1;
	 $conv4 = $1 & 2147483647;
	 $cmp = ($conv4>>>0)>(2146435071);
	 if ($cmp) {
	  $mul = $x * $x;
	  $retval$0 = $mul;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp6 = ($conv4>>>0)<(999292928);
	 $2 = ($1|0)<(0);
	 if ($cmp6) {
	  if ($2) {
	   $sub = -$x;
	   HEAP32[$signgamp>>2] = -1;
	   $x$addr$0 = $sub;
	  } else {
	   $x$addr$0 = $x;
	  }
	  $call = (+Math_log((+$x$addr$0)));
	  $sub11 = -$call;
	  $retval$0 = $sub11;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 if ($2) {
	  $sub15 = -$x;
	  $mul$i = $x * -0.5;
	  $call$i = (+Math_floor((+$mul$i)));
	  $sub$i = $mul$i - $call$i;
	  $mul2$i = $sub$i * 2.0;
	  $mul3$i = $mul2$i * 4.0;
	  $conv$i = (~~(($mul3$i)));
	  $add$i = (($conv$i) + 1)|0;
	  $div$i = (($add$i|0) / 2)&-1;
	  $conv4$i = (+($div$i|0));
	  $mul5$i = $conv4$i * 0.5;
	  $conv6$i = $mul5$i;
	  $sub7$i = $mul2$i - $conv6$i;
	  $mul8$i = $sub7$i * 3.141592653589793116;
	  if ((($div$i|0) == 1)) {
	   $call11$i = (+___cos($mul8$i,0.0));
	   $retval$0$i = $call11$i;
	  } else if ((($div$i|0) == 3)) {
	   $call16$i = (+___cos($mul8$i,0.0));
	   $sub17$i = -$call16$i;
	   $retval$0$i = $sub17$i;
	  } else if ((($div$i|0) == 2)) {
	   $sub13$i = -$mul8$i;
	   $call14$i = (+___sin($sub13$i,0.0,0));
	   $retval$0$i = $call14$i;
	  } else {
	   $call9$i = (+___sin($mul8$i,0.0,0));
	   $retval$0$i = $call9$i;
	  }
	  $cmp17 = $retval$0$i == 0.0;
	  if ($cmp17) {
	   $sub20 = $x - $x;
	   $div = 1.0 / $sub20;
	   $retval$0 = $div;
	   STACKTOP = sp;return (+$retval$0);
	  }
	  $cmp22 = $retval$0$i > 0.0;
	  if ($cmp22) {
	   HEAP32[$signgamp>>2] = -1;
	   $t$0 = $retval$0$i;
	  } else {
	   $sub25 = -$retval$0$i;
	   $t$0 = $sub25;
	  }
	  $mul27 = $t$0 * $sub15;
	  $div28 = 3.141592653589793116 / $mul27;
	  $call29 = (+Math_log((+$div28)));
	  $nadj$0 = $call29;$x$addr$1 = $sub15;
	 } else {
	  $nadj$0 = 0.0;$x$addr$1 = $x;
	 }
	 if ((($conv4|0) == 1072693248) | (($conv4|0) == 1073741824)) {
	  $cmp37 = ($0|0)==(0);
	  if ($cmp37) {
	   $r$1 = 0.0;
	  } else {
	   label = 21;
	  }
	 } else {
	  label = 21;
	 }
	 L31: do {
	  if ((label|0) == 21) {
	   $cmp41 = ($conv4>>>0)<(1073741824);
	   if (!($cmp41)) {
	    $cmp164 = ($conv4>>>0)<(1075838976);
	    if (!($cmp164)) {
	     $cmp217 = ($conv4>>>0)<(1133510656);
	     $call220 = (+Math_log((+$x$addr$1)));
	     if ($cmp217) {
	      $div221 = 1.0 / $x$addr$1;
	      $mul222 = $div221 * $div221;
	      $mul223 = $mul222 * -0.00163092934096575273989;
	      $add224 = $mul223 + 8.36339918996282139125E-4;
	      $mul225 = $mul222 * $add224;
	      $add226 = $mul225 + -5.95187557450339963135E-4;
	      $mul227 = $mul222 * $add226;
	      $add228 = $mul227 + 7.936505586430195585E-4;
	      $mul229 = $mul222 * $add228;
	      $add230 = $mul229 + -0.0027777777772877553647;
	      $mul231 = $mul222 * $add230;
	      $add232 = $mul231 + 0.0833333333333329678849;
	      $mul233 = $div221 * $add232;
	      $add234 = $mul233 + 0.418938533204672725052;
	      $sub235 = $x$addr$1 + -0.5;
	      $sub236 = $call220 + -1.0;
	      $mul237 = $sub235 * $sub236;
	      $add238 = $mul237 + $add234;
	      $r$1 = $add238;
	      break;
	     } else {
	      $sub241 = $call220 + -1.0;
	      $mul242 = $x$addr$1 * $sub241;
	      $r$1 = $mul242;
	      break;
	     }
	    }
	    $conv167 = (~~(($x$addr$1)));
	    $conv168 = (+($conv167|0));
	    $sub169 = $x$addr$1 - $conv168;
	    $mul170 = $sub169 * 3.19475326584100867617E-5;
	    $add171 = $mul170 + 0.00184028451407337715652;
	    $mul172 = $sub169 * $add171;
	    $add173 = $mul172 + 0.026642270303363860956;
	    $mul174 = $sub169 * $add173;
	    $add175 = $mul174 + 0.146350472652464452805;
	    $mul176 = $sub169 * $add175;
	    $add177 = $mul176 + 0.325778796408930981787;
	    $mul178 = $sub169 * $add177;
	    $add179 = $mul178 + 0.214982415960608852501;
	    $mul180 = $sub169 * $add179;
	    $add181 = $mul180 + -0.0772156649015328655494;
	    $mul182 = $sub169 * $add181;
	    $mul183 = $sub169 * 7.32668430744625636189E-6;
	    $add184 = $mul183 + 7.77942496381893596434E-4;
	    $mul185 = $sub169 * $add184;
	    $add186 = $mul185 + 0.0186459191715652901344;
	    $mul187 = $sub169 * $add186;
	    $add188 = $mul187 + 0.171933865632803078993;
	    $mul189 = $sub169 * $add188;
	    $add190 = $mul189 + 0.721935547567138069525;
	    $mul191 = $sub169 * $add190;
	    $add192 = $mul191 + 1.39200533467621045958;
	    $mul193 = $sub169 * $add192;
	    $add194 = $mul193 + 1.0;
	    $mul195 = $sub169 * 0.5;
	    $div196 = $mul182 / $add194;
	    $add197 = $mul195 + $div196;
	    switch ($conv167|0) {
	    case 7:  {
	     $add199 = $sub169 + 6.0;
	     $z$0 = $add199;
	     label = 36;
	     break;
	    }
	    case 4:  {
	     $z$2 = 1.0;
	     label = 38;
	     break;
	    }
	    case 3:  {
	     $z$3 = 1.0;
	     break;
	    }
	    case 6:  {
	     $z$0 = 1.0;
	     label = 36;
	     break;
	    }
	    case 5:  {
	     $z$1 = 1.0;
	     label = 37;
	     break;
	    }
	    default: {
	     $r$1 = $add197;
	     break L31;
	    }
	    }
	    if ((label|0) == 36) {
	     $add202 = $sub169 + 5.0;
	     $mul203 = $add202 * $z$0;
	     $z$1 = $mul203;
	     label = 37;
	    }
	    if ((label|0) == 37) {
	     $add205 = $sub169 + 4.0;
	     $mul206 = $add205 * $z$1;
	     $z$2 = $mul206;
	     label = 38;
	    }
	    if ((label|0) == 38) {
	     $add208 = $sub169 + 3.0;
	     $mul209 = $add208 * $z$2;
	     $z$3 = $mul209;
	    }
	    $add211 = $sub169 + 2.0;
	    $mul212 = $add211 * $z$3;
	    $call213 = (+Math_log((+$mul212)));
	    $add214 = $add197 + $call213;
	    $r$1 = $add214;
	    break;
	   }
	   $cmp44 = ($conv4>>>0)<(1072483533);
	   do {
	    if ($cmp44) {
	     $call47 = (+Math_log((+$x$addr$1)));
	     $sub48 = -$call47;
	     $cmp49 = ($conv4>>>0)>(1072130371);
	     if ($cmp49) {
	      $$pn = 1.0;$r$0$ph = $sub48;
	      label = 30;
	     } else {
	      $cmp54 = ($conv4>>>0)>(1070442080);
	      if ($cmp54) {
	       $sub57 = $x$addr$1 + -0.461632144968362245763;
	       $r$0$ph134 = $sub48;$y$0$ph133 = $sub57;
	       label = 31;
	      } else {
	       $r$0 = $sub48;$y$0 = $x$addr$1;
	       label = 32;
	      }
	     }
	    } else {
	     $cmp62 = ($conv4>>>0)>(1073460418);
	     if ($cmp62) {
	      $$pn = 2.0;$r$0$ph = 0.0;
	      label = 30;
	     } else {
	      $cmp67 = ($conv4>>>0)>(1072936131);
	      if ($cmp67) {
	       $sub70 = $x$addr$1 + -1.46163214496836224576;
	       $r$0$ph134 = 0.0;$y$0$ph133 = $sub70;
	       label = 31;
	       break;
	      } else {
	       $sub72 = $x$addr$1 + -1.0;
	       $r$0 = 0.0;$y$0 = $sub72;
	       label = 32;
	       break;
	      }
	     }
	    }
	   } while(0);
	   if ((label|0) == 30) {
	    $y$0$ph = $$pn - $x$addr$1;
	    $mul76 = $y$0$ph * $y$0$ph;
	    $mul77 = $mul76 * 2.52144565451257326939E-5;
	    $add = $mul77 + 2.20862790713908385557E-4;
	    $mul78 = $mul76 * $add;
	    $add79 = $mul78 + 0.00119270763183362067845;
	    $mul80 = $mul76 * $add79;
	    $add81 = $mul80 + 0.00738555086081402883957;
	    $mul82 = $mul76 * $add81;
	    $add83 = $mul82 + 0.0673523010531292681823;
	    $mul84 = $mul76 * $add83;
	    $add85 = $mul84 + 0.0772156649015328655494;
	    $mul86 = $mul76 * 4.4864094961891516015E-5;
	    $add87 = $mul86 + 1.08011567247583939954E-4;
	    $mul88 = $mul76 * $add87;
	    $add89 = $mul88 + 5.10069792153511336608E-4;
	    $mul90 = $mul76 * $add89;
	    $add91 = $mul90 + 0.00289051383673415629091;
	    $mul92 = $mul76 * $add91;
	    $add93 = $mul92 + 0.0205808084325167332806;
	    $mul94 = $mul76 * $add93;
	    $add95 = $mul94 + 0.322467033424113591611;
	    $mul96 = $mul76 * $add95;
	    $mul97 = $y$0$ph * $add85;
	    $add98 = $mul97 + $mul96;
	    $mul99 = $y$0$ph * 0.5;
	    $sub100 = $add98 - $mul99;
	    $add101 = $r$0$ph + $sub100;
	    $r$1 = $add101;
	    break;
	   }
	   else if ((label|0) == 31) {
	    $mul103 = $y$0$ph133 * $y$0$ph133;
	    $mul104 = $y$0$ph133 * $mul103;
	    $mul105 = $mul104 * 3.15632070903625950361E-4;
	    $add106 = $mul105 + -0.00140346469989232843813;
	    $mul107 = $mul104 * $add106;
	    $add108 = $mul107 + 0.00610053870246291332635;
	    $mul109 = $mul104 * $add108;
	    $add110 = $mul109 + -0.0327885410759859649565;
	    $mul111 = $mul104 * $add110;
	    $add112 = $mul111 + 0.483836122723810047042;
	    $mul113 = $mul104 * -3.12754168375120860518E-4;
	    $add114 = $mul113 + 8.81081882437654011382E-4;
	    $mul115 = $mul104 * $add114;
	    $add116 = $mul115 + -0.0036845201678113825676;
	    $mul117 = $mul104 * $add116;
	    $add118 = $mul117 + 0.0179706750811820387126;
	    $mul119 = $mul104 * $add118;
	    $add120 = $mul119 + -0.147587722994593911752;
	    $mul121 = $mul104 * 3.35529192635519073543E-4;
	    $add122 = $mul121 + -5.38595305356740546715E-4;
	    $mul123 = $mul104 * $add122;
	    $add124 = $mul123 + 0.0022596478090061247225;
	    $mul125 = $mul104 * $add124;
	    $add126 = $mul125 + -0.010314224129834143745;
	    $mul127 = $mul104 * $add126;
	    $add128 = $mul127 + 0.0646249402391333854778;
	    $mul129 = $mul103 * $add112;
	    $mul130 = $y$0$ph133 * $add128;
	    $add131 = $add120 + $mul130;
	    $mul132 = $mul104 * $add131;
	    $sub133 = -3.63867699703950536541E-18 - $mul132;
	    $sub134 = $mul129 - $sub133;
	    $add135 = $sub134 + -0.121486290535849611461;
	    $add136 = $r$0$ph134 + $add135;
	    $r$1 = $add136;
	    break;
	   }
	   else if ((label|0) == 32) {
	    $mul138 = $y$0 * 0.0133810918536787660377;
	    $add139 = $mul138 + 0.228963728064692451092;
	    $mul140 = $y$0 * $add139;
	    $add141 = $mul140 + 0.977717527963372745603;
	    $mul142 = $y$0 * $add141;
	    $add143 = $mul142 + 1.45492250137234768737;
	    $mul144 = $y$0 * $add143;
	    $add145 = $mul144 + 0.632827064025093366517;
	    $mul146 = $y$0 * $add145;
	    $add147 = $mul146 + -0.0772156649015328655494;
	    $mul148 = $y$0 * $add147;
	    $mul149 = $y$0 * 0.0032170924228242391181;
	    $add150 = $mul149 + 0.104222645593369134254;
	    $mul151 = $y$0 * $add150;
	    $add152 = $mul151 + 0.769285150456672783825;
	    $mul153 = $y$0 * $add152;
	    $add154 = $mul153 + 2.12848976379893395361;
	    $mul155 = $y$0 * $add154;
	    $add156 = $mul155 + 2.45597793713041134822;
	    $mul157 = $y$0 * $add156;
	    $add158 = $mul157 + 1.0;
	    $mul159 = $y$0 * -0.5;
	    $div160 = $mul148 / $add158;
	    $add161 = $mul159 + $div160;
	    $add162 = $r$0 + $add161;
	    $r$1 = $add162;
	    break;
	   }
	  }
	 } while(0);
	 if (!($2)) {
	  $retval$0 = $r$1;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $sub249 = $nadj$0 - $r$1;
	 $retval$0 = $sub249;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _lgammaf($x) {
	 $x = +$x;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+___lgammaf_r($x,152288));
	 STACKTOP = sp;return (+$call);
	}
	function ___lgammaf_r($x,$signgamp) {
	 $x = +$x;
	 $signgamp = $signgamp|0;
	 var $$pn = 0.0, $0 = 0, $add = 0.0, $add$i = 0, $add100 = 0.0, $add102 = 0.0, $add104 = 0.0, $add106 = 0.0, $add108 = 0.0, $add110 = 0.0, $add113 = 0.0, $add117 = 0.0, $add118 = 0.0, $add121 = 0.0, $add123 = 0.0, $add125 = 0.0, $add127 = 0.0, $add129 = 0.0, $add132 = 0.0, $add134 = 0.0;
	 var $add136 = 0.0, $add138 = 0.0, $add140 = 0.0, $add143 = 0.0, $add144 = 0.0, $add151 = 0.0, $add153 = 0.0, $add155 = 0.0, $add157 = 0.0, $add159 = 0.0, $add161 = 0.0, $add164 = 0.0, $add166 = 0.0, $add168 = 0.0, $add170 = 0.0, $add172 = 0.0, $add174 = 0.0, $add177 = 0.0, $add179 = 0.0, $add182 = 0.0;
	 var $add185 = 0.0, $add188 = 0.0, $add191 = 0.0, $add194 = 0.0, $add204 = 0.0, $add206 = 0.0, $add208 = 0.0, $add210 = 0.0, $add212 = 0.0, $add214 = 0.0, $add218 = 0.0, $add61 = 0.0, $add63 = 0.0, $add65 = 0.0, $add67 = 0.0, $add69 = 0.0, $add71 = 0.0, $add73 = 0.0, $add75 = 0.0, $add77 = 0.0;
	 var $add80 = 0.0, $add83 = 0.0, $add88 = 0.0, $add90 = 0.0, $add92 = 0.0, $add94 = 0.0, $add96 = 0.0, $add98 = 0.0, $and = 0, $call = 0.0, $call$i = 0.0, $call11$i = 0.0, $call14$i = 0.0, $call16$i = 0.0, $call193 = 0.0, $call200 = 0.0, $call23 = 0.0, $call33 = 0.0, $call9$i = 0.0, $cmp = 0;
	 var $cmp13 = 0, $cmp146 = 0, $cmp17 = 0, $cmp197 = 0, $cmp29 = 0, $cmp3 = 0, $cmp31 = 0, $cmp35 = 0, $cmp39 = 0, $cmp46 = 0, $cmp50 = 0, $conv = 0, $conv$i = 0, $conv148 = 0.0, $conv4$i = 0.0, $conv7$i = 0.0, $div = 0.0, $div$i = 0, $div142 = 0.0, $div176 = 0.0;
	 var $div201 = 0.0, $div22 = 0.0, $mul = 0.0, $mul$i = 0.0, $mul101 = 0.0, $mul103 = 0.0, $mul105 = 0.0, $mul107 = 0.0, $mul109 = 0.0, $mul111 = 0.0, $mul112 = 0.0, $mul114 = 0.0, $mul120 = 0.0, $mul122 = 0.0, $mul124 = 0.0, $mul126 = 0.0, $mul128 = 0.0, $mul130 = 0.0, $mul131 = 0.0, $mul133 = 0.0;
	 var $mul135 = 0.0, $mul137 = 0.0, $mul139 = 0.0, $mul141 = 0.0, $mul150 = 0.0, $mul152 = 0.0, $mul154 = 0.0, $mul156 = 0.0, $mul158 = 0.0, $mul160 = 0.0, $mul162 = 0.0, $mul163 = 0.0, $mul165 = 0.0, $mul167 = 0.0, $mul169 = 0.0, $mul171 = 0.0, $mul173 = 0.0, $mul175 = 0.0, $mul183 = 0.0, $mul186 = 0.0;
	 var $mul189 = 0.0, $mul192 = 0.0, $mul2$i = 0.0, $mul202 = 0.0, $mul203 = 0.0, $mul205 = 0.0, $mul207 = 0.0, $mul209 = 0.0, $mul21 = 0.0, $mul211 = 0.0, $mul213 = 0.0, $mul217 = 0.0, $mul222 = 0.0, $mul3$i = 0.0, $mul5$i = 0.0, $mul58 = 0.0, $mul59 = 0.0, $mul60 = 0.0, $mul62 = 0.0, $mul64 = 0.0;
	 var $mul66 = 0.0, $mul68 = 0.0, $mul70 = 0.0, $mul72 = 0.0, $mul74 = 0.0, $mul76 = 0.0, $mul78 = 0.0, $mul79 = 0.0, $mul8$i = 0.0, $mul81 = 0.0, $mul85 = 0.0, $mul86 = 0.0, $mul87 = 0.0, $mul89 = 0.0, $mul91 = 0.0, $mul93 = 0.0, $mul95 = 0.0, $mul97 = 0.0, $mul99 = 0.0, $nadj$0 = 0.0;
	 var $r$0 = 0.0, $r$0$ph = 0.0, $r$0$ph133 = 0.0, $r$1 = 0.0, $retval$0 = 0.0, $retval$0$i = 0.0, $sub = 0.0, $sub$i = 0.0, $sub11 = 0.0, $sub115 = 0.0, $sub116 = 0.0, $sub13$i = 0.0, $sub149 = 0.0, $sub15 = 0.0, $sub17$i = 0.0, $sub19 = 0.0, $sub215 = 0.0, $sub216 = 0.0, $sub221 = 0.0, $sub229 = 0.0;
	 var $sub34 = 0.0, $sub41 = 0.0, $sub52 = 0.0, $sub54 = 0.0, $sub6$i = 0.0, $sub7 = 0.0, $sub82 = 0.0, $t$0 = 0.0, $tobool = 0, $x$addr$0 = 0.0, $x$addr$1 = 0.0, $y$0 = 0.0, $y$0$ph = 0.0, $y$0$ph132 = 0.0, $z$0 = 0.0, $z$1 = 0.0, $z$2 = 0.0, $z$3 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 HEAP32[$signgamp>>2] = 1;
	 $and = $0 & 2147483647;
	 $cmp = ($and>>>0)>(2139095039);
	 if ($cmp) {
	  $mul = $x * $x;
	  $retval$0 = $mul;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp3 = ($and>>>0)<(889192448);
	 $tobool = ($0|0)<(0);
	 if ($cmp3) {
	  if ($tobool) {
	   HEAP32[$signgamp>>2] = -1;
	   $sub = -$x;
	   $x$addr$0 = $sub;
	  } else {
	   $x$addr$0 = $x;
	  }
	  $call = (+Math_log((+$x$addr$0)));
	  $sub7 = -$call;
	  $retval$0 = $sub7;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 if ($tobool) {
	  $sub11 = -$x;
	  $mul$i = $x * -0.5;
	  $call$i = (+Math_floor((+$mul$i)));
	  $sub$i = $mul$i - $call$i;
	  $mul2$i = $sub$i * 2.0;
	  $mul3$i = $mul2$i * 4.0;
	  $conv$i = (~~(($mul3$i)));
	  $add$i = (($conv$i) + 1)|0;
	  $div$i = (($add$i|0) / 2)&-1;
	  $conv4$i = (+($div$i|0));
	  $mul5$i = $conv4$i * 0.5;
	  $sub6$i = $mul2$i - $mul5$i;
	  $conv7$i = $sub6$i;
	  $mul8$i = $conv7$i * 3.141592653589793116;
	  if ((($div$i|0) == 3)) {
	   $call16$i = (+___cosdf($mul8$i));
	   $sub17$i = -$call16$i;
	   $retval$0$i = $sub17$i;
	  } else if ((($div$i|0) == 1)) {
	   $call11$i = (+___cosdf($mul8$i));
	   $retval$0$i = $call11$i;
	  } else if ((($div$i|0) == 2)) {
	   $sub13$i = -$mul8$i;
	   $call14$i = (+___sindf($sub13$i));
	   $retval$0$i = $call14$i;
	  } else {
	   $call9$i = (+___sindf($mul8$i));
	   $retval$0$i = $call9$i;
	  }
	  $cmp13 = $retval$0$i == 0.0;
	  if ($cmp13) {
	   $sub15 = $x - $x;
	   $div = 1.0 / $sub15;
	   $retval$0 = $div;
	   STACKTOP = sp;return (+$retval$0);
	  }
	  $cmp17 = $retval$0$i > 0.0;
	  if ($cmp17) {
	   HEAP32[$signgamp>>2] = -1;
	   $t$0 = $retval$0$i;
	  } else {
	   $sub19 = -$retval$0$i;
	   $t$0 = $sub19;
	  }
	  $mul21 = $t$0 * $sub11;
	  $div22 = 3.14159274101257324219 / $mul21;
	  $call23 = (+Math_log((+$div22)));
	  $nadj$0 = $call23;$x$addr$1 = $sub11;
	 } else {
	  $nadj$0 = 0.0;$x$addr$1 = $x;
	 }
	 L29: do {
	  if ((($and|0) == 1065353216) | (($and|0) == 1073741824)) {
	   $r$1 = 0.0;
	  } else {
	   $cmp29 = ($and>>>0)<(1073741824);
	   if (!($cmp29)) {
	    $cmp146 = ($and>>>0)<(1090519040);
	    if (!($cmp146)) {
	     $cmp197 = ($and>>>0)<(1551892480);
	     $call200 = (+Math_log((+$x$addr$1)));
	     if ($cmp197) {
	      $div201 = 1.0 / $x$addr$1;
	      $mul202 = $div201 * $div201;
	      $mul203 = $mul202 * -0.00163092929869890213013;
	      $add204 = $mul203 + 8.36339895613491535186E-4;
	      $mul205 = $mul202 * $add204;
	      $add206 = $mul205 + -5.95187535509467124939E-4;
	      $mul207 = $mul202 * $add206;
	      $add208 = $mul207 + 7.93650571722537279129E-4;
	      $mul209 = $mul202 * $add208;
	      $add210 = $mul209 + -0.00277777784503996372223;
	      $mul211 = $mul202 * $add210;
	      $add212 = $mul211 + 0.0833333358168601989746;
	      $mul213 = $div201 * $add212;
	      $add214 = $mul213 + 0.418938547372817993164;
	      $sub215 = $x$addr$1 + -0.5;
	      $sub216 = $call200 + -1.0;
	      $mul217 = $sub215 * $sub216;
	      $add218 = $mul217 + $add214;
	      $r$1 = $add218;
	      break;
	     } else {
	      $sub221 = $call200 + -1.0;
	      $mul222 = $x$addr$1 * $sub221;
	      $r$1 = $mul222;
	      break;
	     }
	    }
	    $conv = (~~(($x$addr$1)));
	    $conv148 = (+($conv|0));
	    $sub149 = $x$addr$1 - $conv148;
	    $mul150 = $sub149 * 3.19475329888518899679E-5;
	    $add151 = $mul150 + 0.00184028455987572669983;
	    $mul152 = $sub149 * $add151;
	    $add153 = $mul152 + 0.0266422703862190246582;
	    $mul154 = $sub149 * $add153;
	    $add155 = $mul154 + 0.146350473165512084961;
	    $mul156 = $sub149 * $add155;
	    $add157 = $mul156 + 0.325778782367706298828;
	    $mul158 = $sub149 * $add157;
	    $add159 = $mul158 + 0.214982420206069946289;
	    $mul160 = $sub149 * $add159;
	    $add161 = $mul160 + -0.0772156640887260437012;
	    $mul162 = $sub149 * $add161;
	    $mul163 = $sub149 * 7.32668422642746008932E-6;
	    $add164 = $mul163 + 7.77942477725446224212E-4;
	    $mul165 = $sub149 * $add164;
	    $add166 = $mul165 + 0.0186459198594093322754;
	    $mul167 = $sub149 * $add166;
	    $add168 = $mul167 + 0.171933859586715698242;
	    $mul169 = $sub149 * $add168;
	    $add170 = $mul169 + 0.721935570240020751953;
	    $mul171 = $sub149 * $add170;
	    $add172 = $mul171 + 1.39200532436370849609;
	    $mul173 = $sub149 * $add172;
	    $add174 = $mul173 + 1.0;
	    $mul175 = $sub149 * 0.5;
	    $div176 = $mul162 / $add174;
	    $add177 = $mul175 + $div176;
	    switch ($conv|0) {
	    case 7:  {
	     $add179 = $sub149 + 6.0;
	     $z$0 = $add179;
	     label = 35;
	     break;
	    }
	    case 6:  {
	     $z$0 = 1.0;
	     label = 35;
	     break;
	    }
	    case 5:  {
	     $z$1 = 1.0;
	     label = 36;
	     break;
	    }
	    case 4:  {
	     $z$2 = 1.0;
	     label = 37;
	     break;
	    }
	    case 3:  {
	     $z$3 = 1.0;
	     break;
	    }
	    default: {
	     $r$1 = $add177;
	     break L29;
	    }
	    }
	    if ((label|0) == 35) {
	     $add182 = $sub149 + 5.0;
	     $mul183 = $add182 * $z$0;
	     $z$1 = $mul183;
	     label = 36;
	    }
	    if ((label|0) == 36) {
	     $add185 = $sub149 + 4.0;
	     $mul186 = $add185 * $z$1;
	     $z$2 = $mul186;
	     label = 37;
	    }
	    if ((label|0) == 37) {
	     $add188 = $sub149 + 3.0;
	     $mul189 = $add188 * $z$2;
	     $z$3 = $mul189;
	    }
	    $add191 = $sub149 + 2.0;
	    $mul192 = $add191 * $z$3;
	    $call193 = (+Math_log((+$mul192)));
	    $add194 = $add177 + $call193;
	    $r$1 = $add194;
	    break;
	   }
	   $cmp31 = ($and>>>0)<(1063675495);
	   do {
	    if ($cmp31) {
	     $call33 = (+Math_log((+$x$addr$1)));
	     $sub34 = -$call33;
	     $cmp35 = ($and>>>0)>(1060850207);
	     if ($cmp35) {
	      $$pn = 1.0;$r$0$ph = $sub34;
	      label = 29;
	     } else {
	      $cmp39 = ($and>>>0)>(1047343879);
	      if ($cmp39) {
	       $sub41 = $x$addr$1 + -0.461632132530212402344;
	       $r$0$ph133 = $sub34;$y$0$ph132 = $sub41;
	       label = 30;
	      } else {
	       $r$0 = $sub34;$y$0 = $x$addr$1;
	       label = 31;
	      }
	     }
	    } else {
	     $cmp46 = ($and>>>0)>(1071490583);
	     if ($cmp46) {
	      $$pn = 2.0;$r$0$ph = 0.0;
	      label = 29;
	     } else {
	      $cmp50 = ($and>>>0)>(1067296287);
	      if ($cmp50) {
	       $sub52 = $x$addr$1 + -1.46163213253021240234;
	       $r$0$ph133 = 0.0;$y$0$ph132 = $sub52;
	       label = 30;
	       break;
	      } else {
	       $sub54 = $x$addr$1 + -1.0;
	       $r$0 = 0.0;$y$0 = $sub54;
	       label = 31;
	       break;
	      }
	     }
	    }
	   } while(0);
	   if ((label|0) == 29) {
	    $y$0$ph = $$pn - $x$addr$1;
	    $mul58 = $y$0$ph * $y$0$ph;
	    $mul59 = $mul58 * 2.52144564001355320215E-5;
	    $add = $mul59 + 2.20862784772180020809E-4;
	    $mul60 = $mul58 * $add;
	    $add61 = $mul60 + 0.00119270768482238054276;
	    $mul62 = $mul58 * $add61;
	    $add63 = $mul62 + 0.00738555099815130233765;
	    $mul64 = $mul58 * $add63;
	    $add65 = $mul64 + 0.0673523023724555969238;
	    $mul66 = $mul58 * $add65;
	    $add67 = $mul66 + 0.0772156640887260437012;
	    $mul68 = $mul58 * 4.48640967078972607851E-5;
	    $add69 = $mul68 + 1.08011568954680114985E-4;
	    $mul70 = $mul58 * $add69;
	    $add71 = $mul70 + 5.10069774463772773743E-4;
	    $mul72 = $mul58 * $add71;
	    $add73 = $mul72 + 0.00289051374420523643494;
	    $mul74 = $mul58 * $add73;
	    $add75 = $mul74 + 0.0205808077007532119751;
	    $mul76 = $mul58 * $add75;
	    $add77 = $mul76 + 0.322467029094696044922;
	    $mul78 = $mul58 * $add77;
	    $mul79 = $y$0$ph * $add67;
	    $add80 = $mul79 + $mul78;
	    $mul81 = $y$0$ph * 0.5;
	    $sub82 = $add80 - $mul81;
	    $add83 = $r$0$ph + $sub82;
	    $r$1 = $add83;
	    break;
	   }
	   else if ((label|0) == 30) {
	    $mul85 = $y$0$ph132 * $y$0$ph132;
	    $mul86 = $y$0$ph132 * $mul85;
	    $mul87 = $mul86 * 3.15632059937343001366E-4;
	    $add88 = $mul87 + -0.00140346470288932323456;
	    $mul89 = $mul86 * $add88;
	    $add90 = $mul89 + 0.00610053865239024162292;
	    $mul91 = $mul86 * $add90;
	    $add92 = $mul91 + -0.0327885411679744720459;
	    $mul93 = $mul86 * $add92;
	    $add94 = $mul93 + 0.483836114406585693359;
	    $mul95 = $mul86 * -3.12754156766459345818E-4;
	    $add96 = $mul95 + 8.81081854458898305893E-4;
	    $mul97 = $mul86 * $add96;
	    $add98 = $mul97 + -0.00368452025577425956726;
	    $mul99 = $mul86 * $add98;
	    $add100 = $mul99 + 0.0179706756025552749634;
	    $mul101 = $mul86 * $add100;
	    $add102 = $mul101 + -0.147587716579437255859;
	    $mul103 = $mul86 * 3.35529184667393565178E-4;
	    $add104 = $mul103 + -5.38595311809331178665E-4;
	    $mul105 = $mul86 * $add104;
	    $add106 = $mul105 + 0.0022596477065235376358;
	    $mul107 = $mul86 * $add106;
	    $add108 = $mul107 + -0.0103142242878675460815;
	    $mul109 = $mul86 * $add108;
	    $add110 = $mul109 + 0.0646249428391456604004;
	    $mul111 = $mul85 * $add94;
	    $mul112 = $y$0$ph132 * $add110;
	    $add113 = $add102 + $mul112;
	    $mul114 = $mul86 * $add113;
	    $sub115 = 6.69710065182016478502E-9 - $mul114;
	    $sub116 = $mul111 - $sub115;
	    $add117 = $sub116 + -0.121486283838748931885;
	    $add118 = $r$0$ph133 + $add117;
	    $r$1 = $add118;
	    break;
	   }
	   else if ((label|0) == 31) {
	    $mul120 = $y$0 * 0.013381091877818107605;
	    $add121 = $mul120 + 0.228963732719421386719;
	    $mul122 = $y$0 * $add121;
	    $add123 = $mul122 + 0.977717518806457519531;
	    $mul124 = $y$0 * $add123;
	    $add125 = $mul124 + 1.45492255687713623047;
	    $mul126 = $y$0 * $add125;
	    $add127 = $mul126 + 0.632827043533325195313;
	    $mul128 = $y$0 * $add127;
	    $add129 = $mul128 + -0.0772156640887260437012;
	    $mul130 = $y$0 * $add129;
	    $mul131 = $y$0 * 0.00321709248237311840057;
	    $add132 = $mul131 + 0.10422264784574508667;
	    $mul133 = $y$0 * $add132;
	    $add134 = $mul133 + 0.769285142421722412109;
	    $mul135 = $y$0 * $add134;
	    $add136 = $mul135 + 2.12848973274230957031;
	    $mul137 = $y$0 * $add136;
	    $add138 = $mul137 + 2.45597791671752929688;
	    $mul139 = $y$0 * $add138;
	    $add140 = $mul139 + 1.0;
	    $mul141 = $y$0 * -0.5;
	    $div142 = $mul130 / $add140;
	    $add143 = $mul141 + $div142;
	    $add144 = $r$0 + $add143;
	    $r$1 = $add144;
	    break;
	   }
	  }
	 } while(0);
	 if (!($tobool)) {
	  $retval$0 = $r$1;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $sub229 = $nadj$0 - $r$1;
	 $retval$0 = $sub229;
	 STACKTOP = sp;return (+$retval$0);
	}
	function ___lgammal_r($x,$sg) {
	 $x = +$x;
	 $sg = $sg|0;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+___lgamma_r($x,$sg));
	 STACKTOP = sp;return (+$call);
	}
	function _lgammal($x) {
	 $x = +$x;
	 var $call$i = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call$i = (+___lgamma_r($x,152288));
	 STACKTOP = sp;return (+$call$i);
	}
	function _scalbnf($x,$n) {
	 $x = +$x;
	 $n = $n|0;
	 var $$add14 = 0, $$sub4 = 0, $0 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp15 = 0, $cmp5 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul22 = 0.0, $mul3 = 0.0, $n$addr$0 = 0, $shl = 0, $sub = 0;
	 var $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($n|0)>(127);
	 if ($cmp) {
	  $mul = $x * 1.70141183460469231732E+38;
	  $sub = (($n) + -127)|0;
	  $cmp1 = ($sub|0)>(127);
	  if ($cmp1) {
	   $mul3 = $mul * 1.70141183460469231732E+38;
	   $sub4 = (($n) + -254)|0;
	   $cmp5 = ($sub4|0)>(127);
	   $$sub4 = $cmp5 ? 127 : $sub4;
	   $n$addr$0 = $$sub4;$y$0 = $mul3;
	  } else {
	   $n$addr$0 = $sub;$y$0 = $mul;
	  }
	 } else {
	  $cmp8 = ($n|0)<(-126);
	  if ($cmp8) {
	   $mul10 = $x * 1.17549435082228750797E-38;
	   $add = (($n) + 126)|0;
	   $cmp11 = ($add|0)<(-126);
	   if ($cmp11) {
	    $mul13 = $mul10 * 1.17549435082228750797E-38;
	    $add14 = (($n) + 252)|0;
	    $cmp15 = ($add14|0)<(-126);
	    $$add14 = $cmp15 ? -126 : $add14;
	    $n$addr$0 = $$add14;$y$0 = $mul13;
	   } else {
	    $n$addr$0 = $add;$y$0 = $mul10;
	   }
	  } else {
	   $n$addr$0 = $n;$y$0 = $x;
	  }
	 }
	 $add21 = $n$addr$0 << 23;
	 $shl = (($add21) + 1065353216)|0;
	 $0 = (HEAP32[tempDoublePtr>>2]=$shl,+HEAPF32[tempDoublePtr>>2]);
	 $mul22 = $y$0 * $0;
	 STACKTOP = sp;return (+$mul22);
	}
	function _tgamma($x) {
	 $x = +$x;
	 var $$ = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $__x = 0.0, $add = 0.0, $add$1$i = 0.0, $add$10$i = 0.0, $add$11$i = 0.0, $add$12$i = 0.0, $add$2$i = 0.0, $add$3$i = 0.0, $add$4$i = 0.0, $add$5$i = 0.0, $add$6$i = 0.0, $add$7$i = 0.0, $add$8$i = 0.0;
	 var $add$9$i = 0.0, $add$i = 0.0, $add$i36 = 0, $add12$1$i = 0.0, $add12$10$i = 0.0, $add12$11$i = 0.0, $add12$12$i = 0.0, $add12$2$i = 0.0, $add12$3$i = 0.0, $add12$4$i = 0.0, $add12$5$i = 0.0, $add12$6$i = 0.0, $add12$7$i = 0.0, $add12$8$i = 0.0, $add12$9$i = 0.0, $add12$i = 0.0, $add39 = 0.0, $add4$1$i = 0.0, $add4$10$i = 0.0, $add4$11$i = 0.0;
	 var $add4$12$i = 0.0, $add4$2$i = 0.0, $add4$3$i = 0.0, $add4$4$i = 0.0, $add4$5$i = 0.0, $add4$6$i = 0.0, $add4$7$i = 0.0, $add4$8$i = 0.0, $add4$9$i = 0.0, $add4$i = 0.0, $add66 = 0.0, $add9$1$i = 0.0, $add9$10$i = 0.0, $add9$11$i = 0.0, $add9$12$i = 0.0, $add9$2$i = 0.0, $add9$3$i = 0.0, $add9$4$i = 0.0, $add9$5$i = 0.0, $add9$6$i = 0.0;
	 var $add9$7$i = 0.0, $add9$8$i = 0.0, $add9$9$i = 0.0, $add9$i = 0.0, $arrayidx = 0, $call = 0.0, $call$i = 0.0, $call12$i = 0.0, $call14$i = 0.0, $call29 = 0.0, $call51 = 0.0, $call7$i = 0.0, $call9$i = 0.0, $cmp = 0, $cmp$i = 0, $cmp14 = 0, $cmp20 = 0, $cmp30 = 0, $cmp40 = 0, $cmp5 = 0;
	 var $cmp53 = 0, $cmp9 = 0, $cond = 0.0, $conv = 0, $conv$i = 0, $conv17 = 0, $conv26 = 0.0, $conv3$i = 0.0, $den$2$i = 0.0, $div = 0.0, $div$1$i = 0.0, $div$10$i = 0.0, $div$11$i = 0.0, $div$12$i = 0.0, $div$2$i = 0.0, $div$3$i = 0.0, $div$4$i = 0.0, $div$5$i = 0.0, $div$6$i = 0.0, $div$7$i = 0.0;
	 var $div$8$i = 0.0, $div$9$i = 0.0, $div$i = 0.0, $div$i37 = 0, $div10$1$i = 0.0, $div10$10$i = 0.0, $div10$11$i = 0.0, $div10$12$i = 0.0, $div10$2$i = 0.0, $div10$3$i = 0.0, $div10$4$i = 0.0, $div10$5$i = 0.0, $div10$6$i = 0.0, $div10$7$i = 0.0, $div10$8$i = 0.0, $div10$9$i = 0.0, $div15$i = 0.0, $div25 = 0.0, $div59 = 0.0, $div65 = 0.0;
	 var $dy$0 = 0.0, $dy$1 = 0.0, $mul = 0.0, $mul$1$i = 0.0, $mul$10$i = 0.0, $mul$11$i = 0.0, $mul$12$i = 0.0, $mul$2$i = 0.0, $mul$3$i = 0.0, $mul$4$i = 0.0, $mul$5$i = 0.0, $mul$6$i = 0.0, $mul$7$i = 0.0, $mul$8$i = 0.0, $mul$9$i = 0.0, $mul$i = 0.0, $mul$i35 = 0.0, $mul1$i = 0.0, $mul2$1$i = 0.0, $mul2$10$i = 0.0;
	 var $mul2$11$i = 0.0, $mul2$12$i = 0.0, $mul2$2$i = 0.0, $mul2$3$i = 0.0, $mul2$4$i = 0.0, $mul2$5$i = 0.0, $mul2$6$i = 0.0, $mul2$7$i = 0.0, $mul2$8$i = 0.0, $mul2$9$i = 0.0, $mul2$i = 0.0, $mul28 = 0.0, $mul35 = 0.0, $mul4$i = 0.0, $mul52 = 0.0, $mul57 = 0.0, $mul58 = 0.0, $mul6$i = 0.0, $mul63 = 0.0, $mul64 = 0.0;
	 var $mul67 = 0.0, $mul68 = 0.0, $mul69 = 0.0, $num$2$i = 0.0, $r$0 = 0.0, $retval$0 = 0.0, $retval$0$i = 0.0, $sub = 0, $sub$i = 0.0, $sub11$i = 0.0, $sub15$i = 0.0, $sub38 = 0.0, $sub43 = 0.0, $sub44 = 0.0, $sub45 = 0.0, $sub46 = 0.0, $sub48 = 0.0, $sub5$i = 0.0, $sub50 = 0.0, $sub60 = 0.0;
	 var $sub61 = 0.0, $tobool = 0, $tobool23 = 0, $z$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $conv = $1 & 2147483647;
	 $2 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
	 $3 = tempRet0;
	 $cmp = ($conv>>>0)>(2146435071);
	 if ($cmp) {
	  $add = $x + inf;
	  $retval$0 = $add;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $cmp5 = ($conv>>>0)<(1016070144);
	 if ($cmp5) {
	  $div = 1.0 / $x;
	  $retval$0 = $div;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $call = (+Math_floor((+$x)));
	 $cmp9 = $call == $x;
	 if ($cmp9) {
	  $tobool = ($2|0)==(0);
	  if (!($tobool)) {
	   $retval$0 = nan;
	   STACKTOP = sp;return (+$retval$0);
	  }
	  $cmp14 = !($x <= 23.0);
	  if (!($cmp14)) {
	   $conv17 = (~~(($x)));
	   $sub = (($conv17) + -1)|0;
	   $arrayidx = (152296 + ($sub<<3)|0);
	   $4 = +HEAPF64[$arrayidx>>3];
	   $retval$0 = $4;
	   STACKTOP = sp;return (+$retval$0);
	  }
	 }
	 $cmp20 = ($conv>>>0)>(1080492031);
	 $tobool23 = ($2|0)!=(0);
	 if ($cmp20) {
	  if ($tobool23) {
	   $div25 = 1.17549435082228750797E-38 / $x;
	   $conv26 = $div25;
	   $__x = $conv26;
	   $mul = $call * 0.5;
	   $mul28 = $x * 0.5;
	   $call29 = (+Math_floor((+$mul28)));
	   $cmp30 = $mul == $call29;
	   $$ = $cmp30 ? 0.0 : -0.0;
	   $retval$0 = $$;
	   STACKTOP = sp;return (+$retval$0);
	  } else {
	   $mul35 = $x * 8.98846567431157953864E+307;
	   $retval$0 = $mul35;
	   STACKTOP = sp;return (+$retval$0);
	  }
	 }
	 if ($tobool23) {
	  $sub38 = -$x;
	  $cond = $sub38;
	 } else {
	  $cond = $x;
	 }
	 $add39 = $cond + 5.52468004077672958374;
	 $cmp40 = $cond > 5.52468004077672958374;
	 if ($cmp40) {
	  $sub43 = $add39 - $cond;
	  $sub44 = $sub43 + -5.52468004077672958374;
	  $dy$0 = $sub44;
	 } else {
	  $sub45 = $add39 + -5.52468004077672958374;
	  $sub46 = $sub45 - $cond;
	  $dy$0 = $sub46;
	 }
	 $sub48 = $cond + -0.5;
	 $cmp$i = $cond < 8.0;
	 if ($cmp$i) {
	  $mul$i = $cond * 0.0;
	  $add$i = $mul$i + 2.50662827463100024161;
	  $add4$i = $mul$i + 1.0;
	  $mul$1$i = $cond * $add$i;
	  $add$1$i = $mul$1$i + 210.824277751579359119;
	  $mul2$1$i = $cond * $add4$i;
	  $add4$1$i = $mul2$1$i + 66.0;
	  $mul$2$i = $cond * $add$1$i;
	  $add$2$i = $mul$2$i + 8071.67200236581629724;
	  $mul2$2$i = $cond * $add4$1$i;
	  $add4$2$i = $mul2$2$i + 1925.0;
	  $mul$3$i = $cond * $add$2$i;
	  $add$3$i = $mul$3$i + 186056.26539522348321;
	  $mul2$3$i = $cond * $add4$2$i;
	  $add4$3$i = $mul2$3$i + 32670.0;
	  $mul$4$i = $cond * $add$3$i;
	  $add$4$i = $mul$4$i + 2876370.62893537245691;
	  $mul2$4$i = $cond * $add4$3$i;
	  $add4$4$i = $mul2$4$i + 357423.0;
	  $mul$5$i = $cond * $add$4$i;
	  $add$5$i = $mul$5$i + 31426415.5854001939297;
	  $mul2$5$i = $cond * $add4$4$i;
	  $add4$5$i = $mul2$5$i + 2637558.0;
	  $mul$6$i = $cond * $add$5$i;
	  $add$6$i = $mul$6$i + 248874557.862054169178;
	  $mul2$6$i = $cond * $add4$5$i;
	  $add4$6$i = $mul2$6$i + 13339535.0;
	  $mul$7$i = $cond * $add$6$i;
	  $add$7$i = $mul$7$i + 1439720407.31172156334;
	  $mul2$7$i = $cond * $add4$6$i;
	  $add4$7$i = $mul2$7$i + 45995730.0;
	  $mul$8$i = $cond * $add$7$i;
	  $add$8$i = $mul$8$i + 6039542586.35202789307;
	  $mul2$8$i = $cond * $add4$7$i;
	  $add4$8$i = $mul2$8$i + 105258076.0;
	  $mul$9$i = $cond * $add$8$i;
	  $add$9$i = $mul$9$i + 17921034426.0372085571;
	  $mul2$9$i = $cond * $add4$8$i;
	  $add4$9$i = $mul2$9$i + 150917976.0;
	  $mul$10$i = $cond * $add$9$i;
	  $add$10$i = $mul$10$i + 35711959237.3556671143;
	  $mul2$10$i = $cond * $add4$9$i;
	  $add4$10$i = $mul2$10$i + 120543840.0;
	  $mul$11$i = $cond * $add$10$i;
	  $add$11$i = $mul$11$i + 42919803642.6491012573;
	  $mul2$11$i = $cond * $add4$10$i;
	  $add4$11$i = $mul2$11$i + 39916800.0;
	  $mul$12$i = $cond * $add$11$i;
	  $add$12$i = $mul$12$i + 23531376880.4107589722;
	  $mul2$12$i = $cond * $add4$11$i;
	  $add4$12$i = $mul2$12$i + 0.0;
	  $den$2$i = $add4$12$i;$num$2$i = $add$12$i;
	 } else {
	  $div$i = 0.0 / $cond;
	  $add9$i = $div$i + 23531376880.4107589722;
	  $add12$i = $div$i + 0.0;
	  $div$1$i = $add9$i / $cond;
	  $add9$1$i = $div$1$i + 42919803642.6491012573;
	  $div10$1$i = $add12$i / $cond;
	  $add12$1$i = $div10$1$i + 39916800.0;
	  $div$2$i = $add9$1$i / $cond;
	  $add9$2$i = $div$2$i + 35711959237.3556671143;
	  $div10$2$i = $add12$1$i / $cond;
	  $add12$2$i = $div10$2$i + 120543840.0;
	  $div$3$i = $add9$2$i / $cond;
	  $add9$3$i = $div$3$i + 17921034426.0372085571;
	  $div10$3$i = $add12$2$i / $cond;
	  $add12$3$i = $div10$3$i + 150917976.0;
	  $div$4$i = $add9$3$i / $cond;
	  $add9$4$i = $div$4$i + 6039542586.35202789307;
	  $div10$4$i = $add12$3$i / $cond;
	  $add12$4$i = $div10$4$i + 105258076.0;
	  $div$5$i = $add9$4$i / $cond;
	  $add9$5$i = $div$5$i + 1439720407.31172156334;
	  $div10$5$i = $add12$4$i / $cond;
	  $add12$5$i = $div10$5$i + 45995730.0;
	  $div$6$i = $add9$5$i / $cond;
	  $add9$6$i = $div$6$i + 248874557.862054169178;
	  $div10$6$i = $add12$5$i / $cond;
	  $add12$6$i = $div10$6$i + 13339535.0;
	  $div$7$i = $add9$6$i / $cond;
	  $add9$7$i = $div$7$i + 31426415.5854001939297;
	  $div10$7$i = $add12$6$i / $cond;
	  $add12$7$i = $div10$7$i + 2637558.0;
	  $div$8$i = $add9$7$i / $cond;
	  $add9$8$i = $div$8$i + 2876370.62893537245691;
	  $div10$8$i = $add12$7$i / $cond;
	  $add12$8$i = $div10$8$i + 357423.0;
	  $div$9$i = $add9$8$i / $cond;
	  $add9$9$i = $div$9$i + 186056.26539522348321;
	  $div10$9$i = $add12$8$i / $cond;
	  $add12$9$i = $div10$9$i + 32670.0;
	  $div$10$i = $add9$9$i / $cond;
	  $add9$10$i = $div$10$i + 8071.67200236581629724;
	  $div10$10$i = $add12$9$i / $cond;
	  $add12$10$i = $div10$10$i + 1925.0;
	  $div$11$i = $add9$10$i / $cond;
	  $add9$11$i = $div$11$i + 210.824277751579359119;
	  $div10$11$i = $add12$10$i / $cond;
	  $add12$11$i = $div10$11$i + 66.0;
	  $div$12$i = $add9$11$i / $cond;
	  $add9$12$i = $div$12$i + 2.50662827463100024161;
	  $div10$12$i = $add12$11$i / $cond;
	  $add12$12$i = $div10$12$i + 1.0;
	  $den$2$i = $add12$12$i;$num$2$i = $add9$12$i;
	 }
	 $div15$i = $num$2$i / $den$2$i;
	 $sub50 = -$add39;
	 $call51 = (+Math_exp((+$sub50)));
	 $mul52 = $div15$i * $call51;
	 $cmp53 = $x < 0.0;
	 if ($cmp53) {
	  $mul$i35 = $cond * 0.5;
	  $call$i = (+Math_floor((+$mul$i35)));
	  $sub$i = $mul$i35 - $call$i;
	  $mul1$i = $sub$i * 2.0;
	  $mul2$i = $mul1$i * 4.0;
	  $conv$i = (~~(($mul2$i)));
	  $add$i36 = (($conv$i) + 1)|0;
	  $div$i37 = (($add$i36|0) / 2)&-1;
	  $conv3$i = (+($div$i37|0));
	  $mul4$i = $conv3$i * 0.5;
	  $sub5$i = $mul1$i - $mul4$i;
	  $mul6$i = $sub5$i * 3.141592653589793116;
	  if ((($div$i37|0) == 1)) {
	   $call9$i = (+___cos($mul6$i,0.0));
	   $retval$0$i = $call9$i;
	  } else if ((($div$i37|0) == 2)) {
	   $sub11$i = -$mul6$i;
	   $call12$i = (+___sin($sub11$i,0.0,0));
	   $retval$0$i = $call12$i;
	  } else if ((($div$i37|0) == 3)) {
	   $call14$i = (+___cos($mul6$i,0.0));
	   $sub15$i = -$call14$i;
	   $retval$0$i = $sub15$i;
	  } else {
	   $call7$i = (+___sin($mul6$i,0.0,0));
	   $retval$0$i = $call7$i;
	  }
	  $mul57 = $cond * $retval$0$i;
	  $mul58 = $mul52 * $mul57;
	  $div59 = -3.141592653589793116 / $mul58;
	  $sub60 = -$dy$0;
	  $sub61 = -$sub48;
	  $dy$1 = $sub60;$r$0 = $div59;$z$0 = $sub61;
	 } else {
	  $dy$1 = $dy$0;$r$0 = $mul52;$z$0 = $sub48;
	 }
	 $mul63 = $dy$1 * 6.02468004077672958374;
	 $mul64 = $mul63 * $r$0;
	 $div65 = $mul64 / $add39;
	 $add66 = $r$0 + $div65;
	 $mul67 = $z$0 * 0.5;
	 $5 = (+Math_pow((+$add39),(+$mul67)));
	 $mul68 = $add66 * $5;
	 $mul69 = $5 * $mul68;
	 $retval$0 = $mul69;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _tgammaf($x) {
	 $x = +$x;
	 var $call = 0.0, $conv = 0.0, $conv1 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $conv = $x;
	 $call = (+_tgamma($conv));
	 $conv1 = $call;
	 STACKTOP = sp;return (+$conv1);
	}
	function _tgammal($x) {
	 $x = +$x;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+_tgamma($x));
	 STACKTOP = sp;return (+$call);
	}
	function _ffs($i) {
	 $i = $i|0;
	 var $and$i = 0, $and3$i = 0, $cond = 0, $inc$i = 0, $lnot$i = 0, $lnot4$i = 0, $nTrailingZeros$06$i = 0, $phitmp = 0, $shr$i = 0, $tobool = 0, $x$addr$05$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($i|0)==(0);
	 if ($tobool) {
	  $cond = 0;
	 } else {
	  $and3$i = $i & 1;
	  $lnot4$i = ($and3$i|0)==(0);
	  if ($lnot4$i) {
	   $nTrailingZeros$06$i = 0;$x$addr$05$i = $i;
	   while(1) {
	    $inc$i = (($nTrailingZeros$06$i) + 1)|0;
	    $shr$i = $x$addr$05$i >>> 1;
	    $and$i = $shr$i & 1;
	    $lnot$i = ($and$i|0)==(0);
	    if ($lnot$i) {
	     $nTrailingZeros$06$i = $inc$i;$x$addr$05$i = $shr$i;
	    } else {
	     break;
	    }
	   }
	   $phitmp = (($nTrailingZeros$06$i) + 2)|0;
	   $cond = $phitmp;
	  } else {
	   $cond = 1;
	  }
	 }
	 STACKTOP = sp;return ($cond|0);
	}
	function _getopt($argc,$argv,$optstring) {
	 $argc = $argc|0;
	 $argv = $argv|0;
	 $optstring = $optstring|0;
	 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
	 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr35 = 0, $add$ptr42 = 0, $add$ptr97 = 0, $add49 = 0, $add69 = 0, $arrayidx = 0, $arrayidx11 = 0, $arrayidx21 = 0, $arrayidx34 = 0;
	 var $arrayidx37 = 0, $arrayidx70 = 0, $arrayidx96 = 0, $c = 0, $call = 0, $call43 = 0, $call4324 = 0, $call4327 = 0, $call62 = 0, $call88 = 0, $cmp = 0, $cmp30 = 0, $cmp45 = 0, $cmp47 = 0, $cmp50 = 0, $cmp55 = 0, $cmp7 = 0, $cmp72 = 0, $cmp75 = 0, $cmp80 = 0;
	 var $cond = 0, $d = 0, $i$0$lcssa = 0, $i$026 = 0, $inc = 0, $inc40 = 0, $inc95 = 0, $k$0 = 0, $or$cond = 0, $or$cond1 = 0, $retval$0 = 0, $tobool = 0, $tobool1 = 0, $tobool22 = 0, $tobool25 = 0, $tobool3 = 0, $tobool38 = 0, $tobool44 = 0, $tobool4425 = 0, $tobool58 = 0;
	 var $tobool84 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c = sp + 4|0;
	 $d = sp;
	 $0 = HEAP32[152480>>2]|0;
	 $tobool = ($0|0)==(0);
	 $1 = HEAP32[152496>>2]|0;
	 $tobool1 = ($1|0)!=(0);
	 $or$cond = $tobool | $tobool1;
	 if ($or$cond) {
	  HEAP32[152496>>2] = 0;
	  HEAP32[152504>>2] = 0;
	  HEAP32[152480>>2] = 1;
	  $2 = 1;
	 } else {
	  $2 = $0;
	 }
	 $cmp = ($2|0)<($argc|0);
	 if (!($cmp)) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx = (($argv) + ($2<<2)|0);
	 $3 = HEAP32[$arrayidx>>2]|0;
	 $tobool3 = ($3|0)==(0|0);
	 if ($tobool3) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $4 = HEAP8[$3>>0]|0;
	 $cmp7 = ($4<<24>>24)==(45);
	 if (!($cmp7)) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx11 = (($3) + 1|0);
	 $5 = HEAP8[$arrayidx11>>0]|0;
	 if ((($5<<24>>24) == 45)) {
	  label = 7;
	 } else if ((($5<<24>>24) == 0)) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 if ((label|0) == 7) {
	  $arrayidx21 = (($3) + 2|0);
	  $6 = HEAP8[$arrayidx21>>0]|0;
	  $tobool22 = ($6<<24>>24)==(0);
	  if ($tobool22) {
	   $inc = (($2) + 1)|0;
	   HEAP32[152480>>2] = $inc;
	   $retval$0 = -1;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 $7 = HEAP32[152504>>2]|0;
	 $tobool25 = ($7|0)==(0);
	 if ($tobool25) {
	  HEAP32[152504>>2] = 1;
	  $8 = 1;
	 } else {
	  $8 = $7;
	 }
	 $add$ptr = (($3) + ($8)|0);
	 $call = (_mbtowc($c,$add$ptr,4)|0);
	 $cmp30 = ($call|0)<(0);
	 if ($cmp30) {
	  HEAP32[$c>>2] = 65533;
	  $12 = 65533;$k$0 = 1;
	 } else {
	  $$pre = HEAP32[$c>>2]|0;
	  $12 = $$pre;$k$0 = $call;
	 }
	 $9 = HEAP32[152480>>2]|0;
	 $arrayidx34 = (($argv) + ($9<<2)|0);
	 $10 = HEAP32[$arrayidx34>>2]|0;
	 $11 = HEAP32[152504>>2]|0;
	 $add$ptr35 = (($10) + ($11)|0);
	 HEAP32[152512>>2] = $12;
	 $add = (($11) + ($k$0))|0;
	 HEAP32[152504>>2] = $add;
	 $arrayidx37 = (($10) + ($add)|0);
	 $13 = HEAP8[$arrayidx37>>0]|0;
	 $tobool38 = ($13<<24>>24)==(0);
	 if ($tobool38) {
	  $inc40 = (($9) + 1)|0;
	  HEAP32[152480>>2] = $inc40;
	  HEAP32[152504>>2] = 0;
	 }
	 $call4324 = (_mbtowc($d,$optstring,4)|0);
	 $tobool4425 = ($call4324|0)==(0);
	 L30: do {
	  if ($tobool4425) {
	   $i$0$lcssa = 0;
	  } else {
	   $call4327 = $call4324;$i$026 = 0;
	   while(1) {
	    $14 = HEAP32[$d>>2]|0;
	    $15 = HEAP32[$c>>2]|0;
	    $cmp45 = ($14|0)==($15|0);
	    if ($cmp45) {
	     $i$0$lcssa = $i$026;
	     break L30;
	    }
	    $cmp47 = ($call4327|0)<(1);
	    $cond = $cmp47 ? 1 : $call4327;
	    $add49 = (($cond) + ($i$026))|0;
	    $add$ptr42 = (($optstring) + ($add49)|0);
	    $call43 = (_mbtowc($d,$add$ptr42,4)|0);
	    $tobool44 = ($call43|0)==(0);
	    if ($tobool44) {
	     $i$0$lcssa = $add49;
	     break;
	    } else {
	     $call4327 = $call43;$i$026 = $add49;
	    }
	   }
	  }
	 } while(0);
	 $16 = HEAP32[$d>>2]|0;
	 $17 = HEAP32[$c>>2]|0;
	 $cmp50 = ($16|0)==($17|0);
	 if (!($cmp50)) {
	  $18 = HEAP8[$optstring>>0]|0;
	  $cmp55 = ($18<<24>>24)!=(58);
	  $19 = HEAP32[152488>>2]|0;
	  $tobool58 = ($19|0)!=(0);
	  $or$cond1 = $cmp55 & $tobool58;
	  if (!($or$cond1)) {
	   $retval$0 = 63;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $20 = HEAP32[$argv>>2]|0;
	  $call62 = (_strlen(($20|0))|0);
	  (_write(2,($20|0),($call62|0))|0);
	  (_write(2,(152520|0),18)|0);
	  (_write(2,($add$ptr35|0),($k$0|0))|0);
	  (_write(2,(152544|0),1)|0);
	  $retval$0 = 63;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $add69 = (($i$0$lcssa) + 1)|0;
	 $arrayidx70 = (($optstring) + ($add69)|0);
	 $21 = HEAP8[$arrayidx70>>0]|0;
	 $cmp72 = ($21<<24>>24)==(58);
	 if (!($cmp72)) {
	  $retval$0 = $16;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $22 = HEAP32[152480>>2]|0;
	 $cmp75 = ($22|0)<($argc|0);
	 if ($cmp75) {
	  $inc95 = (($22) + 1)|0;
	  HEAP32[152480>>2] = $inc95;
	  $arrayidx96 = (($argv) + ($22<<2)|0);
	  $26 = HEAP32[$arrayidx96>>2]|0;
	  $27 = HEAP32[152504>>2]|0;
	  $add$ptr97 = (($26) + ($27)|0);
	  HEAP32[152584>>2] = $add$ptr97;
	  HEAP32[152504>>2] = 0;
	  $retval$0 = $16;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $23 = HEAP8[$optstring>>0]|0;
	 $cmp80 = ($23<<24>>24)==(58);
	 if ($cmp80) {
	  $retval$0 = 58;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $24 = HEAP32[152488>>2]|0;
	 $tobool84 = ($24|0)==(0);
	 if ($tobool84) {
	  $retval$0 = 63;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $25 = HEAP32[$argv>>2]|0;
	 $call88 = (_strlen(($25|0))|0);
	 (_write(2,($25|0),($call88|0))|0);
	 (_write(2,(152552|0),31)|0);
	 (_write(2,($add$ptr35|0),($k$0|0))|0);
	 (_write(2,(152544|0),1)|0);
	 $retval$0 = 63;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _getopt_long($argc,$argv,$optstring,$longopts,$idx) {
	 $argc = $argc|0;
	 $argv = $argv|0;
	 $optstring = $optstring|0;
	 $longopts = $longopts|0;
	 $idx = $idx|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (___getopt_long($argc,$argv,$optstring,$longopts,$idx,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function ___getopt_long($argc,$argv,$optstring,$longopts,$idx,$longonly) {
	 $argc = $argc|0;
	 $argv = $argv|0;
	 $optstring = $optstring|0;
	 $longopts = $longopts|0;
	 $idx = $idx|0;
	 $longonly = $longonly|0;
	 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
	 var $9 = 0, $add$ptr68 = 0, $arrayidx = 0, $arrayidx18$phi$trans$insert = 0, $arrayidx24 = 0, $arrayidx74 = 0, $arrayidx9853 = 0, $call = 0, $cmp = 0, $cmp10054 = 0, $cmp44 = 0, $cmp61 = 0, $cmp7 = 0, $cmp71 = 0, $flag = 0, $has_arg = 0, $i$055 = 0, $inc = 0, $inc103 = 0, $inc81 = 0;
	 var $inc95 = 0, $incdec$ptr = 0, $incdec$ptr$arrayidx98 = 0, $incdec$ptr47 = 0, $incdec$ptr48 = 0, $name = 0, $name30$038 = 0, $opt$036 = 0, $opt$039 = 0, $or$cond = 0, $phitmp = 0, $retval$0 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool15 = 0, $tobool26 = 0, $tobool29 = 0, $tobool2951 = 0, $tobool3 = 0;
	 var $tobool41 = 0, $tobool4137 = 0, $tobool50 = 0, $tobool65 = 0, $tobool75 = 0, $tobool82 = 0, $tobool86 = 0, $val = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[152480>>2]|0;
	 $tobool = ($0|0)==(0);
	 $1 = HEAP32[152496>>2]|0;
	 $tobool1 = ($1|0)!=(0);
	 $or$cond = $tobool | $tobool1;
	 if ($or$cond) {
	  HEAP32[152496>>2] = 0;
	  HEAP32[152504>>2] = 0;
	  HEAP32[152480>>2] = 1;
	  $2 = 1;
	 } else {
	  $2 = $0;
	 }
	 $cmp = ($2|0)<($argc|0);
	 if (!($cmp)) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx = (($argv) + ($2<<2)|0);
	 $3 = HEAP32[$arrayidx>>2]|0;
	 $tobool3 = ($3|0)==(0|0);
	 if ($tobool3) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $4 = HEAP8[$3>>0]|0;
	 $cmp7 = ($4<<24>>24)==(45);
	 if (!($cmp7)) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $tobool11 = ($longonly|0)==(0);
	 $arrayidx18$phi$trans$insert = (($3) + 1|0);
	 $$pre = HEAP8[$arrayidx18$phi$trans$insert>>0]|0;
	 if ($tobool11) {
	  $phitmp = ($$pre<<24>>24)==(45);
	  if ($phitmp) {
	   $arrayidx24 = (($3) + 2|0);
	   $5 = HEAP8[$arrayidx24>>0]|0;
	   $tobool26 = ($5<<24>>24)==(0);
	   if (!($tobool26)) {
	    $7 = 45;
	    label = 10;
	   }
	  }
	 } else {
	  $tobool15 = ($$pre<<24>>24)==(0);
	  if (!($tobool15)) {
	   $7 = $$pre;
	   label = 10;
	  }
	 }
	 if ((label|0) == 10) {
	  $6 = HEAP32[$longopts>>2]|0;
	  $tobool2951 = ($6|0)==(0|0);
	  $arrayidx9853 = (($3) + 1|0);
	  $cmp10054 = ($7<<24>>24)==(45);
	  L19: do {
	   if (!($tobool2951)) {
	    $9 = $6;$i$055 = 0;
	    while(1) {
	     $incdec$ptr = (($3) + 2|0);
	     $incdec$ptr$arrayidx98 = $cmp10054 ? $incdec$ptr : $arrayidx9853;
	     $8 = HEAP8[$9>>0]|0;
	     $tobool4137 = ($8<<24>>24)==(0);
	     L22: do {
	      if ($tobool4137) {
	       $opt$036 = $incdec$ptr$arrayidx98;
	       label = 15;
	      } else {
	       $$pr = $8;$name30$038 = $9;$opt$039 = $incdec$ptr$arrayidx98;
	       while(1) {
	        $10 = HEAP8[$opt$039>>0]|0;
	        $cmp44 = ($$pr<<24>>24)==($10<<24>>24);
	        if (!($cmp44)) {
	         break;
	        }
	        $incdec$ptr47 = (($name30$038) + 1|0);
	        $incdec$ptr48 = (($opt$039) + 1|0);
	        $11 = HEAP8[$incdec$ptr47>>0]|0;
	        $tobool41 = ($11<<24>>24)==(0);
	        if ($tobool41) {
	         $opt$036 = $incdec$ptr48;
	         label = 15;
	         break L22;
	        } else {
	         $$pr = $11;$name30$038 = $incdec$ptr47;$opt$039 = $incdec$ptr48;
	        }
	       }
	       $tobool50 = ($$pr<<24>>24)==(0);
	       if ($tobool50) {
	        $opt$036 = $opt$039;
	        label = 15;
	       }
	      }
	     } while(0);
	     if ((label|0) == 15) {
	      label = 0;
	      $12 = HEAP8[$opt$036>>0]|0;
	      if ((($12<<24>>24) == 61) | (($12<<24>>24) == 0)) {
	       $cmp61 = ($12<<24>>24)==(61);
	       $has_arg = ((($longopts) + ($i$055<<4)|0) + 4|0);
	       $13 = HEAP32[$has_arg>>2]|0;
	       if (!($cmp61)) {
	        label = 19;
	        break;
	       }
	       $tobool65 = ($13|0)==(0);
	       if (!($tobool65)) {
	        label = 18;
	        break;
	       }
	      }
	     }
	     $inc95 = (($i$055) + 1)|0;
	     $name = (($longopts) + ($inc95<<4)|0);
	     $18 = HEAP32[$name>>2]|0;
	     $tobool29 = ($18|0)==(0|0);
	     if ($tobool29) {
	      break L19;
	     } else {
	      $9 = $18;$i$055 = $inc95;
	     }
	    }
	    do {
	     if ((label|0) == 18) {
	      $add$ptr68 = (($opt$036) + 1|0);
	      HEAP32[152584>>2] = $add$ptr68;
	      $15 = $2;
	     }
	     else if ((label|0) == 19) {
	      $cmp71 = ($13|0)==(1);
	      if (!($cmp71)) {
	       HEAP32[152584>>2] = 0;
	       $15 = $2;
	       break;
	      }
	      $inc = (($2) + 1)|0;
	      HEAP32[152480>>2] = $inc;
	      $arrayidx74 = (($argv) + ($inc<<2)|0);
	      $14 = HEAP32[$arrayidx74>>2]|0;
	      HEAP32[152584>>2] = $14;
	      $tobool75 = ($14|0)==(0|0);
	      if ($tobool75) {
	       $retval$0 = 58;
	       STACKTOP = sp;return ($retval$0|0);
	      } else {
	       $15 = $inc;
	      }
	     }
	    } while(0);
	    $inc81 = (($15) + 1)|0;
	    HEAP32[152480>>2] = $inc81;
	    $tobool82 = ($idx|0)==(0|0);
	    if (!($tobool82)) {
	     HEAP32[$idx>>2] = $i$055;
	    }
	    $flag = ((($longopts) + ($i$055<<4)|0) + 8|0);
	    $16 = HEAP32[$flag>>2]|0;
	    $tobool86 = ($16|0)==(0|0);
	    $val = ((($longopts) + ($i$055<<4)|0) + 12|0);
	    $17 = HEAP32[$val>>2]|0;
	    if ($tobool86) {
	     $retval$0 = $17;
	     STACKTOP = sp;return ($retval$0|0);
	    }
	    HEAP32[$16>>2] = $17;
	    $retval$0 = 0;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  } while(0);
	  if ($cmp10054) {
	   $inc103 = (($2) + 1)|0;
	   HEAP32[152480>>2] = $inc103;
	   $retval$0 = 63;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 $call = (_getopt($argc,$argv,$optstring)|0);
	 $retval$0 = $call;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _getopt_long_only($argc,$argv,$optstring,$longopts,$idx) {
	 $argc = $argc|0;
	 $argv = $argv|0;
	 $optstring = $optstring|0;
	 $longopts = $longopts|0;
	 $idx = $idx|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (___getopt_long($argc,$argv,$optstring,$longopts,$idx,1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _btowc($c) {
	 $c = $c|0;
	 var $cmp = 0, $cond = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($c>>>0)<(128);
	 $cond = $cmp ? $c : -1;
	 STACKTOP = sp;return ($cond|0);
	}
	function _mblen($s,$n) {
	 $s = $s|0;
	 $n = $n|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_mbtowc(0,$s,$n)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _mbrlen($s,$n,$st) {
	 $s = $s|0;
	 $n = $n|0;
	 $st = $st|0;
	 var $call = 0, $cond = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($st|0)!=(0|0);
	 $cond = $tobool ? $st : 152800;
	 $call = (_mbrtowc(0,$s,$n,$cond)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _mbrtowc($wc,$src,$n,$st) {
	 $wc = $wc|0;
	 $src = $src|0;
	 $n = $n|0;
	 $st = $st|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $arrayidx = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $call = 0, $cmp = 0, $cmp22 = 0, $cmp53 = 0, $conv = 0, $conv31 = 0, $conv40 = 0, $conv51 = 0;
	 var $dec = 0, $dec43 = 0, $incdec$ptr = 0, $incdec$ptr39 = 0, $lnot$ext = 0, $n$addr$0 = 0, $n$addr$1 = 0, $or = 0, $or42 = 0, $retval$0 = 0, $s$0 = 0, $s$1 = 0, $shl = 0, $shr24 = 0, $shr35 = 0, $st$addr$0 = 0, $sub = 0, $sub32 = 0, $sub41 = 0, $sub47 = 0;
	 var $sub52 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool13 = 0, $tobool18 = 0, $tobool29 = 0, $tobool3 = 0, $tobool36 = 0, $tobool45 = 0, $tobool49 = 0, $tobool6 = 0, $wc$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $wc$addr = sp;
	 HEAP32[$wc$addr>>2] = $wc;
	 $tobool = ($st|0)==(0|0);
	 $st$addr$0 = $tobool ? 152808 : $st;
	 $0 = HEAP32[$st$addr$0>>2]|0;
	 $tobool1 = ($src|0)==(0|0);
	 L1: do {
	  if ($tobool1) {
	   $tobool3 = ($0|0)==(0);
	   if ($tobool3) {
	    $retval$0 = 0;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  } else {
	   $tobool6 = ($wc|0)==(0|0);
	   if ($tobool6) {
	    HEAP32[$wc$addr>>2] = $wc$addr;
	    $2 = $wc$addr;
	   } else {
	    $2 = $wc;
	   }
	   $tobool10 = ($n|0)==(0);
	   if ($tobool10) {
	    $retval$0 = -2;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $tobool13 = ($0|0)==(0);
	   do {
	    if ($tobool13) {
	     $1 = HEAP8[$src>>0]|0;
	     $conv = $1&255;
	     $cmp = ($1<<24>>24)>(-1);
	     if ($cmp) {
	      HEAP32[$2>>2] = $conv;
	      $tobool18 = ($1<<24>>24)!=(0);
	      $lnot$ext = $tobool18&1;
	      $retval$0 = $lnot$ext;
	      STACKTOP = sp;return ($retval$0|0);
	     } else {
	      $sub = (($conv) + -194)|0;
	      $cmp22 = ($sub>>>0)>(50);
	      if ($cmp22) {
	       break L1;
	      }
	      $incdec$ptr = (($src) + 1|0);
	      $arrayidx = (152592 + ($sub<<2)|0);
	      $3 = HEAP32[$arrayidx>>2]|0;
	      $dec = (($n) + -1)|0;
	      $c$0 = $3;$n$addr$0 = $dec;$s$0 = $incdec$ptr;
	      break;
	     }
	    } else {
	     $c$0 = $0;$n$addr$0 = $n;$s$0 = $src;
	    }
	   } while(0);
	   $tobool29 = ($n$addr$0|0)==(0);
	   L19: do {
	    if ($tobool29) {
	     $c$2 = $c$0;
	    } else {
	     $4 = HEAP8[$s$0>>0]|0;
	     $conv31 = $4&255;
	     $shr24 = $conv31 >>> 3;
	     $sub32 = (($shr24) + -16)|0;
	     $shr35 = $c$0 >> 26;
	     $add = (($shr24) + ($shr35))|0;
	     $or = $sub32 | $add;
	     $tobool36 = ($or>>>0)>(7);
	     if ($tobool36) {
	      break L1;
	     } else {
	      $5 = $4;$c$1 = $c$0;$n$addr$1 = $n$addr$0;$s$1 = $s$0;
	     }
	     while(1) {
	      $shl = $c$1 << 6;
	      $incdec$ptr39 = (($s$1) + 1|0);
	      $conv40 = $5&255;
	      $sub41 = (($conv40) + -128)|0;
	      $or42 = $sub41 | $shl;
	      $dec43 = (($n$addr$1) + -1)|0;
	      $tobool45 = ($or42|0)<(0);
	      if (!($tobool45)) {
	       break;
	      }
	      $tobool49 = ($dec43|0)==(0);
	      if ($tobool49) {
	       $c$2 = $or42;
	       break L19;
	      }
	      $6 = HEAP8[$incdec$ptr39>>0]|0;
	      $conv51 = $6&255;
	      $sub52 = (($conv51) + -128)|0;
	      $cmp53 = ($sub52>>>0)>(63);
	      if ($cmp53) {
	       break L1;
	      } else {
	       $5 = $6;$c$1 = $or42;$n$addr$1 = $dec43;$s$1 = $incdec$ptr39;
	      }
	     }
	     HEAP32[$st$addr$0>>2] = 0;
	     HEAP32[$2>>2] = $or42;
	     $sub47 = (($n) - ($dec43))|0;
	     $retval$0 = $sub47;
	     STACKTOP = sp;return ($retval$0|0);
	    }
	   } while(0);
	   HEAP32[$st$addr$0>>2] = $c$2;
	   $retval$0 = -2;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 } while(0);
	 HEAP32[$st$addr$0>>2] = 0;
	 $call = (___errno_location()|0);
	 HEAP32[$call>>2] = 84;
	 $retval$0 = -1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _mbsinit($st) {
	 $st = $st|0;
	 var $0 = 0, $1 = 0, $lnot = 0, $lor$ext = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($st|0)==(0|0);
	 if ($tobool) {
	  $1 = 1;
	 } else {
	  $0 = HEAP32[$st>>2]|0;
	  $lnot = ($0|0)==(0);
	  $1 = $lnot;
	 }
	 $lor$ext = $1&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
	 $wcs = $wcs|0;
	 $src = $src|0;
	 $n = $n|0;
	 $wn = $wn|0;
	 $st = $st|0;
	 var $$pr$pre = 0, $$pr67 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $add$ptr36 = 0, $add15 = 0, $add25 = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp3 = 0, $cnt$054 = 0, $cnt$1 = 0;
	 var $cnt$241 = 0, $cnt$3 = 0, $dec = 0, $div = 0, $inc = 0, $incdec$ptr = 0, $n$addr$056 = 0, $n$addr$1 = 0, $n$addr$243 = 0, $or$cond = 0, $or$cond34 = 0, $or$cond35 = 0, $or$cond3539 = 0, $or$cond52 = 0, $s = 0, $sub = 0, $sub13 = 0, $sub37 = 0, $tobool = 0, $tobool1 = 0;
	 var $tobool150 = 0, $tobool16 = 0, $tobool19 = 0, $tobool1937 = 0, $tobool2 = 0, $tobool21 = 0, $tobool2138 = 0, $tobool251 = 0, $tobool7 = 0, $wbuf = 0, $wcs$arraydecay = 0, $wn$ = 0, $wn$addr$0$div = 0, $wn$addr$053 = 0, $wn$addr$1 = 0, $wn$addr$2 = 0, $wn$addr$340 = 0, $ws$047 = 0, $ws$055 = 0, $ws$1 = 0;
	 var $ws$242 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $wbuf = sp + 8|0;
	 $s = sp;
	 $0 = HEAP32[$src>>2]|0;
	 HEAP32[$s>>2] = $0;
	 $tobool = ($wcs|0)!=(0|0);
	 $wn$ = $tobool ? $wn : 256;
	 $wcs$arraydecay = $tobool ? $wcs : $wbuf;
	 $tobool150 = ($0|0)==(0|0);
	 $tobool251 = ($wn$|0)==(0);
	 $or$cond52 = $tobool150 | $tobool251;
	 L1: do {
	  if ($or$cond52) {
	   $2 = $0;$cnt$1 = 0;$n$addr$1 = $n;$wn$addr$2 = $wn$;$ws$047 = $wcs$arraydecay;
	  } else {
	   $$pr67 = $0;$cnt$054 = 0;$n$addr$056 = $n;$wn$addr$053 = $wn$;$ws$055 = $wcs$arraydecay;
	   while(1) {
	    $div = $n$addr$056 >>> 2;
	    $cmp = ($div>>>0)>=($wn$addr$053>>>0);
	    $cmp3 = ($n$addr$056>>>0)>(131);
	    $or$cond34 = $cmp | $cmp3;
	    if (!($or$cond34)) {
	     $2 = $$pr67;$cnt$1 = $cnt$054;$n$addr$1 = $n$addr$056;$wn$addr$2 = $wn$addr$053;$ws$047 = $ws$055;
	     break L1;
	    }
	    $wn$addr$0$div = $cmp ? $wn$addr$053 : $div;
	    $sub = (($n$addr$056) - ($wn$addr$0$div))|0;
	    $call = (_mbsrtowcs($ws$055,$s,$wn$addr$0$div,$st)|0);
	    $tobool7 = ($call|0)==(-1);
	    if ($tobool7) {
	     break;
	    }
	    $cmp11 = ($ws$055|0)==($wbuf|0);
	    if ($cmp11) {
	     $wn$addr$1 = $wn$addr$053;$ws$1 = $wbuf;
	    } else {
	     $add$ptr = (($ws$055) + ($call<<2)|0);
	     $sub13 = (($wn$addr$053) - ($call))|0;
	     $wn$addr$1 = $sub13;$ws$1 = $add$ptr;
	    }
	    $add15 = (($call) + ($cnt$054))|0;
	    $1 = HEAP32[$s>>2]|0;
	    $tobool1 = ($1|0)==(0|0);
	    $tobool2 = ($wn$addr$1|0)==(0);
	    $or$cond = $tobool1 | $tobool2;
	    if ($or$cond) {
	     $2 = $1;$cnt$1 = $add15;$n$addr$1 = $sub;$wn$addr$2 = $wn$addr$1;$ws$047 = $ws$1;
	     break L1;
	    } else {
	     $$pr67 = $1;$cnt$054 = $add15;$n$addr$056 = $sub;$wn$addr$053 = $wn$addr$1;$ws$055 = $ws$1;
	    }
	   }
	   $$pr$pre = HEAP32[$s>>2]|0;
	   $2 = $$pr$pre;$cnt$1 = -1;$n$addr$1 = $sub;$wn$addr$2 = 0;$ws$047 = $ws$055;
	  }
	 } while(0);
	 $tobool16 = ($2|0)==(0|0);
	 L11: do {
	  if ($tobool16) {
	   $cnt$3 = $cnt$1;
	  } else {
	   $tobool1937 = ($wn$addr$2|0)==(0);
	   $tobool2138 = ($n$addr$1|0)==(0);
	   $or$cond3539 = $tobool1937 | $tobool2138;
	   if ($or$cond3539) {
	    $cnt$3 = $cnt$1;
	   } else {
	    $3 = $2;$cnt$241 = $cnt$1;$n$addr$243 = $n$addr$1;$wn$addr$340 = $wn$addr$2;$ws$242 = $ws$047;
	    while(1) {
	     $call24 = (_mbrtowc($ws$242,$3,$n$addr$243,$st)|0);
	     $add25 = (($call24) + 2)|0;
	     $cmp26 = ($add25>>>0)<(3);
	     if ($cmp26) {
	      break;
	     }
	     $4 = HEAP32[$s>>2]|0;
	     $add$ptr36 = (($4) + ($call24)|0);
	     HEAP32[$s>>2] = $add$ptr36;
	     $sub37 = (($n$addr$243) - ($call24))|0;
	     $incdec$ptr = (($ws$242) + 4|0);
	     $dec = (($wn$addr$340) + -1)|0;
	     $inc = (($cnt$241) + 1)|0;
	     $tobool19 = ($dec|0)==(0);
	     $tobool21 = ($n$addr$243|0)==($call24|0);
	     $or$cond35 = $tobool19 | $tobool21;
	     if ($or$cond35) {
	      $cnt$3 = $inc;
	      break L11;
	     } else {
	      $3 = $add$ptr36;$cnt$241 = $inc;$n$addr$243 = $sub37;$wn$addr$340 = $dec;$ws$242 = $incdec$ptr;
	     }
	    }
	    if ((($call24|0) == 0)) {
	     HEAP32[$s>>2] = 0;
	     $cnt$3 = $cnt$241;
	     break;
	    } else if ((($call24|0) == -1)) {
	     $cnt$3 = -1;
	     break;
	    } else {
	     HEAP32[$st>>2] = 0;
	     $cnt$3 = $cnt$241;
	     break;
	    }
	   }
	  }
	 } while(0);
	 if (!($tobool)) {
	  STACKTOP = sp;return ($cnt$3|0);
	 }
	 $5 = HEAP32[$s>>2]|0;
	 HEAP32[$src>>2] = $5;
	 STACKTOP = sp;return ($cnt$3|0);
	}
	function _mbsrtowcs($ws,$src,$wn,$st) {
	 $ws = $ws|0;
	 $src = $src|0;
	 $wn = $wn|0;
	 $st = $st|0;
	 var $$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
	 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr150 = 0, $add$ptr165 = 0, $add$ptr50 = 0, $add$ptr61 = 0, $add131 = 0, $and = 0, $and42 = 0, $and53 = 0, $and77 = 0, $and86 = 0, $arrayidx = 0;
	 var $arrayidx124 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $cmp = 0, $cmp107 = 0, $cmp117 = 0, $cmp147 = 0, $cmp162 = 0, $cmp17 = 0, $cmp23 = 0, $cmp47 = 0, $cmp58 = 0, $cmp74 = 0, $cmp78 = 0, $cmp8 = 0, $cmp82 = 0, $cmp8282 = 0;
	 var $conv = 0, $conv100 = 0, $conv105 = 0, $conv125 = 0, $conv145 = 0, $conv15 = 0, $conv160 = 0, $conv30 = 0, $conv45 = 0, $conv56 = 0, $conv72 = 0, $conv91 = 0, $conv94 = 0, $conv97 = 0, $dec = 0, $dec113 = 0, $dec175 = 0, $dec66 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0;
	 var $incdec$ptr110 = 0, $incdec$ptr112 = 0, $incdec$ptr121 = 0, $incdec$ptr136 = 0, $incdec$ptr138 = 0, $incdec$ptr153 = 0, $incdec$ptr168 = 0, $incdec$ptr174 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr41 = 0, $incdec$ptr52 = 0, $incdec$ptr63 = 0, $incdec$ptr90 = 0, $incdec$ptr92 = 0, $incdec$ptr93 = 0, $incdec$ptr95 = 0, $incdec$ptr96 = 0, $incdec$ptr98 = 0, $incdec$ptr99 = 0;
	 var $lnot = 0, $lnot78 = 0, $lnot88 = 0, $or = 0, $or$cond = 0, $or132 = 0, $or141 = 0, $or156 = 0, $or171 = 0, $or35 = 0, $or76 = 0, $or85 = 0, $rem = 0, $rem77 = 0, $retval$0 = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$10107 = 0, $s$10108 = 0;
	 var $s$180 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$593 = 0, $s$685 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $shl = 0, $shl152 = 0, $shl167 = 0, $shr12674 = 0, $shr130 = 0, $shr34 = 0, $shr73 = 0, $sub = 0, $sub102 = 0;
	 var $sub106 = 0, $sub11 = 0, $sub116 = 0, $sub1175 = 0, $sub127 = 0, $sub13 = 0, $sub140 = 0, $sub146 = 0, $sub16 = 0, $sub161 = 0, $sub185 = 0, $sub22 = 0, $sub31 = 0, $sub46 = 0, $sub57 = 0, $sub73 = 0, $sub84 = 0, $tobool = 0, $tobool1 = 0, $tobool134 = 0;
	 var $tobool143 = 0, $tobool158 = 0, $tobool178 = 0, $tobool180 = 0, $tobool182 = 0, $tobool187 = 0, $tobool2 = 0, $tobool37 = 0, $tobool4 = 0, $tobool43 = 0, $tobool54 = 0, $tobool69 = 0, $tobool6990 = 0, $wn$addr$0 = 0, $wn$addr$1$lcssa = 0, $wn$addr$179 = 0, $wn$addr$2 = 0, $wn$addr$3 = 0, $wn$addr$4$ph = 0, $wn$addr$491 = 0;
	 var $wn$addr$583 = 0, $wn$addr$6 = 0, $wn$addr$7 = 0, $wn$addr$8 = 0, $wn$addr$8104 = 0, $ws$addr$0$ph = 0, $ws$addr$092 = 0, $ws$addr$184 = 0, $ws$addr$2 = 0, $ws$addr$3 = 0, $ws$addr$4 = 0, $ws$addr$4105 = 0, $ws$addr$4106 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$src>>2]|0;
	 $tobool = ($st|0)==(0|0);
	 if ($tobool) {
	  label = 5;
	 } else {
	  $1 = HEAP32[$st>>2]|0;
	  $tobool1 = ($1|0)==(0);
	  if ($tobool1) {
	   label = 5;
	  } else {
	   $tobool2 = ($ws|0)==(0|0);
	   if ($tobool2) {
	    $c$2 = $1;$s$3 = $0;$wn$addr$3 = $wn;
	    label = 16;
	   } else {
	    HEAP32[$st>>2] = 0;
	    $c$4 = $1;$s$8 = $0;$wn$addr$7 = $wn;$ws$addr$3 = $ws;
	    label = 37;
	   }
	  }
	 }
	 if ((label|0) == 5) {
	  $tobool4 = ($ws|0)==(0|0);
	  if ($tobool4) {
	   $s$0 = $0;$wn$addr$0 = $wn;
	   label = 7;
	  } else {
	   $s$5$ph = $0;$wn$addr$4$ph = $wn;$ws$addr$0$ph = $ws;
	   label = 6;
	  }
	 }
	 L7: while(1) {
	  if ((label|0) == 6) {
	   label = 0;
	   $tobool6990 = ($wn$addr$4$ph|0)==(0);
	   if ($tobool6990) {
	    $s$5$lcssa = $s$5$ph;
	    label = 26;
	    break;
	   } else {
	    $s$593 = $s$5$ph;$wn$addr$491 = $wn$addr$4$ph;$ws$addr$092 = $ws$addr$0$ph;
	   }
	   while(1) {
	    $12 = HEAP8[$s$593>>0]|0;
	    $conv72 = $12&255;
	    $sub73 = (($conv72) + -1)|0;
	    $cmp74 = ($sub73>>>0)<(127);
	    do {
	     if ($cmp74) {
	      $13 = $s$593;
	      $rem77 = $13 & 3;
	      $cmp78 = ($rem77|0)==(0);
	      $cmp8282 = ($wn$addr$491>>>0)>(4);
	      $or$cond = $cmp78 & $cmp8282;
	      if ($or$cond) {
	       $s$685 = $s$593;$wn$addr$583 = $wn$addr$491;$ws$addr$184 = $ws$addr$092;
	       while(1) {
	        $14 = HEAP32[$s$685>>2]|0;
	        $sub84 = (($14) + -16843009)|0;
	        $or85 = $sub84 | $14;
	        $and86 = $or85 & -2139062144;
	        $lnot88 = ($and86|0)==(0);
	        if (!($lnot88)) {
	         label = 31;
	         break;
	        }
	        $incdec$ptr90 = (($s$685) + 1|0);
	        $conv91 = $14 & 255;
	        $incdec$ptr92 = (($ws$addr$184) + 4|0);
	        HEAP32[$ws$addr$184>>2] = $conv91;
	        $incdec$ptr93 = (($s$685) + 2|0);
	        $15 = HEAP8[$incdec$ptr90>>0]|0;
	        $conv94 = $15&255;
	        $incdec$ptr95 = (($ws$addr$184) + 8|0);
	        HEAP32[$incdec$ptr92>>2] = $conv94;
	        $incdec$ptr96 = (($s$685) + 3|0);
	        $16 = HEAP8[$incdec$ptr93>>0]|0;
	        $conv97 = $16&255;
	        $incdec$ptr98 = (($ws$addr$184) + 12|0);
	        HEAP32[$incdec$ptr95>>2] = $conv97;
	        $incdec$ptr99 = (($s$685) + 4|0);
	        $17 = HEAP8[$incdec$ptr96>>0]|0;
	        $conv100 = $17&255;
	        $incdec$ptr101 = (($ws$addr$184) + 16|0);
	        HEAP32[$incdec$ptr98>>2] = $conv100;
	        $sub102 = (($wn$addr$583) + -4)|0;
	        $cmp82 = ($sub102>>>0)>(4);
	        if ($cmp82) {
	         $s$685 = $incdec$ptr99;$wn$addr$583 = $sub102;$ws$addr$184 = $incdec$ptr101;
	        } else {
	         label = 32;
	         break;
	        }
	       }
	       if ((label|0) == 31) {
	        label = 0;
	        $18 = $14&255;
	        $19 = $18;$s$7 = $s$685;$wn$addr$6 = $wn$addr$583;$ws$addr$2 = $ws$addr$184;
	        break;
	       }
	       else if ((label|0) == 32) {
	        label = 0;
	        $$pre$pre = HEAP8[$incdec$ptr99>>0]|0;
	        $19 = $$pre$pre;$s$7 = $incdec$ptr99;$wn$addr$6 = $sub102;$ws$addr$2 = $incdec$ptr101;
	        break;
	       }
	      } else {
	       $19 = $12;$s$7 = $s$593;$wn$addr$6 = $wn$addr$491;$ws$addr$2 = $ws$addr$092;
	      }
	     } else {
	      $19 = $12;$s$7 = $s$593;$wn$addr$6 = $wn$addr$491;$ws$addr$2 = $ws$addr$092;
	     }
	    } while(0);
	    $conv105 = $19&255;
	    $sub106 = (($conv105) + -1)|0;
	    $cmp107 = ($sub106>>>0)<(127);
	    if (!($cmp107)) {
	     break;
	    }
	    $incdec$ptr110 = (($s$7) + 1|0);
	    $incdec$ptr112 = (($ws$addr$2) + 4|0);
	    HEAP32[$ws$addr$2>>2] = $conv105;
	    $dec113 = (($wn$addr$6) + -1)|0;
	    $tobool69 = ($dec113|0)==(0);
	    if ($tobool69) {
	     $s$5$lcssa = $incdec$ptr110;
	     label = 26;
	     break L7;
	    } else {
	     $s$593 = $incdec$ptr110;$wn$addr$491 = $dec113;$ws$addr$092 = $incdec$ptr112;
	    }
	   }
	   $sub116 = (($conv105) + -194)|0;
	   $cmp117 = ($sub116>>>0)>(50);
	   if ($cmp117) {
	    $s$10108 = $s$7;$wn$addr$8104 = $wn$addr$6;$ws$addr$4106 = $ws$addr$2;
	    label = 48;
	    break;
	   }
	   $incdec$ptr121 = (($s$7) + 1|0);
	   $arrayidx124 = (152592 + ($sub116<<2)|0);
	   $20 = HEAP32[$arrayidx124>>2]|0;
	   $c$4 = $20;$s$8 = $incdec$ptr121;$wn$addr$7 = $wn$addr$6;$ws$addr$3 = $ws$addr$2;
	   label = 37;
	   continue;
	  }
	  else if ((label|0) == 7) {
	   label = 0;
	   $2 = HEAP8[$s$0>>0]|0;
	   $conv = $2&255;
	   $sub = (($conv) + -1)|0;
	   $cmp = ($sub>>>0)<(127);
	   if ($cmp) {
	    $3 = $s$0;
	    $rem = $3 & 3;
	    $cmp8 = ($rem|0)==(0);
	    if ($cmp8) {
	     $4 = HEAP32[$s$0>>2]|0;
	     $sub1175 = (($4) + -16843009)|0;
	     $or76 = $sub1175 | $4;
	     $and77 = $or76 & -2139062144;
	     $lnot78 = ($and77|0)==(0);
	     if ($lnot78) {
	      $s$180 = $s$0;$wn$addr$179 = $wn$addr$0;
	      while(1) {
	       $add$ptr = (($s$180) + 4|0);
	       $sub13 = (($wn$addr$179) + -4)|0;
	       $5 = HEAP32[$add$ptr>>2]|0;
	       $sub11 = (($5) + -16843009)|0;
	       $or = $sub11 | $5;
	       $and = $or & -2139062144;
	       $lnot = ($and|0)==(0);
	       if ($lnot) {
	        $s$180 = $add$ptr;$wn$addr$179 = $sub13;
	       } else {
	        $$in = $5;$s$1$lcssa = $add$ptr;$wn$addr$1$lcssa = $sub13;
	        break;
	       }
	      }
	     } else {
	      $$in = $4;$s$1$lcssa = $s$0;$wn$addr$1$lcssa = $wn$addr$0;
	     }
	     $6 = $$in&255;
	     $7 = $6;$s$2 = $s$1$lcssa;$wn$addr$2 = $wn$addr$1$lcssa;
	    } else {
	     $7 = $2;$s$2 = $s$0;$wn$addr$2 = $wn$addr$0;
	    }
	   } else {
	    $7 = $2;$s$2 = $s$0;$wn$addr$2 = $wn$addr$0;
	   }
	   $conv15 = $7&255;
	   $sub16 = (($conv15) + -1)|0;
	   $cmp17 = ($sub16>>>0)<(127);
	   if ($cmp17) {
	    $incdec$ptr = (($s$2) + 1|0);
	    $dec = (($wn$addr$2) + -1)|0;
	    $s$0 = $incdec$ptr;$wn$addr$0 = $dec;
	    label = 7;
	    continue;
	   }
	   $sub22 = (($conv15) + -194)|0;
	   $cmp23 = ($sub22>>>0)>(50);
	   if ($cmp23) {
	    $s$10108 = $s$2;$wn$addr$8104 = $wn$addr$2;$ws$addr$4106 = $ws;
	    label = 48;
	    break;
	   }
	   $incdec$ptr27 = (($s$2) + 1|0);
	   $arrayidx = (152592 + ($sub22<<2)|0);
	   $8 = HEAP32[$arrayidx>>2]|0;
	   $c$2 = $8;$s$3 = $incdec$ptr27;$wn$addr$3 = $wn$addr$2;
	   label = 16;
	   continue;
	  }
	  else if ((label|0) == 16) {
	   label = 0;
	   $9 = HEAP8[$s$3>>0]|0;
	   $conv30 = $9&255;
	   $shr73 = $conv30 >>> 3;
	   $sub31 = (($shr73) + -16)|0;
	   $shr34 = $c$2 >> 26;
	   $add = (($shr73) + ($shr34))|0;
	   $or35 = $sub31 | $add;
	   $tobool37 = ($or35>>>0)>(7);
	   if ($tobool37) {
	    label = 17;
	    break;
	   }
	   $incdec$ptr41 = (($s$3) + 1|0);
	   $and42 = $c$2 & 33554432;
	   $tobool43 = ($and42|0)==(0);
	   if ($tobool43) {
	    $s$4 = $incdec$ptr41;
	   } else {
	    $10 = HEAP8[$incdec$ptr41>>0]|0;
	    $conv45 = $10&255;
	    $sub46 = (($conv45) + -128)|0;
	    $cmp47 = ($sub46>>>0)>(63);
	    if ($cmp47) {
	     label = 20;
	     break;
	    }
	    $incdec$ptr52 = (($s$3) + 2|0);
	    $and53 = $c$2 & 524288;
	    $tobool54 = ($and53|0)==(0);
	    if ($tobool54) {
	     $s$4 = $incdec$ptr52;
	    } else {
	     $11 = HEAP8[$incdec$ptr52>>0]|0;
	     $conv56 = $11&255;
	     $sub57 = (($conv56) + -128)|0;
	     $cmp58 = ($sub57>>>0)>(63);
	     if ($cmp58) {
	      label = 23;
	      break;
	     }
	     $incdec$ptr63 = (($s$3) + 3|0);
	     $s$4 = $incdec$ptr63;
	    }
	   }
	   $dec66 = (($wn$addr$3) + -1)|0;
	   $s$0 = $s$4;$wn$addr$0 = $dec66;
	   label = 7;
	   continue;
	  }
	  else if ((label|0) == 37) {
	   label = 0;
	   $21 = HEAP8[$s$8>>0]|0;
	   $conv125 = $21&255;
	   $shr12674 = $conv125 >>> 3;
	   $sub127 = (($shr12674) + -16)|0;
	   $shr130 = $c$4 >> 26;
	   $add131 = (($shr12674) + ($shr130))|0;
	   $or132 = $sub127 | $add131;
	   $tobool134 = ($or132>>>0)>(7);
	   if ($tobool134) {
	    label = 38;
	    break;
	   }
	   $shl = $c$4 << 6;
	   $incdec$ptr138 = (($s$8) + 1|0);
	   $sub140 = (($conv125) + -128)|0;
	   $or141 = $sub140 | $shl;
	   $tobool143 = ($or141|0)<(0);
	   if ($tobool143) {
	    $22 = HEAP8[$incdec$ptr138>>0]|0;
	    $conv145 = $22&255;
	    $sub146 = (($conv145) + -128)|0;
	    $cmp147 = ($sub146>>>0)>(63);
	    if ($cmp147) {
	     label = 41;
	     break;
	    }
	    $shl152 = $or141 << 6;
	    $incdec$ptr153 = (($s$8) + 2|0);
	    $or156 = $sub146 | $shl152;
	    $tobool158 = ($or156|0)<(0);
	    if ($tobool158) {
	     $23 = HEAP8[$incdec$ptr153>>0]|0;
	     $conv160 = $23&255;
	     $sub161 = (($conv160) + -128)|0;
	     $cmp162 = ($sub161>>>0)>(63);
	     if ($cmp162) {
	      label = 44;
	      break;
	     }
	     $shl167 = $or156 << 6;
	     $incdec$ptr168 = (($s$8) + 3|0);
	     $or171 = $sub161 | $shl167;
	     $c$5 = $or171;$s$9 = $incdec$ptr168;
	    } else {
	     $c$5 = $or156;$s$9 = $incdec$ptr153;
	    }
	   } else {
	    $c$5 = $or141;$s$9 = $incdec$ptr138;
	   }
	   $incdec$ptr174 = (($ws$addr$3) + 4|0);
	   HEAP32[$ws$addr$3>>2] = $c$5;
	   $dec175 = (($wn$addr$7) + -1)|0;
	   $s$5$ph = $s$9;$wn$addr$4$ph = $dec175;$ws$addr$0$ph = $incdec$ptr174;
	   label = 6;
	   continue;
	  }
	 }
	 if ((label|0) == 17) {
	  $incdec$ptr39 = (($s$3) + -1|0);
	  $c$6 = $c$2;$s$10 = $incdec$ptr39;$wn$addr$8 = $wn$addr$3;$ws$addr$4 = $ws;
	  label = 47;
	 }
	 else if ((label|0) == 20) {
	  $add$ptr50 = (($s$3) + -1|0);
	  $c$6 = $c$2;$s$10 = $add$ptr50;$wn$addr$8 = $wn$addr$3;$ws$addr$4 = $ws;
	  label = 47;
	 }
	 else if ((label|0) == 23) {
	  $add$ptr61 = (($s$3) + -1|0);
	  $c$6 = $c$2;$s$10 = $add$ptr61;$wn$addr$8 = $wn$addr$3;$ws$addr$4 = $ws;
	  label = 47;
	 }
	 else if ((label|0) == 26) {
	  HEAP32[$src>>2] = $s$5$lcssa;
	  $retval$0 = $wn;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 else if ((label|0) == 38) {
	  $incdec$ptr136 = (($s$8) + -1|0);
	  $c$6 = $c$4;$s$10 = $incdec$ptr136;$wn$addr$8 = $wn$addr$7;$ws$addr$4 = $ws$addr$3;
	  label = 47;
	 }
	 else if ((label|0) == 41) {
	  $add$ptr150 = (($s$8) + -1|0);
	  $c$6 = $or141;$s$10 = $add$ptr150;$wn$addr$8 = $wn$addr$7;$ws$addr$4 = $ws$addr$3;
	  label = 47;
	 }
	 else if ((label|0) == 44) {
	  $add$ptr165 = (($s$8) + -1|0);
	  $c$6 = $or156;$s$10 = $add$ptr165;$wn$addr$8 = $wn$addr$7;$ws$addr$4 = $ws$addr$3;
	  label = 47;
	 }
	 if ((label|0) == 47) {
	  $tobool178 = ($c$6|0)==(0);
	  if ($tobool178) {
	   $s$10108 = $s$10;$wn$addr$8104 = $wn$addr$8;$ws$addr$4106 = $ws$addr$4;
	   label = 48;
	  } else {
	   $s$10107 = $s$10;$ws$addr$4105 = $ws$addr$4;
	  }
	 }
	 if ((label|0) == 48) {
	  $24 = HEAP8[$s$10108>>0]|0;
	  $tobool180 = ($24<<24>>24)==(0);
	  if ($tobool180) {
	   $tobool182 = ($ws$addr$4106|0)==(0|0);
	   if (!($tobool182)) {
	    HEAP32[$ws$addr$4106>>2] = 0;
	    HEAP32[$src>>2] = 0;
	   }
	   $sub185 = (($wn) - ($wn$addr$8104))|0;
	   $retval$0 = $sub185;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $s$10107 = $s$10108;$ws$addr$4105 = $ws$addr$4106;
	  }
	 }
	 $call = (___errno_location()|0);
	 HEAP32[$call>>2] = 84;
	 $tobool187 = ($ws$addr$4105|0)==(0|0);
	 if ($tobool187) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 HEAP32[$src>>2] = $s$10107;
	 $retval$0 = -1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _mbstowcs($ws,$s,$wn) {
	 $ws = $ws|0;
	 $s = $s|0;
	 $wn = $wn|0;
	 var $call = 0, $s$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $s$addr = sp;
	 HEAP32[$s$addr>>2] = $s;
	 $call = (_mbsrtowcs($ws,$s$addr,$wn,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _mbtowc($wc,$src,$n) {
	 $wc = $wc|0;
	 $src = $src|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $and22 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp14 = 0, $cmp20 = 0, $cmp46 = 0, $cmp61 = 0, $conv = 0, $conv26 = 0, $conv44 = 0, $conv59 = 0;
	 var $incdec$ptr = 0, $incdec$ptr36 = 0, $incdec$ptr51 = 0, $lnot$ext = 0, $mul = 0, $or = 0, $or39 = 0, $or54 = 0, $or69 = 0, $retval$0 = 0, $shl35 = 0, $shl50 = 0, $shl65 = 0, $shr21 = 0, $shr30 = 0, $sub = 0, $sub22 = 0, $sub27 = 0, $sub38 = 0, $sub45 = 0;
	 var $sub60 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool23 = 0, $tobool32 = 0, $tobool4 = 0, $tobool41 = 0, $tobool56 = 0, $wc$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $wc$addr = sp;
	 HEAP32[$wc$addr>>2] = $wc;
	 $tobool = ($src|0)==(0|0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $tobool1 = ($n|0)==(0);
	 do {
	  if (!($tobool1)) {
	   $tobool4 = ($wc|0)==(0|0);
	   if ($tobool4) {
	    HEAP32[$wc$addr>>2] = $wc$addr;
	    $1 = $wc$addr;
	   } else {
	    $1 = $wc;
	   }
	   $0 = HEAP8[$src>>0]|0;
	   $conv = $0&255;
	   $cmp = ($0<<24>>24)>(-1);
	   if ($cmp) {
	    HEAP32[$1>>2] = $conv;
	    $tobool10 = ($0<<24>>24)!=(0);
	    $lnot$ext = $tobool10&1;
	    $retval$0 = $lnot$ext;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $sub = (($conv) + -194)|0;
	   $cmp14 = ($sub>>>0)>(50);
	   if (!($cmp14)) {
	    $incdec$ptr = (($src) + 1|0);
	    $arrayidx = (152592 + ($sub<<2)|0);
	    $2 = HEAP32[$arrayidx>>2]|0;
	    $cmp20 = ($n>>>0)<(4);
	    if ($cmp20) {
	     $mul = ($n*6)|0;
	     $sub22 = (($mul) + -6)|0;
	     $3 = -2147483648 >>> $sub22;
	     $and22 = $2 & $3;
	     $tobool23 = ($and22|0)==(0);
	     if (!($tobool23)) {
	      break;
	     }
	    }
	    $4 = HEAP8[$incdec$ptr>>0]|0;
	    $conv26 = $4&255;
	    $shr21 = $conv26 >>> 3;
	    $sub27 = (($shr21) + -16)|0;
	    $shr30 = $2 >> 26;
	    $add = (($shr21) + ($shr30))|0;
	    $or = $sub27 | $add;
	    $tobool32 = ($or>>>0)>(7);
	    if (!($tobool32)) {
	     $shl35 = $2 << 6;
	     $sub38 = (($conv26) + -128)|0;
	     $or39 = $sub38 | $shl35;
	     $tobool41 = ($or39|0)<(0);
	     if (!($tobool41)) {
	      HEAP32[$1>>2] = $or39;
	      $retval$0 = 2;
	      STACKTOP = sp;return ($retval$0|0);
	     }
	     $incdec$ptr36 = (($src) + 2|0);
	     $5 = HEAP8[$incdec$ptr36>>0]|0;
	     $conv44 = $5&255;
	     $sub45 = (($conv44) + -128)|0;
	     $cmp46 = ($sub45>>>0)>(63);
	     if (!($cmp46)) {
	      $shl50 = $or39 << 6;
	      $or54 = $sub45 | $shl50;
	      $tobool56 = ($or54|0)<(0);
	      if (!($tobool56)) {
	       HEAP32[$1>>2] = $or54;
	       $retval$0 = 3;
	       STACKTOP = sp;return ($retval$0|0);
	      }
	      $incdec$ptr51 = (($src) + 3|0);
	      $6 = HEAP8[$incdec$ptr51>>0]|0;
	      $conv59 = $6&255;
	      $sub60 = (($conv59) + -128)|0;
	      $cmp61 = ($sub60>>>0)>(63);
	      if (!($cmp61)) {
	       $shl65 = $or54 << 6;
	       $or69 = $sub60 | $shl65;
	       HEAP32[$1>>2] = $or69;
	       $retval$0 = 4;
	       STACKTOP = sp;return ($retval$0|0);
	      }
	     }
	    }
	   }
	  }
	 } while(0);
	 $call = (___errno_location()|0);
	 HEAP32[$call>>2] = 84;
	 $retval$0 = -1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
	 $dst = $dst|0;
	 $wcs = $wcs|0;
	 $wn = $wn|0;
	 $n = $n|0;
	 $st = $st|0;
	 var $$pr$pre = 0, $$pr65 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr = 0, $add$ptr33 = 0, $add15 = 0, $add25 = 0, $buf = 0, $call = 0, $call24 = 0, $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp3 = 0;
	 var $cnt$052 = 0, $cnt$1 = 0, $cnt$239 = 0, $cnt$3 = 0, $dec = 0, $dst$arraydecay = 0, $inc = 0, $incdec$ptr = 0, $n$ = 0, $n$addr$0$wn$addr$0 = 0, $n$addr$051 = 0, $n$addr$1 = 0, $n$addr$2 = 0, $n$addr$338 = 0, $or$cond = 0, $or$cond32 = 0, $or$cond33 = 0, $or$cond3337 = 0, $or$cond50 = 0, $s$045 = 0;
	 var $s$053 = 0, $s$1 = 0, $s$240 = 0, $sub = 0, $sub13 = 0, $sub34 = 0, $tobool = 0, $tobool1 = 0, $tobool148 = 0, $tobool16 = 0, $tobool19 = 0, $tobool1935 = 0, $tobool2 = 0, $tobool21 = 0, $tobool2136 = 0, $tobool249 = 0, $tobool28 = 0, $tobool7 = 0, $wn$addr$054 = 0, $wn$addr$1 = 0;
	 var $wn$addr$241 = 0, $ws = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf = sp + 8|0;
	 $ws = sp;
	 $0 = HEAP32[$wcs>>2]|0;
	 HEAP32[$ws>>2] = $0;
	 $tobool = ($dst|0)!=(0|0);
	 $n$ = $tobool ? $n : 256;
	 $dst$arraydecay = $tobool ? $dst : $buf;
	 $tobool148 = ($0|0)==(0|0);
	 $tobool249 = ($n$|0)==(0);
	 $or$cond50 = $tobool148 | $tobool249;
	 L1: do {
	  if ($or$cond50) {
	   $2 = $0;$cnt$1 = 0;$n$addr$2 = $n$;$s$045 = $dst$arraydecay;$wn$addr$1 = $wn;
	  } else {
	   $$pr65 = $0;$cnt$052 = 0;$n$addr$051 = $n$;$s$053 = $dst$arraydecay;$wn$addr$054 = $wn;
	   while(1) {
	    $cmp = ($wn$addr$054>>>0)>=($n$addr$051>>>0);
	    $cmp3 = ($wn$addr$054>>>0)>(32);
	    $or$cond32 = $cmp | $cmp3;
	    if (!($or$cond32)) {
	     $2 = $$pr65;$cnt$1 = $cnt$052;$n$addr$2 = $n$addr$051;$s$045 = $s$053;$wn$addr$1 = $wn$addr$054;
	     break L1;
	    }
	    $n$addr$0$wn$addr$0 = $cmp ? $n$addr$051 : $wn$addr$054;
	    $sub = (($wn$addr$054) - ($n$addr$0$wn$addr$0))|0;
	    $call = (_wcsrtombs($s$053,$ws,$n$addr$0$wn$addr$0,0)|0);
	    $tobool7 = ($call|0)==(-1);
	    if ($tobool7) {
	     break;
	    }
	    $cmp11 = ($s$053|0)==($buf|0);
	    if ($cmp11) {
	     $n$addr$1 = $n$addr$051;$s$1 = $buf;
	    } else {
	     $add$ptr = (($s$053) + ($call)|0);
	     $sub13 = (($n$addr$051) - ($call))|0;
	     $n$addr$1 = $sub13;$s$1 = $add$ptr;
	    }
	    $add15 = (($call) + ($cnt$052))|0;
	    $1 = HEAP32[$ws>>2]|0;
	    $tobool1 = ($1|0)==(0|0);
	    $tobool2 = ($n$addr$1|0)==(0);
	    $or$cond = $tobool1 | $tobool2;
	    if ($or$cond) {
	     $2 = $1;$cnt$1 = $add15;$n$addr$2 = $n$addr$1;$s$045 = $s$1;$wn$addr$1 = $sub;
	     break L1;
	    } else {
	     $$pr65 = $1;$cnt$052 = $add15;$n$addr$051 = $n$addr$1;$s$053 = $s$1;$wn$addr$054 = $sub;
	    }
	   }
	   $$pr$pre = HEAP32[$ws>>2]|0;
	   $2 = $$pr$pre;$cnt$1 = -1;$n$addr$2 = 0;$s$045 = $s$053;$wn$addr$1 = $sub;
	  }
	 } while(0);
	 $tobool16 = ($2|0)==(0|0);
	 L11: do {
	  if ($tobool16) {
	   $cnt$3 = $cnt$1;
	  } else {
	   $tobool1935 = ($n$addr$2|0)==(0);
	   $tobool2136 = ($wn$addr$1|0)==(0);
	   $or$cond3337 = $tobool1935 | $tobool2136;
	   if ($or$cond3337) {
	    $cnt$3 = $cnt$1;
	   } else {
	    $4 = $2;$cnt$239 = $cnt$1;$n$addr$338 = $n$addr$2;$s$240 = $s$045;$wn$addr$241 = $wn$addr$1;
	    while(1) {
	     $3 = HEAP32[$4>>2]|0;
	     $call24 = (_wcrtomb($s$240,$3,0)|0);
	     $add25 = (($call24) + 1)|0;
	     $cmp26 = ($add25>>>0)<(2);
	     if ($cmp26) {
	      break;
	     }
	     $5 = HEAP32[$ws>>2]|0;
	     $incdec$ptr = (($5) + 4|0);
	     HEAP32[$ws>>2] = $incdec$ptr;
	     $dec = (($wn$addr$241) + -1)|0;
	     $add$ptr33 = (($s$240) + ($call24)|0);
	     $sub34 = (($n$addr$338) - ($call24))|0;
	     $inc = (($cnt$239) + 1)|0;
	     $tobool19 = ($n$addr$338|0)==($call24|0);
	     $tobool21 = ($dec|0)==(0);
	     $or$cond33 = $tobool19 | $tobool21;
	     if ($or$cond33) {
	      $cnt$3 = $inc;
	      break L11;
	     } else {
	      $4 = $incdec$ptr;$cnt$239 = $inc;$n$addr$338 = $sub34;$s$240 = $add$ptr33;$wn$addr$241 = $dec;
	     }
	    }
	    $tobool28 = ($call24|0)==(0);
	    if ($tobool28) {
	     HEAP32[$ws>>2] = 0;
	     $cnt$3 = $cnt$239;
	    } else {
	     $cnt$3 = -1;
	    }
	   }
	  }
	 } while(0);
	 if (!($tobool)) {
	  STACKTOP = sp;return ($cnt$3|0);
	 }
	 $6 = HEAP32[$ws>>2]|0;
	 HEAP32[$wcs>>2] = $6;
	 STACKTOP = sp;return ($cnt$3|0);
	}
	function _wcsrtombs($s,$ws,$n,$st) {
	 $s = $s|0;
	 $ws = $ws|0;
	 $n = $n|0;
	 $st = $st|0;
	 var $$pre = 0, $$pre79 = 0, $$pre80 = 0, $$pre81 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr48 = 0, $buf = 0, $call = 0, $call$pn = 0;
	 var $call15 = 0, $call37 = 0, $cmp = 0, $cmp29 = 0, $cmp42 = 0, $cmp8 = 0, $cmp864 = 0, $cmp9 = 0, $conv = 0, $conv51 = 0, $dec = 0, $dec53 = 0, $incdec$ptr = 0, $incdec$ptr22 = 0, $incdec$ptr24 = 0, $incdec$ptr52 = 0, $incdec$ptr55 = 0, $n$addr$047 = 0, $n$addr$1 = 0, $n$addr$2$lcssa = 0;
	 var $n$addr$265 = 0, $n$addr$3 = 0, $n$addr$456 = 0, $n$addr$5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$066 = 0, $s$addr$1 = 0, $s$addr$257 = 0, $s$addr$3 = 0, $sub = 0, $sub13 = 0, $sub20 = 0, $sub28 = 0, $sub34 = 0, $sub45 = 0, $sub49 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0;
	 var $tobool146 = 0, $tobool17 = 0, $tobool26 = 0, $tobool2655 = 0, $tobool3 = 0, $tobool32 = 0, $tobool39 = 0, $ws2$048 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf = sp;
	 $tobool = ($s|0)==(0|0);
	 if ($tobool) {
	  $0 = HEAP32[$ws>>2]|0;
	  $1 = HEAP32[$0>>2]|0;
	  $tobool146 = ($1|0)==(0);
	  if ($tobool146) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $2 = $1;$n$addr$047 = 0;$ws2$048 = $0;
	  }
	  while(1) {
	   $cmp = ($2>>>0)>(127);
	   if ($cmp) {
	    $call = (_wcrtomb($buf,$2,0)|0);
	    $tobool3 = ($call|0)==(-1);
	    if ($tobool3) {
	     $retval$0 = -1;
	     label = 26;
	     break;
	    } else {
	     $call$pn = $call;
	    }
	   } else {
	    $call$pn = 1;
	   }
	   $n$addr$1 = (($call$pn) + ($n$addr$047))|0;
	   $incdec$ptr = (($ws2$048) + 4|0);
	   $3 = HEAP32[$incdec$ptr>>2]|0;
	   $tobool1 = ($3|0)==(0);
	   if ($tobool1) {
	    $retval$0 = $n$addr$1;
	    label = 26;
	    break;
	   } else {
	    $2 = $3;$n$addr$047 = $n$addr$1;$ws2$048 = $incdec$ptr;
	   }
	  }
	  if ((label|0) == 26) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 $cmp864 = ($n>>>0)>(3);
	 L14: do {
	  if ($cmp864) {
	   $$pre80 = HEAP32[$ws>>2]|0;
	   $5 = $$pre80;$n$addr$265 = $n;$s$addr$066 = $s;
	   while(1) {
	    $4 = HEAP32[$5>>2]|0;
	    $sub = (($4) + -1)|0;
	    $cmp9 = ($sub>>>0)>(126);
	    if ($cmp9) {
	     $tobool11 = ($4|0)==(0);
	     if ($tobool11) {
	      break;
	     }
	     $call15 = (_wcrtomb($s$addr$066,$4,0)|0);
	     $tobool17 = ($call15|0)==(-1);
	     if ($tobool17) {
	      $retval$0 = -1;
	      label = 26;
	      break;
	     }
	     $add$ptr = (($s$addr$066) + ($call15)|0);
	     $sub20 = (($n$addr$265) - ($call15))|0;
	     $6 = $5;$n$addr$3 = $sub20;$s$addr$1 = $add$ptr;
	    } else {
	     $conv = $4&255;
	     $incdec$ptr22 = (($s$addr$066) + 1|0);
	     HEAP8[$s$addr$066>>0] = $conv;
	     $dec = (($n$addr$265) + -1)|0;
	     $$pre81 = HEAP32[$ws>>2]|0;
	     $6 = $$pre81;$n$addr$3 = $dec;$s$addr$1 = $incdec$ptr22;
	    }
	    $incdec$ptr24 = (($6) + 4|0);
	    HEAP32[$ws>>2] = $incdec$ptr24;
	    $cmp8 = ($n$addr$3>>>0)>(3);
	    if ($cmp8) {
	     $5 = $incdec$ptr24;$n$addr$265 = $n$addr$3;$s$addr$066 = $s$addr$1;
	    } else {
	     $n$addr$2$lcssa = $n$addr$3;$s$addr$0$lcssa = $s$addr$1;
	     break L14;
	    }
	   }
	   if ((label|0) == 26) {
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   HEAP8[$s$addr$066>>0] = 0;
	   HEAP32[$ws>>2] = 0;
	   $sub13 = (($n) - ($n$addr$265))|0;
	   $retval$0 = $sub13;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $n$addr$2$lcssa = $n;$s$addr$0$lcssa = $s;
	  }
	 } while(0);
	 $tobool2655 = ($n$addr$2$lcssa|0)==(0);
	 if ($tobool2655) {
	  $retval$0 = $n;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $$pre = HEAP32[$ws>>2]|0;
	 $8 = $$pre;$n$addr$456 = $n$addr$2$lcssa;$s$addr$257 = $s$addr$0$lcssa;
	 while(1) {
	  $7 = HEAP32[$8>>2]|0;
	  $sub28 = (($7) + -1)|0;
	  $cmp29 = ($sub28>>>0)>(126);
	  if ($cmp29) {
	   $tobool32 = ($7|0)==(0);
	   if ($tobool32) {
	    label = 19;
	    break;
	   }
	   $call37 = (_wcrtomb($buf,$7,0)|0);
	   $tobool39 = ($call37|0)==(-1);
	   if ($tobool39) {
	    $retval$0 = -1;
	    label = 26;
	    break;
	   }
	   $cmp42 = ($call37>>>0)>($n$addr$456>>>0);
	   if ($cmp42) {
	    label = 22;
	    break;
	   }
	   $9 = HEAP32[$8>>2]|0;
	   (_wcrtomb($s$addr$257,$9,0)|0);
	   $add$ptr48 = (($s$addr$257) + ($call37)|0);
	   $sub49 = (($n$addr$456) - ($call37))|0;
	   $10 = $8;$n$addr$5 = $sub49;$s$addr$3 = $add$ptr48;
	  } else {
	   $conv51 = $7&255;
	   $incdec$ptr52 = (($s$addr$257) + 1|0);
	   HEAP8[$s$addr$257>>0] = $conv51;
	   $dec53 = (($n$addr$456) + -1)|0;
	   $$pre79 = HEAP32[$ws>>2]|0;
	   $10 = $$pre79;$n$addr$5 = $dec53;$s$addr$3 = $incdec$ptr52;
	  }
	  $incdec$ptr55 = (($10) + 4|0);
	  HEAP32[$ws>>2] = $incdec$ptr55;
	  $tobool26 = ($n$addr$5|0)==(0);
	  if ($tobool26) {
	   $retval$0 = $n;
	   label = 26;
	   break;
	  } else {
	   $8 = $incdec$ptr55;$n$addr$456 = $n$addr$5;$s$addr$257 = $s$addr$3;
	  }
	 }
	 if ((label|0) == 19) {
	  HEAP8[$s$addr$257>>0] = 0;
	  HEAP32[$ws>>2] = 0;
	  $sub34 = (($n) - ($n$addr$456))|0;
	  $retval$0 = $sub34;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 else if ((label|0) == 22) {
	  $sub45 = (($n) - ($n$addr$456))|0;
	  $retval$0 = $sub45;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 else if ((label|0) == 26) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _wcstombs($s,$ws,$n) {
	 $s = $s|0;
	 $ws = $ws|0;
	 $n = $n|0;
	 var $$compoundliteral = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $$compoundliteral = sp;
	 HEAP32[$$compoundliteral>>2] = $ws;
	 $call = (_wcsrtombs($s,$$compoundliteral,$n,0)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wctob($c) {
	 $c = $c|0;
	 var $c$ = 0, $cmp = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($c>>>0)<(128);
	 $c$ = $cmp ? $c : -1;
	 STACKTOP = sp;return ($c$|0);
	}
	function _fnmatch($pat,$str,$flags) {
	 $pat = $pat|0;
	 $str = $str|0;
	 $flags = $flags|0;
	 var $$mux = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $add$ptr32 = 0, $add$ptr33 = 0, $and = 0, $and34 = 0, $brmerge = 0, $call = 0, $call25 = 0, $call48 = 0, $call57 = 0, $cmp16 = 0, $cmp6$not = 0, $conv15 = 0, $inc = 0;
	 var $incdec$ptr = 0, $incdec$ptr53 = 0, $or$cond = 0, $or$cond34 = 0, $p$0 = 0, $pat$addr$0 = 0, $retval$0 = 0, $s$0 = 0, $s$1 = 0, $str$addr$0 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast22 = 0, $sub$ptr$lhs$cast45 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast23 = 0, $sub$ptr$rhs$cast46 = 0, $sub$ptr$sub = 0, $sub$ptr$sub24 = 0, $sub$ptr$sub47 = 0, $tobool = 0;
	 var $tobool18 = 0, $tobool26$not = 0, $tobool35 = 0, $tobool49 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $inc = sp;
	 $and = $flags & 1;
	 $tobool = ($and|0)==(0);
	 $and34 = $flags & 8;
	 $tobool35 = ($and34|0)==(0);
	 if ($tobool) {
	  L3: do {
	   if (!($tobool35)) {
	    $sub$ptr$rhs$cast46 = $str;
	    $s$1 = $str;
	    while(1) {
	     $4 = HEAP8[$s$1>>0]|0;
	     if ((($4<<24>>24) == 0)) {
	      break L3;
	     } else if ((($4<<24>>24) == 47)) {
	      $sub$ptr$lhs$cast45 = $s$1;
	      $sub$ptr$sub47 = (($sub$ptr$lhs$cast45) - ($sub$ptr$rhs$cast46))|0;
	      $call48 = (_fnmatch_internal($pat,-1,$str,$sub$ptr$sub47,$flags)|0);
	      $tobool49 = ($call48|0)==(0);
	      if ($tobool49) {
	       $retval$0 = 0;
	       break;
	      }
	     }
	     $incdec$ptr53 = (($s$1) + 1|0);
	     $s$1 = $incdec$ptr53;
	    }
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  } while(0);
	  $call57 = (_fnmatch_internal($pat,-1,$str,-1,$flags)|0);
	  $retval$0 = $call57;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $pat$addr$0 = $pat;$str$addr$0 = $str;
	 }
	 while(1) {
	  $s$0 = $str$addr$0;
	  while(1) {
	   $0 = HEAP8[$s$0>>0]|0;
	   if ((($0<<24>>24) == 47) | (($0<<24>>24) == 0)) {
	    $p$0 = $pat$addr$0;
	    break;
	   }
	   $incdec$ptr = (($s$0) + 1|0);
	   $s$0 = $incdec$ptr;
	  }
	  while(1) {
	   $call = (_pat_next($p$0,-1,$inc,$flags)|0);
	   $cmp6$not = ($call|0)==(0);
	   if ((($call|0) == 0) | (($call|0) == 47)) {
	    break;
	   }
	   $1 = HEAP32[$inc>>2]|0;
	   $add$ptr = (($p$0) + ($1)|0);
	   $p$0 = $add$ptr;
	  }
	  $2 = HEAP8[$s$0>>0]|0;
	  $conv15 = $2 << 24 >> 24;
	  $cmp16 = ($call|0)!=($conv15|0);
	  $tobool18 = ($2<<24>>24)==(0);
	  $or$cond = $tobool18 | $tobool35;
	  $or$cond34 = $cmp16 & $or$cond;
	  if ($or$cond34) {
	   $retval$0 = 1;
	   label = 16;
	   break;
	  }
	  $sub$ptr$lhs$cast = $p$0;
	  $sub$ptr$rhs$cast = $pat$addr$0;
	  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	  $sub$ptr$lhs$cast22 = $s$0;
	  $sub$ptr$rhs$cast23 = $str$addr$0;
	  $sub$ptr$sub24 = (($sub$ptr$lhs$cast22) - ($sub$ptr$rhs$cast23))|0;
	  $call25 = (_fnmatch_internal($pat$addr$0,$sub$ptr$sub,$str$addr$0,$sub$ptr$sub24,$flags)|0);
	  $tobool26$not = ($call25|0)!=(0);
	  $brmerge = $tobool26$not | $cmp6$not;
	  $$mux = $tobool26$not&1;
	  if ($brmerge) {
	   $retval$0 = $$mux;
	   label = 16;
	   break;
	  }
	  $add$ptr32 = (($s$0) + 1|0);
	  $3 = HEAP32[$inc>>2]|0;
	  $add$ptr33 = (($p$0) + ($3)|0);
	  $pat$addr$0 = $add$ptr33;$str$addr$0 = $add$ptr32;
	 }
	 if ((label|0) == 16) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _pat_next($pat,$m,$step,$flags) {
	 $pat = $pat|0;
	 $m = $m|0;
	 $step = $step|0;
	 $flags = $flags|0;
	 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add128 = 0, $add152 = 0, $add85 = 0;
	 var $add85$inc93 = 0, $and = 0, $arrayidx102 = 0, $arrayidx115 = 0, $arrayidx124 = 0, $arrayidx18 = 0, $arrayidx3 = 0, $arrayidx33 = 0, $arrayidx44 = 0, $arrayidx55 = 0, $arrayidx89 = 0, $arrayidx98 = 0, $call = 0, $cmp108 = 0, $cmp108$ = 0, $cmp112 = 0, $cmp121 = 0, $cmp144 = 0, $cmp148 = 0, $cmp15 = 0;
	 var $cmp30 = 0, $cmp35 = 0, $cmp41 = 0, $cmp4176 = 0, $cmp51 = 0, $cmp61 = 0, $cmp86 = 0, $cmp95 = 0, $cmp9574 = 0, $conv143 = 0, $esc$0 = 0, $inc111 = 0, $inc120 = 0, $inc38 = 0, $inc38$k$0 = 0, $inc93 = 0, $k$0 = 0, $k$1$ph = 0, $k$177 = 0, $k$2$lcssa = 0;
	 var $k$2$ph = 0, $k$275 = 0, $k$3 = 0, $k$4 = 0, $not$cmp104 = 0, $or$cond = 0, $pat$addr$0 = 0, $retval$0 = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool100 = 0, $tobool116 = 0, $tobool125 = 0, $tobool5 = 0, $tobool57 = 0, $tobool7 = 0, $tobool91 = 0, $wc = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $wc = sp;
	 $tobool = ($m|0)==(0);
	 if (!($tobool)) {
	  $0 = HEAP8[$pat>>0]|0;
	  $tobool1 = ($0<<24>>24)==(0);
	  if (!($tobool1)) {
	   HEAP32[$step>>2] = 1;
	   $1 = HEAP8[$pat>>0]|0;
	   if ((($1<<24>>24) == 63)) {
	    label = 32;
	   } else if ((($1<<24>>24) == 91)) {
	    label = 9;
	   } else if ((($1<<24>>24) == 92)) {
	    label = 5;
	   } else if ((($1<<24>>24) == 42)) {
	    $retval$0 = -5;
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    $12 = $1;$esc$0 = 0;$pat$addr$0 = $pat;
	    label = 33;
	   }
	   do {
	    if ((label|0) == 5) {
	     $arrayidx3 = (($pat) + 1|0);
	     $2 = HEAP8[$arrayidx3>>0]|0;
	     $tobool5 = ($2<<24>>24)==(0);
	     if ($tobool5) {
	      $14 = 92;
	     } else {
	      $and = $flags & 2;
	      $tobool7 = ($and|0)==(0);
	      if ($tobool7) {
	       HEAP32[$step>>2] = 2;
	       $$pre = HEAP8[$arrayidx3>>0]|0;
	       $12 = $$pre;$esc$0 = 1;$pat$addr$0 = $arrayidx3;
	       label = 33;
	       break;
	      }
	      if ((($1<<24>>24) == 63)) {
	       label = 32;
	       break;
	      } else if ((($1<<24>>24) == 91)) {
	       label = 9;
	       break;
	      } else if ((($1<<24>>24) == 42)) {
	       $retval$0 = -5;
	      } else {
	       $12 = $1;$esc$0 = 0;$pat$addr$0 = $pat;
	       label = 33;
	       break;
	      }
	      STACKTOP = sp;return ($retval$0|0);
	     }
	    }
	   } while(0);
	   if ((label|0) == 9) {
	    $cmp15 = ($m>>>0)>(1);
	    if ($cmp15) {
	     $arrayidx18 = (($pat) + 1|0);
	     $3 = HEAP8[$arrayidx18>>0]|0;
	     if ((($3<<24>>24) == 33) | (($3<<24>>24) == 94)) {
	      $k$0 = 2;
	     } else {
	      $k$0 = 1;
	     }
	    } else {
	     $k$0 = 1;
	    }
	    $cmp30 = ($k$0>>>0)<($m>>>0);
	    if ($cmp30) {
	     $arrayidx33 = (($pat) + ($k$0)|0);
	     $4 = HEAP8[$arrayidx33>>0]|0;
	     $cmp35 = ($4<<24>>24)==(93);
	     $inc38 = $cmp35&1;
	     $inc38$k$0 = (($inc38) + ($k$0))|0;
	     $k$1$ph = $inc38$k$0;
	    } else {
	     $k$1$ph = $k$0;
	    }
	    $cmp4176 = ($k$1$ph>>>0)<($m>>>0);
	    L31: do {
	     if ($cmp4176) {
	      $k$177 = $k$1$ph;
	      while(1) {
	       $arrayidx44 = (($pat) + ($k$177)|0);
	       $5 = HEAP8[$arrayidx44>>0]|0;
	       if ((($5<<24>>24) == 93) | (($5<<24>>24) == 0)) {
	        $k$4 = $k$177;
	        label = 28;
	        break L31;
	       }
	       $add = (($k$177) + 1)|0;
	       $cmp51 = ($add>>>0)<($m>>>0);
	       if ($cmp51) {
	        $arrayidx55 = (($pat) + ($add)|0);
	        $6 = HEAP8[$arrayidx55>>0]|0;
	        $tobool57 = ($6<<24>>24)!=(0);
	        $cmp61 = ($5<<24>>24)==(91);
	        $or$cond = $tobool57 & $cmp61;
	        if ($or$cond) {
	         if ((($6<<24>>24) == 61) | (($6<<24>>24) == 46) | (($6<<24>>24) == 58)) {
	          $add85 = (($k$177) + 2)|0;
	          $cmp86 = ($add85>>>0)<($m>>>0);
	          if ($cmp86) {
	           $arrayidx89 = (($pat) + ($add85)|0);
	           $7 = HEAP8[$arrayidx89>>0]|0;
	           $tobool91 = ($7<<24>>24)==(0);
	           $inc93 = (($k$177) + 3)|0;
	           $add85$inc93 = $tobool91 ? $add85 : $inc93;
	           $k$2$ph = $add85$inc93;
	          } else {
	           $k$2$ph = $add85;
	          }
	          $cmp9574 = ($k$2$ph>>>0)<($m>>>0);
	          L42: do {
	           if ($cmp9574) {
	            $k$275 = $k$2$ph;
	            while(1) {
	             $arrayidx98 = (($pat) + ($k$275)|0);
	             $8 = HEAP8[$arrayidx98>>0]|0;
	             $tobool100 = ($8<<24>>24)==(0);
	             if ($tobool100) {
	              $k$2$lcssa = $k$275;
	              break L42;
	             }
	             $sub = (($k$275) + -1)|0;
	             $arrayidx102 = (($pat) + ($sub)|0);
	             $9 = HEAP8[$arrayidx102>>0]|0;
	             $cmp108 = ($8<<24>>24)!=(93);
	             $not$cmp104 = ($9<<24>>24)!=($6<<24>>24);
	             $cmp108$ = $cmp108 | $not$cmp104;
	             $inc111 = (($k$275) + 1)|0;
	             if (!($cmp108$)) {
	              $k$2$lcssa = $k$275;
	              break L42;
	             }
	             $cmp95 = ($inc111>>>0)<($m>>>0);
	             if ($cmp95) {
	              $k$275 = $inc111;
	             } else {
	              $k$2$lcssa = $inc111;
	              break;
	             }
	            }
	           } else {
	            $k$2$lcssa = $k$2$ph;
	           }
	          } while(0);
	          $cmp112 = ($k$2$lcssa|0)==($m|0);
	          if ($cmp112) {
	           break L31;
	          }
	          $arrayidx115 = (($pat) + ($k$2$lcssa)|0);
	          $10 = HEAP8[$arrayidx115>>0]|0;
	          $tobool116 = ($10<<24>>24)==(0);
	          if ($tobool116) {
	           $k$4 = $k$2$lcssa;
	           label = 28;
	           break L31;
	          } else {
	           $k$3 = $k$2$lcssa;
	          }
	         } else {
	          $k$3 = $k$177;
	         }
	        } else {
	         $k$3 = $k$177;
	        }
	       } else {
	        $k$3 = $k$177;
	       }
	       $inc120 = (($k$3) + 1)|0;
	       $cmp41 = ($inc120>>>0)<($m>>>0);
	       if ($cmp41) {
	        $k$177 = $inc120;
	       } else {
	        $k$4 = $inc120;
	        label = 28;
	        break;
	       }
	      }
	     } else {
	      $k$4 = $k$1$ph;
	      label = 28;
	     }
	    } while(0);
	    if ((label|0) == 28) {
	     $cmp121 = ($k$4|0)==($m|0);
	     if (!($cmp121)) {
	      $arrayidx124 = (($pat) + ($k$4)|0);
	      $11 = HEAP8[$arrayidx124>>0]|0;
	      $tobool125 = ($11<<24>>24)==(0);
	      if (!($tobool125)) {
	       $add128 = (($k$4) + 1)|0;
	       HEAP32[$step>>2] = $add128;
	       $retval$0 = -3;
	       STACKTOP = sp;return ($retval$0|0);
	      }
	     }
	    }
	    HEAP32[$step>>2] = 1;
	    $retval$0 = 91;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   else if ((label|0) == 32) {
	    $retval$0 = -4;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   else if ((label|0) == 33) {
	    $cmp144 = ($12<<24>>24)<(0);
	    if ($cmp144) {
	     $call = (_mbtowc($wc,$pat$addr$0,$m)|0);
	     $cmp148 = ($call|0)<(0);
	     if ($cmp148) {
	      HEAP32[$step>>2] = 0;
	      $retval$0 = -2;
	      STACKTOP = sp;return ($retval$0|0);
	     } else {
	      $add152 = (($call) + ($esc$0))|0;
	      HEAP32[$step>>2] = $add152;
	      $13 = HEAP32[$wc>>2]|0;
	      $retval$0 = $13;
	      STACKTOP = sp;return ($retval$0|0);
	     }
	    } else {
	     $14 = $12;
	    }
	   }
	   $conv143 = $14 << 24 >> 24;
	   $retval$0 = $conv143;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 HEAP32[$step>>2] = 0;
	 $retval$0 = 0;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _fnmatch_internal($pat,$m,$str,$n,$flags) {
	 $pat = $pat|0;
	 $m = $m|0;
	 $str = $str|0;
	 $n = $n|0;
	 $flags = $flags|0;
	 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
	 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr124$lcssa = 0, $add$ptr124$us = 0, $add$ptr124176$us = 0, $add$ptr124181$us = 0, $add$ptr154$us = 0, $add$ptr167$us = 0, $add$ptr30 = 0, $add$ptr33 = 0, $add$ptr40 = 0, $add$ptr43 = 0, $add$ptr46 = 0, $add$ptr83 = 0, $add$ptr83201 = 0;
	 var $add$ptr83208 = 0, $add$ptr96 = 0, $and = 0, $arrayidx = 0, $call = 0, $call$i = 0, $call$i101 = 0, $call$i115$us = 0, $call$i129$us = 0, $call$i143$us = 0, $call101 = 0, $call123$us = 0, $call123175$us = 0, $call123180$us = 0, $call141$us = 0, $call18 = 0, $call32 = 0, $call37 = 0, $call45 = 0, $call82 = 0;
	 var $call82$lcssa = 0, $call82200 = 0, $call82207 = 0, $cmp = 0, $cmp$i = 0, $cmp$i113$us = 0, $cmp$i127$us = 0, $cmp$i141$us = 0, $cmp$i99 = 0, $cmp109 = 0, $cmp116 = 0, $cmp116244 = 0, $cmp125$us = 0, $cmp125177$us = 0, $cmp149$us = 0, $cmp164$us = 0, $cmp175$us = 0, $cmp25 = 0, $cmp3 = 0, $cmp3$i = 0;
	 var $cmp3$i102 = 0, $cmp3$i116$us = 0, $cmp3$i130$us = 0, $cmp3$i144$us = 0, $cmp35 = 0, $cmp35221 = 0, $cmp47 = 0, $cmp52 = 0, $cmp52211 = 0, $cmp5794 = 0, $cmp65 = 0, $cmp68 = 0, $cmp88 = 0, $cmp9 = 0, $cmp91 = 0, $cond = 0, $conv63 = 0, $conv9$i = 0, $conv9$i106 = 0, $conv9$i120$us = 0;
	 var $conv9$i134$us = 0, $conv9$i148$us = 0, $dec = 0, $dec73 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr$sum = 0, $incdec$ptr62 = 0, $incdec$ptr62$phi$trans$insert = 0, $m$addr$0 = 0, $n$addr$0 = 0, $not$cmp12 = 0, $or$cond = 0, $or$cond213 = 0, $or$cond95 = 0, $p$0222 = 0, $p$1205 = 0, $p$1205$phi = 0, $p$2178$us = 0, $p$2178$us$phi = 0;
	 var $pat$addr$0 = 0, $pinc = 0, $ptail$0$lcssa = 0, $ptail$0223 = 0, $ptail$1 = 0, $retval$0 = 0, $retval$0$i = 0, $retval$0$i108 = 0, $retval$0$i122$us = 0, $retval$0$i122161$us = 0, $retval$0$i136$us = 0, $retval$0$i150$us = 0, $s$0$lcssa = 0, $s$0214 = 0, $s$1 = 0, $s$2 = 0, $s$4$lcssa = 0, $s$4179$us = 0, $str$addr$0 = 0, $str$addr$1$ph$ph247 = 0;
	 var $str$addr$1$ph242$us = 0, $str$addr$3$us = 0, $str$addr$3185$us = 0, $str$addr$3189$us = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast129 = 0, $sub$ptr$lhs$cast79 = 0, $sub$ptr$lhs$cast84 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast121$us = 0, $sub$ptr$rhs$cast121173245$pn = 0, $sub$ptr$rhs$cast121173245$pn$in = 0, $sub$ptr$rhs$cast130$us = 0, $sub$ptr$rhs$cast161$us = 0, $sub$ptr$rhs$cast172186$us$pn = 0, $sub$ptr$rhs$cast80 = 0, $sub$ptr$rhs$cast80198 = 0, $sub$ptr$rhs$cast85202$pn = 0, $sub$ptr$rhs$cast85202$pn$in = 0;
	 var $sub$ptr$sub = 0, $sub$ptr$sub122$us = 0, $sub$ptr$sub122174250 = 0, $sub$ptr$sub131$us = 0, $sub$ptr$sub162$us = 0, $sub$ptr$sub173190$us = 0, $sub$ptr$sub81 = 0, $sub$ptr$sub81199 = 0, $sub$ptr$sub86209 = 0, $sub31 = 0, $sub64 = 0, $tailcnt$0$lcssa = 0, $tailcnt$0224 = 0, $tailcnt$1 = 0, $tailcnt$2215 = 0, $tobool = 0, $tobool$i = 0, $tobool$i111$us = 0, $tobool$i125$us = 0, $tobool$i139$us = 0;
	 var $tobool$i139188$us = 0, $tobool$i97 = 0, $tobool$i97204 = 0, $tobool102 = 0, $tobool133$us = 0, $tobool142$us = 0, $tobool19 = 0, $tobool54 = 0, $tobool54$lcssa = 0, $tobool54212 = 0, $wc$i = 0, $wc$i110 = 0, $wc$i124 = 0, $wc$i138 = 0, $wc$i96 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $wc$i138 = sp + 20|0;
	 $wc$i124 = sp + 16|0;
	 $wc$i110 = sp + 12|0;
	 $wc$i96 = sp + 8|0;
	 $wc$i = sp + 4|0;
	 $pinc = sp;
	 $and = $flags & 4;
	 $tobool = ($and|0)==(0);
	 if (!($tobool)) {
	  $0 = HEAP8[$str>>0]|0;
	  $cmp = ($0<<24>>24)==(46);
	  if ($cmp) {
	   $1 = HEAP8[$pat>>0]|0;
	   $cmp3 = ($1<<24>>24)==(46);
	   if (!($cmp3)) {
	    $retval$0 = 1;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  }
	 }
	 $m$addr$0 = $m;$n$addr$0 = $n;$pat$addr$0 = $pat;$str$addr$0 = $str;
	 while(1) {
	  $call = (_pat_next($pat$addr$0,$m$addr$0,$pinc,$flags)|0);
	  if ((($call|0) == -5)) {
	   label = 6;
	   break;
	  } else if ((($call|0) == -2)) {
	   $retval$0 = 1;
	   label = 71;
	   break;
	  }
	  $tobool$i = ($n$addr$0|0)==(0);
	  if ($tobool$i) {
	   label = 14;
	   break;
	  }
	  $2 = HEAP8[$str$addr$0>>0]|0;
	  $cmp$i = ($2<<24>>24)<(0);
	  if ($cmp$i) {
	   $call$i = (_mbtowc($wc$i,$str$addr$0,$n$addr$0)|0);
	   $cmp3$i = ($call$i|0)<(0);
	   if ($cmp3$i) {
	    label = 14;
	    break;
	   }
	   $3 = HEAP32[$wc$i>>2]|0;
	   $4 = $call$i;$retval$0$i = $3;
	  } else {
	   $conv9$i = $2 << 24 >> 24;
	   $4 = 1;$retval$0$i = $conv9$i;
	  }
	  $cmp9 = ($retval$0$i|0)<(1);
	  if ($cmp9) {
	   label = 14;
	   break;
	  }
	  $add$ptr = (($str$addr$0) + ($4)|0);
	  $sub = (($n$addr$0) - ($4))|0;
	  if ((($call|0) == -3)) {
	   $call18 = (_match_bracket($pat$addr$0,$retval$0$i)|0);
	   $tobool19 = ($call18|0)==(0);
	   if ($tobool19) {
	    $retval$0 = 1;
	    label = 71;
	    break;
	   }
	  } else if (!((($call|0) == -4))) {
	   $cmp25 = ($retval$0$i|0)==($call|0);
	   if (!($cmp25)) {
	    $retval$0 = 1;
	    label = 71;
	    break;
	   }
	  }
	  $5 = HEAP32[$pinc>>2]|0;
	  $add$ptr30 = (($pat$addr$0) + ($5)|0);
	  $sub31 = (($m$addr$0) - ($5))|0;
	  $m$addr$0 = $sub31;$n$addr$0 = $sub;$pat$addr$0 = $add$ptr30;$str$addr$0 = $add$ptr;
	 }
	 if ((label|0) == 6) {
	  $incdec$ptr = (($pat$addr$0) + 1|0);
	  $dec = (($m$addr$0) + -1)|0;
	  $call32 = (_strnlen($incdec$ptr,$dec)|0);
	  $incdec$ptr$sum = (($call32) + 1)|0;
	  $add$ptr33 = (($pat$addr$0) + ($incdec$ptr$sum)|0);
	  $cmp35221 = ($incdec$ptr$sum|0)>(1);
	  L22: do {
	   if ($cmp35221) {
	    $sub$ptr$lhs$cast = $add$ptr33;
	    $p$0222 = $incdec$ptr;$ptail$0223 = $incdec$ptr;$tailcnt$0224 = 0;
	    while(1) {
	     $sub$ptr$rhs$cast = $p$0222;
	     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	     $call37 = (_pat_next($p$0222,$sub$ptr$sub,$pinc,$flags)|0);
	     if ((($call37|0) == -5)) {
	      $add$ptr40 = (($p$0222) + 1|0);
	      $ptail$1 = $add$ptr40;$tailcnt$1 = 0;
	     } else if ((($call37|0) == -2)) {
	      $retval$0 = 1;
	      break;
	     } else {
	      $inc = (($tailcnt$0224) + 1)|0;
	      $ptail$1 = $ptail$0223;$tailcnt$1 = $inc;
	     }
	     $6 = HEAP32[$pinc>>2]|0;
	     $add$ptr43 = (($p$0222) + ($6)|0);
	     $cmp35 = ($add$ptr43>>>0)<($add$ptr33>>>0);
	     if ($cmp35) {
	      $p$0222 = $add$ptr43;$ptail$0223 = $ptail$1;$tailcnt$0224 = $tailcnt$1;
	     } else {
	      $ptail$0$lcssa = $ptail$1;$tailcnt$0$lcssa = $tailcnt$1;
	      break L22;
	     }
	    }
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    $ptail$0$lcssa = $incdec$ptr;$tailcnt$0$lcssa = 0;
	   }
	  } while(0);
	  $call45 = (_strnlen($str$addr$0,$n$addr$0)|0);
	  $add$ptr46 = (($str$addr$0) + ($call45)|0);
	  $cmp47 = ($call45>>>0)<($tailcnt$0$lcssa>>>0);
	  if ($cmp47) {
	   $retval$0 = 1;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $cmp52211 = ($call45|0)<(1);
	  $tobool54212 = ($tailcnt$0$lcssa|0)==(0);
	  $or$cond213 = $cmp52211 | $tobool54212;
	  if ($or$cond213) {
	   $s$0$lcssa = $add$ptr46;$tobool54$lcssa = $tobool54212;
	  } else {
	   $s$0214 = $add$ptr46;$tailcnt$2215 = $tailcnt$0$lcssa;
	   while(1) {
	    $arrayidx = (($s$0214) + -1|0);
	    $7 = HEAP8[$arrayidx>>0]|0;
	    $cmp5794 = ($7<<24>>24)>(-1);
	    L38: do {
	     if ($cmp5794) {
	      $s$2 = $arrayidx;
	     } else {
	      $8 = $7;$s$1 = $s$0214;
	      while(1) {
	       $incdec$ptr62 = (($s$1) + -1|0);
	       $conv63 = $8&255;
	       $sub64 = (($conv63) + -128)|0;
	       $cmp65 = ($sub64>>>0)<(64);
	       $cmp68 = ($incdec$ptr62>>>0)>($str$addr$0>>>0);
	       $or$cond95 = $cmp65 & $cmp68;
	       if (!($or$cond95)) {
	        $s$2 = $incdec$ptr62;
	        break L38;
	       }
	       $incdec$ptr62$phi$trans$insert = (($s$1) + -2|0);
	       $$pre = HEAP8[$incdec$ptr62$phi$trans$insert>>0]|0;
	       $8 = $$pre;$s$1 = $incdec$ptr62;
	      }
	     }
	    } while(0);
	    $dec73 = (($tailcnt$2215) + -1)|0;
	    $cmp52 = ($s$2>>>0)<=($str$addr$0>>>0);
	    $tobool54 = ($dec73|0)==(0);
	    $or$cond = $cmp52 | $tobool54;
	    if ($or$cond) {
	     $s$0$lcssa = $s$2;$tobool54$lcssa = $tobool54;
	     break;
	    } else {
	     $s$0214 = $s$2;$tailcnt$2215 = $dec73;
	    }
	   }
	  }
	  if (!($tobool54$lcssa)) {
	   $retval$0 = 1;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $sub$ptr$lhs$cast79 = $add$ptr33;
	  $sub$ptr$rhs$cast80198 = $ptail$0$lcssa;
	  $sub$ptr$sub81199 = (($sub$ptr$lhs$cast79) - ($sub$ptr$rhs$cast80198))|0;
	  $call82200 = (_pat_next($ptail$0$lcssa,$sub$ptr$sub81199,$pinc,$flags)|0);
	  $9 = HEAP32[$pinc>>2]|0;
	  $sub$ptr$lhs$cast84 = $add$ptr46;
	  $tobool$i97204 = ($add$ptr46|0)==($s$0$lcssa|0);
	  L47: do {
	   if ($tobool$i97204) {
	    $call82$lcssa = $call82200;
	   } else {
	    $add$ptr83201 = (($ptail$0$lcssa) + ($9)|0);
	    $add$ptr83208 = $add$ptr83201;$call82207 = $call82200;$p$1205 = $ptail$0$lcssa;$sub$ptr$rhs$cast85202$pn$in = $s$0$lcssa;
	    while(1) {
	     $10 = HEAP8[$sub$ptr$rhs$cast85202$pn$in>>0]|0;
	     $cmp$i99 = ($10<<24>>24)<(0);
	     if ($cmp$i99) {
	      $sub$ptr$rhs$cast85202$pn = $sub$ptr$rhs$cast85202$pn$in;
	      $sub$ptr$sub86209 = (($sub$ptr$lhs$cast84) - ($sub$ptr$rhs$cast85202$pn))|0;
	      $call$i101 = (_mbtowc($wc$i96,$sub$ptr$rhs$cast85202$pn$in,$sub$ptr$sub86209)|0);
	      $cmp3$i102 = ($call$i101|0)<(0);
	      if ($cmp3$i102) {
	       $call82$lcssa = $call82207;
	       break L47;
	      }
	      $11 = HEAP32[$wc$i96>>2]|0;
	      $12 = $call$i101;$retval$0$i108 = $11;
	     } else {
	      $conv9$i106 = $10 << 24 >> 24;
	      $12 = 1;$retval$0$i108 = $conv9$i106;
	     }
	     $cmp88 = ($retval$0$i108|0)<(1);
	     if ($cmp88) {
	      $call82$lcssa = $call82207;
	      break L47;
	     }
	     $add$ptr96 = (($sub$ptr$rhs$cast85202$pn$in) + ($12)|0);
	     if ((($call82207|0) == -3)) {
	      $call101 = (_match_bracket($p$1205,$retval$0$i108)|0);
	      $tobool102 = ($call101|0)==(0);
	      if ($tobool102) {
	       $retval$0 = 1;
	       label = 71;
	       break;
	      }
	     } else if (!((($call82207|0) == -4))) {
	      $cmp109 = ($retval$0$i108|0)==($call82207|0);
	      if (!($cmp109)) {
	       $retval$0 = 1;
	       label = 71;
	       break;
	      }
	     }
	     $sub$ptr$rhs$cast80 = $add$ptr83208;
	     $sub$ptr$sub81 = (($sub$ptr$lhs$cast79) - ($sub$ptr$rhs$cast80))|0;
	     $call82 = (_pat_next($add$ptr83208,$sub$ptr$sub81,$pinc,$flags)|0);
	     $13 = HEAP32[$pinc>>2]|0;
	     $add$ptr83 = (($add$ptr83208) + ($13)|0);
	     $tobool$i97 = ($add$ptr46|0)==($add$ptr96|0);
	     if ($tobool$i97) {
	      $call82$lcssa = $call82;
	      break L47;
	     } else {
	      $p$1205$phi = $add$ptr83208;$add$ptr83208 = $add$ptr83;$call82207 = $call82;$sub$ptr$rhs$cast85202$pn$in = $add$ptr96;$p$1205 = $p$1205$phi;
	     }
	    }
	    if ((label|0) == 71) {
	     STACKTOP = sp;return ($retval$0|0);
	    }
	   }
	  } while(0);
	  $cmp91 = ($call82$lcssa|0)==(0);
	  if (!($cmp91)) {
	   $retval$0 = 1;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $cmp116244 = ($incdec$ptr>>>0)<($ptail$0$lcssa>>>0);
	  $sub$ptr$lhs$cast129 = $s$0$lcssa;
	  if (!($cmp116244)) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $str$addr$1$ph$ph247 = $str$addr$0;$sub$ptr$rhs$cast121173245$pn$in = $incdec$ptr;
	  L71: while(1) {
	   $sub$ptr$rhs$cast121173245$pn = $sub$ptr$rhs$cast121173245$pn$in;
	   $sub$ptr$sub122174250 = (($sub$ptr$rhs$cast80198) - ($sub$ptr$rhs$cast121173245$pn))|0;
	   $str$addr$1$ph242$us = $str$addr$1$ph$ph247;
	   L73: while(1) {
	    $call123175$us = (_pat_next($sub$ptr$rhs$cast121173245$pn$in,$sub$ptr$sub122174250,$pinc,$flags)|0);
	    $23 = HEAP32[$pinc>>2]|0;
	    $add$ptr124176$us = (($sub$ptr$rhs$cast121173245$pn$in) + ($23)|0);
	    $cmp125177$us = ($call123175$us|0)==(-5);
	    if ($cmp125177$us) {
	     $add$ptr124$lcssa = $add$ptr124176$us;$s$4$lcssa = $str$addr$1$ph242$us;
	     break;
	    } else {
	     $add$ptr124181$us = $add$ptr124176$us;$call123180$us = $call123175$us;$p$2178$us = $sub$ptr$rhs$cast121173245$pn$in;$s$4179$us = $str$addr$1$ph242$us;
	    }
	    while(1) {
	     $sub$ptr$rhs$cast130$us = $s$4179$us;
	     $sub$ptr$sub131$us = (($sub$ptr$lhs$cast129) - ($sub$ptr$rhs$cast130$us))|0;
	     $tobool$i111$us = ($s$0$lcssa|0)==($s$4179$us|0);
	     if ($tobool$i111$us) {
	      $retval$0 = 1;
	      label = 71;
	      break L71;
	     }
	     $14 = HEAP8[$s$4179$us>>0]|0;
	     $cmp$i113$us = ($14<<24>>24)<(0);
	     if ($cmp$i113$us) {
	      $call$i115$us = (_mbtowc($wc$i110,$s$4179$us,$sub$ptr$sub131$us)|0);
	      $cmp3$i116$us = ($call$i115$us|0)<(0);
	      if ($cmp3$i116$us) {
	       $21 = 1;$retval$0$i122161$us = -1;
	      } else {
	       $15 = HEAP32[$wc$i110>>2]|0;
	       $24 = $call$i115$us;$retval$0$i122$us = $15;
	       label = 51;
	      }
	     } else {
	      $conv9$i120$us = $14 << 24 >> 24;
	      $24 = 1;$retval$0$i122$us = $conv9$i120$us;
	      label = 51;
	     }
	     if ((label|0) == 51) {
	      label = 0;
	      $tobool133$us = ($retval$0$i122$us|0)==(0);
	      if ($tobool133$us) {
	       $retval$0 = 1;
	       label = 71;
	       break L71;
	      } else {
	       $21 = $24;$retval$0$i122161$us = $retval$0$i122$us;
	      }
	     }
	     if ((($call123180$us|0) == -3)) {
	      $call141$us = (_match_bracket($p$2178$us,$retval$0$i122161$us)|0);
	      $tobool142$us = ($call141$us|0)==(0);
	      if ($tobool142$us) {
	       break;
	      }
	     } else if (!((($call123180$us|0) == -4))) {
	      $cmp149$us = ($retval$0$i122161$us|0)==($call123180$us|0);
	      if (!($cmp149$us)) {
	       break;
	      }
	     }
	     $add$ptr154$us = (($s$4179$us) + ($21)|0);
	     $sub$ptr$rhs$cast121$us = $add$ptr124181$us;
	     $sub$ptr$sub122$us = (($sub$ptr$rhs$cast80198) - ($sub$ptr$rhs$cast121$us))|0;
	     $call123$us = (_pat_next($add$ptr124181$us,$sub$ptr$sub122$us,$pinc,$flags)|0);
	     $22 = HEAP32[$pinc>>2]|0;
	     $add$ptr124$us = (($add$ptr124181$us) + ($22)|0);
	     $cmp125$us = ($call123$us|0)==(-5);
	     if ($cmp125$us) {
	      $add$ptr124$lcssa = $add$ptr124$us;$s$4$lcssa = $add$ptr154$us;
	      break L73;
	     } else {
	      $p$2178$us$phi = $add$ptr124181$us;$add$ptr124181$us = $add$ptr124$us;$call123180$us = $call123$us;$s$4179$us = $add$ptr154$us;$p$2178$us = $p$2178$us$phi;
	     }
	    }
	    $sub$ptr$rhs$cast161$us = $str$addr$1$ph242$us;
	    $sub$ptr$sub162$us = (($sub$ptr$lhs$cast129) - ($sub$ptr$rhs$cast161$us))|0;
	    $tobool$i125$us = ($s$0$lcssa|0)==($str$addr$1$ph242$us|0);
	    do {
	     if (!($tobool$i125$us)) {
	      $16 = HEAP8[$str$addr$1$ph242$us>>0]|0;
	      $cmp$i127$us = ($16<<24>>24)<(0);
	      if ($cmp$i127$us) {
	       $call$i129$us = (_mbtowc($wc$i124,$str$addr$1$ph242$us,$sub$ptr$sub162$us)|0);
	       $cmp3$i130$us = ($call$i129$us|0)<(0);
	       if ($cmp3$i130$us) {
	        break;
	       }
	       $17 = HEAP32[$wc$i124>>2]|0;
	       $18 = $call$i129$us;$retval$0$i136$us = $17;
	      } else {
	       $conv9$i134$us = $16 << 24 >> 24;
	       $18 = 1;$retval$0$i136$us = $conv9$i134$us;
	      }
	      $cmp164$us = ($retval$0$i136$us|0)>(0);
	      if ($cmp164$us) {
	       $add$ptr167$us = (($str$addr$1$ph242$us) + ($18)|0);
	       $str$addr$1$ph242$us = $add$ptr167$us;
	       continue L73;
	      }
	     }
	    } while(0);
	    $str$addr$3185$us = (($str$addr$1$ph242$us) + 1|0);
	    $tobool$i139188$us = ($s$0$lcssa|0)==($str$addr$3185$us|0);
	    if ($tobool$i139188$us) {
	     $str$addr$1$ph242$us = $s$0$lcssa;
	     continue;
	    } else {
	     $str$addr$3189$us = $str$addr$3185$us;
	    }
	    while(1) {
	     $19 = HEAP8[$str$addr$3189$us>>0]|0;
	     $cmp$i141$us = ($19<<24>>24)<(0);
	     if ($cmp$i141$us) {
	      $sub$ptr$rhs$cast172186$us$pn = $str$addr$3189$us;
	      $sub$ptr$sub173190$us = (($sub$ptr$lhs$cast129) - ($sub$ptr$rhs$cast172186$us$pn))|0;
	      $call$i143$us = (_mbtowc($wc$i138,$str$addr$3189$us,$sub$ptr$sub173190$us)|0);
	      $cmp3$i144$us = ($call$i143$us|0)<(0);
	      if (!($cmp3$i144$us)) {
	       $20 = HEAP32[$wc$i138>>2]|0;
	       $retval$0$i150$us = $20;
	       label = 66;
	      }
	     } else {
	      $conv9$i148$us = $19 << 24 >> 24;
	      $retval$0$i150$us = $conv9$i148$us;
	      label = 66;
	     }
	     if ((label|0) == 66) {
	      label = 0;
	      $cmp175$us = ($retval$0$i150$us|0)<(0);
	      if (!($cmp175$us)) {
	       $str$addr$1$ph242$us = $str$addr$3189$us;
	       continue L73;
	      }
	     }
	     $str$addr$3$us = (($str$addr$3189$us) + 1|0);
	     $tobool$i139$us = ($s$0$lcssa|0)==($str$addr$3$us|0);
	     if ($tobool$i139$us) {
	      $str$addr$1$ph242$us = $s$0$lcssa;
	      continue L73;
	     } else {
	      $str$addr$3189$us = $str$addr$3$us;
	     }
	    }
	   }
	   $cmp116 = ($add$ptr124$lcssa>>>0)<($ptail$0$lcssa>>>0);
	   if ($cmp116) {
	    $str$addr$1$ph$ph247 = $s$4$lcssa;$sub$ptr$rhs$cast121173245$pn$in = $add$ptr124$lcssa;
	   } else {
	    $retval$0 = 0;
	    label = 71;
	    break;
	   }
	  }
	  if ((label|0) == 71) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 else if ((label|0) == 14) {
	  $not$cmp12 = ($call|0)!=(0);
	  $cond = $not$cmp12&1;
	  $retval$0 = $cond;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 else if ((label|0) == 71) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _match_bracket($p,$k) {
	 $p = $p|0;
	 $k = $k|0;
	 var $$pre = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr132 = 0;
	 var $add$ptr58 = 0, $add$ptr80 = 0, $add$ptr83 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx37 = 0, $arrayidx65 = 0, $arrayidx84 = 0, $buf = 0, $call = 0, $call109 = 0, $call110 = 0, $call126 = 0, $cmp10 = 0, $cmp12046 = 0, $cmp127 = 0, $cmp134 = 0, $cmp19 = 0, $cmp39 = 0, $cmp42 = 0;
	 var $cmp46 = 0, $cmp50 = 0, $cmp86 = 0, $cmp90 = 0, $cmp93 = 0, $cmp97 = 0, $conv123 = 0, $conv29 = 0, $incdec$ptr = 0, $incdec$ptr14 = 0, $incdec$ptr141 = 0, $incdec$ptr26 = 0, $incdec$ptr5 = 0, $incdec$ptr92 = 0, $inv$0 = 0, $p$addr$0 = 0, $p$addr$1 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4 = 0;
	 var $p$addr$5 = 0, $retval$0 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub131 = 0, $sub49 = 0, $sub57 = 0, $tobool111 = 0, $wc = 0, $wc2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $wc = sp + 4|0;
	 $wc2 = sp;
	 $buf = sp + 8|0;
	 $incdec$ptr = (($p) + 1|0);
	 $0 = HEAP8[$incdec$ptr>>0]|0;
	 if ((($0<<24>>24) == 33) | (($0<<24>>24) == 94)) {
	  $incdec$ptr5 = (($p) + 2|0);
	  $$pre = HEAP8[$incdec$ptr5>>0]|0;
	  $16 = $$pre;$inv$0 = 1;$p$addr$0 = $incdec$ptr5;
	 } else {
	  $16 = $0;$inv$0 = 0;$p$addr$0 = $incdec$ptr;
	 }
	 do {
	  if ((($16<<24>>24) == 93)) {
	   $cmp10 = ($k|0)==(93);
	   if (!($cmp10)) {
	    $incdec$ptr14 = (($p$addr$0) + 1|0);
	    $p$addr$1 = $incdec$ptr14;
	    break;
	   }
	   $1 = $inv$0 ^ 1;
	   $retval$0 = $1;
	   STACKTOP = sp;return ($retval$0|0);
	  } else if ((($16<<24>>24) == 45)) {
	   $cmp19 = ($k|0)==(45);
	   if (!($cmp19)) {
	    $incdec$ptr26 = (($p$addr$0) + 1|0);
	    $p$addr$1 = $incdec$ptr26;
	    break;
	   }
	   $2 = $inv$0 ^ 1;
	   $retval$0 = $2;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $p$addr$1 = $p$addr$0;
	  }
	 } while(0);
	 $arrayidx = (($p$addr$1) + -1|0);
	 $3 = HEAP8[$arrayidx>>0]|0;
	 $conv29 = $3 << 24 >> 24;
	 HEAP32[$wc>>2] = $conv29;
	 $p$addr$2 = $p$addr$1;
	 while(1) {
	  $4 = HEAP8[$p$addr$2>>0]|0;
	  if ((($4<<24>>24) == 91)) {
	   $arrayidx65 = (($p$addr$2) + 1|0);
	   $9 = HEAP8[$arrayidx65>>0]|0;
	   if ((($9<<24>>24) == 61) | (($9<<24>>24) == 46) | (($9<<24>>24) == 58)) {
	    $add$ptr83 = (($p$addr$2) + 3|0);
	    $p$addr$3 = $add$ptr83;
	    while(1) {
	     $arrayidx84 = (($p$addr$3) + -1|0);
	     $10 = HEAP8[$arrayidx84>>0]|0;
	     $cmp86 = ($10<<24>>24)==($9<<24>>24);
	     if ($cmp86) {
	      $11 = HEAP8[$p$addr$3>>0]|0;
	      $cmp90 = ($11<<24>>24)==(93);
	      if ($cmp90) {
	       break;
	      }
	     }
	     $incdec$ptr92 = (($p$addr$3) + 1|0);
	     $p$addr$3 = $incdec$ptr92;
	    }
	    $add$ptr80 = (($p$addr$2) + 2|0);
	    $cmp93 = ($9<<24>>24)==(58);
	    if ($cmp93) {
	     $sub$ptr$lhs$cast = $arrayidx84;
	     $sub$ptr$rhs$cast = $add$ptr80;
	     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	     $cmp97 = ($sub$ptr$sub|0)<(16);
	     if ($cmp97) {
	      _memcpy(($buf|0),($add$ptr80|0),($sub$ptr$sub|0))|0;
	      $arrayidx108 = (($buf) + ($sub$ptr$sub)|0);
	      HEAP8[$arrayidx108>>0] = 0;
	      $call109 = (_wctype($buf)|0);
	      $call110 = (_iswctype($k,$call109)|0);
	      $tobool111 = ($call110|0)==(0);
	      if ($tobool111) {
	       $p$addr$5 = $p$addr$3;
	      } else {
	       label = 26;
	       break;
	      }
	     } else {
	      $p$addr$5 = $p$addr$3;
	     }
	    } else {
	     $p$addr$5 = $p$addr$3;
	    }
	   } else {
	    $13 = 91;
	    label = 28;
	   }
	  } else if ((($4<<24>>24) == 93)) {
	   $retval$0 = $inv$0;
	   label = 34;
	   break;
	  } else if ((($4<<24>>24) == 45)) {
	   $arrayidx37 = (($p$addr$2) + 1|0);
	   $5 = HEAP8[$arrayidx37>>0]|0;
	   $cmp39 = ($5<<24>>24)==(93);
	   if ($cmp39) {
	    $13 = 45;
	    label = 28;
	   } else {
	    $call = (_mbtowc($wc2,$arrayidx37,4)|0);
	    $cmp42 = ($call|0)<(0);
	    if ($cmp42) {
	     $retval$0 = 0;
	     label = 34;
	     break;
	    }
	    $6 = HEAP32[$wc>>2]|0;
	    $7 = HEAP32[$wc2>>2]|0;
	    $cmp46 = ($6|0)>($7|0);
	    if (!($cmp46)) {
	     $sub = (($k) - ($6))|0;
	     $sub49 = (($7) - ($6))|0;
	     $cmp50 = ($sub>>>0)>($sub49>>>0);
	     if (!($cmp50)) {
	      label = 16;
	      break;
	     }
	    }
	    $sub57 = (($call) + -1)|0;
	    $add$ptr58 = (($p$addr$2) + ($sub57)|0);
	    $p$addr$5 = $add$ptr58;
	   }
	  } else {
	   $cmp12046 = ($4<<24>>24)>(-1);
	   if ($cmp12046) {
	    $13 = $4;
	    label = 28;
	   } else {
	    $call126 = (_mbtowc($wc,$p$addr$2,4)|0);
	    $cmp127 = ($call126|0)<(0);
	    if ($cmp127) {
	     $retval$0 = 0;
	     label = 34;
	     break;
	    }
	    $sub131 = (($call126) + -1)|0;
	    $add$ptr132 = (($p$addr$2) + ($sub131)|0);
	    $$pre47 = HEAP32[$wc>>2]|0;
	    $14 = $$pre47;$p$addr$4 = $add$ptr132;
	    label = 31;
	   }
	  }
	  if ((label|0) == 28) {
	   label = 0;
	   $conv123 = $13&255;
	   HEAP32[$wc>>2] = $conv123;
	   $14 = $conv123;$p$addr$4 = $p$addr$2;
	   label = 31;
	  }
	  if ((label|0) == 31) {
	   label = 0;
	   $cmp134 = ($14|0)==($k|0);
	   if ($cmp134) {
	    label = 32;
	    break;
	   } else {
	    $p$addr$5 = $p$addr$4;
	   }
	  }
	  $incdec$ptr141 = (($p$addr$5) + 1|0);
	  $p$addr$2 = $incdec$ptr141;
	 }
	 if ((label|0) == 16) {
	  $8 = $inv$0 ^ 1;
	  $retval$0 = $8;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 else if ((label|0) == 26) {
	  $12 = $inv$0 ^ 1;
	  $retval$0 = $12;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 else if ((label|0) == 32) {
	  $15 = $inv$0 ^ 1;
	  $retval$0 = $15;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 else if ((label|0) == 34) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _glob($pat,$flags,$errfunc,$g) {
	 $pat = $pat|0;
	 $flags = $flags|0;
	 $errfunc = $errfunc|0;
	 $g = $g|0;
	 var $$pre = 0, $$pre86 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
	 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add1$i = 0, $add50 = 0, $add51 = 0, $add58 = 0, $add60 = 0;
	 var $add61 = 0, $add83 = 0, $add90 = 0, $add94 = 0, $and = 0, $and12 = 0, $and33 = 0, $and95 = 0, $arraydecay = 0, $arrayidx85 = 0, $arrayidx92 = 0, $call = 0, $call$i = 0, $call19 = 0, $call36 = 0, $call52 = 0, $call63 = 0, $cmp = 0, $cmp21 = 0, $cmp3 = 0;
	 var $cmp5 = 0, $cmp7075 = 0, $cmp8072 = 0, $cnt$078 = 0, $cnt$1 = 0, $cond = 0, $d$0 = 0, $error$068 = 0, $exitcond = 0, $gl_offs = 0, $gl_offs15 = 0, $gl_pathv = 0, $gl_pathv48 = 0, $gl_pathv64 = 0, $gl_pathv91$pre$phiZ2D = 0, $head = 0, $i$1$lcssa = 0, $i$173 = 0, $ignore_err$errfunc = 0, $inc = 0;
	 var $inc88 = 0, $incdec$ptr = 0, $match$02$i = 0, $match$02$i56 = 0, $match$02$i62 = 0, $mul = 0, $mul62 = 0, $name3$i = 0, $next$pre$phiZ2D = 0, $offs$0 = 0, $p$0 = 0, $p$1 = 0, $retval$0 = 0, $tail = 0, $tmpcast$idx$val = 0, $tmpcast$idx51$val = 0, $tmpcast$idx52$val = 0, $tobool = 0, $tobool$i = 0, $tobool$i53 = 0;
	 var $tobool$i58 = 0, $tobool$i64 = 0, $tobool1$i = 0, $tobool1$i55 = 0, $tobool1$i61 = 0, $tobool13 = 0, $tobool17 = 0, $tobool26 = 0, $tobool2677 = 0, $tobool31 = 0, $tobool34 = 0, $tobool53 = 0, $tobool66 = 0, $tobool9 = 0, $tobool96 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $head = sp;
	 $tail = sp + 8|0;
	 $0 = 152816;
	 $1 = $0;
	 $2 = HEAP32[$1>>2]|0;
	 $3 = (($0) + 4)|0;
	 $4 = $3;
	 $5 = HEAP32[$4>>2]|0;
	 $6 = $head;
	 $7 = $6;
	 HEAP32[$7>>2] = $2;
	 $8 = (($6) + 4)|0;
	 $9 = $8;
	 HEAP32[$9>>2] = $5;
	 HEAP32[$tail>>2] = $head;
	 $and = $flags & 8;
	 $tobool = ($and|0)==(0);
	 $10 = $2;
	 if ($tobool) {
	  $cond = 0;
	 } else {
	  $gl_offs = (($g) + 8|0);
	  $11 = HEAP32[$gl_offs>>2]|0;
	  $cond = $11;
	 }
	 $12 = HEAP8[$pat>>0]|0;
	 $cmp = ($12<<24>>24)==(47);
	 L4: do {
	  if ($cmp) {
	   $13 = 47;$p$0 = $pat;
	   while(1) {
	    $cmp3 = ($13<<24>>24)==(47);
	    $incdec$ptr = (($p$0) + 1|0);
	    if (!($cmp3)) {
	     $30 = $13;$d$0 = 152824;$p$1 = $p$0;
	     break L4;
	    }
	    $$pre86 = HEAP8[$incdec$ptr>>0]|0;
	    $13 = $$pre86;$p$0 = $incdec$ptr;
	   }
	  } else {
	   $30 = $12;$d$0 = 152832;$p$1 = $pat;
	  }
	 } while(0);
	 $call = (_strlen(($p$1|0))|0);
	 $cmp5 = ($call>>>0)>(4096);
	 if ($cmp5) {
	  $retval$0 = 1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $tobool9 = ($errfunc|0)==(0|0);
	 $ignore_err$errfunc = $tobool9 ? 17 : $errfunc;
	 $and12 = $flags & 32;
	 $tobool13 = ($and12|0)!=(0);
	 if ($tobool13) {
	  $14 = $30;
	 } else {
	  $gl_offs15 = (($g) + 8|0);
	  HEAP32[$gl_offs15>>2] = $cond;
	  HEAP32[$g>>2] = 0;
	  $gl_pathv = (($g) + 4|0);
	  HEAP32[$gl_pathv>>2] = 0;
	  $$pre = HEAP8[$p$1>>0]|0;
	  $14 = $$pre;
	 }
	 $tobool17 = ($14<<24>>24)==(0);
	 if ($tobool17) {
	  $16 = $10;$error$068 = 0;$next$pre$phiZ2D = $head;
	 } else {
	  $call19 = (_match_in_dir($d$0,$p$1,$flags,$ignore_err$errfunc,$tail)|0);
	  $cmp21 = ($call19|0)==(1);
	  $tmpcast$idx52$val = HEAP32[$head>>2]|0;
	  if ($cmp21) {
	   $tobool1$i = ($tmpcast$idx52$val|0)==(0|0);
	   if ($tobool1$i) {
	    $retval$0 = 1;
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    $match$02$i = $tmpcast$idx52$val;
	   }
	   while(1) {
	    $15 = HEAP32[$match$02$i>>2]|0;
	    _free($match$02$i);
	    $tobool$i = ($15|0)==(0|0);
	    if ($tobool$i) {
	     $retval$0 = 1;
	     break;
	    } else {
	     $match$02$i = $15;
	    }
	   }
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $16 = $tmpcast$idx52$val;$error$068 = $call19;$next$pre$phiZ2D = $head;
	  }
	 }
	 HEAP32[$tail>>2] = $16;
	 $tobool2677 = ($16|0)==(0|0);
	 if ($tobool2677) {
	  label = 17;
	 } else {
	  $18 = $16;$cnt$078 = 0;
	  while(1) {
	   $17 = HEAP32[$18>>2]|0;
	   $inc = (($cnt$078) + 1)|0;
	   $tobool26 = ($17|0)==(0|0);
	   if ($tobool26) {
	    break;
	   } else {
	    $18 = $17;$cnt$078 = $inc;
	   }
	  }
	  HEAP32[$tail>>2] = 0;
	  $tobool31 = ($inc|0)==(0);
	  if ($tobool31) {
	   label = 17;
	  } else {
	   $cnt$1 = $inc;
	  }
	 }
	 do {
	  if ((label|0) == 17) {
	   $and33 = $flags & 16;
	   $tobool34 = ($and33|0)==(0);
	   if ($tobool34) {
	    $retval$0 = 3;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   HEAP32[$tail>>2] = $head;
	   $call36 = (_strlen(($pat|0))|0);
	   $add1$i = (($call36) + 9)|0;
	   $call$i = (_malloc($add1$i)|0);
	   $tobool$i53 = ($call$i|0)==(0|0);
	   if ($tobool$i53) {
	    $retval$0 = 1;
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    HEAP32[$head>>2] = $call$i;
	    HEAP32[$call$i>>2] = 0;
	    $name3$i = (($call$i) + 4|0);
	    (_strcpy(($name3$i|0),($pat|0))|0);
	    HEAP32[$tail>>2] = $call$i;
	    $cnt$1 = 1;
	    break;
	   }
	  }
	 } while(0);
	 do {
	  if ($tobool13) {
	   $gl_pathv48 = (($g) + 4|0);
	   $19 = HEAP32[$gl_pathv48>>2]|0;
	   $20 = HEAP32[$g>>2]|0;
	   $add = (($cnt$1) + ($cond))|0;
	   $add50 = (($add) + ($20))|0;
	   $add51 = $add50 << 2;
	   $mul = (($add51) + 4)|0;
	   $call52 = (_realloc($19,$mul)|0);
	   $tobool53 = ($call52|0)==(0|0);
	   if (!($tobool53)) {
	    HEAP32[$gl_pathv48>>2] = $call52;
	    $add58 = (($20) + ($cond))|0;
	    $26 = $call52;$offs$0 = $add58;
	    break;
	   }
	   $tmpcast$idx51$val = HEAP32[$next$pre$phiZ2D>>2]|0;
	   $tobool1$i55 = ($tmpcast$idx51$val|0)==(0|0);
	   if ($tobool1$i55) {
	    $retval$0 = 1;
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    $match$02$i56 = $tmpcast$idx51$val;
	   }
	   while(1) {
	    $21 = HEAP32[$match$02$i56>>2]|0;
	    _free($match$02$i56);
	    $tobool$i58 = ($21|0)==(0|0);
	    if ($tobool$i58) {
	     $retval$0 = 1;
	     break;
	    } else {
	     $match$02$i56 = $21;
	    }
	   }
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $add60 = (($cnt$1) + ($cond))|0;
	   $add61 = $add60 << 2;
	   $mul62 = (($add61) + 4)|0;
	   $call63 = (_malloc($mul62)|0);
	   $gl_pathv64 = (($g) + 4|0);
	   HEAP32[$gl_pathv64>>2] = $call63;
	   $tobool66 = ($call63|0)==(0|0);
	   if (!($tobool66)) {
	    $cmp7075 = ($cond|0)==(0);
	    if ($cmp7075) {
	     $26 = $call63;$offs$0 = 0;
	     break;
	    }
	    $22 = $cond << 2;
	    _memset(($call63|0),0,($22|0))|0;
	    $26 = $call63;$offs$0 = $cond;
	    break;
	   }
	   $tmpcast$idx$val = HEAP32[$next$pre$phiZ2D>>2]|0;
	   $tobool1$i61 = ($tmpcast$idx$val|0)==(0|0);
	   if ($tobool1$i61) {
	    $retval$0 = 1;
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    $match$02$i62 = $tmpcast$idx$val;
	   }
	   while(1) {
	    $23 = HEAP32[$match$02$i62>>2]|0;
	    _free($match$02$i62);
	    $tobool$i64 = ($23|0)==(0|0);
	    if ($tobool$i64) {
	     $retval$0 = 1;
	     break;
	    } else {
	     $match$02$i62 = $23;
	    }
	   }
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 } while(0);
	 $24 = HEAP32[$next$pre$phiZ2D>>2]|0;
	 HEAP32[$tail>>2] = $24;
	 $cmp8072 = ($cnt$1|0)==(0);
	 if ($cmp8072) {
	  $i$1$lcssa = 0;
	 } else {
	  $25 = $24;$i$173 = 0;
	  while(1) {
	   $arraydecay = (($25) + 4|0);
	   $add83 = (($i$173) + ($offs$0))|0;
	   $arrayidx85 = (($26) + ($add83<<2)|0);
	   HEAP32[$arrayidx85>>2] = $arraydecay;
	   $27 = HEAP32[$25>>2]|0;
	   $inc88 = (($i$173) + 1)|0;
	   $exitcond = ($inc88|0)==($cnt$1|0);
	   if ($exitcond) {
	    break;
	   } else {
	    $25 = $27;$i$173 = $inc88;
	   }
	  }
	  HEAP32[$tail>>2] = $27;
	  $i$1$lcssa = $cnt$1;
	 }
	 $add90 = (($i$1$lcssa) + ($offs$0))|0;
	 $arrayidx92 = (($26) + ($add90<<2)|0);
	 HEAP32[$arrayidx92>>2] = 0;
	 $28 = HEAP32[$g>>2]|0;
	 $add94 = (($28) + ($cnt$1))|0;
	 HEAP32[$g>>2] = $add94;
	 $and95 = $flags & 4;
	 $tobool96 = ($and95|0)==(0);
	 if (!($tobool96)) {
	  $retval$0 = $error$068;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $gl_pathv91$pre$phiZ2D = (($g) + 4|0);
	 $29 = HEAP32[$gl_pathv91$pre$phiZ2D>>2]|0;
	 $add$ptr = (($29) + ($offs$0<<2)|0);
	 _qsort($add$ptr,$cnt$1,4,18);
	 $retval$0 = $error$068;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _ignore_err($path,$err) {
	 $path = $path|0;
	 $err = $err|0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = sp;return 0;
	}
	function _match_in_dir($d,$p,$flags,$errfunc,$tail) {
	 $d = $d|0;
	 $p = $p|0;
	 $flags = $flags|0;
	 $errfunc = $errfunc|0;
	 $tail = $tail|0;
	 var $$call1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
	 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr107 = 0, $add1$i = 0;
	 var $add1$i67 = 0, $add1$i83 = 0, $add153 = 0, $add66 = 0, $add67 = 0, $and = 0, $and122 = 0, $and132 = 0, $and146 = 0, $and170 = 0, $and2 = 0, $and38 = 0, $and50 = 0, $and91 = 0, $arraydecay109 = 0, $arraydecay112 = 0, $arraydecay79 = 0, $arrayidx = 0, $arrayidx105 = 0, $arrayidx105$sum = 0;
	 var $bracket$05$i = 0, $bracket$05$us$i = 0, $bracket$1$i = 0, $bracket$1$us$i = 0, $call = 0, $call$i = 0, $call$i68 = 0, $call$i84 = 0, $call1 = 0, $call116 = 0, $call167 = 0, $call22 = 0, $call23 = 0, $call35 = 0, $call48 = 0, $call5 = 0, $call62 = 0, $call62$lcssa = 0, $call62107 = 0, $call72 = 0;
	 var $call80 = 0, $cmp = 0, $cmp133 = 0, $cmp14 = 0, $cmp140 = 0, $cmp147 = 0, $cmp39 = 0, $cond21 = 0, $conv$i = 0, $conv$us$i = 0, $conv126 = 0, $conv141 = 0, $conv148 = 0, $conv152 = 0, $conv65 = 0, $conv86 = 0, $d_reclen = 0, $d_reclen151 = 0, $d_type = 0, $d_type125 = 0;
	 var $de = 0, $de_buf = 0, $endptr$i = 0, $endptr$i78 = 0, $endptr$i94 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$us$i = 0, $l$0 = 0, $mark$0 = 0, $name$0 = 0, $name3$i = 0, $name3$i72 = 0, $name3$i88 = 0, $name3$sum$i = 0, $name3$sum$i77 = 0, $name3$sum$i93 = 0, $or = 0, $or$cond = 0, $or$cond110 = 0;
	 var $p$addr$0 = 0, $p$addr$04$i = 0, $p$addr$04$us$i = 0, $p2$0 = 0, $p2$1 = 0, $retval$0$i = 0, $retval$0$i81 = 0, $retval$2 = 0, $retval$3 = 0, $shl = 0, $shl131 = 0, $st = 0, $st143 = 0, $st_mode = 0, $st_mode145 = 0, $strlen$i = 0, $strlen$i76 = 0, $strlen$i92 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0;
	 var $sub$ptr$sub = 0, $tobool$i = 0, $tobool$i64 = 0, $tobool$i69 = 0, $tobool$i85 = 0, $tobool$us$i = 0, $tobool1$i = 0, $tobool103 = 0, $tobool117 = 0, $tobool123 = 0, $tobool127 = 0, $tobool16 = 0, $tobool168 = 0, $tobool171 = 0, $tobool20 = 0, $tobool24 = 0, $tobool3$i = 0, $tobool33 = 0, $tobool36 = 0, $tobool49 = 0;
	 var $tobool5$i = 0, $tobool5$i65 = 0, $tobool5$i74 = 0, $tobool5$i90 = 0, $tobool5$us$i = 0, $tobool55 = 0, $tobool6 = 0, $tobool63 = 0, $tobool63$lcssa = 0, $tobool63108 = 0, $tobool64 = 0, $tobool64109 = 0, $tobool70 = 0, $tobool73 = 0, $tobool81 = 0, $tobool84 = 0, $tobool87 = 0, $vla = 0, $vla69 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $de_buf = sp + 156|0;
	 $de = sp + 152|0;
	 $st = sp + 76|0;
	 $st143 = sp;
	 $call = (_strlen(($p|0))|0);
	 $add = (($call) + 1)|0;
	 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$add)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
	 $call1 = (_strlen(($d|0))|0);
	 $and = $flags & 64;
	 $0 = $and >>> 5;
	 $and2 = $flags >>> 5;
	 $1 = $and2 & 4;
	 $2 = $1 | $0;
	 $or = $2 ^ 4;
	 $call5 = (_strchr($p,47)|0);
	 $tobool6 = ($call5|0)==(0|0);
	 if ($tobool6) {
	  $p$addr$0 = $p;$p2$1 = 0;
	 } else {
	  (_strcpy(($vla|0),($p|0))|0);
	  $sub$ptr$lhs$cast = $call5;
	  $sub$ptr$rhs$cast = $p;
	  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	  $arrayidx = (($vla) + ($sub$ptr$sub)|0);
	  HEAP8[$arrayidx>>0] = 0;
	  $p2$0 = $call5;
	  while(1) {
	   $3 = HEAP8[$p2$0>>0]|0;
	   $cmp = ($3<<24>>24)==(47);
	   $incdec$ptr = (($p2$0) + 1|0);
	   if ($cmp) {
	    $p2$0 = $incdec$ptr;
	   } else {
	    $p$addr$0 = $vla;$p2$1 = $p2$0;
	    break;
	   }
	  }
	 }
	 $4 = HEAP8[$p$addr$0>>0]|0;
	 $tobool3$i = ($4<<24>>24)==(0);
	 L6: do {
	  if ($tobool3$i) {
	   $retval$0$i = 1;
	  } else {
	   $tobool1$i = ($and|0)==(0);
	   if ($tobool1$i) {
	    $7 = $4;$bracket$05$i = 0;$p$addr$04$i = $p$addr$0;
	    while(1) {
	     $conv$i = $7 << 24 >> 24;
	     switch ($conv$i|0) {
	     case 42: case 63: case 92:  {
	      $retval$0$i = 0;
	      break L6;
	      break;
	     }
	     case 91:  {
	      $bracket$1$i = 1;
	      break;
	     }
	     case 93:  {
	      $tobool5$i = ($bracket$05$i|0)==(0);
	      if ($tobool5$i) {
	       $bracket$1$i = 0;
	      } else {
	       $retval$0$i = 0;
	       break L6;
	      }
	      break;
	     }
	     default: {
	      $bracket$1$i = $bracket$05$i;
	     }
	     }
	     $incdec$ptr$i = (($p$addr$04$i) + 1|0);
	     $8 = HEAP8[$incdec$ptr$i>>0]|0;
	     $tobool$i = ($8<<24>>24)==(0);
	     if ($tobool$i) {
	      $retval$0$i = 1;
	      break L6;
	     } else {
	      $7 = $8;$bracket$05$i = $bracket$1$i;$p$addr$04$i = $incdec$ptr$i;
	     }
	    }
	   } else {
	    $5 = $4;$bracket$05$us$i = 0;$p$addr$04$us$i = $p$addr$0;
	    while(1) {
	     $conv$us$i = $5 << 24 >> 24;
	     if ((($conv$us$i|0) == 93)) {
	      $tobool5$us$i = ($bracket$05$us$i|0)==(0);
	      if ($tobool5$us$i) {
	       $bracket$1$us$i = 0;
	      } else {
	       $retval$0$i = 0;
	       break L6;
	      }
	     } else if ((($conv$us$i|0) == 91)) {
	      $bracket$1$us$i = 1;
	     } else if ((($conv$us$i|0) == 42) | (($conv$us$i|0) == 63)) {
	      $retval$0$i = 0;
	      break L6;
	     } else {
	      $bracket$1$us$i = $bracket$05$us$i;
	     }
	     $incdec$ptr$us$i = (($p$addr$04$us$i) + 1|0);
	     $6 = HEAP8[$incdec$ptr$us$i>>0]|0;
	     $tobool$us$i = ($6<<24>>24)==(0);
	     if ($tobool$us$i) {
	      $retval$0$i = 1;
	      break;
	     } else {
	      $5 = $6;$bracket$05$us$i = $bracket$1$us$i;$p$addr$04$us$i = $incdec$ptr$us$i;
	     }
	    }
	   }
	  }
	 } while(0);
	 $9 = HEAP8[$d>>0]|0;
	 $cmp14 = ($9<<24>>24)==(47);
	 if ($cmp14) {
	  $add$ptr = (($d) + 1|0);
	  $10 = HEAP8[$add$ptr>>0]|0;
	  $tobool16 = ($10<<24>>24)==(0);
	  $$call1 = $tobool16 ? 0 : $call1;
	  $l$0 = $$call1;
	 } else {
	  $l$0 = $call1;
	 }
	 $tobool20 = ($9<<24>>24)!=(0);
	 $cond21 = $tobool20 ? $d : 152840;
	 $call22 = (_opendir(($cond21|0))|0);
	 $call23 = (___errno_location()|0);
	 $11 = HEAP32[$call23>>2]|0;
	 $tobool24 = ($call22|0)==(0|0);
	 if ($tobool24) {
	  if ((($11|0) == 13)) {
	   label = 18;
	  } else if ((($11|0) == 20)) {
	   $retval$3 = 0;
	   STACKTOP = sp;return ($retval$3|0);
	  }
	  if ((label|0) == 18) {
	   $12 = HEAP8[$p$addr$0>>0]|0;
	   $tobool33 = ($12<<24>>24)==(0);
	   if ($tobool33) {
	    $call35 = (_stat(($d|0),($st|0))|0);
	    $tobool36 = ($call35|0)==(0);
	    if ($tobool36) {
	     $st_mode = (($st) + 12|0);
	     $13 = HEAP32[$st_mode>>2]|0;
	     $and38 = $13 & 61440;
	     $cmp39 = ($and38|0)==(16384);
	     if ($cmp39) {
	      $add1$i = (($l$0) + 9)|0;
	      $call$i = (_malloc($add1$i)|0);
	      $tobool$i64 = ($call$i|0)==(0|0);
	      if ($tobool$i64) {
	       $retval$3 = 1;
	       STACKTOP = sp;return ($retval$3|0);
	      }
	      $14 = HEAP32[$tail>>2]|0;
	      HEAP32[$14>>2] = $call$i;
	      HEAP32[$call$i>>2] = 0;
	      $name3$i = (($call$i) + 4|0);
	      (_strcpy(($name3$i|0),($d|0))|0);
	      $tobool5$i65 = ($l$0|0)==(0);
	      if (!($tobool5$i65)) {
	       $strlen$i = (_strlen(($name3$i|0))|0);
	       $name3$sum$i = (($strlen$i) + 4)|0;
	       $endptr$i = (($call$i) + ($name3$sum$i)|0);
	       HEAP8[$endptr$i>>0]=47&255;HEAP8[$endptr$i+1>>0]=47>>8;
	      }
	      HEAP32[$tail>>2] = $call$i;
	      $retval$3 = 0;
	      STACKTOP = sp;return ($retval$3|0);
	     }
	    }
	   }
	  }
	  $call48 = (FUNCTION_TABLE_iii[$errfunc & 31]($d,$11)|0);
	  $tobool49 = ($call48|0)==(0);
	  if (!($tobool49)) {
	   $retval$3 = 2;
	   STACKTOP = sp;return ($retval$3|0);
	  }
	  $and50 = $flags << 1;
	  $15 = $and50 & 2;
	  $retval$3 = $15;
	  STACKTOP = sp;return ($retval$3|0);
	 }
	 $16 = HEAP8[$p$addr$0>>0]|0;
	 $tobool55 = ($16<<24>>24)==(0);
	 if ($tobool55) {
	  $add1$i67 = (($l$0) + 9)|0;
	  $call$i68 = (_malloc($add1$i67)|0);
	  $tobool$i69 = ($call$i68|0)==(0|0);
	  if ($tobool$i69) {
	   $retval$0$i81 = 1;
	  } else {
	   $18 = HEAP32[$tail>>2]|0;
	   HEAP32[$18>>2] = $call$i68;
	   HEAP32[$call$i68>>2] = 0;
	   $name3$i72 = (($call$i68) + 4|0);
	   (_strcpy(($name3$i72|0),($d|0))|0);
	   $tobool5$i74 = ($l$0|0)==(0);
	   if (!($tobool5$i74)) {
	    $strlen$i76 = (_strlen(($name3$i72|0))|0);
	    $name3$sum$i77 = (($strlen$i76) + 4)|0;
	    $endptr$i78 = (($call$i68) + ($name3$sum$i77)|0);
	    HEAP8[$endptr$i78>>0]=47&255;HEAP8[$endptr$i78+1>>0]=47>>8;
	   }
	   HEAP32[$tail>>2] = $call$i68;
	   $retval$0$i81 = 0;
	  }
	  (_closedir(($call22|0))|0);
	  $retval$3 = $retval$0$i81;
	  STACKTOP = sp;return ($retval$3|0);
	 }
	 $call62107 = (_readdir_r(($call22|0),($de_buf|0),($de|0))|0);
	 $tobool63108 = ($call62107|0)==(0);
	 $17 = HEAP32[$de>>2]|0;
	 $tobool64109 = ($17|0)!=(0|0);
	 $or$cond110 = $tobool63108 & $tobool64109;
	 L57: do {
	  if ($or$cond110) {
	   $add66 = (($l$0) + 2)|0;
	   $tobool70 = ($retval$0$i|0)==(0);
	   $tobool84 = ($p2$1|0)!=(0|0);
	   $and122 = $flags & 2;
	   $tobool123 = ($and122|0)==(0);
	   $add153 = (($l$0) + 10)|0;
	   $st_mode145 = (($st143) + 12|0);
	   $arrayidx105$sum = (($l$0) + 1)|0;
	   $19 = $17;
	   L59: while(1) {
	    $d_reclen = (($19) + 8|0);
	    $20 = HEAP16[$d_reclen>>1]|0;
	    $conv65 = $20&65535;
	    $add67 = (($add66) + ($conv65))|0;
	    $21 = (_llvm_stacksave()|0);
	    $vla69 = STACKTOP; STACKTOP = STACKTOP + ((((1*$add67)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
	    $22 = HEAP32[$de>>2]|0;
	    $arraydecay79 = (($22) + 11|0);
	    if ($tobool70) {
	     $call72 = (_fnmatch($p$addr$0,$arraydecay79,$or)|0);
	     $tobool73 = ($call72|0)==(0);
	     if ($tobool73) {
	      label = 38;
	     }
	    } else {
	     $call80 = (_strcmp($p$addr$0,$arraydecay79)|0);
	     $tobool81 = ($call80|0)==(0);
	     if ($tobool81) {
	      label = 38;
	     }
	    }
	    do {
	     if ((label|0) == 38) {
	      label = 0;
	      if ($tobool84) {
	       $23 = HEAP32[$de>>2]|0;
	       $d_type = (($23) + 10|0);
	       $24 = HEAP8[$d_type>>0]|0;
	       $tobool87 = ($24<<24>>24)==(0);
	       if (!($tobool87)) {
	        $conv86 = $24&255;
	        $shl = $conv86 << 12;
	        $and91 = $shl & 61440;
	        if (!((($and91|0) == 40960) | (($and91|0) == 16384))) {
	         break;
	        }
	       }
	      }
	      $25 = HEAP8[$d>>0]|0;
	      $tobool103 = ($25<<24>>24)==(0);
	      if ($tobool103) {
	       $27 = HEAP32[$de>>2]|0;
	       $arraydecay112 = (($27) + 11|0);
	       $name$0 = $arraydecay112;
	      } else {
	       _memcpy(($vla69|0),($d|0),($l$0|0))|0;
	       $arrayidx105 = (($vla69) + ($l$0)|0);
	       HEAP8[$arrayidx105>>0] = 47;
	       $add$ptr107 = (($vla69) + ($arrayidx105$sum)|0);
	       $26 = HEAP32[$de>>2]|0;
	       $arraydecay109 = (($26) + 11|0);
	       (_strcpy(($add$ptr107|0),($arraydecay109|0))|0);
	       $name$0 = $vla69;
	      }
	      if ($tobool84) {
	       $call116 = (_match_in_dir($name$0,$p2$1,$flags,$errfunc,$tail)|0);
	       $tobool117 = ($call116|0)==(0);
	       if ($tobool117) {
	        break;
	       } else {
	        label = 46;
	        break L59;
	       }
	      }
	      do {
	       if ($tobool123) {
	        $mark$0 = 0;
	       } else {
	        $28 = HEAP32[$de>>2]|0;
	        $d_type125 = (($28) + 10|0);
	        $29 = HEAP8[$d_type125>>0]|0;
	        $tobool127 = ($29<<24>>24)==(0);
	        if (!($tobool127)) {
	         $conv126 = $29&255;
	         $shl131 = $conv126 << 12;
	         $and132 = $shl131 & 61440;
	         $cmp133 = ($and132|0)==(40960);
	         if (!($cmp133)) {
	          $cmp140 = ($and132|0)==(16384);
	          $conv141 = $cmp140&1;
	          $mark$0 = $conv141;
	          break;
	         }
	        }
	        (_stat(($name$0|0),($st143|0))|0);
	        $30 = HEAP32[$st_mode145>>2]|0;
	        $and146 = $30 & 61440;
	        $cmp147 = ($and146|0)==(16384);
	        $conv148 = $cmp147&1;
	        $mark$0 = $conv148;
	       }
	      } while(0);
	      $31 = HEAP32[$de>>2]|0;
	      $d_reclen151 = (($31) + 8|0);
	      $32 = HEAP16[$d_reclen151>>1]|0;
	      $conv152 = $32&65535;
	      $add1$i83 = (($add153) + ($conv152))|0;
	      $call$i84 = (_malloc($add1$i83)|0);
	      $tobool$i85 = ($call$i84|0)==(0|0);
	      if ($tobool$i85) {
	       label = 56;
	       break L59;
	      }
	      $33 = HEAP32[$tail>>2]|0;
	      HEAP32[$33>>2] = $call$i84;
	      HEAP32[$call$i84>>2] = 0;
	      $name3$i88 = (($call$i84) + 4|0);
	      (_strcpy(($name3$i88|0),($name$0|0))|0);
	      $tobool5$i90 = ($mark$0|0)==(0);
	      if (!($tobool5$i90)) {
	       $strlen$i92 = (_strlen(($name3$i88|0))|0);
	       $name3$sum$i93 = (($strlen$i92) + 4)|0;
	       $endptr$i94 = (($call$i84) + ($name3$sum$i93)|0);
	       HEAP8[$endptr$i94>>0]=47&255;HEAP8[$endptr$i94+1>>0]=47>>8;
	      }
	      HEAP32[$tail>>2] = $call$i84;
	     }
	    } while(0);
	    _llvm_stackrestore(($21|0));
	    $call62 = (_readdir_r(($call22|0),($de_buf|0),($de|0))|0);
	    $tobool63 = ($call62|0)==(0);
	    $34 = HEAP32[$de>>2]|0;
	    $tobool64 = ($34|0)!=(0|0);
	    $or$cond = $tobool63 & $tobool64;
	    if ($or$cond) {
	     $19 = $34;
	    } else {
	     $call62$lcssa = $call62;$tobool63$lcssa = $tobool63;
	     break L57;
	    }
	   }
	   if ((label|0) == 46) {
	    (_closedir(($call22|0))|0);
	    $retval$2 = $call116;
	   }
	   else if ((label|0) == 56) {
	    (_closedir(($call22|0))|0);
	    $retval$2 = 1;
	   }
	   _llvm_stackrestore(($21|0));
	   $retval$3 = $retval$2;
	   STACKTOP = sp;return ($retval$3|0);
	  } else {
	   $call62$lcssa = $call62107;$tobool63$lcssa = $tobool63108;
	  }
	 } while(0);
	 (_closedir(($call22|0))|0);
	 if (!($tobool63$lcssa)) {
	  $call167 = (FUNCTION_TABLE_iii[$errfunc & 31]($d,$call62$lcssa)|0);
	  $tobool168 = ($call167|0)==(0);
	  if (!($tobool168)) {
	   $retval$3 = 2;
	   STACKTOP = sp;return ($retval$3|0);
	  }
	  $and170 = $flags & 1;
	  $tobool171 = ($and170|0)==(0);
	  if (!($tobool171)) {
	   $retval$3 = 2;
	   STACKTOP = sp;return ($retval$3|0);
	  }
	 }
	 $retval$3 = 0;
	 STACKTOP = sp;return ($retval$3|0);
	}
	function _sort($a,$b) {
	 $a = $a|0;
	 $b = $b|0;
	 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$a>>2]|0;
	 $1 = HEAP32[$b>>2]|0;
	 $call = (_strcmp($0,$1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _globfree($g) {
	 $g = $g|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add = 0, $add$ptr = 0, $arrayidx = 0, $cmp = 0, $cmp7 = 0, $gl_offs = 0, $gl_pathv = 0, $gl_pathv1$pre = 0, $gl_pathv1$pre$phiZ2D = 0, $i$08 = 0, $inc = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$g>>2]|0;
	 $cmp7 = ($0|0)==(0);
	 if ($cmp7) {
	  $gl_pathv1$pre = (($g) + 4|0);
	  $gl_pathv1$pre$phiZ2D = $gl_pathv1$pre;
	 } else {
	  $gl_offs = (($g) + 8|0);
	  $gl_pathv = (($g) + 4|0);
	  $i$08 = 0;
	  while(1) {
	   $1 = HEAP32[$gl_offs>>2]|0;
	   $add = (($1) + ($i$08))|0;
	   $2 = HEAP32[$gl_pathv>>2]|0;
	   $arrayidx = (($2) + ($add<<2)|0);
	   $3 = HEAP32[$arrayidx>>2]|0;
	   $add$ptr = (($3) + -4|0);
	   _free($add$ptr);
	   $inc = (($i$08) + 1)|0;
	   $4 = HEAP32[$g>>2]|0;
	   $cmp = ($inc>>>0)<($4>>>0);
	   if ($cmp) {
	    $i$08 = $inc;
	   } else {
	    $gl_pathv1$pre$phiZ2D = $gl_pathv;
	    break;
	   }
	  }
	 }
	 $5 = HEAP32[$gl_pathv1$pre$phiZ2D>>2]|0;
	 _free($5);
	 HEAP32[$g>>2] = 0;
	 HEAP32[$gl_pathv1$pre$phiZ2D>>2] = 0;
	 STACKTOP = sp;return;
	}
	function _regcomp($preg,$regex,$cflags) {
	 $preg = $preg|0;
	 $regex = $regex|0;
	 $cflags = $cflags|0;
	 var $$add187$i = 0, $$be = 0, $$lcssa = 0, $$lobit = 0, $$lobit$not = 0, $$op = 0, $$pre = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
	 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
	 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
	 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
	 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
	 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
	 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
	 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
	 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__opaque = 0, $__opaque273 = 0, $add$0$lcssa = 0, $add$0210 = 0;
	 var $add$i = 0, $add$i$i = 0, $add$i111$i = 0, $add$i152 = 0, $add$i160$i = 0, $add$i180 = 0, $add$i191$i = 0, $add$ptr = 0, $add$ptr258 = 0, $add165 = 0, $add166 = 0, $add171 = 0, $add181$i = 0, $add187$i = 0, $add249$i = 0, $add55 = 0, $add71134 = 0, $and = 0, $arg107$i286 = 0, $arg107$i287 = 0;
	 var $arrayidx$i$i = 0, $arrayidx$i$i162 = 0, $arrayidx$i134$i = 0, $arrayidx12$i160$i = 0, $arrayidx163 = 0, $arrayidx164 = 0, $arrayidx210 = 0, $arrayidx220 = 0, $arrayidx257 = 0, $assertions$i = 0, $assertions247 = 0, $backref11$i$i = 0, $backref11$i159$i = 0, $backref11$i186$i = 0, $backref11$i201$i = 0, $bf$clear$i$i = 0, $bf$load$i$i = 0, $call$i = 0, $call$i$i = 0, $call$i$i$i = 0;
	 var $call$i$i136$i = 0, $call$i$i139 = 0, $call$i$i143 = 0, $call$i$i147$i = 0, $call$i$i155 = 0, $call$i$i165$i = 0, $call$i$i178$i = 0, $call$i$i98$i = 0, $call$i118$i = 0, $call$i119$i = 0, $call$i120$i = 0, $call$i121$i = 0, $call$i122$i = 0, $call$i123$i = 0, $call$i124$i = 0, $call$i125$i = 0, $call$i126$i = 0, $call$i127$i = 0, $call$i128$i = 0, $call$i129$i = 0;
	 var $call$i130$i = 0, $call$i147$i = 0, $call$i151$i = 0, $call$i152$i = 0, $call$i167$i = 0, $call$i171$i = 0, $call$i179$i = 0, $call$i194$i = 0, $call$i209$i = 0, $call$i210$i = 0, $call$i211$i = 0, $call$i212$i = 0, $call$i213$i = 0, $call$i214$i = 0, $call$i215$i = 0, $call$i216$i = 0, $call$i217$i = 0, $call$i218$i = 0, $call$i219$i = 0, $call$i220$i = 0;
	 var $call$i221$i = 0, $call$i222$i = 0, $call$i223$i = 0, $call$i224$i = 0, $call$i97$i = 0, $call1 = 0, $call1$i = 0, $call1$i$i = 0, $call1$i$i$i = 0, $call1$i$i100$i = 0, $call1$i$i138$i = 0, $call1$i$i145 = 0, $call1$i$i149$i = 0, $call1$i$i167$i = 0, $call1$i$i180$i = 0, $call108$i = 0, $call124$i = 0, $call135 = 0, $call141$i = 0, $call145 = 0;
	 var $call165$i = 0, $call172 = 0, $call175$i = 0, $call181 = 0, $call194 = 0, $call212$i = 0, $call216$i = 0, $call221$i = 0, $call229 = 0, $call229$i = 0, $call245$i = 0, $call251$i = 0, $call257$i = 0, $call265$i = 0, $call27 = 0, $call43 = 0, $call56 = 0, $call72 = 0, $call8 = 0, $call82 = 0;
	 var $call91 = 0, $cflags260 = 0, $cflags7 = 0, $class$i = 0, $class7$i$i = 0, $class7$i157$i = 0, $class7$i184$i = 0, $class7$i199$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i136 = 0, $cmp$i153$i = 0, $cmp$i156 = 0, $cmp$i168$i = 0, $cmp$i172$i = 0, $cmp$i180$i = 0, $cmp$i195$i = 0, $cmp100$i = 0, $cmp101 = 0;
	 var $cmp103$i = 0, $cmp103$i176 = 0, $cmp103$i227 = 0, $cmp106$i = 0, $cmp109$i = 0, $cmp110$i = 0, $cmp112$i = 0, $cmp115$i = 0, $cmp116$i = 0, $cmp12 = 0, $cmp12$i = 0, $cmp121$i = 0, $cmp122$i = 0, $cmp125$i = 0, $cmp127$i = 0, $cmp133$i = 0, $cmp136 = 0, $cmp136$i = 0, $cmp136217$i = 0, $cmp138$i = 0;
	 var $cmp142$i = 0, $cmp144$i = 0, $cmp145$i = 0, $cmp146 = 0, $cmp149$i = 0, $cmp150$i = 0, $cmp154212 = 0, $cmp16$i = 0, $cmp160 = 0, $cmp160208 = 0, $cmp165$i = 0, $cmp168$i = 0, $cmp173 = 0, $cmp173$i = 0, $cmp18$i = 0, $cmp182 = 0, $cmp182$i = 0, $cmp183$i = 0, $cmp188$i = 0, $cmp190 = 0;
	 var $cmp190204 = 0, $cmp195 = 0, $cmp206 = 0, $cmp206199 = 0, $cmp21 = 0, $cmp213$i = 0, $cmp22$i = 0, $cmp221 = 0, $cmp222$i = 0, $cmp246$i = 0, $cmp25$i = 0, $cmp258$i = 0, $cmp265 = 0, $cmp269 = 0, $cmp28 = 0, $cmp3$i = 0, $cmp30$i = 0, $cmp34$i = 0, $cmp38$i = 0, $cmp4$i = 0;
	 var $cmp4$i157 = 0, $cmp44 = 0, $cmp49$i = 0, $cmp51 = 0, $cmp53$i = 0, $cmp57 = 0, $cmp58$i = 0, $cmp65$i = 0, $cmp68$i = 0, $cmp7$i = 0, $cmp70$i = 0, $cmp72$i = 0, $cmp74 = 0, $cmp76$i = 0, $cmp76$i172 = 0, $cmp8$i = 0, $cmp80$i = 0, $cmp81$i = 0, $cmp8245$i = 0, $cmp83 = 0;
	 var $cmp84$i = 0, $cmp87$i = 0, $cmp87$i175 = 0, $cmp89$i = 0, $cmp9$i = 0, $cmp9$i250 = 0, $cmp92 = 0, $cmp92$i = 0, $cmp97$i = 0, $cmp98$i = 0, $code_max$i = 0, $code_max$i$i = 0, $code_max$i175$i = 0, $code_max17$i163$i = 0, $code_max2$i = 0, $code_max2$i$i = 0, $code_max44$i = 0, $code_max5$i$i = 0, $code_max5$i156$i = 0, $code_max5$i183$i = 0;
	 var $code_max5$i198$i = 0, $code_min$i$i = 0, $code_min$i174$i = 0, $code_min15$i162$i = 0, $code_min3$i$i = 0, $code_min3$i155$i = 0, $code_min3$i182$i = 0, $code_min3$i197$i = 0, $cond$i = 0, $copy$i = 0, $copy139$i = 0, $counts$0 = 0, $dec$i = 0, $dec$i$i = 0, $dec$i$i161 = 0, $dec$i116$i = 0, $dec$i132$i = 0, $dec$i149$i = 0, $errcode$0 = 0, $final = 0;
	 var $firstpos = 0, $firstpos$i = 0, $firstpos162$i = 0, $firstpos164$i = 0, $firstpos166$i = 0, $firstpos193$i = 0, $firstpos194$i = 0, $firstpos225$i = 0, $firstpos226$i = 0, $firstpos228$i = 0, $firstpos230$i = 0, $firstpos237$i = 0, $firstpos238$i = 0, $firstpos29$i = 0, $firstpos29229$i = 0, $firstpos46$i = 0, $firstpos46233$i = 0, $firstpos_chars = 0, $have_approx = 0, $have_approx36 = 0;
	 var $have_approx37 = 0, $have_backrefs = 0, $i$1209 = 0, $i$2$lcssa = 0, $i$2205 = 0, $i$3$lcssa = 0, $i$3200 = 0, $inc = 0, $inc$i = 0, $inc162$i = 0, $inc169 = 0, $inc225 = 0, $inc248 = 0, $incdec$ptr = 0, $incdec$ptr250 = 0, $increment7$i = 0, $initial202 = 0, $iter_depth$0234$i$be = 0, $iter_depth$0234$i252 = 0, $j$0 = 0;
	 var $j$0$i229 = 0, $j$1218$i = 0, $land$ext$i = 0, $lastpos = 0, $lastpos$i = 0, $lastpos172$i = 0, $lastpos174$i = 0, $lastpos176$i = 0, $lastpos196$i = 0, $lastpos197$i = 0, $lastpos227$i = 0, $lastpos262$i = 0, $lastpos264$i = 0, $lastpos266$i = 0, $lastpos273$i = 0, $lastpos274$i = 0, $lastpos35$i = 0, $lastpos35231$i = 0, $lastpos55$i = 0, $lastpos55235$i = 0;
	 var $lor$ext$i = 0, $max$i = 0, $max120$i = 0, $max3$i$i = 0, $max99$i = 0, $max_backref = 0, $max_pos$i = 0, $max_size6$i = 0, $min$i = 0, $min$i178 = 0, $min2$i$i = 0, $min96$i = 0, $minimal_tags = 0, $mul = 0, $mul$i = 0, $mul134 = 0, $mul228 = 0, $mul250$i = 0, $mul70 = 0, $neg_classes$i = 0;
	 var $neg_classes9$i$i = 0, $neg_classes9$i158$i = 0, $neg_classes9$i185$i = 0, $neg_classes9$i200$i = 0, $nullable$i = 0, $nullable$i$i = 0, $nullable$i$i$i = 0, $nullable$i$i105$i = 0, $nullable$i$i143$i = 0, $nullable$i$i150 = 0, $nullable$i$i154$i = 0, $nullable$i$i172$i = 0, $nullable$i$i185$i = 0, $nullable155$i = 0, $nullable158$i = 0, $nullable160$i = 0, $nullable185$i = 0, $nullable188$i = 0, $nullable190$i = 0, $nullable201$i = 0;
	 var $nullable204$i = 0, $nullable206$i = 0, $nullable241$i = 0, $nullable27$i = 0, $num_states = 0, $num_submatches = 0, $num_submatches$i = 0, $num_submatches$i$i = 0, $num_submatches$i109$i = 0, $num_submatches$i158$i = 0, $num_submatches$i174$i = 0, $num_submatches$i189$i = 0, $num_submatches4$i = 0, $num_submatches4$i$i = 0, $num_submatches4$i110$i = 0, $num_submatches4$i159$i = 0, $num_submatches4$i190$i = 0, $num_submatches5$i = 0, $num_submatches5$i$i = 0, $num_submatches5$i112$i = 0;
	 var $num_submatches5$i161$i = 0, $num_submatches5$i175$i = 0, $num_submatches5$i192$i = 0, $num_tags = 0, $num_tags$i = 0, $num_transitions = 0, $obj$i = 0, $obj$i$i = 0, $obj$i$i$i = 0, $obj$i$i101$i = 0, $obj$i$i139$i = 0, $obj$i$i146 = 0, $obj$i$i150$i = 0, $obj$i$i168$i = 0, $obj$i$i181$i = 0, $obj$i169 = 0, $obj107$i = 0, $obj142$i = 0, $obj153$i = 0, $obj176$i = 0;
	 var $obj182$i = 0, $obj199$i = 0, $obj28$i = 0, $obj46$i = 0, $obj66$i = 0, $obj74$i = 0, $obj94$i = 0, $offs$0 = 0, $or$cond95$i = 0, $p$0206 = 0, $parse_ctx = 0, $phitmp = 0, $phitmp281 = 0, $pos_add$i = 0, $pos_add_save$0$i$lcssa = 0, $pos_add_save$2$i = 0, $pos_add_total$0235$i$be = 0, $pos_add_total$0235$i$lcssa = 0, $pos_add_total$0235$i251 = 0, $position = 0;
	 var $position$i = 0, $position20$i = 0, $position205202 = 0, $position3$i = 0, $position3$i$i = 0, $position42$i = 0, $ptr$i = 0, $re = 0, $result = 0, $retval$0 = 0, $retval$0$i138 = 0, $right$i = 0, $right$i171 = 0, $right108$i = 0, $right157$i = 0, $right203$i = 0, $right225$i = 0, $right240$pre$i = 0, $right3$i = 0, $right3$i$i = 0;
	 var $right3$i108$i = 0, $right3$i157$i = 0, $right3$i188$i = 0, $right47$i = 0, $seq1$0$i$lcssa = 0, $seq1$0$i228 = 0, $seq1$1$i = 0, $seq1$2$i = 0, $seq1$2204$i = 0, $seq2$i = 0, $stack$i = 0, $stack$i$i = 0, $stack$i$i160 = 0, $stack$i135 = 0, $stack$i182 = 0, $stack$i183 = 0, $stack$idx$val$i = 0, $stack$idx$val$i165 = 0, $stack$idx$val$i249 = 0, $stack$idx$val$i253 = 0;
	 var $stack$idx$val244$i = 0, $stack$idx146$val$i = 0, $stack$idx96$i = 0, $stack$idx96$val$i = 0, $stack6 = 0, $state = 0, $state253 = 0, $state_id = 0, $status$0$be$i = 0, $status$0$lcssa$i = 0, $sub = 0, $sub$i = 0, $submatch_data90 = 0, $submatch_id = 0, $submatch_id$i$i = 0, $submatch_id$i$i$i = 0, $submatch_id$i$i106$i = 0, $submatch_id$i$i144$i = 0, $submatch_id$i$i151 = 0, $submatch_id$i$i155$i = 0;
	 var $submatch_id$i$i173$i = 0, $submatch_id$i$i186$i = 0, $tag_directions$0 = 0, $tag_directions$1 = 0, $tag_directions64 = 0, $tags = 0, $tags215 = 0, $tnfa$0 = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i137$i = 0, $tobool$i$i144 = 0, $tobool$i$i148$i = 0, $tobool$i$i166$i = 0, $tobool$i$i179$i = 0, $tobool$i$i99$i = 0, $tobool13 = 0, $tobool156$i = 0, $tobool159$i = 0, $tobool168$i = 0;
	 var $tobool178$i = 0, $tobool186$i = 0, $tobool2 = 0, $tobool202$i = 0, $tobool205$i = 0, $tobool209$i = 0, $tobool216 = 0, $tobool217$i = 0, $tobool232$i = 0, $tobool234 = 0, $tobool242$i = 0, $tobool252$i = 0, $tobool268$i = 0, $tobool3$i$i = 0, $tobool3$i$i$i = 0, $tobool3$i$i102$i = 0, $tobool3$i$i140$i = 0, $tobool3$i$i147 = 0, $tobool3$i$i151$i = 0, $tobool3$i$i169$i = 0;
	 var $tobool3$i$i182$i = 0, $tobool40 = 0, $tobool41 = 0, $value$c$i$i = 0, $voidptr_value$i$i = 0, $voidptr_value$i$i164 = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $num_tags$i = sp + 4|0;
	 $assertions$i = sp + 16|0;
	 $pos_add$i = sp + 8|0;
	 $max_pos$i = sp + 20|0;
	 $seq2$i = sp + 68|0;
	 $copy$i = sp;
	 $copy139$i = sp + 12|0;
	 $parse_ctx = sp + 24|0;
	 $call$i = (_malloc(20)|0);
	 $cmp$i = ($call$i|0)==(0|0);
	 if ($cmp$i) {
	  $retval$0 = 12;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call1$i = (_malloc(2048)|0);
	 $stack$i = (($call$i) + 16|0);
	 HEAP32[$stack$i>>2] = $call1$i;
	 $cmp3$i = ($call1$i|0)==(0|0);
	 if ($cmp3$i) {
	  _free($call$i);
	  $retval$0 = 12;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 HEAP32[$call$i>>2] = 512;
	 $max_size6$i = (($call$i) + 4|0);
	 HEAP32[$max_size6$i>>2] = 10240;
	 $increment7$i = (($call$i) + 8|0);
	 HEAP32[$increment7$i>>2] = 128;
	 $ptr$i = (($call$i) + 12|0);
	 HEAP32[$ptr$i>>2] = 0;
	 $call1 = (___tre_mem_new_impl(0,0)|0);
	 $tobool2 = ($call1|0)==(0|0);
	 if ($tobool2) {
	  $stack$i135 = (($call$i) + 16|0);
	  $0 = HEAP32[$stack$i135>>2]|0;
	  _free($0);
	  _free($call$i);
	  $retval$0 = 12;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 dest=$parse_ctx+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$parse_ctx>>2] = $call1;
	 $stack6 = (($parse_ctx) + 4|0);
	 HEAP32[$stack6>>2] = $call$i;
	 $re = (($parse_ctx) + 12|0);
	 HEAP32[$re>>2] = $regex;
	 $cflags7 = (($parse_ctx) + 36|0);
	 HEAP32[$cflags7>>2] = $cflags;
	 $max_backref = (($parse_ctx) + 28|0);
	 HEAP32[$max_backref>>2] = -1;
	 $call8 = (_tre_parse($parse_ctx)|0);
	 $cmp = ($call8|0)==(0);
	 L12: do {
	  if ($cmp) {
	   $submatch_id = (($parse_ctx) + 20|0);
	   $1 = HEAP32[$submatch_id>>2]|0;
	   $sub = (($1) + -1)|0;
	   HEAP32[$preg>>2] = $sub;
	   $result = (($parse_ctx) + 8|0);
	   $2 = HEAP32[$result>>2]|0;
	   $3 = HEAP32[$max_backref>>2]|0;
	   $cmp12 = ($3|0)>(-1);
	   if ($cmp12) {
	    $have_approx = (($parse_ctx) + 32|0);
	    $4 = HEAP32[$have_approx>>2]|0;
	    $tobool13 = ($4|0)==(0);
	    if (!($tobool13)) {
	     $counts$0 = 0;$errcode$0 = 2;$offs$0 = 0;$tnfa$0 = 0;
	     break;
	    }
	   }
	   $cmp21 = ($3|0)>($sub|0);
	   if ($cmp21) {
	    $counts$0 = 0;$errcode$0 = 6;$offs$0 = 0;$tnfa$0 = 0;
	   } else {
	    $call27 = (_calloc(1,68)|0);
	    $cmp28 = ($call27|0)==(0|0);
	    if ($cmp28) {
	     $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	    } else {
	     $$lobit = $3 >>> 31;
	     $$lobit$not = $$lobit ^ 1;
	     $have_backrefs = (($call27) + 60|0);
	     HEAP32[$have_backrefs>>2] = $$lobit$not;
	     $have_approx36 = (($parse_ctx) + 32|0);
	     $5 = HEAP32[$have_approx36>>2]|0;
	     $have_approx37 = (($call27) + 64|0);
	     HEAP32[$have_approx37>>2] = $5;
	     $num_submatches = (($call27) + 28|0);
	     HEAP32[$num_submatches>>2] = $1;
	     $tobool40 = ($$lobit|0)==(1);
	     if ($tobool40) {
	      $and = $cflags & 8;
	      $tobool41 = ($and|0)==(0);
	      if ($tobool41) {
	       label = 13;
	      } else {
	       $tag_directions$1 = 0;
	      }
	     } else {
	      label = 13;
	     }
	     if ((label|0) == 13) {
	      $call43 = (_tre_add_tags(0,$call$i,$2,$call27)|0);
	      $cmp44 = ($call43|0)==(0);
	      if (!($cmp44)) {
	       $counts$0 = 0;$errcode$0 = $call43;$offs$0 = 0;$tnfa$0 = $call27;
	       break;
	      }
	      $num_tags = (($call27) + 40|0);
	      $6 = HEAP32[$num_tags>>2]|0;
	      $cmp51 = ($6|0)>(0);
	      if ($cmp51) {
	       $add55 = $6 << 2;
	       $mul = (($add55) + 4)|0;
	       $call56 = (_malloc($mul)|0);
	       $cmp57 = ($call56|0)==(0|0);
	       if ($cmp57) {
	        $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	        break;
	       }
	       $tag_directions64 = (($call27) + 32|0);
	       HEAP32[$tag_directions64>>2] = $call56;
	       _memset(($call56|0),-1,($mul|0))|0;
	       $tag_directions$0 = $call56;
	      } else {
	       $tag_directions$0 = 0;
	      }
	      $mul70 = $6 << 1;
	      $add71134 = $mul70 | 1;
	      $call72 = (_calloc($add71134,4)|0);
	      $minimal_tags = (($call27) + 36|0);
	      HEAP32[$minimal_tags>>2] = $call72;
	      $cmp74 = ($call72|0)==(0|0);
	      if ($cmp74) {
	       $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	       break;
	      }
	      $7 = HEAP32[$submatch_id>>2]|0;
	      $call82 = (_calloc($7,12)|0);
	      $cmp83 = ($call82|0)==(0|0);
	      if ($cmp83) {
	       $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	       break;
	      }
	      $submatch_data90 = (($call27) + 16|0);
	      HEAP32[$submatch_data90>>2] = $call82;
	      $call91 = (_tre_add_tags($call1,$call$i,$2,$call27)|0);
	      $cmp92 = ($call91|0)==(0);
	      if ($cmp92) {
	       $tag_directions$1 = $tag_directions$0;
	      } else {
	       $counts$0 = 0;$errcode$0 = $call91;$offs$0 = 0;$tnfa$0 = $call27;
	       break;
	      }
	     }
	     $position = (($parse_ctx) + 24|0);
	     $stack$idx96$i = (($call$i) + 12|0);
	     $stack$idx96$val$i = HEAP32[$stack$idx96$i>>2]|0;
	     HEAP32[$pos_add$i>>2] = 0;
	     HEAP32[$max_pos$i>>2] = 0;
	     $call$i$i = (_tre_stack_push($call$i,$2)|0);
	     $cmp$i136 = ($call$i$i|0)==(0);
	     L31: do {
	      if ($cmp$i136) {
	       $call$i97$i = (_tre_stack_push($call$i,0)|0);
	       $cmp4$i = ($call$i97$i|0)==(0);
	       if ($cmp4$i) {
	        $stack$i$i = (($call$i) + 16|0);
	        $stack$idx$val$i249 = HEAP32[$stack$idx96$i>>2]|0;
	        $cmp9$i250 = ($stack$idx$val$i249|0)>($stack$idx96$val$i|0);
	        L34: do {
	         if ($cmp9$i250) {
	          $15 = 0;$iter_depth$0234$i252 = 0;$pos_add_total$0235$i251 = 0;$stack$idx$val$i253 = $stack$idx$val$i249;
	          L35: while(1) {
	           $dec$i$i = (($stack$idx$val$i253) + -1)|0;
	           HEAP32[$stack$idx96$i>>2] = $dec$i$i;
	           $8 = HEAP32[$stack$i$i>>2]|0;
	           $arrayidx$i$i = (($8) + ($dec$i$i<<2)|0);
	           $9 = HEAP32[$arrayidx$i$i>>2]|0;
	           $dec$i116$i = (($stack$idx$val$i253) + -2)|0;
	           HEAP32[$stack$idx96$i>>2] = $dec$i116$i;
	           $voidptr_value$i$i = (($8) + ($dec$i116$i<<2)|0);
	           $10 = HEAP32[$voidptr_value$i$i>>2]|0;
	           do {
	            if ((($9|0) == 0)) {
	             $11 = HEAP32[$10>>2]|0;
	             if ((($11|0) == 0)) {
	              $obj$i = (($10) + 4|0);
	              $12 = HEAP32[$obj$i>>2]|0;
	              $13 = HEAP32[$12>>2]|0;
	              $cmp16$i = ($13|0)>(-1);
	              $cmp18$i = ($13|0)==(-4);
	              $or$cond95$i = $cmp16$i | $cmp18$i;
	              if (!($or$cond95$i)) {
	               $$be = $15;$iter_depth$0234$i$be = $iter_depth$0234$i252;$pos_add_total$0235$i$be = $pos_add_total$0235$i251;
	               break;
	              }
	              $position20$i = (($12) + 8|0);
	              $14 = HEAP32[$position20$i>>2]|0;
	              $add$i = (($14) + ($15))|0;
	              HEAP32[$position20$i>>2] = $add$i;
	              $16 = HEAP32[$max_pos$i>>2]|0;
	              $cmp22$i = ($add$i|0)>($16|0);
	              if (!($cmp22$i)) {
	               $$be = $15;$iter_depth$0234$i$be = $iter_depth$0234$i252;$pos_add_total$0235$i$be = $pos_add_total$0235$i251;
	               break;
	              }
	              HEAP32[$max_pos$i>>2] = $add$i;
	              $$be = $15;$iter_depth$0234$i$be = $iter_depth$0234$i252;$pos_add_total$0235$i$be = $pos_add_total$0235$i251;
	              break;
	             } else if ((($11|0) == 3)) {
	              $obj28$i = (($10) + 4|0);
	              $17 = HEAP32[$obj28$i>>2]|0;
	              $right$i = (($17) + 4|0);
	              $18 = HEAP32[$right$i>>2]|0;
	              $call$i118$i = (_tre_stack_push($call$i,$18)|0);
	              $cmp30$i = ($call$i118$i|0)==(0);
	              if (!($cmp30$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i118$i;
	               break L34;
	              }
	              $call$i119$i = (_tre_stack_push($call$i,0)|0);
	              $cmp34$i = ($call$i119$i|0)==(0);
	              if (!($cmp34$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i119$i;
	               break L34;
	              }
	              $19 = HEAP32[$17>>2]|0;
	              $call$i120$i = (_tre_stack_push($call$i,$19)|0);
	              $cmp38$i = ($call$i120$i|0)==(0);
	              if (!($cmp38$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i120$i;
	               break L34;
	              }
	              $call$i121$i = (_tre_stack_push($call$i,0)|0);
	              $status$0$be$i = $call$i121$i;
	             } else if ((($11|0) == 1)) {
	              $obj46$i = (($10) + 4|0);
	              $20 = HEAP32[$obj46$i>>2]|0;
	              $right47$i = (($20) + 4|0);
	              $21 = HEAP32[$right47$i>>2]|0;
	              $call$i122$i = (_tre_stack_push($call$i,$21)|0);
	              $cmp49$i = ($call$i122$i|0)==(0);
	              if (!($cmp49$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i122$i;
	               break L34;
	              }
	              $call$i123$i = (_tre_stack_push($call$i,0)|0);
	              $cmp53$i = ($call$i123$i|0)==(0);
	              if (!($cmp53$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i123$i;
	               break L34;
	              }
	              $22 = HEAP32[$20>>2]|0;
	              $call$i124$i = (_tre_stack_push($call$i,$22)|0);
	              $cmp58$i = ($call$i124$i|0)==(0);
	              if (!($cmp58$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i124$i;
	               break L34;
	              }
	              $call$i125$i = (_tre_stack_push($call$i,0)|0);
	              $status$0$be$i = $call$i125$i;
	             } else if ((($11|0) == 2)) {
	              $obj66$i = (($10) + 4|0);
	              $23 = HEAP32[$obj66$i>>2]|0;
	              $value$c$i$i = $15;
	              $call$i126$i = (_tre_stack_push($call$i,$value$c$i$i)|0);
	              $cmp68$i = ($call$i126$i|0)==(0);
	              if (!($cmp68$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i126$i;
	               break L34;
	              }
	              $call$i127$i = (_tre_stack_push($call$i,$10)|0);
	              $cmp72$i = ($call$i127$i|0)==(0);
	              if (!($cmp72$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i127$i;
	               break L34;
	              }
	              $call$i128$i = (_tre_stack_push($call$i,(1))|0);
	              $cmp76$i = ($call$i128$i|0)==(0);
	              if (!($cmp76$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i128$i;
	               break L34;
	              }
	              $24 = HEAP32[$23>>2]|0;
	              $call$i129$i = (_tre_stack_push($call$i,$24)|0);
	              $cmp80$i = ($call$i129$i|0)==(0);
	              if (!($cmp80$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i129$i;
	               break L34;
	              }
	              $call$i130$i = (_tre_stack_push($call$i,0)|0);
	              $cmp84$i = ($call$i130$i|0)==(0);
	              if (!($cmp84$i)) {
	               $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $call$i130$i;
	               break L34;
	              }
	              $min$i = (($23) + 4|0);
	              $25 = HEAP32[$min$i>>2]|0;
	              $cmp87$i = ($25|0)>(1);
	              if ($cmp87$i) {
	               label = 45;
	              } else {
	               $max$i = (($23) + 8|0);
	               $26 = HEAP32[$max$i>>2]|0;
	               $cmp89$i = ($26|0)>(1);
	               if ($cmp89$i) {
	                label = 45;
	               } else {
	                $164 = $15;
	               }
	              }
	              if ((label|0) == 45) {
	               label = 0;
	               HEAP32[$pos_add$i>>2] = 0;
	               $164 = 0;
	              }
	              $inc$i = (($iter_depth$0234$i252) + 1)|0;
	              $$be = $164;$iter_depth$0234$i$be = $inc$i;$pos_add_total$0235$i$be = $pos_add_total$0235$i251;
	              break;
	             } else {
	              $$be = $15;$iter_depth$0234$i$be = $iter_depth$0234$i252;$pos_add_total$0235$i$be = $pos_add_total$0235$i251;
	              break;
	             }
	             $cmp7$i = ($status$0$be$i|0)==(0);
	             if ($cmp7$i) {
	              $$be = $15;$iter_depth$0234$i$be = $iter_depth$0234$i252;$pos_add_total$0235$i$be = $pos_add_total$0235$i251;
	             } else {
	              $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i251;$status$0$lcssa$i = $status$0$be$i;
	              break L34;
	             }
	            } else if ((($9|0) == 1)) {
	             $obj94$i = (($10) + 4|0);
	             $27 = HEAP32[$obj94$i>>2]|0;
	             $dec$i132$i = (($stack$idx$val$i253) + -3)|0;
	             HEAP32[$stack$idx96$i>>2] = $dec$i132$i;
	             $arrayidx$i134$i = (($8) + ($dec$i132$i<<2)|0);
	             $28 = HEAP32[$arrayidx$i134$i>>2]|0;
	             HEAP32[$pos_add$i>>2] = $28;
	             $min96$i = (($27) + 4|0);
	             $29 = HEAP32[$min96$i>>2]|0;
	             $cmp97$i = ($29|0)>(1);
	             if ($cmp97$i) {
	              HEAP32[$seq2$i>>2] = 0;
	              $arg107$i287 = $27;
	              label = 51;
	             } else {
	              $max99$i = (($27) + 8|0);
	              $30 = HEAP32[$max99$i>>2]|0;
	              $cmp100$i = ($30|0)>(1);
	              if ($cmp100$i) {
	               HEAP32[$seq2$i>>2] = 0;
	               $cmp103$i227 = ($29|0)>(0);
	               if ($cmp103$i227) {
	                $arg107$i287 = $27;
	                label = 51;
	               } else {
	                $$lcssa = $29;$arg107$i286 = $27;$pos_add_save$0$i$lcssa = $28;$seq1$0$i$lcssa = 0;
	                label = 60;
	               }
	              } else {
	               $61 = $28;
	              }
	             }
	             L68: do {
	              if ((label|0) == 51) {
	               label = 0;
	               $165 = $28;$31 = $29;$j$0$i229 = 1;$seq1$0$i228 = 0;
	               while(1) {
	                $cmp106$i = ($j$0$i229|0)<($31|0);
	                $cond$i = $cmp106$i ? 1 : 2;
	                $32 = HEAP32[$arg107$i287>>2]|0;
	                $call108$i = (_tre_copy_ast($call1,$call$i,$32,$cond$i,$pos_add$i,$tag_directions$1,$copy$i,$max_pos$i)|0);
	                $cmp109$i = ($call108$i|0)==(0);
	                if (!($cmp109$i)) {
	                 $retval$0$i138 = $call108$i;
	                 break L31;
	                }
	                $cmp112$i = ($seq1$0$i228|0)==(0|0);
	                $33 = HEAP32[$copy$i>>2]|0;
	                if ($cmp112$i) {
	                 $seq1$1$i = $33;
	                } else {
	                 $call$i$i147$i = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	                 $tobool$i$i148$i = ($call$i$i147$i|0)==(0|0);
	                 if ($tobool$i$i148$i) {
	                  $retval$0$i138 = 12;
	                  break L31;
	                 }
	                 $call1$i$i149$i = (___tre_mem_alloc_impl($call1,0,0,1,8)|0);
	                 $obj$i$i150$i = (($call$i$i147$i) + 4|0);
	                 HEAP32[$obj$i$i150$i>>2] = $call1$i$i149$i;
	                 $tobool3$i$i151$i = ($call1$i$i149$i|0)==(0|0);
	                 if ($tobool3$i$i151$i) {
	                  $retval$0$i138 = 12;
	                  break L31;
	                 }
	                 HEAP32[$call$i$i147$i>>2] = 1;
	                 $nullable$i$i154$i = (($call$i$i147$i) + 8|0);
	                 HEAP32[$nullable$i$i154$i>>2] = -1;
	                 $submatch_id$i$i155$i = (($call$i$i147$i) + 12|0);
	                 HEAP32[$submatch_id$i$i155$i>>2] = -1;
	                 HEAP32[$call1$i$i149$i>>2] = $seq1$0$i228;
	                 $34 = HEAP32[$obj$i$i150$i>>2]|0;
	                 $right3$i157$i = (($34) + 4|0);
	                 HEAP32[$right3$i157$i>>2] = $33;
	                 $num_submatches$i158$i = (($seq1$0$i228) + 16|0);
	                 $35 = HEAP32[$num_submatches$i158$i>>2]|0;
	                 $num_submatches4$i159$i = (($33) + 16|0);
	                 $36 = HEAP32[$num_submatches4$i159$i>>2]|0;
	                 $add$i160$i = (($36) + ($35))|0;
	                 $num_submatches5$i161$i = (($call$i$i147$i) + 16|0);
	                 HEAP32[$num_submatches5$i161$i>>2] = $add$i160$i;
	                 $seq1$1$i = $call$i$i147$i;
	                }
	                $cmp116$i = ($seq1$1$i|0)==(0|0);
	                if ($cmp116$i) {
	                 $retval$0$i138 = 12;
	                 break L31;
	                }
	                $$pre$i = HEAP32[$min96$i>>2]|0;
	                $cmp103$i = ($j$0$i229|0)<($$pre$i|0);
	                if (!($cmp103$i)) {
	                 $$lcssa = $$pre$i;$arg107$i286 = $arg107$i287;$pos_add_save$0$i$lcssa = $165;$seq1$0$i$lcssa = $seq1$1$i;
	                 label = 60;
	                 break L68;
	                }
	                $$pre = HEAP32[$pos_add$i>>2]|0;
	                $phitmp281 = (($j$0$i229) + 1)|0;
	                $165 = $$pre;$31 = $$pre$i;$j$0$i229 = $phitmp281;$seq1$0$i228 = $seq1$1$i;
	               }
	              }
	             } while(0);
	             if ((label|0) == 60) {
	              label = 0;
	              $max120$i = (($27) + 8|0);
	              $37 = HEAP32[$max120$i>>2]|0;
	              $cmp121$i = ($37|0)==(-1);
	              do {
	               if ($cmp121$i) {
	                $38 = HEAP32[$pos_add$i>>2]|0;
	                $39 = HEAP32[$arg107$i286>>2]|0;
	                $call124$i = (_tre_copy_ast($call1,$call$i,$39,0,$pos_add$i,0,$seq2$i,$max_pos$i)|0);
	                $cmp125$i = ($call124$i|0)==(0);
	                if (!($cmp125$i)) {
	                 $retval$0$i138 = $call124$i;
	                 break L31;
	                }
	                $40 = HEAP32[$seq2$i>>2]|0;
	                $call$i$i165$i = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	                $tobool$i$i166$i = ($call$i$i165$i|0)==(0|0);
	                if ($tobool$i$i166$i) {
	                 label = 65;
	                 break L35;
	                }
	                $call1$i$i167$i = (___tre_mem_alloc_impl($call1,0,0,1,16)|0);
	                $obj$i$i168$i = (($call$i$i165$i) + 4|0);
	                HEAP32[$obj$i$i168$i>>2] = $call1$i$i167$i;
	                $tobool3$i$i169$i = ($call1$i$i167$i|0)==(0|0);
	                if ($tobool3$i$i169$i) {
	                 label = 65;
	                 break L35;
	                }
	                HEAP32[$call$i$i165$i>>2] = 2;
	                $nullable$i$i172$i = (($call$i$i165$i) + 8|0);
	                HEAP32[$nullable$i$i172$i>>2] = -1;
	                $submatch_id$i$i173$i = (($call$i$i165$i) + 12|0);
	                HEAP32[$submatch_id$i$i173$i>>2] = -1;
	                HEAP32[$call1$i$i167$i>>2] = $40;
	                $min2$i$i = (($call1$i$i167$i) + 4|0);
	                HEAP32[$min2$i$i>>2] = 0;
	                $max3$i$i = (($call1$i$i167$i) + 8|0);
	                HEAP32[$max3$i$i>>2] = -1;
	                $41 = (($call1$i$i167$i) + 12|0);
	                $bf$load$i$i = HEAP8[$41>>0]|0;
	                $bf$clear$i$i = $bf$load$i$i & -2;
	                HEAP8[$41>>0] = $bf$clear$i$i;
	                $num_submatches$i174$i = (($40) + 16|0);
	                $42 = HEAP32[$num_submatches$i174$i>>2]|0;
	                $num_submatches5$i175$i = (($call$i$i165$i) + 16|0);
	                HEAP32[$num_submatches5$i175$i>>2] = $42;
	                HEAP32[$seq2$i>>2] = $call$i$i165$i;
	                $55 = $call$i$i165$i;$pos_add_save$2$i = $38;
	               } else {
	                $cmp136217$i = ($$lcssa|0)<($37|0);
	                if ($cmp136217$i) {
	                 $50 = 0;$j$1218$i = $$lcssa;
	                } else {
	                 $55 = 0;$pos_add_save$2$i = $pos_add_save$0$i$lcssa;
	                 break;
	                }
	                while(1) {
	                 $48 = HEAP32[$pos_add$i>>2]|0;
	                 $49 = HEAP32[$arg107$i286>>2]|0;
	                 $call141$i = (_tre_copy_ast($call1,$call$i,$49,0,$pos_add$i,0,$copy139$i,$max_pos$i)|0);
	                 $cmp142$i = ($call141$i|0)==(0);
	                 if (!($cmp142$i)) {
	                  $retval$0$i138 = $call141$i;
	                  break L31;
	                 }
	                 $cmp145$i = ($50|0)==(0|0);
	                 $51 = HEAP32[$copy139$i>>2]|0;
	                 if ($cmp145$i) {
	                  $44 = $51;
	                 } else {
	                  $call$i$i178$i = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	                  $tobool$i$i179$i = ($call$i$i178$i|0)==(0|0);
	                  if ($tobool$i$i179$i) {
	                   label = 73;
	                   break L35;
	                  }
	                  $call1$i$i180$i = (___tre_mem_alloc_impl($call1,0,0,1,8)|0);
	                  $obj$i$i181$i = (($call$i$i178$i) + 4|0);
	                  HEAP32[$obj$i$i181$i>>2] = $call1$i$i180$i;
	                  $tobool3$i$i182$i = ($call1$i$i180$i|0)==(0|0);
	                  if ($tobool3$i$i182$i) {
	                   label = 73;
	                   break L35;
	                  }
	                  HEAP32[$call$i$i178$i>>2] = 1;
	                  $nullable$i$i185$i = (($call$i$i178$i) + 8|0);
	                  HEAP32[$nullable$i$i185$i>>2] = -1;
	                  $submatch_id$i$i186$i = (($call$i$i178$i) + 12|0);
	                  HEAP32[$submatch_id$i$i186$i>>2] = -1;
	                  HEAP32[$call1$i$i180$i>>2] = $51;
	                  $52 = HEAP32[$obj$i$i181$i>>2]|0;
	                  $right3$i188$i = (($52) + 4|0);
	                  HEAP32[$right3$i188$i>>2] = $50;
	                  $num_submatches$i189$i = (($51) + 16|0);
	                  $53 = HEAP32[$num_submatches$i189$i>>2]|0;
	                  $num_submatches4$i190$i = (($50) + 16|0);
	                  $54 = HEAP32[$num_submatches4$i190$i>>2]|0;
	                  $add$i191$i = (($54) + ($53))|0;
	                  $num_submatches5$i192$i = (($call$i$i178$i) + 16|0);
	                  HEAP32[$num_submatches5$i192$i>>2] = $add$i191$i;
	                  $44 = $call$i$i178$i;
	                 }
	                 HEAP32[$seq2$i>>2] = $44;
	                 $cmp150$i = ($44|0)==(0|0);
	                 if ($cmp150$i) {
	                  $retval$0$i138 = 12;
	                  break L31;
	                 }
	                 $call$i$i136$i = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	                 $tobool$i$i137$i = ($call$i$i136$i|0)==(0|0);
	                 if ($tobool$i$i137$i) {
	                  $retval$0$i138 = 12;
	                  break L31;
	                 }
	                 $call1$i$i138$i = (___tre_mem_alloc_impl($call1,0,0,1,20)|0);
	                 $obj$i$i139$i = (($call$i$i136$i) + 4|0);
	                 HEAP32[$obj$i$i139$i>>2] = $call1$i$i138$i;
	                 $tobool3$i$i140$i = ($call1$i$i138$i|0)==(0|0);
	                 if ($tobool3$i$i140$i) {
	                  $retval$0$i138 = 12;
	                  break L31;
	                 }
	                 HEAP32[$call$i$i136$i>>2] = 0;
	                 $nullable$i$i143$i = (($call$i$i136$i) + 8|0);
	                 HEAP32[$nullable$i$i143$i>>2] = -1;
	                 $submatch_id$i$i144$i = (($call$i$i136$i) + 12|0);
	                 HEAP32[$submatch_id$i$i144$i>>2] = -1;
	                 HEAP32[$call1$i$i138$i>>2] = -1;
	                 $code_max2$i$i = (($call1$i$i138$i) + 4|0);
	                 HEAP32[$code_max2$i$i>>2] = -1;
	                 $position3$i$i = (($call1$i$i138$i) + 8|0);
	                 HEAP32[$position3$i$i>>2] = -1;
	                 $call$i$i98$i = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	                 $tobool$i$i99$i = ($call$i$i98$i|0)==(0|0);
	                 if ($tobool$i$i99$i) {
	                  label = 79;
	                  break L35;
	                 }
	                 $call1$i$i100$i = (___tre_mem_alloc_impl($call1,0,0,1,8)|0);
	                 $obj$i$i101$i = (($call$i$i98$i) + 4|0);
	                 HEAP32[$obj$i$i101$i>>2] = $call1$i$i100$i;
	                 $tobool3$i$i102$i = ($call1$i$i100$i|0)==(0|0);
	                 if ($tobool3$i$i102$i) {
	                  label = 79;
	                  break L35;
	                 }
	                 HEAP32[$call$i$i98$i>>2] = 3;
	                 $nullable$i$i105$i = (($call$i$i98$i) + 8|0);
	                 HEAP32[$nullable$i$i105$i>>2] = -1;
	                 $submatch_id$i$i106$i = (($call$i$i98$i) + 12|0);
	                 HEAP32[$submatch_id$i$i106$i>>2] = -1;
	                 HEAP32[$call1$i$i100$i>>2] = $call$i$i136$i;
	                 $43 = HEAP32[$obj$i$i101$i>>2]|0;
	                 $right3$i108$i = (($43) + 4|0);
	                 HEAP32[$right3$i108$i>>2] = $44;
	                 $num_submatches$i109$i = (($call$i$i136$i) + 16|0);
	                 $45 = HEAP32[$num_submatches$i109$i>>2]|0;
	                 $num_submatches4$i110$i = (($44) + 16|0);
	                 $46 = HEAP32[$num_submatches4$i110$i>>2]|0;
	                 $add$i111$i = (($46) + ($45))|0;
	                 $num_submatches5$i112$i = (($call$i$i98$i) + 16|0);
	                 HEAP32[$num_submatches5$i112$i>>2] = $add$i111$i;
	                 HEAP32[$seq2$i>>2] = $call$i$i98$i;
	                 $inc162$i = (($j$1218$i) + 1)|0;
	                 $47 = HEAP32[$max120$i>>2]|0;
	                 $cmp136$i = ($inc162$i|0)<($47|0);
	                 if ($cmp136$i) {
	                  $50 = $call$i$i98$i;$j$1218$i = $inc162$i;
	                 } else {
	                  $55 = $call$i$i98$i;$pos_add_save$2$i = $48;
	                  break;
	                 }
	                }
	               }
	              } while(0);
	              HEAP32[$pos_add$i>>2] = $pos_add_save$2$i;
	              $cmp165$i = ($seq1$0$i$lcssa|0)==(0|0);
	              do {
	               if ($cmp165$i) {
	                $seq1$2$i = $55;
	                label = 85;
	               } else {
	                $cmp168$i = ($55|0)==(0|0);
	                if ($cmp168$i) {
	                 $seq1$2204$i = $seq1$0$i$lcssa;
	                 break;
	                }
	                $call$i$i$i = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	                $tobool$i$i$i = ($call$i$i$i|0)==(0|0);
	                if ($tobool$i$i$i) {
	                 $retval$0$i138 = 12;
	                 break L31;
	                }
	                $call1$i$i$i = (___tre_mem_alloc_impl($call1,0,0,1,8)|0);
	                $obj$i$i$i = (($call$i$i$i) + 4|0);
	                HEAP32[$obj$i$i$i>>2] = $call1$i$i$i;
	                $tobool3$i$i$i = ($call1$i$i$i|0)==(0|0);
	                if ($tobool3$i$i$i) {
	                 $retval$0$i138 = 12;
	                 break L31;
	                }
	                HEAP32[$call$i$i$i>>2] = 1;
	                $nullable$i$i$i = (($call$i$i$i) + 8|0);
	                HEAP32[$nullable$i$i$i>>2] = -1;
	                $submatch_id$i$i$i = (($call$i$i$i) + 12|0);
	                HEAP32[$submatch_id$i$i$i>>2] = -1;
	                HEAP32[$call1$i$i$i>>2] = $seq1$0$i$lcssa;
	                $56 = HEAP32[$obj$i$i$i>>2]|0;
	                $right3$i$i = (($56) + 4|0);
	                HEAP32[$right3$i$i>>2] = $55;
	                $num_submatches$i$i = (($seq1$0$i$lcssa) + 16|0);
	                $57 = HEAP32[$num_submatches$i$i>>2]|0;
	                $num_submatches4$i$i = (($55) + 16|0);
	                $58 = HEAP32[$num_submatches4$i$i>>2]|0;
	                $add$i$i = (($58) + ($57))|0;
	                $num_submatches5$i$i = (($call$i$i$i) + 16|0);
	                HEAP32[$num_submatches5$i$i>>2] = $add$i$i;
	                $seq1$2$i = $call$i$i$i;
	                label = 85;
	               }
	              } while(0);
	              if ((label|0) == 85) {
	               label = 0;
	               $cmp173$i = ($seq1$2$i|0)==(0|0);
	               if ($cmp173$i) {
	                $retval$0$i138 = 12;
	                break L31;
	               } else {
	                $seq1$2204$i = $seq1$2$i;
	               }
	              }
	              $obj176$i = (($seq1$2204$i) + 4|0);
	              $59 = HEAP32[$obj176$i>>2]|0;
	              HEAP32[$obj94$i>>2] = $59;
	              $60 = HEAP32[$seq1$2204$i>>2]|0;
	              HEAP32[$10>>2] = $60;
	              $61 = $pos_add_save$2$i;
	             }
	             $dec$i = (($iter_depth$0234$i252) + -1)|0;
	             $sub$i = (($61) - ($28))|0;
	             $add181$i = (($sub$i) + ($pos_add_total$0235$i251))|0;
	             $cmp182$i = ($dec$i|0)==(0);
	             if ($cmp182$i) {
	              HEAP32[$pos_add$i>>2] = $add181$i;
	              $$be = $add181$i;$iter_depth$0234$i$be = 0;$pos_add_total$0235$i$be = $add181$i;
	             } else {
	              $$be = $61;$iter_depth$0234$i$be = $dec$i;$pos_add_total$0235$i$be = $add181$i;
	             }
	            } else {
	             $$be = $15;$iter_depth$0234$i$be = $iter_depth$0234$i252;$pos_add_total$0235$i$be = $pos_add_total$0235$i251;
	            }
	           } while(0);
	           $stack$idx$val$i = HEAP32[$stack$idx96$i>>2]|0;
	           $cmp9$i = ($stack$idx$val$i|0)>($stack$idx96$val$i|0);
	           if ($cmp9$i) {
	            $15 = $$be;$iter_depth$0234$i252 = $iter_depth$0234$i$be;$pos_add_total$0235$i251 = $pos_add_total$0235$i$be;$stack$idx$val$i253 = $stack$idx$val$i;
	           } else {
	            $pos_add_total$0235$i$lcssa = $pos_add_total$0235$i$be;$status$0$lcssa$i = 0;
	            break L34;
	           }
	          }
	          if ((label|0) == 65) {
	           HEAP32[$seq2$i>>2] = 0;
	           $retval$0$i138 = 12;
	           break L31;
	          }
	          else if ((label|0) == 73) {
	           HEAP32[$seq2$i>>2] = 0;
	           $retval$0$i138 = 12;
	           break L31;
	          }
	          else if ((label|0) == 79) {
	           HEAP32[$seq2$i>>2] = 0;
	           $retval$0$i138 = 12;
	           break L31;
	          }
	         } else {
	          $pos_add_total$0235$i$lcssa = 0;$status$0$lcssa$i = 0;
	         }
	        } while(0);
	        $62 = HEAP32[$position>>2]|0;
	        $add187$i = (($62) + ($pos_add_total$0235$i$lcssa))|0;
	        $63 = HEAP32[$max_pos$i>>2]|0;
	        $cmp188$i = ($63|0)>($add187$i|0);
	        $$add187$i = $cmp188$i ? $63 : $add187$i;
	        HEAP32[$position>>2] = $$add187$i;
	        $retval$0$i138 = $status$0$lcssa$i;
	       } else {
	        $retval$0$i138 = $call$i97$i;
	       }
	      } else {
	       $retval$0$i138 = $call$i$i;
	      }
	     } while(0);
	     $cmp101 = ($retval$0$i138|0)==(0);
	     if ($cmp101) {
	      $64 = HEAP32[$position>>2]|0;
	      $inc = (($64) + 1)|0;
	      HEAP32[$position>>2] = $inc;
	      $call$i$i139 = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	      $tobool$i$i = ($call$i$i139|0)==(0|0);
	      if ($tobool$i$i) {
	       $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	      } else {
	       $call1$i$i = (___tre_mem_alloc_impl($call1,0,0,1,20)|0);
	       $obj$i$i = (($call$i$i139) + 4|0);
	       HEAP32[$obj$i$i>>2] = $call1$i$i;
	       $tobool3$i$i = ($call1$i$i|0)==(0|0);
	       if ($tobool3$i$i) {
	        $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	       } else {
	        HEAP32[$call$i$i139>>2] = 0;
	        $nullable$i$i = (($call$i$i139) + 8|0);
	        HEAP32[$nullable$i$i>>2] = -1;
	        $submatch_id$i$i = (($call$i$i139) + 12|0);
	        HEAP32[$submatch_id$i$i>>2] = -1;
	        HEAP32[$call1$i$i>>2] = 0;
	        $code_max2$i = (($call1$i$i) + 4|0);
	        HEAP32[$code_max2$i>>2] = 0;
	        $position3$i = (($call1$i$i) + 8|0);
	        HEAP32[$position3$i>>2] = $64;
	        $call$i$i143 = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	        $tobool$i$i144 = ($call$i$i143|0)==(0|0);
	        if ($tobool$i$i144) {
	         $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	        } else {
	         $call1$i$i145 = (___tre_mem_alloc_impl($call1,0,0,1,8)|0);
	         $obj$i$i146 = (($call$i$i143) + 4|0);
	         HEAP32[$obj$i$i146>>2] = $call1$i$i145;
	         $tobool3$i$i147 = ($call1$i$i145|0)==(0|0);
	         if ($tobool3$i$i147) {
	          $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	         } else {
	          HEAP32[$call$i$i143>>2] = 1;
	          $nullable$i$i150 = (($call$i$i143) + 8|0);
	          HEAP32[$nullable$i$i150>>2] = -1;
	          $submatch_id$i$i151 = (($call$i$i143) + 12|0);
	          HEAP32[$submatch_id$i$i151>>2] = -1;
	          HEAP32[$call1$i$i145>>2] = $2;
	          $65 = HEAP32[$obj$i$i146>>2]|0;
	          $right3$i = (($65) + 4|0);
	          HEAP32[$right3$i>>2] = $call$i$i139;
	          $num_submatches$i = (($2) + 16|0);
	          $66 = HEAP32[$num_submatches$i>>2]|0;
	          $num_submatches4$i = (($call$i$i139) + 16|0);
	          $67 = HEAP32[$num_submatches4$i>>2]|0;
	          $add$i152 = (($67) + ($66))|0;
	          $num_submatches5$i = (($call$i$i143) + 16|0);
	          HEAP32[$num_submatches5$i>>2] = $add$i152;
	          $stack$idx146$val$i = HEAP32[$stack$idx96$i>>2]|0;
	          $call$i$i155 = (_tre_stack_push($call$i,$call$i$i143)|0);
	          $cmp$i156 = ($call$i$i155|0)==(0);
	          if ($cmp$i156) {
	           $call$i147$i = (_tre_stack_push($call$i,0)|0);
	           $cmp4$i157 = ($call$i147$i|0)==(0);
	           if ($cmp4$i157) {
	            $stack$idx$val244$i = HEAP32[$stack$idx96$i>>2]|0;
	            $cmp8245$i = ($stack$idx$val244$i|0)>($stack$idx146$val$i|0);
	            L126: do {
	             if ($cmp8245$i) {
	              $stack$i$i160 = (($call$i) + 16|0);
	              $68 = $stack$idx$val244$i;
	              L128: while(1) {
	               $dec$i$i161 = (($68) + -1)|0;
	               HEAP32[$stack$idx96$i>>2] = $dec$i$i161;
	               $69 = HEAP32[$stack$i$i160>>2]|0;
	               $arrayidx$i$i162 = (($69) + ($dec$i$i161<<2)|0);
	               $70 = HEAP32[$arrayidx$i$i162>>2]|0;
	               $dec$i149$i = (($68) + -2)|0;
	               HEAP32[$stack$idx96$i>>2] = $dec$i149$i;
	               $voidptr_value$i$i164 = (($69) + ($dec$i149$i<<2)|0);
	               $71 = HEAP32[$voidptr_value$i$i164>>2]|0;
	               do {
	                if ((($70|0) == 0)) {
	                 $72 = HEAP32[$71>>2]|0;
	                 if ((($72|0) == 0)) {
	                  $obj$i169 = (($71) + 4|0);
	                  $73 = HEAP32[$obj$i169>>2]|0;
	                  $74 = HEAP32[$73>>2]|0;
	                  $cmp12$i = ($74|0)==(-4);
	                  if ($cmp12$i) {
	                   $nullable$i = (($71) + 8|0);
	                   HEAP32[$nullable$i>>2] = 0;
	                   $position$i = (($73) + 8|0);
	                   $75 = HEAP32[$position$i>>2]|0;
	                   $call$i151$i = (___tre_mem_alloc_impl($call1,0,0,1,64)|0);
	                   $cmp$i$i = ($call$i151$i|0)==(0|0);
	                   if ($cmp$i$i) {
	                    label = 104;
	                    break L128;
	                   }
	                   HEAP32[$call$i151$i>>2] = $75;
	                   $code_min3$i$i = (($call$i151$i) + 4|0);
	                   HEAP32[$code_min3$i$i>>2] = 0;
	                   $code_max5$i$i = (($call$i151$i) + 8|0);
	                   HEAP32[$code_max5$i$i>>2] = 1114111;
	                   $class7$i$i = (($call$i151$i) + 20|0);
	                   HEAP32[$class7$i$i>>2] = 0;
	                   $neg_classes9$i$i = (($call$i151$i) + 24|0);
	                   HEAP32[$neg_classes9$i$i>>2] = 0;
	                   $backref11$i$i = (($call$i151$i) + 28|0);
	                   $firstpos$i = (($71) + 24|0);
	                   ;HEAP32[$backref11$i$i+0>>2]=4294967295|0;HEAP32[$backref11$i$i+4>>2]=4294967295|0;HEAP32[$backref11$i$i+8>>2]=4294967295|0;HEAP32[$backref11$i$i+12>>2]=4294967295|0;
	                   HEAP32[$firstpos$i>>2] = $call$i151$i;
	                   $76 = HEAP32[$position$i>>2]|0;
	                   $code_max$i = (($73) + 4|0);
	                   $77 = HEAP32[$code_max$i>>2]|0;
	                   $call$i152$i = (___tre_mem_alloc_impl($call1,0,0,1,64)|0);
	                   $cmp$i153$i = ($call$i152$i|0)==(0|0);
	                   if ($cmp$i153$i) {
	                    label = 106;
	                    break L128;
	                   }
	                   HEAP32[$call$i152$i>>2] = $76;
	                   $code_min3$i155$i = (($call$i152$i) + 4|0);
	                   HEAP32[$code_min3$i155$i>>2] = 0;
	                   $code_max5$i156$i = (($call$i152$i) + 8|0);
	                   HEAP32[$code_max5$i156$i>>2] = 1114111;
	                   $class7$i157$i = (($call$i152$i) + 20|0);
	                   HEAP32[$class7$i157$i>>2] = 0;
	                   $neg_classes9$i158$i = (($call$i152$i) + 24|0);
	                   HEAP32[$neg_classes9$i158$i>>2] = 0;
	                   $backref11$i159$i = (($call$i152$i) + 28|0);
	                   HEAP32[$backref11$i159$i>>2] = $77;
	                   $arrayidx12$i160$i = (($call$i152$i) + 32|0);
	                   HEAP32[$arrayidx12$i160$i>>2] = -1;
	                   $code_min15$i162$i = (($call$i152$i) + 36|0);
	                   HEAP32[$code_min15$i162$i>>2] = -1;
	                   $code_max17$i163$i = (($call$i152$i) + 40|0);
	                   HEAP32[$code_max17$i163$i>>2] = -1;
	                   $lastpos$i = (($71) + 28|0);
	                   HEAP32[$lastpos$i>>2] = $call$i152$i;
	                   break;
	                  }
	                  $cmp25$i = ($74|0)<(0);
	                  $nullable27$i = (($71) + 8|0);
	                  if ($cmp25$i) {
	                   HEAP32[$nullable27$i>>2] = 1;
	                   $call$i167$i = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	                   $cmp$i168$i = ($call$i167$i|0)==(0|0);
	                   if ($cmp$i168$i) {
	                    label = 110;
	                    break L128;
	                   }
	                   HEAP32[$call$i167$i>>2] = -1;
	                   $code_min$i$i = (($call$i167$i) + 4|0);
	                   HEAP32[$code_min$i$i>>2] = -1;
	                   $code_max$i$i = (($call$i167$i) + 8|0);
	                   HEAP32[$code_max$i$i>>2] = -1;
	                   $firstpos29$i = (($71) + 24|0);
	                   HEAP32[$firstpos29$i>>2] = $call$i167$i;
	                   $call$i171$i = (___tre_mem_alloc_impl($call1,0,0,1,32)|0);
	                   $cmp$i172$i = ($call$i171$i|0)==(0|0);
	                   if ($cmp$i172$i) {
	                    label = 112;
	                    break L128;
	                   }
	                   HEAP32[$call$i171$i>>2] = -1;
	                   $code_min$i174$i = (($call$i171$i) + 4|0);
	                   HEAP32[$code_min$i174$i>>2] = -1;
	                   $code_max$i175$i = (($call$i171$i) + 8|0);
	                   HEAP32[$code_max$i175$i>>2] = -1;
	                   $lastpos35$i = (($71) + 28|0);
	                   HEAP32[$lastpos35$i>>2] = $call$i171$i;
	                   break;
	                  } else {
	                   HEAP32[$nullable27$i>>2] = 0;
	                   $position42$i = (($73) + 8|0);
	                   $78 = HEAP32[$position42$i>>2]|0;
	                   $code_max44$i = (($73) + 4|0);
	                   $79 = HEAP32[$code_max44$i>>2]|0;
	                   $call$i179$i = (___tre_mem_alloc_impl($call1,0,0,1,64)|0);
	                   $cmp$i180$i = ($call$i179$i|0)==(0|0);
	                   if ($cmp$i180$i) {
	                    label = 115;
	                    break L128;
	                   }
	                   HEAP32[$call$i179$i>>2] = $78;
	                   $code_min3$i182$i = (($call$i179$i) + 4|0);
	                   HEAP32[$code_min3$i182$i>>2] = $74;
	                   $code_max5$i183$i = (($call$i179$i) + 8|0);
	                   HEAP32[$code_max5$i183$i>>2] = $79;
	                   $class7$i184$i = (($call$i179$i) + 20|0);
	                   HEAP32[$class7$i184$i>>2] = 0;
	                   $neg_classes9$i185$i = (($call$i179$i) + 24|0);
	                   HEAP32[$neg_classes9$i185$i>>2] = 0;
	                   $backref11$i186$i = (($call$i179$i) + 28|0);
	                   $firstpos46$i = (($71) + 24|0);
	                   ;HEAP32[$backref11$i186$i+0>>2]=4294967295|0;HEAP32[$backref11$i186$i+4>>2]=4294967295|0;HEAP32[$backref11$i186$i+8>>2]=4294967295|0;HEAP32[$backref11$i186$i+12>>2]=4294967295|0;
	                   HEAP32[$firstpos46$i>>2] = $call$i179$i;
	                   $80 = HEAP32[$position42$i>>2]|0;
	                   $81 = HEAP32[$73>>2]|0;
	                   $82 = HEAP32[$code_max44$i>>2]|0;
	                   $class$i = (($73) + 12|0);
	                   $83 = HEAP32[$class$i>>2]|0;
	                   $neg_classes$i = (($73) + 16|0);
	                   $84 = HEAP32[$neg_classes$i>>2]|0;
	                   $call$i194$i = (___tre_mem_alloc_impl($call1,0,0,1,64)|0);
	                   $cmp$i195$i = ($call$i194$i|0)==(0|0);
	                   if ($cmp$i195$i) {
	                    label = 117;
	                    break L128;
	                   }
	                   HEAP32[$call$i194$i>>2] = $80;
	                   $code_min3$i197$i = (($call$i194$i) + 4|0);
	                   HEAP32[$code_min3$i197$i>>2] = $81;
	                   $code_max5$i198$i = (($call$i194$i) + 8|0);
	                   HEAP32[$code_max5$i198$i>>2] = $82;
	                   $class7$i199$i = (($call$i194$i) + 20|0);
	                   HEAP32[$class7$i199$i>>2] = $83;
	                   $neg_classes9$i200$i = (($call$i194$i) + 24|0);
	                   HEAP32[$neg_classes9$i200$i>>2] = $84;
	                   $backref11$i201$i = (($call$i194$i) + 28|0);
	                   $lastpos55$i = (($71) + 28|0);
	                   ;HEAP32[$backref11$i201$i+0>>2]=4294967295|0;HEAP32[$backref11$i201$i+4>>2]=4294967295|0;HEAP32[$backref11$i201$i+8>>2]=4294967295|0;HEAP32[$backref11$i201$i+12>>2]=4294967295|0;
	                   HEAP32[$lastpos55$i>>2] = $call$i194$i;
	                   break;
	                  }
	                 } else if ((($72|0) == 3)) {
	                  $call$i209$i = (_tre_stack_push($call$i,$71)|0);
	                  $cmp65$i = ($call$i209$i|0)==(0);
	                  if (!($cmp65$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i209$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $call$i210$i = (_tre_stack_push($call$i,(1))|0);
	                  $cmp70$i = ($call$i210$i|0)==(0);
	                  if (!($cmp70$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i210$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $obj74$i = (($71) + 4|0);
	                  $85 = HEAP32[$obj74$i>>2]|0;
	                  $right$i171 = (($85) + 4|0);
	                  $86 = HEAP32[$right$i171>>2]|0;
	                  $call$i211$i = (_tre_stack_push($call$i,$86)|0);
	                  $cmp76$i172 = ($call$i211$i|0)==(0);
	                  if (!($cmp76$i172)) {
	                   $counts$0 = 0;$errcode$0 = $call$i211$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $call$i212$i = (_tre_stack_push($call$i,0)|0);
	                  $cmp81$i = ($call$i212$i|0)==(0);
	                  if (!($cmp81$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i212$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $87 = HEAP32[$obj74$i>>2]|0;
	                  $88 = HEAP32[$87>>2]|0;
	                  $call$i213$i = (_tre_stack_push($call$i,$88)|0);
	                  $cmp87$i175 = ($call$i213$i|0)==(0);
	                  if (!($cmp87$i175)) {
	                   $counts$0 = 0;$errcode$0 = $call$i213$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $call$i214$i = (_tre_stack_push($call$i,0)|0);
	                  $cmp92$i = ($call$i214$i|0)==(0);
	                  if ($cmp92$i) {
	                   break;
	                  } else {
	                   $counts$0 = 0;$errcode$0 = $call$i214$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                 } else if ((($72|0) == 1)) {
	                  $call$i215$i = (_tre_stack_push($call$i,$71)|0);
	                  $cmp98$i = ($call$i215$i|0)==(0);
	                  if (!($cmp98$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i215$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $call$i216$i = (_tre_stack_push($call$i,(2))|0);
	                  $cmp103$i176 = ($call$i216$i|0)==(0);
	                  if (!($cmp103$i176)) {
	                   $counts$0 = 0;$errcode$0 = $call$i216$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $obj107$i = (($71) + 4|0);
	                  $89 = HEAP32[$obj107$i>>2]|0;
	                  $right108$i = (($89) + 4|0);
	                  $90 = HEAP32[$right108$i>>2]|0;
	                  $call$i217$i = (_tre_stack_push($call$i,$90)|0);
	                  $cmp110$i = ($call$i217$i|0)==(0);
	                  if (!($cmp110$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i217$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $call$i218$i = (_tre_stack_push($call$i,0)|0);
	                  $cmp115$i = ($call$i218$i|0)==(0);
	                  if (!($cmp115$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i218$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $91 = HEAP32[$obj107$i>>2]|0;
	                  $92 = HEAP32[$91>>2]|0;
	                  $call$i219$i = (_tre_stack_push($call$i,$92)|0);
	                  $cmp122$i = ($call$i219$i|0)==(0);
	                  if (!($cmp122$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i219$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $call$i220$i = (_tre_stack_push($call$i,0)|0);
	                  $cmp127$i = ($call$i220$i|0)==(0);
	                  if ($cmp127$i) {
	                   break;
	                  } else {
	                   $counts$0 = 0;$errcode$0 = $call$i220$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                 } else if ((($72|0) == 2)) {
	                  $call$i221$i = (_tre_stack_push($call$i,$71)|0);
	                  $cmp133$i = ($call$i221$i|0)==(0);
	                  if (!($cmp133$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i221$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $call$i222$i = (_tre_stack_push($call$i,(3))|0);
	                  $cmp138$i = ($call$i222$i|0)==(0);
	                  if (!($cmp138$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i222$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $obj142$i = (($71) + 4|0);
	                  $93 = HEAP32[$obj142$i>>2]|0;
	                  $94 = HEAP32[$93>>2]|0;
	                  $call$i223$i = (_tre_stack_push($call$i,$94)|0);
	                  $cmp144$i = ($call$i223$i|0)==(0);
	                  if (!($cmp144$i)) {
	                   $counts$0 = 0;$errcode$0 = $call$i223$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $call$i224$i = (_tre_stack_push($call$i,0)|0);
	                  $cmp149$i = ($call$i224$i|0)==(0);
	                  if ($cmp149$i) {
	                   break;
	                  } else {
	                   $counts$0 = 0;$errcode$0 = $call$i224$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                 } else {
	                  break;
	                 }
	                } else if ((($70|0) == 1)) {
	                 $obj153$i = (($71) + 4|0);
	                 $95 = HEAP32[$obj153$i>>2]|0;
	                 $96 = HEAP32[$95>>2]|0;
	                 $nullable155$i = (($96) + 8|0);
	                 $97 = HEAP32[$nullable155$i>>2]|0;
	                 $tobool156$i = ($97|0)==(0);
	                 $right157$i = (($95) + 4|0);
	                 $98 = HEAP32[$right157$i>>2]|0;
	                 if ($tobool156$i) {
	                  $nullable158$i = (($98) + 8|0);
	                  $99 = HEAP32[$nullable158$i>>2]|0;
	                  $tobool159$i = ($99|0)!=(0);
	                  $100 = $tobool159$i;
	                 } else {
	                  $100 = 1;
	                 }
	                 $lor$ext$i = $100&1;
	                 $nullable160$i = (($71) + 8|0);
	                 HEAP32[$nullable160$i>>2] = $lor$ext$i;
	                 $firstpos162$i = (($96) + 24|0);
	                 $101 = HEAP32[$firstpos162$i>>2]|0;
	                 $firstpos164$i = (($98) + 24|0);
	                 $102 = HEAP32[$firstpos164$i>>2]|0;
	                 $call165$i = (_tre_set_union($call1,$101,$102,0,0)|0);
	                 $firstpos166$i = (($71) + 24|0);
	                 HEAP32[$firstpos166$i>>2] = $call165$i;
	                 $tobool168$i = ($call165$i|0)==(0|0);
	                 if ($tobool168$i) {
	                  $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	                  break L12;
	                 }
	                 $103 = HEAP32[$95>>2]|0;
	                 $lastpos172$i = (($103) + 28|0);
	                 $104 = HEAP32[$lastpos172$i>>2]|0;
	                 $105 = HEAP32[$right157$i>>2]|0;
	                 $lastpos174$i = (($105) + 28|0);
	                 $106 = HEAP32[$lastpos174$i>>2]|0;
	                 $call175$i = (_tre_set_union($call1,$104,$106,0,0)|0);
	                 $lastpos176$i = (($71) + 28|0);
	                 HEAP32[$lastpos176$i>>2] = $call175$i;
	                 $tobool178$i = ($call175$i|0)==(0|0);
	                 if ($tobool178$i) {
	                  $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	                  break L12;
	                 }
	                } else if ((($70|0) == 3)) {
	                 $obj182$i = (($71) + 4|0);
	                 $107 = HEAP32[$obj182$i>>2]|0;
	                 $min$i178 = (($107) + 4|0);
	                 $108 = HEAP32[$min$i178>>2]|0;
	                 $cmp183$i = ($108|0)==(0);
	                 $$pre$pre$i = HEAP32[$107>>2]|0;
	                 do {
	                  if ($cmp183$i) {
	                   label = 141;
	                  } else {
	                   $nullable185$i = (($$pre$pre$i) + 8|0);
	                   $109 = HEAP32[$nullable185$i>>2]|0;
	                   $tobool186$i = ($109|0)==(0);
	                   if (!($tobool186$i)) {
	                    label = 141;
	                    break;
	                   }
	                   $nullable190$i = (($71) + 8|0);
	                   HEAP32[$nullable190$i>>2] = 0;
	                  }
	                 } while(0);
	                 if ((label|0) == 141) {
	                  label = 0;
	                  $nullable188$i = (($71) + 8|0);
	                  HEAP32[$nullable188$i>>2] = 1;
	                 }
	                 $firstpos193$i = (($$pre$pre$i) + 24|0);
	                 $110 = HEAP32[$firstpos193$i>>2]|0;
	                 $firstpos194$i = (($71) + 24|0);
	                 HEAP32[$firstpos194$i>>2] = $110;
	                 $111 = HEAP32[$107>>2]|0;
	                 $lastpos196$i = (($111) + 28|0);
	                 $112 = HEAP32[$lastpos196$i>>2]|0;
	                 $lastpos197$i = (($71) + 28|0);
	                 HEAP32[$lastpos197$i>>2] = $112;
	                } else if ((($70|0) == 2)) {
	                 $obj199$i = (($71) + 4|0);
	                 $113 = HEAP32[$obj199$i>>2]|0;
	                 $114 = HEAP32[$113>>2]|0;
	                 $nullable201$i = (($114) + 8|0);
	                 $115 = HEAP32[$nullable201$i>>2]|0;
	                 $tobool202$i = ($115|0)==(0);
	                 if ($tobool202$i) {
	                  $118 = 0;
	                 } else {
	                  $right203$i = (($113) + 4|0);
	                  $116 = HEAP32[$right203$i>>2]|0;
	                  $nullable204$i = (($116) + 8|0);
	                  $117 = HEAP32[$nullable204$i>>2]|0;
	                  $tobool205$i = ($117|0)!=(0);
	                  $118 = $tobool205$i;
	                 }
	                 $land$ext$i = $118&1;
	                 $nullable206$i = (($71) + 8|0);
	                 HEAP32[$nullable206$i>>2] = $land$ext$i;
	                 $119 = HEAP32[$nullable201$i>>2]|0;
	                 $tobool209$i = ($119|0)==(0);
	                 if ($tobool209$i) {
	                  $firstpos237$i = (($114) + 24|0);
	                  $128 = HEAP32[$firstpos237$i>>2]|0;
	                  $firstpos238$i = (($71) + 24|0);
	                  HEAP32[$firstpos238$i>>2] = $128;
	                  $right240$pre$i = (($113) + 4|0);
	                  $$pre$phi$iZ2D = $right240$pre$i;
	                 } else {
	                  $call212$i = (_tre_match_empty($call$i,$114,0,0,$num_tags$i)|0);
	                  $cmp213$i = ($call212$i|0)==(0);
	                  if (!($cmp213$i)) {
	                   $counts$0 = 0;$errcode$0 = $call212$i;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  $120 = HEAP32[$num_tags$i>>2]|0;
	                  $add$i180 = $120 << 2;
	                  $mul$i = (($add$i180) + 4)|0;
	                  $call216$i = (_malloc($mul$i)|0);
	                  $tobool217$i = ($call216$i|0)==(0|0);
	                  if ($tobool217$i) {
	                   $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  }
	                  HEAP32[$call216$i>>2] = -1;
	                  HEAP32[$assertions$i>>2] = 0;
	                  $121 = HEAP32[$113>>2]|0;
	                  $call221$i = (_tre_match_empty($call$i,$121,$call216$i,$assertions$i,0)|0);
	                  $cmp222$i = ($call221$i|0)==(0);
	                  if (!($cmp222$i)) {
	                   label = 150;
	                   break L128;
	                  }
	                  $right225$i = (($113) + 4|0);
	                  $122 = HEAP32[$right225$i>>2]|0;
	                  $firstpos226$i = (($122) + 24|0);
	                  $123 = HEAP32[$firstpos226$i>>2]|0;
	                  $124 = HEAP32[$113>>2]|0;
	                  $firstpos228$i = (($124) + 24|0);
	                  $125 = HEAP32[$firstpos228$i>>2]|0;
	                  $126 = HEAP32[$assertions$i>>2]|0;
	                  $call229$i = (_tre_set_union($call1,$123,$125,$call216$i,$126)|0);
	                  $firstpos230$i = (($71) + 24|0);
	                  HEAP32[$firstpos230$i>>2] = $call229$i;
	                  _free($call216$i);
	                  $127 = HEAP32[$firstpos230$i>>2]|0;
	                  $tobool232$i = ($127|0)==(0|0);
	                  if ($tobool232$i) {
	                   $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	                   break L12;
	                  } else {
	                   $$pre$phi$iZ2D = $right225$i;
	                  }
	                 }
	                 $129 = HEAP32[$$pre$phi$iZ2D>>2]|0;
	                 $nullable241$i = (($129) + 8|0);
	                 $130 = HEAP32[$nullable241$i>>2]|0;
	                 $tobool242$i = ($130|0)==(0);
	                 if ($tobool242$i) {
	                  $lastpos273$i = (($129) + 28|0);
	                  $139 = HEAP32[$lastpos273$i>>2]|0;
	                  $lastpos274$i = (($71) + 28|0);
	                  HEAP32[$lastpos274$i>>2] = $139;
	                  break;
	                 }
	                 $call245$i = (_tre_match_empty($call$i,$129,0,0,$num_tags$i)|0);
	                 $cmp246$i = ($call245$i|0)==(0);
	                 if (!($cmp246$i)) {
	                  $counts$0 = 0;$errcode$0 = $call245$i;$offs$0 = 0;$tnfa$0 = $call27;
	                  break L12;
	                 }
	                 $131 = HEAP32[$num_tags$i>>2]|0;
	                 $add249$i = $131 << 2;
	                 $mul250$i = (($add249$i) + 4)|0;
	                 $call251$i = (_malloc($mul250$i)|0);
	                 $tobool252$i = ($call251$i|0)==(0|0);
	                 if ($tobool252$i) {
	                  $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	                  break L12;
	                 }
	                 HEAP32[$call251$i>>2] = -1;
	                 HEAP32[$assertions$i>>2] = 0;
	                 $132 = HEAP32[$$pre$phi$iZ2D>>2]|0;
	                 $call257$i = (_tre_match_empty($call$i,$132,$call251$i,$assertions$i,0)|0);
	                 $cmp258$i = ($call257$i|0)==(0);
	                 if (!($cmp258$i)) {
	                  label = 157;
	                  break L128;
	                 }
	                 $133 = HEAP32[$113>>2]|0;
	                 $lastpos262$i = (($133) + 28|0);
	                 $134 = HEAP32[$lastpos262$i>>2]|0;
	                 $135 = HEAP32[$$pre$phi$iZ2D>>2]|0;
	                 $lastpos264$i = (($135) + 28|0);
	                 $136 = HEAP32[$lastpos264$i>>2]|0;
	                 $137 = HEAP32[$assertions$i>>2]|0;
	                 $call265$i = (_tre_set_union($call1,$134,$136,$call251$i,$137)|0);
	                 $lastpos266$i = (($71) + 28|0);
	                 HEAP32[$lastpos266$i>>2] = $call265$i;
	                 _free($call251$i);
	                 $138 = HEAP32[$lastpos266$i>>2]|0;
	                 $tobool268$i = ($138|0)==(0|0);
	                 if ($tobool268$i) {
	                  $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	                  break L12;
	                 }
	                }
	               } while(0);
	               $stack$idx$val$i165 = HEAP32[$stack$idx96$i>>2]|0;
	               $cmp8$i = ($stack$idx$val$i165|0)>($stack$idx146$val$i|0);
	               if ($cmp8$i) {
	                $68 = $stack$idx$val$i165;
	               } else {
	                break L126;
	               }
	              }
	              if ((label|0) == 104) {
	               $firstpos225$i = (($71) + 24|0);
	               HEAP32[$firstpos225$i>>2] = 0;
	               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	               break L12;
	              }
	              else if ((label|0) == 106) {
	               $lastpos227$i = (($71) + 28|0);
	               HEAP32[$lastpos227$i>>2] = 0;
	               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	               break L12;
	              }
	              else if ((label|0) == 110) {
	               $firstpos29229$i = (($71) + 24|0);
	               HEAP32[$firstpos29229$i>>2] = 0;
	               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	               break L12;
	              }
	              else if ((label|0) == 112) {
	               $lastpos35231$i = (($71) + 28|0);
	               HEAP32[$lastpos35231$i>>2] = 0;
	               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	               break L12;
	              }
	              else if ((label|0) == 115) {
	               $firstpos46233$i = (($71) + 24|0);
	               HEAP32[$firstpos46233$i>>2] = 0;
	               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	               break L12;
	              }
	              else if ((label|0) == 117) {
	               $lastpos55235$i = (($71) + 28|0);
	               HEAP32[$lastpos55235$i>>2] = 0;
	               $counts$0 = 0;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	               break L12;
	              }
	              else if ((label|0) == 150) {
	               _free($call216$i);
	               $counts$0 = 0;$errcode$0 = $call221$i;$offs$0 = 0;$tnfa$0 = $call27;
	               break L12;
	              }
	              else if ((label|0) == 157) {
	               _free($call251$i);
	               $counts$0 = 0;$errcode$0 = $call257$i;$offs$0 = 0;$tnfa$0 = $call27;
	               break L12;
	              }
	             }
	            } while(0);
	            $140 = HEAP32[$position>>2]|0;
	            $mul134 = $140 << 2;
	            $call135 = (_malloc($mul134)|0);
	            $cmp136 = ($call135|0)==(0|0);
	            if ($cmp136) {
	             $counts$0 = $call135;$errcode$0 = 12;$offs$0 = 0;$tnfa$0 = $call27;
	            } else {
	             $call145 = (_malloc($mul134)|0);
	             $cmp146 = ($call145|0)==(0|0);
	             if ($cmp146) {
	              $counts$0 = $call135;$errcode$0 = 12;$offs$0 = $call145;$tnfa$0 = $call27;
	             } else {
	              $cmp154212 = ($140|0)>(0);
	              if ($cmp154212) {
	               $141 = ($140|0)>(1);
	               $$op = $140 << 2;
	               $142 = $141 ? $$op : 4;
	               _memset(($call135|0),0,($142|0))|0;
	              }
	              (_tre_ast_to_tnfa($call$i$i143,0,$call135,0)|0);
	              $143 = HEAP32[$position>>2]|0;
	              $cmp160208 = ($143|0)>(0);
	              if ($cmp160208) {
	               $add$0210 = 0;$i$1209 = 0;
	               while(1) {
	                $arrayidx163 = (($call145) + ($i$1209<<2)|0);
	                HEAP32[$arrayidx163>>2] = $add$0210;
	                $arrayidx164 = (($call135) + ($i$1209<<2)|0);
	                $144 = HEAP32[$arrayidx164>>2]|0;
	                $add165 = (($add$0210) + 1)|0;
	                $add166 = (($add165) + ($144))|0;
	                HEAP32[$arrayidx164>>2] = 0;
	                $inc169 = (($i$1209) + 1)|0;
	                $cmp160 = ($inc169|0)<($143|0);
	                if ($cmp160) {
	                 $add$0210 = $add166;$i$1209 = $inc169;
	                } else {
	                 $add$0$lcssa = $add166;
	                 break;
	                }
	               }
	              } else {
	               $add$0$lcssa = 0;
	              }
	              $add171 = (($add$0$lcssa) + 1)|0;
	              $call172 = (_calloc($add171,32)|0);
	              $cmp173 = ($call172|0)==(0|0);
	              if ($cmp173) {
	               $counts$0 = $call135;$errcode$0 = 12;$offs$0 = $call145;$tnfa$0 = $call27;
	               break;
	              }
	              HEAP32[$call27>>2] = $call172;
	              $num_transitions = (($call27) + 4|0);
	              HEAP32[$num_transitions>>2] = $add$0$lcssa;
	              $call181 = (_tre_ast_to_tnfa($call$i$i143,$call172,$call135,$call145)|0);
	              $cmp182 = ($call181|0)==(0);
	              if (!($cmp182)) {
	               $counts$0 = $call135;$errcode$0 = $call181;$offs$0 = $call145;$tnfa$0 = $call27;
	               break;
	              }
	              $firstpos_chars = (($call27) + 20|0);
	              HEAP32[$firstpos_chars>>2] = 0;
	              $firstpos = (($call$i$i143) + 24|0);
	              $145 = HEAP32[$firstpos>>2]|0;
	              $146 = HEAP32[$145>>2]|0;
	              $cmp190204 = ($146|0)>(-1);
	              if ($cmp190204) {
	               $i$2205 = 1;$p$0206 = $145;
	               while(1) {
	                $incdec$ptr = (($p$0206) + 32|0);
	                $phitmp = (($i$2205) + 1)|0;
	                $147 = HEAP32[$incdec$ptr>>2]|0;
	                $cmp190 = ($147|0)>(-1);
	                if ($cmp190) {
	                 $i$2205 = $phitmp;$p$0206 = $incdec$ptr;
	                } else {
	                 $i$2$lcssa = $phitmp;
	                 break;
	                }
	               }
	              } else {
	               $i$2$lcssa = 1;
	              }
	              $call194 = (_calloc($i$2$lcssa,32)|0);
	              $cmp195 = ($call194|0)==(0|0);
	              if ($cmp195) {
	               $counts$0 = $call135;$errcode$0 = 12;$offs$0 = $call145;$tnfa$0 = $call27;
	               break;
	              }
	              $initial202 = (($call27) + 8|0);
	              HEAP32[$initial202>>2] = $call194;
	              $148 = HEAP32[$firstpos>>2]|0;
	              $149 = HEAP32[$148>>2]|0;
	              $cmp206199 = ($149|0)>(-1);
	              if ($cmp206199) {
	               $150 = $149;$i$3200 = 0;$position205202 = $148;
	               while(1) {
	                $arrayidx210 = (($call145) + ($150<<2)|0);
	                $151 = HEAP32[$arrayidx210>>2]|0;
	                $add$ptr = (($call172) + ($151<<5)|0);
	                $state = ((($call194) + ($i$3200<<5)|0) + 8|0);
	                HEAP32[$state>>2] = $add$ptr;
	                $state_id = ((($call194) + ($i$3200<<5)|0) + 12|0);
	                HEAP32[$state_id>>2] = $150;
	                $tags = ((($call194) + ($i$3200<<5)|0) + 16|0);
	                HEAP32[$tags>>2] = 0;
	                $tags215 = (($position205202) + 12|0);
	                $152 = HEAP32[$tags215>>2]|0;
	                $tobool216 = ($152|0)==(0|0);
	                if (!($tobool216)) {
	                 $j$0 = 0;
	                 while(1) {
	                  $arrayidx220 = (($152) + ($j$0<<2)|0);
	                  $153 = HEAP32[$arrayidx220>>2]|0;
	                  $cmp221 = ($153|0)>(-1);
	                  $inc225 = (($j$0) + 1)|0;
	                  if ($cmp221) {
	                   $j$0 = $inc225;
	                  } else {
	                   break;
	                  }
	                 }
	                 $mul228 = $inc225 << 2;
	                 $call229 = (_malloc($mul228)|0);
	                 HEAP32[$tags>>2] = $call229;
	                 $tobool234 = ($call229|0)==(0|0);
	                 if ($tobool234) {
	                  $counts$0 = $call135;$errcode$0 = 12;$offs$0 = $call145;$tnfa$0 = $call27;
	                  break L12;
	                 }
	                 $154 = HEAP32[$tags215>>2]|0;
	                 _memcpy(($call229|0),($154|0),($mul228|0))|0;
	                }
	                $155 = (($position205202) + 16|0);
	                $156 = HEAP32[$155>>2]|0;
	                $assertions247 = ((($call194) + ($i$3200<<5)|0) + 20|0);
	                HEAP32[$assertions247>>2] = $156;
	                $inc248 = (($i$3200) + 1)|0;
	                $incdec$ptr250 = (($position205202) + 32|0);
	                $157 = HEAP32[$incdec$ptr250>>2]|0;
	                $cmp206 = ($157|0)>(-1);
	                if ($cmp206) {
	                 $150 = $157;$i$3200 = $inc248;$position205202 = $incdec$ptr250;
	                } else {
	                 $i$3$lcssa = $inc248;
	                 break;
	                }
	               }
	              } else {
	               $i$3$lcssa = 0;
	              }
	              $state253 = ((($call194) + ($i$3$lcssa<<5)|0) + 8|0);
	              HEAP32[$state253>>2] = 0;
	              HEAP32[$num_transitions>>2] = $add$0$lcssa;
	              $lastpos = (($call$i$i143) + 28|0);
	              $158 = HEAP32[$lastpos>>2]|0;
	              $159 = HEAP32[$158>>2]|0;
	              $arrayidx257 = (($call145) + ($159<<2)|0);
	              $160 = HEAP32[$arrayidx257>>2]|0;
	              $add$ptr258 = (($call172) + ($160<<5)|0);
	              $final = (($call27) + 12|0);
	              HEAP32[$final>>2] = $add$ptr258;
	              $161 = HEAP32[$position>>2]|0;
	              $num_states = (($call27) + 52|0);
	              HEAP32[$num_states>>2] = $161;
	              $cflags260 = (($call27) + 56|0);
	              HEAP32[$cflags260>>2] = $cflags;
	              ___tre_mem_destroy($call1);
	              $stack$i182 = (($call$i) + 16|0);
	              $162 = HEAP32[$stack$i182>>2]|0;
	              _free($162);
	              _free($call$i);
	              _free($call135);
	              _free($call145);
	              $__opaque = (($preg) + 4|0);
	              HEAP32[$__opaque>>2] = $call27;
	              $retval$0 = 0;
	              STACKTOP = sp;return ($retval$0|0);
	             }
	            }
	           } else {
	            $counts$0 = 0;$errcode$0 = $call$i147$i;$offs$0 = 0;$tnfa$0 = $call27;
	           }
	          } else {
	           $counts$0 = 0;$errcode$0 = $call$i$i155;$offs$0 = 0;$tnfa$0 = $call27;
	          }
	         }
	        }
	       }
	      }
	     } else {
	      $counts$0 = 0;$errcode$0 = $retval$0$i138;$offs$0 = 0;$tnfa$0 = $call27;
	     }
	    }
	   }
	  } else {
	   $counts$0 = 0;$errcode$0 = $call8;$offs$0 = 0;$tnfa$0 = 0;
	  }
	 } while(0);
	 ___tre_mem_destroy($call1);
	 $stack$i183 = (($call$i) + 16|0);
	 $163 = HEAP32[$stack$i183>>2]|0;
	 _free($163);
	 _free($call$i);
	 $cmp265 = ($counts$0|0)==(0|0);
	 if (!($cmp265)) {
	  _free($counts$0);
	 }
	 $cmp269 = ($offs$0|0)==(0|0);
	 if (!($cmp269)) {
	  _free($offs$0);
	 }
	 $__opaque273 = (($preg) + 4|0);
	 HEAP32[$__opaque273>>2] = $tnfa$0;
	 _regfree($preg);
	 $retval$0 = $errcode$0;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _tre_parse($ctx) {
	 $ctx = $ctx|0;
	 var $$ = 0, $$cmp68$i$i = 0, $$idx$val = 0, $$idx$val734 = 0, $$idx219 = 0, $$idx219$val = 0, $$in = 0, $$mux = 0, $$off$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre215$i = 0, $$pre216$i = 0, $$status$0$i = 0, $$status$0$us$i = 0, $$status$1$i$i = 0, $$status$3$i = 0, $$sub = 0, $0 = 0;
	 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
	 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
	 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
	 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
	 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
	 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
	 var $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
	 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
	 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
	 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
	 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$i = 0, $add$i$i = 0, $add$i$i332 = 0, $add$i$us$i = 0, $add$i259 = 0, $add$i285 = 0, $add$i32$i = 0, $add$i511 = 0, $add$i620 = 0, $add$i87$i = 0, $add$ptr = 0, $add$ptr$i = 0;
	 var $add$ptr$i$i = 0, $add$ptr$sum$i$i = 0, $add$ptr17$i$i = 0, $add$ptr200 = 0, $add$ptr22$sum$i$i = 0, $add$ptr271 = 0, $add$ptr28$i$i = 0, $add$ptr284 = 0, $add$ptr291 = 0, $add$ptr291$val = 0, $add$ptr303 = 0, $add$ptr38$i$i = 0, $add$ptr44$i = 0, $add$ptr544 = 0, $add$ptr626 = 0, $add$ptr63$i$i = 0, $add$ptr87$i$i = 0, $add$ptr92 = 0, $add$ptr95$i$i = 0, $add$us$i = 0;
	 var $add100$i = 0, $add160$i$i = 0, $add184$i$i = 0, $add32$us$i = 0, $add32$us217$i = 0, $add42$i = 0, $add495 = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and163 = 0, $and196 = 0, $and209 = 0, $and231 = 0, $and267 = 0, $and472 = 0, $and510 = 0, $and52 = 0, $and540 = 0, $and563 = 0;
	 var $and581 = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i$i = 0, $arrayidx$i100$i$i = 0, $arrayidx$i132$i$i = 0, $arrayidx$i195$i$i = 0, $arrayidx$i323 = 0, $arrayidx$i346 = 0, $arrayidx$i643 = 0, $arrayidx$us$i = 0, $arrayidx120$i = 0, $arrayidx122$i$i = 0, $arrayidx365 = 0, $arrayidx410 = 0, $arrayidx417 = 0, $arrayidx59$i = 0, $arrayidx59$us$i = 0, $bf$clear$i = 0, $bf$clear$i$i = 0;
	 var $bf$load$i = 0, $bf$load$i$i = 0, $brmerge = 0, $brmerge$i = 0, $brmerge$i$i = 0, $brmerge$not$i$i = 0, $c$i = 0, $call$i$i = 0, $call$i$i$i = 0, $call$i$i$i$i = 0, $call$i$i$i321 = 0, $call$i$i107$i$i = 0, $call$i$i139$i$i = 0, $call$i$i235 = 0, $call$i$i246 = 0, $call$i$i272 = 0, $call$i$i289 = 0, $call$i$i317 = 0, $call$i$i348 = 0, $call$i$i363 = 0;
	 var $call$i$i378 = 0, $call$i$i393 = 0, $call$i$i408 = 0, $call$i$i42$i = 0, $call$i$i423 = 0, $call$i$i438 = 0, $call$i$i453 = 0, $call$i$i483 = 0, $call$i$i498 = 0, $call$i$i516 = 0, $call$i$i532 = 0, $call$i$i547 = 0, $call$i$i562 = 0, $call$i$i577 = 0, $call$i$i592 = 0, $call$i$i60$i = 0, $call$i$i60$us$i = 0, $call$i$i607 = 0, $call$i$i625 = 0, $call$i$i63$i = 0;
	 var $call$i$i74$i = 0, $call$i127$i$i = 0, $call$i221 = 0, $call$i222 = 0, $call$i223 = 0, $call$i224 = 0, $call$i225 = 0, $call$i226 = 0, $call$i227 = 0, $call$i228 = 0, $call$i229 = 0, $call$i230 = 0, $call$i231 = 0, $call$i264 = 0, $call$i265 = 0, $call$i266 = 0, $call$i267 = 0, $call$i302 = 0, $call$i305 = 0, $call$i307 = 0;
	 var $call$i308 = 0, $call$i309 = 0, $call$i310 = 0, $call$i531 = 0, $call$i95$i$i = 0, $call1$i$i = 0, $call1$i$i$i = 0, $call1$i$i$i$i = 0, $call1$i$i$i325 = 0, $call1$i$i$us$i = 0, $call1$i$i109$i$i = 0, $call1$i$i141$i$i = 0, $call1$i$i237 = 0, $call1$i$i248 = 0, $call1$i$i274 = 0, $call1$i$i291 = 0, $call1$i$i350 = 0, $call1$i$i365 = 0, $call1$i$i380 = 0, $call1$i$i395 = 0;
	 var $call1$i$i410 = 0, $call1$i$i425 = 0, $call1$i$i44$i = 0, $call1$i$i440 = 0, $call1$i$i455 = 0, $call1$i$i470 = 0, $call1$i$i485 = 0, $call1$i$i500 = 0, $call1$i$i518 = 0, $call1$i$i534 = 0, $call1$i$i549 = 0, $call1$i$i564 = 0, $call1$i$i579 = 0, $call1$i$i594 = 0, $call1$i$i609 = 0, $call1$i$i627 = 0, $call1$i$i65$i = 0, $call1$i$i76$i = 0, $call102$i = 0, $call150$i$i = 0;
	 var $call154$i$i = 0, $call156$i$i = 0, $call156204$i$i = 0, $call159$i$i = 0, $call169$i$i = 0, $call174$i$i = 0, $call178$i$i = 0, $call180$i$i = 0, $call180209$i$i = 0, $call183$i$i = 0, $call193$i$i = 0, $call23$i$i = 0, $call297 = 0, $call348 = 0, $call360 = 0, $call369 = 0, $call405 = 0, $call419 = 0, $call430 = 0, $call44$i = 0;
	 var $call44$us$i = 0, $call575 = 0, $call584 = 0, $call587 = 0, $call595 = 0, $call596 = 0, $call603 = 0, $call604 = 0, $call83$i$i = 0, $ccurr$0$lcssa$i$i = 0, $ccurr$0206$i$i = 0, $ccurr$1$lcssa$i$i = 0, $ccurr$1212$i$i = 0, $cflags = 0, $class$1$i$i = 0, $class134$i$i = 0, $clen$0 = 0, $clen$0$i$i = 0, $clen$1$i$i = 0, $cmp = 0;
	 var $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $cmp$i122$i$i = 0, $cmp$i340 = 0, $cmp$i37$i = 0, $cmp$i90$i$i = 0, $cmp1$i = 0, $cmp1$i$i$i = 0, $cmp1$i123$i$i = 0, $cmp1$i91$i$i = 0, $cmp10$i101$i$i = 0, $cmp101 = 0, $cmp101$i$i = 0, $cmp105$i = 0, $cmp106 = 0, $cmp11 = 0, $cmp11$i = 0, $cmp11$lcssa = 0, $cmp11$not = 0;
	 var $cmp110$i$i = 0, $cmp11736 = 0, $cmp11783 = 0, $cmp118$i$i = 0, $cmp124$i = 0, $cmp126 = 0, $cmp13$i = 0, $cmp13$i$i = 0, $cmp13$us$i = 0, $cmp130$i = 0, $cmp131 = 0, $cmp13142$i = 0, $cmp136 = 0, $cmp14$i = 0, $cmp141 = 0, $cmp141$i$i = 0, $cmp147$i$i = 0, $cmp15$i = 0, $cmp15$us$i = 0, $cmp16$i = 0;
	 var $cmp161$i$i = 0, $cmp164$i$i = 0, $cmp171 = 0, $cmp177 = 0, $cmp185$i$i = 0, $cmp188$i$i = 0, $cmp19 = 0, $cmp19$i$i = 0, $cmp19$us$i = 0, $cmp2$i$i = 0, $cmp2$i29$i = 0, $cmp202 = 0, $cmp22$us$i = 0, $cmp23$i = 0, $cmp239 = 0, $cmp24$i$i = 0, $cmp244 = 0, $cmp249 = 0, $cmp25$us$i = 0, $cmp261 = 0;
	 var $cmp273 = 0, $cmp286 = 0, $cmp29 = 0, $cmp29$i$i = 0, $cmp298 = 0, $cmp30$i = 0, $cmp341 = 0, $cmp35$i = 0, $cmp35$us$i = 0, $cmp36$i = 0, $cmp38 = 0, $cmp39$i = 0, $cmp4$i$i$i = 0, $cmp4$i128$i$i = 0, $cmp4$i96$i$i = 0, $cmp40$i = 0, $cmp446 = 0, $cmp466 = 0, $cmp47$i = 0, $cmp47$us$i = 0;
	 var $cmp5$i$i = 0, $cmp515 = 0, $cmp523 = 0, $cmp54 = 0, $cmp576 = 0, $cmp6$i = 0, $cmp62 = 0, $cmp63$i = 0, $cmp63$us$i = 0, $cmp633 = 0, $cmp65 = 0, $cmp662 = 0, $cmp68$i$i = 0, $cmp71 = 0, $cmp71$i = 0, $cmp71$us$i = 0, $cmp735 = 0, $cmp74$i$i = 0, $cmp76 = 0, $cmp80$not$i = 0;
	 var $cmp9$i$i = 0, $cmp9$i$i318 = 0, $cmp9$i25$i = 0, $cmp96 = 0, $cmp96$i = 0, $cmp97$i$i = 0, $code_max$us$i = 0, $code_max2$i = 0, $code_max2$i$i = 0, $code_max2$i$i$i = 0, $code_max2$i$i336 = 0, $code_max2$i117$i$i = 0, $code_max2$i149$i$i = 0, $code_max2$i358 = 0, $code_max2$i373 = 0, $code_max2$i388 = 0, $code_max2$i403 = 0, $code_max2$i418 = 0, $code_max2$i433 = 0, $code_max2$i448 = 0;
	 var $code_max2$i463 = 0, $code_max2$i478 = 0, $code_max2$i493 = 0, $code_max2$i526 = 0, $code_max2$i542 = 0, $code_max2$i557 = 0, $code_max2$i572 = 0, $code_max2$i587 = 0, $code_max2$i602 = 0, $code_max2$i635 = 0, $conv$i$i = 0, $conv$i35$i = 0, $conv12$i$i = 0, $conv12$i26$i = 0, $conv123 = 0, $conv160 = 0, $conv228 = 0, $conv314 = 0, $conv347 = 0, $conv359 = 0;
	 var $conv388 = 0, $conv436 = 0, $conv455 = 0, $conv7$i$i = 0, $conv7$i23$i = 0, $curr_max$0$add$us$i = 0, $curr_max$0145$us$i = 0, $curr_max$1127$us$i = 0, $curr_min$0$lcssa$i = 0, $curr_min$0146$us$i = 0, $curr_min$1128$us$i = 0, $dec = 0, $dec$i = 0, $dec$i233 = 0, $dec$i269 = 0, $dec$i344 = 0, $dec$i641 = 0, $depth$0$be = 0, $depth$0$be$ph = 0, $depth$0$lcssa = 0;
	 var $depth$0740 = 0, $endptr$0$i$i = 0, $expansion$i = 0, $expansion$lcssa$i = 0, $expansion2$i = 0, $i$0$lcssa = 0, $i$01$i = 0, $i$0690 = 0, $inc = 0, $inc$i = 0, $inc$i$i = 0, $inc$i$i$i = 0, $inc$i103$i$i = 0, $inc$i107$i = 0, $inc$i108$i = 0, $inc$i135181$i$ph$i = 0, $inc$i135182$i$i = 0, $inc$i135184$i$i = 0, $inc142$i = 0, $inc177$i$i = 0;
	 var $inc192$i$i = 0, $inc234 = 0, $inc254 = 0, $inc374 = 0, $inc411 = 0, $inc424 = 0, $inc445 = 0, $inc461 = 0, $inc504 = 0, $inc624 = 0, $inc655 = 0, $inc78$i = 0, $inc78$us$i = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i315 = 0, $incdec$ptr$i313 = 0, $incdec$ptr$i34$i = 0, $incdec$ptr148 = 0;
	 var $incdec$ptr182 = 0, $incdec$ptr214 = 0, $incdec$ptr236 = 0, $incdec$ptr259 = 0, $incdec$ptr319 = 0, $incdec$ptr324 = 0, $incdec$ptr329 = 0, $incdec$ptr334 = 0, $incdec$ptr337 = 0, $incdec$ptr34$i = 0, $incdec$ptr355 = 0, $incdec$ptr367 = 0, $incdec$ptr385 = 0, $incdec$ptr413 = 0, $incdec$ptr416 = 0, $incdec$ptr451 = 0, $incdec$ptr463 = 0, $incdec$ptr507 = 0, $incdec$ptr535 = 0, $incdec$ptr554 = 0;
	 var $incdec$ptr71$i$i = 0, $items$0$load106110$i = 0, $items$0$load106111$i = 0, $items$0$load106112$i = 0, $items$0$load106113$i = 0, $items$0$load106114$ph$i = 0, $items$0$load106115$i = 0, $items$0$load106116$i = 0, $items$0$load106117$ph$i = 0, $items$0$load106117119$i = 0, $j$0144$i = 0, $j$0144$us$i = 0, $max$0$i = 0, $max$0$i$i = 0, $max$063$i = 0, $max$1$i = 0, $max3$i = 0, $max3$i$i = 0, $max_backref = 0, $min$0$i = 0;
	 var $min$0$i$i = 0, $min$1$i = 0, $min$1$i$i = 0, $min$1$i$ph$i = 0, $min$2$i$i = 0, $min$2$lcssa$i$i = 0, $min$2203$i$i = 0, $min$2207$i$i = 0, $min$3$lcssa$i$i = 0, $min$3211$i$i = 0, $min$4$i$i = 0, $min2$i = 0, $min2$i$i = 0, $mul$i$i$i = 0, $mul$i125$i$i = 0, $mul$i125164$i$i = 0, $mul$i125166$i$i = 0, $mul$i125168$i$i = 0, $mul$i125170$i$ph$i = 0, $mul$i125171$i$i = 0;
	 var $mul$i125173$i$i = 0, $mul$i125174$i$i = 0, $mul$i93$i$i = 0, $mul101$i = 0, $mul3$i$i$i = 0, $mul3$i126$i$i = 0, $mul3$i94$i$i = 0, $mul43$i = 0, $neg_classes$i = 0, $neg_classes103$i = 0, $neg_classes122$i = 0, $neg_classes45$i = 0, $neg_classes45$us$i = 0, $neg_classes61$i = 0, $neg_classes61$us$i = 0, $negate$0$i = 0, $node$0$lcssa$i = 0, $node$0147$i = 0, $node$0147$us$i = 0, $node$1$i = 0;
	 var $node$1$us$i = 0, $node$2$i = 0, $node$2$i657 = 0, $node$2$i661$be = 0, $node$2$i661$lcssa = 0, $node$2$i661738 = 0, $node$2$i662 = 0, $node$2$i663 = 0, $node$2$i664$in = 0, $nofirstsub = 0, $nofirstsub296 = 0, $not$tobool66$i$i = 0, $notrhs = 0, $nullable$i$i = 0, $nullable$i$i$i = 0, $nullable$i$i$i$i = 0, $nullable$i$i$i329 = 0, $nullable$i$i$us$i = 0, $nullable$i$i114$i$i = 0, $nullable$i$i146$i$i = 0;
	 var $nullable$i$i242 = 0, $nullable$i$i253 = 0, $nullable$i$i279 = 0, $nullable$i$i296 = 0, $nullable$i$i355 = 0, $nullable$i$i370 = 0, $nullable$i$i385 = 0, $nullable$i$i400 = 0, $nullable$i$i415 = 0, $nullable$i$i430 = 0, $nullable$i$i445 = 0, $nullable$i$i460 = 0, $nullable$i$i475 = 0, $nullable$i$i49$i = 0, $nullable$i$i490 = 0, $nullable$i$i505 = 0, $nullable$i$i523 = 0, $nullable$i$i539 = 0, $nullable$i$i554 = 0, $nullable$i$i569 = 0;
	 var $nullable$i$i584 = 0, $nullable$i$i599 = 0, $nullable$i$i614 = 0, $nullable$i$i632 = 0, $nullable$i$i70$i = 0, $nullable$i$i81$i = 0, $num$0$op$i$i = 0, $num$0$op$i30$i = 0, $num$0$op$op$i$i = 0, $num$0$op$op$i31$i = 0, $num$010$i$i = 0, $num$010$i28$i = 0, $num_submatches$i = 0, $num_submatches$i$i = 0, $num_submatches$i$i331 = 0, $num_submatches$i$us$i = 0, $num_submatches$i257 = 0, $num_submatches$i283 = 0, $num_submatches$i298 = 0, $num_submatches$i509 = 0;
	 var $num_submatches$i618 = 0, $num_submatches$i85$i = 0, $num_submatches4$i = 0, $num_submatches4$i$i = 0, $num_submatches4$i$us$i = 0, $num_submatches4$i258 = 0, $num_submatches4$i284 = 0, $num_submatches4$i510 = 0, $num_submatches4$i619 = 0, $num_submatches4$i86$i = 0, $num_submatches5$i = 0, $num_submatches5$i$i = 0, $num_submatches5$i$i333 = 0, $num_submatches5$i$us$i = 0, $num_submatches5$i260 = 0, $num_submatches5$i286 = 0, $num_submatches5$i299 = 0, $num_submatches5$i512 = 0, $num_submatches5$i621 = 0, $num_submatches5$i88$i = 0;
	 var $num_submatches654 = 0, $obj$i = 0, $obj$i$i = 0, $obj$i$i$i = 0, $obj$i$i$i$i = 0, $obj$i$i$i326 = 0, $obj$i$i$us$i = 0, $obj$i$i110$i$i = 0, $obj$i$i142$i$i = 0, $obj$i$i238 = 0, $obj$i$i249 = 0, $obj$i$i275 = 0, $obj$i$i292 = 0, $obj$i$i351 = 0, $obj$i$i366 = 0, $obj$i$i381 = 0, $obj$i$i396 = 0, $obj$i$i411 = 0, $obj$i$i426 = 0, $obj$i$i441 = 0;
	 var $obj$i$i45$i = 0, $obj$i$i456 = 0, $obj$i$i471 = 0, $obj$i$i486 = 0, $obj$i$i501 = 0, $obj$i$i519 = 0, $obj$i$i535 = 0, $obj$i$i550 = 0, $obj$i$i565 = 0, $obj$i$i580 = 0, $obj$i$i595 = 0, $obj$i$i610 = 0, $obj$i$i628 = 0, $obj$i$i66$i = 0, $obj$i$i77$i = 0, $obj$us$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i334 = 0;
	 var $or$cond$us$i = 0, $or$cond212 = 0, $or$cond213 = 0, $or$cond214 = 0, $or$cond215 = 0, $or$cond737 = 0, $or$cond85$i$i = 0, $or$cond86$i$i = 0, $or$cond87$i$i = 0, $position = 0, $position3$i = 0, $position3$i$i = 0, $position3$i$i$i = 0, $position3$i$i337 = 0, $position3$i118$i$i = 0, $position3$i150$i$i = 0, $position3$i359 = 0, $position3$i374 = 0, $position3$i389 = 0, $position3$i404 = 0;
	 var $position3$i419 = 0, $position3$i434 = 0, $position3$i449 = 0, $position3$i464 = 0, $position3$i479 = 0, $position3$i494 = 0, $position3$i527 = 0, $position3$i543 = 0, $position3$i558 = 0, $position3$i573 = 0, $position3$i588 = 0, $position3$i603 = 0, $position3$i636 = 0, $position38$i = 0, $position38$us$i = 0, $position617 = 0, $r$0$lcssa$i3957$i = 0, $r$0$lcssa$i395760$i = 0, $r$0$lcssa$i3958$i = 0, $r$011$i$i = 0;
	 var $r$011$i27$i = 0, $re = 0, $re$1$i$i = 0, $re$3$i$i = 0, $re$4$i$ph$i = 0, $re295 = 0, $re_start = 0, $rep_max$0 = 0, $result305 = 0, $result669 = 0, $retval$0$i$i = 0, $retval$0$i$us$i = 0, $retval$0$i120$i$i = 0, $retval$0$i120$sink$i$i = 0, $retval$0$i152$i$i = 0, $retval$0$i361 = 0, $retval$0$i376 = 0, $retval$0$i391 = 0, $retval$0$i406 = 0, $retval$0$i421 = 0;
	 var $retval$0$i436 = 0, $retval$0$i466 = 0, $retval$0$i90$i = 0, $retval$2 = 0, $right3$i = 0, $right3$i$i = 0, $right3$i$us$i = 0, $right3$i256 = 0, $right3$i282 = 0, $right3$i508 = 0, $right3$i617 = 0, $right3$i84$i = 0, $stack$i = 0, $stack1 = 0, $status$0$be = 0, $status$0$be$ph = 0, $status$0$lcssa = 0, $status$0$lcssa$i = 0, $status$1 = 0, $status$1$$i$i = 0;
	 var $status$10$i$ph$i = 0, $status$2$i = 0, $status$2$i$i = 0, $status$2$us$i = 0, $status$4$i$i = 0, $status$5$i = 0, $status$5$i$i = 0, $status$6$i$i = 0, $storemerge = 0, $storemerge$i = 0, $storemerge211$lcssa = 0, $storemerge76$in$i = 0, $sub = 0, $sub$$i$i = 0, $sub$i$i = 0, $sub$i$i320 = 0, $sub$i36$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0;
	 var $sub$us$i = 0, $sub5$i$i = 0, $sub5$i33$i = 0, $sub8$i$i = 0, $sub8$i24$i = 0, $subctx = 0, $submatch_id = 0, $submatch_id$i$i = 0, $submatch_id$i$i$i = 0, $submatch_id$i$i$i$i = 0, $submatch_id$i$i$i330 = 0, $submatch_id$i$i$us$i = 0, $submatch_id$i$i115$i$i = 0, $submatch_id$i$i147$i$i = 0, $submatch_id$i$i243 = 0, $submatch_id$i$i254 = 0, $submatch_id$i$i280 = 0, $submatch_id$i$i297 = 0, $submatch_id$i$i356 = 0, $submatch_id$i$i371 = 0;
	 var $submatch_id$i$i386 = 0, $submatch_id$i$i401 = 0, $submatch_id$i$i416 = 0, $submatch_id$i$i431 = 0, $submatch_id$i$i446 = 0, $submatch_id$i$i461 = 0, $submatch_id$i$i476 = 0, $submatch_id$i$i491 = 0, $submatch_id$i$i50$i = 0, $submatch_id$i$i506 = 0, $submatch_id$i$i524 = 0, $submatch_id$i$i540 = 0, $submatch_id$i$i555 = 0, $submatch_id$i$i570 = 0, $submatch_id$i$i585 = 0, $submatch_id$i$i600 = 0, $submatch_id$i$i615 = 0, $submatch_id$i$i633 = 0, $submatch_id$i$i71$i = 0, $submatch_id$i$i82$i = 0;
	 var $submatch_id237 = 0, $submatch_id632 = 0, $submatch_id653 = 0, $tmp = 0, $tmp380 = 0, $tmp_str$i$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i324 = 0, $tobool$i$i$us$i = 0, $tobool$i$i108$i$i = 0, $tobool$i$i140$i$i = 0, $tobool$i$i236 = 0, $tobool$i$i247 = 0, $tobool$i$i273 = 0, $tobool$i$i290 = 0, $tobool$i$i349 = 0;
	 var $tobool$i$i364 = 0, $tobool$i$i379 = 0, $tobool$i$i394 = 0, $tobool$i$i409 = 0, $tobool$i$i424 = 0, $tobool$i$i43$i = 0, $tobool$i$i439 = 0, $tobool$i$i454 = 0, $tobool$i$i484 = 0, $tobool$i$i499 = 0, $tobool$i$i517 = 0, $tobool$i$i533 = 0, $tobool$i$i548 = 0, $tobool$i$i563 = 0, $tobool$i$i578 = 0, $tobool$i$i593 = 0, $tobool$i$i608 = 0, $tobool$i$i626 = 0, $tobool$i$i64$i = 0, $tobool$i$i75$i = 0;
	 var $tobool$i316 = 0, $tobool$i339 = 0, $tobool$not$i = 0, $tobool1$i = 0, $tobool114$i$i = 0, $tobool114$not$i$i = 0, $tobool116$i$i = 0, $tobool137$i$i = 0, $tobool151$i$i = 0, $tobool157$i$i = 0, $tobool157205$i$i = 0, $tobool16 = 0, $tobool164 = 0, $tobool175$i$i = 0, $tobool181$i$i = 0, $tobool181210$i$i = 0, $tobool197 = 0, $tobool210 = 0, $tobool232 = 0, $tobool268 = 0;
	 var $tobool27$i = 0, $tobool293 = 0, $tobool3$i$i = 0, $tobool3$i$i$i = 0, $tobool3$i$i$i$i = 0, $tobool3$i$i$i327 = 0, $tobool3$i$i$us$i = 0, $tobool3$i$i111$i$i = 0, $tobool3$i$i143$i$i = 0, $tobool3$i$i239 = 0, $tobool3$i$i250 = 0, $tobool3$i$i276 = 0, $tobool3$i$i293 = 0, $tobool3$i$i352 = 0, $tobool3$i$i367 = 0, $tobool3$i$i382 = 0, $tobool3$i$i397 = 0, $tobool3$i$i412 = 0, $tobool3$i$i427 = 0, $tobool3$i$i442 = 0;
	 var $tobool3$i$i457 = 0, $tobool3$i$i46$i = 0, $tobool3$i$i472 = 0, $tobool3$i$i487 = 0, $tobool3$i$i502 = 0, $tobool3$i$i520 = 0, $tobool3$i$i536 = 0, $tobool3$i$i551 = 0, $tobool3$i$i566 = 0, $tobool3$i$i581 = 0, $tobool3$i$i596 = 0, $tobool3$i$i611 = 0, $tobool3$i$i629 = 0, $tobool3$i$i67$i = 0, $tobool3$i$i78$i = 0, $tobool349 = 0, $tobool361 = 0, $tobool406 = 0, $tobool431 = 0, $tobool47 = 0;
	 var $tobool473 = 0, $tobool511 = 0, $tobool53 = 0, $tobool541 = 0, $tobool545 = 0, $tobool558 = 0, $tobool564 = 0, $tobool582 = 0, $tobool585 = 0, $tobool588 = 0, $tobool66$i$i = 0, $tobool69 = 0, $tobool81 = 0, $tobool84$i$i = 0, $value$c$i = 0, $value$c$i306 = 0, $voidptr_value$i = 0, $voidptr_value$i271 = 0, $wc = 0, $wc$i$i = 0;
	 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $wc$i$i = sp + 300|0;
	 $tmp_str$i$i = sp + 352|0;
	 $neg_classes$i = sp;
	 $wc = sp + 304|0;
	 $subctx = sp + 256|0;
	 $tmp = sp + 344|0;
	 $tmp380 = sp + 312|0;
	 $stack1 = (($ctx) + 4|0);
	 $0 = HEAP32[$stack1>>2]|0;
	 $$idx219 = (($0) + 12|0);
	 $$idx219$val = HEAP32[$$idx219>>2]|0;
	 $nofirstsub = (($ctx) + 40|0);
	 $1 = HEAP32[$nofirstsub>>2]|0;
	 $tobool = ($1|0)==(0);
	 if ($tobool) {
	  $submatch_id = (($ctx) + 20|0);
	  $2 = HEAP32[$submatch_id>>2]|0;
	  $value$c$i = $2;
	  (_tre_stack_push($0,$value$c$i)|0);
	  (_tre_stack_push($0,(2))|0);
	  $3 = HEAP32[$submatch_id>>2]|0;
	  $inc = (($3) + 1)|0;
	  HEAP32[$submatch_id>>2] = $inc;
	 }
	 $call$i221 = (_tre_stack_push($0,0)|0);
	 $re = (($ctx) + 12|0);
	 $4 = HEAP32[$re>>2]|0;
	 $re_start = (($ctx) + 16|0);
	 HEAP32[$re_start>>2] = $4;
	 $$idx$val734 = HEAP32[$$idx219>>2]|0;
	 $cmp735 = ($$idx$val734|0)>($$idx219$val|0);
	 $cmp11736 = ($call$i221|0)==(0);
	 $or$cond737 = $cmp735 & $cmp11736;
	 L4: do {
	  if ($or$cond737) {
	   $stack$i = (($0) + 16|0);
	   $cflags = (($ctx) + 36|0);
	   $position617 = (($ctx) + 24|0);
	   $submatch_id237 = (($ctx) + 20|0);
	   $max_backref = (($ctx) + 28|0);
	   $arrayidx365 = (($tmp) + 1|0);
	   $re295 = (($subctx) + 12|0);
	   $nofirstsub296 = (($subctx) + 40|0);
	   $position = (($subctx) + 24|0);
	   $result305 = (($subctx) + 8|0);
	   $5 = $$idx$val734;$depth$0740 = 0;$node$2$i661738 = 0;
	   L6: while(1) {
	    $dec$i = (($5) + -1)|0;
	    HEAP32[$$idx219>>2] = $dec$i;
	    $6 = HEAP32[$stack$i>>2]|0;
	    $arrayidx$i = (($6) + ($dec$i<<2)|0);
	    $7 = HEAP32[$arrayidx$i>>2]|0;
	    L8: do {
	     switch ($7|0) {
	     case 1:  {
	      $55 = HEAP32[$re>>2]|0;
	      $56 = HEAP8[$55>>0]|0;
	      $conv228 = $56 << 24 >> 24;
	      L10: do {
	       switch ($conv228|0) {
	       case 40:  {
	        $57 = HEAP32[$cflags>>2]|0;
	        $and231 = $57 & 1;
	        $tobool232 = ($and231|0)==(0);
	        if (!($tobool232)) {
	         $58 = $55;
	         label = 74;
	        }
	        break;
	       }
	       case 91:  {
	        $incdec$ptr259 = (($55) + 1|0);
	        HEAP32[$re>>2] = $incdec$ptr259;
	        $call$i310 = (_malloc(128)|0);
	        $cmp$i = ($call$i310|0)==(0|0);
	        if ($cmp$i) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        $61 = HEAP8[$incdec$ptr259>>0]|0;
	        $cmp1$i = ($61<<24>>24)==(94);
	        if ($cmp1$i) {
	         $incdec$ptr$i313 = (($55) + 2|0);
	         HEAP32[$re>>2] = $incdec$ptr$i313;
	         $207 = $incdec$ptr$i313;$negate$0$i = 1;
	        } else {
	         $207 = $incdec$ptr259;$negate$0$i = 0;
	        }
	        $tobool116$i$i = ($negate$0$i|0)==(0);
	        $inc$i107$i = 0;$inc$i135184$i$i = 0;$items$0$load106110$i = $call$i310;$mul$i125174$i$i = 32;$re$1$i$i = $207;
	        L17: while(1) {
	         $62 = HEAP8[$re$1$i$i>>0]|0;
	         if ((($62<<24>>24) == 93)) {
	          $63 = HEAP32[$re>>2]|0;
	          $cmp5$i$i = ($re$1$i$i>>>0)>($63>>>0);
	          if ($cmp5$i$i) {
	           label = 85;
	           break;
	          }
	         } else if ((($62<<24>>24) == 0)) {
	          $items$0$load106117$ph$i = $items$0$load106110$i;$re$4$i$ph$i = $re$1$i$i;$status$10$i$ph$i = 7;
	          label = 140;
	          break;
	         }
	         $call$i$i317 = (_mbtowc($wc$i$i,$re$1$i$i,-1)|0);
	         $cmp9$i$i318 = ($call$i$i317|0)<(0);
	         if ($cmp9$i$i318) {
	          HEAP32[$wc$i$i>>2] = -1;
	          $clen$0$i$i = 1;
	         } else {
	          $clen$0$i$i = $call$i$i317;
	         }
	         $add$ptr$i$i = (($re$1$i$i) + ($clen$0$i$i)|0);
	         $64 = HEAP8[$add$ptr$i$i>>0]|0;
	         $cmp13$i$i = ($64<<24>>24)==(45);
	         if ($cmp13$i$i) {
	          $add$ptr$sum$i$i = (($clen$0$i$i) + 1)|0;
	          $add$ptr17$i$i = (($re$1$i$i) + ($add$ptr$sum$i$i)|0);
	          $65 = HEAP8[$add$ptr17$i$i>>0]|0;
	          $cmp19$i$i = ($65<<24>>24)==(93);
	          if ($cmp19$i$i) {
	           label = 94;
	          } else {
	           $66 = HEAP32[$wc$i$i>>2]|0;
	           $call23$i$i = (_mbtowc($wc$i$i,$add$ptr17$i$i,-1)|0);
	           $cmp24$i$i = ($call23$i$i|0)<(0);
	           if ($cmp24$i$i) {
	            HEAP32[$wc$i$i>>2] = -1;
	            $67 = -1;$clen$1$i$i = 1;
	           } else {
	            $$pre$i$i = HEAP32[$wc$i$i>>2]|0;
	            $67 = $$pre$i$i;$clen$1$i$i = $call23$i$i;
	           }
	           $add$ptr22$sum$i$i = (($clen$1$i$i) + ($add$ptr$sum$i$i))|0;
	           $add$ptr28$i$i = (($re$1$i$i) + ($add$ptr22$sum$i$i)|0);
	           $cmp29$i$i = ($66>>>0)>($67>>>0);
	           $$status$1$i$i = $cmp29$i$i ? 11 : 0;
	           $class$1$i$i = 0;$max$0$i$i = $67;$min$0$i$i = $66;$re$3$i$i = $add$ptr28$i$i;$status$5$i$i = $$status$1$i$i;
	          }
	         } else {
	          label = 94;
	         }
	         L32: do {
	          if ((label|0) == 94) {
	           label = 0;
	           $68 = HEAP8[$re$1$i$i>>0]|0;
	           do {
	            if ((($68<<24>>24) == 91)) {
	             $add$ptr38$i$i = (($re$1$i$i) + 1|0);
	             $69 = HEAP8[$add$ptr38$i$i>>0]|0;
	             if ((($69<<24>>24) == 61) | (($69<<24>>24) == 46)) {
	              $items$0$load106117$ph$i = $items$0$load106110$i;$re$4$i$ph$i = $re$1$i$i;$status$10$i$ph$i = 3;
	              label = 140;
	              break L17;
	             } else if (!((($69<<24>>24) == 58))) {
	              $status$4$i$i = 0;
	              break;
	             }
	             $add$ptr63$i$i = (($re$1$i$i) + 2|0);
	             $endptr$0$i$i = $add$ptr63$i$i;
	             while(1) {
	              $70 = HEAP8[$endptr$0$i$i>>0]|0;
	              $tobool66$i$i = ($70<<24>>24)==(0);
	              $cmp68$i$i = ($70<<24>>24)!=(58);
	              $not$tobool66$i$i = $tobool66$i$i ^ 1;
	              $$cmp68$i$i = $cmp68$i$i & $not$tobool66$i$i;
	              $incdec$ptr71$i$i = (($endptr$0$i$i) + 1|0);
	              if ($$cmp68$i$i) {
	               $endptr$0$i$i = $incdec$ptr71$i$i;
	              } else {
	               break;
	              }
	             }
	             if ($tobool66$i$i) {
	              $items$0$load106117$ph$i = $items$0$load106110$i;$re$4$i$ph$i = $re$1$i$i;$status$10$i$ph$i = 4;
	              label = 140;
	              break L17;
	             }
	             $sub$ptr$lhs$cast$i$i = $endptr$0$i$i;
	             $sub$ptr$rhs$cast$i$i = $re$1$i$i;
	             $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
	             $sub$i$i320 = (($sub$ptr$sub$i$i) + -2)|0;
	             $cmp74$i$i = ($sub$i$i320|0)>(63);
	             $sub$$i$i = $cmp74$i$i ? 63 : $sub$i$i320;
	             (_strncpy(($tmp_str$i$i|0),($add$ptr63$i$i|0),($sub$$i$i|0))|0);
	             $arrayidx$i$i = (($tmp_str$i$i) + ($sub$$i$i)|0);
	             HEAP8[$arrayidx$i$i>>0] = 0;
	             $call83$i$i = (_wctype($tmp_str$i$i)|0);
	             $tobool84$i$i = ($call83$i$i|0)==(0);
	             $status$2$i$i = $tobool84$i$i ? 4 : 0;
	             $add$ptr87$i$i = (($endptr$0$i$i) + 2|0);
	             $class$1$i$i = $call83$i$i;$max$0$i$i = 1114111;$min$0$i$i = 0;$re$3$i$i = $add$ptr87$i$i;$status$5$i$i = $status$2$i$i;
	             break L32;
	            } else if ((($68<<24>>24) == 45)) {
	             $add$ptr95$i$i = (($re$1$i$i) + 1|0);
	             $71 = HEAP8[$add$ptr95$i$i>>0]|0;
	             $cmp97$i$i = ($71<<24>>24)==(93);
	             if ($cmp97$i$i) {
	              $status$4$i$i = 0;
	             } else {
	              $72 = HEAP32[$re>>2]|0;
	              $cmp101$i$i = ($72|0)==($re$1$i$i|0);
	              $status$1$$i$i = $cmp101$i$i ? 0 : 11;
	              $status$4$i$i = $status$1$$i$i;
	             }
	            } else {
	             $status$4$i$i = 0;
	            }
	           } while(0);
	           $73 = HEAP32[$wc$i$i>>2]|0;
	           $class$1$i$i = 0;$max$0$i$i = $73;$min$0$i$i = $73;$re$3$i$i = $add$ptr$i$i;$status$5$i$i = $status$4$i$i;
	          }
	         } while(0);
	         $cmp110$i$i = ($status$5$i$i|0)==(0);
	         if (!($cmp110$i$i)) {
	          $items$0$load106117$ph$i = $items$0$load106110$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = $status$5$i$i;
	          label = 140;
	          break;
	         }
	         $tobool114$i$i = ($class$1$i$i|0)!=(0);
	         $tobool114$not$i$i = $tobool114$i$i ^ 1;
	         $or$cond$i$i = $tobool116$i$i | $tobool114$not$i$i;
	         if ($or$cond$i$i) {
	          $74 = HEAP32[$ctx>>2]|0;
	          $cmp$i$i$i = ($inc$i135184$i$i|0)<($mul$i125174$i$i|0);
	          if ($cmp$i$i$i) {
	           $items$0$load106116$i = $items$0$load106110$i;$mul$i125173$i$i = $mul$i125174$i$i;
	          } else {
	           $cmp1$i$i$i = ($mul$i125174$i$i|0)>(1024);
	           if ($cmp1$i$i$i) {
	            $items$0$load106117$ph$i = $items$0$load106110$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
	            label = 140;
	            break;
	           }
	           $mul$i$i$i = $mul$i125174$i$i << 1;
	           $mul3$i$i$i = $mul$i125174$i$i << 3;
	           $call$i$i$i321 = (_realloc($items$0$load106110$i,$mul3$i$i$i)|0);
	           $cmp4$i$i$i = ($call$i$i$i321|0)==(0|0);
	           if ($cmp4$i$i$i) {
	            $items$0$load106117$ph$i = $items$0$load106110$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
	            label = 140;
	            break;
	           } else {
	            $items$0$load106116$i = $call$i$i$i321;$mul$i125173$i$i = $mul$i$i$i;
	           }
	          }
	          $call$i$i$i$i = (___tre_mem_alloc_impl($74,0,0,1,32)|0);
	          $tobool$i$i$i$i = ($call$i$i$i$i|0)==(0|0);
	          if ($tobool$i$i$i$i) {
	           label = 112;
	           break;
	          }
	          $call1$i$i$i$i = (___tre_mem_alloc_impl($74,0,0,1,20)|0);
	          $obj$i$i$i$i = (($call$i$i$i$i) + 4|0);
	          HEAP32[$obj$i$i$i$i>>2] = $call1$i$i$i$i;
	          $tobool3$i$i$i$i = ($call1$i$i$i$i|0)==(0|0);
	          if ($tobool3$i$i$i$i) {
	           label = 112;
	           break;
	          }
	          HEAP32[$call$i$i$i$i>>2] = 0;
	          $nullable$i$i$i$i = (($call$i$i$i$i) + 8|0);
	          HEAP32[$nullable$i$i$i$i>>2] = -1;
	          $submatch_id$i$i$i$i = (($call$i$i$i$i) + 12|0);
	          HEAP32[$submatch_id$i$i$i$i>>2] = -1;
	          HEAP32[$call1$i$i$i$i>>2] = $min$0$i$i;
	          $code_max2$i$i$i = (($call1$i$i$i$i) + 4|0);
	          HEAP32[$code_max2$i$i$i>>2] = $max$0$i$i;
	          $position3$i$i$i = (($call1$i$i$i$i) + 8|0);
	          HEAP32[$position3$i$i$i>>2] = -1;
	          $arrayidx$i$i$i = (($items$0$load106116$i) + ($inc$i135184$i$i<<2)|0);
	          HEAP32[$arrayidx$i$i$i>>2] = $call$i$i$i$i;
	          $inc$i$i$i = (($inc$i135184$i$i) + 1)|0;
	          $75 = HEAP32[$obj$i$i$i$i>>2]|0;
	          $class134$i$i = (($75) + 12|0);
	          HEAP32[$class134$i$i>>2] = $class$1$i$i;
	          $inc$i108$i = $inc$i107$i;$inc$i135182$i$i = $inc$i$i$i;$items$0$load106115$i = $items$0$load106116$i;$mul$i125171$i$i = $mul$i125173$i$i;$status$6$i$i = 0;
	         } else {
	          $cmp118$i$i = ($inc$i107$i|0)>(63);
	          if ($cmp118$i$i) {
	           $inc$i108$i = $inc$i107$i;$inc$i135182$i$i = $inc$i135184$i$i;$items$0$load106115$i = $items$0$load106110$i;$mul$i125171$i$i = $mul$i125174$i$i;$status$6$i$i = 12;
	          } else {
	           $inc$i$i = (($inc$i107$i) + 1)|0;
	           $arrayidx122$i$i = (($neg_classes$i) + ($inc$i107$i<<2)|0);
	           HEAP32[$arrayidx122$i$i>>2] = $class$1$i$i;
	           $inc$i108$i = $inc$i$i;$inc$i135182$i$i = $inc$i135184$i$i;$items$0$load106115$i = $items$0$load106110$i;$mul$i125171$i$i = $mul$i125174$i$i;$status$6$i$i = 0;
	          }
	         }
	         $76 = HEAP32[$cflags>>2]|0;
	         $and$i$i = $76 & 2;
	         $tobool137$i$i = ($and$i$i|0)==(0);
	         $brmerge$i$i = $tobool137$i$i | $tobool114$i$i;
	         $brmerge$not$i$i = $brmerge$i$i ^ 1;
	         $cmp141$i$i = ($status$6$i$i|0)==(0);
	         $or$cond85$i$i = $cmp141$i$i & $brmerge$not$i$i;
	         if ($or$cond85$i$i) {
	          $inc$i135181$i$ph$i = $inc$i135182$i$i;$items$0$load106114$ph$i = $items$0$load106115$i;$min$1$i$ph$i = $min$0$i$i;$mul$i125170$i$ph$i = $mul$i125171$i$i;
	         } else {
	          if ($cmp141$i$i) {
	           $inc$i107$i = $inc$i108$i;$inc$i135184$i$i = $inc$i135182$i$i;$items$0$load106110$i = $items$0$load106115$i;$mul$i125174$i$i = $mul$i125171$i$i;$re$1$i$i = $re$3$i$i;
	           continue;
	          } else {
	           $items$0$load106117$ph$i = $items$0$load106115$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = $status$6$i$i;
	           label = 140;
	           break;
	          }
	         }
	         while(1) {
	          $min$1$i$i = $min$1$i$ph$i;
	          while(1) {
	           $cmp147$i$i = ($min$1$i$i>>>0)>($max$0$i$i>>>0);
	           if ($cmp147$i$i) {
	            $inc$i107$i = $inc$i108$i;$inc$i135184$i$i = $inc$i135181$i$ph$i;$items$0$load106110$i = $items$0$load106114$ph$i;$mul$i125174$i$i = $mul$i125170$i$ph$i;$re$1$i$i = $re$3$i$i;
	            continue L17;
	           }
	           $call150$i$i = (_iswlower($min$1$i$i)|0);
	           $tobool151$i$i = ($call150$i$i|0)==(0);
	           if (!($tobool151$i$i)) {
	            label = 118;
	            break;
	           }
	           $call174$i$i = (_iswupper($min$1$i$i)|0);
	           $tobool175$i$i = ($call174$i$i|0)==(0);
	           $inc177$i$i = (($min$1$i$i) + 1)|0;
	           if ($tobool175$i$i) {
	            $min$1$i$i = $inc177$i$i;
	           } else {
	            label = 129;
	            break;
	           }
	          }
	          if ((label|0) == 118) {
	           label = 0;
	           $call154$i$i = (_towupper($min$1$i$i)|0);
	           $min$2203$i$i = (($min$1$i$i) + 1)|0;
	           $call156204$i$i = (_iswlower($min$2203$i$i)|0);
	           $tobool157205$i$i = ($call156204$i$i|0)==(0);
	           L67: do {
	            if ($tobool157205$i$i) {
	             $ccurr$0$lcssa$i$i = $call154$i$i;$min$2$lcssa$i$i = $min$2203$i$i;
	            } else {
	             $ccurr$0206$i$i = $call154$i$i;$min$2207$i$i = $min$2203$i$i;
	             while(1) {
	              $call159$i$i = (_towupper($min$2207$i$i)|0);
	              $add160$i$i = (($ccurr$0206$i$i) + 1)|0;
	              $cmp161$i$i = ($call159$i$i|0)!=($add160$i$i|0);
	              $cmp164$i$i = ($min$2207$i$i>>>0)>($max$0$i$i>>>0);
	              $or$cond86$i$i = $cmp161$i$i | $cmp164$i$i;
	              if ($or$cond86$i$i) {
	               $ccurr$0$lcssa$i$i = $ccurr$0206$i$i;$min$2$lcssa$i$i = $min$2207$i$i;
	               break L67;
	              }
	              $call169$i$i = (_towupper($min$2207$i$i)|0);
	              $min$2$i$i = (($min$2207$i$i) + 1)|0;
	              $call156$i$i = (_iswlower($min$2$i$i)|0);
	              $tobool157$i$i = ($call156$i$i|0)==(0);
	              if ($tobool157$i$i) {
	               $ccurr$0$lcssa$i$i = $call169$i$i;$min$2$lcssa$i$i = $min$2$i$i;
	               break;
	              } else {
	               $ccurr$0206$i$i = $call169$i$i;$min$2207$i$i = $min$2$i$i;
	              }
	             }
	            }
	           } while(0);
	           $77 = HEAP32[$ctx>>2]|0;
	           $cmp$i90$i$i = ($inc$i135181$i$ph$i|0)<($mul$i125170$i$ph$i|0);
	           if ($cmp$i90$i$i) {
	            $items$0$load106112$i = $items$0$load106114$ph$i;$mul$i125166$i$i = $mul$i125170$i$ph$i;
	           } else {
	            $cmp1$i91$i$i = ($mul$i125170$i$ph$i|0)>(1024);
	            if ($cmp1$i91$i$i) {
	             $items$0$load106117$ph$i = $items$0$load106114$ph$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
	             label = 140;
	             break L17;
	            }
	            $mul$i93$i$i = $mul$i125170$i$ph$i << 1;
	            $mul3$i94$i$i = $mul$i125170$i$ph$i << 3;
	            $call$i95$i$i = (_realloc($items$0$load106114$ph$i,$mul3$i94$i$i)|0);
	            $cmp4$i96$i$i = ($call$i95$i$i|0)==(0|0);
	            if ($cmp4$i96$i$i) {
	             $items$0$load106117$ph$i = $items$0$load106114$ph$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
	             label = 140;
	             break L17;
	            } else {
	             $items$0$load106112$i = $call$i95$i$i;$mul$i125166$i$i = $mul$i93$i$i;
	            }
	           }
	           $call$i$i107$i$i = (___tre_mem_alloc_impl($77,0,0,1,32)|0);
	           $tobool$i$i108$i$i = ($call$i$i107$i$i|0)==(0|0);
	           do {
	            if ($tobool$i$i108$i$i) {
	             $retval$0$i120$i$i = 0;
	            } else {
	             $call1$i$i109$i$i = (___tre_mem_alloc_impl($77,0,0,1,20)|0);
	             $obj$i$i110$i$i = (($call$i$i107$i$i) + 4|0);
	             HEAP32[$obj$i$i110$i$i>>2] = $call1$i$i109$i$i;
	             $tobool3$i$i111$i$i = ($call1$i$i109$i$i|0)==(0|0);
	             if ($tobool3$i$i111$i$i) {
	              $retval$0$i120$i$i = 0;
	              break;
	             }
	             HEAP32[$call$i$i107$i$i>>2] = 0;
	             $nullable$i$i114$i$i = (($call$i$i107$i$i) + 8|0);
	             HEAP32[$nullable$i$i114$i$i>>2] = -1;
	             $submatch_id$i$i115$i$i = (($call$i$i107$i$i) + 12|0);
	             HEAP32[$submatch_id$i$i115$i$i>>2] = -1;
	             HEAP32[$call1$i$i109$i$i>>2] = $call154$i$i;
	             $code_max2$i117$i$i = (($call1$i$i109$i$i) + 4|0);
	             HEAP32[$code_max2$i117$i$i>>2] = $ccurr$0$lcssa$i$i;
	             $position3$i118$i$i = (($call1$i$i109$i$i) + 8|0);
	             HEAP32[$position3$i118$i$i>>2] = -1;
	             $retval$0$i120$i$i = $call$i$i107$i$i;
	            }
	           } while(0);
	           $arrayidx$i100$i$i = (($items$0$load106112$i) + ($inc$i135181$i$ph$i<<2)|0);
	           HEAP32[$arrayidx$i100$i$i>>2] = $retval$0$i120$i$i;
	           $items$0$load106111$i = $items$0$load106112$i;$min$4$i$i = $min$2$lcssa$i$i;$mul$i125164$i$i = $mul$i125166$i$i;$retval$0$i120$sink$i$i = $retval$0$i120$i$i;
	          }
	          else if ((label|0) == 129) {
	           label = 0;
	           $call178$i$i = (_towlower($min$1$i$i)|0);
	           $call180209$i$i = (_iswupper($inc177$i$i)|0);
	           $tobool181210$i$i = ($call180209$i$i|0)==(0);
	           L81: do {
	            if ($tobool181210$i$i) {
	             $ccurr$1$lcssa$i$i = $call178$i$i;$min$3$lcssa$i$i = $inc177$i$i;
	            } else {
	             $ccurr$1212$i$i = $call178$i$i;$min$3211$i$i = $inc177$i$i;
	             while(1) {
	              $call183$i$i = (_towlower($min$3211$i$i)|0);
	              $add184$i$i = (($ccurr$1212$i$i) + 1)|0;
	              $cmp185$i$i = ($call183$i$i|0)!=($add184$i$i|0);
	              $cmp188$i$i = ($min$3211$i$i>>>0)>($max$0$i$i>>>0);
	              $or$cond87$i$i = $cmp185$i$i | $cmp188$i$i;
	              if ($or$cond87$i$i) {
	               $ccurr$1$lcssa$i$i = $ccurr$1212$i$i;$min$3$lcssa$i$i = $min$3211$i$i;
	               break L81;
	              }
	              $inc192$i$i = (($min$3211$i$i) + 1)|0;
	              $call193$i$i = (_towlower($min$3211$i$i)|0);
	              $call180$i$i = (_iswupper($inc192$i$i)|0);
	              $tobool181$i$i = ($call180$i$i|0)==(0);
	              if ($tobool181$i$i) {
	               $ccurr$1$lcssa$i$i = $call193$i$i;$min$3$lcssa$i$i = $inc192$i$i;
	               break;
	              } else {
	               $ccurr$1212$i$i = $call193$i$i;$min$3211$i$i = $inc192$i$i;
	              }
	             }
	            }
	           } while(0);
	           $78 = HEAP32[$ctx>>2]|0;
	           $cmp$i122$i$i = ($inc$i135181$i$ph$i|0)<($mul$i125170$i$ph$i|0);
	           if ($cmp$i122$i$i) {
	            $items$0$load106113$i = $items$0$load106114$ph$i;$mul$i125168$i$i = $mul$i125170$i$ph$i;
	           } else {
	            $cmp1$i123$i$i = ($mul$i125170$i$ph$i|0)>(1024);
	            if ($cmp1$i123$i$i) {
	             $items$0$load106117$ph$i = $items$0$load106114$ph$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
	             label = 140;
	             break L17;
	            }
	            $mul$i125$i$i = $mul$i125170$i$ph$i << 1;
	            $mul3$i126$i$i = $mul$i125170$i$ph$i << 3;
	            $call$i127$i$i = (_realloc($items$0$load106114$ph$i,$mul3$i126$i$i)|0);
	            $cmp4$i128$i$i = ($call$i127$i$i|0)==(0|0);
	            if ($cmp4$i128$i$i) {
	             $items$0$load106117$ph$i = $items$0$load106114$ph$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
	             label = 140;
	             break L17;
	            } else {
	             $items$0$load106113$i = $call$i127$i$i;$mul$i125168$i$i = $mul$i125$i$i;
	            }
	           }
	           $call$i$i139$i$i = (___tre_mem_alloc_impl($78,0,0,1,32)|0);
	           $tobool$i$i140$i$i = ($call$i$i139$i$i|0)==(0|0);
	           do {
	            if ($tobool$i$i140$i$i) {
	             $retval$0$i152$i$i = 0;
	            } else {
	             $call1$i$i141$i$i = (___tre_mem_alloc_impl($78,0,0,1,20)|0);
	             $obj$i$i142$i$i = (($call$i$i139$i$i) + 4|0);
	             HEAP32[$obj$i$i142$i$i>>2] = $call1$i$i141$i$i;
	             $tobool3$i$i143$i$i = ($call1$i$i141$i$i|0)==(0|0);
	             if ($tobool3$i$i143$i$i) {
	              $retval$0$i152$i$i = 0;
	              break;
	             }
	             HEAP32[$call$i$i139$i$i>>2] = 0;
	             $nullable$i$i146$i$i = (($call$i$i139$i$i) + 8|0);
	             HEAP32[$nullable$i$i146$i$i>>2] = -1;
	             $submatch_id$i$i147$i$i = (($call$i$i139$i$i) + 12|0);
	             HEAP32[$submatch_id$i$i147$i$i>>2] = -1;
	             HEAP32[$call1$i$i141$i$i>>2] = $call178$i$i;
	             $code_max2$i149$i$i = (($call1$i$i141$i$i) + 4|0);
	             HEAP32[$code_max2$i149$i$i>>2] = $ccurr$1$lcssa$i$i;
	             $position3$i150$i$i = (($call1$i$i141$i$i) + 8|0);
	             HEAP32[$position3$i150$i$i>>2] = -1;
	             $retval$0$i152$i$i = $call$i$i139$i$i;
	            }
	           } while(0);
	           $arrayidx$i132$i$i = (($items$0$load106113$i) + ($inc$i135181$i$ph$i<<2)|0);
	           HEAP32[$arrayidx$i132$i$i>>2] = $retval$0$i152$i$i;
	           $items$0$load106111$i = $items$0$load106113$i;$min$4$i$i = $min$3$lcssa$i$i;$mul$i125164$i$i = $mul$i125168$i$i;$retval$0$i120$sink$i$i = $retval$0$i152$i$i;
	          }
	          $cmp10$i101$i$i = ($retval$0$i120$sink$i$i|0)==(0|0);
	          $inc$i103$i$i = (($inc$i135181$i$ph$i) + 1)|0;
	          if ($cmp10$i101$i$i) {
	           label = 141;
	           break L17;
	          } else {
	           $inc$i135181$i$ph$i = $inc$i103$i$i;$items$0$load106114$ph$i = $items$0$load106111$i;$min$1$i$ph$i = $min$4$i$i;$mul$i125170$i$ph$i = $mul$i125164$i$i;
	          }
	         }
	        }
	        L95: do {
	         if ((label|0) == 85) {
	          label = 0;
	          $incdec$ptr$i$i315 = (($re$1$i$i) + 1|0);
	          HEAP32[$re>>2] = $incdec$ptr$i$i315;
	          $tobool$i316 = ($negate$0$i|0)!=(0);
	          if ($tobool$i316) {
	           _qsort($items$0$load106110$i,$inc$i135184$i$i,4,19);
	          }
	          $cmp13142$i = ($inc$i135184$i$i|0)>(0);
	          L100: do {
	           if ($cmp13142$i) {
	            $cmp39$i = ($inc$i107$i|0)>(0);
	            $add42$i = $inc$i107$i << 2;
	            $mul43$i = (($add42$i) + 4)|0;
	            if ($tobool$i316) {
	             $curr_max$0145$us$i = 0;$curr_min$0146$us$i = 0;$j$0144$us$i = 0;$node$0147$us$i = 0;
	            } else {
	             $j$0144$i = 0;$node$0147$i = 0;
	             while(1) {
	              $arrayidx$i323 = (($items$0$load106110$i) + ($j$0144$i<<2)|0);
	              $91 = HEAP32[$arrayidx$i323>>2]|0;
	              $obj$i = (($91) + 4|0);
	              $92 = HEAP32[$obj$i>>2]|0;
	              $cmp35$i = ($92|0)==(0|0);
	              do {
	               if ($cmp35$i) {
	                $node$1$i = $node$0147$i;$status$2$i = 0;
	               } else {
	                $93 = HEAP32[$position617>>2]|0;
	                $position38$i = (($92) + 8|0);
	                HEAP32[$position38$i>>2] = $93;
	                if ($cmp39$i) {
	                 $94 = HEAP32[$ctx>>2]|0;
	                 $call44$i = (___tre_mem_alloc_impl($94,0,0,0,$mul43$i)|0);
	                 $neg_classes45$i = (($92) + 16|0);
	                 HEAP32[$neg_classes45$i>>2] = $call44$i;
	                 $cmp47$i = ($call44$i|0)==(0|0);
	                 if ($cmp47$i) {
	                  $items$0$load106117119$i = $items$0$load106110$i;$node$2$i = $node$0147$i;$status$5$i = 12;
	                  break L95;
	                 }
	                 _memcpy(($call44$i|0),($neg_classes$i|0),($add42$i|0))|0;
	                 $$pre215$i = HEAP32[$neg_classes45$i>>2]|0;
	                 $arrayidx59$i = (($$pre215$i) + ($inc$i107$i<<2)|0);
	                 HEAP32[$arrayidx59$i>>2] = 0;
	                } else {
	                 $neg_classes61$i = (($92) + 16|0);
	                 HEAP32[$neg_classes61$i>>2] = 0;
	                }
	                $cmp63$i = ($node$0147$i|0)==(0|0);
	                if ($cmp63$i) {
	                 $95 = HEAP32[$arrayidx$i323>>2]|0;
	                 $node$1$i = $95;$status$2$i = 0;
	                 break;
	                }
	                $96 = HEAP32[$ctx>>2]|0;
	                $97 = HEAP32[$arrayidx$i323>>2]|0;
	                $call$i$i60$i = (___tre_mem_alloc_impl($96,0,0,1,32)|0);
	                $tobool$i$i$i324 = ($call$i$i60$i|0)==(0|0);
	                do {
	                 if ($tobool$i$i$i324) {
	                  $retval$0$i$i = 0;
	                 } else {
	                  $call1$i$i$i325 = (___tre_mem_alloc_impl($96,0,0,1,8)|0);
	                  $obj$i$i$i326 = (($call$i$i60$i) + 4|0);
	                  HEAP32[$obj$i$i$i326>>2] = $call1$i$i$i325;
	                  $tobool3$i$i$i327 = ($call1$i$i$i325|0)==(0|0);
	                  if ($tobool3$i$i$i327) {
	                   $retval$0$i$i = 0;
	                   break;
	                  }
	                  HEAP32[$call$i$i60$i>>2] = 3;
	                  $nullable$i$i$i329 = (($call$i$i60$i) + 8|0);
	                  HEAP32[$nullable$i$i$i329>>2] = -1;
	                  $submatch_id$i$i$i330 = (($call$i$i60$i) + 12|0);
	                  HEAP32[$submatch_id$i$i$i330>>2] = -1;
	                  HEAP32[$call1$i$i$i325>>2] = $node$0147$i;
	                  $98 = HEAP32[$obj$i$i$i326>>2]|0;
	                  $right3$i$i = (($98) + 4|0);
	                  HEAP32[$right3$i$i>>2] = $97;
	                  $num_submatches$i$i331 = (($node$0147$i) + 16|0);
	                  $99 = HEAP32[$num_submatches$i$i331>>2]|0;
	                  $num_submatches4$i$i = (($97) + 16|0);
	                  $100 = HEAP32[$num_submatches4$i$i>>2]|0;
	                  $add$i$i332 = (($100) + ($99))|0;
	                  $num_submatches5$i$i333 = (($call$i$i60$i) + 16|0);
	                  HEAP32[$num_submatches5$i$i333>>2] = $add$i$i332;
	                  $retval$0$i$i = $call$i$i60$i;
	                 }
	                } while(0);
	                $cmp71$i = ($retval$0$i$i|0)==(0|0);
	                $$status$0$i = $cmp71$i ? 12 : 0;
	                $node$1$i = $retval$0$i$i;$status$2$i = $$status$0$i;
	               }
	              } while(0);
	              $inc78$i = (($j$0144$i) + 1)|0;
	              $cmp13$i = ($inc78$i|0)<($inc$i135184$i$i|0);
	              $cmp15$i = ($status$2$i|0)==(0);
	              $or$cond$i334 = $cmp13$i & $cmp15$i;
	              if ($or$cond$i334) {
	               $j$0144$i = $inc78$i;$node$0147$i = $node$1$i;
	              } else {
	               $curr_min$0$lcssa$i = 0;$node$0$lcssa$i = $node$1$i;$status$0$lcssa$i = $status$2$i;
	               break L100;
	              }
	             }
	            }
	            while(1) {
	             $arrayidx$us$i = (($items$0$load106110$i) + ($j$0144$us$i<<2)|0);
	             $79 = HEAP32[$arrayidx$us$i>>2]|0;
	             $obj$us$i = (($79) + 4|0);
	             $80 = HEAP32[$obj$us$i>>2]|0;
	             $81 = HEAP32[$80>>2]|0;
	             $code_max$us$i = (($80) + 4|0);
	             $82 = HEAP32[$code_max$us$i>>2]|0;
	             $cmp19$us$i = ($81|0)<($curr_max$0145$us$i|0);
	             do {
	              if ($cmp19$us$i) {
	               $add$us$i = (($82) + 1)|0;
	               $cmp22$us$i = ($add$us$i|0)<($curr_max$0145$us$i|0);
	               $curr_max$0$add$us$i = $cmp22$us$i ? $curr_max$0145$us$i : $add$us$i;
	               $curr_max$1127$us$i = $curr_max$0$add$us$i;$curr_min$1128$us$i = $curr_min$0146$us$i;$node$1$us$i = $node$0147$us$i;$status$2$us$i = 0;
	              } else {
	               $cmp25$us$i = ($81|0)>($curr_min$0146$us$i|0);
	               if (!($cmp25$us$i)) {
	                $add32$us217$i = (($82) + 1)|0;
	                $curr_max$1127$us$i = $add32$us217$i;$curr_min$1128$us$i = $add32$us217$i;$node$1$us$i = $node$0147$us$i;$status$2$us$i = 0;
	                break;
	               }
	               $sub$us$i = (($81) + -1)|0;
	               HEAP32[$80>>2] = $curr_min$0146$us$i;
	               HEAP32[$code_max$us$i>>2] = $sub$us$i;
	               $add32$us$i = (($82) + 1)|0;
	               $cmp35$us$i = ($80|0)==(0|0);
	               if ($cmp35$us$i) {
	                $curr_max$1127$us$i = $add32$us$i;$curr_min$1128$us$i = $add32$us$i;$node$1$us$i = $node$0147$us$i;$status$2$us$i = 0;
	               } else {
	                $83 = HEAP32[$position617>>2]|0;
	                $position38$us$i = (($80) + 8|0);
	                HEAP32[$position38$us$i>>2] = $83;
	                if ($cmp39$i) {
	                 $84 = HEAP32[$ctx>>2]|0;
	                 $call44$us$i = (___tre_mem_alloc_impl($84,0,0,0,$mul43$i)|0);
	                 $neg_classes45$us$i = (($80) + 16|0);
	                 HEAP32[$neg_classes45$us$i>>2] = $call44$us$i;
	                 $cmp47$us$i = ($call44$us$i|0)==(0|0);
	                 if ($cmp47$us$i) {
	                  $items$0$load106117119$i = $items$0$load106110$i;$node$2$i = $node$0147$us$i;$status$5$i = 12;
	                  break L95;
	                 }
	                 _memcpy(($call44$us$i|0),($neg_classes$i|0),($add42$i|0))|0;
	                 $$pre$i = HEAP32[$neg_classes45$us$i>>2]|0;
	                 $arrayidx59$us$i = (($$pre$i) + ($inc$i107$i<<2)|0);
	                 HEAP32[$arrayidx59$us$i>>2] = 0;
	                } else {
	                 $neg_classes61$us$i = (($80) + 16|0);
	                 HEAP32[$neg_classes61$us$i>>2] = 0;
	                }
	                $cmp63$us$i = ($node$0147$us$i|0)==(0|0);
	                if ($cmp63$us$i) {
	                 $90 = HEAP32[$arrayidx$us$i>>2]|0;
	                 $curr_max$1127$us$i = $add32$us$i;$curr_min$1128$us$i = $add32$us$i;$node$1$us$i = $90;$status$2$us$i = 0;
	                 break;
	                }
	                $85 = HEAP32[$ctx>>2]|0;
	                $86 = HEAP32[$arrayidx$us$i>>2]|0;
	                $call$i$i60$us$i = (___tre_mem_alloc_impl($85,0,0,1,32)|0);
	                $tobool$i$i$us$i = ($call$i$i60$us$i|0)==(0|0);
	                do {
	                 if ($tobool$i$i$us$i) {
	                  $retval$0$i$us$i = 0;
	                 } else {
	                  $call1$i$i$us$i = (___tre_mem_alloc_impl($85,0,0,1,8)|0);
	                  $obj$i$i$us$i = (($call$i$i60$us$i) + 4|0);
	                  HEAP32[$obj$i$i$us$i>>2] = $call1$i$i$us$i;
	                  $tobool3$i$i$us$i = ($call1$i$i$us$i|0)==(0|0);
	                  if ($tobool3$i$i$us$i) {
	                   $retval$0$i$us$i = 0;
	                   break;
	                  }
	                  HEAP32[$call$i$i60$us$i>>2] = 3;
	                  $nullable$i$i$us$i = (($call$i$i60$us$i) + 8|0);
	                  HEAP32[$nullable$i$i$us$i>>2] = -1;
	                  $submatch_id$i$i$us$i = (($call$i$i60$us$i) + 12|0);
	                  HEAP32[$submatch_id$i$i$us$i>>2] = -1;
	                  HEAP32[$call1$i$i$us$i>>2] = $node$0147$us$i;
	                  $87 = HEAP32[$obj$i$i$us$i>>2]|0;
	                  $right3$i$us$i = (($87) + 4|0);
	                  HEAP32[$right3$i$us$i>>2] = $86;
	                  $num_submatches$i$us$i = (($node$0147$us$i) + 16|0);
	                  $88 = HEAP32[$num_submatches$i$us$i>>2]|0;
	                  $num_submatches4$i$us$i = (($86) + 16|0);
	                  $89 = HEAP32[$num_submatches4$i$us$i>>2]|0;
	                  $add$i$us$i = (($89) + ($88))|0;
	                  $num_submatches5$i$us$i = (($call$i$i60$us$i) + 16|0);
	                  HEAP32[$num_submatches5$i$us$i>>2] = $add$i$us$i;
	                  $retval$0$i$us$i = $call$i$i60$us$i;
	                 }
	                } while(0);
	                $cmp71$us$i = ($retval$0$i$us$i|0)==(0|0);
	                $$status$0$us$i = $cmp71$us$i ? 12 : 0;
	                $curr_max$1127$us$i = $add32$us$i;$curr_min$1128$us$i = $add32$us$i;$node$1$us$i = $retval$0$i$us$i;$status$2$us$i = $$status$0$us$i;
	               }
	              }
	             } while(0);
	             $inc78$us$i = (($j$0144$us$i) + 1)|0;
	             $cmp13$us$i = ($inc78$us$i|0)<($inc$i135184$i$i|0);
	             $cmp15$us$i = ($status$2$us$i|0)==(0);
	             $or$cond$us$i = $cmp13$us$i & $cmp15$us$i;
	             if ($or$cond$us$i) {
	              $curr_max$0145$us$i = $curr_max$1127$us$i;$curr_min$0146$us$i = $curr_min$1128$us$i;$j$0144$us$i = $inc78$us$i;$node$0147$us$i = $node$1$us$i;
	             } else {
	              $curr_min$0$lcssa$i = $curr_min$1128$us$i;$node$0$lcssa$i = $node$1$us$i;$status$0$lcssa$i = $status$2$us$i;
	              break;
	             }
	            }
	           } else {
	            $curr_min$0$lcssa$i = 0;$node$0$lcssa$i = 0;$status$0$lcssa$i = 0;
	           }
	          } while(0);
	          $cmp80$not$i = ($status$0$lcssa$i|0)!=(0);
	          $tobool$not$i = $tobool$i316 ^ 1;
	          $brmerge$i = $cmp80$not$i | $tobool$not$i;
	          if ($brmerge$i) {
	           $items$0$load106117119$i = $items$0$load106110$i;$node$2$i = $node$0$lcssa$i;$status$5$i = $status$0$lcssa$i;
	          } else {
	           $101 = HEAP32[$ctx>>2]|0;
	           $102 = HEAP32[$position617>>2]|0;
	           $call$i$i63$i = (___tre_mem_alloc_impl($101,0,0,1,32)|0);
	           $tobool$i$i64$i = ($call$i$i63$i|0)==(0|0);
	           if ($tobool$i$i64$i) {
	            $items$0$load106117119$i = $items$0$load106110$i;$node$2$i = $node$0$lcssa$i;$status$5$i = 12;
	           } else {
	            $call1$i$i65$i = (___tre_mem_alloc_impl($101,0,0,1,20)|0);
	            $obj$i$i66$i = (($call$i$i63$i) + 4|0);
	            HEAP32[$obj$i$i66$i>>2] = $call1$i$i65$i;
	            $tobool3$i$i67$i = ($call1$i$i65$i|0)==(0|0);
	            if ($tobool3$i$i67$i) {
	             $items$0$load106117119$i = $items$0$load106110$i;$node$2$i = $node$0$lcssa$i;$status$5$i = 12;
	            } else {
	             HEAP32[$call$i$i63$i>>2] = 0;
	             $nullable$i$i70$i = (($call$i$i63$i) + 8|0);
	             HEAP32[$nullable$i$i70$i>>2] = -1;
	             $submatch_id$i$i71$i = (($call$i$i63$i) + 12|0);
	             HEAP32[$submatch_id$i$i71$i>>2] = -1;
	             HEAP32[$call1$i$i65$i>>2] = $curr_min$0$lcssa$i;
	             $code_max2$i$i336 = (($call1$i$i65$i) + 4|0);
	             HEAP32[$code_max2$i$i336>>2] = 1114111;
	             $position3$i$i337 = (($call1$i$i65$i) + 8|0);
	             HEAP32[$position3$i$i337>>2] = $102;
	             $cmp96$i = ($inc$i107$i|0)>(0);
	             if ($cmp96$i) {
	              $103 = HEAP32[$ctx>>2]|0;
	              $add100$i = $inc$i107$i << 2;
	              $mul101$i = (($add100$i) + 4)|0;
	              $call102$i = (___tre_mem_alloc_impl($103,0,0,0,$mul101$i)|0);
	              $neg_classes103$i = (($call1$i$i65$i) + 16|0);
	              HEAP32[$neg_classes103$i>>2] = $call102$i;
	              $cmp105$i = ($call102$i|0)==(0|0);
	              if ($cmp105$i) {
	               $items$0$load106117119$i = $items$0$load106110$i;$node$2$i = $node$0$lcssa$i;$status$5$i = 12;
	               break;
	              }
	              _memcpy(($call102$i|0),($neg_classes$i|0),($add100$i|0))|0;
	              $$pre216$i = HEAP32[$neg_classes103$i>>2]|0;
	              $arrayidx120$i = (($$pre216$i) + ($inc$i107$i<<2)|0);
	              HEAP32[$arrayidx120$i>>2] = 0;
	             } else {
	              $neg_classes122$i = (($call1$i$i65$i) + 16|0);
	              HEAP32[$neg_classes122$i>>2] = 0;
	             }
	             $cmp124$i = ($node$0$lcssa$i|0)==(0|0);
	             if ($cmp124$i) {
	              $items$0$load106117119$i = $items$0$load106110$i;$node$2$i = $call$i$i63$i;$status$5$i = 0;
	             } else {
	              $104 = HEAP32[$ctx>>2]|0;
	              $call$i$i74$i = (___tre_mem_alloc_impl($104,0,0,1,32)|0);
	              $tobool$i$i75$i = ($call$i$i74$i|0)==(0|0);
	              if ($tobool$i$i75$i) {
	               $retval$0$i90$i = 0;
	              } else {
	               $call1$i$i76$i = (___tre_mem_alloc_impl($104,0,0,1,8)|0);
	               $obj$i$i77$i = (($call$i$i74$i) + 4|0);
	               HEAP32[$obj$i$i77$i>>2] = $call1$i$i76$i;
	               $tobool3$i$i78$i = ($call1$i$i76$i|0)==(0|0);
	               if ($tobool3$i$i78$i) {
	                $retval$0$i90$i = 0;
	               } else {
	                HEAP32[$call$i$i74$i>>2] = 3;
	                $nullable$i$i81$i = (($call$i$i74$i) + 8|0);
	                HEAP32[$nullable$i$i81$i>>2] = -1;
	                $submatch_id$i$i82$i = (($call$i$i74$i) + 12|0);
	                HEAP32[$submatch_id$i$i82$i>>2] = -1;
	                HEAP32[$call1$i$i76$i>>2] = $node$0$lcssa$i;
	                $105 = HEAP32[$obj$i$i77$i>>2]|0;
	                $right3$i84$i = (($105) + 4|0);
	                HEAP32[$right3$i84$i>>2] = $call$i$i63$i;
	                $num_submatches$i85$i = (($node$0$lcssa$i) + 16|0);
	                $106 = HEAP32[$num_submatches$i85$i>>2]|0;
	                $num_submatches4$i86$i = (($call$i$i63$i) + 16|0);
	                $107 = HEAP32[$num_submatches4$i86$i>>2]|0;
	                $add$i87$i = (($107) + ($106))|0;
	                $num_submatches5$i88$i = (($call$i$i74$i) + 16|0);
	                HEAP32[$num_submatches5$i88$i>>2] = $add$i87$i;
	                $retval$0$i90$i = $call$i$i74$i;
	               }
	              }
	              $cmp130$i = ($retval$0$i90$i|0)==(0|0);
	              $$status$3$i = $cmp130$i ? 12 : 0;
	              $items$0$load106117119$i = $items$0$load106110$i;$node$2$i = $retval$0$i90$i;$status$5$i = $$status$3$i;
	             }
	            }
	           }
	          }
	         }
	         else if ((label|0) == 112) {
	          label = 0;
	          $arrayidx$i195$i$i = (($items$0$load106116$i) + ($inc$i135184$i$i<<2)|0);
	          HEAP32[$arrayidx$i195$i$i>>2] = 0;
	          $items$0$load106117$ph$i = $items$0$load106116$i;$re$4$i$ph$i = $re$3$i$i;$status$10$i$ph$i = 12;
	          label = 140;
	         }
	         else if ((label|0) == 141) {
	          label = 0;
	          HEAP32[$re>>2] = $re$3$i$i;
	          $items$0$load106117119$i = $items$0$load106111$i;$node$2$i = 0;$status$5$i = 12;
	         }
	        } while(0);
	        if ((label|0) == 140) {
	         label = 0;
	         HEAP32[$re>>2] = $re$4$i$ph$i;
	         $items$0$load106117119$i = $items$0$load106117$ph$i;$node$2$i = 0;$status$5$i = $status$10$i$ph$i;
	        }
	        _free($items$0$load106117119$i);
	        $108 = HEAP32[$position617>>2]|0;
	        $inc142$i = (($108) + 1)|0;
	        HEAP32[$position617>>2] = $inc142$i;
	        $cmp261 = ($status$5$i|0)==(0);
	        if ($cmp261) {
	         $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i;$status$0$be = 0;
	         break L8;
	        } else {
	         $retval$2 = $status$5$i;
	         label = 294;
	         break L6;
	        }
	        break;
	       }
	       case 92:  {
	        $109 = HEAP32[$cflags>>2]|0;
	        $and267 = $109 & 1;
	        $tobool268 = ($and267|0)==(0);
	        $add$ptr271 = (($55) + 1|0);
	        $110 = HEAP8[$add$ptr271>>0]|0;
	        do {
	         if ($tobool268) {
	          $cmp273 = ($110<<24>>24)==(40);
	          if ($cmp273) {
	           HEAP32[$re>>2] = $add$ptr271;
	           $58 = $add$ptr271;
	           label = 74;
	           break L10;
	          } else {
	           $add$ptr284 = (($55) + 1|0);
	           $111 = HEAP8[$add$ptr284>>0]|0;
	           $cmp286 = ($111<<24>>24)==(41);
	           if ($cmp286) {
	            label = 265;
	            break L10;
	           } else {
	            $add$ptr291$val = $111;
	            break;
	           }
	          }
	         } else {
	          $add$ptr291$val = $110;
	         }
	        } while(0);
	        $add$ptr291 = (($55) + 1|0);
	        $tobool$i339 = ($add$ptr291$val<<24>>24)==(0);
	        if ($tobool$i339) {
	         $retval$2 = 5;
	         label = 294;
	         break L6;
	        } else {
	         $expansion2$i = ((152848 + 4|0));$i$01$i = 0;
	        }
	        while(1) {
	         $c$i = (152848 + ($i$01$i<<3)|0);
	         $112 = HEAP8[$c$i>>0]|0;
	         $cmp$i340 = ($112<<24>>24)==($add$ptr291$val<<24>>24);
	         $inc$i = (($i$01$i) + 1)|0;
	         if ($cmp$i340) {
	          $expansion$lcssa$i = $expansion2$i;
	          break;
	         }
	         $expansion$i = ((152848 + ($inc$i<<3)|0) + 4|0);
	         $tobool1$i = ($inc$i|0)==(12);
	         if ($tobool1$i) {
	          $expansion$lcssa$i = $expansion$i;
	          break;
	         } else {
	          $expansion2$i = $expansion$i;$i$01$i = $inc$i;
	         }
	        }
	        $113 = HEAP32[$expansion$lcssa$i>>2]|0;
	        $tobool293 = ($113|0)==(0|0);
	        if (!($tobool293)) {
	         dest=$subctx+0|0; src=$ctx+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
	         HEAP32[$re295>>2] = $113;
	         HEAP32[$nofirstsub296>>2] = 1;
	         $call297 = (_tre_parse($subctx)|0);
	         $cmp298 = ($call297|0)==(0);
	         if (!($cmp298)) {
	          $retval$2 = $call297;
	          label = 294;
	          break L6;
	         }
	         $114 = HEAP32[$re>>2]|0;
	         $add$ptr303 = (($114) + 2|0);
	         HEAP32[$re>>2] = $add$ptr303;
	         $115 = HEAP32[$position>>2]|0;
	         HEAP32[$position617>>2] = $115;
	         $116 = HEAP32[$result305>>2]|0;
	         $depth$0$be = $depth$0740;$node$2$i661$be = $116;$status$0$be = 0;
	         break L8;
	        }
	        if ($tobool$i339) {
	         $retval$2 = 5;
	         label = 294;
	         break L6;
	        }
	        HEAP32[$re>>2] = $add$ptr291;
	        $117 = HEAP8[$add$ptr291>>0]|0;
	        $conv314 = $117 << 24 >> 24;
	        L177: do {
	         switch ($conv314|0) {
	         case 98:  {
	          $118 = HEAP32[$ctx>>2]|0;
	          $call$i$i348 = (___tre_mem_alloc_impl($118,0,0,1,32)|0);
	          $tobool$i$i349 = ($call$i$i348|0)==(0|0);
	          if ($tobool$i$i349) {
	           $retval$0$i361 = 0;
	          } else {
	           $call1$i$i350 = (___tre_mem_alloc_impl($118,0,0,1,20)|0);
	           $obj$i$i351 = (($call$i$i348) + 4|0);
	           HEAP32[$obj$i$i351>>2] = $call1$i$i350;
	           $tobool3$i$i352 = ($call1$i$i350|0)==(0|0);
	           if ($tobool3$i$i352) {
	            $retval$0$i361 = 0;
	           } else {
	            HEAP32[$call$i$i348>>2] = 0;
	            $nullable$i$i355 = (($call$i$i348) + 8|0);
	            HEAP32[$nullable$i$i355>>2] = -1;
	            $submatch_id$i$i356 = (($call$i$i348) + 12|0);
	            HEAP32[$submatch_id$i$i356>>2] = -1;
	            HEAP32[$call1$i$i350>>2] = -2;
	            $code_max2$i358 = (($call1$i$i350) + 4|0);
	            HEAP32[$code_max2$i358>>2] = 64;
	            $position3$i359 = (($call1$i$i350) + 8|0);
	            HEAP32[$position3$i359>>2] = -1;
	            $retval$0$i361 = $call$i$i348;
	           }
	          }
	          $119 = HEAP32[$re>>2]|0;
	          $incdec$ptr319 = (($119) + 1|0);
	          HEAP32[$re>>2] = $incdec$ptr319;
	          $node$2$i662 = $retval$0$i361;
	          break;
	         }
	         case 66:  {
	          $120 = HEAP32[$ctx>>2]|0;
	          $call$i$i363 = (___tre_mem_alloc_impl($120,0,0,1,32)|0);
	          $tobool$i$i364 = ($call$i$i363|0)==(0|0);
	          if ($tobool$i$i364) {
	           $retval$0$i376 = 0;
	          } else {
	           $call1$i$i365 = (___tre_mem_alloc_impl($120,0,0,1,20)|0);
	           $obj$i$i366 = (($call$i$i363) + 4|0);
	           HEAP32[$obj$i$i366>>2] = $call1$i$i365;
	           $tobool3$i$i367 = ($call1$i$i365|0)==(0|0);
	           if ($tobool3$i$i367) {
	            $retval$0$i376 = 0;
	           } else {
	            HEAP32[$call$i$i363>>2] = 0;
	            $nullable$i$i370 = (($call$i$i363) + 8|0);
	            HEAP32[$nullable$i$i370>>2] = -1;
	            $submatch_id$i$i371 = (($call$i$i363) + 12|0);
	            HEAP32[$submatch_id$i$i371>>2] = -1;
	            HEAP32[$call1$i$i365>>2] = -2;
	            $code_max2$i373 = (($call1$i$i365) + 4|0);
	            HEAP32[$code_max2$i373>>2] = 128;
	            $position3$i374 = (($call1$i$i365) + 8|0);
	            HEAP32[$position3$i374>>2] = -1;
	            $retval$0$i376 = $call$i$i363;
	           }
	          }
	          $121 = HEAP32[$re>>2]|0;
	          $incdec$ptr324 = (($121) + 1|0);
	          HEAP32[$re>>2] = $incdec$ptr324;
	          $node$2$i662 = $retval$0$i376;
	          break;
	         }
	         case 60:  {
	          $122 = HEAP32[$ctx>>2]|0;
	          $call$i$i378 = (___tre_mem_alloc_impl($122,0,0,1,32)|0);
	          $tobool$i$i379 = ($call$i$i378|0)==(0|0);
	          if ($tobool$i$i379) {
	           $retval$0$i391 = 0;
	          } else {
	           $call1$i$i380 = (___tre_mem_alloc_impl($122,0,0,1,20)|0);
	           $obj$i$i381 = (($call$i$i378) + 4|0);
	           HEAP32[$obj$i$i381>>2] = $call1$i$i380;
	           $tobool3$i$i382 = ($call1$i$i380|0)==(0|0);
	           if ($tobool3$i$i382) {
	            $retval$0$i391 = 0;
	           } else {
	            HEAP32[$call$i$i378>>2] = 0;
	            $nullable$i$i385 = (($call$i$i378) + 8|0);
	            HEAP32[$nullable$i$i385>>2] = -1;
	            $submatch_id$i$i386 = (($call$i$i378) + 12|0);
	            HEAP32[$submatch_id$i$i386>>2] = -1;
	            HEAP32[$call1$i$i380>>2] = -2;
	            $code_max2$i388 = (($call1$i$i380) + 4|0);
	            HEAP32[$code_max2$i388>>2] = 16;
	            $position3$i389 = (($call1$i$i380) + 8|0);
	            HEAP32[$position3$i389>>2] = -1;
	            $retval$0$i391 = $call$i$i378;
	           }
	          }
	          $123 = HEAP32[$re>>2]|0;
	          $incdec$ptr329 = (($123) + 1|0);
	          HEAP32[$re>>2] = $incdec$ptr329;
	          $node$2$i662 = $retval$0$i391;
	          break;
	         }
	         case 62:  {
	          $124 = HEAP32[$ctx>>2]|0;
	          $call$i$i393 = (___tre_mem_alloc_impl($124,0,0,1,32)|0);
	          $tobool$i$i394 = ($call$i$i393|0)==(0|0);
	          if ($tobool$i$i394) {
	           $retval$0$i406 = 0;
	          } else {
	           $call1$i$i395 = (___tre_mem_alloc_impl($124,0,0,1,20)|0);
	           $obj$i$i396 = (($call$i$i393) + 4|0);
	           HEAP32[$obj$i$i396>>2] = $call1$i$i395;
	           $tobool3$i$i397 = ($call1$i$i395|0)==(0|0);
	           if ($tobool3$i$i397) {
	            $retval$0$i406 = 0;
	           } else {
	            HEAP32[$call$i$i393>>2] = 0;
	            $nullable$i$i400 = (($call$i$i393) + 8|0);
	            HEAP32[$nullable$i$i400>>2] = -1;
	            $submatch_id$i$i401 = (($call$i$i393) + 12|0);
	            HEAP32[$submatch_id$i$i401>>2] = -1;
	            HEAP32[$call1$i$i395>>2] = -2;
	            $code_max2$i403 = (($call1$i$i395) + 4|0);
	            HEAP32[$code_max2$i403>>2] = 32;
	            $position3$i404 = (($call1$i$i395) + 8|0);
	            HEAP32[$position3$i404>>2] = -1;
	            $retval$0$i406 = $call$i$i393;
	           }
	          }
	          $125 = HEAP32[$re>>2]|0;
	          $incdec$ptr334 = (($125) + 1|0);
	          HEAP32[$re>>2] = $incdec$ptr334;
	          $node$2$i662 = $retval$0$i406;
	          break;
	         }
	         case 120:  {
	          $incdec$ptr337 = (($55) + 2|0);
	          HEAP32[$re>>2] = $incdec$ptr337;
	          $126 = HEAP8[$incdec$ptr337>>0]|0;
	          $cmp341 = ($126<<24>>24)==(123);
	          if ($cmp341) {
	           $incdec$ptr385 = (($55) + 3|0);
	           HEAP32[$re>>2] = $incdec$ptr385;
	           $$in = $incdec$ptr385;$i$0690 = 0;
	           while(1) {
	            $135 = HEAP8[$$in>>0]|0;
	            if ((($135<<24>>24) == 0) | (($135<<24>>24) == 125)) {
	             $i$0$lcssa = $i$0690;$storemerge211$lcssa = $$in;
	             break;
	            }
	            $conv388 = $135 << 24 >> 24;
	            $call405 = (_iswxdigit($conv388)|0);
	            $tobool406 = ($call405|0)==(0);
	            if ($tobool406) {
	             $retval$2 = 9;
	             label = 294;
	             break L6;
	            }
	            $136 = HEAP32[$re>>2]|0;
	            $137 = HEAP8[$136>>0]|0;
	            $arrayidx410 = (($tmp380) + ($i$0690)|0);
	            HEAP8[$arrayidx410>>0] = $137;
	            $inc411 = (($i$0690) + 1)|0;
	            $incdec$ptr413 = (($136) + 1|0);
	            HEAP32[$re>>2] = $incdec$ptr413;
	            $notrhs = ($inc411>>>0)>(31);
	            if ($notrhs) {
	             $i$0$lcssa = $inc411;$storemerge211$lcssa = $incdec$ptr413;
	             break;
	            } else {
	             $$in = $incdec$ptr413;$i$0690 = $inc411;
	            }
	           }
	           $incdec$ptr416 = (($storemerge211$lcssa) + 1|0);
	           HEAP32[$re>>2] = $incdec$ptr416;
	           $arrayidx417 = (($tmp380) + ($i$0$lcssa)|0);
	           HEAP8[$arrayidx417>>0] = 0;
	           $call419 = (_strtol($tmp380,0,16)|0);
	           $138 = HEAP32[$ctx>>2]|0;
	           $139 = HEAP32[$position617>>2]|0;
	           $call$i$i423 = (___tre_mem_alloc_impl($138,0,0,1,32)|0);
	           $tobool$i$i424 = ($call$i$i423|0)==(0|0);
	           if ($tobool$i$i424) {
	            $retval$0$i436 = 0;
	           } else {
	            $call1$i$i425 = (___tre_mem_alloc_impl($138,0,0,1,20)|0);
	            $obj$i$i426 = (($call$i$i423) + 4|0);
	            HEAP32[$obj$i$i426>>2] = $call1$i$i425;
	            $tobool3$i$i427 = ($call1$i$i425|0)==(0|0);
	            if ($tobool3$i$i427) {
	             $retval$0$i436 = 0;
	            } else {
	             HEAP32[$call$i$i423>>2] = 0;
	             $nullable$i$i430 = (($call$i$i423) + 8|0);
	             HEAP32[$nullable$i$i430>>2] = -1;
	             $submatch_id$i$i431 = (($call$i$i423) + 12|0);
	             HEAP32[$submatch_id$i$i431>>2] = -1;
	             HEAP32[$call1$i$i425>>2] = $call419;
	             $code_max2$i433 = (($call1$i$i425) + 4|0);
	             HEAP32[$code_max2$i433>>2] = $call419;
	             $position3$i434 = (($call1$i$i425) + 8|0);
	             HEAP32[$position3$i434>>2] = $139;
	             $retval$0$i436 = $call$i$i423;
	            }
	           }
	           $140 = HEAP32[$position617>>2]|0;
	           $inc424 = (($140) + 1)|0;
	           HEAP32[$position617>>2] = $inc424;
	           $node$2$i662 = $retval$0$i436;
	           break L177;
	          } else {
	           ;HEAP8[$tmp+0>>0]=0|0;HEAP8[$tmp+1>>0]=0|0;HEAP8[$tmp+2>>0]=0|0;
	           $conv347 = $126 << 24 >> 24;
	           $call348 = (_iswxdigit($conv347)|0);
	           $tobool349 = ($call348|0)==(0);
	           $$pre = HEAP32[$re>>2]|0;
	           if ($tobool349) {
	            $129 = $$pre;
	           } else {
	            $127 = HEAP8[$$pre>>0]|0;
	            HEAP8[$tmp>>0] = $127;
	            $incdec$ptr355 = (($$pre) + 1|0);
	            HEAP32[$re>>2] = $incdec$ptr355;
	            $129 = $incdec$ptr355;
	           }
	           $128 = HEAP8[$129>>0]|0;
	           $conv359 = $128 << 24 >> 24;
	           $call360 = (_iswxdigit($conv359)|0);
	           $tobool361 = ($call360|0)==(0);
	           if (!($tobool361)) {
	            $130 = HEAP32[$re>>2]|0;
	            $131 = HEAP8[$130>>0]|0;
	            HEAP8[$arrayidx365>>0] = $131;
	            $incdec$ptr367 = (($130) + 1|0);
	            HEAP32[$re>>2] = $incdec$ptr367;
	           }
	           $call369 = (_strtol($tmp,0,16)|0);
	           $132 = HEAP32[$ctx>>2]|0;
	           $133 = HEAP32[$position617>>2]|0;
	           $call$i$i408 = (___tre_mem_alloc_impl($132,0,0,1,32)|0);
	           $tobool$i$i409 = ($call$i$i408|0)==(0|0);
	           if ($tobool$i$i409) {
	            $retval$0$i421 = 0;
	           } else {
	            $call1$i$i410 = (___tre_mem_alloc_impl($132,0,0,1,20)|0);
	            $obj$i$i411 = (($call$i$i408) + 4|0);
	            HEAP32[$obj$i$i411>>2] = $call1$i$i410;
	            $tobool3$i$i412 = ($call1$i$i410|0)==(0|0);
	            if ($tobool3$i$i412) {
	             $retval$0$i421 = 0;
	            } else {
	             HEAP32[$call$i$i408>>2] = 0;
	             $nullable$i$i415 = (($call$i$i408) + 8|0);
	             HEAP32[$nullable$i$i415>>2] = -1;
	             $submatch_id$i$i416 = (($call$i$i408) + 12|0);
	             HEAP32[$submatch_id$i$i416>>2] = -1;
	             HEAP32[$call1$i$i410>>2] = $call369;
	             $code_max2$i418 = (($call1$i$i410) + 4|0);
	             HEAP32[$code_max2$i418>>2] = $call369;
	             $position3$i419 = (($call1$i$i410) + 8|0);
	             HEAP32[$position3$i419>>2] = $133;
	             $retval$0$i421 = $call$i$i408;
	            }
	           }
	           $134 = HEAP32[$position617>>2]|0;
	           $inc374 = (($134) + 1)|0;
	           HEAP32[$position617>>2] = $inc374;
	           $node$2$i662 = $retval$0$i421;
	           break L177;
	          }
	          break;
	         }
	         default: {
	          $call430 = (_iswdigit($conv314)|0);
	          $tobool431 = ($call430|0)==(0);
	          if (!($tobool431)) {
	           $141 = HEAP32[$re>>2]|0;
	           $142 = HEAP8[$141>>0]|0;
	           $conv436 = $142 << 24 >> 24;
	           $sub = (($conv436) + -48)|0;
	           $143 = HEAP32[$ctx>>2]|0;
	           $144 = HEAP32[$position617>>2]|0;
	           $call$i$i438 = (___tre_mem_alloc_impl($143,0,0,1,32)|0);
	           $tobool$i$i439 = ($call$i$i438|0)==(0|0);
	           if ($tobool$i$i439) {
	            $retval$2 = 12;
	            label = 294;
	            break L6;
	           }
	           $call1$i$i440 = (___tre_mem_alloc_impl($143,0,0,1,20)|0);
	           $obj$i$i441 = (($call$i$i438) + 4|0);
	           HEAP32[$obj$i$i441>>2] = $call1$i$i440;
	           $tobool3$i$i442 = ($call1$i$i440|0)==(0|0);
	           if ($tobool3$i$i442) {
	            $retval$2 = 12;
	            label = 294;
	            break L6;
	           }
	           HEAP32[$call$i$i438>>2] = 0;
	           $nullable$i$i445 = (($call$i$i438) + 8|0);
	           HEAP32[$nullable$i$i445>>2] = -1;
	           $submatch_id$i$i446 = (($call$i$i438) + 12|0);
	           HEAP32[$submatch_id$i$i446>>2] = -1;
	           HEAP32[$call1$i$i440>>2] = -4;
	           $code_max2$i448 = (($call1$i$i440) + 4|0);
	           HEAP32[$code_max2$i448>>2] = $sub;
	           $position3$i449 = (($call1$i$i440) + 8|0);
	           HEAP32[$position3$i449>>2] = $144;
	           $145 = HEAP32[$position617>>2]|0;
	           $inc445 = (($145) + 1)|0;
	           HEAP32[$position617>>2] = $inc445;
	           $146 = HEAP32[$max_backref>>2]|0;
	           $cmp446 = ($sub|0)<($146|0);
	           $$sub = $cmp446 ? $146 : $sub;
	           HEAP32[$max_backref>>2] = $$sub;
	           $147 = HEAP32[$re>>2]|0;
	           $incdec$ptr451 = (($147) + 1|0);
	           HEAP32[$re>>2] = $incdec$ptr451;
	           $depth$0$be = $depth$0740;$node$2$i661$be = $call$i$i438;$status$0$be = 0;
	           break L8;
	          }
	          $148 = HEAP32[$ctx>>2]|0;
	          $149 = HEAP32[$re>>2]|0;
	          $150 = HEAP8[$149>>0]|0;
	          $conv455 = $150 << 24 >> 24;
	          $151 = HEAP32[$position617>>2]|0;
	          $call$i$i453 = (___tre_mem_alloc_impl($148,0,0,1,32)|0);
	          $tobool$i$i454 = ($call$i$i453|0)==(0|0);
	          if ($tobool$i$i454) {
	           $retval$0$i466 = 0;
	          } else {
	           $call1$i$i455 = (___tre_mem_alloc_impl($148,0,0,1,20)|0);
	           $obj$i$i456 = (($call$i$i453) + 4|0);
	           HEAP32[$obj$i$i456>>2] = $call1$i$i455;
	           $tobool3$i$i457 = ($call1$i$i455|0)==(0|0);
	           if ($tobool3$i$i457) {
	            $retval$0$i466 = 0;
	           } else {
	            HEAP32[$call$i$i453>>2] = 0;
	            $nullable$i$i460 = (($call$i$i453) + 8|0);
	            HEAP32[$nullable$i$i460>>2] = -1;
	            $submatch_id$i$i461 = (($call$i$i453) + 12|0);
	            HEAP32[$submatch_id$i$i461>>2] = -1;
	            HEAP32[$call1$i$i455>>2] = $conv455;
	            $code_max2$i463 = (($call1$i$i455) + 4|0);
	            HEAP32[$code_max2$i463>>2] = $conv455;
	            $position3$i464 = (($call1$i$i455) + 8|0);
	            HEAP32[$position3$i464>>2] = $151;
	            $retval$0$i466 = $call$i$i453;
	           }
	          }
	          $152 = HEAP32[$position617>>2]|0;
	          $inc461 = (($152) + 1)|0;
	          HEAP32[$position617>>2] = $inc461;
	          $153 = HEAP32[$re>>2]|0;
	          $incdec$ptr463 = (($153) + 1|0);
	          HEAP32[$re>>2] = $incdec$ptr463;
	          $node$2$i662 = $retval$0$i466;
	         }
	         }
	        } while(0);
	        $cmp466 = ($node$2$i662|0)==(0|0);
	        if ($cmp466) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        } else {
	         $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i662;$status$0$be = 0;
	         break L8;
	        }
	        break;
	       }
	       case 46:  {
	        $154 = HEAP32[$cflags>>2]|0;
	        $and472 = $154 & 4;
	        $tobool473 = ($and472|0)==(0);
	        $155 = HEAP32[$ctx>>2]|0;
	        $156 = HEAP32[$position617>>2]|0;
	        $call$i$i516 = (___tre_mem_alloc_impl($155,0,0,1,32)|0);
	        $tobool$i$i517 = ($call$i$i516|0)==(0|0);
	        if ($tobool473) {
	         if ($tobool$i$i517) {
	          $retval$2 = 12;
	          label = 294;
	          break L6;
	         }
	         $call1$i$i518 = (___tre_mem_alloc_impl($155,0,0,1,20)|0);
	         $obj$i$i519 = (($call$i$i516) + 4|0);
	         HEAP32[$obj$i$i519>>2] = $call1$i$i518;
	         $tobool3$i$i520 = ($call1$i$i518|0)==(0|0);
	         if ($tobool3$i$i520) {
	          $retval$2 = 12;
	          label = 294;
	          break L6;
	         }
	         HEAP32[$call$i$i516>>2] = 0;
	         $nullable$i$i523 = (($call$i$i516) + 8|0);
	         HEAP32[$nullable$i$i523>>2] = -1;
	         $submatch_id$i$i524 = (($call$i$i516) + 12|0);
	         HEAP32[$submatch_id$i$i524>>2] = -1;
	         HEAP32[$call1$i$i518>>2] = 0;
	         $code_max2$i526 = (($call1$i$i518) + 4|0);
	         HEAP32[$code_max2$i526>>2] = 1114111;
	         $position3$i527 = (($call1$i$i518) + 8|0);
	         HEAP32[$position3$i527>>2] = $156;
	         $164 = HEAP32[$position617>>2]|0;
	         $inc504 = (($164) + 1)|0;
	         $node$2$i663 = $call$i$i516;$storemerge = $inc504;
	        } else {
	         if ($tobool$i$i517) {
	          $retval$2 = 12;
	          label = 294;
	          break L6;
	         }
	         $call1$i$i470 = (___tre_mem_alloc_impl($155,0,0,1,20)|0);
	         $obj$i$i471 = (($call$i$i516) + 4|0);
	         HEAP32[$obj$i$i471>>2] = $call1$i$i470;
	         $tobool3$i$i472 = ($call1$i$i470|0)==(0|0);
	         if ($tobool3$i$i472) {
	          $retval$2 = 12;
	          label = 294;
	          break L6;
	         }
	         HEAP32[$call$i$i516>>2] = 0;
	         $nullable$i$i475 = (($call$i$i516) + 8|0);
	         HEAP32[$nullable$i$i475>>2] = -1;
	         $submatch_id$i$i476 = (($call$i$i516) + 12|0);
	         HEAP32[$submatch_id$i$i476>>2] = -1;
	         HEAP32[$call1$i$i470>>2] = 0;
	         $code_max2$i478 = (($call1$i$i470) + 4|0);
	         HEAP32[$code_max2$i478>>2] = 9;
	         $position3$i479 = (($call1$i$i470) + 8|0);
	         HEAP32[$position3$i479>>2] = $156;
	         $157 = HEAP32[$ctx>>2]|0;
	         $158 = HEAP32[$position617>>2]|0;
	         $add = (($158) + 1)|0;
	         $call$i$i483 = (___tre_mem_alloc_impl($157,0,0,1,32)|0);
	         $tobool$i$i484 = ($call$i$i483|0)==(0|0);
	         if ($tobool$i$i484) {
	          $retval$2 = 12;
	          label = 294;
	          break L6;
	         }
	         $call1$i$i485 = (___tre_mem_alloc_impl($157,0,0,1,20)|0);
	         $obj$i$i486 = (($call$i$i483) + 4|0);
	         HEAP32[$obj$i$i486>>2] = $call1$i$i485;
	         $tobool3$i$i487 = ($call1$i$i485|0)==(0|0);
	         if ($tobool3$i$i487) {
	          $retval$2 = 12;
	          label = 294;
	          break L6;
	         }
	         HEAP32[$call$i$i483>>2] = 0;
	         $nullable$i$i490 = (($call$i$i483) + 8|0);
	         HEAP32[$nullable$i$i490>>2] = -1;
	         $submatch_id$i$i491 = (($call$i$i483) + 12|0);
	         HEAP32[$submatch_id$i$i491>>2] = -1;
	         HEAP32[$call1$i$i485>>2] = 11;
	         $code_max2$i493 = (($call1$i$i485) + 4|0);
	         HEAP32[$code_max2$i493>>2] = 1114111;
	         $position3$i494 = (($call1$i$i485) + 8|0);
	         HEAP32[$position3$i494>>2] = $add;
	         $159 = HEAP32[$ctx>>2]|0;
	         $call$i$i498 = (___tre_mem_alloc_impl($159,0,0,1,32)|0);
	         $tobool$i$i499 = ($call$i$i498|0)==(0|0);
	         if ($tobool$i$i499) {
	          $retval$2 = 12;
	          label = 294;
	          break L6;
	         }
	         $call1$i$i500 = (___tre_mem_alloc_impl($159,0,0,1,8)|0);
	         $obj$i$i501 = (($call$i$i498) + 4|0);
	         HEAP32[$obj$i$i501>>2] = $call1$i$i500;
	         $tobool3$i$i502 = ($call1$i$i500|0)==(0|0);
	         if ($tobool3$i$i502) {
	          $retval$2 = 12;
	          label = 294;
	          break L6;
	         }
	         HEAP32[$call$i$i498>>2] = 3;
	         $nullable$i$i505 = (($call$i$i498) + 8|0);
	         HEAP32[$nullable$i$i505>>2] = -1;
	         $submatch_id$i$i506 = (($call$i$i498) + 12|0);
	         HEAP32[$submatch_id$i$i506>>2] = -1;
	         HEAP32[$call1$i$i500>>2] = $call$i$i516;
	         $160 = HEAP32[$obj$i$i501>>2]|0;
	         $right3$i508 = (($160) + 4|0);
	         HEAP32[$right3$i508>>2] = $call$i$i483;
	         $num_submatches$i509 = (($call$i$i516) + 16|0);
	         $161 = HEAP32[$num_submatches$i509>>2]|0;
	         $num_submatches4$i510 = (($call$i$i483) + 16|0);
	         $162 = HEAP32[$num_submatches4$i510>>2]|0;
	         $add$i511 = (($162) + ($161))|0;
	         $num_submatches5$i512 = (($call$i$i498) + 16|0);
	         HEAP32[$num_submatches5$i512>>2] = $add$i511;
	         $163 = HEAP32[$position617>>2]|0;
	         $add495 = (($163) + 2)|0;
	         $node$2$i663 = $call$i$i498;$storemerge = $add495;
	        }
	        HEAP32[$position617>>2] = $storemerge;
	        $165 = HEAP32[$re>>2]|0;
	        $incdec$ptr507 = (($165) + 1|0);
	        HEAP32[$re>>2] = $incdec$ptr507;
	        $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i663;$status$0$be = 0;
	        break L8;
	        break;
	       }
	       case 94:  {
	        $166 = HEAP32[$cflags>>2]|0;
	        $and510 = $166 & 1;
	        $tobool511 = ($and510|0)==(0);
	        if ($tobool511) {
	         $167 = HEAP32[$re_start>>2]|0;
	         $cmp515 = ($55|0)==($167|0);
	         if (!($cmp515)) {
	          break L10;
	         }
	         $call$i531 = (_tre_stack_push($0,(5))|0);
	         $cmp523 = ($call$i531|0)==(0);
	         if (!($cmp523)) {
	          $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i531;
	          label = 6;
	          break L6;
	         }
	        }
	        $168 = HEAP32[$ctx>>2]|0;
	        $call$i$i532 = (___tre_mem_alloc_impl($168,0,0,1,32)|0);
	        $tobool$i$i533 = ($call$i$i532|0)==(0|0);
	        if ($tobool$i$i533) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        $call1$i$i534 = (___tre_mem_alloc_impl($168,0,0,1,20)|0);
	        $obj$i$i535 = (($call$i$i532) + 4|0);
	        HEAP32[$obj$i$i535>>2] = $call1$i$i534;
	        $tobool3$i$i536 = ($call1$i$i534|0)==(0|0);
	        if ($tobool3$i$i536) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        HEAP32[$call$i$i532>>2] = 0;
	        $nullable$i$i539 = (($call$i$i532) + 8|0);
	        HEAP32[$nullable$i$i539>>2] = -1;
	        $submatch_id$i$i540 = (($call$i$i532) + 12|0);
	        HEAP32[$submatch_id$i$i540>>2] = -1;
	        HEAP32[$call1$i$i534>>2] = -2;
	        $code_max2$i542 = (($call1$i$i534) + 4|0);
	        HEAP32[$code_max2$i542>>2] = 1;
	        $position3$i543 = (($call1$i$i534) + 8|0);
	        HEAP32[$position3$i543>>2] = -1;
	        $169 = HEAP32[$re>>2]|0;
	        $incdec$ptr535 = (($169) + 1|0);
	        HEAP32[$re>>2] = $incdec$ptr535;
	        $depth$0$be = $depth$0740;$node$2$i661$be = $call$i$i532;$status$0$be = 0;
	        break L8;
	        break;
	       }
	       case 36:  {
	        $170 = HEAP32[$cflags>>2]|0;
	        $and540 = $170 & 1;
	        $tobool541 = ($and540|0)==(0);
	        if ($tobool541) {
	         $add$ptr544 = (($55) + 1|0);
	         $171 = HEAP8[$add$ptr544>>0]|0;
	         $tobool545 = ($171<<24>>24)==(0);
	         if (!($tobool545)) {
	          break L10;
	         }
	        }
	        $172 = HEAP32[$ctx>>2]|0;
	        $call$i$i547 = (___tre_mem_alloc_impl($172,0,0,1,32)|0);
	        $tobool$i$i548 = ($call$i$i547|0)==(0|0);
	        if ($tobool$i$i548) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        $call1$i$i549 = (___tre_mem_alloc_impl($172,0,0,1,20)|0);
	        $obj$i$i550 = (($call$i$i547) + 4|0);
	        HEAP32[$obj$i$i550>>2] = $call1$i$i549;
	        $tobool3$i$i551 = ($call1$i$i549|0)==(0|0);
	        if ($tobool3$i$i551) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        HEAP32[$call$i$i547>>2] = 0;
	        $nullable$i$i554 = (($call$i$i547) + 8|0);
	        HEAP32[$nullable$i$i554>>2] = -1;
	        $submatch_id$i$i555 = (($call$i$i547) + 12|0);
	        HEAP32[$submatch_id$i$i555>>2] = -1;
	        HEAP32[$call1$i$i549>>2] = -2;
	        $code_max2$i557 = (($call1$i$i549) + 4|0);
	        HEAP32[$code_max2$i557>>2] = 2;
	        $position3$i558 = (($call1$i$i549) + 8|0);
	        HEAP32[$position3$i558>>2] = -1;
	        $173 = HEAP32[$re>>2]|0;
	        $incdec$ptr554 = (($173) + 1|0);
	        HEAP32[$re>>2] = $incdec$ptr554;
	        $depth$0$be = $depth$0740;$node$2$i661$be = $call$i$i547;$status$0$be = 0;
	        break L8;
	        break;
	       }
	       case 41:  {
	        $tobool558 = ($depth$0740|0)==(0);
	        if (!($tobool558)) {
	         label = 264;
	        }
	        break;
	       }
	       case 63: case 43: case 123: case 124: case 42:  {
	        label = 264;
	        break;
	       }
	       case 0:  {
	        label = 265;
	        break;
	       }
	       default: {
	       }
	       }
	      } while(0);
	      if ((label|0) == 74) {
	       label = 0;
	       $inc234 = (($depth$0740) + 1)|0;
	       $incdec$ptr236 = (($58) + 1|0);
	       HEAP32[$re>>2] = $incdec$ptr236;
	       $59 = HEAP32[$submatch_id237>>2]|0;
	       $value$c$i306 = $59;
	       $call$i307 = (_tre_stack_push($0,$value$c$i306)|0);
	       $cmp239 = ($call$i307|0)==(0);
	       if (!($cmp239)) {
	        $depth$0$be$ph = $inc234;$status$0$be$ph = $call$i307;
	        label = 6;
	        break L6;
	       }
	       $call$i308 = (_tre_stack_push($0,(2))|0);
	       $cmp244 = ($call$i308|0)==(0);
	       if (!($cmp244)) {
	        $depth$0$be$ph = $inc234;$status$0$be$ph = $call$i308;
	        label = 6;
	        break L6;
	       }
	       $call$i309 = (_tre_stack_push($0,0)|0);
	       $cmp249 = ($call$i309|0)==(0);
	       if (!($cmp249)) {
	        $depth$0$be$ph = $inc234;$status$0$be$ph = $call$i309;
	        label = 6;
	        break L6;
	       }
	       $60 = HEAP32[$submatch_id237>>2]|0;
	       $inc254 = (($60) + 1)|0;
	       HEAP32[$submatch_id237>>2] = $inc254;
	       $depth$0$be = $inc234;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	       break L8;
	      }
	      else if ((label|0) == 264) {
	       label = 0;
	       $174 = HEAP32[$cflags>>2]|0;
	       $and563 = $174 & 1;
	       $tobool564 = ($and563|0)==(0);
	       if (!($tobool564)) {
	        label = 265;
	       }
	      }
	      if ((label|0) == 265) {
	       label = 0;
	       $175 = HEAP32[$ctx>>2]|0;
	       $call$i$i562 = (___tre_mem_alloc_impl($175,0,0,1,32)|0);
	       $tobool$i$i563 = ($call$i$i562|0)==(0|0);
	       if ($tobool$i$i563) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       $call1$i$i564 = (___tre_mem_alloc_impl($175,0,0,1,20)|0);
	       $obj$i$i565 = (($call$i$i562) + 4|0);
	       HEAP32[$obj$i$i565>>2] = $call1$i$i564;
	       $tobool3$i$i566 = ($call1$i$i564|0)==(0|0);
	       if ($tobool3$i$i566) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       HEAP32[$call$i$i562>>2] = 0;
	       $nullable$i$i569 = (($call$i$i562) + 8|0);
	       HEAP32[$nullable$i$i569>>2] = -1;
	       $submatch_id$i$i570 = (($call$i$i562) + 12|0);
	       HEAP32[$submatch_id$i$i570>>2] = -1;
	       HEAP32[$call1$i$i564>>2] = -1;
	       $code_max2$i572 = (($call1$i$i564) + 4|0);
	       HEAP32[$code_max2$i572>>2] = -1;
	       $position3$i573 = (($call1$i$i564) + 8|0);
	       HEAP32[$position3$i573>>2] = -1;
	       $depth$0$be = $depth$0740;$node$2$i661$be = $call$i$i562;$status$0$be = 0;
	       break L8;
	      }
	      $call575 = (_mbtowc($wc,$55,-1)|0);
	      $cmp576 = ($call575|0)<(0);
	      if ($cmp576) {
	       HEAP32[$wc>>2] = -1;
	       $clen$0 = 1;
	      } else {
	       $clen$0 = $call575;
	      }
	      $176 = HEAP32[$cflags>>2]|0;
	      $and581 = $176 & 2;
	      $tobool582 = ($and581|0)==(0);
	      do {
	       if ($tobool582) {
	        label = 280;
	       } else {
	        $177 = HEAP32[$wc>>2]|0;
	        $call584 = (_iswupper($177)|0);
	        $tobool585 = ($call584|0)==(0);
	        if ($tobool585) {
	         $178 = HEAP32[$wc>>2]|0;
	         $call587 = (_iswlower($178)|0);
	         $tobool588 = ($call587|0)==(0);
	         if ($tobool588) {
	          label = 280;
	          break;
	         }
	        }
	        $179 = HEAP32[$ctx>>2]|0;
	        $180 = HEAP32[$wc>>2]|0;
	        $call595 = (_towupper($180)|0);
	        $181 = HEAP32[$wc>>2]|0;
	        $call596 = (_towupper($181)|0);
	        $182 = HEAP32[$position617>>2]|0;
	        $call$i$i577 = (___tre_mem_alloc_impl($179,0,0,1,32)|0);
	        $tobool$i$i578 = ($call$i$i577|0)==(0|0);
	        if ($tobool$i$i578) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        $call1$i$i579 = (___tre_mem_alloc_impl($179,0,0,1,20)|0);
	        $obj$i$i580 = (($call$i$i577) + 4|0);
	        HEAP32[$obj$i$i580>>2] = $call1$i$i579;
	        $tobool3$i$i581 = ($call1$i$i579|0)==(0|0);
	        if ($tobool3$i$i581) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        HEAP32[$call$i$i577>>2] = 0;
	        $nullable$i$i584 = (($call$i$i577) + 8|0);
	        HEAP32[$nullable$i$i584>>2] = -1;
	        $submatch_id$i$i585 = (($call$i$i577) + 12|0);
	        HEAP32[$submatch_id$i$i585>>2] = -1;
	        HEAP32[$call1$i$i579>>2] = $call595;
	        $code_max2$i587 = (($call1$i$i579) + 4|0);
	        HEAP32[$code_max2$i587>>2] = $call596;
	        $position3$i588 = (($call1$i$i579) + 8|0);
	        HEAP32[$position3$i588>>2] = $182;
	        $183 = HEAP32[$ctx>>2]|0;
	        $184 = HEAP32[$wc>>2]|0;
	        $call603 = (_towlower($184)|0);
	        $185 = HEAP32[$wc>>2]|0;
	        $call604 = (_towlower($185)|0);
	        $186 = HEAP32[$position617>>2]|0;
	        $call$i$i592 = (___tre_mem_alloc_impl($183,0,0,1,32)|0);
	        $tobool$i$i593 = ($call$i$i592|0)==(0|0);
	        if ($tobool$i$i593) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        $call1$i$i594 = (___tre_mem_alloc_impl($183,0,0,1,20)|0);
	        $obj$i$i595 = (($call$i$i592) + 4|0);
	        HEAP32[$obj$i$i595>>2] = $call1$i$i594;
	        $tobool3$i$i596 = ($call1$i$i594|0)==(0|0);
	        if ($tobool3$i$i596) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        HEAP32[$call$i$i592>>2] = 0;
	        $nullable$i$i599 = (($call$i$i592) + 8|0);
	        HEAP32[$nullable$i$i599>>2] = -1;
	        $submatch_id$i$i600 = (($call$i$i592) + 12|0);
	        HEAP32[$submatch_id$i$i600>>2] = -1;
	        HEAP32[$call1$i$i594>>2] = $call603;
	        $code_max2$i602 = (($call1$i$i594) + 4|0);
	        HEAP32[$code_max2$i602>>2] = $call604;
	        $position3$i603 = (($call1$i$i594) + 8|0);
	        HEAP32[$position3$i603>>2] = $186;
	        $187 = HEAP32[$ctx>>2]|0;
	        $call$i$i607 = (___tre_mem_alloc_impl($187,0,0,1,32)|0);
	        $tobool$i$i608 = ($call$i$i607|0)==(0|0);
	        if ($tobool$i$i608) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        $call1$i$i609 = (___tre_mem_alloc_impl($187,0,0,1,8)|0);
	        $obj$i$i610 = (($call$i$i607) + 4|0);
	        HEAP32[$obj$i$i610>>2] = $call1$i$i609;
	        $tobool3$i$i611 = ($call1$i$i609|0)==(0|0);
	        if ($tobool3$i$i611) {
	         $retval$2 = 12;
	         label = 294;
	         break L6;
	        }
	        HEAP32[$call$i$i607>>2] = 3;
	        $nullable$i$i614 = (($call$i$i607) + 8|0);
	        HEAP32[$nullable$i$i614>>2] = -1;
	        $submatch_id$i$i615 = (($call$i$i607) + 12|0);
	        HEAP32[$submatch_id$i$i615>>2] = -1;
	        HEAP32[$call1$i$i609>>2] = $call$i$i577;
	        $188 = HEAP32[$obj$i$i610>>2]|0;
	        $right3$i617 = (($188) + 4|0);
	        HEAP32[$right3$i617>>2] = $call$i$i592;
	        $num_submatches$i618 = (($call$i$i577) + 16|0);
	        $189 = HEAP32[$num_submatches$i618>>2]|0;
	        $num_submatches4$i619 = (($call$i$i592) + 16|0);
	        $190 = HEAP32[$num_submatches4$i619>>2]|0;
	        $add$i620 = (($190) + ($189))|0;
	        $num_submatches5$i621 = (($call$i$i607) + 16|0);
	        HEAP32[$num_submatches5$i621>>2] = $add$i620;
	        $node$2$i664$in = $call$i$i607;
	       }
	      } while(0);
	      if ((label|0) == 280) {
	       label = 0;
	       $191 = HEAP32[$ctx>>2]|0;
	       $192 = HEAP32[$wc>>2]|0;
	       $193 = HEAP32[$position617>>2]|0;
	       $call$i$i625 = (___tre_mem_alloc_impl($191,0,0,1,32)|0);
	       $tobool$i$i626 = ($call$i$i625|0)==(0|0);
	       if ($tobool$i$i626) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       $call1$i$i627 = (___tre_mem_alloc_impl($191,0,0,1,20)|0);
	       $obj$i$i628 = (($call$i$i625) + 4|0);
	       HEAP32[$obj$i$i628>>2] = $call1$i$i627;
	       $tobool3$i$i629 = ($call1$i$i627|0)==(0|0);
	       if ($tobool3$i$i629) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       HEAP32[$call$i$i625>>2] = 0;
	       $nullable$i$i632 = (($call$i$i625) + 8|0);
	       HEAP32[$nullable$i$i632>>2] = -1;
	       $submatch_id$i$i633 = (($call$i$i625) + 12|0);
	       HEAP32[$submatch_id$i$i633>>2] = -1;
	       HEAP32[$call1$i$i627>>2] = $192;
	       $code_max2$i635 = (($call1$i$i627) + 4|0);
	       HEAP32[$code_max2$i635>>2] = $192;
	       $position3$i636 = (($call1$i$i627) + 8|0);
	       HEAP32[$position3$i636>>2] = $193;
	       $node$2$i664$in = $call$i$i625;
	      }
	      $194 = HEAP32[$position617>>2]|0;
	      $inc624 = (($194) + 1)|0;
	      HEAP32[$position617>>2] = $inc624;
	      $195 = HEAP32[$re>>2]|0;
	      $add$ptr626 = (($195) + ($clen$0)|0);
	      HEAP32[$re>>2] = $add$ptr626;
	      $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i664$in;$status$0$be = 0;
	      break;
	     }
	     case 0:  {
	      $8 = HEAP32[$cflags>>2]|0;
	      $and = $8 & 1;
	      $tobool16 = ($and|0)==(0);
	      if (!($tobool16)) {
	       $call$i222 = (_tre_stack_push($0,(7))|0);
	       $cmp19 = ($call$i222|0)==(0);
	       if (!($cmp19)) {
	        $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i222;
	        label = 6;
	        break L6;
	       }
	      }
	      $call$i223 = (_tre_stack_push($0,(3))|0);
	      $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = $call$i223;
	      break;
	     }
	     case 3:  {
	      $call$i224 = (_tre_stack_push($0,(5))|0);
	      $cmp29 = ($call$i224|0)==(0);
	      if (!($cmp29)) {
	       $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i224;
	       label = 6;
	       break L6;
	      }
	      $call$i225 = (_tre_stack_push($0,(4))|0);
	      $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = $call$i225;
	      break;
	     }
	     case 4:  {
	      $call$i226 = (_tre_stack_push($0,(9))|0);
	      $cmp38 = ($call$i226|0)==(0);
	      if (!($cmp38)) {
	       $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i226;
	       label = 6;
	       break L6;
	      }
	      $call$i227 = (_tre_stack_push($0,(1))|0);
	      $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = $call$i227;
	      break;
	     }
	     case 5:  {
	      $9 = HEAP32[$re>>2]|0;
	      $10 = HEAP8[$9>>0]|0;
	      $tobool47 = ($10<<24>>24)==(0);
	      if ($tobool47) {
	       $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	      } else {
	       $11 = HEAP32[$cflags>>2]|0;
	       $and52 = $11 & 1;
	       $tobool53 = ($and52|0)!=(0);
	       $cmp54 = ($10<<24>>24)==(124);
	       $or$cond212 = $tobool53 & $cmp54;
	       if ($or$cond212) {
	        $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	       } else {
	        $cmp62 = ($10<<24>>24)==(41);
	        $or$cond213 = $tobool53 & $cmp62;
	        $cmp65 = ($depth$0740|0)>(0);
	        $or$cond214 = $or$cond213 & $cmp65;
	        do {
	         if (!($or$cond214)) {
	          $tobool69 = ($and52|0)==(0);
	          $cmp71 = ($10<<24>>24)==(92);
	          $or$cond215 = $tobool69 & $cmp71;
	          if ($or$cond215) {
	           $add$ptr = (($9) + 1|0);
	           $12 = HEAP8[$add$ptr>>0]|0;
	           $cmp76 = ($12<<24>>24)==(41);
	           if ($cmp76) {
	            break;
	           }
	          }
	          $call$i228 = (_tre_stack_push($0,(5))|0);
	          $cmp96 = ($call$i228|0)==(0);
	          if (!($cmp96)) {
	           $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i228;
	           label = 6;
	           break L6;
	          }
	          $call$i229 = (_tre_stack_push($0,$node$2$i661738)|0);
	          $cmp101 = ($call$i229|0)==(0);
	          if (!($cmp101)) {
	           $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i229;
	           label = 6;
	           break L6;
	          }
	          $call$i230 = (_tre_stack_push($0,(6))|0);
	          $cmp106 = ($call$i230|0)==(0);
	          if (!($cmp106)) {
	           $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i230;
	           label = 6;
	           break L6;
	          }
	          $call$i231 = (_tre_stack_push($0,(4))|0);
	          $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = $call$i231;
	          break L8;
	         }
	        } while(0);
	        $tobool81 = ($and52|0)==(0);
	        $13 = $and52 | $depth$0740;
	        $14 = ($13|0)==(0);
	        $status$1 = $14 ? 8 : 0;
	        $dec = (($depth$0740) + -1)|0;
	        if ($tobool81) {
	         $add$ptr92 = (($9) + 2|0);
	         HEAP32[$re>>2] = $add$ptr92;
	         $depth$0$be = $dec;$node$2$i661$be = $node$2$i661738;$status$0$be = $status$1;
	        } else {
	         $depth$0$be = $dec;$node$2$i661$be = $node$2$i661738;$status$0$be = $status$1;
	        }
	       }
	      }
	      break;
	     }
	     case 6:  {
	      $dec$i233 = (($5) + -2)|0;
	      HEAP32[$$idx219>>2] = $dec$i233;
	      $voidptr_value$i = (($6) + ($dec$i233<<2)|0);
	      $15 = HEAP32[$voidptr_value$i>>2]|0;
	      $16 = HEAP32[$ctx>>2]|0;
	      $call$i$i246 = (___tre_mem_alloc_impl($16,0,0,1,32)|0);
	      $tobool$i$i247 = ($call$i$i246|0)==(0|0);
	      if ($tobool$i$i247) {
	       $retval$2 = 12;
	       label = 294;
	       break L6;
	      }
	      $call1$i$i248 = (___tre_mem_alloc_impl($16,0,0,1,8)|0);
	      $obj$i$i249 = (($call$i$i246) + 4|0);
	      HEAP32[$obj$i$i249>>2] = $call1$i$i248;
	      $tobool3$i$i250 = ($call1$i$i248|0)==(0|0);
	      if ($tobool3$i$i250) {
	       $retval$2 = 12;
	       label = 294;
	       break L6;
	      }
	      HEAP32[$call$i$i246>>2] = 1;
	      $nullable$i$i253 = (($call$i$i246) + 8|0);
	      HEAP32[$nullable$i$i253>>2] = -1;
	      $submatch_id$i$i254 = (($call$i$i246) + 12|0);
	      HEAP32[$submatch_id$i$i254>>2] = -1;
	      HEAP32[$call1$i$i248>>2] = $15;
	      $17 = HEAP32[$obj$i$i249>>2]|0;
	      $right3$i256 = (($17) + 4|0);
	      HEAP32[$right3$i256>>2] = $node$2$i661738;
	      $num_submatches$i257 = (($15) + 16|0);
	      $18 = HEAP32[$num_submatches$i257>>2]|0;
	      $num_submatches4$i258 = (($node$2$i661738) + 16|0);
	      $19 = HEAP32[$num_submatches4$i258>>2]|0;
	      $add$i259 = (($19) + ($18))|0;
	      $num_submatches5$i260 = (($call$i$i246) + 16|0);
	      HEAP32[$num_submatches5$i260>>2] = $add$i259;
	      $depth$0$be = $depth$0740;$node$2$i661$be = $call$i$i246;$status$0$be = 0;
	      break;
	     }
	     case 7:  {
	      $20 = HEAP32[$re>>2]|0;
	      $21 = HEAP8[$20>>0]|0;
	      $conv123 = $21 << 24 >> 24;
	      if ((($conv123|0) == 41)) {
	       $incdec$ptr148 = (($20) + 1|0);
	       HEAP32[$re>>2] = $incdec$ptr148;
	       $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	       break L8;
	      } else if (!((($conv123|0) == 124))) {
	       $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	       break L8;
	      }
	      $call$i264 = (_tre_stack_push($0,(7))|0);
	      $cmp126 = ($call$i264|0)==(0);
	      if (!($cmp126)) {
	       $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i264;
	       label = 6;
	       break L6;
	      }
	      $call$i265 = (_tre_stack_push($0,$node$2$i661738)|0);
	      $cmp131 = ($call$i265|0)==(0);
	      if (!($cmp131)) {
	       $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i265;
	       label = 6;
	       break L6;
	      }
	      $call$i266 = (_tre_stack_push($0,(8))|0);
	      $cmp136 = ($call$i266|0)==(0);
	      if (!($cmp136)) {
	       $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i266;
	       label = 6;
	       break L6;
	      }
	      $call$i267 = (_tre_stack_push($0,(3))|0);
	      $cmp141 = ($call$i267|0)==(0);
	      if (!($cmp141)) {
	       $depth$0$be$ph = $depth$0740;$status$0$be$ph = $call$i267;
	       label = 6;
	       break L6;
	      }
	      $22 = HEAP32[$re>>2]|0;
	      $incdec$ptr = (($22) + 1|0);
	      HEAP32[$re>>2] = $incdec$ptr;
	      $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	      break;
	     }
	     case 8:  {
	      $dec$i269 = (($5) + -2)|0;
	      HEAP32[$$idx219>>2] = $dec$i269;
	      $voidptr_value$i271 = (($6) + ($dec$i269<<2)|0);
	      $23 = HEAP32[$voidptr_value$i271>>2]|0;
	      $24 = HEAP32[$ctx>>2]|0;
	      $call$i$i272 = (___tre_mem_alloc_impl($24,0,0,1,32)|0);
	      $tobool$i$i273 = ($call$i$i272|0)==(0|0);
	      if ($tobool$i$i273) {
	       $retval$2 = 12;
	       label = 294;
	       break L6;
	      }
	      $call1$i$i274 = (___tre_mem_alloc_impl($24,0,0,1,8)|0);
	      $obj$i$i275 = (($call$i$i272) + 4|0);
	      HEAP32[$obj$i$i275>>2] = $call1$i$i274;
	      $tobool3$i$i276 = ($call1$i$i274|0)==(0|0);
	      if ($tobool3$i$i276) {
	       $retval$2 = 12;
	       label = 294;
	       break L6;
	      }
	      HEAP32[$call$i$i272>>2] = 3;
	      $nullable$i$i279 = (($call$i$i272) + 8|0);
	      HEAP32[$nullable$i$i279>>2] = -1;
	      $submatch_id$i$i280 = (($call$i$i272) + 12|0);
	      HEAP32[$submatch_id$i$i280>>2] = -1;
	      HEAP32[$call1$i$i274>>2] = $23;
	      $25 = HEAP32[$obj$i$i275>>2]|0;
	      $right3$i282 = (($25) + 4|0);
	      HEAP32[$right3$i282>>2] = $node$2$i661738;
	      $num_submatches$i283 = (($23) + 16|0);
	      $26 = HEAP32[$num_submatches$i283>>2]|0;
	      $num_submatches4$i284 = (($node$2$i661738) + 16|0);
	      $27 = HEAP32[$num_submatches4$i284>>2]|0;
	      $add$i285 = (($27) + ($26))|0;
	      $num_submatches5$i286 = (($call$i$i272) + 16|0);
	      HEAP32[$num_submatches5$i286>>2] = $add$i285;
	      $depth$0$be = $depth$0740;$node$2$i661$be = $call$i$i272;$status$0$be = 0;
	      break;
	     }
	     case 9:  {
	      $28 = HEAP32[$re>>2]|0;
	      $29 = HEAP8[$28>>0]|0;
	      $conv160 = $29 << 24 >> 24;
	      switch ($conv160|0) {
	      case 63: case 43:  {
	       $30 = HEAP32[$cflags>>2]|0;
	       $and163 = $30 & 1;
	       $tobool164 = ($and163|0)==(0);
	       if ($tobool164) {
	        $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	        break L8;
	       } else {
	        label = 41;
	       }
	       break;
	      }
	      case 42:  {
	       label = 41;
	       break;
	      }
	      case 92:  {
	       $34 = HEAP32[$cflags>>2]|0;
	       $and196 = $34 & 1;
	       $tobool197 = ($and196|0)==(0);
	       if (!($tobool197)) {
	        $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	        break L8;
	       }
	       $add$ptr200 = (($28) + 1|0);
	       $35 = HEAP8[$add$ptr200>>0]|0;
	       $cmp202 = ($35<<24>>24)==(123);
	       if (!($cmp202)) {
	        $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	        break L8;
	       }
	       HEAP32[$re>>2] = $add$ptr200;
	       $37 = $add$ptr200;$45 = $34;
	       break;
	      }
	      case 123:  {
	       $36 = HEAP32[$cflags>>2]|0;
	       $and209 = $36 & 1;
	       $tobool210 = ($and209|0)==(0);
	       if ($tobool210) {
	        $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	        break L8;
	       } else {
	        $37 = $28;$45 = $36;
	       }
	       break;
	      }
	      default: {
	       $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	       break L8;
	      }
	      }
	      if ((label|0) == 41) {
	       label = 0;
	       $cmp171 = ($29<<24>>24)==(43);
	       $$ = $cmp171&1;
	       $cmp177 = ($29<<24>>24)==(63);
	       $rep_max$0 = $cmp177 ? 1 : -1;
	       $incdec$ptr182 = (($28) + 1|0);
	       HEAP32[$re>>2] = $incdec$ptr182;
	       $31 = HEAP32[$ctx>>2]|0;
	       $call$i$i289 = (___tre_mem_alloc_impl($31,0,0,1,32)|0);
	       $tobool$i$i290 = ($call$i$i289|0)==(0|0);
	       if ($tobool$i$i290) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       $call1$i$i291 = (___tre_mem_alloc_impl($31,0,0,1,16)|0);
	       $obj$i$i292 = (($call$i$i289) + 4|0);
	       HEAP32[$obj$i$i292>>2] = $call1$i$i291;
	       $tobool3$i$i293 = ($call1$i$i291|0)==(0|0);
	       if ($tobool3$i$i293) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       HEAP32[$call$i$i289>>2] = 2;
	       $nullable$i$i296 = (($call$i$i289) + 8|0);
	       HEAP32[$nullable$i$i296>>2] = -1;
	       $submatch_id$i$i297 = (($call$i$i289) + 12|0);
	       HEAP32[$submatch_id$i$i297>>2] = -1;
	       HEAP32[$call1$i$i291>>2] = $node$2$i661738;
	       $min2$i = (($call1$i$i291) + 4|0);
	       HEAP32[$min2$i>>2] = $$;
	       $max3$i = (($call1$i$i291) + 8|0);
	       HEAP32[$max3$i>>2] = $rep_max$0;
	       $32 = (($call1$i$i291) + 12|0);
	       $bf$load$i = HEAP8[$32>>0]|0;
	       $bf$clear$i = $bf$load$i & -2;
	       HEAP8[$32>>0] = $bf$clear$i;
	       $num_submatches$i298 = (($node$2$i661738) + 16|0);
	       $33 = HEAP32[$num_submatches$i298>>2]|0;
	       $num_submatches5$i299 = (($call$i$i289) + 16|0);
	       HEAP32[$num_submatches5$i299>>2] = $33;
	       $call$i302 = (_tre_stack_push($0,(9))|0);
	       $depth$0$be = $depth$0740;$node$2$i661$be = $call$i$i289;$status$0$be = $call$i302;
	       break L8;
	      }
	      $incdec$ptr214 = (($37) + 1|0);
	      HEAP32[$re>>2] = $incdec$ptr214;
	      $38 = HEAP8[$incdec$ptr214>>0]|0;
	      $$off$i = (($38) + -48)<<24>>24;
	      $39 = ($$off$i&255)<(10);
	      if ($39) {
	       $conv7$i$i = $38 << 24 >> 24;
	       $sub8$i$i = (($conv7$i$i) + -48)|0;
	       $cmp9$i$i = ($sub8$i$i>>>0)<(10);
	       if ($cmp9$i$i) {
	        $conv12$i$i = $conv7$i$i;$num$010$i$i = -1;$r$011$i$i = $incdec$ptr214;
	       } else {
	        $retval$2 = 10;
	        label = 294;
	        break L6;
	       }
	       while(1) {
	        $cmp2$i$i = ($num$010$i$i|0)<(0);
	        $num$0$op$i$i = ($num$010$i$i*10)|0;
	        $num$0$op$op$i$i = (($num$0$op$i$i) + -48)|0;
	        $add$i$i = $cmp2$i$i ? -48 : $num$0$op$op$i$i;
	        $sub5$i$i = (($add$i$i) + ($conv12$i$i))|0;
	        $incdec$ptr$i$i = (($r$011$i$i) + 1|0);
	        $40 = HEAP8[$incdec$ptr$i$i>>0]|0;
	        $conv$i$i = $40 << 24 >> 24;
	        $sub$i$i = (($conv$i$i) + -48)|0;
	        $cmp$i$i = ($sub$i$i>>>0)<(10);
	        if ($cmp$i$i) {
	         $conv12$i$i = $conv$i$i;$num$010$i$i = $sub5$i$i;$r$011$i$i = $incdec$ptr$i$i;
	        } else {
	         $41 = $40;$min$0$i = $sub5$i$i;$r$0$lcssa$i3958$i = $incdec$ptr$i$i;
	         break;
	        }
	       }
	      } else {
	       $41 = $38;$min$0$i = -1;$r$0$lcssa$i3958$i = $incdec$ptr214;
	      }
	      $cmp6$i = ($41<<24>>24)==(44);
	      if ($cmp6$i) {
	       $incdec$ptr$i = (($r$0$lcssa$i3958$i) + 1|0);
	       $42 = HEAP8[$incdec$ptr$i>>0]|0;
	       $conv7$i23$i = $42 << 24 >> 24;
	       $sub8$i24$i = (($conv7$i23$i) + -48)|0;
	       $cmp9$i25$i = ($sub8$i24$i>>>0)<(10);
	       if ($cmp9$i25$i) {
	        $conv12$i26$i = $conv7$i23$i;$num$010$i28$i = -1;$r$011$i27$i = $incdec$ptr$i;
	        while(1) {
	         $cmp2$i29$i = ($num$010$i28$i|0)<(0);
	         $num$0$op$i30$i = ($num$010$i28$i*10)|0;
	         $num$0$op$op$i31$i = (($num$0$op$i30$i) + -48)|0;
	         $add$i32$i = $cmp2$i29$i ? -48 : $num$0$op$op$i31$i;
	         $sub5$i33$i = (($add$i32$i) + ($conv12$i26$i))|0;
	         $incdec$ptr$i34$i = (($r$011$i27$i) + 1|0);
	         $43 = HEAP8[$incdec$ptr$i34$i>>0]|0;
	         $conv$i35$i = $43 << 24 >> 24;
	         $sub$i36$i = (($conv$i35$i) + -48)|0;
	         $cmp$i37$i = ($sub$i36$i>>>0)<(10);
	         if ($cmp$i37$i) {
	          $conv12$i26$i = $conv$i35$i;$num$010$i28$i = $sub5$i33$i;$r$011$i27$i = $incdec$ptr$i34$i;
	         } else {
	          $206 = $43;$max$0$i = $sub5$i33$i;$r$0$lcssa$i3957$i = $incdec$ptr$i34$i;
	          label = 54;
	          break;
	         }
	        }
	       } else {
	        $44 = $42;$max$063$i = -1;$r$0$lcssa$i395760$i = $incdec$ptr$i;
	       }
	      } else {
	       $206 = $41;$max$0$i = $min$0$i;$r$0$lcssa$i3957$i = $r$0$lcssa$i3958$i;
	       label = 54;
	      }
	      if ((label|0) == 54) {
	       label = 0;
	       $cmp11$i = ($max$0$i|0)>(-1);
	       if ($cmp11$i) {
	        $cmp14$i = ($min$0$i|0)>($max$0$i|0);
	        $cmp16$i = ($max$0$i|0)>(255);
	        $or$cond$i = $cmp14$i | $cmp16$i;
	        if ($or$cond$i) {
	         $retval$2 = 10;
	         label = 294;
	         break L6;
	        } else {
	         $44 = $206;$max$063$i = $max$0$i;$r$0$lcssa$i395760$i = $r$0$lcssa$i3957$i;
	        }
	       } else {
	        $44 = $206;$max$063$i = $max$0$i;$r$0$lcssa$i395760$i = $r$0$lcssa$i3957$i;
	       }
	      }
	      $tobool$i = ($44<<24>>24)==(0);
	      if ($tobool$i) {
	       $retval$2 = 9;
	       label = 294;
	       break L6;
	      }
	      $cmp23$i = ($r$0$lcssa$i395760$i|0)==($incdec$ptr214|0);
	      if ($cmp23$i) {
	       $retval$2 = 10;
	       label = 294;
	       break L6;
	      }
	      $and$i = $45 & 1;
	      $tobool27$i = ($and$i|0)==(0);
	      if ($tobool27$i) {
	       $cmp36$i = ($44<<24>>24)==(92);
	       if (!($cmp36$i)) {
	        $retval$2 = 10;
	        label = 294;
	        break L6;
	       }
	       $add$ptr$i = (($r$0$lcssa$i395760$i) + 1|0);
	       $46 = HEAP8[$add$ptr$i>>0]|0;
	       $cmp40$i = ($46<<24>>24)==(125);
	       if (!($cmp40$i)) {
	        $retval$2 = 10;
	        label = 294;
	        break L6;
	       }
	       $add$ptr44$i = (($r$0$lcssa$i395760$i) + 2|0);
	       $storemerge$i = $add$ptr44$i;
	      } else {
	       $cmp30$i = ($44<<24>>24)==(125);
	       if (!($cmp30$i)) {
	        $retval$2 = 10;
	        label = 294;
	        break L6;
	       }
	       $incdec$ptr34$i = (($r$0$lcssa$i395760$i) + 1|0);
	       $storemerge$i = $incdec$ptr34$i;
	      }
	      $47 = $max$063$i | $min$0$i;
	      $48 = ($47|0)==(0);
	      if ($48) {
	       $49 = HEAP32[$ctx>>2]|0;
	       $call$i$i42$i = (___tre_mem_alloc_impl($49,0,0,1,32)|0);
	       $tobool$i$i43$i = ($call$i$i42$i|0)==(0|0);
	       if ($tobool$i$i43$i) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       $call1$i$i44$i = (___tre_mem_alloc_impl($49,0,0,1,20)|0);
	       $obj$i$i45$i = (($call$i$i42$i) + 4|0);
	       HEAP32[$obj$i$i45$i>>2] = $call1$i$i44$i;
	       $tobool3$i$i46$i = ($call1$i$i44$i|0)==(0|0);
	       if ($tobool3$i$i46$i) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       HEAP32[$call$i$i42$i>>2] = 0;
	       $nullable$i$i49$i = (($call$i$i42$i) + 8|0);
	       HEAP32[$nullable$i$i49$i>>2] = -1;
	       $submatch_id$i$i50$i = (($call$i$i42$i) + 12|0);
	       HEAP32[$submatch_id$i$i50$i>>2] = -1;
	       HEAP32[$call1$i$i44$i>>2] = -1;
	       $code_max2$i$i = (($call1$i$i44$i) + 4|0);
	       HEAP32[$code_max2$i$i>>2] = -1;
	       $position3$i$i = (($call1$i$i44$i) + 8|0);
	       HEAP32[$position3$i$i>>2] = -1;
	       $storemerge76$in$i = $call$i$i42$i;
	      } else {
	       $50 = $max$063$i & $min$0$i;
	       $51 = ($50|0)<(0);
	       $min$1$i = $51 ? 1 : $min$0$i;
	       $max$1$i = $51 ? 1 : $max$063$i;
	       $52 = HEAP32[$ctx>>2]|0;
	       $call$i$i$i = (___tre_mem_alloc_impl($52,0,0,1,32)|0);
	       $tobool$i$i$i = ($call$i$i$i|0)==(0|0);
	       if ($tobool$i$i$i) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       $call1$i$i$i = (___tre_mem_alloc_impl($52,0,0,1,16)|0);
	       $obj$i$i$i = (($call$i$i$i) + 4|0);
	       HEAP32[$obj$i$i$i>>2] = $call1$i$i$i;
	       $tobool3$i$i$i = ($call1$i$i$i|0)==(0|0);
	       if ($tobool3$i$i$i) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       HEAP32[$call$i$i$i>>2] = 2;
	       $nullable$i$i$i = (($call$i$i$i) + 8|0);
	       HEAP32[$nullable$i$i$i>>2] = -1;
	       $submatch_id$i$i$i = (($call$i$i$i) + 12|0);
	       HEAP32[$submatch_id$i$i$i>>2] = -1;
	       HEAP32[$call1$i$i$i>>2] = $node$2$i661738;
	       $min2$i$i = (($call1$i$i$i) + 4|0);
	       HEAP32[$min2$i$i>>2] = $min$1$i;
	       $max3$i$i = (($call1$i$i$i) + 8|0);
	       HEAP32[$max3$i$i>>2] = $max$1$i;
	       $53 = (($call1$i$i$i) + 12|0);
	       $bf$load$i$i = HEAP8[$53>>0]|0;
	       $bf$clear$i$i = $bf$load$i$i & -2;
	       HEAP8[$53>>0] = $bf$clear$i$i;
	       $num_submatches$i$i = (($node$2$i661738) + 16|0);
	       $54 = HEAP32[$num_submatches$i$i>>2]|0;
	       $num_submatches5$i$i = (($call$i$i$i) + 16|0);
	       HEAP32[$num_submatches5$i$i>>2] = $54;
	       $storemerge76$in$i = $call$i$i$i;
	      }
	      HEAP32[$re>>2] = $storemerge$i;
	      $call$i305 = (_tre_stack_push($0,(9))|0);
	      $depth$0$be = $depth$0740;$node$2$i661$be = $storemerge76$in$i;$status$0$be = $call$i305;
	      break;
	     }
	     case 2:  {
	      $dec$i641 = (($5) + -2)|0;
	      HEAP32[$$idx219>>2] = $dec$i641;
	      $arrayidx$i643 = (($6) + ($dec$i641<<2)|0);
	      $196 = HEAP32[$arrayidx$i643>>2]|0;
	      $submatch_id632 = (($node$2$i661738) + 12|0);
	      $197 = HEAP32[$submatch_id632>>2]|0;
	      $cmp633 = ($197|0)>(-1);
	      if ($cmp633) {
	       $198 = HEAP32[$ctx>>2]|0;
	       $call$i$i235 = (___tre_mem_alloc_impl($198,0,0,1,32)|0);
	       $tobool$i$i236 = ($call$i$i235|0)==(0|0);
	       if ($tobool$i$i236) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       $call1$i$i237 = (___tre_mem_alloc_impl($198,0,0,1,20)|0);
	       $obj$i$i238 = (($call$i$i235) + 4|0);
	       HEAP32[$obj$i$i238>>2] = $call1$i$i237;
	       $tobool3$i$i239 = ($call1$i$i237|0)==(0|0);
	       if ($tobool3$i$i239) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       HEAP32[$call$i$i235>>2] = 0;
	       $nullable$i$i242 = (($call$i$i235) + 8|0);
	       HEAP32[$nullable$i$i242>>2] = -1;
	       $submatch_id$i$i243 = (($call$i$i235) + 12|0);
	       HEAP32[$submatch_id$i$i243>>2] = -1;
	       HEAP32[$call1$i$i237>>2] = -1;
	       $code_max2$i = (($call1$i$i237) + 4|0);
	       HEAP32[$code_max2$i>>2] = -1;
	       $position3$i = (($call1$i$i237) + 8|0);
	       HEAP32[$position3$i>>2] = -1;
	       $199 = HEAP32[$ctx>>2]|0;
	       $call$i$i = (___tre_mem_alloc_impl($199,0,0,1,32)|0);
	       $tobool$i$i = ($call$i$i|0)==(0|0);
	       if ($tobool$i$i) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       $call1$i$i = (___tre_mem_alloc_impl($199,0,0,1,8)|0);
	       $obj$i$i = (($call$i$i) + 4|0);
	       HEAP32[$obj$i$i>>2] = $call1$i$i;
	       $tobool3$i$i = ($call1$i$i|0)==(0|0);
	       if ($tobool3$i$i) {
	        $retval$2 = 12;
	        label = 294;
	        break L6;
	       }
	       HEAP32[$call$i$i>>2] = 1;
	       $nullable$i$i = (($call$i$i) + 8|0);
	       HEAP32[$nullable$i$i>>2] = -1;
	       $submatch_id$i$i = (($call$i$i) + 12|0);
	       HEAP32[$submatch_id$i$i>>2] = -1;
	       HEAP32[$call1$i$i>>2] = $call$i$i235;
	       $200 = HEAP32[$obj$i$i>>2]|0;
	       $right3$i = (($200) + 4|0);
	       HEAP32[$right3$i>>2] = $node$2$i661738;
	       $num_submatches$i = (($call$i$i235) + 16|0);
	       $201 = HEAP32[$num_submatches$i>>2]|0;
	       $num_submatches4$i = (($node$2$i661738) + 16|0);
	       $202 = HEAP32[$num_submatches4$i>>2]|0;
	       $add$i = (($202) + ($201))|0;
	       $num_submatches5$i = (($call$i$i) + 16|0);
	       HEAP32[$num_submatches5$i>>2] = $add$i;
	       $203 = HEAP32[$num_submatches4$i>>2]|0;
	       HEAP32[$num_submatches5$i>>2] = $203;
	       $node$2$i657 = $call$i$i;
	      } else {
	       $node$2$i657 = $node$2$i661738;
	      }
	      $submatch_id653 = (($node$2$i657) + 12|0);
	      HEAP32[$submatch_id653>>2] = $196;
	      $num_submatches654 = (($node$2$i657) + 16|0);
	      $204 = HEAP32[$num_submatches654>>2]|0;
	      $inc655 = (($204) + 1)|0;
	      HEAP32[$num_submatches654>>2] = $inc655;
	      $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i657;$status$0$be = 0;
	      break;
	     }
	     case 10:  {
	      $dec$i344 = (($5) + -2)|0;
	      HEAP32[$$idx219>>2] = $dec$i344;
	      $arrayidx$i346 = (($6) + ($dec$i344<<2)|0);
	      $205 = HEAP32[$arrayidx$i346>>2]|0;
	      HEAP32[$cflags>>2] = $205;
	      $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	      break;
	     }
	     default: {
	      $depth$0$be = $depth$0740;$node$2$i661$be = $node$2$i661738;$status$0$be = 0;
	     }
	     }
	    } while(0);
	    $$idx$val = HEAP32[$$idx219>>2]|0;
	    $cmp = ($$idx$val|0)>($$idx219$val|0);
	    $cmp11 = ($status$0$be|0)==(0);
	    $or$cond = $cmp & $cmp11;
	    if ($or$cond) {
	     $5 = $$idx$val;$depth$0740 = $depth$0$be;$node$2$i661738 = $node$2$i661$be;
	    } else {
	     $cmp11$lcssa = $cmp11;$depth$0$lcssa = $depth$0$be;$node$2$i661$lcssa = $node$2$i661$be;$status$0$lcssa = $status$0$be;
	     break L4;
	    }
	   }
	   if ((label|0) == 6) {
	    $cmp11783 = ($status$0$be$ph|0)==(0);
	    $cmp11$lcssa = $cmp11783;$depth$0$lcssa = $depth$0$be$ph;$node$2$i661$lcssa = $node$2$i661738;$status$0$lcssa = $status$0$be$ph;
	    break;
	   }
	   else if ((label|0) == 294) {
	    STACKTOP = sp;return ($retval$2|0);
	   }
	  } else {
	   $cmp11$lcssa = $cmp11736;$depth$0$lcssa = 0;$node$2$i661$lcssa = 0;$status$0$lcssa = $call$i221;
	  }
	 } while(0);
	 $cmp662 = ($depth$0$lcssa|0)>(0);
	 $cmp11$not = $cmp11$lcssa ^ 1;
	 $brmerge = $cmp662 | $cmp11$not;
	 $$mux = $cmp662 ? 8 : $status$0$lcssa;
	 if ($brmerge) {
	  $retval$2 = $$mux;
	  STACKTOP = sp;return ($retval$2|0);
	 }
	 $result669 = (($ctx) + 8|0);
	 HEAP32[$result669>>2] = $node$2$i661$lcssa;
	 $retval$2 = 0;
	 STACKTOP = sp;return ($retval$2|0);
	}
	function _tre_add_tags($mem,$stack,$tree,$tnfa) {
	 $mem = $mem|0;
	 $stack = $stack|0;
	 $tree = $tree|0;
	 $tnfa = $tnfa|0;
	 var $$ = 0, $$cmp1 = 0, $$lobit = 0, $$lobit$not = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
	 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
	 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
	 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
	 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
	 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add149 = 0, $add184 = 0, $add296 = 0, $add315 = 0, $add409 = 0, $add453 = 0;
	 var $add47309 = 0, $add486 = 0, $add509 = 0, $add510 = 0, $add514 = 0, $add533 = 0, $add560 = 0, $add9 = 0, $add90 = 0, $arrayidx$i = 0, $arrayidx$i314 = 0, $arrayidx$i318 = 0, $arrayidx$i323 = 0, $arrayidx$i331 = 0, $arrayidx$i352 = 0, $arrayidx$i357 = 0, $arrayidx$i362 = 0, $arrayidx$i367 = 0, $arrayidx$i372 = 0, $arrayidx$i391 = 0;
	 var $arrayidx$i398 = 0, $arrayidx$i421 = 0, $arrayidx$i460 = 0, $arrayidx100 = 0, $arrayidx104 = 0, $arrayidx104$lcssa = 0, $arrayidx104480 = 0, $arrayidx133 = 0, $arrayidx138 = 0, $arrayidx148 = 0, $arrayidx151 = 0, $arrayidx279 = 0, $arrayidx285 = 0, $arrayidx295 = 0, $arrayidx298 = 0, $arrayidx391 = 0, $arrayidx397 = 0, $arrayidx40 = 0, $arrayidx408 = 0, $arrayidx411 = 0;
	 var $arrayidx432 = 0, $arrayidx442 = 0, $arrayidx50 = 0, $arrayidx52 = 0, $arrayidx528 = 0, $arrayidx531 = 0, $arrayidx548 = 0, $arrayidx559 = 0, $arrayidx562 = 0, $arrayidx58 = 0, $arrayidx67 = 0, $arrayidx76 = 0, $arrayidx80 = 0, $bf$cast234 = 0, $bf$clear = 0, $bf$clear233 = 0, $bf$clear261 = 0, $bf$clear271 = 0, $bf$load = 0, $bf$load232 = 0;
	 var $bf$load260 = 0, $bf$load270 = 0, $call$i313 = 0, $call$i400 = 0, $call$i405 = 0, $call$i406 = 0, $call$i407 = 0, $call$i425 = 0, $call$i426 = 0, $call$i427 = 0, $call$i428 = 0, $call$i429 = 0, $call$i431 = 0, $call$i433 = 0, $call$i434 = 0, $call$i435 = 0, $call$i436 = 0, $call$i438 = 0, $call$i440 = 0, $call$i442 = 0;
	 var $call$i443 = 0, $call$i444 = 0, $call$i445 = 0, $call$i446 = 0, $call$i464 = 0, $call$i466 = 0, $call$i468 = 0, $call$i469 = 0, $call$i471 = 0, $call$i472 = 0, $call$i473 = 0, $call$i474 = 0, $call$i475 = 0, $call$i476 = 0, $call11 = 0, $call132 = 0, $call268 = 0, $call3 = 0, $call389 = 0, $call470$tag$0 = 0;
	 var $call529 = 0, $call92 = 0, $cmp = 0, $cmp$i = 0, $cmp$i392 = 0, $cmp$i422 = 0, $cmp$i461 = 0, $cmp1 = 0, $cmp101 = 0, $cmp101477 = 0, $cmp113 = 0, $cmp117 = 0, $cmp12 = 0, $cmp122 = 0, $cmp124 = 0, $cmp128 = 0, $cmp134 = 0, $cmp139 = 0, $cmp168 = 0, $cmp172 = 0;
	 var $cmp176 = 0, $cmp180 = 0, $cmp186 = 0, $cmp190 = 0, $cmp192 = 0, $cmp197 = 0, $cmp201 = 0, $cmp205 = 0, $cmp217 = 0, $cmp223 = 0, $cmp228 = 0, $cmp23 = 0, $cmp236 = 0, $cmp241 = 0, $cmp245 = 0, $cmp249 = 0, $cmp253 = 0, $cmp257 = 0, $cmp281 = 0, $cmp286 = 0;
	 var $cmp313 = 0, $cmp319 = 0, $cmp32 = 0, $cmp323 = 0, $cmp32484 = 0, $cmp327 = 0, $cmp33 = 0, $cmp333 = 0, $cmp33485 = 0, $cmp338 = 0, $cmp343 = 0, $cmp348 = 0, $cmp353 = 0, $cmp358 = 0, $cmp363 = 0, $cmp368 = 0, $cmp373 = 0, $cmp378 = 0, $cmp383 = 0, $cmp392 = 0;
	 var $cmp398 = 0, $cmp4 = 0, $cmp41 = 0, $cmp420 = 0, $cmp427 = 0, $cmp433 = 0, $cmp472 = 0, $cmp491 = 0, $cmp512 = 0, $cmp521 = 0, $cmp53 = 0, $cmp542 = 0, $cmp549 = 0, $cmp61 = 0, $cmp68 = 0, $cmp8$i = 0, $cmp8$i378 = 0, $cmp8$i408 = 0, $cmp8$i447 = 0, $cmp81 = 0;
	 var $cmp88 = 0, $cmp93 = 0, $cond = 0, $dec$i = 0, $dec$i316 = 0, $dec$i321 = 0, $dec$i326 = 0, $dec$i329 = 0, $dec$i334 = 0, $dec$i338 = 0, $dec$i342 = 0, $dec$i346 = 0, $dec$i350 = 0, $dec$i355 = 0, $dec$i360 = 0, $dec$i365 = 0, $dec$i370 = 0, $dec$i375 = 0, $dec$i396 = 0, $dec$i402 = 0;
	 var $direction$0$ = 0, $direction$0$be = 0, $direction$0487 = 0, $direction$1 = 0, $div$i = 0, $div$i382 = 0, $div$i412 = 0, $div$i451 = 0, $end_tag = 0, $end_tag565 = 0, $eo_tag$i = 0, $eo_tag$i388 = 0, $eo_tag$i418 = 0, $eo_tag$i457 = 0, $i$0 = 0, $i$09$i = 0, $i$09$i381 = 0, $i$09$i411 = 0, $i$09$i450 = 0, $i126$0 = 0;
	 var $i267$0 = 0, $i38$0 = 0, $i38$1 = 0, $i388$0 = 0, $i430$0 = 0, $i545$0 = 0, $i65$0 = 0, $i65$1 = 0, $i65$2479 = 0, $inc = 0, $inc$i = 0, $inc$i390 = 0, $inc$i420 = 0, $inc$i459 = 0, $inc106 = 0, $inc142 = 0, $inc152 = 0, $inc158 = 0, $inc159 = 0, $inc194 = 0;
	 var $inc194$next_tag$0 = 0, $inc289 = 0, $inc299 = 0, $inc303 = 0, $inc304 = 0, $inc402 = 0, $inc412 = 0, $inc416 = 0, $inc423 = 0, $inc424 = 0, $inc437 = 0, $inc44 = 0, $inc553 = 0, $inc56 = 0, $inc563 = 0, $inc71 = 0, $inc84 = 0, $incdec$ptr = 0, $left_tag$0 = 0, $lnot$i = 0;
	 var $lnot$i384 = 0, $lnot$i414 = 0, $lnot$i453 = 0, $lor$ext221 = 0, $minimal_tag$0$be = 0, $minimal_tag$0$call457 = 0, $minimal_tag$0$lcssa = 0, $minimal_tag$0490 = 0, $minimal_tag$1 = 0, $minimal_tag$2 = 0, $minimal_tag$3 = 0, $minimal_tag$4 = 0, $minimal_tag$6 = 0, $minimal_tag$7 = 0, $minimal_tag$8 = 0, $minimal_tag$9 = 0, $minimal_tags = 0, $minimal_tags137 = 0, $minimal_tags547 = 0, $mul10 = 0;
	 var $mul2 = 0, $mul46 = 0, $mul73 = 0, $mul91 = 0, $next_tag$0$be = 0, $next_tag$0493 = 0, $next_tag$1 = 0, $next_tag$3 = 0, $next_tag$4 = 0, $num_minimals$0$be = 0, $num_minimals$0$lcssa = 0, $num_minimals$0499 = 0, $num_minimals$1 = 0, $num_minimals$10 = 0, $num_minimals$2 = 0, $num_minimals$3 = 0, $num_minimals$4 = 0, $num_minimals$6 = 0, $num_minimals$7 = 0, $num_minimals$8 = 0;
	 var $num_minimals$9 = 0, $num_minimals567 = 0, $num_submatches = 0, $num_submatches419 = 0, $num_submatches511 = 0, $num_submatches520$pre = 0, $num_tags$0$be = 0, $num_tags$0$lcssa = 0, $num_tags$0502 = 0, $num_tags$2 = 0, $num_tags$3 = 0, $num_tags155 = 0, $num_tags183 = 0, $num_tags191 = 0, $num_tags451 = 0, $num_tags454 = 0, $num_tags482 = 0, $num_tags485 = 0, $num_tags487 = 0, $num_tags505 = 0;
	 var $num_tags508 = 0, $num_tags515 = 0, $num_tags566 = 0, $obj = 0, $obj164 = 0, $obj213 = 0, $obj307 = 0, $obj449 = 0, $obj480 = 0, $obj503 = 0, $or$cond = 0, $or$cond310 = 0, $or$cond486 = 0, $parents87 = 0, $parents98 = 0, $phitmp = 0, $regset$0$be = 0, $regset$0$lcssa = 0, $regset$0505 = 0, $regset$1 = 0;
	 var $rem7$i = 0, $rem7$i383 = 0, $rem7$i413 = 0, $rem7$i452 = 0, $reserved_tag$0 = 0, $retval$0 = 0, $right166 = 0, $right311 = 0, $right484 = 0, $right507 = 0, $right_tag$0 = 0, $so_tag$i = 0, $so_tag$i386 = 0, $so_tag$i416 = 0, $so_tag$i455 = 0, $stack$i = 0, $stack$idx$val = 0, $stack$idx$val483 = 0, $stack$idx312 = 0, $stack$idx312$val = 0;
	 var $status$0$be = 0, $status$0$lcssa = 0, $status$2 = 0, $status$3 = 0, $status$5 = 0, $status$6 = 0, $status$7 = 0, $status$8 = 0, $sub = 0, $submatch_data$i = 0, $submatch_data$i409 = 0, $submatch_id = 0, $tag$0$be = 0, $tag$0$lcssa = 0, $tag$0496 = 0, $tag$2 = 0, $tag$3 = 0, $tag_directions = 0, $tobool219 = 0, $tobool263 = 0;
	 var $tobool273 = 0, $tobool458 = 0, $value$c$i = 0, $value$c$i430 = 0, $value$c$i437 = 0, $value$c$i439 = 0, $value$c$i441 = 0, $value$c$i465 = 0, $value$c$i467 = 0, $value$c$i470 = 0, $voidptr_value$i = 0, $voidptr_value$i336 = 0, $voidptr_value$i340 = 0, $voidptr_value$i344 = 0, $voidptr_value$i348 = 0, $voidptr_value$i377 = 0, $voidptr_value$i404 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $stack$idx312 = (($stack) + 12|0);
	 $stack$idx312$val = HEAP32[$stack$idx312>>2]|0;
	 $cmp = ($mem|0)==(0|0);
	 $cmp1 = ($tnfa|0)==(0|0);
	 $$cmp1 = $cmp | $cmp1;
	 if (!($$cmp1)) {
	  $end_tag = (($tnfa) + 48|0);
	  HEAP32[$end_tag>>2] = 0;
	  $minimal_tags = (($tnfa) + 36|0);
	  $0 = HEAP32[$minimal_tags>>2]|0;
	  HEAP32[$0>>2] = -1;
	 }
	 $num_submatches = (($tnfa) + 28|0);
	 $1 = HEAP32[$num_submatches>>2]|0;
	 $add = $1 << 3;
	 $mul2 = (($add) + 8)|0;
	 $call3 = (_malloc($mul2)|0);
	 $cmp4 = ($call3|0)==(0|0);
	 if ($cmp4) {
	  $retval$0 = 12;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 HEAP32[$call3>>2] = -1;
	 $add9 = $1 << 2;
	 $mul10 = (($add9) + 4)|0;
	 $call11 = (_malloc($mul10)|0);
	 $cmp12 = ($call11|0)==(0|0);
	 if ($cmp12) {
	  _free($call3);
	  $retval$0 = 12;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 HEAP32[$call11>>2] = -1;
	 $i$0 = 0;
	 while(1) {
	  $cmp23 = ($i$0>>>0)>($1>>>0);
	  $inc = (($i$0) + 1)|0;
	  if ($cmp23) {
	   break;
	  } else {
	   $i$0 = $inc;
	  }
	 }
	 (_tre_stack_push($stack,$tree)|0);
	 $call$i313 = (_tre_stack_push($stack,0)|0);
	 $stack$idx$val483 = HEAP32[$stack$idx312>>2]|0;
	 $cmp32484 = ($stack$idx$val483|0)>($stack$idx312$val|0);
	 $cmp33485 = ($call$i313|0)==(0);
	 $or$cond486 = $cmp32484 & $cmp33485;
	 L14: do {
	  if ($or$cond486) {
	   $stack$i = (($stack) + 16|0);
	   $tag_directions = (($tnfa) + 32|0);
	   $submatch_data$i409 = (($tnfa) + 16|0);
	   $minimal_tags137 = (($tnfa) + 36|0);
	   $2 = $stack$idx$val483;$direction$0487 = 0;$minimal_tag$0490 = -1;$next_tag$0493 = 1;$num_minimals$0499 = 0;$num_tags$0502 = 0;$regset$0505 = $call3;$tag$0496 = 0;
	   while(1) {
	    $dec$i = (($2) + -1)|0;
	    HEAP32[$stack$idx312>>2] = $dec$i;
	    $3 = HEAP32[$stack$i>>2]|0;
	    $arrayidx$i314 = (($3) + ($dec$i<<2)|0);
	    $4 = HEAP32[$arrayidx$i314>>2]|0;
	    L18: do {
	     switch ($4|0) {
	     case 1:  {
	      $dec$i375 = (($2) + -2)|0;
	      HEAP32[$stack$idx312>>2] = $dec$i375;
	      $voidptr_value$i377 = (($3) + ($dec$i375<<2)|0);
	      $68 = HEAP32[$voidptr_value$i377>>2]|0;
	      if ($$cmp1) {
	       $obj449 = (($68) + 4|0);
	       $69 = HEAP32[$obj449>>2]|0;
	       $70 = HEAP32[$69>>2]|0;
	       $num_tags451 = (($70) + 20|0);
	       $71 = HEAP32[$num_tags451>>2]|0;
	       $dec$i370 = (($2) + -3)|0;
	       HEAP32[$stack$idx312>>2] = $dec$i370;
	       $arrayidx$i372 = (($3) + ($dec$i370<<2)|0);
	       $72 = HEAP32[$arrayidx$i372>>2]|0;
	       $add453 = (($72) + ($71))|0;
	       $num_tags454 = (($68) + 20|0);
	       HEAP32[$num_tags454>>2] = $add453;
	       $direction$0$be = $direction$0487;$minimal_tag$0$be = -1;$next_tag$0$be = $next_tag$0493;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $num_tags$0502;$regset$0$be = $regset$0505;$status$0$be = 0;$tag$0$be = $tag$0496;
	       break L18;
	      } else {
	       $dec$i365 = (($2) + -3)|0;
	       HEAP32[$stack$idx312>>2] = $dec$i365;
	       $arrayidx$i367 = (($3) + ($dec$i365<<2)|0);
	       $73 = HEAP32[$arrayidx$i367>>2]|0;
	       $dec$i360 = (($2) + -4)|0;
	       HEAP32[$stack$idx312>>2] = $dec$i360;
	       $arrayidx$i362 = (($3) + ($dec$i360<<2)|0);
	       $74 = HEAP32[$arrayidx$i362>>2]|0;
	       $tobool458 = ($73|0)==(0);
	       $minimal_tag$0$call457 = $tobool458 ? $minimal_tag$0490 : $74;
	       $$ = $tobool458&1;
	       $direction$0$be = $$;$minimal_tag$0$be = $minimal_tag$0$call457;$next_tag$0$be = $next_tag$0493;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $num_tags$0502;$regset$0$be = $regset$0505;$status$0$be = 0;$tag$0$be = $tag$0496;
	       break L18;
	      }
	      break;
	     }
	     case 4:  {
	      $dec$i355 = (($2) + -2)|0;
	      HEAP32[$stack$idx312>>2] = $dec$i355;
	      $arrayidx$i357 = (($3) + ($dec$i355<<2)|0);
	      $75 = HEAP32[$arrayidx$i357>>2]|0;
	      $dec$i350 = (($2) + -3)|0;
	      HEAP32[$stack$idx312>>2] = $dec$i350;
	      $arrayidx$i352 = (($3) + ($dec$i350<<2)|0);
	      $76 = HEAP32[$arrayidx$i352>>2]|0;
	      $cmp472 = ($75|0)>(-1);
	      $call470$tag$0 = $cmp472 ? $75 : $tag$0496;
	      $direction$0$be = $direction$0487;$minimal_tag$0$be = $minimal_tag$0490;$next_tag$0$be = $76;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $num_tags$0502;$regset$0$be = $regset$0505;$status$0$be = 0;$tag$0$be = $call470$tag$0;
	      break;
	     }
	     case 5:  {
	      $dec$i346 = (($2) + -2)|0;
	      HEAP32[$stack$idx312>>2] = $dec$i346;
	      $voidptr_value$i348 = (($3) + ($dec$i346<<2)|0);
	      $77 = HEAP32[$voidptr_value$i348>>2]|0;
	      if ($$cmp1) {
	       $obj480 = (($77) + 4|0);
	       $78 = HEAP32[$obj480>>2]|0;
	       $79 = HEAP32[$78>>2]|0;
	       $num_tags482 = (($79) + 20|0);
	       $80 = HEAP32[$num_tags482>>2]|0;
	       $right484 = (($78) + 4|0);
	       $81 = HEAP32[$right484>>2]|0;
	       $num_tags485 = (($81) + 20|0);
	       $82 = HEAP32[$num_tags485>>2]|0;
	       $add486 = (($82) + ($80))|0;
	       $num_tags487 = (($77) + 20|0);
	       HEAP32[$num_tags487>>2] = $add486;
	       $direction$0$be = $direction$0487;$minimal_tag$0$be = $minimal_tag$0490;$next_tag$0$be = $next_tag$0493;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $num_tags$0502;$regset$0$be = $regset$0505;$status$0$be = 0;$tag$0$be = $tag$0496;
	      } else {
	       $direction$0$be = $direction$0487;$minimal_tag$0$be = $minimal_tag$0490;$next_tag$0$be = $next_tag$0493;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $num_tags$0502;$regset$0$be = $regset$0505;$status$0$be = 0;$tag$0$be = $tag$0496;
	      }
	      break;
	     }
	     case 2:  {
	      $regset$1 = $regset$0505;
	      while(1) {
	       $83 = HEAP32[$regset$1>>2]|0;
	       $cmp491 = ($83|0)>(-1);
	       $incdec$ptr = (($regset$1) + 4|0);
	       if ($cmp491) {
	        $regset$1 = $incdec$ptr;
	       } else {
	        $direction$0$be = $direction$0487;$minimal_tag$0$be = $minimal_tag$0490;$next_tag$0$be = $next_tag$0493;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $num_tags$0502;$regset$0$be = $regset$1;$status$0$be = 0;$tag$0$be = $tag$0496;
	        break;
	       }
	      }
	      break;
	     }
	     case 3:  {
	      $dec$i342 = (($2) + -2)|0;
	      $voidptr_value$i344 = (($3) + ($dec$i342<<2)|0);
	      $84 = HEAP32[$voidptr_value$i344>>2]|0;
	      $dec$i338 = (($2) + -3)|0;
	      $voidptr_value$i340 = (($3) + ($dec$i338<<2)|0);
	      $85 = HEAP32[$voidptr_value$i340>>2]|0;
	      $dec$i334 = (($2) + -4)|0;
	      $voidptr_value$i336 = (($3) + ($dec$i334<<2)|0);
	      $86 = HEAP32[$voidptr_value$i336>>2]|0;
	      $dec$i329 = (($2) + -5)|0;
	      HEAP32[$stack$idx312>>2] = $dec$i329;
	      if ($$cmp1) {
	       $arrayidx$i331 = (($3) + ($dec$i329<<2)|0);
	       $87 = HEAP32[$arrayidx$i331>>2]|0;
	       $obj503 = (($86) + 4|0);
	       $88 = HEAP32[$obj503>>2]|0;
	       $89 = HEAP32[$88>>2]|0;
	       $num_tags505 = (($89) + 20|0);
	       $90 = HEAP32[$num_tags505>>2]|0;
	       $right507 = (($88) + 4|0);
	       $91 = HEAP32[$right507>>2]|0;
	       $num_tags508 = (($91) + 20|0);
	       $92 = HEAP32[$num_tags508>>2]|0;
	       $num_submatches511 = (($86) + 16|0);
	       $93 = HEAP32[$num_submatches511>>2]|0;
	       $cmp512 = ($93|0)>(0);
	       $cond = $cmp512 ? 2 : 0;
	       $add509 = (($90) + ($87))|0;
	       $add510 = (($add509) + ($92))|0;
	       $add514 = (($add510) + ($cond))|0;
	       $num_tags515 = (($86) + 20|0);
	       HEAP32[$num_tags515>>2] = $add514;
	       $$pre = HEAP32[$stack$idx312>>2]|0;
	       $$pre$phiZ2D = $num_submatches511;$94 = $$pre;
	      } else {
	       $num_submatches520$pre = (($86) + 16|0);
	       $$pre$phiZ2D = $num_submatches520$pre;$94 = $dec$i329;
	      }
	      $dec$i326 = (($94) + -1)|0;
	      $voidptr_value$i = (($3) + ($dec$i326<<2)|0);
	      $95 = HEAP32[$voidptr_value$i>>2]|0;
	      $dec$i321 = (($94) + -2)|0;
	      HEAP32[$stack$idx312>>2] = $dec$i321;
	      $arrayidx$i323 = (($3) + ($dec$i321<<2)|0);
	      $96 = HEAP32[$arrayidx$i323>>2]|0;
	      $dec$i316 = (($94) + -3)|0;
	      HEAP32[$stack$idx312>>2] = $dec$i316;
	      $arrayidx$i318 = (($3) + ($dec$i316<<2)|0);
	      $97 = HEAP32[$arrayidx$i318>>2]|0;
	      $98 = HEAP32[$$pre$phiZ2D>>2]|0;
	      $cmp521 = ($98|0)>(0);
	      if ($cmp521) {
	       if ($$cmp1) {
	        $status$8 = 0;
	       } else {
	        (_tre_add_tag_right($mem,$84,$96)|0);
	        $99 = HEAP32[$tag_directions>>2]|0;
	        $arrayidx528 = (($99) + ($96<<2)|0);
	        HEAP32[$arrayidx528>>2] = 1;
	        $call529 = (_tre_add_tag_right($mem,$85,$97)|0);
	        $100 = HEAP32[$tag_directions>>2]|0;
	        $arrayidx531 = (($100) + ($97<<2)|0);
	        HEAP32[$arrayidx531>>2] = 1;
	        $status$8 = $call529;
	       }
	       $add533 = (($num_tags$0502) + 2)|0;
	       $direction$0$be = 1;$minimal_tag$0$be = $minimal_tag$0490;$next_tag$0$be = $next_tag$0493;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $add533;$regset$0$be = $95;$status$0$be = $status$8;$tag$0$be = $tag$0496;
	      } else {
	       $direction$0$be = 1;$minimal_tag$0$be = $minimal_tag$0490;$next_tag$0$be = $next_tag$0493;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $num_tags$0502;$regset$0$be = $95;$status$0$be = 0;$tag$0$be = $tag$0496;
	      }
	      break;
	     }
	     case 6:  {
	      $dec$i396 = (($2) + -2)|0;
	      HEAP32[$stack$idx312>>2] = $dec$i396;
	      $arrayidx$i398 = (($3) + ($dec$i396<<2)|0);
	      $5 = HEAP32[$arrayidx$i398>>2]|0;
	      $i38$0 = 0;
	      while(1) {
	       $arrayidx40 = (($regset$0505) + ($i38$0<<2)|0);
	       $6 = HEAP32[$arrayidx40>>2]|0;
	       $cmp41 = ($6|0)>(-1);
	       $inc44 = (($i38$0) + 1)|0;
	       if ($cmp41) {
	        $i38$0 = $inc44;
	       } else {
	        break;
	       }
	      }
	      $mul46 = $5 << 1;
	      $add47309 = $mul46 | 1;
	      HEAP32[$arrayidx40>>2] = $add47309;
	      $arrayidx50 = (($regset$0505) + ($inc44<<2)|0);
	      HEAP32[$arrayidx50>>2] = -1;
	      $i38$1 = 0;
	      while(1) {
	       $arrayidx52 = (($call11) + ($i38$1<<2)|0);
	       $7 = HEAP32[$arrayidx52>>2]|0;
	       $cmp53 = ($7|0)>(-1);
	       $inc56 = (($i38$1) + 1)|0;
	       if ($cmp53) {
	        $i38$1 = $inc56;
	       } else {
	        break;
	       }
	      }
	      $sub = (($i38$1) + -1)|0;
	      $arrayidx58 = (($call11) + ($sub<<2)|0);
	      HEAP32[$arrayidx58>>2] = -1;
	      $direction$0$be = $direction$0487;$minimal_tag$0$be = $minimal_tag$0490;$next_tag$0$be = $next_tag$0493;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $num_tags$0502;$regset$0$be = $regset$0505;$status$0$be = 0;$tag$0$be = $tag$0496;
	      break;
	     }
	     case 0:  {
	      $dec$i402 = (($2) + -2)|0;
	      HEAP32[$stack$idx312>>2] = $dec$i402;
	      $voidptr_value$i404 = (($3) + ($dec$i402<<2)|0);
	      $8 = HEAP32[$voidptr_value$i404>>2]|0;
	      $submatch_id = (($8) + 12|0);
	      $9 = HEAP32[$submatch_id>>2]|0;
	      $cmp61 = ($9|0)>(-1);
	      if ($cmp61) {
	       $i65$0 = 0;
	       while(1) {
	        $arrayidx67 = (($regset$0505) + ($i65$0<<2)|0);
	        $10 = HEAP32[$arrayidx67>>2]|0;
	        $cmp68 = ($10|0)>(-1);
	        $inc71 = (($i65$0) + 1)|0;
	        if ($cmp68) {
	         $i65$0 = $inc71;
	        } else {
	         break;
	        }
	       }
	       $mul73 = $9 << 1;
	       HEAP32[$arrayidx67>>2] = $mul73;
	       $arrayidx76 = (($regset$0505) + ($inc71<<2)|0);
	       HEAP32[$arrayidx76>>2] = -1;
	       if (!($$cmp1)) {
	        $i65$1 = 0;
	        while(1) {
	         $arrayidx80 = (($call11) + ($i65$1<<2)|0);
	         $11 = HEAP32[$arrayidx80>>2]|0;
	         $cmp81 = ($11|0)>(-1);
	         $inc84 = (($i65$1) + 1)|0;
	         if ($cmp81) {
	          $i65$1 = $inc84;
	         } else {
	          break;
	         }
	        }
	        $12 = HEAP32[$submatch_data$i409>>2]|0;
	        $parents87 = ((($12) + (($9*12)|0)|0) + 8|0);
	        HEAP32[$parents87>>2] = 0;
	        $cmp88 = ($i65$1|0)>(0);
	        if ($cmp88) {
	         $add90 = $i65$1 << 2;
	         $mul91 = (($add90) + 4)|0;
	         $call92 = (_malloc($mul91)|0);
	         $cmp93 = ($call92|0)==(0|0);
	         if ($cmp93) {
	          $minimal_tag$0$lcssa = $minimal_tag$0490;$num_minimals$0$lcssa = $num_minimals$0499;$num_tags$0$lcssa = $num_tags$0502;$regset$0$lcssa = $regset$0505;$status$0$lcssa = 12;$tag$0$lcssa = $tag$0496;
	          break L14;
	         }
	         $13 = HEAP32[$submatch_data$i409>>2]|0;
	         $parents98 = ((($13) + (($9*12)|0)|0) + 8|0);
	         HEAP32[$parents98>>2] = $call92;
	         $14 = HEAP32[$call11>>2]|0;
	         $cmp101477 = ($14|0)>(-1);
	         if ($cmp101477) {
	          $15 = $14;$arrayidx104480 = $call92;$i65$2479 = 0;
	          while(1) {
	           HEAP32[$arrayidx104480>>2] = $15;
	           $inc106 = (($i65$2479) + 1)|0;
	           $arrayidx100 = (($call11) + ($inc106<<2)|0);
	           $16 = HEAP32[$arrayidx100>>2]|0;
	           $cmp101 = ($16|0)>(-1);
	           $arrayidx104 = (($call92) + ($inc106<<2)|0);
	           if ($cmp101) {
	            $15 = $16;$arrayidx104480 = $arrayidx104;$i65$2479 = $inc106;
	           } else {
	            $arrayidx104$lcssa = $arrayidx104;
	            break;
	           }
	          }
	         } else {
	          $arrayidx104$lcssa = $call92;
	         }
	         HEAP32[$arrayidx104$lcssa>>2] = -1;
	        }
	       }
	       $17 = HEAP32[$submatch_id>>2]|0;
	       $value$c$i = $17;
	       $call$i406 = (_tre_stack_push($stack,$value$c$i)|0);
	       $cmp113 = ($call$i406|0)==(0);
	       if (!($cmp113)) {
	        $minimal_tag$0$lcssa = $minimal_tag$0490;$num_minimals$0$lcssa = $num_minimals$0499;$num_tags$0$lcssa = $num_tags$0502;$regset$0$lcssa = $regset$0505;$status$0$lcssa = $call$i406;$tag$0$lcssa = $tag$0496;
	        break L14;
	       }
	       $call$i407 = (_tre_stack_push($stack,(6))|0);
	       $cmp117 = ($call$i407|0)==(0);
	       if (!($cmp117)) {
	        $minimal_tag$0$lcssa = $minimal_tag$0490;$num_minimals$0$lcssa = $num_minimals$0499;$num_tags$0$lcssa = $num_tags$0502;$regset$0$lcssa = $regset$0505;$status$0$lcssa = $call$i407;$tag$0$lcssa = $tag$0496;
	        break L14;
	       }
	      }
	      $18 = HEAP32[$8>>2]|0;
	      do {
	       if ((($18|0) == 2)) {
	        $obj213 = (($8) + 4|0);
	        $36 = HEAP32[$obj213>>2]|0;
	        if ($$cmp1) {
	         $37 = HEAP32[$regset$0505>>2]|0;
	         $cmp217 = ($37|0)>(-1);
	         if ($cmp217) {
	          $39 = 1;
	         } else {
	          $38 = (($36) + 12|0);
	          $bf$load = HEAP8[$38>>0]|0;
	          $bf$clear = $bf$load & 1;
	          $tobool219 = ($bf$clear<<24>>24)!=(0);
	          $39 = $tobool219;
	         }
	         $lor$ext221 = $39&1;
	         $value$c$i437 = $lor$ext221;
	         $call$i438 = (_tre_stack_push($stack,$value$c$i437)|0);
	         $cmp223 = ($call$i438|0)==(0);
	         if (!($cmp223)) {
	          $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i438;$tag$3 = $tag$0496;
	          break;
	         }
	        } else {
	         $value$c$i439 = $tag$0496;
	         $call$i440 = (_tre_stack_push($stack,$value$c$i439)|0);
	         $cmp228 = ($call$i440|0)==(0);
	         if (!($cmp228)) {
	          $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i440;$tag$3 = $tag$0496;
	          break;
	         }
	         $40 = (($36) + 12|0);
	         $bf$load232 = HEAP8[$40>>0]|0;
	         $bf$clear233 = $bf$load232 & 1;
	         $bf$cast234 = $bf$clear233&255;
	         $value$c$i441 = $bf$cast234;
	         $call$i442 = (_tre_stack_push($stack,$value$c$i441)|0);
	         $cmp236 = ($call$i442|0)==(0);
	         if (!($cmp236)) {
	          $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i442;$tag$3 = $tag$0496;
	          break;
	         }
	        }
	        $call$i443 = (_tre_stack_push($stack,$8)|0);
	        $cmp241 = ($call$i443|0)==(0);
	        if ($cmp241) {
	         $call$i444 = (_tre_stack_push($stack,(1))|0);
	         $cmp245 = ($call$i444|0)==(0);
	         if ($cmp245) {
	          $41 = HEAP32[$36>>2]|0;
	          $call$i445 = (_tre_stack_push($stack,$41)|0);
	          $cmp249 = ($call$i445|0)==(0);
	          if ($cmp249) {
	           $call$i446 = (_tre_stack_push($stack,0)|0);
	           $cmp253 = ($call$i446|0)==(0);
	           if ($cmp253) {
	            $42 = HEAP32[$regset$0505>>2]|0;
	            $cmp257 = ($42|0)>(-1);
	            if (!($cmp257)) {
	             $43 = (($36) + 12|0);
	             $bf$load260 = HEAP8[$43>>0]|0;
	             $bf$clear261 = $bf$load260 & 1;
	             $tobool263 = ($bf$clear261<<24>>24)==(0);
	             if ($tobool263) {
	              $direction$1 = 0;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = 0;$tag$3 = $tag$0496;
	              break;
	             }
	            }
	            if ($$cmp1) {
	             $minimal_tag$4 = $minimal_tag$0490;$num_minimals$4 = $num_minimals$0499;$status$3 = 0;
	            } else {
	             $call268 = (_tre_add_tag_left($mem,$8,$tag$0496)|0);
	             $44 = (($36) + 12|0);
	             $bf$load270 = HEAP8[$44>>0]|0;
	             $bf$clear271 = $bf$load270 & 1;
	             $tobool273 = ($bf$clear271<<24>>24)==(0);
	             $45 = HEAP32[$tag_directions>>2]|0;
	             $arrayidx279 = (($45) + ($tag$0496<<2)|0);
	             $direction$0$ = $tobool273 ? $direction$0487 : 1;
	             HEAP32[$arrayidx279>>2] = $direction$0$;
	             $cmp281 = ($minimal_tag$0490|0)>(-1);
	             if ($cmp281) {
	              $46 = HEAP32[$minimal_tags137>>2]|0;
	              $i267$0 = 0;
	              while(1) {
	               $arrayidx285 = (($46) + ($i267$0<<2)|0);
	               $47 = HEAP32[$arrayidx285>>2]|0;
	               $cmp286 = ($47|0)>(-1);
	               $inc289 = (($i267$0) + 1)|0;
	               if ($cmp286) {
	                $i267$0 = $inc289;
	               } else {
	                break;
	               }
	              }
	              HEAP32[$arrayidx285>>2] = $tag$0496;
	              $arrayidx295 = (($46) + ($inc289<<2)|0);
	              HEAP32[$arrayidx295>>2] = $minimal_tag$0490;
	              $add296 = (($i267$0) + 2)|0;
	              $arrayidx298 = (($46) + ($add296<<2)|0);
	              HEAP32[$arrayidx298>>2] = -1;
	              $inc299 = (($num_minimals$0499) + 1)|0;
	              $minimal_tag$3 = -1;$num_minimals$3 = $inc299;
	             } else {
	              $minimal_tag$3 = $minimal_tag$0490;$num_minimals$3 = $num_minimals$0499;
	             }
	             $48 = HEAP32[$regset$0505>>2]|0;
	             $cmp8$i447 = ($48|0)>(-1);
	             if ($cmp8$i447) {
	              $49 = HEAP32[$submatch_data$i409>>2]|0;
	              $50 = $48;$i$09$i450 = 0;
	              while(1) {
	               $div$i451 = (($50|0) / 2)&-1;
	               $rem7$i452 = $50 & 1;
	               $lnot$i453 = ($rem7$i452|0)==(0);
	               if ($lnot$i453) {
	                $so_tag$i455 = (($49) + (($div$i451*12)|0)|0);
	                HEAP32[$so_tag$i455>>2] = $tag$0496;
	               } else {
	                $eo_tag$i457 = ((($49) + (($div$i451*12)|0)|0) + 4|0);
	                HEAP32[$eo_tag$i457>>2] = $tag$0496;
	               }
	               $inc$i459 = (($i$09$i450) + 1)|0;
	               $arrayidx$i460 = (($regset$0505) + ($inc$i459<<2)|0);
	               $51 = HEAP32[$arrayidx$i460>>2]|0;
	               $cmp$i461 = ($51|0)>(-1);
	               if ($cmp$i461) {
	                $50 = $51;$i$09$i450 = $inc$i459;
	               } else {
	                break;
	               }
	              }
	             }
	             HEAP32[$regset$0505>>2] = -1;
	             $minimal_tag$4 = $minimal_tag$3;$num_minimals$4 = $num_minimals$3;$status$3 = $call268;
	            }
	            HEAP32[$regset$0505>>2] = -1;
	            $inc303 = (($num_tags$0502) + 1)|0;
	            $inc304 = (($next_tag$0493) + 1)|0;
	            $direction$1 = 0;$minimal_tag$9 = $minimal_tag$4;$next_tag$4 = $inc304;$num_minimals$9 = $num_minimals$4;$num_tags$3 = $inc303;$status$7 = $status$3;$tag$3 = $next_tag$0493;
	           } else {
	            $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i446;$tag$3 = $tag$0496;
	           }
	          } else {
	           $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i445;$tag$3 = $tag$0496;
	          }
	         } else {
	          $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i444;$tag$3 = $tag$0496;
	         }
	        } else {
	         $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i443;$tag$3 = $tag$0496;
	        }
	       } else if ((($18|0) == 1)) {
	        $obj164 = (($8) + 4|0);
	        $29 = HEAP32[$obj164>>2]|0;
	        $30 = HEAP32[$29>>2]|0;
	        $right166 = (($29) + 4|0);
	        $31 = HEAP32[$right166>>2]|0;
	        $call$i426 = (_tre_stack_push($stack,$8)|0);
	        $cmp168 = ($call$i426|0)==(0);
	        if ($cmp168) {
	         $call$i427 = (_tre_stack_push($stack,(5))|0);
	         $cmp172 = ($call$i427|0)==(0);
	         if ($cmp172) {
	          $call$i428 = (_tre_stack_push($stack,$31)|0);
	          $cmp176 = ($call$i428|0)==(0);
	          if ($cmp176) {
	           $call$i429 = (_tre_stack_push($stack,0)|0);
	           $cmp180 = ($call$i429|0)==(0);
	           if ($cmp180) {
	            $num_tags183 = (($30) + 20|0);
	            $32 = HEAP32[$num_tags183>>2]|0;
	            $add184 = (($32) + ($next_tag$0493))|0;
	            $value$c$i430 = $add184;
	            $call$i431 = (_tre_stack_push($stack,$value$c$i430)|0);
	            $cmp186 = ($call$i431|0)==(0);
	            if ($cmp186) {
	             $33 = HEAP32[$num_tags183>>2]|0;
	             $cmp190 = ($33|0)>(0);
	             if ($cmp190) {
	              $num_tags191 = (($31) + 20|0);
	              $34 = HEAP32[$num_tags191>>2]|0;
	              $cmp192 = ($34|0)>(0);
	              $inc194 = $cmp192&1;
	              $inc194$next_tag$0 = (($inc194) + ($next_tag$0493))|0;
	              $35 = $next_tag$0493;
	              $phitmp = $cmp192 ? $35 : (-1);
	              $next_tag$1 = $inc194$next_tag$0;$reserved_tag$0 = $phitmp;
	             } else {
	              $next_tag$1 = $next_tag$0493;$reserved_tag$0 = (-1);
	             }
	             $call$i433 = (_tre_stack_push($stack,$reserved_tag$0)|0);
	             $cmp197 = ($call$i433|0)==(0);
	             if ($cmp197) {
	              $call$i434 = (_tre_stack_push($stack,(4))|0);
	              $cmp201 = ($call$i434|0)==(0);
	              if ($cmp201) {
	               $call$i435 = (_tre_stack_push($stack,$30)|0);
	               $cmp205 = ($call$i435|0)==(0);
	               if ($cmp205) {
	                $call$i436 = (_tre_stack_push($stack,0)|0);
	                $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i436;$tag$3 = $tag$0496;
	               } else {
	                $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i435;$tag$3 = $tag$0496;
	               }
	              } else {
	               $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i434;$tag$3 = $tag$0496;
	              }
	             } else {
	              $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$1;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i433;$tag$3 = $tag$0496;
	             }
	            } else {
	             $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i431;$tag$3 = $tag$0496;
	            }
	           } else {
	            $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i429;$tag$3 = $tag$0496;
	           }
	          } else {
	           $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i428;$tag$3 = $tag$0496;
	          }
	         } else {
	          $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i427;$tag$3 = $tag$0496;
	         }
	        } else {
	         $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i426;$tag$3 = $tag$0496;
	        }
	       } else if ((($18|0) == 3)) {
	        $obj307 = (($8) + 4|0);
	        $52 = HEAP32[$obj307>>2]|0;
	        $53 = HEAP32[$52>>2]|0;
	        $right311 = (($52) + 4|0);
	        $54 = HEAP32[$right311>>2]|0;
	        $55 = HEAP32[$regset$0505>>2]|0;
	        $cmp313 = ($55|0)>(-1);
	        $add315 = (($next_tag$0493) + 1)|0;
	        $right_tag$0 = $cmp313 ? $add315 : $next_tag$0493;
	        $value$c$i465 = $right_tag$0;
	        $call$i466 = (_tre_stack_push($stack,$value$c$i465)|0);
	        $cmp319 = ($call$i466|0)==(0);
	        if ($cmp319) {
	         $left_tag$0 = $cmp313 ? $next_tag$0493 : $tag$0496;
	         $value$c$i467 = $left_tag$0;
	         $call$i468 = (_tre_stack_push($stack,$value$c$i467)|0);
	         $cmp323 = ($call$i468|0)==(0);
	         if ($cmp323) {
	          $call$i469 = (_tre_stack_push($stack,$regset$0505)|0);
	          $cmp327 = ($call$i469|0)==(0);
	          if ($cmp327) {
	           $56 = HEAP32[$regset$0505>>2]|0;
	           $$lobit = $56 >>> 31;
	           $$lobit$not = $$lobit ^ 1;
	           $value$c$i470 = $$lobit$not;
	           $call$i471 = (_tre_stack_push($stack,$value$c$i470)|0);
	           $cmp333 = ($call$i471|0)==(0);
	           if ($cmp333) {
	            $call$i472 = (_tre_stack_push($stack,$8)|0);
	            $cmp338 = ($call$i472|0)==(0);
	            if ($cmp338) {
	             $call$i473 = (_tre_stack_push($stack,$54)|0);
	             $cmp343 = ($call$i473|0)==(0);
	             if ($cmp343) {
	              $call$i474 = (_tre_stack_push($stack,$53)|0);
	              $cmp348 = ($call$i474|0)==(0);
	              if ($cmp348) {
	               $call$i475 = (_tre_stack_push($stack,(3))|0);
	               $cmp353 = ($call$i475|0)==(0);
	               if ($cmp353) {
	                $call$i476 = (_tre_stack_push($stack,$54)|0);
	                $cmp358 = ($call$i476|0)==(0);
	                if ($cmp358) {
	                 $call$i464 = (_tre_stack_push($stack,0)|0);
	                 $cmp363 = ($call$i464|0)==(0);
	                 if ($cmp363) {
	                  $call$i425 = (_tre_stack_push($stack,(2))|0);
	                  $cmp368 = ($call$i425|0)==(0);
	                  if ($cmp368) {
	                   $call$i405 = (_tre_stack_push($stack,$53)|0);
	                   $cmp373 = ($call$i405|0)==(0);
	                   if (!($cmp373)) {
	                    $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i405;$tag$3 = $tag$0496;
	                    break;
	                   }
	                   $call$i400 = (_tre_stack_push($stack,0)|0);
	                   $cmp378 = ($call$i400|0)==(0);
	                   if (!($cmp378)) {
	                    $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i400;$tag$3 = $tag$0496;
	                    break;
	                   }
	                   $57 = HEAP32[$regset$0505>>2]|0;
	                   $cmp383 = ($57|0)>(-1);
	                   if ($cmp383) {
	                    if ($$cmp1) {
	                     $minimal_tag$7 = $minimal_tag$0490;$num_minimals$7 = $num_minimals$0499;$status$5 = 0;
	                    } else {
	                     $call389 = (_tre_add_tag_left($mem,$8,$tag$0496)|0);
	                     $58 = HEAP32[$tag_directions>>2]|0;
	                     $arrayidx391 = (($58) + ($tag$0496<<2)|0);
	                     HEAP32[$arrayidx391>>2] = $direction$0487;
	                     $cmp392 = ($minimal_tag$0490|0)>(-1);
	                     if ($cmp392) {
	                      $59 = HEAP32[$minimal_tags137>>2]|0;
	                      $i388$0 = 0;
	                      while(1) {
	                       $arrayidx397 = (($59) + ($i388$0<<2)|0);
	                       $60 = HEAP32[$arrayidx397>>2]|0;
	                       $cmp398 = ($60|0)>(-1);
	                       $inc402 = (($i388$0) + 1)|0;
	                       if ($cmp398) {
	                        $i388$0 = $inc402;
	                       } else {
	                        break;
	                       }
	                      }
	                      HEAP32[$arrayidx397>>2] = $tag$0496;
	                      $arrayidx408 = (($59) + ($inc402<<2)|0);
	                      HEAP32[$arrayidx408>>2] = $minimal_tag$0490;
	                      $add409 = (($i388$0) + 2)|0;
	                      $arrayidx411 = (($59) + ($add409<<2)|0);
	                      HEAP32[$arrayidx411>>2] = -1;
	                      $inc412 = (($num_minimals$0499) + 1)|0;
	                      $minimal_tag$6 = -1;$num_minimals$6 = $inc412;
	                     } else {
	                      $minimal_tag$6 = $minimal_tag$0490;$num_minimals$6 = $num_minimals$0499;
	                     }
	                     $61 = HEAP32[$regset$0505>>2]|0;
	                     $cmp8$i378 = ($61|0)>(-1);
	                     if ($cmp8$i378) {
	                      $62 = HEAP32[$submatch_data$i409>>2]|0;
	                      $63 = $61;$i$09$i381 = 0;
	                      while(1) {
	                       $div$i382 = (($63|0) / 2)&-1;
	                       $rem7$i383 = $63 & 1;
	                       $lnot$i384 = ($rem7$i383|0)==(0);
	                       if ($lnot$i384) {
	                        $so_tag$i386 = (($62) + (($div$i382*12)|0)|0);
	                        HEAP32[$so_tag$i386>>2] = $tag$0496;
	                       } else {
	                        $eo_tag$i388 = ((($62) + (($div$i382*12)|0)|0) + 4|0);
	                        HEAP32[$eo_tag$i388>>2] = $tag$0496;
	                       }
	                       $inc$i390 = (($i$09$i381) + 1)|0;
	                       $arrayidx$i391 = (($regset$0505) + ($inc$i390<<2)|0);
	                       $64 = HEAP32[$arrayidx$i391>>2]|0;
	                       $cmp$i392 = ($64|0)>(-1);
	                       if ($cmp$i392) {
	                        $63 = $64;$i$09$i381 = $inc$i390;
	                       } else {
	                        break;
	                       }
	                      }
	                     }
	                     HEAP32[$regset$0505>>2] = -1;
	                     $minimal_tag$7 = $minimal_tag$6;$num_minimals$7 = $num_minimals$6;$status$5 = $call389;
	                    }
	                    HEAP32[$regset$0505>>2] = -1;
	                    $inc416 = (($num_tags$0502) + 1)|0;
	                    $minimal_tag$8 = $minimal_tag$7;$next_tag$3 = $add315;$num_minimals$8 = $num_minimals$7;$num_tags$2 = $inc416;$status$6 = $status$5;$tag$2 = $next_tag$0493;
	                   } else {
	                    $minimal_tag$8 = $minimal_tag$0490;$next_tag$3 = $next_tag$0493;$num_minimals$8 = $num_minimals$0499;$num_tags$2 = $num_tags$0502;$status$6 = 0;$tag$2 = $tag$0496;
	                   }
	                   $num_submatches419 = (($8) + 16|0);
	                   $65 = HEAP32[$num_submatches419>>2]|0;
	                   $cmp420 = ($65|0)>(0);
	                   if (!($cmp420)) {
	                    $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$8;$next_tag$4 = $next_tag$3;$num_minimals$9 = $num_minimals$8;$num_tags$3 = $num_tags$2;$status$7 = $status$6;$tag$3 = $tag$2;
	                    break;
	                   }
	                   $inc423 = (($next_tag$3) + 1)|0;
	                   $inc424 = (($next_tag$3) + 2)|0;
	                   $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$8;$next_tag$4 = $inc424;$num_minimals$9 = $num_minimals$8;$num_tags$3 = $num_tags$2;$status$7 = $status$6;$tag$3 = $inc423;
	                  } else {
	                   $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i425;$tag$3 = $tag$0496;
	                  }
	                 } else {
	                  $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i464;$tag$3 = $tag$0496;
	                 }
	                } else {
	                 $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i476;$tag$3 = $tag$0496;
	                }
	               } else {
	                $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i475;$tag$3 = $tag$0496;
	               }
	              } else {
	               $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i474;$tag$3 = $tag$0496;
	              }
	             } else {
	              $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i473;$tag$3 = $tag$0496;
	             }
	            } else {
	             $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i472;$tag$3 = $tag$0496;
	            }
	           } else {
	            $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i471;$tag$3 = $tag$0496;
	           }
	          } else {
	           $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i469;$tag$3 = $tag$0496;
	          }
	         } else {
	          $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i468;$tag$3 = $tag$0496;
	         }
	        } else {
	         $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = $call$i466;$tag$3 = $tag$0496;
	        }
	       } else if ((($18|0) == 0)) {
	        $obj = (($8) + 4|0);
	        $19 = HEAP32[$obj>>2]|0;
	        $20 = HEAP32[$19>>2]|0;
	        $cmp122 = ($20|0)>(-1);
	        $cmp124 = ($20|0)==(-4);
	        $or$cond310 = $cmp122 | $cmp124;
	        if ($or$cond310) {
	         $21 = HEAP32[$regset$0505>>2]|0;
	         $cmp128 = ($21|0)>(-1);
	         if ($cmp128) {
	          if ($$cmp1) {
	           $num_tags155 = (($8) + 20|0);
	           HEAP32[$num_tags155>>2] = 1;
	           $minimal_tag$2 = $minimal_tag$0490;$num_minimals$2 = $num_minimals$0499;$status$2 = 0;
	          } else {
	           $call132 = (_tre_add_tag_left($mem,$8,$tag$0496)|0);
	           $22 = HEAP32[$tag_directions>>2]|0;
	           $arrayidx133 = (($22) + ($tag$0496<<2)|0);
	           HEAP32[$arrayidx133>>2] = $direction$0487;
	           $cmp134 = ($minimal_tag$0490|0)>(-1);
	           if ($cmp134) {
	            $23 = HEAP32[$minimal_tags137>>2]|0;
	            $i126$0 = 0;
	            while(1) {
	             $arrayidx138 = (($23) + ($i126$0<<2)|0);
	             $24 = HEAP32[$arrayidx138>>2]|0;
	             $cmp139 = ($24|0)>(-1);
	             $inc142 = (($i126$0) + 1)|0;
	             if ($cmp139) {
	              $i126$0 = $inc142;
	             } else {
	              break;
	             }
	            }
	            HEAP32[$arrayidx138>>2] = $tag$0496;
	            $arrayidx148 = (($23) + ($inc142<<2)|0);
	            HEAP32[$arrayidx148>>2] = $minimal_tag$0490;
	            $add149 = (($i126$0) + 2)|0;
	            $arrayidx151 = (($23) + ($add149<<2)|0);
	            HEAP32[$arrayidx151>>2] = -1;
	            $inc152 = (($num_minimals$0499) + 1)|0;
	            $minimal_tag$1 = -1;$num_minimals$1 = $inc152;
	           } else {
	            $minimal_tag$1 = $minimal_tag$0490;$num_minimals$1 = $num_minimals$0499;
	           }
	           $25 = HEAP32[$regset$0505>>2]|0;
	           $cmp8$i408 = ($25|0)>(-1);
	           if ($cmp8$i408) {
	            $26 = HEAP32[$submatch_data$i409>>2]|0;
	            $27 = $25;$i$09$i411 = 0;
	            while(1) {
	             $div$i412 = (($27|0) / 2)&-1;
	             $rem7$i413 = $27 & 1;
	             $lnot$i414 = ($rem7$i413|0)==(0);
	             if ($lnot$i414) {
	              $so_tag$i416 = (($26) + (($div$i412*12)|0)|0);
	              HEAP32[$so_tag$i416>>2] = $tag$0496;
	             } else {
	              $eo_tag$i418 = ((($26) + (($div$i412*12)|0)|0) + 4|0);
	              HEAP32[$eo_tag$i418>>2] = $tag$0496;
	             }
	             $inc$i420 = (($i$09$i411) + 1)|0;
	             $arrayidx$i421 = (($regset$0505) + ($inc$i420<<2)|0);
	             $28 = HEAP32[$arrayidx$i421>>2]|0;
	             $cmp$i422 = ($28|0)>(-1);
	             if ($cmp$i422) {
	              $27 = $28;$i$09$i411 = $inc$i420;
	             } else {
	              break;
	             }
	            }
	           }
	           HEAP32[$regset$0505>>2] = -1;
	           $minimal_tag$2 = $minimal_tag$1;$num_minimals$2 = $num_minimals$1;$status$2 = $call132;
	          }
	          HEAP32[$regset$0505>>2] = -1;
	          $inc158 = (($num_tags$0502) + 1)|0;
	          $inc159 = (($next_tag$0493) + 1)|0;
	          $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$2;$next_tag$4 = $inc159;$num_minimals$9 = $num_minimals$2;$num_tags$3 = $inc158;$status$7 = $status$2;$tag$3 = $next_tag$0493;
	         } else {
	          $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = 0;$tag$3 = $tag$0496;
	         }
	        } else {
	         $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = 0;$tag$3 = $tag$0496;
	        }
	       } else {
	        $direction$1 = $direction$0487;$minimal_tag$9 = $minimal_tag$0490;$next_tag$4 = $next_tag$0493;$num_minimals$9 = $num_minimals$0499;$num_tags$3 = $num_tags$0502;$status$7 = 0;$tag$3 = $tag$0496;
	       }
	      } while(0);
	      $66 = HEAP32[$submatch_id>>2]|0;
	      $cmp427 = ($66|0)>(-1);
	      if ($cmp427) {
	       $i430$0 = 0;
	       while(1) {
	        $arrayidx432 = (($call11) + ($i430$0<<2)|0);
	        $67 = HEAP32[$arrayidx432>>2]|0;
	        $cmp433 = ($67|0)>(-1);
	        $inc437 = (($i430$0) + 1)|0;
	        if ($cmp433) {
	         $i430$0 = $inc437;
	        } else {
	         break;
	        }
	       }
	       HEAP32[$arrayidx432>>2] = $66;
	       $arrayidx442 = (($call11) + ($inc437<<2)|0);
	       HEAP32[$arrayidx442>>2] = -1;
	       $direction$0$be = $direction$1;$minimal_tag$0$be = $minimal_tag$9;$next_tag$0$be = $next_tag$4;$num_minimals$0$be = $num_minimals$9;$num_tags$0$be = $num_tags$3;$regset$0$be = $regset$0505;$status$0$be = $status$7;$tag$0$be = $tag$3;
	      } else {
	       $direction$0$be = $direction$1;$minimal_tag$0$be = $minimal_tag$9;$next_tag$0$be = $next_tag$4;$num_minimals$0$be = $num_minimals$9;$num_tags$0$be = $num_tags$3;$regset$0$be = $regset$0505;$status$0$be = $status$7;$tag$0$be = $tag$3;
	      }
	      break;
	     }
	     default: {
	      $direction$0$be = $direction$0487;$minimal_tag$0$be = $minimal_tag$0490;$next_tag$0$be = $next_tag$0493;$num_minimals$0$be = $num_minimals$0499;$num_tags$0$be = $num_tags$0502;$regset$0$be = $regset$0505;$status$0$be = 0;$tag$0$be = $tag$0496;
	     }
	     }
	    } while(0);
	    $stack$idx$val = HEAP32[$stack$idx312>>2]|0;
	    $cmp32 = ($stack$idx$val|0)>($stack$idx312$val|0);
	    $cmp33 = ($status$0$be|0)==(0);
	    $or$cond = $cmp32 & $cmp33;
	    if ($or$cond) {
	     $2 = $stack$idx$val;$direction$0487 = $direction$0$be;$minimal_tag$0490 = $minimal_tag$0$be;$next_tag$0493 = $next_tag$0$be;$num_minimals$0499 = $num_minimals$0$be;$num_tags$0502 = $num_tags$0$be;$regset$0505 = $regset$0$be;$tag$0496 = $tag$0$be;
	    } else {
	     $minimal_tag$0$lcssa = $minimal_tag$0$be;$num_minimals$0$lcssa = $num_minimals$0$be;$num_tags$0$lcssa = $num_tags$0$be;$regset$0$lcssa = $regset$0$be;$status$0$lcssa = $status$0$be;$tag$0$lcssa = $tag$0$be;
	     break L14;
	    }
	   }
	  } else {
	   $minimal_tag$0$lcssa = -1;$num_minimals$0$lcssa = 0;$num_tags$0$lcssa = 0;$regset$0$lcssa = $call3;$status$0$lcssa = $call$i313;$tag$0$lcssa = 0;
	  }
	 } while(0);
	 if ($$cmp1) {
	  $num_minimals$10 = $num_minimals$0$lcssa;
	 } else {
	  $101 = HEAP32[$regset$0$lcssa>>2]|0;
	  $cmp8$i = ($101|0)>(-1);
	  if ($cmp8$i) {
	   $submatch_data$i = (($tnfa) + 16|0);
	   $102 = HEAP32[$submatch_data$i>>2]|0;
	   $103 = $101;$i$09$i = 0;
	   while(1) {
	    $div$i = (($103|0) / 2)&-1;
	    $rem7$i = $103 & 1;
	    $lnot$i = ($rem7$i|0)==(0);
	    if ($lnot$i) {
	     $so_tag$i = (($102) + (($div$i*12)|0)|0);
	     HEAP32[$so_tag$i>>2] = $tag$0$lcssa;
	    } else {
	     $eo_tag$i = ((($102) + (($div$i*12)|0)|0) + 4|0);
	     HEAP32[$eo_tag$i>>2] = $tag$0$lcssa;
	    }
	    $inc$i = (($i$09$i) + 1)|0;
	    $arrayidx$i = (($regset$0$lcssa) + ($inc$i<<2)|0);
	    $104 = HEAP32[$arrayidx$i>>2]|0;
	    $cmp$i = ($104|0)>(-1);
	    if ($cmp$i) {
	     $103 = $104;$i$09$i = $inc$i;
	    } else {
	     break;
	    }
	   }
	  }
	  HEAP32[$regset$0$lcssa>>2] = -1;
	  $cmp542 = ($minimal_tag$0$lcssa|0)>(-1);
	  if ($cmp542) {
	   $minimal_tags547 = (($tnfa) + 36|0);
	   $105 = HEAP32[$minimal_tags547>>2]|0;
	   $i545$0 = 0;
	   while(1) {
	    $arrayidx548 = (($105) + ($i545$0<<2)|0);
	    $106 = HEAP32[$arrayidx548>>2]|0;
	    $cmp549 = ($106|0)>(-1);
	    $inc553 = (($i545$0) + 1)|0;
	    if ($cmp549) {
	     $i545$0 = $inc553;
	    } else {
	     break;
	    }
	   }
	   HEAP32[$arrayidx548>>2] = $tag$0$lcssa;
	   $arrayidx559 = (($105) + ($inc553<<2)|0);
	   HEAP32[$arrayidx559>>2] = $minimal_tag$0$lcssa;
	   $add560 = (($i545$0) + 2)|0;
	   $arrayidx562 = (($105) + ($add560<<2)|0);
	   HEAP32[$arrayidx562>>2] = -1;
	   $inc563 = (($num_minimals$0$lcssa) + 1)|0;
	   $num_minimals$10 = $inc563;
	  } else {
	   $num_minimals$10 = $num_minimals$0$lcssa;
	  }
	 }
	 $end_tag565 = (($tnfa) + 48|0);
	 HEAP32[$end_tag565>>2] = $num_tags$0$lcssa;
	 $num_tags566 = (($tnfa) + 40|0);
	 HEAP32[$num_tags566>>2] = $num_tags$0$lcssa;
	 $num_minimals567 = (($tnfa) + 44|0);
	 HEAP32[$num_minimals567>>2] = $num_minimals$10;
	 _free($call3);
	 _free($call11);
	 $retval$0 = $status$0$lcssa;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _tre_ast_to_tnfa($node,$transitions,$counts,$offs) {
	 $node = $node|0;
	 $transitions = $transitions|0;
	 $counts = $counts|0;
	 $offs = $offs|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call11 = 0, $call24 = 0, $call6 = 0, $cmp = 0, $cmp12 = 0;
	 var $cmp19 = 0, $cmp25 = 0, $cmp7 = 0, $firstpos = 0, $firstpos23 = 0, $lastpos = 0, $lastpos21 = 0, $max = 0, $node$tr = 0, $node$tr$be = 0, $node$tr$be$in = 0, $obj = 0, $obj18 = 0, $obj3 = 0, $retval$0 = 0, $right = 0, $right5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $node$tr = $node;
	 while(1) {
	  $0 = HEAP32[$node$tr>>2]|0;
	  if ((($0|0) == 3)) {
	   $obj = (($node$tr) + 4|0);
	   $1 = HEAP32[$obj>>2]|0;
	   $2 = HEAP32[$1>>2]|0;
	   $call = (_tre_ast_to_tnfa($2,$transitions,$counts,$offs)|0);
	   $cmp = ($call|0)==(0);
	   if (!($cmp)) {
	    $retval$0 = $call;
	    label = 10;
	    break;
	   }
	   $right = (($1) + 4|0);
	   $node$tr$be$in = $right;
	  } else if ((($0|0) == 2)) {
	   $obj18 = (($node$tr) + 4|0);
	   $9 = HEAP32[$obj18>>2]|0;
	   $max = (($9) + 8|0);
	   $10 = HEAP32[$max>>2]|0;
	   $cmp19 = ($10|0)==(-1);
	   if ($cmp19) {
	    $11 = HEAP32[$9>>2]|0;
	    $lastpos21 = (($11) + 28|0);
	    $12 = HEAP32[$lastpos21>>2]|0;
	    $firstpos23 = (($11) + 24|0);
	    $13 = HEAP32[$firstpos23>>2]|0;
	    $call24 = (_tre_make_trans($12,$13,$transitions,$counts,$offs)|0);
	    $cmp25 = ($call24|0)==(0);
	    if ($cmp25) {
	     $node$tr$be$in = $9;
	    } else {
	     $retval$0 = $call24;
	     label = 10;
	     break;
	    }
	   } else {
	    $node$tr$be$in = $9;
	   }
	  } else if ((($0|0) == 1)) {
	   $obj3 = (($node$tr) + 4|0);
	   $3 = HEAP32[$obj3>>2]|0;
	   $4 = HEAP32[$3>>2]|0;
	   $lastpos = (($4) + 28|0);
	   $5 = HEAP32[$lastpos>>2]|0;
	   $right5 = (($3) + 4|0);
	   $6 = HEAP32[$right5>>2]|0;
	   $firstpos = (($6) + 24|0);
	   $7 = HEAP32[$firstpos>>2]|0;
	   $call6 = (_tre_make_trans($5,$7,$transitions,$counts,$offs)|0);
	   $cmp7 = ($call6|0)==(0);
	   if (!($cmp7)) {
	    $retval$0 = $call6;
	    label = 10;
	    break;
	   }
	   $8 = HEAP32[$3>>2]|0;
	   $call11 = (_tre_ast_to_tnfa($8,$transitions,$counts,$offs)|0);
	   $cmp12 = ($call11|0)==(0);
	   if ($cmp12) {
	    $node$tr$be$in = $right5;
	   } else {
	    $retval$0 = $call11;
	    label = 10;
	    break;
	   }
	  } else {
	   $retval$0 = 0;
	   label = 10;
	   break;
	  }
	  $node$tr$be = HEAP32[$node$tr$be$in>>2]|0;
	  $node$tr = $node$tr$be;
	 }
	 if ((label|0) == 10) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _regfree($preg) {
	 $preg = $preg|0;
	 var $$lcssa = 0, $$lcssa42 = 0, $$pre = 0, $$pre49 = 0, $$pre50 = 0, $$pre51 = 0, $$pre52 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
	 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__opaque = 0, $cmp = 0, $cmp43 = 0, $cmp44 = 0, $cmp4437 = 0, $firstpos_chars = 0, $i$044 = 0, $i$138 = 0;
	 var $inc = 0, $inc55 = 0, $incdec$ptr = 0, $initial = 0, $minimal_tags = 0, $neg_classes = 0, $num_submatches = 0, $num_transitions = 0, $parents = 0, $state = 0, $state29 = 0, $state2939 = 0, $submatch_data = 0, $tag_directions = 0, $tags = 0, $tags32 = 0, $tobool = 0, $tobool1 = 0, $tobool13 = 0, $tobool21 = 0;
	 var $tobool25 = 0, $tobool30 = 0, $tobool3040 = 0, $tobool33 = 0, $tobool41 = 0, $tobool48 = 0, $tobool5 = 0, $tobool59 = 0, $tobool63 = 0, $tobool67 = 0, $trans$041 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $__opaque = (($preg) + 4|0);
	 $0 = HEAP32[$__opaque>>2]|0;
	 $tobool = ($0|0)==(0|0);
	 if ($tobool) {
	  STACKTOP = sp;return;
	 }
	 $num_transitions = (($0) + 4|0);
	 $1 = HEAP32[$num_transitions>>2]|0;
	 $cmp43 = ($1|0)==(0);
	 $2 = HEAP32[$0>>2]|0;
	 if ($cmp43) {
	  $$lcssa42 = $2;
	 } else {
	  $3 = $2;$i$044 = 0;
	  while(1) {
	   $state = ((($3) + ($i$044<<5)|0) + 8|0);
	   $4 = HEAP32[$state>>2]|0;
	   $tobool1 = ($4|0)==(0|0);
	   if ($tobool1) {
	    $22 = $3;
	   } else {
	    $tags = ((($3) + ($i$044<<5)|0) + 16|0);
	    $5 = HEAP32[$tags>>2]|0;
	    $tobool5 = ($5|0)==(0|0);
	    if ($tobool5) {
	     $6 = $3;
	    } else {
	     _free($5);
	     $$pre52 = HEAP32[$0>>2]|0;
	     $6 = $$pre52;
	    }
	    $neg_classes = ((($6) + ($i$044<<5)|0) + 28|0);
	    $7 = HEAP32[$neg_classes>>2]|0;
	    $tobool13 = ($7|0)==(0|0);
	    if ($tobool13) {
	     $22 = $6;
	    } else {
	     _free($7);
	     $$pre51 = HEAP32[$0>>2]|0;
	     $22 = $$pre51;
	    }
	   }
	   $inc = (($i$044) + 1)|0;
	   $8 = HEAP32[$num_transitions>>2]|0;
	   $cmp = ($inc>>>0)<($8>>>0);
	   if ($cmp) {
	    $3 = $22;$i$044 = $inc;
	   } else {
	    $$lcssa42 = $22;
	    break;
	   }
	  }
	 }
	 $tobool21 = ($$lcssa42|0)==(0|0);
	 if (!($tobool21)) {
	  _free($$lcssa42);
	 }
	 $initial = (($0) + 8|0);
	 $9 = HEAP32[$initial>>2]|0;
	 $tobool25 = ($9|0)==(0|0);
	 if (!($tobool25)) {
	  $state2939 = (($9) + 8|0);
	  $10 = HEAP32[$state2939>>2]|0;
	  $tobool3040 = ($10|0)==(0|0);
	  if ($tobool3040) {
	   $13 = $9;
	  } else {
	   $trans$041 = $9;
	   while(1) {
	    $tags32 = (($trans$041) + 16|0);
	    $11 = HEAP32[$tags32>>2]|0;
	    $tobool33 = ($11|0)==(0|0);
	    if (!($tobool33)) {
	     _free($11);
	    }
	    $incdec$ptr = (($trans$041) + 32|0);
	    $state29 = (($trans$041) + 40|0);
	    $12 = HEAP32[$state29>>2]|0;
	    $tobool30 = ($12|0)==(0|0);
	    if ($tobool30) {
	     break;
	    } else {
	     $trans$041 = $incdec$ptr;
	    }
	   }
	   $$pre50 = HEAP32[$initial>>2]|0;
	   $13 = $$pre50;
	  }
	  _free($13);
	 }
	 $submatch_data = (($0) + 16|0);
	 $14 = HEAP32[$submatch_data>>2]|0;
	 $tobool41 = ($14|0)==(0|0);
	 if (!($tobool41)) {
	  $num_submatches = (($0) + 28|0);
	  $15 = HEAP32[$num_submatches>>2]|0;
	  $cmp4437 = ($15|0)==(0);
	  if ($cmp4437) {
	   $$lcssa = $14;
	  } else {
	   $16 = $14;$23 = $15;$i$138 = 0;
	   while(1) {
	    $parents = ((($16) + (($i$138*12)|0)|0) + 8|0);
	    $17 = HEAP32[$parents>>2]|0;
	    $tobool48 = ($17|0)==(0|0);
	    if ($tobool48) {
	     $18 = $23;$24 = $16;
	    } else {
	     _free($17);
	     $$pre = HEAP32[$num_submatches>>2]|0;
	     $$pre49 = HEAP32[$submatch_data>>2]|0;
	     $18 = $$pre;$24 = $$pre49;
	    }
	    $inc55 = (($i$138) + 1)|0;
	    $cmp44 = ($inc55>>>0)<($18>>>0);
	    if ($cmp44) {
	     $16 = $24;$23 = $18;$i$138 = $inc55;
	    } else {
	     $$lcssa = $24;
	     break;
	    }
	   }
	  }
	  _free($$lcssa);
	 }
	 $tag_directions = (($0) + 32|0);
	 $19 = HEAP32[$tag_directions>>2]|0;
	 $tobool59 = ($19|0)==(0|0);
	 if (!($tobool59)) {
	  _free($19);
	 }
	 $firstpos_chars = (($0) + 20|0);
	 $20 = HEAP32[$firstpos_chars>>2]|0;
	 $tobool63 = ($20|0)==(0|0);
	 if (!($tobool63)) {
	  _free($20);
	 }
	 $minimal_tags = (($0) + 36|0);
	 $21 = HEAP32[$minimal_tags>>2]|0;
	 $tobool67 = ($21|0)==(0|0);
	 if (!($tobool67)) {
	  _free($21);
	 }
	 _free($0);
	 STACKTOP = sp;return;
	}
	function _tre_make_trans($p1,$p2,$transitions,$counts,$offs) {
	 $p1 = $p1|0;
	 $p2 = $p2|0;
	 $transitions = $transitions|0;
	 $counts = $counts|0;
	 $offs = $offs|0;
	 var $$pre = 0, $$pre137 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
	 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
	 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr25 = 0, $add103 = 0, $add99 = 0, $arrayidx = 0, $arrayidx116 = 0, $arrayidx122 = 0, $arrayidx131 = 0, $arrayidx138 = 0, $arrayidx153 = 0;
	 var $arrayidx159 = 0, $arrayidx175 = 0, $arrayidx24 = 0, $arrayidx48 = 0, $arrayidx57 = 0, $arrayidx68 = 0, $arrayidx68$lcssa = 0, $arrayidx68100 = 0, $arrayidx76 = 0, $arrayidx87 = 0, $assertions28 = 0, $assertions33 = 0, $backref37 = 0, $call = 0, $call105 = 0, $cmp = 0, $cmp1 = 0, $cmp100 = 0, $cmp112 = 0, $cmp117 = 0;
	 var $cmp117102 = 0, $cmp12 = 0, $cmp127 = 0, $cmp132 = 0, $cmp132108 = 0, $cmp135 = 0, $cmp135105 = 0, $cmp141 = 0, $cmp168 = 0, $cmp16893 = 0, $cmp172 = 0, $cmp17290 = 0, $cmp30 = 0, $cmp34 = 0, $cmp4 = 0, $cmp4119 = 0, $cmp4119123 = 0, $cmp45 = 0, $cmp49 = 0, $cmp52 = 0;
	 var $cmp58 = 0, $cmp5897 = 0, $cmp7 = 0, $cmp72 = 0, $cmp77 = 0, $cmp83 = 0, $cmp88 = 0, $cmp94 = 0, $code_max22 = 0, $cond = 0, $cond31 = 0, $i$0 = 0, $i$199 = 0, $i$2 = 0, $i$3 = 0, $i$4103 = 0, $i$5 = 0, $inc = 0, $inc123 = 0, $inc145 = 0;
	 var $inc151 = 0, $inc155 = 0, $inc176 = 0, $inc65 = 0, $inc79 = 0, $inc90 = 0, $incdec$ptr = 0, $incdec$ptr14 = 0, $incdec$ptr163 = 0, $incdec$ptr177 = 0, $incdec$ptr179 = 0, $j$0 = 0, $j$1 = 0, $j$2109 = 0, $k$0106 = 0, $l$0111 = 0, $l$1 = 0, $l$2 = 0, $mul = 0, $mul104 = 0;
	 var $neg_classes = 0, $neg_classes50 = 0, $neg_classes70 = 0, $or = 0, $or29 = 0, $or32 = 0, $or39 = 0, $p2$addr$0$ph124 = 0, $p2$addr$0120 = 0, $p2$addr$191 = 0, $position131 = 0, $position16795 = 0, $position3118126 = 0, $position3121 = 0, $prev_p2_pos$0$ph125 = 0, $retval$0 = 0, $state = 0, $state19 = 0, $state_id = 0, $tags = 0;
	 var $tags82 = 0, $tags93 = 0, $tobool = 0, $tobool108 = 0, $trans$0 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($transitions|0)==(0|0);
	 $0 = HEAP32[$p1>>2]|0;
	 $cmp16893 = ($0|0)>(-1);
	 if ($cmp) {
	  if (!($cmp16893)) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $46 = $0;$position16795 = $p1;
	  while(1) {
	   $41 = HEAP32[$p2>>2]|0;
	   $cmp17290 = ($41|0)>(-1);
	   L8: do {
	    if ($cmp17290) {
	     $42 = $46;$p2$addr$191 = $p2;
	     while(1) {
	      $arrayidx175 = (($counts) + ($42<<2)|0);
	      $43 = HEAP32[$arrayidx175>>2]|0;
	      $inc176 = (($43) + 1)|0;
	      HEAP32[$arrayidx175>>2] = $inc176;
	      $incdec$ptr177 = (($p2$addr$191) + 32|0);
	      $44 = HEAP32[$incdec$ptr177>>2]|0;
	      $cmp172 = ($44|0)>(-1);
	      if (!($cmp172)) {
	       break L8;
	      }
	      $$pre = HEAP32[$position16795>>2]|0;
	      $42 = $$pre;$p2$addr$191 = $incdec$ptr177;
	     }
	    }
	   } while(0);
	   $incdec$ptr179 = (($position16795) + 32|0);
	   $45 = HEAP32[$incdec$ptr179>>2]|0;
	   $cmp168 = ($45|0)>(-1);
	   if ($cmp168) {
	    $46 = $45;$position16795 = $incdec$ptr179;
	   } else {
	    $retval$0 = 0;
	    break;
	   }
	  }
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 if (!($cmp16893)) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $position131 = $p1;
	 L18: while(1) {
	  $1 = HEAP32[$p2>>2]|0;
	  $cmp4119123 = ($1|0)>(-1);
	  L20: do {
	   if ($cmp4119123) {
	    $2 = (($position131) + 4|0);
	    $3 = (($position131) + 8|0);
	    $4 = (($position131) + 16|0);
	    $5 = (($position131) + 20|0);
	    $neg_classes = (($position131) + 24|0);
	    $6 = (($position131) + 28|0);
	    $tags = (($position131) + 12|0);
	    $47 = $1;$p2$addr$0$ph124 = $p2;$position3118126 = $p2;$prev_p2_pos$0$ph125 = -1;
	    while(1) {
	     $8 = $47;$p2$addr$0120 = $p2$addr$0$ph124;$position3121 = $position3118126;
	     while(1) {
	      $cmp7 = ($8|0)==($prev_p2_pos$0$ph125|0);
	      $incdec$ptr = (($p2$addr$0120) + 32|0);
	      if (!($cmp7)) {
	       break;
	      }
	      $7 = HEAP32[$incdec$ptr>>2]|0;
	      $cmp4 = ($7|0)>(-1);
	      if ($cmp4) {
	       $8 = $7;$p2$addr$0120 = $incdec$ptr;$position3121 = $incdec$ptr;
	      } else {
	       break L20;
	      }
	     }
	     $9 = HEAP32[$position131>>2]|0;
	     $arrayidx = (($offs) + ($9<<2)|0);
	     $10 = HEAP32[$arrayidx>>2]|0;
	     $add$ptr = (($transitions) + ($10<<5)|0);
	     $trans$0 = $add$ptr;
	     while(1) {
	      $state = (($trans$0) + 8|0);
	      $11 = HEAP32[$state>>2]|0;
	      $cmp12 = ($11|0)==(0|0);
	      $incdec$ptr14 = (($trans$0) + 32|0);
	      if ($cmp12) {
	       break;
	      } else {
	       $trans$0 = $incdec$ptr14;
	      }
	     }
	     $state19 = (($trans$0) + 40|0);
	     HEAP32[$state19>>2] = 0;
	     $12 = HEAP32[$2>>2]|0;
	     HEAP32[$trans$0>>2] = $12;
	     $13 = HEAP32[$3>>2]|0;
	     $code_max22 = (($trans$0) + 4|0);
	     HEAP32[$code_max22>>2] = $13;
	     $14 = HEAP32[$position3121>>2]|0;
	     $arrayidx24 = (($offs) + ($14<<2)|0);
	     $15 = HEAP32[$arrayidx24>>2]|0;
	     $add$ptr25 = (($transitions) + ($15<<5)|0);
	     HEAP32[$state>>2] = $add$ptr25;
	     $state_id = (($trans$0) + 12|0);
	     HEAP32[$state_id>>2] = $14;
	     $16 = HEAP32[$4>>2]|0;
	     $assertions28 = (($p2$addr$0120) + 16|0);
	     $17 = HEAP32[$assertions28>>2]|0;
	     $or = $17 | $16;
	     $18 = HEAP32[$5>>2]|0;
	     $tobool = ($18|0)!=(0);
	     $cond = $tobool ? 4 : 0;
	     $or29 = $or | $cond;
	     $19 = HEAP32[$neg_classes>>2]|0;
	     $cmp30 = ($19|0)!=(0|0);
	     $cond31 = $cmp30 ? 8 : 0;
	     $or32 = $or29 | $cond31;
	     $assertions33 = (($trans$0) + 20|0);
	     HEAP32[$assertions33>>2] = $or32;
	     $20 = HEAP32[$6>>2]|0;
	     $cmp34 = ($20|0)>(-1);
	     $backref37 = (($trans$0) + 24|0);
	     if ($cmp34) {
	      HEAP32[$backref37>>2] = $20;
	      $or39 = $or32 | 256;
	      HEAP32[$assertions33>>2] = $or39;
	     } else {
	      HEAP32[$backref37>>2] = $18;
	     }
	     $cmp45 = ($19|0)==(0|0);
	     if ($cmp45) {
	      $neg_classes70 = (($trans$0) + 28|0);
	      HEAP32[$neg_classes70>>2] = 0;
	     } else {
	      $i$0 = 0;
	      while(1) {
	       $arrayidx48 = (($19) + ($i$0<<2)|0);
	       $21 = HEAP32[$arrayidx48>>2]|0;
	       $cmp49 = ($21|0)==(0);
	       $inc = (($i$0) + 1)|0;
	       if ($cmp49) {
	        break;
	       } else {
	        $i$0 = $inc;
	       }
	      }
	      $mul = $inc << 2;
	      $call = (_malloc($mul)|0);
	      $neg_classes50 = (($trans$0) + 28|0);
	      HEAP32[$neg_classes50>>2] = $call;
	      $cmp52 = ($call|0)==(0|0);
	      if ($cmp52) {
	       $retval$0 = 12;
	       label = 49;
	       break L18;
	      }
	      $22 = HEAP32[$neg_classes>>2]|0;
	      $23 = HEAP32[$22>>2]|0;
	      $cmp5897 = ($23|0)==(0);
	      if ($cmp5897) {
	       $arrayidx68$lcssa = $call;
	      } else {
	       $24 = $23;$arrayidx68100 = $call;$i$199 = 0;
	       while(1) {
	        HEAP32[$arrayidx68100>>2] = $24;
	        $inc65 = (($i$199) + 1)|0;
	        $arrayidx57 = (($22) + ($inc65<<2)|0);
	        $25 = HEAP32[$arrayidx57>>2]|0;
	        $cmp58 = ($25|0)==(0);
	        $arrayidx68 = (($call) + ($inc65<<2)|0);
	        if ($cmp58) {
	         $arrayidx68$lcssa = $arrayidx68;
	         break;
	        } else {
	         $24 = $25;$arrayidx68100 = $arrayidx68;$i$199 = $inc65;
	        }
	       }
	      }
	      HEAP32[$arrayidx68$lcssa>>2] = 0;
	     }
	     $26 = HEAP32[$tags>>2]|0;
	     $cmp72 = ($26|0)==(0|0);
	     if ($cmp72) {
	      $i$3 = 0;
	     } else {
	      $i$2 = 0;
	      while(1) {
	       $arrayidx76 = (($26) + ($i$2<<2)|0);
	       $27 = HEAP32[$arrayidx76>>2]|0;
	       $cmp77 = ($27|0)>(-1);
	       $inc79 = (($i$2) + 1)|0;
	       if ($cmp77) {
	        $i$2 = $inc79;
	       } else {
	        $i$3 = $i$2;
	        break;
	       }
	      }
	     }
	     $tags82 = (($p2$addr$0120) + 12|0);
	     $28 = HEAP32[$tags82>>2]|0;
	     $cmp83 = ($28|0)==(0|0);
	     if ($cmp83) {
	      $j$1 = 0;
	     } else {
	      $j$0 = 0;
	      while(1) {
	       $arrayidx87 = (($28) + ($j$0<<2)|0);
	       $29 = HEAP32[$arrayidx87>>2]|0;
	       $cmp88 = ($29|0)>(-1);
	       $inc90 = (($j$0) + 1)|0;
	       if ($cmp88) {
	        $j$0 = $inc90;
	       } else {
	        $j$1 = $j$0;
	        break;
	       }
	      }
	     }
	     $tags93 = (($trans$0) + 16|0);
	     $30 = HEAP32[$tags93>>2]|0;
	     $cmp94 = ($30|0)==(0|0);
	     if (!($cmp94)) {
	      _free($30);
	     }
	     HEAP32[$tags93>>2] = 0;
	     $add99 = (($j$1) + ($i$3))|0;
	     $cmp100 = ($add99|0)>(0);
	     if ($cmp100) {
	      $add103 = $add99 << 2;
	      $mul104 = (($add103) + 4)|0;
	      $call105 = (_malloc($mul104)|0);
	      HEAP32[$tags93>>2] = $call105;
	      $tobool108 = ($call105|0)==(0|0);
	      if ($tobool108) {
	       $retval$0 = 12;
	       label = 49;
	       break L18;
	      }
	      $31 = HEAP32[$tags>>2]|0;
	      $cmp112 = ($31|0)==(0|0);
	      if ($cmp112) {
	       $i$5 = 0;
	      } else {
	       $32 = HEAP32[$31>>2]|0;
	       $cmp117102 = ($32|0)>(-1);
	       if ($cmp117102) {
	        $33 = $32;$i$4103 = 0;
	        while(1) {
	         $arrayidx122 = (($call105) + ($i$4103<<2)|0);
	         HEAP32[$arrayidx122>>2] = $33;
	         $inc123 = (($i$4103) + 1)|0;
	         $arrayidx116 = (($31) + ($inc123<<2)|0);
	         $34 = HEAP32[$arrayidx116>>2]|0;
	         $cmp117 = ($34|0)>(-1);
	         if ($cmp117) {
	          $33 = $34;$i$4103 = $inc123;
	         } else {
	          $i$5 = $inc123;
	          break;
	         }
	        }
	       } else {
	        $i$5 = 0;
	       }
	      }
	      $35 = HEAP32[$tags82>>2]|0;
	      $cmp127 = ($35|0)==(0|0);
	      if ($cmp127) {
	       $l$2 = $i$5;
	      } else {
	       $36 = HEAP32[$35>>2]|0;
	       $cmp132108 = ($36|0)>(-1);
	       if ($cmp132108) {
	        $cmp135105 = ($i$5|0)>(0);
	        $$pre137 = $36;$j$2109 = 0;$l$0111 = $i$5;
	        while(1) {
	         L70: do {
	          if ($cmp135105) {
	           $k$0106 = 0;
	           while(1) {
	            $arrayidx138 = (($call105) + ($k$0106<<2)|0);
	            $37 = HEAP32[$arrayidx138>>2]|0;
	            $cmp141 = ($37|0)==($$pre137|0);
	            $inc145 = (($k$0106) + 1)|0;
	            if ($cmp141) {
	             $l$1 = $l$0111;
	             break L70;
	            }
	            $cmp135 = ($inc145|0)<($i$5|0);
	            if ($cmp135) {
	             $k$0106 = $inc145;
	            } else {
	             label = 40;
	             break;
	            }
	           }
	          } else {
	           label = 40;
	          }
	         } while(0);
	         if ((label|0) == 40) {
	          label = 0;
	          $inc151 = (($l$0111) + 1)|0;
	          $arrayidx153 = (($call105) + ($l$0111<<2)|0);
	          HEAP32[$arrayidx153>>2] = $$pre137;
	          $l$1 = $inc151;
	         }
	         $inc155 = (($j$2109) + 1)|0;
	         $arrayidx131 = (($35) + ($inc155<<2)|0);
	         $38 = HEAP32[$arrayidx131>>2]|0;
	         $cmp132 = ($38|0)>(-1);
	         if ($cmp132) {
	          $$pre137 = $38;$j$2109 = $inc155;$l$0111 = $l$1;
	         } else {
	          $l$2 = $l$1;
	          break;
	         }
	        }
	       } else {
	        $l$2 = $i$5;
	       }
	      }
	      $arrayidx159 = (($call105) + ($l$2<<2)|0);
	      HEAP32[$arrayidx159>>2] = -1;
	     }
	     $39 = HEAP32[$incdec$ptr>>2]|0;
	     $cmp4119 = ($39|0)>(-1);
	     if ($cmp4119) {
	      $47 = $39;$p2$addr$0$ph124 = $incdec$ptr;$position3118126 = $incdec$ptr;$prev_p2_pos$0$ph125 = $8;
	     } else {
	      break;
	     }
	    }
	   }
	  } while(0);
	  $incdec$ptr163 = (($position131) + 32|0);
	  $40 = HEAP32[$incdec$ptr163>>2]|0;
	  $cmp1 = ($40|0)>(-1);
	  if ($cmp1) {
	   $position131 = $incdec$ptr163;
	  } else {
	   $retval$0 = 0;
	   label = 49;
	   break;
	  }
	 }
	 if ((label|0) == 49) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _tre_set_union($mem,$set1,$set2,$tags,$assertions) {
	 $mem = $mem|0;
	 $set1 = $set1|0;
	 $set2 = $set2|0;
	 $tags = $tags|0;
	 $assertions = $assertions|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add108 = 0, $add108147 = 0, $add158 = 0, $add17 = 0, $add67 = 0, $add68 = 0, $add88 = 0, $add93 = 0, $arrayidx = 0;
	 var $arrayidx152 = 0, $arrayidx169 = 0, $arrayidx170 = 0, $arrayidx174 = 0, $arrayidx60 = 0, $arrayidx79 = 0, $arrayidx80 = 0, $arrayidx87 = 0, $arrayidx89 = 0, $arrayidx94 = 0, $assertions122 = 0, $assertions125 = 0, $assertions34 = 0, $assertions36 = 0, $backref = 0, $backref137 = 0, $backref140 = 0, $backref45 = 0, $call = 0, $call160 = 0;
	 var $call70 = 0, $class = 0, $class127 = 0, $class130 = 0, $class39 = 0, $cmp = 0, $cmp1 = 0, $cmp104 = 0, $cmp104143 = 0, $cmp12 = 0, $cmp143 = 0, $cmp153 = 0, $cmp161 = 0, $cmp165139 = 0, $cmp21 = 0, $cmp21162 = 0, $cmp4 = 0, $cmp48 = 0, $cmp61 = 0, $cmp71 = 0;
	 var $cmp75153 = 0, $cmp85156 = 0, $code_max = 0, $code_max117 = 0, $code_max120 = 0, $code_max32 = 0, $code_min = 0, $code_min112 = 0, $code_min115 = 0, $code_min29 = 0, $exitcond = 0, $exitcond171 = 0, $exitcond172 = 0, $i$0$lcssa = 0, $i$0151 = 0, $i$1$lcssa = 0, $i$1157 = 0, $i$2 = 0, $inc = 0, $inc15 = 0;
	 var $inc156 = 0, $inc172 = 0, $inc180 = 0, $inc65 = 0, $inc7 = 0, $inc82 = 0, $inc91 = 0, $inc99 = 0, $j$0$lcssa = 0, $j$0154 = 0, $j$1$lcssa = 0, $j$1140 = 0, $mul = 0, $mul159 = 0, $mul69 = 0, $neg_classes = 0, $neg_classes132 = 0, $neg_classes135 = 0, $neg_classes42 = 0, $num_tags$0$lcssa = 0;
	 var $num_tags$0166 = 0, $or = 0, $or$cond = 0, $position = 0, $position103 = 0, $position11 = 0, $position110 = 0, $position110$lcssa = 0, $position110145 = 0, $position110148 = 0, $position20 = 0, $position26 = 0, $retval$0 = 0, $s1$0 = 0, $s1$1$lcssa = 0, $s1$1163 = 0, $s2$0 = 0, $s2$1146 = 0, $tags142 = 0, $tags147 = 0;
	 var $tags177 = 0, $tags47 = 0, $tags52 = 0, $tags96 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($tags|0)==(0|0);
	 L1: do {
	  if ($cmp) {
	   $num_tags$0$lcssa = 0;
	  } else {
	   $num_tags$0166 = 0;
	   while(1) {
	    $arrayidx = (($tags) + ($num_tags$0166<<2)|0);
	    $0 = HEAP32[$arrayidx>>2]|0;
	    $cmp1 = ($0|0)>(-1);
	    if (!($cmp1)) {
	     $num_tags$0$lcssa = $num_tags$0166;
	     break L1;
	    }
	    $inc = (($num_tags$0166) + 1)|0;
	    $num_tags$0166 = $inc;
	   }
	  }
	 } while(0);
	 $s1$0 = 0;
	 while(1) {
	  $position = (($set1) + ($s1$0<<5)|0);
	  $1 = HEAP32[$position>>2]|0;
	  $cmp4 = ($1|0)>(-1);
	  $inc7 = (($s1$0) + 1)|0;
	  if ($cmp4) {
	   $s1$0 = $inc7;
	  } else {
	   $s2$0 = 0;
	   break;
	  }
	 }
	 while(1) {
	  $position11 = (($set2) + ($s2$0<<5)|0);
	  $2 = HEAP32[$position11>>2]|0;
	  $cmp12 = ($2|0)>(-1);
	  $inc15 = (($s2$0) + 1)|0;
	  if ($cmp12) {
	   $s2$0 = $inc15;
	  } else {
	   break;
	  }
	 }
	 $add = (($s2$0) + ($s1$0))|0;
	 $add17 = $add << 5;
	 $mul = (($add17) + 32)|0;
	 $call = (___tre_mem_alloc_impl($mem,0,0,1,$mul)|0);
	 $tobool = ($call|0)==(0|0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $3 = HEAP32[$set1>>2]|0;
	 $cmp21162 = ($3|0)>(-1);
	 L14: do {
	  if ($cmp21162) {
	   $cmp85156 = ($num_tags$0$lcssa|0)>(0);
	   $5 = $3;$s1$1163 = 0;
	   while(1) {
	    $position26 = (($call) + ($s1$1163<<5)|0);
	    HEAP32[$position26>>2] = $5;
	    $code_min = ((($set1) + ($s1$1163<<5)|0) + 4|0);
	    $6 = HEAP32[$code_min>>2]|0;
	    $code_min29 = ((($call) + ($s1$1163<<5)|0) + 4|0);
	    HEAP32[$code_min29>>2] = $6;
	    $code_max = ((($set1) + ($s1$1163<<5)|0) + 8|0);
	    $7 = HEAP32[$code_max>>2]|0;
	    $code_max32 = ((($call) + ($s1$1163<<5)|0) + 8|0);
	    HEAP32[$code_max32>>2] = $7;
	    $assertions34 = ((($set1) + ($s1$1163<<5)|0) + 16|0);
	    $8 = HEAP32[$assertions34>>2]|0;
	    $or = $8 | $assertions;
	    $assertions36 = ((($call) + ($s1$1163<<5)|0) + 16|0);
	    HEAP32[$assertions36>>2] = $or;
	    $class = ((($set1) + ($s1$1163<<5)|0) + 20|0);
	    $9 = HEAP32[$class>>2]|0;
	    $class39 = ((($call) + ($s1$1163<<5)|0) + 20|0);
	    HEAP32[$class39>>2] = $9;
	    $neg_classes = ((($set1) + ($s1$1163<<5)|0) + 24|0);
	    $10 = HEAP32[$neg_classes>>2]|0;
	    $neg_classes42 = ((($call) + ($s1$1163<<5)|0) + 24|0);
	    HEAP32[$neg_classes42>>2] = $10;
	    $backref = ((($set1) + ($s1$1163<<5)|0) + 28|0);
	    $11 = HEAP32[$backref>>2]|0;
	    $backref45 = ((($call) + ($s1$1163<<5)|0) + 28|0);
	    HEAP32[$backref45>>2] = $11;
	    $tags47 = ((($set1) + ($s1$1163<<5)|0) + 12|0);
	    $12 = HEAP32[$tags47>>2]|0;
	    $cmp48 = ($12|0)==(0|0);
	    $or$cond = $cmp48 & $cmp;
	    if ($or$cond) {
	     $tags52 = ((($call) + ($s1$1163<<5)|0) + 12|0);
	     HEAP32[$tags52>>2] = 0;
	    } else {
	     L21: do {
	      if ($cmp48) {
	       $i$0$lcssa = 0;
	      } else {
	       $i$0151 = 0;
	       while(1) {
	        $arrayidx60 = (($12) + ($i$0151<<2)|0);
	        $13 = HEAP32[$arrayidx60>>2]|0;
	        $cmp61 = ($13|0)>(-1);
	        if (!($cmp61)) {
	         $i$0$lcssa = $i$0151;
	         break L21;
	        }
	        $inc65 = (($i$0151) + 1)|0;
	        $i$0151 = $inc65;
	       }
	      }
	     } while(0);
	     $add67 = (($i$0$lcssa) + ($num_tags$0$lcssa))|0;
	     $add68 = $add67 << 2;
	     $mul69 = (($add68) + 4)|0;
	     $call70 = (___tre_mem_alloc_impl($mem,0,0,0,$mul69)|0);
	     $cmp71 = ($call70|0)==(0|0);
	     if ($cmp71) {
	      $retval$0 = 0;
	      break;
	     }
	     $cmp75153 = ($i$0$lcssa|0)>(0);
	     if ($cmp75153) {
	      $14 = HEAP32[$tags47>>2]|0;
	      $j$0154 = 0;
	      while(1) {
	       $arrayidx79 = (($14) + ($j$0154<<2)|0);
	       $15 = HEAP32[$arrayidx79>>2]|0;
	       $arrayidx80 = (($call70) + ($j$0154<<2)|0);
	       HEAP32[$arrayidx80>>2] = $15;
	       $inc82 = (($j$0154) + 1)|0;
	       $exitcond171 = ($inc82|0)==($i$0$lcssa|0);
	       if ($exitcond171) {
	        $j$0$lcssa = $i$0$lcssa;
	        break;
	       } else {
	        $j$0154 = $inc82;
	       }
	      }
	     } else {
	      $j$0$lcssa = 0;
	     }
	     if ($cmp85156) {
	      $i$1157 = 0;
	      while(1) {
	       $arrayidx87 = (($tags) + ($i$1157<<2)|0);
	       $16 = HEAP32[$arrayidx87>>2]|0;
	       $add88 = (($i$1157) + ($j$0$lcssa))|0;
	       $arrayidx89 = (($call70) + ($add88<<2)|0);
	       HEAP32[$arrayidx89>>2] = $16;
	       $inc91 = (($i$1157) + 1)|0;
	       $exitcond172 = ($inc91|0)==($num_tags$0$lcssa|0);
	       if ($exitcond172) {
	        $i$1$lcssa = $num_tags$0$lcssa;
	        break;
	       } else {
	        $i$1157 = $inc91;
	       }
	      }
	     } else {
	      $i$1$lcssa = 0;
	     }
	     $add93 = (($i$1$lcssa) + ($j$0$lcssa))|0;
	     $arrayidx94 = (($call70) + ($add93<<2)|0);
	     HEAP32[$arrayidx94>>2] = -1;
	     $tags96 = ((($call) + ($s1$1163<<5)|0) + 12|0);
	     HEAP32[$tags96>>2] = $call70;
	    }
	    $inc99 = (($s1$1163) + 1)|0;
	    $position20 = (($set1) + ($inc99<<5)|0);
	    $17 = HEAP32[$position20>>2]|0;
	    $cmp21 = ($17|0)>(-1);
	    if ($cmp21) {
	     $5 = $17;$s1$1163 = $inc99;
	    } else {
	     $s1$1$lcssa = $inc99;
	     break L14;
	    }
	   }
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $s1$1$lcssa = 0;
	  }
	 } while(0);
	 $4 = HEAP32[$set2>>2]|0;
	 $cmp104143 = ($4|0)>(-1);
	 $position110145 = (($call) + ($s1$1$lcssa<<5)|0);
	 L39: do {
	  if ($cmp104143) {
	   $18 = $4;$add108147 = $s1$1$lcssa;$position110148 = $position110145;$s2$1146 = 0;
	   while(1) {
	    HEAP32[$position110148>>2] = $18;
	    $code_min112 = ((($set2) + ($s2$1146<<5)|0) + 4|0);
	    $19 = HEAP32[$code_min112>>2]|0;
	    $code_min115 = ((($call) + ($add108147<<5)|0) + 4|0);
	    HEAP32[$code_min115>>2] = $19;
	    $code_max117 = ((($set2) + ($s2$1146<<5)|0) + 8|0);
	    $20 = HEAP32[$code_max117>>2]|0;
	    $code_max120 = ((($call) + ($add108147<<5)|0) + 8|0);
	    HEAP32[$code_max120>>2] = $20;
	    $assertions122 = ((($set2) + ($s2$1146<<5)|0) + 16|0);
	    $21 = HEAP32[$assertions122>>2]|0;
	    $assertions125 = ((($call) + ($add108147<<5)|0) + 16|0);
	    HEAP32[$assertions125>>2] = $21;
	    $class127 = ((($set2) + ($s2$1146<<5)|0) + 20|0);
	    $22 = HEAP32[$class127>>2]|0;
	    $class130 = ((($call) + ($add108147<<5)|0) + 20|0);
	    HEAP32[$class130>>2] = $22;
	    $neg_classes132 = ((($set2) + ($s2$1146<<5)|0) + 24|0);
	    $23 = HEAP32[$neg_classes132>>2]|0;
	    $neg_classes135 = ((($call) + ($add108147<<5)|0) + 24|0);
	    HEAP32[$neg_classes135>>2] = $23;
	    $backref137 = ((($set2) + ($s2$1146<<5)|0) + 28|0);
	    $24 = HEAP32[$backref137>>2]|0;
	    $backref140 = ((($call) + ($add108147<<5)|0) + 28|0);
	    HEAP32[$backref140>>2] = $24;
	    $tags142 = ((($set2) + ($s2$1146<<5)|0) + 12|0);
	    $25 = HEAP32[$tags142>>2]|0;
	    $cmp143 = ($25|0)==(0|0);
	    if ($cmp143) {
	     $tags147 = ((($call) + ($add108147<<5)|0) + 12|0);
	     HEAP32[$tags147>>2] = 0;
	    } else {
	     $i$2 = 0;
	     while(1) {
	      $arrayidx152 = (($25) + ($i$2<<2)|0);
	      $26 = HEAP32[$arrayidx152>>2]|0;
	      $cmp153 = ($26|0)>(-1);
	      $inc156 = (($i$2) + 1)|0;
	      if ($cmp153) {
	       $i$2 = $inc156;
	      } else {
	       break;
	      }
	     }
	     $add158 = $i$2 << 2;
	     $mul159 = (($add158) + 4)|0;
	     $call160 = (___tre_mem_alloc_impl($mem,0,0,0,$mul159)|0);
	     $cmp161 = ($call160|0)==(0|0);
	     if ($cmp161) {
	      $retval$0 = 0;
	      break;
	     }
	     $cmp165139 = ($i$2|0)>(0);
	     if ($cmp165139) {
	      $27 = HEAP32[$tags142>>2]|0;
	      $j$1140 = 0;
	      while(1) {
	       $arrayidx169 = (($27) + ($j$1140<<2)|0);
	       $28 = HEAP32[$arrayidx169>>2]|0;
	       $arrayidx170 = (($call160) + ($j$1140<<2)|0);
	       HEAP32[$arrayidx170>>2] = $28;
	       $inc172 = (($j$1140) + 1)|0;
	       $exitcond = ($inc172|0)==($i$2|0);
	       if ($exitcond) {
	        $j$1$lcssa = $i$2;
	        break;
	       } else {
	        $j$1140 = $inc172;
	       }
	      }
	     } else {
	      $j$1$lcssa = 0;
	     }
	     $arrayidx174 = (($call160) + ($j$1$lcssa<<2)|0);
	     HEAP32[$arrayidx174>>2] = -1;
	     $tags177 = ((($call) + ($add108147<<5)|0) + 12|0);
	     HEAP32[$tags177>>2] = $call160;
	    }
	    $inc180 = (($s2$1146) + 1)|0;
	    $position103 = (($set2) + ($inc180<<5)|0);
	    $29 = HEAP32[$position103>>2]|0;
	    $cmp104 = ($29|0)>(-1);
	    $add108 = (($inc180) + ($s1$1$lcssa))|0;
	    $position110 = (($call) + ($add108<<5)|0);
	    if ($cmp104) {
	     $18 = $29;$add108147 = $add108;$position110148 = $position110;$s2$1146 = $inc180;
	    } else {
	     $position110$lcssa = $position110;
	     break L39;
	    }
	   }
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $position110$lcssa = $position110145;
	  }
	 } while(0);
	 HEAP32[$position110$lcssa>>2] = -1;
	 $retval$0 = $call;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _tre_match_empty($stack,$node,$tags,$assertions,$num_tags_seen) {
	 $stack = $stack|0;
	 $node = $node|0;
	 $tags = $tags|0;
	 $assertions = $assertions|0;
	 $num_tags_seen = $num_tags_seen|0;
	 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
	 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx21 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $call$i = 0, $call$i40 = 0, $call$i41 = 0, $call$i42 = 0, $call$i43 = 0, $call$i44 = 0, $cmp = 0, $cmp10 = 0, $cmp1050 = 0, $cmp13 = 0, $cmp17 = 0, $cmp3 = 0;
	 var $cmp30 = 0, $cmp54 = 0, $cmp58 = 0, $cmp6 = 0, $cmp8 = 0, $code_max = 0, $code_max32 = 0, $dec$i = 0, $i$047 = 0, $i$051 = 0, $inc = 0, $inc26 = 0, $nullable = 0, $nullable43 = 0, $nullable68 = 0, $obj = 0, $obj35 = 0, $obj55 = 0, $obj67 = 0, $or = 0;
	 var $right = 0, $right61 = 0, $stack$i = 0, $stack$idx$val = 0, $stack$idx39 = 0, $stack$idx39$val = 0, $status$0$be = 0, $status$0$lcssa = 0, $tobool = 0, $tobool36 = 0, $tobool44 = 0, $tobool69 = 0, $voidptr_value$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $stack$idx39 = (($stack) + 12|0);
	 $stack$idx39$val = HEAP32[$stack$idx39>>2]|0;
	 $tobool = ($num_tags_seen|0)!=(0|0);
	 if ($tobool) {
	  HEAP32[$num_tags_seen>>2] = 0;
	 }
	 $call$i40 = (_tre_stack_push($stack,$node)|0);
	 $cmp54 = ($call$i40|0)==(0);
	 if (!($cmp54)) {
	  $status$0$lcssa = $call$i40;
	  STACKTOP = sp;return ($status$0$lcssa|0);
	 }
	 $stack$i = (($stack) + 16|0);
	 $cmp8 = ($tags|0)==(0|0);
	 $cmp30 = ($assertions|0)==(0|0);
	 L7: while(1) {
	  $stack$idx$val = HEAP32[$stack$idx39>>2]|0;
	  $cmp3 = ($stack$idx$val|0)>($stack$idx39$val|0);
	  if (!($cmp3)) {
	   $status$0$lcssa = 0;
	   label = 28;
	   break;
	  }
	  $dec$i = (($stack$idx$val) + -1)|0;
	  HEAP32[$stack$idx39>>2] = $dec$i;
	  $0 = HEAP32[$stack$i>>2]|0;
	  $voidptr_value$i = (($0) + ($dec$i<<2)|0);
	  $1 = HEAP32[$voidptr_value$i>>2]|0;
	  $2 = HEAP32[$1>>2]|0;
	  do {
	   if ((($2|0) == 2)) {
	    $obj67 = (($1) + 4|0);
	    $19 = HEAP32[$obj67>>2]|0;
	    $20 = HEAP32[$19>>2]|0;
	    $nullable68 = (($20) + 8|0);
	    $21 = HEAP32[$nullable68>>2]|0;
	    $tobool69 = ($21|0)==(0);
	    if ($tobool69) {
	     continue L7;
	    }
	    $call$i = (_tre_stack_push($stack,$20)|0);
	    $status$0$be = $call$i;
	   } else if ((($2|0) == 3)) {
	    $obj35 = (($1) + 4|0);
	    $11 = HEAP32[$obj35>>2]|0;
	    $12 = HEAP32[$11>>2]|0;
	    $nullable = (($12) + 8|0);
	    $13 = HEAP32[$nullable>>2]|0;
	    $tobool36 = ($13|0)==(0);
	    if (!($tobool36)) {
	     $call$i43 = (_tre_stack_push($stack,$12)|0);
	     $status$0$be = $call$i43;
	     break;
	    }
	    $right = (($11) + 4|0);
	    $14 = HEAP32[$right>>2]|0;
	    $nullable43 = (($14) + 8|0);
	    $15 = HEAP32[$nullable43>>2]|0;
	    $tobool44 = ($15|0)==(0);
	    if ($tobool44) {
	     continue L7;
	    }
	    $call$i44 = (_tre_stack_push($stack,$14)|0);
	    $status$0$be = $call$i44;
	   } else if ((($2|0) == 0)) {
	    $obj = (($1) + 4|0);
	    $3 = HEAP32[$obj>>2]|0;
	    $4 = HEAP32[$3>>2]|0;
	    if ((($4|0) == -2)) {
	     if ($cmp30) {
	      continue L7;
	     }
	     $code_max32 = (($3) + 4|0);
	     $9 = HEAP32[$code_max32>>2]|0;
	     $10 = HEAP32[$assertions>>2]|0;
	     $or = $10 | $9;
	     HEAP32[$assertions>>2] = $or;
	     continue L7;
	    } else if (!((($4|0) == -3))) {
	     continue L7;
	    }
	    $code_max = (($3) + 4|0);
	    $5 = HEAP32[$code_max>>2]|0;
	    $cmp6 = ($5|0)>(-1);
	    if (!($cmp6)) {
	     continue L7;
	    }
	    L24: do {
	     if (!($cmp8)) {
	      $6 = HEAP32[$tags>>2]|0;
	      $cmp1050 = ($6|0)>(-1);
	      L26: do {
	       if ($cmp1050) {
	        $$pr = $6;$arrayidx52 = $tags;$i$051 = 0;
	        while(1) {
	         $cmp13 = ($$pr|0)==($5|0);
	         $inc = (($i$051) + 1)|0;
	         if ($cmp13) {
	          break;
	         }
	         $arrayidx = (($tags) + ($inc<<2)|0);
	         $7 = HEAP32[$arrayidx>>2]|0;
	         $cmp10 = ($7|0)>(-1);
	         if ($cmp10) {
	          $$pr = $7;$arrayidx52 = $arrayidx;$i$051 = $inc;
	         } else {
	          $arrayidx49 = $arrayidx;$i$047 = $inc;
	          break L26;
	         }
	        }
	        $cmp17 = ($5|0)<(0);
	        if ($cmp17) {
	         $arrayidx49 = $arrayidx52;$i$047 = $i$051;
	        } else {
	         break L24;
	        }
	       } else {
	        $arrayidx49 = $tags;$i$047 = 0;
	       }
	      } while(0);
	      HEAP32[$arrayidx49>>2] = $5;
	      $add = (($i$047) + 1)|0;
	      $arrayidx21 = (($tags) + ($add<<2)|0);
	      HEAP32[$arrayidx21>>2] = -1;
	     }
	    } while(0);
	    if (!($tobool)) {
	     continue L7;
	    }
	    $8 = HEAP32[$num_tags_seen>>2]|0;
	    $inc26 = (($8) + 1)|0;
	    HEAP32[$num_tags_seen>>2] = $inc26;
	    continue L7;
	   } else if ((($2|0) == 1)) {
	    $obj55 = (($1) + 4|0);
	    $16 = HEAP32[$obj55>>2]|0;
	    $17 = HEAP32[$16>>2]|0;
	    $call$i42 = (_tre_stack_push($stack,$17)|0);
	    $cmp58 = ($call$i42|0)==(0);
	    if (!($cmp58)) {
	     $status$0$lcssa = $call$i42;
	     label = 28;
	     break L7;
	    }
	    $right61 = (($16) + 4|0);
	    $18 = HEAP32[$right61>>2]|0;
	    $call$i41 = (_tre_stack_push($stack,$18)|0);
	    $status$0$be = $call$i41;
	   } else {
	    continue L7;
	   }
	  } while(0);
	  $cmp = ($status$0$be|0)==(0);
	  if (!($cmp)) {
	   $status$0$lcssa = $status$0$be;
	   label = 28;
	   break;
	  }
	 }
	 if ((label|0) == 28) {
	  STACKTOP = sp;return ($status$0$lcssa|0);
	 }
	 return 0|0;
	}
	function _tre_stack_push($s,$value$01) {
	 $s = $s|0;
	 $value$01 = $value$01|0;
	 var $$add = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $call = 0, $cmp = 0, $cmp13 = 0, $cmp4 = 0, $cmp9 = 0, $inc = 0, $increment = 0, $max_size = 0, $mul = 0, $ptr = 0;
	 var $retval$0 = 0, $stack = 0, $stack12 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $ptr = (($s) + 12|0);
	 $0 = HEAP32[$ptr>>2]|0;
	 $1 = HEAP32[$s>>2]|0;
	 $cmp = ($0|0)<($1|0);
	 if ($cmp) {
	  $stack = (($s) + 16|0);
	  $2 = HEAP32[$stack>>2]|0;
	  $3 = (($2) + ($0<<2)|0);
	  HEAP32[$3>>2] = $value$01;
	  $4 = HEAP32[$ptr>>2]|0;
	  $inc = (($4) + 1)|0;
	  HEAP32[$ptr>>2] = $inc;
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $max_size = (($s) + 4|0);
	 $5 = HEAP32[$max_size>>2]|0;
	 $cmp4 = ($1|0)<($5|0);
	 if (!($cmp4)) {
	  $retval$0 = 12;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $increment = (($s) + 8|0);
	 $6 = HEAP32[$increment>>2]|0;
	 $add = (($6) + ($1))|0;
	 $cmp9 = ($add|0)>($5|0);
	 $$add = $cmp9 ? $5 : $add;
	 $stack12 = (($s) + 16|0);
	 $7 = HEAP32[$stack12>>2]|0;
	 $mul = $$add << 2;
	 $call = (_realloc($7,$mul)|0);
	 $cmp13 = ($call|0)==(0|0);
	 if ($cmp13) {
	  $retval$0 = 12;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  HEAP32[$s>>2] = $$add;
	  HEAP32[$stack12>>2] = $call;
	  (_tre_stack_push($s,$value$01)|0);
	  STACKTOP = sp;return 0;
	 }
	 return 0|0;
	}
	function _tre_copy_ast($mem,$stack,$ast,$flags,$pos_add,$tag_directions,$copy,$max_pos) {
	 $mem = $mem|0;
	 $stack = $stack|0;
	 $ast = $ast|0;
	 $flags = $flags|0;
	 $pos_add = $pos_add|0;
	 $tag_directions = $tag_directions|0;
	 $copy = $copy|0;
	 $max_pos = $max_pos|0;
	 var $$status$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
	 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $add = 0, $add$i = 0, $add$i138 = 0, $add138 = 0, $and = 0, $and25 = 0, $arrayidx = 0, $arrayidx$i = 0, $bf$clear$i = 0, $bf$load = 0, $bf$load$i = 0, $bf$set$i = 0, $bf$value$i = 0, $call$i$i = 0, $call$i$i106 = 0, $call$i$i125 = 0, $call$i$i95 = 0, $call$i119 = 0, $call$i120 = 0, $call$i121 = 0;
	 var $call$i122 = 0, $call$i123 = 0, $call$i124 = 0, $call$i142 = 0, $call$i143 = 0, $call$i144 = 0, $call$i145 = 0, $call$i146 = 0, $call$i84 = 0, $call$i85 = 0, $call$i89 = 0, $call$i94 = 0, $call1$i$i = 0, $call1$i$i108 = 0, $call1$i$i127 = 0, $call1$i$i97 = 0, $cmp = 0, $cmp101 = 0, $cmp105 = 0, $cmp110 = 0;
	 var $cmp121 = 0, $cmp125 = 0, $cmp14 = 0, $cmp150 = 0, $cmp16 = 0, $cmp19 = 0, $cmp34 = 0, $cmp37 = 0, $cmp50 = 0, $cmp54 = 0, $cmp59 = 0, $cmp6 = 0, $cmp63 = 0, $cmp68 = 0, $cmp92 = 0, $cmp96 = 0, $code_max = 0, $code_max2$i = 0, $dec$i = 0, $dec$i87 = 0;
	 var $dec$i91 = 0, $first_tag$0$be = 0, $first_tag$0152 = 0, $first_tag$0152$phi = 0, $first_tag$1 = 0, $inc = 0, $max$0 = 0, $max130 = 0, $max3$i = 0, $min$0 = 0, $min129 = 0, $min2$i = 0, $nullable$i$i = 0, $nullable$i$i102 = 0, $nullable$i$i113 = 0, $nullable$i$i132 = 0, $num_copied$0$be = 0, $num_copied$0$lcssa = 0, $num_copied$0153 = 0, $num_copied$0153$phi = 0;
	 var $num_copied$1 = 0, $num_submatches$i = 0, $num_submatches$i115 = 0, $num_submatches$i136 = 0, $num_submatches4$i = 0, $num_submatches4$i137 = 0, $num_submatches5$i = 0, $num_submatches5$i116 = 0, $num_submatches5$i139 = 0, $obj = 0, $obj$i$i = 0, $obj$i$i109 = 0, $obj$i$i128 = 0, $obj$i$i98 = 0, $obj119 = 0, $obj41 = 0, $obj77 = 0, $or$cond81 = 0, $or$cond82 = 0, $pos$0 = 0;
	 var $position = 0, $position3$i = 0, $result$0$be = 0, $result$0151 = 0, $result$0151$phi = 0, $retval$0$i105 = 0, $right = 0, $right3$i = 0, $right3$i135 = 0, $right57 = 0, $right81 = 0, $right88 = 0, $stack$i = 0, $stack$idx$val = 0, $stack$idx83 = 0, $stack$idx83$val = 0, $status$0$be = 0, $status$0$lcssa = 0, $submatch_id$i$i = 0, $submatch_id$i$i103 = 0;
	 var $submatch_id$i$i114 = 0, $submatch_id$i$i133 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i107 = 0, $tobool$i$i126 = 0, $tobool$i$i96 = 0, $tobool26 = 0, $tobool28 = 0, $tobool3$i$i = 0, $tobool3$i$i110 = 0, $tobool3$i$i129 = 0, $tobool3$i$i99 = 0, $voidptr_value$i = 0, $voidptr_value$i93 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $stack$idx83 = (($stack) + 12|0);
	 $stack$idx83$val = HEAP32[$stack$idx83>>2]|0;
	 (_tre_stack_push($stack,$ast)|0);
	 $call$i84 = (_tre_stack_push($stack,0)|0);
	 $cmp150 = ($call$i84|0)==(0);
	 L1: do {
	  if ($cmp150) {
	   $stack$i = (($stack) + 16|0);
	   $and = $flags & 1;
	   $tobool = ($and|0)==(0);
	   $and25 = $flags & 2;
	   $tobool26 = ($and25|0)==(0);
	   $first_tag$0152 = 1;$num_copied$0153 = 0;$result$0151 = $copy;
	   while(1) {
	    $stack$idx$val = HEAP32[$stack$idx83>>2]|0;
	    $cmp6 = ($stack$idx$val|0)>($stack$idx83$val|0);
	    if (!($cmp6)) {
	     $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = 0;
	     break L1;
	    }
	    $dec$i = (($stack$idx$val) + -1)|0;
	    HEAP32[$stack$idx83>>2] = $dec$i;
	    $0 = HEAP32[$stack$i>>2]|0;
	    $arrayidx$i = (($0) + ($dec$i<<2)|0);
	    $1 = HEAP32[$arrayidx$i>>2]|0;
	    if ((($1|0) == 1)) {
	     $dec$i87 = (($stack$idx$val) + -2)|0;
	     HEAP32[$stack$idx83>>2] = $dec$i87;
	     $voidptr_value$i = (($0) + ($dec$i87<<2)|0);
	     $2 = HEAP32[$voidptr_value$i>>2]|0;
	     $num_copied$0153$phi = $num_copied$0153;$first_tag$0152$phi = $first_tag$0152;$result$0151 = $2;$num_copied$0153 = $num_copied$0153$phi;$first_tag$0152 = $first_tag$0152$phi;
	     continue;
	    } else if (!((($1|0) == 0))) {
	     $result$0151$phi = $result$0151;$num_copied$0153$phi = $num_copied$0153;$first_tag$0152$phi = $first_tag$0152;$result$0151 = $result$0151$phi;$num_copied$0153 = $num_copied$0153$phi;$first_tag$0152 = $first_tag$0152$phi;
	     continue;
	    }
	    $dec$i91 = (($stack$idx$val) + -2)|0;
	    HEAP32[$stack$idx83>>2] = $dec$i91;
	    $voidptr_value$i93 = (($0) + ($dec$i91<<2)|0);
	    $3 = HEAP32[$voidptr_value$i93>>2]|0;
	    $4 = HEAP32[$3>>2]|0;
	    if ((($4|0) == 2)) {
	     $obj119 = (($3) + 4|0);
	     $29 = HEAP32[$obj119>>2]|0;
	     $30 = HEAP32[$29>>2]|0;
	     $call$i89 = (_tre_stack_push($stack,$30)|0);
	     $cmp121 = ($call$i89|0)==(0);
	     if (!($cmp121)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i89;
	      break L1;
	     }
	     $call$i85 = (_tre_stack_push($stack,0)|0);
	     $cmp125 = ($call$i85|0)==(0);
	     if (!($cmp125)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i85;
	      break L1;
	     }
	     $31 = HEAP32[$29>>2]|0;
	     $min129 = (($29) + 4|0);
	     $32 = HEAP32[$min129>>2]|0;
	     $max130 = (($29) + 8|0);
	     $33 = HEAP32[$max130>>2]|0;
	     $34 = (($29) + 12|0);
	     $bf$load = HEAP8[$34>>0]|0;
	     $call$i$i = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
	     $tobool$i$i = ($call$i$i|0)==(0|0);
	     if ($tobool$i$i) {
	      label = 40;
	      break;
	     }
	     $call1$i$i = (___tre_mem_alloc_impl($mem,0,0,1,16)|0);
	     $obj$i$i = (($call$i$i) + 4|0);
	     HEAP32[$obj$i$i>>2] = $call1$i$i;
	     $tobool3$i$i = ($call1$i$i|0)==(0|0);
	     if ($tobool3$i$i) {
	      label = 40;
	      break;
	     }
	     HEAP32[$call$i$i>>2] = 2;
	     $nullable$i$i = (($call$i$i) + 8|0);
	     HEAP32[$nullable$i$i>>2] = -1;
	     $submatch_id$i$i = (($call$i$i) + 12|0);
	     HEAP32[$submatch_id$i$i>>2] = -1;
	     HEAP32[$call1$i$i>>2] = $31;
	     $min2$i = (($call1$i$i) + 4|0);
	     HEAP32[$min2$i>>2] = $32;
	     $max3$i = (($call1$i$i) + 8|0);
	     HEAP32[$max3$i>>2] = $33;
	     $35 = (($call1$i$i) + 12|0);
	     $bf$load$i = HEAP8[$35>>0]|0;
	     $bf$value$i = $bf$load & 1;
	     $bf$clear$i = $bf$load$i & -2;
	     $bf$set$i = $bf$clear$i | $bf$value$i;
	     HEAP8[$35>>0] = $bf$set$i;
	     $num_submatches$i = (($31) + 16|0);
	     $36 = HEAP32[$num_submatches$i>>2]|0;
	     $num_submatches5$i = (($call$i$i) + 16|0);
	     HEAP32[$num_submatches5$i>>2] = $36;
	     HEAP32[$result$0151>>2] = $call$i$i;
	     $37 = HEAP32[$obj$i$i>>2]|0;
	     $num_copied$0153$phi = $num_copied$0153;$first_tag$0152$phi = $first_tag$0152;$result$0151 = $37;$num_copied$0153 = $num_copied$0153$phi;$first_tag$0152 = $first_tag$0152$phi;
	     continue;
	    } else if ((($4|0) == 3)) {
	     $obj41 = (($3) + 4|0);
	     $11 = HEAP32[$obj41>>2]|0;
	     $12 = HEAP32[$11>>2]|0;
	     $right = (($11) + 4|0);
	     $13 = HEAP32[$right>>2]|0;
	     $call$i$i106 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
	     $tobool$i$i107 = ($call$i$i106|0)==(0|0);
	     if ($tobool$i$i107) {
	      label = 20;
	      break;
	     }
	     $call1$i$i108 = (___tre_mem_alloc_impl($mem,0,0,1,8)|0);
	     $obj$i$i109 = (($call$i$i106) + 4|0);
	     HEAP32[$obj$i$i109>>2] = $call1$i$i108;
	     $tobool3$i$i110 = ($call1$i$i108|0)==(0|0);
	     if ($tobool3$i$i110) {
	      label = 20;
	      break;
	     }
	     HEAP32[$call$i$i106>>2] = 3;
	     $nullable$i$i113 = (($call$i$i106) + 8|0);
	     HEAP32[$nullable$i$i113>>2] = -1;
	     $submatch_id$i$i114 = (($call$i$i106) + 12|0);
	     HEAP32[$submatch_id$i$i114>>2] = -1;
	     HEAP32[$call1$i$i108>>2] = $12;
	     $14 = HEAP32[$obj$i$i109>>2]|0;
	     $right3$i = (($14) + 4|0);
	     HEAP32[$right3$i>>2] = $13;
	     $num_submatches$i115 = (($12) + 16|0);
	     $15 = HEAP32[$num_submatches$i115>>2]|0;
	     $num_submatches4$i = (($13) + 16|0);
	     $16 = HEAP32[$num_submatches4$i>>2]|0;
	     $add$i = (($16) + ($15))|0;
	     $num_submatches5$i116 = (($call$i$i106) + 16|0);
	     HEAP32[$num_submatches5$i116>>2] = $add$i;
	     HEAP32[$result$0151>>2] = $call$i$i106;
	     $17 = HEAP32[$obj$i$i109>>2]|0;
	     $18 = HEAP32[$right>>2]|0;
	     $call$i119 = (_tre_stack_push($stack,$18)|0);
	     $cmp50 = ($call$i119|0)==(0);
	     if (!($cmp50)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i119;
	      break L1;
	     }
	     $call$i120 = (_tre_stack_push($stack,0)|0);
	     $cmp54 = ($call$i120|0)==(0);
	     if (!($cmp54)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i120;
	      break L1;
	     }
	     $right57 = (($17) + 4|0);
	     $call$i121 = (_tre_stack_push($stack,$right57)|0);
	     $cmp59 = ($call$i121|0)==(0);
	     if (!($cmp59)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i121;
	      break L1;
	     }
	     $call$i122 = (_tre_stack_push($stack,(1))|0);
	     $cmp63 = ($call$i122|0)==(0);
	     if (!($cmp63)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i122;
	      break L1;
	     }
	     $19 = HEAP32[$11>>2]|0;
	     $call$i123 = (_tre_stack_push($stack,$19)|0);
	     $cmp68 = ($call$i123|0)==(0);
	     if (!($cmp68)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i123;
	      break L1;
	     }
	     $call$i124 = (_tre_stack_push($stack,0)|0);
	     $first_tag$0$be = $first_tag$0152;$num_copied$0$be = $num_copied$0153;$result$0$be = $17;$status$0$be = $call$i124;
	    } else if ((($4|0) == 1)) {
	     $obj77 = (($3) + 4|0);
	     $20 = HEAP32[$obj77>>2]|0;
	     $21 = HEAP32[$20>>2]|0;
	     $right81 = (($20) + 4|0);
	     $22 = HEAP32[$right81>>2]|0;
	     $call$i$i125 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
	     $tobool$i$i126 = ($call$i$i125|0)==(0|0);
	     if ($tobool$i$i126) {
	      label = 29;
	      break;
	     }
	     $call1$i$i127 = (___tre_mem_alloc_impl($mem,0,0,1,8)|0);
	     $obj$i$i128 = (($call$i$i125) + 4|0);
	     HEAP32[$obj$i$i128>>2] = $call1$i$i127;
	     $tobool3$i$i129 = ($call1$i$i127|0)==(0|0);
	     if ($tobool3$i$i129) {
	      label = 29;
	      break;
	     }
	     HEAP32[$call$i$i125>>2] = 1;
	     $nullable$i$i132 = (($call$i$i125) + 8|0);
	     HEAP32[$nullable$i$i132>>2] = -1;
	     $submatch_id$i$i133 = (($call$i$i125) + 12|0);
	     HEAP32[$submatch_id$i$i133>>2] = -1;
	     HEAP32[$call1$i$i127>>2] = $21;
	     $23 = HEAP32[$obj$i$i128>>2]|0;
	     $right3$i135 = (($23) + 4|0);
	     HEAP32[$right3$i135>>2] = $22;
	     $num_submatches$i136 = (($21) + 16|0);
	     $24 = HEAP32[$num_submatches$i136>>2]|0;
	     $num_submatches4$i137 = (($22) + 16|0);
	     $25 = HEAP32[$num_submatches4$i137>>2]|0;
	     $add$i138 = (($25) + ($24))|0;
	     $num_submatches5$i139 = (($call$i$i125) + 16|0);
	     HEAP32[$num_submatches5$i139>>2] = $add$i138;
	     HEAP32[$result$0151>>2] = $call$i$i125;
	     $26 = HEAP32[$obj$i$i128>>2]|0;
	     HEAP32[$26>>2] = 0;
	     $right88 = (($26) + 4|0);
	     HEAP32[$right88>>2] = 0;
	     $27 = HEAP32[$right81>>2]|0;
	     $call$i142 = (_tre_stack_push($stack,$27)|0);
	     $cmp92 = ($call$i142|0)==(0);
	     if (!($cmp92)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i142;
	      break L1;
	     }
	     $call$i143 = (_tre_stack_push($stack,0)|0);
	     $cmp96 = ($call$i143|0)==(0);
	     if (!($cmp96)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i143;
	      break L1;
	     }
	     $call$i144 = (_tre_stack_push($stack,$right88)|0);
	     $cmp101 = ($call$i144|0)==(0);
	     if (!($cmp101)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i144;
	      break L1;
	     }
	     $call$i145 = (_tre_stack_push($stack,(1))|0);
	     $cmp105 = ($call$i145|0)==(0);
	     if (!($cmp105)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i145;
	      break L1;
	     }
	     $28 = HEAP32[$20>>2]|0;
	     $call$i146 = (_tre_stack_push($stack,$28)|0);
	     $cmp110 = ($call$i146|0)==(0);
	     if (!($cmp110)) {
	      $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = $call$i146;
	      break L1;
	     }
	     $call$i94 = (_tre_stack_push($stack,0)|0);
	     $first_tag$0$be = $first_tag$0152;$num_copied$0$be = $num_copied$0153;$result$0$be = $26;$status$0$be = $call$i94;
	    } else if ((($4|0) == 0)) {
	     $obj = (($3) + 4|0);
	     $5 = HEAP32[$obj>>2]|0;
	     $position = (($5) + 8|0);
	     $6 = HEAP32[$position>>2]|0;
	     $7 = HEAP32[$5>>2]|0;
	     $code_max = (($5) + 4|0);
	     $8 = HEAP32[$code_max>>2]|0;
	     $cmp14 = ($7|0)>(-1);
	     $cmp16 = ($7|0)==(-4);
	     $or$cond81 = $cmp14 | $cmp16;
	     if ($or$cond81) {
	      $9 = HEAP32[$pos_add>>2]|0;
	      $add = (($9) + ($6))|0;
	      $inc = (($num_copied$0153) + 1)|0;
	      $first_tag$1 = $first_tag$0152;$max$0 = $8;$min$0 = $7;$num_copied$1 = $inc;$pos$0 = $add;
	     } else {
	      $cmp19 = ($7|0)==(-3);
	      if ($cmp19) {
	       if ($tobool) {
	        $tobool28 = ($first_tag$0152|0)==(0);
	        $or$cond82 = $tobool26 | $tobool28;
	        if ($or$cond82) {
	         $first_tag$1 = $first_tag$0152;$max$0 = $8;$min$0 = -3;$num_copied$1 = $num_copied$0153;$pos$0 = $6;
	        } else {
	         $arrayidx = (($tag_directions) + ($8<<2)|0);
	         HEAP32[$arrayidx>>2] = 1;
	         $first_tag$1 = 0;$max$0 = $8;$min$0 = -3;$num_copied$1 = $num_copied$0153;$pos$0 = $6;
	        }
	       } else {
	        $first_tag$1 = $first_tag$0152;$max$0 = -1;$min$0 = -1;$num_copied$1 = $num_copied$0153;$pos$0 = -1;
	       }
	      } else {
	       $first_tag$1 = $first_tag$0152;$max$0 = $8;$min$0 = $7;$num_copied$1 = $num_copied$0153;$pos$0 = $6;
	      }
	     }
	     $call$i$i95 = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
	     $tobool$i$i96 = ($call$i$i95|0)==(0|0);
	     if ($tobool$i$i96) {
	      $retval$0$i105 = 0;
	     } else {
	      $call1$i$i97 = (___tre_mem_alloc_impl($mem,0,0,1,20)|0);
	      $obj$i$i98 = (($call$i$i95) + 4|0);
	      HEAP32[$obj$i$i98>>2] = $call1$i$i97;
	      $tobool3$i$i99 = ($call1$i$i97|0)==(0|0);
	      if ($tobool3$i$i99) {
	       $retval$0$i105 = 0;
	      } else {
	       HEAP32[$call$i$i95>>2] = 0;
	       $nullable$i$i102 = (($call$i$i95) + 8|0);
	       HEAP32[$nullable$i$i102>>2] = -1;
	       $submatch_id$i$i103 = (($call$i$i95) + 12|0);
	       HEAP32[$submatch_id$i$i103>>2] = -1;
	       HEAP32[$call1$i$i97>>2] = $min$0;
	       $code_max2$i = (($call1$i$i97) + 4|0);
	       HEAP32[$code_max2$i>>2] = $max$0;
	       $position3$i = (($call1$i$i97) + 8|0);
	       HEAP32[$position3$i>>2] = $pos$0;
	       $retval$0$i105 = $call$i$i95;
	      }
	     }
	     HEAP32[$result$0151>>2] = $retval$0$i105;
	     $cmp34 = ($retval$0$i105|0)==(0|0);
	     $$status$0 = $cmp34 ? 12 : 0;
	     $10 = HEAP32[$max_pos>>2]|0;
	     $cmp37 = ($pos$0|0)>($10|0);
	     if ($cmp37) {
	      HEAP32[$max_pos>>2] = $pos$0;
	      $first_tag$0$be = $first_tag$1;$num_copied$0$be = $num_copied$1;$result$0$be = $result$0151;$status$0$be = $$status$0;
	     } else {
	      $first_tag$0$be = $first_tag$1;$num_copied$0$be = $num_copied$1;$result$0$be = $result$0151;$status$0$be = $$status$0;
	     }
	    } else {
	     $result$0151$phi = $result$0151;$num_copied$0153$phi = $num_copied$0153;$first_tag$0152$phi = $first_tag$0152;$result$0151 = $result$0151$phi;$num_copied$0153 = $num_copied$0153$phi;$first_tag$0152 = $first_tag$0152$phi;
	     continue;
	    }
	    $cmp = ($status$0$be|0)==(0);
	    if ($cmp) {
	     $first_tag$0152 = $first_tag$0$be;$num_copied$0153 = $num_copied$0$be;$result$0151 = $result$0$be;
	    } else {
	     $num_copied$0$lcssa = $num_copied$0$be;$status$0$lcssa = $status$0$be;
	     break L1;
	    }
	   }
	   if ((label|0) == 20) {
	    HEAP32[$result$0151>>2] = 0;
	    $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = 12;
	    break;
	   }
	   else if ((label|0) == 29) {
	    HEAP32[$result$0151>>2] = 0;
	    $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = 12;
	    break;
	   }
	   else if ((label|0) == 40) {
	    HEAP32[$result$0151>>2] = 0;
	    $num_copied$0$lcssa = $num_copied$0153;$status$0$lcssa = 12;
	    break;
	   }
	  } else {
	   $num_copied$0$lcssa = 0;$status$0$lcssa = $call$i84;
	  }
	 } while(0);
	 $38 = HEAP32[$pos_add>>2]|0;
	 $add138 = (($38) + ($num_copied$0$lcssa))|0;
	 HEAP32[$pos_add>>2] = $add138;
	 STACKTOP = sp;return ($status$0$lcssa|0);
	}
	function _tre_add_tag_left($mem,$node,$tag_id) {
	 $mem = $mem|0;
	 $node = $node|0;
	 $tag_id = $tag_id|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call$i$i = 0, $call1$i$i = 0, $call6 = 0, $cmp = 0, $cmp8 = 0, $code_max2$i = 0, $firstpos = 0, $lastpos = 0, $nullable = 0, $nullable$i$i = 0, $num_tags = 0, $obj = 0, $obj$i$i = 0;
	 var $obj12 = 0, $position3$i = 0, $retval$0 = 0, $right = 0, $submatch_id = 0, $submatch_id$i$i = 0, $tobool$i$i = 0, $tobool3$i$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (___tre_mem_alloc_impl($mem,0,0,0,8)|0);
	 $cmp = ($call|0)==(0|0);
	 if ($cmp) {
	  $retval$0 = 12;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call$i$i = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
	 $tobool$i$i = ($call$i$i|0)==(0|0);
	 if (!($tobool$i$i)) {
	  $call1$i$i = (___tre_mem_alloc_impl($mem,0,0,1,20)|0);
	  $obj$i$i = (($call$i$i) + 4|0);
	  HEAP32[$obj$i$i>>2] = $call1$i$i;
	  $tobool3$i$i = ($call1$i$i|0)==(0|0);
	  if (!($tobool3$i$i)) {
	   HEAP32[$call$i$i>>2] = 0;
	   $nullable$i$i = (($call$i$i) + 8|0);
	   HEAP32[$nullable$i$i>>2] = -1;
	   $submatch_id$i$i = (($call$i$i) + 12|0);
	   HEAP32[$submatch_id$i$i>>2] = -1;
	   HEAP32[$call1$i$i>>2] = -3;
	   $code_max2$i = (($call1$i$i) + 4|0);
	   HEAP32[$code_max2$i>>2] = $tag_id;
	   $position3$i = (($call1$i$i) + 8|0);
	   HEAP32[$position3$i>>2] = -1;
	   HEAP32[$call>>2] = $call$i$i;
	   $call6 = (___tre_mem_alloc_impl($mem,0,0,0,32)|0);
	   $right = (($call) + 4|0);
	   HEAP32[$right>>2] = $call6;
	   $cmp8 = ($call6|0)==(0|0);
	   if ($cmp8) {
	    $retval$0 = 12;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $obj = (($node) + 4|0);
	   $0 = HEAP32[$obj>>2]|0;
	   $obj12 = (($call6) + 4|0);
	   HEAP32[$obj12>>2] = $0;
	   $1 = HEAP32[$node>>2]|0;
	   $2 = HEAP32[$right>>2]|0;
	   HEAP32[$2>>2] = $1;
	   $3 = HEAP32[$right>>2]|0;
	   $nullable = (($3) + 8|0);
	   HEAP32[$nullable>>2] = -1;
	   $submatch_id = (($3) + 12|0);
	   HEAP32[$submatch_id>>2] = -1;
	   $firstpos = (($3) + 24|0);
	   HEAP32[$firstpos>>2] = 0;
	   $4 = HEAP32[$right>>2]|0;
	   $lastpos = (($4) + 28|0);
	   HEAP32[$lastpos>>2] = 0;
	   $5 = HEAP32[$right>>2]|0;
	   $num_tags = (($5) + 20|0);
	   HEAP32[$num_tags>>2] = 0;
	   HEAP32[$obj>>2] = $call;
	   HEAP32[$node>>2] = 1;
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 HEAP32[$call>>2] = 0;
	 $retval$0 = 12;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _tre_add_tag_right($mem,$node,$tag_id) {
	 $mem = $mem|0;
	 $node = $node|0;
	 $tag_id = $tag_id|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call$i$i = 0, $call1$i$i = 0, $call6 = 0, $cmp = 0, $cmp8 = 0, $code_max2$i = 0, $firstpos = 0, $lastpos = 0, $nullable = 0, $nullable$i$i = 0, $num_tags = 0, $obj = 0, $obj$i$i = 0;
	 var $obj12 = 0, $position3$i = 0, $retval$0 = 0, $right = 0, $right18 = 0, $submatch_id = 0, $submatch_id$i$i = 0, $tobool$i$i = 0, $tobool3$i$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (___tre_mem_alloc_impl($mem,0,0,0,8)|0);
	 $cmp = ($call|0)==(0|0);
	 if ($cmp) {
	  $retval$0 = 12;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call$i$i = (___tre_mem_alloc_impl($mem,0,0,1,32)|0);
	 $tobool$i$i = ($call$i$i|0)==(0|0);
	 if (!($tobool$i$i)) {
	  $call1$i$i = (___tre_mem_alloc_impl($mem,0,0,1,20)|0);
	  $obj$i$i = (($call$i$i) + 4|0);
	  HEAP32[$obj$i$i>>2] = $call1$i$i;
	  $tobool3$i$i = ($call1$i$i|0)==(0|0);
	  if (!($tobool3$i$i)) {
	   HEAP32[$call$i$i>>2] = 0;
	   $nullable$i$i = (($call$i$i) + 8|0);
	   HEAP32[$nullable$i$i>>2] = -1;
	   $submatch_id$i$i = (($call$i$i) + 12|0);
	   HEAP32[$submatch_id$i$i>>2] = -1;
	   HEAP32[$call1$i$i>>2] = -3;
	   $code_max2$i = (($call1$i$i) + 4|0);
	   HEAP32[$code_max2$i>>2] = $tag_id;
	   $position3$i = (($call1$i$i) + 8|0);
	   HEAP32[$position3$i>>2] = -1;
	   $right = (($call) + 4|0);
	   HEAP32[$right>>2] = $call$i$i;
	   $call6 = (___tre_mem_alloc_impl($mem,0,0,0,32)|0);
	   HEAP32[$call>>2] = $call6;
	   $cmp8 = ($call6|0)==(0|0);
	   if ($cmp8) {
	    $retval$0 = 12;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $obj = (($node) + 4|0);
	   $0 = HEAP32[$obj>>2]|0;
	   $obj12 = (($call6) + 4|0);
	   HEAP32[$obj12>>2] = $0;
	   $1 = HEAP32[$node>>2]|0;
	   $2 = HEAP32[$call>>2]|0;
	   HEAP32[$2>>2] = $1;
	   $3 = HEAP32[$call>>2]|0;
	   $nullable = (($3) + 8|0);
	   HEAP32[$nullable>>2] = -1;
	   $submatch_id = (($3) + 12|0);
	   HEAP32[$submatch_id>>2] = -1;
	   $firstpos = (($3) + 24|0);
	   HEAP32[$firstpos>>2] = 0;
	   $4 = HEAP32[$call>>2]|0;
	   $lastpos = (($4) + 28|0);
	   HEAP32[$lastpos>>2] = 0;
	   $5 = HEAP32[$call>>2]|0;
	   $num_tags = (($5) + 20|0);
	   HEAP32[$num_tags>>2] = 0;
	   HEAP32[$obj>>2] = $call;
	   HEAP32[$node>>2] = 1;
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 $right18 = (($call) + 4|0);
	 HEAP32[$right18>>2] = 0;
	 $retval$0 = 12;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _tre_compare_items($a,$b) {
	 $a = $a|0;
	 $b = $b|0;
	 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $cmp3 = 0, $obj = 0, $obj1 = 0, $retval$0 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$a>>2]|0;
	 $1 = HEAP32[$b>>2]|0;
	 $obj = (($0) + 4|0);
	 $2 = HEAP32[$obj>>2]|0;
	 $obj1 = (($1) + 4|0);
	 $3 = HEAP32[$obj1>>2]|0;
	 $4 = HEAP32[$2>>2]|0;
	 $5 = HEAP32[$3>>2]|0;
	 $cmp = ($4|0)<($5|0);
	 if ($cmp) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $cmp3 = ($4|0)>($5|0);
	 $$ = $cmp3&1;
	 $retval$0 = $$;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _regerror($e,$preg,$buf,$size) {
	 $e = $e|0;
	 $preg = $preg|0;
	 $buf = $buf|0;
	 $size = $size|0;
	 var $0 = 0, $1 = 0, $add = 0, $add$ptr = 0, $add4 = 0, $call = 0, $call3 = 0, $dec = 0, $e$addr$08 = 0, $incdec$ptr = 0, $incdec$ptr$s$0 = 0, $s$0$lcssa = 0, $s$09 = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $tobool7 = ($e|0)==(0);
	 L1: do {
	  if ($tobool7) {
	   $s$0$lcssa = 153096;
	  } else {
	   $e$addr$08 = $e;$s$09 = 153096;
	   while(1) {
	    $0 = HEAP8[$s$09>>0]|0;
	    $tobool1 = ($0<<24>>24)==(0);
	    if ($tobool1) {
	     $s$0$lcssa = $s$09;
	     break L1;
	    }
	    $dec = (($e$addr$08) + -1)|0;
	    $call = (_strlen(($s$09|0))|0);
	    $add = (($call) + 1)|0;
	    $add$ptr = (($s$09) + ($add)|0);
	    $tobool = ($dec|0)==(0);
	    if ($tobool) {
	     $s$0$lcssa = $add$ptr;
	     break;
	    } else {
	     $e$addr$08 = $dec;$s$09 = $add$ptr;
	    }
	   }
	  }
	 } while(0);
	 $1 = HEAP8[$s$0$lcssa>>0]|0;
	 $tobool2 = ($1<<24>>24)==(0);
	 $incdec$ptr = (($s$0$lcssa) + 1|0);
	 $incdec$ptr$s$0 = $tobool2 ? $incdec$ptr : $s$0$lcssa;
	 HEAP32[$vararg_buffer>>2] = $incdec$ptr$s$0;
	 $call3 = (_snprintf($buf,$size,153384,$vararg_buffer)|0);
	 $add4 = (($call3) + 1)|0;
	 STACKTOP = sp;return ($add4|0);
	}
	function _regexec($preg,$string,$nmatch,$pmatch,$eflags) {
	 $preg = $preg|0;
	 $string = $string|0;
	 $nmatch = $nmatch|0;
	 $pmatch = $pmatch|0;
	 $eflags = $eflags|0;
	 var $$$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i49 = 0, $$pre404$i = 0, $$pre405$i = 0, $$pre406$i = 0, $$pre407$i = 0, $$pre408$i = 0, $$pre409$i = 0, $$pre428$i = 0, $$pre429$i = 0, $$pre430$i = 0, $$pre431$i = 0, $$pre432$i = 0, $$pre433$i = 0, $$pre434$i = 0, $$pre435$i = 0, $$pre437$i = 0, $$sub$i = 0;
	 var $$sub35$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
	 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
	 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
	 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
	 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
	 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
	 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
	 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
	 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0;
	 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
	 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
	 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
	 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__opaque = 0;
	 var $add$i = 0, $add$i21 = 0, $add$ptr$i = 0, $add$ptr$i25 = 0, $add$ptr$sum$i = 0, $add$ptr19$i = 0, $add$ptr19$sum$i = 0, $add$ptr20$i = 0, $add$ptr20$sum$i = 0, $add$ptr248$i = 0, $add$ptr29$i = 0, $add$ptr29$sum$i = 0, $add$ptr296$i = 0, $add$ptr297$i = 0, $add$ptr30$i = 0, $add$ptr30$sum$i = 0, $add$ptr314$i = 0, $add$ptr314$sum$i = 0, $add$ptr314$sum$pn$i = 0, $add$ptr39$i = 0;
	 var $add$ptr39$sum$i = 0, $add$ptr40$i = 0, $add$ptr40$sum$i = 0, $add$ptr49$i = 0, $add$ptr52$i = 0, $add$ptr52$sum$i = 0, $add$ptr55$i = 0, $add$ptr75$i = 0, $add10$i = 0, $add12$i = 0, $add13$i = 0, $add14$i = 0, $add238$i = 0, $add264270$i = 0, $add283$i = 0, $add291$i = 0, $add316$i = 0, $add316$pn$i = 0, $and$i = 0, $and$i13 = 0;
	 var $and1$i = 0, $and1$i14 = 0, $and110$i = 0, $and111$i = 0, $and124$i = 0, $and130$i = 0, $and138$i = 0, $and157$i = 0, $and2$i = 0, $and2$i16 = 0, $and283$i = 0, $and293$i = 0, $and317$i = 0, $and329$i = 0, $and341$i = 0, $and355$i = 0, $and362$i = 0, $and369$i = 0, $and374$i = 0, $and386$i = 0;
	 var $and391$i = 0, $and400$i = 0, $and413$i = 0, $and414$i = 0, $and417$i = 0, $and424$i = 0, $and428$i = 0, $and436$i = 0, $and444$i = 0, $and448$i = 0, $and458$i = 0, $and462$i = 0, $and470$i = 0, $and474$i = 0, $and490$i = 0, $and494$i = 0, $and60$i = 0, $and610$i = 0, $and71$i = 0, $and83$i = 0;
	 var $and87$i = 0, $and97$i = 0, $and98$i = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i$i88 = 0, $arrayidx198$i = 0, $arrayidx2$i$i = 0, $arrayidx2$i$i90 = 0, $arrayidx209$i = 0, $arrayidx210$i = 0, $arrayidx214$i = 0, $arrayidx217$i = 0, $arrayidx228$i = 0, $arrayidx239$i = 0, $arrayidx259$i = 0, $arrayidx266$i = 0, $arrayidx271$i = 0, $arrayidx271$i53 = 0, $arrayidx272$i = 0;
	 var $arrayidx272$i54 = 0, $arrayidx276$i = 0, $arrayidx277$i = 0, $arrayidx3$i$i = 0, $arrayidx3$i$i91 = 0, $arrayidx307$i = 0, $arrayidx36$i = 0, $arrayidx457$i = 0, $arrayidx458$i = 0, $arrayidx470$i = 0, $arrayidx508$i = 0, $arrayidx509$i = 0, $arrayidx535$i = 0, $arrayidx536$i = 0, $arrayidx566$i = 0, $arrayidx569$i = 0, $arrayidx583$i = 0, $arrayidx600$i = 0, $arrayidx615$i = 0, $arrayidx634$i = 0;
	 var $arrayidx635$i = 0, $assertions$i = 0, $assertions$i40 = 0, $assertions282$i = 0, $assertions313$i = 0, $assertions358$i = 0, $assertions609$i = 0, $backref$i = 0, $brmerge$i = 0, $brmerge$i41 = 0, $brmerge411$i = 0, $brmerge413$i = 0, $brmerge414$i = 0, $brmerge415$i = 0, $brmerge443$i = 0, $brmerge445$i = 0, $brmerge446$i = 0, $call = 0, $call$i = 0, $call$i22 = 0;
	 var $call$us$i$i = 0, $call$us$i$i69 = 0, $call10$i = 0, $call102$i = 0, $call107$i = 0, $call115$i = 0, $call119$i = 0, $call120$i = 0, $call123$i = 0, $call129$i = 0, $call134$i = 0, $call139$i = 0, $call145$i = 0, $call146$i = 0, $call150$i = 0, $call162$i = 0, $call166$i = 0, $call172$i = 0, $call179$i = 0, $call19$i = 0;
	 var $call239$i = 0, $call28$i = 0, $call298$i = 0, $call3$i = 0, $call319$i = 0, $call338$i = 0, $call346$i = 0, $call351$i = 0, $call360$i = 0, $call365$i = 0, $call378$i = 0, $call384$i = 0, $call391$i = 0, $call396$i = 0, $call4$i$i = 0, $call4$i$i76 = 0, $call400$i = 0, $call405$i = 0, $call406$i = 0, $call410$i = 0;
	 var $call420$i = 0, $call423$i = 0, $call429$i = 0, $call431$i = 0, $call434$i = 0, $call437$i = 0, $call440$i = 0, $call445$i = 0, $call451$i = 0, $call46$i = 0, $call466$i = 0, $call477$i = 0, $call480$i = 0, $call483$i = 0, $call486$i = 0, $call5$i$i = 0, $call5$i$i77 = 0, $call512$i = 0, $call529$i = 0, $call66$i = 0;
	 var $call8$i$i = 0, $call8$i$i80 = 0, $call88$i = 0, $call9$i$i = 0, $call9$i$i81 = 0, $call93$i = 0, $cflags = 0, $cflags$i = 0, $cflags$i15 = 0, $class$i = 0, $class$i62 = 0, $class433$i = 0, $class479$i = 0, $classes$addr$09$i$i = 0, $classes$addr$09$i$i75 = 0, $classes$addr$09$us$i$i = 0, $classes$addr$09$us$i$i68 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0;
	 var $cmp$i$i85 = 0, $cmp$i23 = 0, $cmp$i284$i = 0, $cmp$i299$i = 0, $cmp$us$i$i = 0, $cmp$us$i$i73 = 0, $cmp1 = 0, $cmp1$i$i = 0, $cmp1$i$i89 = 0, $cmp10 = 0, $cmp105$i = 0, $cmp105$i43 = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp121$i = 0, $cmp127tmp$i = 0, $cmp13$i$i = 0, $cmp13$i$i96 = 0, $cmp132$i = 0;
	 var $cmp135$i = 0, $cmp137$i = 0, $cmp14$i$i = 0, $cmp141$i = 0, $cmp143$i = 0, $cmp143$i46 = 0, $cmp148$i = 0, $cmp149$i = 0, $cmp152$i = 0, $cmp154tmp$i = 0, $cmp162$i = 0, $cmp164$i = 0, $cmp170$i = 0, $cmp176$i = 0, $cmp18$i$i = 0, $cmp18$i$i97 = 0, $cmp182298$i = 0, $cmp182298$not$i = 0, $cmp193$i = 0, $cmp193300$i = 0;
	 var $cmp195$i = 0, $cmp203$not$i = 0, $cmp212$i = 0, $cmp212327$i = 0, $cmp225$i = 0, $cmp225329$i = 0, $cmp228$i = 0, $cmp230$i = 0, $cmp237$i = 0, $cmp237348$i = 0, $cmp240$i = 0, $cmp242$i = 0, $cmp244$i = 0, $cmp251$i = 0, $cmp251405$i = 0, $cmp253$i = 0, $cmp255$i = 0, $cmp260$i = 0, $cmp260316$i = 0, $cmp267$i = 0;
	 var $cmp269$i = 0, $cmp269421$i = 0, $cmp273$i = 0, $cmp278$i = 0, $cmp299$i = 0, $cmp3 = 0, $cmp301$i = 0, $cmp309$i = 0, $cmp311$i = 0, $cmp320$i = 0, $cmp320$i55 = 0, $cmp322$i = 0, $cmp323$i = 0, $cmp324$i = 0, $cmp333$i = 0, $cmp336$i = 0, $cmp339$i = 0, $cmp341$i = 0, $cmp349$i = 0, $cmp354$i = 0;
	 var $cmp356$i = 0, $cmp363$i = 0, $cmp365$i = 0, $cmp369$i = 0, $cmp372$i = 0, $cmp374$i = 0, $cmp381$i = 0, $cmp382$i = 0, $cmp388tmp$i = 0, $cmp394$i = 0, $cmp396$i = 0, $cmp398$i = 0, $cmp4$i$i = 0, $cmp4$i$i93 = 0, $cmp40325$i = 0, $cmp404$i = 0, $cmp408$i = 0, $cmp410$i = 0, $cmp417$i = 0, $cmp419$i = 0;
	 var $cmp427$i = 0, $cmp433tmp$i = 0, $cmp441$i = 0, $cmp443$i = 0, $cmp449$i = 0, $cmp455$i = 0, $cmp463$i = 0, $cmp466$i = 0, $cmp466329$i = 0, $cmp468$i = 0, $cmp47$i = 0, $cmp478$i = 0, $cmp49$i = 0, $cmp493$i = 0, $cmp495$i = 0, $cmp499$i = 0, $cmp502$i = 0, $cmp51384$i = 0, $cmp530$i = 0, $cmp564$i = 0;
	 var $cmp564355$i = 0, $cmp579$i = 0, $cmp579$i125 = 0, $cmp592$i = 0, $cmp597$i = 0, $cmp597379$i = 0, $cmp63$i = 0, $cmp630351$i = 0, $cmp642$i = 0, $cmp644$i = 0, $cmp66$i = 0, $cmp67$i = 0, $cmp69$i = 0, $cmp76$i = 0, $cmp78$i = 0, $cmp79$i = 0, $cmp79311$i = 0, $cmp79311370$i = 0, $cmp8$i$i = 0, $cmp8$i$i65 = 0;
	 var $cmp8$i282$i = 0, $cmp8$i298$i = 0, $cmp83$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $code_max$i = 0, $code_max$i57 = 0, $cond28$i = 0, $cond48$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond146 = 0, $exitcond149 = 0, $exitcond398$i = 0, $exitcond400$i = 0, $exitcond402$i = 0, $final$i = 0, $final$i31 = 0, $have_backrefs = 0;
	 var $i$015$i$i = 0, $i$015$i$i87 = 0, $i$0324$i = 0, $i$0385$i = 0, $i$1383$i = 0, $i$3303$i = 0, $i$4317$i = 0, $i$5328$i = 0, $i$6336$i = 0, $i$7334$i = 0, $i158$0328$i = 0, $i264$0422$i = 0, $i506$0356$i = 0, $i619$0352$i = 0, $inc$i = 0, $inc$i$i = 0, $inc$i$i99 = 0, $inc$i28 = 0, $inc212$i = 0, $inc219$i = 0;
	 var $inc245$i = 0, $inc274$i = 0, $inc325$i = 0, $inc344$i = 0, $inc460$i = 0, $inc51$i = 0, $inc511$i = 0, $inc538$i = 0, $inc571$i = 0, $inc63$i = 0, $inc637$i = 0, $inc72$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i$i84 = 0, $incdec$ptr$i50 = 0, $incdec$ptr$us$i$i = 0, $incdec$ptr$us$i$i72 = 0, $incdec$ptr200$i = 0, $incdec$ptr222$i = 0;
	 var $incdec$ptr224$i = 0, $incdec$ptr232$i = 0, $incdec$ptr241$i = 0, $incdec$ptr293$i = 0, $incdec$ptr296$i = 0, $incdec$ptr472$i = 0, $incdec$ptr514$i = 0, $incdec$ptr545$i = 0, $incdec$ptr548$i = 0, $incdec$ptr585$i = 0, $incdec$ptr590$i = 0, $incdec$ptr599$i = 0, $initial$i = 0, $initial$i30 = 0, $match_eo$0$i = 0, $match_eo$0$i33 = 0, $match_eo$1$ph$i = 0, $match_eo$1$ph366$i = 0, $match_eo$1$ph373$i = 0, $match_eo$1$ph373$mux$i = 0;
	 var $match_eo$10$i = 0, $match_eo$10$i102 = 0, $match_eo$10$i105 = 0, $match_eo$10$lobit$i = 0, $match_eo$2$i = 0, $match_eo$2$i51 = 0, $match_eo$2$lobit$i = 0, $match_eo$3$i = 0, $match_eo$4$i = 0, $match_eo$5$lcssa$i = 0, $match_eo$5356$i = 0, $match_eo$6$lcssa$i = 0, $match_eo$6341$i = 0, $match_eo$7$i = 0, $match_eo$9$i = 0, $minimal_tags$i = 0, $mul = 0, $mul$i = 0, $mul$i19 = 0, $mul11$i = 0;
	 var $mul178$i = 0, $mul18$i = 0, $mul27$i = 0, $mul4$i = 0, $mul528$i = 0, $mul9$i = 0, $neg_classes$i = 0, $neg_classes$i64 = 0, $new_match$0$i = 0, $new_match$1$ph368$i = 0, $new_match$1$ph375$i = 0, $new_match$1$ph375$mux$i = 0, $new_match$10$i = 0, $new_match$2$i = 0, $new_match$3$i = 0, $new_match$4$i = 0, $new_match$5$i = 0, $new_match$6$lcssa$i = 0, $new_match$6357$i = 0, $new_match$7$lcssa$i = 0;
	 var $new_match$7342$i = 0, $new_match$8$i = 0, $next$i = 0, $next159$i = 0, $next176$i = 0, $next507$i = 0, $next526$i = 0, $next_c$i = 0, $next_c$i12 = 0, $next_c209$i = 0, $next_c561$i = 0, $next_c627$i = 0, $next_state$0374$i = 0, $next_state$1$i = 0, $next_tags$0340$i = 0, $next_tags$1$i = 0, $next_tags$2349$i = 0, $next_tags$3$i = 0, $next_tags$4$be$i = 0, $next_tags$4$lcssa$i = 0;
	 var $next_tags$4$ph$i = 0, $next_tags$4407$i = 0, $next_tags$5368$i = 0, $next_tags$6$i = 0, $next_tags$7380$i = 0, $next_tags$8$i = 0, $num_minimals$i = 0, $num_states$i = 0, $num_states$i20 = 0, $num_submatches$i = 0, $num_tags = 0, $num_tags$0$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i38 = 0, $or$cond271$i = 0, $or$cond271$not$i = 0, $or$cond273$i = 0, $or$cond274$i = 0, $or$cond275$i = 0;
	 var $or$cond276$i = 0, $or$cond277$i = 0, $or$cond278$i = 0, $or$cond278$not$i = 0, $or$cond280$i = 0, $or$cond281$i = 0, $or$cond288$i = 0, $or$cond288$not$i = 0, $or$cond290$i = 0, $or$cond291$i = 0, $or$cond292$i = 0, $or$cond293$i = 0, $or$cond294$i = 0, $or$cond294$not$i = 0, $or$cond296$i = 0, $or$cond297$i = 0, $or$cond412$i = 0, $or$cond416$i = 0, $or$cond444$i = 0, $or$cond447$i = 0;
	 var $pmatch$0$i = 0, $pmatch$1$i = 0, $pos$0$i = 0, $pos$0$lcssa$i = 0, $pos$0$ph$i = 0, $pos$0413$i = 0, $pos$1$i = 0, $pos217$i = 0, $pos477$i = 0, $pos61$i = 0, $pos82$i = 0, $pos_add_next$0$i = 0, $pos_add_next$0$i29 = 0, $pos_add_next$1$i = 0, $pos_add_next$1$i34 = 0, $pos_add_next$2$i = 0, $pos_add_next$2$lcssa$i = 0, $pos_add_next$2$ph$i = 0, $pos_add_next$2411$i = 0, $pos_add_next$3$i = 0;
	 var $pos_add_next$5$i = 0, $pos_add_next$6$i = 0, $pos_start$0$i = 0, $prev$i = 0, $prev175$i = 0, $prev525$i = 0, $prev604$i = 0, $prev_c$0$i = 0, $prev_c$0$i36 = 0, $reach$0$i = 0, $reach$1$i = 0, $reach_i$1354$i = 0, $reach_next$0$i = 0, $reach_next$1$i = 0, $reach_next_i$0$i = 0, $reach_next_i$1$ph364$i = 0, $reach_next_i$1$ph371$i = 0, $reach_next_i$2$i = 0, $reach_next_i$3$lcssa$i = 0, $reach_next_i$3322$i = 0;
	 var $reach_next_i$4$i = 0, $reach_next_i$5$lcssa$i = 0, $reach_next_i$5355$i = 0, $reach_next_i$6$lcssa$i = 0, $reach_next_i$6339$i = 0, $reach_next_i$7$i = 0, $rem$i = 0, $rem21$i = 0, $rem31$i = 0, $rem41$i = 0, $ret$0$i = 0, $retval$0 = 0, $rm_eo$i = 0, $rm_so$i = 0, $stack$0$i = 0, $stack$1341$i = 0, $stack$2$i = 0, $stack$3$i = 0, $stack$4$lcssa$i = 0, $stack$4$ph$i = 0;
	 var $stack$4409$i = 0, $stack$5369$i = 0, $stack$6$i = 0, $stack$7$i = 0, $stack$8$i = 0, $state$0339$i = 0, $state$1$i = 0, $state$2$ph$i = 0, $state$2406$i = 0, $state$i = 0, $state205$i = 0, $state255324$i = 0, $state279$i = 0, $state306$i = 0, $state306337$i = 0, $state306347$i = 0, $state310$i = 0, $state310369$i = 0, $state310378$i = 0, $state314$i = 0;
	 var $state351$i = 0, $state351375$i = 0, $state55$i = 0, $state55337$i = 0, $state55345$i = 0, $state556$i = 0, $state608$i = 0, $state_id$i = 0, $state_id$i39 = 0, $state_id207$i = 0, $state_id306$i = 0, $state_id475$i = 0, $state_id557$i = 0, $state_id559$i = 0, $state_id614$i = 0, $states_seen$0$ph$i = 0, $states_seen$1$i = 0, $status$0 = 0, $status$0155 = 0, $str_byte$0$i = 0;
	 var $str_byte$0$i35 = 0, $str_byte$1$ph$i = 0, $str_byte$1414$i = 0, $str_byte$2$i = 0, $str_byte202$i = 0, $str_byte553$i = 0, $str_byte623$i = 0, $sub$i = 0, $sub$i26 = 0, $sub25$i = 0, $sub313$i = 0, $sub35$i = 0, $sub45$i = 0, $tag_directions$i = 0, $tag_directions$i32 = 0, $tag_i$0301$i = 0, $tag_i$1330$i = 0, $tags$0 = 0, $tags$0$i = 0, $tags$1$i = 0;
	 var $tags$i = 0, $tags155$i = 0, $tags180$i = 0, $tags184$i = 0, $tags189$i = 0, $tags197$i = 0, $tags208$i = 0, $tags216$i = 0, $tags218$i$pre = 0, $tags218$i$pre$phiZZ2D = 0, $tags221$i = 0, $tags222$i = 0, $tags227$i = 0, $tags270$i = 0, $tags289$i = 0, $tags290$pre$phi410$iZ2D = 0, $tags456$i = 0, $tags462$i = 0, $tags482$i = 0, $tags490$i = 0;
	 var $tags502$i = 0, $tags518$i = 0, $tags531$i = 0, $tags54$i = 0, $tags568$i = 0, $tags576$i = 0, $tags582$i = 0, $tags633$i = 0, $tmp$0330$i = 0, $tmp575$0359$i126 = 0, $tmp_buf$0386$i = 0, $tmp_tags$0$i = 0, $tmp_tags$1$lcssa$i = 0, $tmp_tags$1358$i = 0, $tmp_tags$2$lcssa$i = 0, $tmp_tags$2343$i = 0, $tmp_tags$3$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i$i = 0;
	 var $tobool$i$i66 = 0, $tobool$i17 = 0, $tobool1$us$i$i = 0, $tobool1$us$i$i70 = 0, $tobool10$i$i = 0, $tobool10$i$i82 = 0, $tobool103$i = 0, $tobool107$i = 0, $tobool108$i = 0, $tobool11$i = 0, $tobool111$i = 0, $tobool112$i = 0, $tobool116$i = 0, $tobool120$i = 0, $tobool121$i = 0, $tobool124$i = 0, $tobool125$i = 0, $tobool13 = 0, $tobool130$i = 0, $tobool131$i = 0;
	 var $tobool135$i = 0, $tobool139$i = 0, $tobool140$i = 0, $tobool146$i = 0, $tobool147$i = 0, $tobool15$i = 0, $tobool151$i = 0, $tobool158$i = 0, $tobool160$i = 0, $tobool163$i = 0, $tobool165$i = 0, $tobool167$i = 0, $tobool168$i = 0, $tobool17$i = 0, $tobool171$i = 0, $tobool173$i = 0, $tobool183$i = 0, $tobool185$i = 0, $tobool188$i = 0, $tobool190$i = 0;
	 var $tobool191$i = 0, $tobool20$i = 0, $tobool22$i = 0, $tobool223$i = 0, $tobool234$i = 0, $tobool234$i52 = 0, $tobool24$i = 0, $tobool250$i = 0, $tobool252$i = 0, $tobool256$i = 0, $tobool256319$i = 0, $tobool280$i = 0, $tobool284$i = 0, $tobool29$i = 0, $tobool302$i = 0, $tobool302353$i = 0, $tobool307$i = 0, $tobool307338$i = 0, $tobool308$i = 0, $tobool314$i = 0;
	 var $tobool318$i = 0, $tobool32$i = 0, $tobool330$i = 0, $tobool34$i = 0, $tobool342$i = 0, $tobool347$i = 0, $tobool352$i = 0, $tobool352$i58 = 0, $tobool352367$i = 0, $tobool356$i = 0, $tobool359$i = 0, $tobool361$i = 0, $tobool363$i = 0, $tobool366$i = 0, $tobool367$i = 0, $tobool370$i = 0, $tobool375$i = 0, $tobool379$i = 0, $tobool383$i = 0, $tobool385$i = 0;
	 var $tobool387$i = 0, $tobool392$i = 0, $tobool392$i59 = 0, $tobool397$i = 0, $tobool4$i = 0, $tobool401$i = 0, $tobool401$i61 = 0, $tobool406$i = 0, $tobool407$i = 0, $tobool411$i = 0, $tobool414$i = 0, $tobool415$i = 0, $tobool418$i = 0, $tobool42$i = 0, $tobool421$i = 0, $tobool424$i = 0, $tobool425$i = 0, $tobool429$i = 0, $tobool430$i = 0, $tobool435$i = 0;
	 var $tobool437$i = 0, $tobool441$i = 0, $tobool445$i = 0, $tobool446$i = 0, $tobool452$i = 0, $tobool459$i = 0, $tobool463$i = 0, $tobool467$i = 0, $tobool471$i = 0, $tobool475$i = 0, $tobool481$i = 0, $tobool487$i = 0, $tobool491$i = 0, $tobool508$i = 0, $tobool513$i = 0, $tobool515$i = 0, $tobool518$i = 0, $tobool521$i = 0, $tobool534$i = 0, $tobool536$i = 0;
	 var $tobool539$i = 0, $tobool542$i = 0, $tobool56$i = 0, $tobool56338$i = 0, $tobool578358$i = 0, $tobool58$i = 0, $tobool594$i = 0, $tobool6$i$i = 0, $tobool6$i$i78 = 0, $tobool605$i = 0, $tobool61$i = 0, $tobool611$i = 0, $tobool652$i = 0, $tobool655$i = 0, $tobool658$i = 0, $tobool7$i = 0, $tobool72$i = 0, $tobool84$i = 0, $tobool85$i = 0, $tobool88$i = 0;
	 var $tobool89$i = 0, $tobool91$i = 0, $tobool94$i = 0, $tobool98$i = 0, $tobool99$i = 0, $trans_i$0$ph377$i = 0, $trans_i$0312$i = 0, $trans_i$0343$i = 0, $trans_i$1344$i = 0, $trans_i$1371$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $next_c$i12 = sp + 4|0;
	 $next_c$i = sp;
	 $__opaque = (($preg) + 4|0);
	 $0 = HEAP32[$__opaque>>2]|0;
	 $num_tags = (($0) + 40|0);
	 $1 = HEAP32[$num_tags>>2]|0;
	 $cmp = ($1|0)<(1);
	 $cmp1 = ($nmatch|0)==(0);
	 $or$cond = $cmp | $cmp1;
	 if ($or$cond) {
	  $tags$0 = 0;
	 } else {
	  $mul = $1 << 2;
	  $call = (_malloc($mul)|0);
	  $cmp3 = ($call|0)==(0|0);
	  if ($cmp3) {
	   $retval$0 = 12;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $tags$0 = $call;
	  }
	 }
	 $have_backrefs = (($0) + 60|0);
	 $2 = HEAP32[$have_backrefs>>2]|0;
	 $tobool = ($2|0)==(0);
	 L5: do {
	  if ($tobool) {
	   HEAP32[$next_c$i12>>2] = 0;
	   $and$i13 = $eflags & 1;
	   $and1$i14 = $eflags & 2;
	   $cflags$i15 = (($0) + 56|0);
	   $135 = HEAP32[$cflags$i15>>2]|0;
	   $and2$i16 = $135 & 4;
	   $tobool$i17 = ($tags$0|0)==(0|0);
	   if ($tobool$i17) {
	    $num_tags$0$i = 0;
	   } else {
	    $136 = HEAP32[$num_tags>>2]|0;
	    $num_tags$0$i = $136;
	   }
	   $mul$i19 = $num_tags$0$i << 2;
	   $num_states$i20 = (($0) + 52|0);
	   $137 = HEAP32[$num_states$i20>>2]|0;
	   $add$i21 = $137 << 3;
	   $mul4$i = (($add$i21) + 8)|0;
	   $mul9$i = Math_imul($mul$i19, $137)|0;
	   $add10$i = (($mul4$i) + ($mul9$i))|0;
	   $mul11$i = $add10$i << 1;
	   $add12$i = (($mul$i19) + 12)|0;
	   $add13$i = (($add12$i) + ($add$i21))|0;
	   $add14$i = (($add13$i) + ($mul11$i))|0;
	   $call$i22 = (_malloc($add14$i)|0);
	   $cmp$i23 = ($call$i22|0)==(0|0);
	   if ($cmp$i23) {
	    $status$0155 = 12;
	   } else {
	    _memset(($call$i22|0),0,($add14$i|0))|0;
	    $add$ptr$i25 = (($call$i22) + ($mul$i19)|0);
	    $138 = $add$ptr$i25;
	    $rem$i = $138 & 3;
	    $tobool17$i = ($rem$i|0)==(0);
	    $sub$i26 = (4 - ($rem$i))|0;
	    $$sub$i = $tobool17$i ? 0 : $sub$i26;
	    $add$ptr$sum$i = (($$sub$i) + ($mul$i19))|0;
	    $add$ptr19$i = (($call$i22) + ($add$ptr$sum$i)|0);
	    $add$ptr19$sum$i = (($add$ptr$sum$i) + ($mul4$i))|0;
	    $add$ptr20$i = (($call$i22) + ($add$ptr19$sum$i)|0);
	    $139 = $add$ptr20$i;
	    $rem21$i = $139 & 3;
	    $tobool22$i = ($rem21$i|0)==(0);
	    $sub25$i = (4 - ($rem21$i))|0;
	    $cond28$i = $tobool22$i ? 0 : $sub25$i;
	    $add$ptr20$sum$i = (($cond28$i) + ($add$ptr19$sum$i))|0;
	    $add$ptr29$i = (($call$i22) + ($add$ptr20$sum$i)|0);
	    $add$ptr29$sum$i = (($add$ptr20$sum$i) + ($mul4$i))|0;
	    $add$ptr30$i = (($call$i22) + ($add$ptr29$sum$i)|0);
	    $140 = $add$ptr30$i;
	    $rem31$i = $140 & 3;
	    $tobool32$i = ($rem31$i|0)==(0);
	    $sub35$i = (4 - ($rem31$i))|0;
	    $$sub35$i = $tobool32$i ? 0 : $sub35$i;
	    $add$ptr30$sum$i = (($$sub35$i) + ($add$ptr29$sum$i))|0;
	    $add$ptr39$i = (($call$i22) + ($add$ptr30$sum$i)|0);
	    $add$ptr39$sum$i = (($add$ptr30$sum$i) + ($add$i21))|0;
	    $add$ptr40$i = (($call$i22) + ($add$ptr39$sum$i)|0);
	    $141 = $add$ptr40$i;
	    $rem41$i = $141 & 3;
	    $cmp51384$i = ($137|0)>(0);
	    if ($cmp51384$i) {
	     $sub45$i = (4 - ($rem41$i))|0;
	     $tobool42$i = ($rem41$i|0)==(0);
	     $cond48$i = $tobool42$i ? 0 : $sub45$i;
	     $add$ptr40$sum$i = (($cond48$i) + ($add$ptr39$sum$i))|0;
	     $add$ptr49$i = (($call$i22) + ($add$ptr40$sum$i)|0);
	     $add$ptr52$sum$i = $num_tags$0$i << 3;
	     $i$0385$i = 0;$tmp_buf$0386$i = $add$ptr49$i;
	     while(1) {
	      $tags$i = ((($add$ptr29$i) + ($i$0385$i<<3)|0) + 4|0);
	      HEAP32[$tags$i>>2] = $tmp_buf$0386$i;
	      $add$ptr52$i = (($tmp_buf$0386$i) + ($mul$i19)|0);
	      $tags54$i = ((($add$ptr19$i) + ($i$0385$i<<3)|0) + 4|0);
	      HEAP32[$tags54$i>>2] = $add$ptr52$i;
	      $add$ptr55$i = (($tmp_buf$0386$i) + ($add$ptr52$sum$i)|0);
	      $inc$i28 = (($i$0385$i) + 1)|0;
	      $exitcond146 = ($inc$i28|0)==($137|0);
	      if ($exitcond146) {
	       $i$1383$i = 0;
	       break;
	      } else {
	       $i$0385$i = $inc$i28;$tmp_buf$0386$i = $add$ptr55$i;
	      }
	     }
	     while(1) {
	      $pos61$i = (($add$ptr39$i) + ($i$1383$i<<3)|0);
	      HEAP32[$pos61$i>>2] = -1;
	      $inc63$i = (($i$1383$i) + 1)|0;
	      $exitcond = ($inc63$i|0)==($137|0);
	      if ($exitcond) {
	       break;
	      } else {
	       $i$1383$i = $inc63$i;
	      }
	     }
	    }
	    $call66$i = (_mbtowc($next_c$i12,$string,4)|0);
	    $cmp67$i = ($call66$i|0)<(1);
	    if ($cmp67$i) {
	     $cmp69$i = ($call66$i|0)<(0);
	     if ($cmp69$i) {
	      $status$0155 = 1;
	      break;
	     }
	     $inc72$i = (($call66$i) + 1)|0;
	     $pos_add_next$0$i29 = $inc72$i;
	    } else {
	     $pos_add_next$0$i29 = $call66$i;
	    }
	    $add$ptr75$i = (($string) + ($pos_add_next$0$i29)|0);
	    $initial$i30 = (($0) + 8|0);
	    $tobool107$i = ($and2$i16|0)==(0);
	    $tobool91$i = ($and$i13|0)==(0);
	    $cmp182298$i = ($num_tags$0$i|0)>(0);
	    $final$i31 = (($0) + 12|0);
	    $num_minimals$i = (($0) + 44|0);
	    $tag_directions$i32 = (($0) + 32|0);
	    $minimal_tags$i = (($0) + 36|0);
	    $cmp228$i = ($num_tags$0$i|0)==(0);
	    $cmp182298$not$i = $cmp182298$i ^ 1;
	    $match_eo$0$i33 = -1;$new_match$0$i = 0;$pos$0$i = 0;$pos_add_next$1$i34 = $pos_add_next$0$i29;$prev_c$0$i36 = 0;$reach$0$i = $add$ptr29$i;$reach_next$0$i = $add$ptr19$i;$reach_next_i$0$i = $add$ptr19$i;$str_byte$0$i35 = $add$ptr75$i;$tmp_tags$0$i = $call$i22;
	    while(1) {
	     $cmp76$i = ($match_eo$0$i33|0)<(0);
	     if ($cmp76$i) {
	      $142 = HEAP32[$initial$i30>>2]|0;
	      $state310369$i = (($142) + 8|0);
	      $143 = HEAP32[$state310369$i>>2]|0;
	      $cmp79311370$i = ($143|0)==(0|0);
	      L313: do {
	       if ($cmp79311370$i) {
	        $match_eo$1$ph366$i = $match_eo$0$i33;$new_match$1$ph368$i = $new_match$0$i;$reach_next_i$1$ph364$i = $reach_next_i$0$i;
	       } else {
	        $cmp141$i = ($pos$0$i|0)==(0);
	        $cmp164$i = ($prev_c$0$i36|0)==(95);
	        $cmp90$i = ($pos$0$i|0)<(1);
	        $or$cond$i38 = $cmp90$i & $tobool91$i;
	        $cmp93$i = ($prev_c$0$i36|0)!=(10);
	        $or$cond271$i = $cmp93$i | $tobool107$i;
	        $or$cond271$not$i = $or$cond271$i ^ 1;
	        $match_eo$1$ph373$i = $match_eo$0$i33;$new_match$1$ph375$i = $new_match$0$i;$reach_next_i$1$ph371$i = $reach_next_i$0$i;$state310378$i = $state310369$i;$trans_i$0$ph377$i = $142;
	        while(1) {
	         $state314$i = $state310378$i;$trans_i$0312$i = $trans_i$0$ph377$i;
	         L317: while(1) {
	          $state_id$i39 = (($trans_i$0312$i) + 12|0);
	          $144 = HEAP32[$state_id$i39>>2]|0;
	          $pos82$i = (($add$ptr39$i) + ($144<<3)|0);
	          $145 = HEAP32[$pos82$i>>2]|0;
	          $cmp83$i = ($145|0)<($pos$0$i|0);
	          if (!($cmp83$i)) {
	           $match_eo$3$i = $match_eo$1$ph373$i;$new_match$3$i = $new_match$1$ph375$i;$reach_next_i$2$i = $reach_next_i$1$ph371$i;
	           break;
	          }
	          $assertions$i40 = (($trans_i$0312$i) + 20|0);
	          $146 = HEAP32[$assertions$i40>>2]|0;
	          $tobool85$i = ($146|0)==(0);
	          if ($tobool85$i) {
	           label = 256;
	           break;
	          }
	          $and87$i = $146 & 1;
	          $tobool88$i = ($and87$i|0)==(0);
	          $brmerge$i41 = $tobool88$i | $or$cond$i38;
	          $brmerge411$i = $brmerge$i41 | $or$cond271$not$i;
	          L321: do {
	           if ($brmerge411$i) {
	            $and98$i = $146 & 2;
	            $tobool99$i = ($and98$i|0)==(0);
	            if (!($tobool99$i)) {
	             $147 = HEAP32[$next_c$i12>>2]|0;
	             $148 = $147 | $and1$i14;
	             $149 = ($148|0)!=(0);
	             $cmp105$i43 = ($147|0)!=(10);
	             $or$cond273$i = $cmp105$i43 | $tobool107$i;
	             $or$cond412$i = $149 & $or$cond273$i;
	             if ($or$cond412$i) {
	              break;
	             }
	            }
	            $and110$i = $146 & 16;
	            $tobool111$i = ($and110$i|0)==(0);
	            do {
	             if (!($tobool111$i)) {
	              if ($cmp164$i) {
	               break L321;
	              }
	              $call115$i = (_iswalnum($prev_c$0$i36)|0);
	              $tobool116$i = ($call115$i|0)==(0);
	              if (!($tobool116$i)) {
	               break L321;
	              }
	              $150 = HEAP32[$next_c$i12>>2]|0;
	              $cmp118$i = ($150|0)==(95);
	              if ($cmp118$i) {
	               break;
	              }
	              $call120$i = (_iswalnum($150)|0);
	              $tobool121$i = ($call120$i|0)==(0);
	              if ($tobool121$i) {
	               break L321;
	              }
	             }
	            } while(0);
	            $151 = HEAP32[$assertions$i40>>2]|0;
	            $and124$i = $151 & 32;
	            $tobool125$i = ($and124$i|0)==(0);
	            if ($tobool125$i) {
	             $153 = $151;
	            } else {
	             if (!($cmp164$i)) {
	              $call129$i = (_iswalnum($prev_c$0$i36)|0);
	              $tobool130$i = ($call129$i|0)==(0);
	              if ($tobool130$i) {
	               break;
	              }
	             }
	             $152 = HEAP32[$next_c$i12>>2]|0;
	             $cmp132$i = ($152|0)==(95);
	             if ($cmp132$i) {
	              break;
	             }
	             $call134$i = (_iswalnum($152)|0);
	             $tobool135$i = ($call134$i|0)==(0);
	             if (!($tobool135$i)) {
	              break;
	             }
	             $$pre407$i = HEAP32[$assertions$i40>>2]|0;
	             $153 = $$pre407$i;
	            }
	            $and138$i = $153 & 64;
	            $tobool139$i = ($and138$i|0)==(0);
	            $or$cond274$i = $tobool139$i | $cmp141$i;
	            do {
	             if (!($or$cond274$i)) {
	              $154 = HEAP32[$next_c$i12>>2]|0;
	              $cmp143$i46 = ($154|0)==(0);
	              if ($cmp143$i46) {
	               break;
	              }
	              if ($cmp164$i) {
	               $155 = $154;$156 = 1;
	              } else {
	               $call146$i = (_iswalnum($prev_c$0$i36)|0);
	               $tobool147$i = ($call146$i|0)!=(0);
	               $$pre404$i = HEAP32[$next_c$i12>>2]|0;
	               $155 = $$pre404$i;$156 = $tobool147$i;
	              }
	              $cmp148$i = ($155|0)==(95);
	              if ($cmp148$i) {
	               if ($156) {
	                break L321;
	               } else {
	                break;
	               }
	              } else {
	               $call150$i = (_iswalnum($155)|0);
	               $tobool151$i = ($call150$i|0)!=(0);
	               $cmp154tmp$i = $156 ^ $tobool151$i;
	               if ($cmp154tmp$i) {
	                break;
	               } else {
	                break L321;
	               }
	              }
	             }
	            } while(0);
	            $157 = HEAP32[$assertions$i40>>2]|0;
	            $and157$i = $157 & 128;
	            $tobool158$i = ($and157$i|0)==(0);
	            if ($tobool158$i) {
	             label = 256;
	             break L317;
	            }
	            if ($cmp141$i) {
	             break;
	            }
	            $158 = HEAP32[$next_c$i12>>2]|0;
	            $cmp162$i = ($158|0)==(0);
	            if ($cmp162$i) {
	             break;
	            }
	            if ($cmp164$i) {
	             $159 = $158;$160 = 1;
	            } else {
	             $call166$i = (_iswalnum($prev_c$0$i36)|0);
	             $tobool167$i = ($call166$i|0)!=(0);
	             $$pre$i49 = HEAP32[$next_c$i12>>2]|0;
	             $159 = $$pre$i49;$160 = $tobool167$i;
	            }
	            $cmp170$i = ($159|0)==(95);
	            if ($cmp170$i) {
	             if ($160) {
	              label = 256;
	              break L317;
	             } else {
	              break;
	             }
	            } else {
	             $call172$i = (_iswalnum($159)|0);
	             $tobool173$i = ($call172$i|0)!=(0);
	             $cmp176$i = $160 ^ $tobool173$i;
	             if ($cmp176$i) {
	              break;
	             } else {
	              label = 256;
	              break L317;
	             }
	            }
	           }
	          } while(0);
	          $incdec$ptr$i50 = (($trans_i$0312$i) + 32|0);
	          $state$i = (($trans_i$0312$i) + 40|0);
	          $161 = HEAP32[$state$i>>2]|0;
	          $cmp79$i = ($161|0)==(0|0);
	          if ($cmp79$i) {
	           $match_eo$1$ph366$i = $match_eo$1$ph373$i;$new_match$1$ph368$i = $new_match$1$ph375$i;$reach_next_i$1$ph364$i = $reach_next_i$1$ph371$i;
	           break L313;
	          } else {
	           $state314$i = $state$i;$trans_i$0312$i = $incdec$ptr$i50;
	          }
	         }
	         if ((label|0) == 256) {
	          label = 0;
	          $162 = HEAP32[$state314$i>>2]|0;
	          HEAP32[$reach_next_i$1$ph371$i>>2] = $162;
	          if ($cmp182298$i) {
	           $tags184$i = (($reach_next_i$1$ph371$i) + 4|0);
	           $163 = HEAP32[$tags184$i>>2]|0;
	           _memset(($163|0),-1,($mul$i19|0))|0;
	          }
	          $tags189$i = (($trans_i$0312$i) + 16|0);
	          $164 = HEAP32[$tags189$i>>2]|0;
	          $tobool190$i = ($164|0)==(0|0);
	          if (!($tobool190$i)) {
	           $165 = HEAP32[$164>>2]|0;
	           $cmp193300$i = ($165|0)>(-1);
	           if ($cmp193300$i) {
	            $tags197$i = (($reach_next_i$1$ph371$i) + 4|0);
	            $166 = $165;$tag_i$0301$i = $164;
	            while(1) {
	             $cmp195$i = ($166|0)<($num_tags$0$i|0);
	             if ($cmp195$i) {
	              $167 = HEAP32[$tags197$i>>2]|0;
	              $arrayidx198$i = (($167) + ($166<<2)|0);
	              HEAP32[$arrayidx198$i>>2] = $pos$0$i;
	             }
	             $incdec$ptr200$i = (($tag_i$0301$i) + 4|0);
	             $168 = HEAP32[$incdec$ptr200$i>>2]|0;
	             $cmp193$i = ($168|0)>(-1);
	             if ($cmp193$i) {
	              $166 = $168;$tag_i$0301$i = $incdec$ptr200$i;
	             } else {
	              break;
	             }
	            }
	           }
	          }
	          $169 = HEAP32[$reach_next_i$1$ph371$i>>2]|0;
	          $170 = HEAP32[$final$i31>>2]|0;
	          $cmp203$not$i = ($169|0)!=($170|0);
	          $brmerge413$i = $cmp203$not$i | $cmp182298$not$i;
	          if ($brmerge413$i) {
	           $new_match$1$ph375$mux$i = $cmp203$not$i ? $new_match$1$ph375$i : 1;
	           $match_eo$1$ph373$mux$i = $cmp203$not$i ? $match_eo$1$ph373$i : $pos$0$i;
	           $tags218$i$pre = (($reach_next_i$1$ph371$i) + 4|0);
	           $match_eo$2$i51 = $match_eo$1$ph373$mux$i;$new_match$2$i = $new_match$1$ph375$mux$i;$tags218$i$pre$phiZZ2D = $tags218$i$pre;
	          } else {
	           $tags208$i = (($reach_next_i$1$ph371$i) + 4|0);
	           $171 = HEAP32[$tags208$i>>2]|0;
	           $i$3303$i = 0;
	           while(1) {
	            $arrayidx209$i = (($171) + ($i$3303$i<<2)|0);
	            $172 = HEAP32[$arrayidx209$i>>2]|0;
	            $arrayidx210$i = (($tags$0) + ($i$3303$i<<2)|0);
	            HEAP32[$arrayidx210$i>>2] = $172;
	            $inc212$i = (($i$3303$i) + 1)|0;
	            $exitcond$i = ($inc212$i|0)==($num_tags$0$i|0);
	            if ($exitcond$i) {
	             $match_eo$2$i51 = $pos$0$i;$new_match$2$i = 1;$tags218$i$pre$phiZZ2D = $tags208$i;
	             break;
	            } else {
	             $i$3303$i = $inc212$i;
	            }
	           }
	          }
	          $173 = HEAP32[$state_id$i39>>2]|0;
	          $pos217$i = (($add$ptr39$i) + ($173<<3)|0);
	          HEAP32[$pos217$i>>2] = $pos$0$i;
	          $174 = HEAP32[$state_id$i39>>2]|0;
	          $tags221$i = ((($add$ptr39$i) + ($174<<3)|0) + 4|0);
	          HEAP32[$tags221$i>>2] = $tags218$i$pre$phiZZ2D;
	          $incdec$ptr222$i = (($reach_next_i$1$ph371$i) + 8|0);
	          $match_eo$3$i = $match_eo$2$i51;$new_match$3$i = $new_match$2$i;$reach_next_i$2$i = $incdec$ptr222$i;
	         }
	         $incdec$ptr224$i = (($trans_i$0312$i) + 32|0);
	         $state310$i = (($trans_i$0312$i) + 40|0);
	         $175 = HEAP32[$state310$i>>2]|0;
	         $cmp79311$i = ($175|0)==(0|0);
	         if ($cmp79311$i) {
	          $match_eo$1$ph366$i = $match_eo$3$i;$new_match$1$ph368$i = $new_match$3$i;$reach_next_i$1$ph364$i = $reach_next_i$2$i;
	          break;
	         } else {
	          $match_eo$1$ph373$i = $match_eo$3$i;$new_match$1$ph375$i = $new_match$3$i;$reach_next_i$1$ph371$i = $reach_next_i$2$i;$state310378$i = $state310$i;$trans_i$0$ph377$i = $incdec$ptr224$i;
	         }
	        }
	       }
	      } while(0);
	      HEAP32[$reach_next_i$1$ph364$i>>2] = 0;
	      $match_eo$4$i = $match_eo$1$ph366$i;$new_match$4$i = $new_match$1$ph368$i;
	     } else {
	      $cmp230$i = ($reach_next_i$0$i|0)==($reach_next$0$i|0);
	      $or$cond275$i = $cmp228$i | $cmp230$i;
	      if ($or$cond275$i) {
	       $match_eo$10$i = $match_eo$0$i33;
	       break;
	      } else {
	       $match_eo$4$i = $match_eo$0$i33;$new_match$4$i = $new_match$0$i;
	      }
	     }
	     $176 = HEAP32[$next_c$i12>>2]|0;
	     $tobool234$i52 = ($176|0)==(0);
	     if ($tobool234$i52) {
	      $match_eo$10$i = $match_eo$4$i;
	      break;
	     }
	     $add238$i = (($pos$0$i) + ($pos_add_next$1$i34))|0;
	     $call239$i = (_mbtowc($next_c$i12,$str_byte$0$i35,4)|0);
	     $cmp240$i = ($call239$i|0)<(1);
	     if ($cmp240$i) {
	      $cmp242$i = ($call239$i|0)<(0);
	      if ($cmp242$i) {
	       $status$0155 = 1;
	       break L5;
	      }
	      $inc245$i = (($call239$i) + 1)|0;
	      $pos_add_next$2$i = $inc245$i;
	     } else {
	      $pos_add_next$2$i = $call239$i;
	     }
	     $add$ptr248$i = (($str_byte$0$i35) + ($pos_add_next$2$i)|0);
	     $177 = HEAP32[$num_minimals$i>>2]|0;
	     $tobool250$i = ($177|0)==(0);
	     $tobool252$i = ($new_match$4$i|0)==(0);
	     $or$cond276$i = $tobool250$i | $tobool252$i;
	     if ($or$cond276$i) {
	      $new_match$5$i = $new_match$4$i;$reach$1$i = $reach_next$0$i;$reach_next$1$i = $reach$0$i;
	     } else {
	      $178 = HEAP32[$reach_next$0$i>>2]|0;
	      $tobool256319$i = ($178|0)==(0|0);
	      if ($tobool256319$i) {
	       $reach_next_i$3$lcssa$i = $reach$0$i;
	      } else {
	       $189 = $178;$reach_next_i$3322$i = $reach$0$i;$state255324$i = $reach_next$0$i;
	       while(1) {
	        $179 = HEAP32[$minimal_tags$i>>2]|0;
	        $180 = HEAP32[$179>>2]|0;
	        $cmp260316$i = ($180|0)>(-1);
	        $tags270$i = (($state255324$i) + 4|0);
	        L394: do {
	         if ($cmp260316$i) {
	          $182 = $180;$i$4317$i = 0;
	          while(1) {
	           $add264270$i = $i$4317$i | 1;
	           $arrayidx266$i = (($179) + ($add264270$i<<2)|0);
	           $181 = HEAP32[$arrayidx266$i>>2]|0;
	           $cmp267$i = ($182|0)<($num_tags$0$i|0);
	           if (!($cmp267$i)) {
	            $reach_next_i$4$i = $reach_next_i$3322$i;
	            break L394;
	           }
	           $183 = HEAP32[$tags270$i>>2]|0;
	           $arrayidx271$i53 = (($183) + ($181<<2)|0);
	           $184 = HEAP32[$arrayidx271$i53>>2]|0;
	           $arrayidx272$i54 = (($tags$0) + ($181<<2)|0);
	           $185 = HEAP32[$arrayidx272$i54>>2]|0;
	           $cmp273$i = ($184|0)==($185|0);
	           if ($cmp273$i) {
	            $arrayidx276$i = (($183) + ($182<<2)|0);
	            $186 = HEAP32[$arrayidx276$i>>2]|0;
	            $arrayidx277$i = (($tags$0) + ($182<<2)|0);
	            $187 = HEAP32[$arrayidx277$i>>2]|0;
	            $cmp278$i = ($186|0)<($187|0);
	            if ($cmp278$i) {
	             $reach_next_i$4$i = $reach_next_i$3322$i;
	             break L394;
	            }
	           }
	           $add283$i = (($i$4317$i) + 2)|0;
	           $arrayidx259$i = (($179) + ($add283$i<<2)|0);
	           $188 = HEAP32[$arrayidx259$i>>2]|0;
	           $cmp260$i = ($188|0)>(-1);
	           if ($cmp260$i) {
	            $182 = $188;$i$4317$i = $add283$i;
	           } else {
	            label = 283;
	            break;
	           }
	          }
	         } else {
	          label = 283;
	         }
	        } while(0);
	        if ((label|0) == 283) {
	         label = 0;
	         HEAP32[$reach_next_i$3322$i>>2] = $189;
	         $tags289$i = (($reach_next_i$3322$i) + 4|0);
	         $190 = HEAP32[$tags289$i>>2]|0;
	         $tags290$pre$phi410$iZ2D = HEAP32[$tags270$i>>2]|0;
	         HEAP32[$tags289$i>>2] = $tags290$pre$phi410$iZ2D;
	         HEAP32[$tags270$i>>2] = $190;
	         $incdec$ptr293$i = (($reach_next_i$3322$i) + 8|0);
	         $reach_next_i$4$i = $incdec$ptr293$i;
	        }
	        $incdec$ptr296$i = (($state255324$i) + 8|0);
	        $191 = HEAP32[$incdec$ptr296$i>>2]|0;
	        $tobool256$i = ($191|0)==(0|0);
	        if ($tobool256$i) {
	         $reach_next_i$3$lcssa$i = $reach_next_i$4$i;
	         break;
	        } else {
	         $189 = $191;$reach_next_i$3322$i = $reach_next_i$4$i;$state255324$i = $incdec$ptr296$i;
	        }
	       }
	      }
	      HEAP32[$reach_next_i$3$lcssa$i>>2] = 0;
	      $new_match$5$i = 0;$reach$1$i = $reach$0$i;$reach_next$1$i = $reach_next$0$i;
	     }
	     $192 = HEAP32[$reach$1$i>>2]|0;
	     $tobool302353$i = ($192|0)==(0|0);
	     if ($tobool302353$i) {
	      $match_eo$5$lcssa$i = $match_eo$4$i;$new_match$6$lcssa$i = $new_match$5$i;$reach_next_i$5$lcssa$i = $reach_next$1$i;$tmp_tags$1$lcssa$i = $tmp_tags$0$i;
	     } else {
	      $cmp372$i = ($add238$i|0)==(0);
	      $cmp398$i = ($176|0)==(95);
	      $cmp320$i55 = ($add238$i|0)<(1);
	      $or$cond277$i = $cmp320$i55 & $tobool91$i;
	      $cmp324$i = ($176|0)!=(10);
	      $or$cond278$i = $cmp324$i | $tobool107$i;
	      $or$cond278$not$i = $or$cond278$i ^ 1;
	      $193 = $192;$match_eo$5356$i = $match_eo$4$i;$new_match$6357$i = $new_match$5$i;$reach_i$1354$i = $reach$1$i;$reach_next_i$5355$i = $reach_next$1$i;$tmp_tags$1358$i = $tmp_tags$0$i;
	      while(1) {
	       $state306337$i = (($193) + 8|0);
	       $194 = HEAP32[$state306337$i>>2]|0;
	       $tobool307338$i = ($194|0)==(0|0);
	       if ($tobool307338$i) {
	        $match_eo$6$lcssa$i = $match_eo$5356$i;$new_match$7$lcssa$i = $new_match$6357$i;$reach_next_i$6$lcssa$i = $reach_next_i$5355$i;$tmp_tags$2$lcssa$i = $tmp_tags$1358$i;
	       } else {
	        $tags456$i = (($reach_i$1354$i) + 4|0);
	        $match_eo$6341$i = $match_eo$5356$i;$new_match$7342$i = $new_match$6357$i;$reach_next_i$6339$i = $reach_next_i$5355$i;$state306347$i = $state306337$i;$tmp_tags$2343$i = $tmp_tags$1358$i;$trans_i$1344$i = $193;
	        while(1) {
	         $195 = HEAP32[$trans_i$1344$i>>2]|0;
	         $cmp309$i = ($195>>>0)>($176>>>0);
	         L414: do {
	          if ($cmp309$i) {
	           $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	          } else {
	           $code_max$i57 = (($trans_i$1344$i) + 4|0);
	           $196 = HEAP32[$code_max$i57>>2]|0;
	           $cmp311$i = ($196>>>0)<($176>>>0);
	           if ($cmp311$i) {
	            $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	            break;
	           }
	           $assertions313$i = (($trans_i$1344$i) + 20|0);
	           $197 = HEAP32[$assertions313$i>>2]|0;
	           $tobool314$i = ($197|0)==(0);
	           L417: do {
	            if (!($tobool314$i)) {
	             $and317$i = $197 & 1;
	             $tobool318$i = ($and317$i|0)==(0);
	             $brmerge414$i = $tobool318$i | $or$cond277$i;
	             $brmerge415$i = $brmerge414$i | $or$cond278$not$i;
	             if (!($brmerge415$i)) {
	              $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	              break L414;
	             }
	             $and329$i = $197 & 2;
	             $tobool330$i = ($and329$i|0)==(0);
	             if (!($tobool330$i)) {
	              $198 = HEAP32[$next_c$i12>>2]|0;
	              $199 = $198 | $and1$i14;
	              $200 = ($199|0)!=(0);
	              $cmp336$i = ($198|0)!=(10);
	              $or$cond280$i = $cmp336$i | $tobool107$i;
	              $or$cond416$i = $200 & $or$cond280$i;
	              if ($or$cond416$i) {
	               $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	               break L414;
	              }
	             }
	             $and341$i = $197 & 16;
	             $tobool342$i = ($and341$i|0)==(0);
	             do {
	              if (!($tobool342$i)) {
	               if ($cmp398$i) {
	                $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                break L414;
	               }
	               $call346$i = (_iswalnum($176)|0);
	               $tobool347$i = ($call346$i|0)==(0);
	               if (!($tobool347$i)) {
	                $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                break L414;
	               }
	               $201 = HEAP32[$next_c$i12>>2]|0;
	               $cmp349$i = ($201|0)==(95);
	               if ($cmp349$i) {
	                break;
	               }
	               $call351$i = (_iswalnum($201)|0);
	               $tobool352$i58 = ($call351$i|0)==(0);
	               if ($tobool352$i58) {
	                $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                break L414;
	               }
	              }
	             } while(0);
	             $202 = HEAP32[$assertions313$i>>2]|0;
	             $and355$i = $202 & 32;
	             $tobool356$i = ($and355$i|0)==(0);
	             if ($tobool356$i) {
	              $204 = $202;
	             } else {
	              if (!($cmp398$i)) {
	               $call360$i = (_iswalnum($176)|0);
	               $tobool361$i = ($call360$i|0)==(0);
	               if ($tobool361$i) {
	                $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                break L414;
	               }
	              }
	              $203 = HEAP32[$next_c$i12>>2]|0;
	              $cmp363$i = ($203|0)==(95);
	              if ($cmp363$i) {
	               $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	               break L414;
	              }
	              $call365$i = (_iswalnum($203)|0);
	              $tobool366$i = ($call365$i|0)==(0);
	              if (!($tobool366$i)) {
	               $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	               break L414;
	              }
	              $$pre408$i = HEAP32[$assertions313$i>>2]|0;
	              $204 = $$pre408$i;
	             }
	             $and369$i = $204 & 64;
	             $tobool370$i = ($and369$i|0)==(0);
	             $or$cond281$i = $tobool370$i | $cmp372$i;
	             do {
	              if (!($or$cond281$i)) {
	               $205 = HEAP32[$next_c$i12>>2]|0;
	               $cmp374$i = ($205|0)==(0);
	               if ($cmp374$i) {
	                break;
	               }
	               if ($cmp398$i) {
	                $206 = $205;$207 = 1;
	               } else {
	                $call378$i = (_iswalnum($176)|0);
	                $tobool379$i = ($call378$i|0)!=(0);
	                $$pre406$i = HEAP32[$next_c$i12>>2]|0;
	                $206 = $$pre406$i;$207 = $tobool379$i;
	               }
	               $cmp382$i = ($206|0)==(95);
	               if ($cmp382$i) {
	                if ($207) {
	                 $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                 break L414;
	                } else {
	                 break;
	                }
	               } else {
	                $call384$i = (_iswalnum($206)|0);
	                $tobool385$i = ($call384$i|0)!=(0);
	                $cmp388tmp$i = $207 ^ $tobool385$i;
	                if ($cmp388tmp$i) {
	                 break;
	                } else {
	                 $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                 break L414;
	                }
	               }
	              }
	             } while(0);
	             $208 = HEAP32[$assertions313$i>>2]|0;
	             $and391$i = $208 & 128;
	             $tobool392$i59 = ($and391$i|0)==(0);
	             do {
	              if (!($tobool392$i59)) {
	               if ($cmp372$i) {
	                $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                break L414;
	               }
	               $209 = HEAP32[$next_c$i12>>2]|0;
	               $cmp396$i = ($209|0)==(0);
	               if ($cmp396$i) {
	                $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                break L414;
	               }
	               if ($cmp398$i) {
	                $210 = $209;$211 = 1;
	               } else {
	                $call400$i = (_iswalnum($176)|0);
	                $tobool401$i61 = ($call400$i|0)!=(0);
	                $$pre405$i = HEAP32[$next_c$i12>>2]|0;
	                $210 = $$pre405$i;$211 = $tobool401$i61;
	               }
	               $cmp404$i = ($210|0)==(95);
	               if ($cmp404$i) {
	                if ($211) {
	                 break;
	                } else {
	                 $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                 break L414;
	                }
	               } else {
	                $call406$i = (_iswalnum($210)|0);
	                $tobool407$i = ($call406$i|0)!=(0);
	                $cmp410$i = $211 ^ $tobool407$i;
	                if ($cmp410$i) {
	                 $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                 break L414;
	                } else {
	                 break;
	                }
	               }
	              }
	             } while(0);
	             $212 = HEAP32[$assertions313$i>>2]|0;
	             $and413$i = $212 & 4;
	             $tobool414$i = ($and413$i|0)==(0);
	             do {
	              if ($tobool414$i) {
	               $215 = $212;
	              } else {
	               $213 = HEAP32[$cflags$i15>>2]|0;
	               $and417$i = $213 & 2;
	               $tobool418$i = ($and417$i|0)==(0);
	               if (!($tobool418$i)) {
	                $215 = $212;
	                break;
	               }
	               $class$i62 = (($trans_i$1344$i) + 24|0);
	               $214 = HEAP32[$class$i62>>2]|0;
	               $call420$i = (_iswctype($176,$214)|0);
	               $tobool421$i = ($call420$i|0)==(0);
	               if ($tobool421$i) {
	                $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                break L414;
	               }
	               $$pre409$i = HEAP32[$assertions313$i>>2]|0;
	               $215 = $$pre409$i;
	              }
	             } while(0);
	             $and424$i = $215 & 4;
	             $tobool425$i = ($and424$i|0)==(0);
	             do {
	              if (!($tobool425$i)) {
	               $216 = HEAP32[$cflags$i15>>2]|0;
	               $and428$i = $216 & 2;
	               $tobool429$i = ($and428$i|0)==(0);
	               if ($tobool429$i) {
	                break;
	               }
	               $call431$i = (_towlower($176)|0);
	               $class433$i = (($trans_i$1344$i) + 24|0);
	               $217 = HEAP32[$class433$i>>2]|0;
	               $call434$i = (_iswctype($call431$i,$217)|0);
	               $tobool435$i = ($call434$i|0)==(0);
	               if (!($tobool435$i)) {
	                break;
	               }
	               $call437$i = (_towupper($176)|0);
	               $218 = HEAP32[$class433$i>>2]|0;
	               $call440$i = (_iswctype($call437$i,$218)|0);
	               $tobool441$i = ($call440$i|0)==(0);
	               if ($tobool441$i) {
	                $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                break L414;
	               }
	              }
	             } while(0);
	             $219 = HEAP32[$assertions313$i>>2]|0;
	             $and444$i = $219 & 8;
	             $tobool445$i = ($and444$i|0)==(0);
	             if ($tobool445$i) {
	              break;
	             }
	             $neg_classes$i64 = (($trans_i$1344$i) + 28|0);
	             $220 = HEAP32[$neg_classes$i64>>2]|0;
	             $221 = HEAP32[$220>>2]|0;
	             $cmp8$i$i65 = ($221|0)==(0);
	             if ($cmp8$i$i65) {
	              break;
	             }
	             $222 = HEAP32[$cflags$i15>>2]|0;
	             $and448$i = $222 & 2;
	             $tobool$i$i66 = ($and448$i|0)==(0);
	             if ($tobool$i$i66) {
	              $223 = $221;$classes$addr$09$us$i$i68 = $220;
	              while(1) {
	               $call$us$i$i69 = (_iswctype($176,$223)|0);
	               $tobool1$us$i$i70 = ($call$us$i$i69|0)==(0);
	               if (!($tobool1$us$i$i70)) {
	                $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	                break L414;
	               }
	               $incdec$ptr$us$i$i72 = (($classes$addr$09$us$i$i68) + 4|0);
	               $224 = HEAP32[$incdec$ptr$us$i$i72>>2]|0;
	               $cmp$us$i$i73 = ($224|0)==(0);
	               if ($cmp$us$i$i73) {
	                break L417;
	               } else {
	                $223 = $224;$classes$addr$09$us$i$i68 = $incdec$ptr$us$i$i72;
	               }
	              }
	             } else {
	              $classes$addr$09$i$i75 = $220;
	             }
	             while(1) {
	              $call4$i$i76 = (_towupper($176)|0);
	              $225 = HEAP32[$classes$addr$09$i$i75>>2]|0;
	              $call5$i$i77 = (_iswctype($call4$i$i76,$225)|0);
	              $tobool6$i$i78 = ($call5$i$i77|0)==(0);
	              if (!($tobool6$i$i78)) {
	               $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	               break L414;
	              }
	              $call8$i$i80 = (_towlower($176)|0);
	              $226 = HEAP32[$classes$addr$09$i$i75>>2]|0;
	              $call9$i$i81 = (_iswctype($call8$i$i80,$226)|0);
	              $tobool10$i$i82 = ($call9$i$i81|0)==(0);
	              if (!($tobool10$i$i82)) {
	               $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	               break L414;
	              }
	              $incdec$ptr$i$i84 = (($classes$addr$09$i$i75) + 4|0);
	              $227 = HEAP32[$incdec$ptr$i$i84>>2]|0;
	              $cmp$i$i85 = ($227|0)==(0);
	              if ($cmp$i$i85) {
	               break;
	              } else {
	               $classes$addr$09$i$i75 = $incdec$ptr$i$i84;
	              }
	             }
	            }
	           } while(0);
	           if ($cmp182298$i) {
	            $228 = HEAP32[$tags456$i>>2]|0;
	            $i$5328$i = 0;
	            while(1) {
	             $arrayidx457$i = (($228) + ($i$5328$i<<2)|0);
	             $229 = HEAP32[$arrayidx457$i>>2]|0;
	             $arrayidx458$i = (($tmp_tags$2343$i) + ($i$5328$i<<2)|0);
	             HEAP32[$arrayidx458$i>>2] = $229;
	             $inc460$i = (($i$5328$i) + 1)|0;
	             $exitcond398$i = ($inc460$i|0)==($num_tags$0$i|0);
	             if ($exitcond398$i) {
	              break;
	             } else {
	              $i$5328$i = $inc460$i;
	             }
	            }
	           }
	           $tags462$i = (($trans_i$1344$i) + 16|0);
	           $230 = HEAP32[$tags462$i>>2]|0;
	           $cmp463$i = ($230|0)==(0|0);
	           do {
	            if (!($cmp463$i)) {
	             $231 = HEAP32[$230>>2]|0;
	             $cmp466329$i = ($231|0)>(-1);
	             if ($cmp466329$i) {
	              $232 = $231;$tag_i$1330$i = $230;
	             } else {
	              break;
	             }
	             while(1) {
	              $cmp468$i = ($232|0)<($num_tags$0$i|0);
	              if ($cmp468$i) {
	               $arrayidx470$i = (($tmp_tags$2343$i) + ($232<<2)|0);
	               HEAP32[$arrayidx470$i>>2] = $add238$i;
	              }
	              $incdec$ptr472$i = (($tag_i$1330$i) + 4|0);
	              $233 = HEAP32[$incdec$ptr472$i>>2]|0;
	              $cmp466$i = ($233|0)>(-1);
	              if ($cmp466$i) {
	               $232 = $233;$tag_i$1330$i = $incdec$ptr472$i;
	              } else {
	               break;
	              }
	             }
	            }
	           } while(0);
	           $state_id475$i = (($trans_i$1344$i) + 12|0);
	           $234 = HEAP32[$state_id475$i>>2]|0;
	           $pos477$i = (($add$ptr39$i) + ($234<<3)|0);
	           $235 = HEAP32[$pos477$i>>2]|0;
	           $cmp478$i = ($235|0)<($add238$i|0);
	           if ($cmp478$i) {
	            $236 = HEAP32[$state306347$i>>2]|0;
	            HEAP32[$reach_next_i$6339$i>>2] = $236;
	            $tags482$i = (($reach_next_i$6339$i) + 4|0);
	            $237 = HEAP32[$tags482$i>>2]|0;
	            HEAP32[$tags482$i>>2] = $tmp_tags$2343$i;
	            HEAP32[$pos477$i>>2] = $add238$i;
	            $238 = HEAP32[$state_id475$i>>2]|0;
	            $tags490$i = ((($add$ptr39$i) + ($238<<3)|0) + 4|0);
	            HEAP32[$tags490$i>>2] = $tags482$i;
	            $239 = HEAP32[$reach_next_i$6339$i>>2]|0;
	            $240 = HEAP32[$final$i31>>2]|0;
	            $cmp493$i = ($239|0)==($240|0);
	            do {
	             if ($cmp493$i) {
	              $cmp495$i = ($match_eo$6341$i|0)==(-1);
	              if ($cmp495$i) {
	               if (!($cmp182298$i)) {
	                $match_eo$7$i = $add238$i;$new_match$8$i = 1;
	                break;
	               }
	               $$pre = HEAP32[$tags482$i>>2]|0;
	               $244 = $$pre;
	              } else {
	               if (!($cmp182298$i)) {
	                $match_eo$7$i = $match_eo$6341$i;$new_match$8$i = $new_match$7342$i;
	                break;
	               }
	               $241 = HEAP32[$tags482$i>>2]|0;
	               $242 = HEAP32[$241>>2]|0;
	               $243 = HEAP32[$tags$0>>2]|0;
	               $cmp502$i = ($242|0)>($243|0);
	               if ($cmp502$i) {
	                $match_eo$7$i = $match_eo$6341$i;$new_match$8$i = $new_match$7342$i;
	                break;
	               } else {
	                $244 = $241;
	               }
	              }
	              $i$6336$i = 0;
	              while(1) {
	               $arrayidx508$i = (($244) + ($i$6336$i<<2)|0);
	               $245 = HEAP32[$arrayidx508$i>>2]|0;
	               $arrayidx509$i = (($tags$0) + ($i$6336$i<<2)|0);
	               HEAP32[$arrayidx509$i>>2] = $245;
	               $inc511$i = (($i$6336$i) + 1)|0;
	               $exitcond402$i = ($inc511$i|0)==($num_tags$0$i|0);
	               if ($exitcond402$i) {
	                $match_eo$7$i = $add238$i;$new_match$8$i = 1;
	                break;
	               } else {
	                $i$6336$i = $inc511$i;
	               }
	              }
	             } else {
	              $match_eo$7$i = $match_eo$6341$i;$new_match$8$i = $new_match$7342$i;
	             }
	            } while(0);
	            $incdec$ptr514$i = (($reach_next_i$6339$i) + 8|0);
	            $match_eo$9$i = $match_eo$7$i;$new_match$10$i = $new_match$8$i;$reach_next_i$7$i = $incdec$ptr514$i;$tmp_tags$3$i = $237;
	            break;
	           } else {
	            $246 = HEAP32[$tag_directions$i32>>2]|0;
	            $tags518$i = ((($add$ptr39$i) + ($234<<3)|0) + 4|0);
	            $247 = HEAP32[$tags518$i>>2]|0;
	            $248 = HEAP32[$247>>2]|0;
	            if ($cmp182298$i) {
	             $i$015$i$i87 = 0;
	            } else {
	             $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	             break;
	            }
	            while(1) {
	             $arrayidx$i$i88 = (($246) + ($i$015$i$i87<<2)|0);
	             $249 = HEAP32[$arrayidx$i$i88>>2]|0;
	             $cmp1$i$i89 = ($249|0)==(0);
	             $arrayidx2$i$i90 = (($tmp_tags$2343$i) + ($i$015$i$i87<<2)|0);
	             $250 = HEAP32[$arrayidx2$i$i90>>2]|0;
	             $arrayidx3$i$i91 = (($248) + ($i$015$i$i87<<2)|0);
	             $251 = HEAP32[$arrayidx3$i$i91>>2]|0;
	             if ($cmp1$i$i89) {
	              $cmp4$i$i93 = ($250|0)<($251|0);
	              if ($cmp4$i$i93) {
	               break;
	              }
	              $cmp8$i282$i = ($250|0)>($251|0);
	              if ($cmp8$i282$i) {
	               $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	               break L414;
	              }
	             } else {
	              $cmp13$i$i96 = ($250|0)>($251|0);
	              if ($cmp13$i$i96) {
	               break;
	              }
	              $cmp18$i$i97 = ($250|0)<($251|0);
	              if ($cmp18$i$i97) {
	               $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	               break L414;
	              }
	             }
	             $inc$i$i99 = (($i$015$i$i87) + 1)|0;
	             $cmp$i284$i = ($inc$i$i99|0)<($num_tags$0$i|0);
	             if ($cmp$i284$i) {
	              $i$015$i$i87 = $inc$i$i99;
	             } else {
	              $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $tmp_tags$2343$i;
	              break L414;
	             }
	            }
	            HEAP32[$247>>2] = $tmp_tags$2343$i;
	            $252 = HEAP32[$state306347$i>>2]|0;
	            $253 = HEAP32[$final$i31>>2]|0;
	            $cmp530$i = ($252|0)==($253|0);
	            if ($cmp530$i) {
	             $i$7334$i = 0;
	            } else {
	             $match_eo$9$i = $match_eo$6341$i;$new_match$10$i = $new_match$7342$i;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $248;
	             break;
	            }
	            while(1) {
	             $arrayidx535$i = (($tmp_tags$2343$i) + ($i$7334$i<<2)|0);
	             $254 = HEAP32[$arrayidx535$i>>2]|0;
	             $arrayidx536$i = (($tags$0) + ($i$7334$i<<2)|0);
	             HEAP32[$arrayidx536$i>>2] = $254;
	             $inc538$i = (($i$7334$i) + 1)|0;
	             $exitcond400$i = ($inc538$i|0)==($num_tags$0$i|0);
	             if ($exitcond400$i) {
	              $match_eo$9$i = $add238$i;$new_match$10$i = 1;$reach_next_i$7$i = $reach_next_i$6339$i;$tmp_tags$3$i = $248;
	              break;
	             } else {
	              $i$7334$i = $inc538$i;
	             }
	            }
	           }
	          }
	         } while(0);
	         $incdec$ptr545$i = (($trans_i$1344$i) + 32|0);
	         $state306$i = (($trans_i$1344$i) + 40|0);
	         $255 = HEAP32[$state306$i>>2]|0;
	         $tobool307$i = ($255|0)==(0|0);
	         if ($tobool307$i) {
	          $match_eo$6$lcssa$i = $match_eo$9$i;$new_match$7$lcssa$i = $new_match$10$i;$reach_next_i$6$lcssa$i = $reach_next_i$7$i;$tmp_tags$2$lcssa$i = $tmp_tags$3$i;
	          break;
	         } else {
	          $match_eo$6341$i = $match_eo$9$i;$new_match$7342$i = $new_match$10$i;$reach_next_i$6339$i = $reach_next_i$7$i;$state306347$i = $state306$i;$tmp_tags$2343$i = $tmp_tags$3$i;$trans_i$1344$i = $incdec$ptr545$i;
	         }
	        }
	       }
	       $incdec$ptr548$i = (($reach_i$1354$i) + 8|0);
	       $256 = HEAP32[$incdec$ptr548$i>>2]|0;
	       $tobool302$i = ($256|0)==(0|0);
	       if ($tobool302$i) {
	        $match_eo$5$lcssa$i = $match_eo$6$lcssa$i;$new_match$6$lcssa$i = $new_match$7$lcssa$i;$reach_next_i$5$lcssa$i = $reach_next_i$6$lcssa$i;$tmp_tags$1$lcssa$i = $tmp_tags$2$lcssa$i;
	        break;
	       } else {
	        $193 = $256;$match_eo$5356$i = $match_eo$6$lcssa$i;$new_match$6357$i = $new_match$7$lcssa$i;$reach_i$1354$i = $incdec$ptr548$i;$reach_next_i$5355$i = $reach_next_i$6$lcssa$i;$tmp_tags$1358$i = $tmp_tags$2$lcssa$i;
	       }
	      }
	     }
	     HEAP32[$reach_next_i$5$lcssa$i>>2] = 0;
	     $match_eo$0$i33 = $match_eo$5$lcssa$i;$new_match$0$i = $new_match$6$lcssa$i;$pos$0$i = $add238$i;$pos_add_next$1$i34 = $pos_add_next$2$i;$prev_c$0$i36 = $176;$reach$0$i = $reach$1$i;$reach_next$0$i = $reach_next$1$i;$reach_next_i$0$i = $reach_next_i$5$lcssa$i;$str_byte$0$i35 = $add$ptr248$i;$tmp_tags$0$i = $tmp_tags$1$lcssa$i;
	    }
	    _free($call$i22);
	    $match_eo$10$lobit$i = $match_eo$10$i >>> 31;
	    $match_eo$10$i102 = $match_eo$10$i;$status$0 = $match_eo$10$lobit$i;
	    label = 369;
	   }
	  } else {
	   HEAP32[$next_c$i>>2] = 0;
	   $and$i = $eflags & 1;
	   $and1$i = $eflags & 2;
	   $cflags$i = (($0) + 56|0);
	   $3 = HEAP32[$cflags$i>>2]|0;
	   $and2$i = $3 & 4;
	   $call$i = (___tre_mem_new_impl(0,0)|0);
	   $tobool$i = ($call$i|0)==(0|0);
	   if ($tobool$i) {
	    $status$0155 = 12;
	   } else {
	    $call3$i = (___tre_mem_alloc_impl($call$i,0,0,0,32)|0);
	    $tobool4$i = ($call3$i|0)==(0|0);
	    if ($tobool4$i) {
	     ___tre_mem_destroy($call$i);
	     $status$0155 = 12;
	     break;
	    }
	    $prev$i = (($call3$i) + 24|0);
	    HEAP32[$prev$i>>2] = 0;
	    $next$i = (($call3$i) + 28|0);
	    HEAP32[$next$i>>2] = 0;
	    $4 = HEAP32[$num_tags>>2]|0;
	    $tobool7$i = ($4|0)==(0);
	    if ($tobool7$i) {
	     $tags$0$i = 0;
	     label = 9;
	    } else {
	     $mul$i = $4 << 2;
	     $call10$i = (_malloc($mul$i)|0);
	     $tobool11$i = ($call10$i|0)==(0|0);
	     if ($tobool11$i) {
	      $match_eo$10$i105 = 0;$pmatch$1$i = 0;$ret$0$i = 12;$states_seen$1$i = 0;$tags$1$i = $call10$i;
	     } else {
	      $tags$0$i = $call10$i;
	      label = 9;
	     }
	    }
	    do {
	     if ((label|0) == 9) {
	      $num_submatches$i = (($0) + 28|0);
	      $5 = HEAP32[$num_submatches$i>>2]|0;
	      $tobool15$i = ($5|0)==(0);
	      if ($tobool15$i) {
	       $pmatch$0$i = 0;
	      } else {
	       $mul18$i = $5 << 3;
	       $call19$i = (_malloc($mul18$i)|0);
	       $tobool20$i = ($call19$i|0)==(0|0);
	       if ($tobool20$i) {
	        $match_eo$10$i105 = 0;$pmatch$1$i = $call19$i;$ret$0$i = 12;$states_seen$1$i = 0;$tags$1$i = $tags$0$i;
	        break;
	       } else {
	        $pmatch$0$i = $call19$i;
	       }
	      }
	      $num_states$i = (($0) + 52|0);
	      $6 = HEAP32[$num_states$i>>2]|0;
	      $tobool24$i = ($6|0)==(0);
	      if ($tobool24$i) {
	       $states_seen$0$ph$i = 0;
	      } else {
	       $mul27$i = $6 << 2;
	       $call28$i = (_malloc($mul27$i)|0);
	       $tobool29$i = ($call28$i|0)==(0|0);
	       if ($tobool29$i) {
	        $match_eo$10$i105 = 0;$pmatch$1$i = $pmatch$0$i;$ret$0$i = 12;$states_seen$1$i = $call28$i;$tags$1$i = $tags$0$i;
	        break;
	       } else {
	        $states_seen$0$ph$i = $call28$i;
	       }
	      }
	      $tobool34$i = ($tags$0|0)==(0|0);
	      $initial$i = (($0) + 8|0);
	      $final$i = (($0) + 12|0);
	      $tag_directions$i = (($0) + 32|0);
	      $tobool383$i = ($and2$i|0)==(0);
	      $tobool367$i = ($and$i|0)==(0);
	      $7 = $4;$match_eo$0$i = -1;$pos_add_next$0$i = 1;$pos_start$0$i = -1;$stack$0$i = $call3$i;$str_byte$0$i = $string;
	      L21: while(1) {
	       $cmp323$i = ($7|0)>(0);
	       do {
	        if ($cmp323$i) {
	         if ($tobool34$i) {
	          $8 = $7 << 2;
	          _memset(($tags$0$i|0),-1,($8|0))|0;
	          break;
	         } else {
	          $i$0324$i = 0;
	          while(1) {
	           $arrayidx$i = (($tags$0$i) + ($i$0324$i<<2)|0);
	           HEAP32[$arrayidx$i>>2] = -1;
	           $arrayidx36$i = (($tags$0) + ($i$0324$i<<2)|0);
	           HEAP32[$arrayidx36$i>>2] = -1;
	           $$pre428$i = HEAP32[$num_tags>>2]|0;
	           $inc$i = (($i$0324$i) + 1)|0;
	           $cmp$i = ($inc$i|0)<($$pre428$i|0);
	           if ($cmp$i) {
	            $i$0324$i = $inc$i;
	           } else {
	            break;
	           }
	          }
	         }
	        }
	       } while(0);
	       $9 = HEAP32[$num_states$i>>2]|0;
	       $cmp40325$i = ($9|0)>(0);
	       if ($cmp40325$i) {
	        $10 = $9 << 2;
	        _memset(($states_seen$0$ph$i|0),0,($10|0))|0;
	       }
	       $11 = HEAP32[$next_c$i>>2]|0;
	       $add$i = (($pos_add_next$0$i) + ($pos_start$0$i))|0;
	       $call46$i = (_mbtowc($next_c$i,$str_byte$0$i,4)|0);
	       $cmp47$i = ($call46$i|0)<(1);
	       if ($cmp47$i) {
	        $cmp49$i = ($call46$i|0)<(0);
	        if ($cmp49$i) {
	         $status$0155 = 1;
	         break L5;
	        }
	        $inc51$i = (($call46$i) + 1)|0;
	        $pos_add_next$1$i = $inc51$i;
	       } else {
	        $pos_add_next$1$i = $call46$i;
	       }
	       $add$ptr$i = (($str_byte$0$i) + ($pos_add_next$1$i)|0);
	       $12 = HEAP32[$next_c$i>>2]|0;
	       $13 = HEAP32[$initial$i>>2]|0;
	       $state55337$i = (($13) + 8|0);
	       $14 = HEAP32[$state55337$i>>2]|0;
	       $tobool56338$i = ($14|0)==(0|0);
	       if ($tobool56338$i) {
	        $match_eo$2$i = $match_eo$0$i;$next_tags$8$i = 0;$pos_add_next$6$i = $pos_add_next$1$i;$stack$8$i = $stack$0$i;
	        label = 193;
	       } else {
	        $cmp114$i = ($add$i|0)==(0);
	        $cmp137$i = ($11|0)==(95);
	        $cmp63$i = ($add$i|0)<(1);
	        $or$cond$i = $cmp63$i & $tobool367$i;
	        $cmp66$i = ($11|0)!=(10);
	        $or$cond288$i = $cmp66$i | $tobool383$i;
	        $or$cond288$not$i = $or$cond288$i ^ 1;
	        $next_tags$0340$i = 0;$stack$1341$i = $stack$0$i;$state$0339$i = 0;$state55345$i = $state55337$i;$trans_i$0343$i = $13;
	        while(1) {
	         $assertions$i = (($trans_i$0343$i) + 20|0);
	         $15 = HEAP32[$assertions$i>>2]|0;
	         $tobool58$i = ($15|0)==(0);
	         L41: do {
	          if ($tobool58$i) {
	           label = 55;
	          } else {
	           $and60$i = $15 & 1;
	           $tobool61$i = ($and60$i|0)==(0);
	           $brmerge$i = $tobool61$i | $or$cond$i;
	           $brmerge443$i = $brmerge$i | $or$cond288$not$i;
	           if ($brmerge443$i) {
	            $and71$i = $15 & 2;
	            $tobool72$i = ($and71$i|0)==(0);
	            if (!($tobool72$i)) {
	             $16 = HEAP32[$next_c$i>>2]|0;
	             $17 = $16 | $and1$i;
	             $18 = ($17|0)!=(0);
	             $cmp78$i = ($16|0)!=(10);
	             $or$cond290$i = $cmp78$i | $tobool383$i;
	             $or$cond444$i = $18 & $or$cond290$i;
	             if ($or$cond444$i) {
	              $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	              break;
	             }
	            }
	            $and83$i = $15 & 16;
	            $tobool84$i = ($and83$i|0)==(0);
	            do {
	             if (!($tobool84$i)) {
	              if ($cmp137$i) {
	               $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	               break L41;
	              }
	              $call88$i = (_iswalnum($11)|0);
	              $tobool89$i = ($call88$i|0)==(0);
	              if (!($tobool89$i)) {
	               $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	               break L41;
	              }
	              $19 = HEAP32[$next_c$i>>2]|0;
	              $cmp91$i = ($19|0)==(95);
	              if ($cmp91$i) {
	               break;
	              }
	              $call93$i = (_iswalnum($19)|0);
	              $tobool94$i = ($call93$i|0)==(0);
	              if ($tobool94$i) {
	               $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	               break L41;
	              }
	             }
	            } while(0);
	            $20 = HEAP32[$assertions$i>>2]|0;
	            $and97$i = $20 & 32;
	            $tobool98$i = ($and97$i|0)==(0);
	            if ($tobool98$i) {
	             $22 = $20;
	            } else {
	             if (!($cmp137$i)) {
	              $call102$i = (_iswalnum($11)|0);
	              $tobool103$i = ($call102$i|0)==(0);
	              if ($tobool103$i) {
	               $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	               break;
	              }
	             }
	             $21 = HEAP32[$next_c$i>>2]|0;
	             $cmp105$i = ($21|0)==(95);
	             if ($cmp105$i) {
	              $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	              break;
	             }
	             $call107$i = (_iswalnum($21)|0);
	             $tobool108$i = ($call107$i|0)==(0);
	             if (!($tobool108$i)) {
	              $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	              break;
	             }
	             $$pre437$i = HEAP32[$assertions$i>>2]|0;
	             $22 = $$pre437$i;
	            }
	            $and111$i = $22 & 64;
	            $tobool112$i = ($and111$i|0)==(0);
	            $or$cond291$i = $tobool112$i | $cmp114$i;
	            do {
	             if (!($or$cond291$i)) {
	              $23 = HEAP32[$next_c$i>>2]|0;
	              $cmp116$i = ($23|0)==(0);
	              if ($cmp116$i) {
	               break;
	              }
	              if ($cmp137$i) {
	               $24 = $23;$25 = 1;
	              } else {
	               $call119$i = (_iswalnum($11)|0);
	               $tobool120$i = ($call119$i|0)!=(0);
	               $$pre432$i = HEAP32[$next_c$i>>2]|0;
	               $24 = $$pre432$i;$25 = $tobool120$i;
	              }
	              $cmp121$i = ($24|0)==(95);
	              if ($cmp121$i) {
	               if ($25) {
	                $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	                break L41;
	               } else {
	                break;
	               }
	              } else {
	               $call123$i = (_iswalnum($24)|0);
	               $tobool124$i = ($call123$i|0)!=(0);
	               $cmp127tmp$i = $25 ^ $tobool124$i;
	               if ($cmp127tmp$i) {
	                break;
	               } else {
	                $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	                break L41;
	               }
	              }
	             }
	            } while(0);
	            $26 = HEAP32[$assertions$i>>2]|0;
	            $and130$i = $26 & 128;
	            $tobool131$i = ($and130$i|0)==(0);
	            if ($tobool131$i) {
	             label = 55;
	             break;
	            }
	            if ($cmp114$i) {
	             $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	             break;
	            }
	            $27 = HEAP32[$next_c$i>>2]|0;
	            $cmp135$i = ($27|0)==(0);
	            if ($cmp135$i) {
	             $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	             break;
	            }
	            if ($cmp137$i) {
	             $28 = $27;$29 = 1;
	            } else {
	             $call139$i = (_iswalnum($11)|0);
	             $tobool140$i = ($call139$i|0)!=(0);
	             $$pre431$i = HEAP32[$next_c$i>>2]|0;
	             $28 = $$pre431$i;$29 = $tobool140$i;
	            }
	            $cmp143$i = ($28|0)==(95);
	            if ($cmp143$i) {
	             if ($29) {
	              label = 55;
	              break;
	             } else {
	              $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	              break;
	             }
	            } else {
	             $call145$i = (_iswalnum($28)|0);
	             $tobool146$i = ($call145$i|0)!=(0);
	             $cmp149$i = $29 ^ $tobool146$i;
	             if ($cmp149$i) {
	              $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	              break;
	             } else {
	              label = 55;
	              break;
	             }
	            }
	           } else {
	            $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$1341$i;$state$1$i = $state$0339$i;
	           }
	          }
	         } while(0);
	         do {
	          if ((label|0) == 55) {
	           label = 0;
	           $cmp152$i = ($state$0339$i|0)==(0|0);
	           if ($cmp152$i) {
	            $30 = HEAP32[$state55345$i>>2]|0;
	            $tags155$i = (($trans_i$0343$i) + 16|0);
	            $31 = HEAP32[$tags155$i>>2]|0;
	            $next_tags$1$i = $31;$stack$3$i = $stack$1341$i;$state$1$i = $30;
	            break;
	           }
	           $next159$i = (($stack$1341$i) + 28|0);
	           $32 = HEAP32[$next159$i>>2]|0;
	           $tobool160$i = ($32|0)==(0|0);
	           if ($tobool160$i) {
	            $call162$i = (___tre_mem_alloc_impl($call$i,0,0,0,32)|0);
	            $tobool163$i = ($call162$i|0)==(0|0);
	            if ($tobool163$i) {
	             label = 59;
	             break L21;
	            }
	            $prev175$i = (($call162$i) + 24|0);
	            HEAP32[$prev175$i>>2] = $stack$1341$i;
	            $next176$i = (($call162$i) + 28|0);
	            HEAP32[$next176$i>>2] = 0;
	            $33 = HEAP32[$num_tags>>2]|0;
	            $mul178$i = $33 << 2;
	            $call179$i = (___tre_mem_alloc_impl($call$i,0,0,0,$mul178$i)|0);
	            $tags180$i = (($call162$i) + 20|0);
	            HEAP32[$tags180$i>>2] = $call179$i;
	            $tobool183$i = ($call179$i|0)==(0|0);
	            if ($tobool183$i) {
	             label = 66;
	             break L21;
	            }
	            HEAP32[$next159$i>>2] = $call162$i;
	            $stack$2$i = $call162$i;
	           } else {
	            $stack$2$i = $32;
	           }
	           HEAP32[$stack$2$i>>2] = $add$i;
	           $str_byte202$i = (($stack$2$i) + 4|0);
	           HEAP32[$str_byte202$i>>2] = $add$ptr$i;
	           $34 = HEAP32[$state55345$i>>2]|0;
	           $state205$i = (($stack$2$i) + 8|0);
	           HEAP32[$state205$i>>2] = $34;
	           $state_id$i = (($trans_i$0343$i) + 12|0);
	           $35 = HEAP32[$state_id$i>>2]|0;
	           $state_id207$i = (($stack$2$i) + 12|0);
	           HEAP32[$state_id207$i>>2] = $35;
	           $36 = HEAP32[$next_c$i>>2]|0;
	           $next_c209$i = (($stack$2$i) + 16|0);
	           HEAP32[$next_c209$i>>2] = $36;
	           $37 = HEAP32[$num_tags>>2]|0;
	           $cmp212327$i = ($37|0)>(0);
	           if ($cmp212327$i) {
	            $tags216$i = (($stack$2$i) + 20|0);
	            $38 = HEAP32[$tags216$i>>2]|0;
	            $i158$0328$i = 0;
	            while(1) {
	             $arrayidx214$i = (($tags$0$i) + ($i158$0328$i<<2)|0);
	             $39 = HEAP32[$arrayidx214$i>>2]|0;
	             $arrayidx217$i = (($38) + ($i158$0328$i<<2)|0);
	             HEAP32[$arrayidx217$i>>2] = $39;
	             $inc219$i = (($i158$0328$i) + 1)|0;
	             $40 = HEAP32[$num_tags>>2]|0;
	             $cmp212$i = ($inc219$i|0)<($40|0);
	             if ($cmp212$i) {
	              $i158$0328$i = $inc219$i;
	             } else {
	              break;
	             }
	            }
	           }
	           $tags222$i = (($trans_i$0343$i) + 16|0);
	           $41 = HEAP32[$tags222$i>>2]|0;
	           $tobool223$i = ($41|0)==(0|0);
	           if ($tobool223$i) {
	            $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$2$i;$state$1$i = $state$0339$i;
	            break;
	           }
	           $42 = HEAP32[$41>>2]|0;
	           $cmp225329$i = ($42|0)>(-1);
	           if (!($cmp225329$i)) {
	            $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$2$i;$state$1$i = $state$0339$i;
	            break;
	           }
	           $tags227$i = (($stack$2$i) + 20|0);
	           $43 = HEAP32[$tags227$i>>2]|0;
	           $44 = $42;$tmp$0330$i = $41;
	           while(1) {
	            $incdec$ptr$i = (($tmp$0330$i) + 4|0);
	            $arrayidx228$i = (($43) + ($44<<2)|0);
	            HEAP32[$arrayidx228$i>>2] = $add$i;
	            $45 = HEAP32[$incdec$ptr$i>>2]|0;
	            $cmp225$i = ($45|0)>(-1);
	            if ($cmp225$i) {
	             $44 = $45;$tmp$0330$i = $incdec$ptr$i;
	            } else {
	             $next_tags$1$i = $next_tags$0340$i;$stack$3$i = $stack$2$i;$state$1$i = $state$0339$i;
	             break;
	            }
	           }
	          }
	         } while(0);
	         $incdec$ptr232$i = (($trans_i$0343$i) + 32|0);
	         $state55$i = (($trans_i$0343$i) + 40|0);
	         $46 = HEAP32[$state55$i>>2]|0;
	         $tobool56$i = ($46|0)==(0|0);
	         if ($tobool56$i) {
	          break;
	         } else {
	          $next_tags$0340$i = $next_tags$1$i;$stack$1341$i = $stack$3$i;$state$0339$i = $state$1$i;$state55345$i = $state55$i;$trans_i$0343$i = $incdec$ptr232$i;
	         }
	        }
	        $tobool234$i = ($next_tags$1$i|0)==(0|0);
	        if ($tobool234$i) {
	         $next_tags$3$i = 0;
	        } else {
	         $47 = HEAP32[$next_tags$1$i>>2]|0;
	         $cmp237348$i = ($47|0)>(-1);
	         if ($cmp237348$i) {
	          $48 = $47;$next_tags$2349$i = $next_tags$1$i;
	          while(1) {
	           $arrayidx239$i = (($tags$0$i) + ($48<<2)|0);
	           HEAP32[$arrayidx239$i>>2] = $add$i;
	           $incdec$ptr241$i = (($next_tags$2349$i) + 4|0);
	           $49 = HEAP32[$incdec$ptr241$i>>2]|0;
	           $cmp237$i = ($49|0)>(-1);
	           if ($cmp237$i) {
	            $48 = $49;$next_tags$2349$i = $incdec$ptr241$i;
	           } else {
	            $next_tags$3$i = $incdec$ptr241$i;
	            break;
	           }
	          }
	         } else {
	          $next_tags$3$i = $next_tags$1$i;
	         }
	        }
	        $cmp244$i = ($state$1$i|0)==(0|0);
	        if ($cmp244$i) {
	         $match_eo$2$i = $match_eo$0$i;$next_tags$8$i = $next_tags$3$i;$pos_add_next$6$i = $pos_add_next$1$i;$stack$8$i = $stack$3$i;
	         label = 193;
	        } else {
	         $match_eo$1$ph$i = $match_eo$0$i;$next_tags$4$ph$i = $next_tags$3$i;$pos$0$ph$i = $add$i;$pos_add_next$2$ph$i = $pos_add_next$1$i;$stack$4$ph$i = $stack$3$i;$state$2$ph$i = $state$1$i;$str_byte$1$ph$i = $add$ptr$i;
	        }
	       }
	       L106: while(1) {
	        if ((label|0) == 193) {
	         label = 0;
	         $prev604$i = (($stack$8$i) + 24|0);
	         $124 = HEAP32[$prev604$i>>2]|0;
	         $tobool605$i = ($124|0)==(0|0);
	         if ($tobool605$i) {
	          break;
	         }
	         $state608$i = (($stack$8$i) + 8|0);
	         $125 = HEAP32[$state608$i>>2]|0;
	         $assertions609$i = (($125) + 20|0);
	         $126 = HEAP32[$assertions609$i>>2]|0;
	         $and610$i = $126 & 256;
	         $tobool611$i = ($and610$i|0)==(0);
	         if (!($tobool611$i)) {
	          $state_id614$i = (($stack$8$i) + 12|0);
	          $127 = HEAP32[$state_id614$i>>2]|0;
	          $arrayidx615$i = (($states_seen$0$ph$i) + ($127<<2)|0);
	          HEAP32[$arrayidx615$i>>2] = 0;
	         }
	         $128 = HEAP32[$stack$8$i>>2]|0;
	         $str_byte623$i = (($stack$8$i) + 4|0);
	         $129 = HEAP32[$str_byte623$i>>2]|0;
	         $next_c627$i = (($stack$8$i) + 16|0);
	         $130 = HEAP32[$next_c627$i>>2]|0;
	         HEAP32[$next_c$i>>2] = $130;
	         $131 = HEAP32[$num_tags>>2]|0;
	         $cmp630351$i = ($131|0)>(0);
	         if (!($cmp630351$i)) {
	          $match_eo$1$ph$i = $match_eo$2$i;$next_tags$4$ph$i = $next_tags$8$i;$pos$0$ph$i = $128;$pos_add_next$2$ph$i = $pos_add_next$6$i;$stack$4$ph$i = $124;$state$2$ph$i = $125;$str_byte$1$ph$i = $129;
	          continue;
	         }
	         $tags633$i = (($stack$8$i) + 20|0);
	         $132 = HEAP32[$tags633$i>>2]|0;
	         $i619$0352$i = 0;
	         while(1) {
	          $arrayidx634$i = (($132) + ($i619$0352$i<<2)|0);
	          $133 = HEAP32[$arrayidx634$i>>2]|0;
	          $arrayidx635$i = (($tags$0$i) + ($i619$0352$i<<2)|0);
	          HEAP32[$arrayidx635$i>>2] = $133;
	          $inc637$i = (($i619$0352$i) + 1)|0;
	          $exitcond149 = ($inc637$i|0)==($131|0);
	          if ($exitcond149) {
	           $match_eo$1$ph$i = $match_eo$2$i;$next_tags$4$ph$i = $next_tags$8$i;$pos$0$ph$i = $128;$pos_add_next$2$ph$i = $pos_add_next$6$i;$stack$4$ph$i = $124;$state$2$ph$i = $125;$str_byte$1$ph$i = $129;
	           continue L106;
	          } else {
	           $i619$0352$i = $inc637$i;
	          }
	         }
	        }
	        $50 = HEAP32[$final$i>>2]|0;
	        $cmp251405$i = ($state$2$ph$i|0)==($50|0);
	        if ($cmp251405$i) {
	         $next_tags$4$lcssa$i = $next_tags$4$ph$i;$pos$0$lcssa$i = $pos$0$ph$i;$pos_add_next$2$lcssa$i = $pos_add_next$2$ph$i;$stack$4$lcssa$i = $stack$4$ph$i;
	        } else {
	         $next_tags$4407$i = $next_tags$4$ph$i;$pos$0413$i = $pos$0$ph$i;$pos_add_next$2411$i = $pos_add_next$2$ph$i;$stack$4409$i = $stack$4$ph$i;$state$2406$i = $state$2$ph$i;$str_byte$1414$i = $str_byte$1$ph$i;
	         while(1) {
	          $state279$i = (($state$2406$i) + 8|0);
	          $59 = HEAP32[$state279$i>>2]|0;
	          $tobool280$i = ($59|0)==(0|0);
	          do {
	           if ($tobool280$i) {
	            label = 108;
	           } else {
	            $assertions282$i = (($state$2406$i) + 20|0);
	            $60 = HEAP32[$assertions282$i>>2]|0;
	            $and283$i = $60 & 256;
	            $tobool284$i = ($and283$i|0)==(0);
	            if ($tobool284$i) {
	             label = 108;
	             break;
	            }
	            $backref$i = (($state$2406$i) + 24|0);
	            $61 = HEAP32[$backref$i>>2]|0;
	            $add291$i = (($61) + 1)|0;
	            $62 = HEAP32[$cflags$i>>2]|0;
	            $and293$i = $62 & -9;
	            _tre_fill_pmatch($add291$i,$pmatch$0$i,$and293$i,$0,$tags$0$i,$pos$0413$i);
	            $rm_so$i = (($pmatch$0$i) + ($61<<3)|0);
	            $63 = HEAP32[$rm_so$i>>2]|0;
	            $rm_eo$i = ((($pmatch$0$i) + ($61<<3)|0) + 4|0);
	            $64 = HEAP32[$rm_eo$i>>2]|0;
	            $sub$i = (($64) - ($63))|0;
	            $add$ptr296$i = (($string) + ($63)|0);
	            $add$ptr297$i = (($str_byte$1414$i) + -1|0);
	            $call298$i = (_strncmp($add$ptr296$i,$add$ptr297$i,$sub$i)|0);
	            $cmp299$i = ($call298$i|0)==(0);
	            if (!($cmp299$i)) {
	             $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4407$i;$pos_add_next$6$i = $pos_add_next$2411$i;$stack$8$i = $stack$4409$i;
	             label = 193;
	             continue L106;
	            }
	            $cmp301$i = ($64|0)==($63|0);
	            $$$i = $cmp301$i&1;
	            $state_id306$i = (($state$2406$i) + 12|0);
	            $65 = HEAP32[$state_id306$i>>2]|0;
	            $arrayidx307$i = (($states_seen$0$ph$i) + ($65<<2)|0);
	            if ($cmp301$i) {
	             $66 = HEAP32[$arrayidx307$i>>2]|0;
	             $tobool308$i = ($66|0)==(0);
	             if (!($tobool308$i)) {
	              $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4407$i;$pos_add_next$6$i = $pos_add_next$2411$i;$stack$8$i = $stack$4409$i;
	              label = 193;
	              continue L106;
	             }
	            }
	            HEAP32[$arrayidx307$i>>2] = $$$i;
	            $sub313$i = (($sub$i) + -1)|0;
	            $add$ptr314$i = (($str_byte$1414$i) + ($sub313$i)|0);
	            $add316$i = (($sub313$i) + ($pos$0413$i))|0;
	            $67 = HEAP32[$next_c$i>>2]|0;
	            $call319$i = (_mbtowc($next_c$i,$add$ptr314$i,4)|0);
	            $cmp320$i = ($call319$i|0)<(1);
	            if ($cmp320$i) {
	             $cmp322$i = ($call319$i|0)<(0);
	             if ($cmp322$i) {
	              $status$0155 = 1;
	              break L5;
	             }
	             $inc325$i = (($call319$i) + 1)|0;
	             $pos_add_next$3$i = $inc325$i;
	            } else {
	             $pos_add_next$3$i = $call319$i;
	            }
	            $add$ptr314$sum$i = (($pos_add_next$3$i) + ($sub313$i))|0;
	            $add$ptr314$sum$pn$i = $add$ptr314$sum$i;$add316$pn$i = $add316$i;$pos_add_next$5$i = $pos_add_next$3$i;$prev_c$0$i = $67;
	           }
	          } while(0);
	          do {
	           if ((label|0) == 108) {
	            label = 0;
	            $68 = HEAP32[$next_c$i>>2]|0;
	            $cmp333$i = ($68|0)==(0);
	            if ($cmp333$i) {
	             $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4407$i;$pos_add_next$6$i = $pos_add_next$2411$i;$stack$8$i = $stack$4409$i;
	             label = 193;
	             continue L106;
	            }
	            $call338$i = (_mbtowc($next_c$i,$str_byte$1414$i,4)|0);
	            $cmp339$i = ($call338$i|0)<(1);
	            if (!($cmp339$i)) {
	             $add$ptr314$sum$pn$i = $call338$i;$add316$pn$i = $pos$0413$i;$pos_add_next$5$i = $call338$i;$prev_c$0$i = $68;
	             break;
	            }
	            $cmp341$i = ($call338$i|0)<(0);
	            if ($cmp341$i) {
	             $status$0155 = 1;
	             break L5;
	            }
	            $inc344$i = (($call338$i) + 1)|0;
	            $add$ptr314$sum$pn$i = $inc344$i;$add316$pn$i = $pos$0413$i;$pos_add_next$5$i = $inc344$i;$prev_c$0$i = $68;
	           }
	          } while(0);
	          $str_byte$2$i = (($str_byte$1414$i) + ($add$ptr314$sum$pn$i)|0);
	          $pos$1$i = (($add316$pn$i) + ($pos_add_next$2411$i))|0;
	          $69 = HEAP32[$state279$i>>2]|0;
	          $tobool352367$i = ($69|0)==(0|0);
	          if ($tobool352367$i) {
	           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4407$i;$pos_add_next$6$i = $pos_add_next$5$i;$stack$8$i = $stack$4409$i;
	           label = 193;
	           continue L106;
	          }
	          $cmp417$i = ($pos$1$i|0)==(0);
	          $cmp443$i = ($prev_c$0$i|0)==(95);
	          $cmp365$i = ($pos$1$i|0)<(1);
	          $or$cond293$i = $cmp365$i & $tobool367$i;
	          $cmp369$i = ($prev_c$0$i|0)!=(10);
	          $or$cond294$i = $cmp369$i | $tobool383$i;
	          $or$cond294$not$i = $or$cond294$i ^ 1;
	          $next_state$0374$i = 0;$next_tags$5368$i = $next_tags$4407$i;$stack$5369$i = $stack$4409$i;$state351375$i = $state279$i;$trans_i$1371$i = $state$2406$i;
	          while(1) {
	           $70 = HEAP32[$trans_i$1371$i>>2]|0;
	           $cmp354$i = ($70>>>0)>($prev_c$0$i>>>0);
	           L140: do {
	            if ($cmp354$i) {
	             $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	            } else {
	             $code_max$i = (($trans_i$1371$i) + 4|0);
	             $71 = HEAP32[$code_max$i>>2]|0;
	             $cmp356$i = ($71>>>0)<($prev_c$0$i>>>0);
	             if ($cmp356$i) {
	              $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	              break;
	             }
	             $assertions358$i = (($trans_i$1371$i) + 20|0);
	             $72 = HEAP32[$assertions358$i>>2]|0;
	             $tobool359$i = ($72|0)==(0);
	             L143: do {
	              if (!($tobool359$i)) {
	               $and362$i = $72 & 1;
	               $tobool363$i = ($and362$i|0)==(0);
	               $brmerge445$i = $tobool363$i | $or$cond293$i;
	               $brmerge446$i = $brmerge445$i | $or$cond294$not$i;
	               if (!($brmerge446$i)) {
	                $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                break L140;
	               }
	               $and374$i = $72 & 2;
	               $tobool375$i = ($and374$i|0)==(0);
	               if (!($tobool375$i)) {
	                $73 = HEAP32[$next_c$i>>2]|0;
	                $74 = $73 | $and1$i;
	                $75 = ($74|0)!=(0);
	                $cmp381$i = ($73|0)!=(10);
	                $or$cond296$i = $cmp381$i | $tobool383$i;
	                $or$cond447$i = $75 & $or$cond296$i;
	                if ($or$cond447$i) {
	                 $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                 break L140;
	                }
	               }
	               $and386$i = $72 & 16;
	               $tobool387$i = ($and386$i|0)==(0);
	               do {
	                if (!($tobool387$i)) {
	                 if ($cmp443$i) {
	                  $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                  break L140;
	                 }
	                 $call391$i = (_iswalnum($prev_c$0$i)|0);
	                 $tobool392$i = ($call391$i|0)==(0);
	                 if (!($tobool392$i)) {
	                  $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                  break L140;
	                 }
	                 $76 = HEAP32[$next_c$i>>2]|0;
	                 $cmp394$i = ($76|0)==(95);
	                 if ($cmp394$i) {
	                  break;
	                 }
	                 $call396$i = (_iswalnum($76)|0);
	                 $tobool397$i = ($call396$i|0)==(0);
	                 if ($tobool397$i) {
	                  $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                  break L140;
	                 }
	                }
	               } while(0);
	               $77 = HEAP32[$assertions358$i>>2]|0;
	               $and400$i = $77 & 32;
	               $tobool401$i = ($and400$i|0)==(0);
	               if ($tobool401$i) {
	                $79 = $77;
	               } else {
	                if (!($cmp443$i)) {
	                 $call405$i = (_iswalnum($prev_c$0$i)|0);
	                 $tobool406$i = ($call405$i|0)==(0);
	                 if ($tobool406$i) {
	                  $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                  break L140;
	                 }
	                }
	                $78 = HEAP32[$next_c$i>>2]|0;
	                $cmp408$i = ($78|0)==(95);
	                if ($cmp408$i) {
	                 $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                 break L140;
	                }
	                $call410$i = (_iswalnum($78)|0);
	                $tobool411$i = ($call410$i|0)==(0);
	                if (!($tobool411$i)) {
	                 $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                 break L140;
	                }
	                $$pre434$i = HEAP32[$assertions358$i>>2]|0;
	                $79 = $$pre434$i;
	               }
	               $and414$i = $79 & 64;
	               $tobool415$i = ($and414$i|0)==(0);
	               $or$cond297$i = $tobool415$i | $cmp417$i;
	               do {
	                if (!($or$cond297$i)) {
	                 $80 = HEAP32[$next_c$i>>2]|0;
	                 $cmp419$i = ($80|0)==(0);
	                 if ($cmp419$i) {
	                  break;
	                 }
	                 if ($cmp443$i) {
	                  $81 = $80;$82 = 1;
	                 } else {
	                  $call423$i = (_iswalnum($prev_c$0$i)|0);
	                  $tobool424$i = ($call423$i|0)!=(0);
	                  $$pre430$i = HEAP32[$next_c$i>>2]|0;
	                  $81 = $$pre430$i;$82 = $tobool424$i;
	                 }
	                 $cmp427$i = ($81|0)==(95);
	                 if ($cmp427$i) {
	                  if ($82) {
	                   $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                   break L140;
	                  } else {
	                   break;
	                  }
	                 } else {
	                  $call429$i = (_iswalnum($81)|0);
	                  $tobool430$i = ($call429$i|0)!=(0);
	                  $cmp433tmp$i = $82 ^ $tobool430$i;
	                  if ($cmp433tmp$i) {
	                   break;
	                  } else {
	                   $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                   break L140;
	                  }
	                 }
	                }
	               } while(0);
	               $83 = HEAP32[$assertions358$i>>2]|0;
	               $and436$i = $83 & 128;
	               $tobool437$i = ($and436$i|0)==(0);
	               do {
	                if (!($tobool437$i)) {
	                 if ($cmp417$i) {
	                  $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                  break L140;
	                 }
	                 $84 = HEAP32[$next_c$i>>2]|0;
	                 $cmp441$i = ($84|0)==(0);
	                 if ($cmp441$i) {
	                  $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                  break L140;
	                 }
	                 if ($cmp443$i) {
	                  $85 = $84;$86 = 1;
	                 } else {
	                  $call445$i = (_iswalnum($prev_c$0$i)|0);
	                  $tobool446$i = ($call445$i|0)!=(0);
	                  $$pre429$i = HEAP32[$next_c$i>>2]|0;
	                  $85 = $$pre429$i;$86 = $tobool446$i;
	                 }
	                 $cmp449$i = ($85|0)==(95);
	                 if ($cmp449$i) {
	                  if ($86) {
	                   break;
	                  } else {
	                   $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                   break L140;
	                  }
	                 } else {
	                  $call451$i = (_iswalnum($85)|0);
	                  $tobool452$i = ($call451$i|0)!=(0);
	                  $cmp455$i = $86 ^ $tobool452$i;
	                  if ($cmp455$i) {
	                   $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                   break L140;
	                  } else {
	                   break;
	                  }
	                 }
	                }
	               } while(0);
	               $87 = HEAP32[$assertions358$i>>2]|0;
	               $and458$i = $87 & 4;
	               $tobool459$i = ($and458$i|0)==(0);
	               do {
	                if ($tobool459$i) {
	                 $90 = $87;
	                } else {
	                 $88 = HEAP32[$cflags$i>>2]|0;
	                 $and462$i = $88 & 2;
	                 $tobool463$i = ($and462$i|0)==(0);
	                 if (!($tobool463$i)) {
	                  $90 = $87;
	                  break;
	                 }
	                 $class$i = (($trans_i$1371$i) + 24|0);
	                 $89 = HEAP32[$class$i>>2]|0;
	                 $call466$i = (_iswctype($prev_c$0$i,$89)|0);
	                 $tobool467$i = ($call466$i|0)==(0);
	                 if ($tobool467$i) {
	                  $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                  break L140;
	                 }
	                 $$pre435$i = HEAP32[$assertions358$i>>2]|0;
	                 $90 = $$pre435$i;
	                }
	               } while(0);
	               $and470$i = $90 & 4;
	               $tobool471$i = ($and470$i|0)==(0);
	               do {
	                if (!($tobool471$i)) {
	                 $91 = HEAP32[$cflags$i>>2]|0;
	                 $and474$i = $91 & 2;
	                 $tobool475$i = ($and474$i|0)==(0);
	                 if ($tobool475$i) {
	                  break;
	                 }
	                 $call477$i = (_towlower($prev_c$0$i)|0);
	                 $class479$i = (($trans_i$1371$i) + 24|0);
	                 $92 = HEAP32[$class479$i>>2]|0;
	                 $call480$i = (_iswctype($call477$i,$92)|0);
	                 $tobool481$i = ($call480$i|0)==(0);
	                 if (!($tobool481$i)) {
	                  break;
	                 }
	                 $call483$i = (_towupper($prev_c$0$i)|0);
	                 $93 = HEAP32[$class479$i>>2]|0;
	                 $call486$i = (_iswctype($call483$i,$93)|0);
	                 $tobool487$i = ($call486$i|0)==(0);
	                 if ($tobool487$i) {
	                  $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                  break L140;
	                 }
	                }
	               } while(0);
	               $94 = HEAP32[$assertions358$i>>2]|0;
	               $and490$i = $94 & 8;
	               $tobool491$i = ($and490$i|0)==(0);
	               if ($tobool491$i) {
	                break;
	               }
	               $neg_classes$i = (($trans_i$1371$i) + 28|0);
	               $95 = HEAP32[$neg_classes$i>>2]|0;
	               $96 = HEAP32[$95>>2]|0;
	               $cmp8$i298$i = ($96|0)==(0);
	               if ($cmp8$i298$i) {
	                break;
	               }
	               $97 = HEAP32[$cflags$i>>2]|0;
	               $and494$i = $97 & 2;
	               $tobool$i$i = ($and494$i|0)==(0);
	               if ($tobool$i$i) {
	                $98 = $96;$classes$addr$09$us$i$i = $95;
	                while(1) {
	                 $call$us$i$i = (_iswctype($prev_c$0$i,$98)|0);
	                 $tobool1$us$i$i = ($call$us$i$i|0)==(0);
	                 if (!($tobool1$us$i$i)) {
	                  $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                  break L140;
	                 }
	                 $incdec$ptr$us$i$i = (($classes$addr$09$us$i$i) + 4|0);
	                 $99 = HEAP32[$incdec$ptr$us$i$i>>2]|0;
	                 $cmp$us$i$i = ($99|0)==(0);
	                 if ($cmp$us$i$i) {
	                  break L143;
	                 } else {
	                  $98 = $99;$classes$addr$09$us$i$i = $incdec$ptr$us$i$i;
	                 }
	                }
	               } else {
	                $classes$addr$09$i$i = $95;
	               }
	               while(1) {
	                $call4$i$i = (_towupper($prev_c$0$i)|0);
	                $100 = HEAP32[$classes$addr$09$i$i>>2]|0;
	                $call5$i$i = (_iswctype($call4$i$i,$100)|0);
	                $tobool6$i$i = ($call5$i$i|0)==(0);
	                if (!($tobool6$i$i)) {
	                 $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                 break L140;
	                }
	                $call8$i$i = (_towlower($prev_c$0$i)|0);
	                $101 = HEAP32[$classes$addr$09$i$i>>2]|0;
	                $call9$i$i = (_iswctype($call8$i$i,$101)|0);
	                $tobool10$i$i = ($call9$i$i|0)==(0);
	                if (!($tobool10$i$i)) {
	                 $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$5369$i;
	                 break L140;
	                }
	                $incdec$ptr$i$i = (($classes$addr$09$i$i) + 4|0);
	                $102 = HEAP32[$incdec$ptr$i$i>>2]|0;
	                $cmp$i299$i = ($102|0)==(0);
	                if ($cmp$i299$i) {
	                 break;
	                } else {
	                 $classes$addr$09$i$i = $incdec$ptr$i$i;
	                }
	               }
	              }
	             } while(0);
	             $cmp499$i = ($next_state$0374$i|0)==(0|0);
	             if ($cmp499$i) {
	              $103 = HEAP32[$state351375$i>>2]|0;
	              $tags502$i = (($trans_i$1371$i) + 16|0);
	              $104 = HEAP32[$tags502$i>>2]|0;
	              $next_state$1$i = $103;$next_tags$6$i = $104;$stack$7$i = $stack$5369$i;
	              break;
	             }
	             $next507$i = (($stack$5369$i) + 28|0);
	             $105 = HEAP32[$next507$i>>2]|0;
	             $tobool508$i = ($105|0)==(0|0);
	             if ($tobool508$i) {
	              $call512$i = (___tre_mem_alloc_impl($call$i,0,0,0,32)|0);
	              $tobool513$i = ($call512$i|0)==(0|0);
	              if ($tobool513$i) {
	               label = 166;
	               break L21;
	              }
	              $prev525$i = (($call512$i) + 24|0);
	              HEAP32[$prev525$i>>2] = $stack$5369$i;
	              $next526$i = (($call512$i) + 28|0);
	              HEAP32[$next526$i>>2] = 0;
	              $106 = HEAP32[$num_tags>>2]|0;
	              $mul528$i = $106 << 2;
	              $call529$i = (___tre_mem_alloc_impl($call$i,0,0,0,$mul528$i)|0);
	              $tags531$i = (($call512$i) + 20|0);
	              HEAP32[$tags531$i>>2] = $call529$i;
	              $tobool534$i = ($call529$i|0)==(0|0);
	              if ($tobool534$i) {
	               label = 173;
	               break L21;
	              }
	              HEAP32[$next507$i>>2] = $call512$i;
	              $stack$6$i = $call512$i;
	             } else {
	              $stack$6$i = $105;
	             }
	             HEAP32[$stack$6$i>>2] = $pos$1$i;
	             $str_byte553$i = (($stack$6$i) + 4|0);
	             HEAP32[$str_byte553$i>>2] = $str_byte$2$i;
	             $107 = HEAP32[$state351375$i>>2]|0;
	             $state556$i = (($stack$6$i) + 8|0);
	             HEAP32[$state556$i>>2] = $107;
	             $state_id557$i = (($trans_i$1371$i) + 12|0);
	             $108 = HEAP32[$state_id557$i>>2]|0;
	             $state_id559$i = (($stack$6$i) + 12|0);
	             HEAP32[$state_id559$i>>2] = $108;
	             $109 = HEAP32[$next_c$i>>2]|0;
	             $next_c561$i = (($stack$6$i) + 16|0);
	             HEAP32[$next_c561$i>>2] = $109;
	             $110 = HEAP32[$num_tags>>2]|0;
	             $cmp564355$i = ($110|0)>(0);
	             if ($cmp564355$i) {
	              $tags568$i = (($stack$6$i) + 20|0);
	              $111 = HEAP32[$tags568$i>>2]|0;
	              $i506$0356$i = 0;
	              while(1) {
	               $arrayidx566$i = (($tags$0$i) + ($i506$0356$i<<2)|0);
	               $112 = HEAP32[$arrayidx566$i>>2]|0;
	               $arrayidx569$i = (($111) + ($i506$0356$i<<2)|0);
	               HEAP32[$arrayidx569$i>>2] = $112;
	               $inc571$i = (($i506$0356$i) + 1)|0;
	               $113 = HEAP32[$num_tags>>2]|0;
	               $cmp564$i = ($inc571$i|0)<($113|0);
	               if ($cmp564$i) {
	                $i506$0356$i = $inc571$i;
	               } else {
	                break;
	               }
	              }
	             }
	             $tags576$i = (($trans_i$1371$i) + 16|0);
	             $114 = HEAP32[$tags576$i>>2]|0;
	             $tobool578358$i = ($114|0)==(0|0);
	             if ($tobool578358$i) {
	              $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$6$i;
	              break;
	             }
	             $115 = HEAP32[$114>>2]|0;
	             $cmp579$i125 = ($115|0)>(-1);
	             if (!($cmp579$i125)) {
	              $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$6$i;
	              break;
	             }
	             $tags582$i = (($stack$6$i) + 20|0);
	             $116 = HEAP32[$tags582$i>>2]|0;
	             $117 = $115;$tmp575$0359$i126 = $114;
	             while(1) {
	              $arrayidx583$i = (($116) + ($117<<2)|0);
	              HEAP32[$arrayidx583$i>>2] = $pos$1$i;
	              $incdec$ptr585$i = (($tmp575$0359$i126) + 4|0);
	              $118 = HEAP32[$incdec$ptr585$i>>2]|0;
	              $cmp579$i = ($118|0)>(-1);
	              if ($cmp579$i) {
	               $117 = $118;$tmp575$0359$i126 = $incdec$ptr585$i;
	              } else {
	               $next_state$1$i = $next_state$0374$i;$next_tags$6$i = $next_tags$5368$i;$stack$7$i = $stack$6$i;
	               break;
	              }
	             }
	            }
	           } while(0);
	           $incdec$ptr590$i = (($trans_i$1371$i) + 32|0);
	           $state351$i = (($trans_i$1371$i) + 40|0);
	           $119 = HEAP32[$state351$i>>2]|0;
	           $tobool352$i = ($119|0)==(0|0);
	           if ($tobool352$i) {
	            break;
	           } else {
	            $next_state$0374$i = $next_state$1$i;$next_tags$5368$i = $next_tags$6$i;$stack$5369$i = $stack$7$i;$state351375$i = $state351$i;$trans_i$1371$i = $incdec$ptr590$i;
	           }
	          }
	          $cmp592$i = ($next_state$1$i|0)==(0|0);
	          if ($cmp592$i) {
	           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$6$i;$pos_add_next$6$i = $pos_add_next$5$i;$stack$8$i = $stack$7$i;
	           label = 193;
	           continue L106;
	          }
	          $tobool594$i = ($next_tags$6$i|0)==(0|0);
	          do {
	           if ($tobool594$i) {
	            $next_tags$4$be$i = 0;
	           } else {
	            $121 = HEAP32[$next_tags$6$i>>2]|0;
	            $cmp597379$i = ($121|0)>(-1);
	            if ($cmp597379$i) {
	             $122 = $121;$next_tags$7380$i = $next_tags$6$i;
	            } else {
	             $next_tags$4$be$i = $next_tags$6$i;
	             break;
	            }
	            while(1) {
	             $incdec$ptr599$i = (($next_tags$7380$i) + 4|0);
	             $arrayidx600$i = (($tags$0$i) + ($122<<2)|0);
	             HEAP32[$arrayidx600$i>>2] = $pos$1$i;
	             $123 = HEAP32[$incdec$ptr599$i>>2]|0;
	             $cmp597$i = ($123|0)>(-1);
	             if ($cmp597$i) {
	              $122 = $123;$next_tags$7380$i = $incdec$ptr599$i;
	             } else {
	              $next_tags$4$be$i = $incdec$ptr599$i;
	              break;
	             }
	            }
	           }
	          } while(0);
	          $120 = HEAP32[$final$i>>2]|0;
	          $cmp251$i = ($next_state$1$i|0)==($120|0);
	          if ($cmp251$i) {
	           $next_tags$4$lcssa$i = $next_tags$4$be$i;$pos$0$lcssa$i = $pos$1$i;$pos_add_next$2$lcssa$i = $pos_add_next$5$i;$stack$4$lcssa$i = $stack$7$i;
	           break;
	          } else {
	           $next_tags$4407$i = $next_tags$4$be$i;$pos$0413$i = $pos$1$i;$pos_add_next$2411$i = $pos_add_next$5$i;$stack$4409$i = $stack$7$i;$state$2406$i = $next_state$1$i;$str_byte$1414$i = $str_byte$2$i;
	          }
	         }
	        }
	        $cmp253$i = ($match_eo$1$ph$i|0)<($pos$0$lcssa$i|0);
	        L231: do {
	         if ($cmp253$i) {
	          label = 95;
	         } else {
	          $cmp255$i = ($match_eo$1$ph$i|0)!=($pos$0$lcssa$i|0);
	          $or$cond292$i = $cmp255$i | $tobool34$i;
	          if ($or$cond292$i) {
	           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
	           label = 193;
	           continue L106;
	          }
	          $51 = HEAP32[$num_tags>>2]|0;
	          $52 = HEAP32[$tag_directions$i>>2]|0;
	          $cmp14$i$i = ($51|0)>(0);
	          if ($cmp14$i$i) {
	           $i$015$i$i = 0;
	          } else {
	           $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
	           label = 193;
	           continue L106;
	          }
	          while(1) {
	           $arrayidx$i$i = (($52) + ($i$015$i$i<<2)|0);
	           $53 = HEAP32[$arrayidx$i$i>>2]|0;
	           $cmp1$i$i = ($53|0)==(0);
	           $arrayidx2$i$i = (($tags$0$i) + ($i$015$i$i<<2)|0);
	           $54 = HEAP32[$arrayidx2$i$i>>2]|0;
	           $arrayidx3$i$i = (($tags$0) + ($i$015$i$i<<2)|0);
	           $55 = HEAP32[$arrayidx3$i$i>>2]|0;
	           if ($cmp1$i$i) {
	            $cmp4$i$i = ($54|0)<($55|0);
	            if ($cmp4$i$i) {
	             label = 95;
	             break L231;
	            }
	            $cmp8$i$i = ($54|0)>($55|0);
	            if ($cmp8$i$i) {
	             $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
	             label = 193;
	             continue L106;
	            }
	           } else {
	            $cmp13$i$i = ($54|0)>($55|0);
	            if ($cmp13$i$i) {
	             $56 = $51;
	             break L231;
	            }
	            $cmp18$i$i = ($54|0)<($55|0);
	            if ($cmp18$i$i) {
	             $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
	             label = 193;
	             continue L106;
	            }
	           }
	           $inc$i$i = (($i$015$i$i) + 1)|0;
	           $cmp$i$i = ($inc$i$i|0)<($51|0);
	           if ($cmp$i$i) {
	            $i$015$i$i = $inc$i$i;
	           } else {
	            $match_eo$2$i = $match_eo$1$ph$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
	            label = 193;
	            continue L106;
	           }
	          }
	         }
	        } while(0);
	        if ((label|0) == 95) {
	         label = 0;
	         if ($tobool34$i) {
	          $match_eo$2$i = $pos$0$lcssa$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
	          label = 193;
	          continue;
	         }
	         $$pre433$i = HEAP32[$num_tags>>2]|0;
	         $56 = $$pre433$i;
	        }
	        $cmp269421$i = ($56|0)>(0);
	        if ($cmp269421$i) {
	         $i264$0422$i = 0;
	        } else {
	         $match_eo$2$i = $pos$0$lcssa$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
	         label = 193;
	         continue;
	        }
	        while(1) {
	         $arrayidx271$i = (($tags$0$i) + ($i264$0422$i<<2)|0);
	         $57 = HEAP32[$arrayidx271$i>>2]|0;
	         $arrayidx272$i = (($tags$0) + ($i264$0422$i<<2)|0);
	         HEAP32[$arrayidx272$i>>2] = $57;
	         $inc274$i = (($i264$0422$i) + 1)|0;
	         $58 = HEAP32[$num_tags>>2]|0;
	         $cmp269$i = ($inc274$i|0)<($58|0);
	         if ($cmp269$i) {
	          $i264$0422$i = $inc274$i;
	         } else {
	          $match_eo$2$i = $pos$0$lcssa$i;$next_tags$8$i = $next_tags$4$lcssa$i;$pos_add_next$6$i = $pos_add_next$2$lcssa$i;$stack$8$i = $stack$4$lcssa$i;
	          label = 193;
	          continue L106;
	         }
	        }
	       }
	       $cmp642$i = ($match_eo$2$i|0)<(0);
	       if (!($cmp642$i)) {
	        label = 202;
	        break;
	       }
	       $134 = HEAP32[$next_c$i>>2]|0;
	       $cmp644$i = ($134|0)==(0);
	       if ($cmp644$i) {
	        label = 202;
	        break;
	       }
	       HEAP32[$next_c$i>>2] = $12;
	       $$pre$i = HEAP32[$num_tags>>2]|0;
	       $7 = $$pre$i;$match_eo$0$i = $match_eo$2$i;$pos_add_next$0$i = $pos_add_next$6$i;$pos_start$0$i = $add$i;$stack$0$i = $stack$8$i;$str_byte$0$i = $add$ptr$i;
	      }
	      if ((label|0) == 59) {
	       ___tre_mem_destroy($call$i);
	       $tobool165$i = ($tags$0$i|0)==(0|0);
	       if (!($tobool165$i)) {
	        _free($tags$0$i);
	       }
	       $tobool168$i = ($pmatch$0$i|0)==(0|0);
	       if (!($tobool168$i)) {
	        _free($pmatch$0$i);
	       }
	       $tobool171$i = ($states_seen$0$ph$i|0)==(0|0);
	       if ($tobool171$i) {
	        $status$0155 = 12;
	        break L5;
	       }
	       _free($states_seen$0$ph$i);
	       $status$0155 = 12;
	       break L5;
	      }
	      else if ((label|0) == 66) {
	       ___tre_mem_destroy($call$i);
	       $tobool185$i = ($tags$0$i|0)==(0|0);
	       if (!($tobool185$i)) {
	        _free($tags$0$i);
	       }
	       $tobool188$i = ($pmatch$0$i|0)==(0|0);
	       if (!($tobool188$i)) {
	        _free($pmatch$0$i);
	       }
	       $tobool191$i = ($states_seen$0$ph$i|0)==(0|0);
	       if ($tobool191$i) {
	        $status$0155 = 12;
	        break L5;
	       }
	       _free($states_seen$0$ph$i);
	       $status$0155 = 12;
	       break L5;
	      }
	      else if ((label|0) == 166) {
	       ___tre_mem_destroy($call$i);
	       $tobool515$i = ($tags$0$i|0)==(0|0);
	       if (!($tobool515$i)) {
	        _free($tags$0$i);
	       }
	       $tobool518$i = ($pmatch$0$i|0)==(0|0);
	       if (!($tobool518$i)) {
	        _free($pmatch$0$i);
	       }
	       $tobool521$i = ($states_seen$0$ph$i|0)==(0|0);
	       if ($tobool521$i) {
	        $status$0155 = 12;
	        break L5;
	       }
	       _free($states_seen$0$ph$i);
	       $status$0155 = 12;
	       break L5;
	      }
	      else if ((label|0) == 173) {
	       ___tre_mem_destroy($call$i);
	       $tobool536$i = ($tags$0$i|0)==(0|0);
	       if (!($tobool536$i)) {
	        _free($tags$0$i);
	       }
	       $tobool539$i = ($pmatch$0$i|0)==(0|0);
	       if (!($tobool539$i)) {
	        _free($pmatch$0$i);
	       }
	       $tobool542$i = ($states_seen$0$ph$i|0)==(0|0);
	       if ($tobool542$i) {
	        $status$0155 = 12;
	        break L5;
	       }
	       _free($states_seen$0$ph$i);
	       $status$0155 = 12;
	       break L5;
	      }
	      else if ((label|0) == 202) {
	       $match_eo$2$lobit$i = $match_eo$2$i >>> 31;
	       $match_eo$10$i105 = $match_eo$2$i;$pmatch$1$i = $pmatch$0$i;$ret$0$i = $match_eo$2$lobit$i;$states_seen$1$i = $states_seen$0$ph$i;$tags$1$i = $tags$0$i;
	       break;
	      }
	     }
	    } while(0);
	    ___tre_mem_destroy($call$i);
	    $tobool652$i = ($tags$1$i|0)==(0|0);
	    if (!($tobool652$i)) {
	     _free($tags$1$i);
	    }
	    $tobool655$i = ($pmatch$1$i|0)==(0|0);
	    if (!($tobool655$i)) {
	     _free($pmatch$1$i);
	    }
	    $tobool658$i = ($states_seen$1$i|0)==(0|0);
	    if ($tobool658$i) {
	     $match_eo$10$i102 = $match_eo$10$i105;$status$0 = $ret$0$i;
	     label = 369;
	    } else {
	     _free($states_seen$1$i);
	     $match_eo$10$i102 = $match_eo$10$i105;$status$0 = $ret$0$i;
	     label = 369;
	    }
	   }
	  }
	 } while(0);
	 if ((label|0) == 369) {
	  $cmp10 = ($status$0|0)==(0);
	  if ($cmp10) {
	   $cflags = (($0) + 56|0);
	   $257 = HEAP32[$cflags>>2]|0;
	   _tre_fill_pmatch($nmatch,$pmatch,$257,$0,$tags$0,$match_eo$10$i102);
	   $status$0155 = 0;
	  } else {
	   $status$0155 = $status$0;
	  }
	 }
	 $tobool13 = ($tags$0|0)==(0|0);
	 if ($tobool13) {
	  $retval$0 = $status$0155;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 _free($tags$0);
	 $retval$0 = $status$0155;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _tre_fill_pmatch($nmatch,$pmatch,$cflags,$tnfa,$tags,$match_eo) {
	 $nmatch = $nmatch|0;
	 $pmatch = $pmatch|0;
	 $cflags = $cflags|0;
	 $tnfa = $tnfa|0;
	 $tags = $tags|0;
	 $match_eo = $match_eo|0;
	 var $$pre = 0, $$pre79$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
	 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx20 = 0, $arrayidx52 = 0, $arrayidx9 = 0, $cmp = 0, $cmp14 = 0, $cmp2 = 0, $cmp26 = 0, $cmp273 = 0, $cmp29 = 0, $cmp3 = 0, $cmp374 = 0, $cmp38 = 0, $cmp3869 = 0, $cmp4 = 0;
	 var $cmp40 = 0, $cmp50 = 0, $cmp53 = 0, $cmp5367 = 0, $cmp59 = 0, $cmp66 = 0, $cmp7964 = 0, $end_tag = 0, $eo_tag = 0, $exitcond = 0, $i$076 = 0, $i$172 = 0, $i$2$ph = 0, $i$265 = 0, $inc = 0, $inc73 = 0, $inc75 = 0, $inc85 = 0, $j$068 = 0, $num_submatches = 0;
	 var $or$cond = 0, $or$cond63 = 0, $or$cond6371 = 0, $or$cond75 = 0, $or$cond81 = 0, $parents49 = 0, $rm_eo = 0, $rm_eo22 = 0, $rm_eo32$pre$phiZ2D = 0, $rm_eo44 = 0, $rm_eo65 = 0, $rm_eo84 = 0, $rm_so = 0, $rm_so11 = 0, $rm_so25 = 0, $rm_so55 = 0, $rm_so58 = 0, $rm_so82 = 0, $so_tag = 0, $submatch_data1 = 0;
	 var $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($match_eo|0)>(-1);
	 if ($cmp) {
	  $and = $cflags & 8;
	  $tobool = ($and|0)==(0);
	  if ($tobool) {
	   $submatch_data1 = (($tnfa) + 16|0);
	   $0 = HEAP32[$submatch_data1>>2]|0;
	   $num_submatches = (($tnfa) + 28|0);
	   $1 = HEAP32[$num_submatches>>2]|0;
	   $cmp273 = ($1|0)!=(0);
	   $cmp374 = ($nmatch|0)!=(0);
	   $or$cond75 = $cmp273 & $cmp374;
	   if ($or$cond75) {
	    $end_tag = (($tnfa) + 48|0);
	    $i$076 = 0;
	    while(1) {
	     $so_tag = (($0) + (($i$076*12)|0)|0);
	     $3 = HEAP32[$so_tag>>2]|0;
	     $4 = HEAP32[$end_tag>>2]|0;
	     $cmp4 = ($3|0)==($4|0);
	     if ($cmp4) {
	      $rm_so = (($pmatch) + ($i$076<<3)|0);
	      HEAP32[$rm_so>>2] = $match_eo;
	      $9 = $match_eo;
	     } else {
	      $arrayidx9 = (($tags) + ($3<<2)|0);
	      $5 = HEAP32[$arrayidx9>>2]|0;
	      $rm_so11 = (($pmatch) + ($i$076<<3)|0);
	      HEAP32[$rm_so11>>2] = $5;
	      $9 = $5;
	     }
	     $eo_tag = ((($0) + (($i$076*12)|0)|0) + 4|0);
	     $6 = HEAP32[$eo_tag>>2]|0;
	     $7 = HEAP32[$end_tag>>2]|0;
	     $cmp14 = ($6|0)==($7|0);
	     if ($cmp14) {
	      $rm_eo = ((($pmatch) + ($i$076<<3)|0) + 4|0);
	      HEAP32[$rm_eo>>2] = $match_eo;
	      $10 = $match_eo;
	     } else {
	      $arrayidx20 = (($tags) + ($6<<2)|0);
	      $8 = HEAP32[$arrayidx20>>2]|0;
	      $rm_eo22 = ((($pmatch) + ($i$076<<3)|0) + 4|0);
	      HEAP32[$rm_eo22>>2] = $8;
	      $10 = $8;
	     }
	     $cmp26 = ($9|0)==(-1);
	     $cmp29 = ($10|0)==(-1);
	     $or$cond81 = $cmp26 | $cmp29;
	     if ($or$cond81) {
	      $rm_so25 = (($pmatch) + ($i$076<<3)|0);
	      $rm_eo32$pre$phiZ2D = ((($pmatch) + ($i$076<<3)|0) + 4|0);
	      HEAP32[$rm_eo32$pre$phiZ2D>>2] = -1;
	      HEAP32[$rm_so25>>2] = -1;
	     }
	     $inc = (($i$076) + 1)|0;
	     $11 = HEAP32[$num_submatches>>2]|0;
	     $cmp2 = ($inc>>>0)<($11>>>0);
	     $cmp3 = ($inc>>>0)<($nmatch>>>0);
	     $or$cond = $cmp2 & $cmp3;
	     if ($or$cond) {
	      $i$076 = $inc;
	     } else {
	      $2 = $11;
	      break;
	     }
	    }
	   } else {
	    $2 = $1;
	   }
	   $cmp3869 = ($2|0)!=(0);
	   $or$cond6371 = $cmp3869 & $cmp374;
	   if ($or$cond6371) {
	    $21 = $2;$i$172 = 0;
	    while(1) {
	     $rm_eo44 = ((($pmatch) + ($i$172<<3)|0) + 4|0);
	     $parents49 = ((($0) + (($i$172*12)|0)|0) + 8|0);
	     $12 = HEAP32[$parents49>>2]|0;
	     $cmp50 = ($12|0)==(0|0);
	     if ($cmp50) {
	      $20 = $21;
	     } else {
	      $13 = HEAP32[$12>>2]|0;
	      $cmp5367 = ($13|0)>(-1);
	      if ($cmp5367) {
	       $rm_so55 = (($pmatch) + ($i$172<<3)|0);
	       $$pre = HEAP32[$rm_so55>>2]|0;
	       $14 = $13;$16 = $$pre;$j$068 = 0;
	       while(1) {
	        $rm_so58 = (($pmatch) + ($14<<3)|0);
	        $15 = HEAP32[$rm_so58>>2]|0;
	        $cmp59 = ($16|0)<($15|0);
	        if ($cmp59) {
	         label = 21;
	        } else {
	         $17 = HEAP32[$rm_eo44>>2]|0;
	         $rm_eo65 = ((($pmatch) + ($14<<3)|0) + 4|0);
	         $18 = HEAP32[$rm_eo65>>2]|0;
	         $cmp66 = ($17|0)>($18|0);
	         if ($cmp66) {
	          label = 21;
	         } else {
	          $22 = $16;
	         }
	        }
	        if ((label|0) == 21) {
	         label = 0;
	         HEAP32[$rm_eo44>>2] = -1;
	         HEAP32[$rm_so55>>2] = -1;
	         $22 = -1;
	        }
	        $inc73 = (($j$068) + 1)|0;
	        $arrayidx52 = (($12) + ($inc73<<2)|0);
	        $19 = HEAP32[$arrayidx52>>2]|0;
	        $cmp53 = ($19|0)>(-1);
	        if ($cmp53) {
	         $14 = $19;$16 = $22;$j$068 = $inc73;
	        } else {
	         break;
	        }
	       }
	       $$pre79$pre = HEAP32[$num_submatches>>2]|0;
	       $20 = $$pre79$pre;
	      } else {
	       $20 = $21;
	      }
	     }
	     $inc75 = (($i$172) + 1)|0;
	     $cmp38 = ($inc75>>>0)<($20>>>0);
	     $cmp40 = ($inc75>>>0)<($nmatch>>>0);
	     $or$cond63 = $cmp38 & $cmp40;
	     if ($or$cond63) {
	      $21 = $20;$i$172 = $inc75;
	     } else {
	      $i$2$ph = $inc75;
	      break;
	     }
	    }
	   } else {
	    $i$2$ph = 0;
	   }
	  } else {
	   $i$2$ph = 0;
	  }
	 } else {
	  $i$2$ph = 0;
	 }
	 $cmp7964 = ($i$2$ph>>>0)<($nmatch>>>0);
	 if ($cmp7964) {
	  $i$265 = $i$2$ph;
	 } else {
	  STACKTOP = sp;return;
	 }
	 while(1) {
	  $rm_so82 = (($pmatch) + ($i$265<<3)|0);
	  HEAP32[$rm_so82>>2] = -1;
	  $rm_eo84 = ((($pmatch) + ($i$265<<3)|0) + 4|0);
	  HEAP32[$rm_eo84>>2] = -1;
	  $inc85 = (($i$265) + 1)|0;
	  $exitcond = ($inc85|0)==($nmatch|0);
	  if ($exitcond) {
	   break;
	  } else {
	   $i$265 = $inc85;
	  }
	 }
	 STACKTOP = sp;return;
	}
	function ___tre_mem_new_impl($provided,$provided_block) {
	 $provided = $provided|0;
	 $provided_block = $provided_block|0;
	 var $call = 0, $cmp = 0, $mem$0$in = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($provided|0)==(0);
	 if ($tobool) {
	  $call = (_calloc(1,24)|0);
	  $mem$0$in = $call;
	 } else {
	  ;HEAP32[$provided_block+0>>2]=0|0;HEAP32[$provided_block+4>>2]=0|0;HEAP32[$provided_block+8>>2]=0|0;HEAP32[$provided_block+12>>2]=0|0;HEAP32[$provided_block+16>>2]=0|0;HEAP32[$provided_block+20>>2]=0|0;
	  $mem$0$in = $provided_block;
	 }
	 $cmp = ($mem$0$in|0)==(0|0);
	 if ($cmp) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $retval$0 = $mem$0$in;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function ___tre_mem_destroy($mem) {
	 $mem = $mem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $cmp5 = 0, $l$06 = 0, $next = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$mem>>2]|0;
	 $cmp5 = ($0|0)==(0|0);
	 if ($cmp5) {
	  _free($mem);
	  STACKTOP = sp;return;
	 } else {
	  $l$06 = $0;
	 }
	 while(1) {
	  $1 = HEAP32[$l$06>>2]|0;
	  _free($1);
	  $next = (($l$06) + 4|0);
	  $2 = HEAP32[$next>>2]|0;
	  _free($l$06);
	  $cmp = ($2|0)==(0|0);
	  if ($cmp) {
	   break;
	  } else {
	   $l$06 = $2;
	  }
	 }
	 _free($mem);
	 STACKTOP = sp;return;
	}
	function ___tre_mem_alloc_impl($mem,$provided,$provided_block,$zero,$size) {
	 $mem = $mem|0;
	 $provided = $provided|0;
	 $provided_block = $provided_block|0;
	 $zero = $zero|0;
	 $size = $size|0;
	 var $$pre = 0, $$sub = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add = 0, $add$ptr = 0, $add45 = 0, $call = 0, $call19 = 0, $cmp = 0, $cmp10 = 0, $cmp15 = 0, $cmp21 = 0, $cmp25 = 0;
	 var $cmp30 = 0, $cmp4 = 0, $current = 0, $failed = 0, $mul = 0, $mul$ = 0, $n = 0, $next = 0, $next28 = 0, $ptr36 = 0, $ptr40 = 0, $ptr40$phi$trans$insert = 0, $ptr8 = 0, $rem = 0, $retval$0 = 0, $sub = 0, $sub49 = 0, $tobool = 0, $tobool2 = 0, $tobool41 = 0;
	 var $tobool50 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $failed = (($mem) + 16|0);
	 $0 = HEAP32[$failed>>2]|0;
	 $tobool = ($0|0)==(0);
	 if (!($tobool)) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $n = (($mem) + 12|0);
	 $1 = HEAP32[$n>>2]|0;
	 $cmp = ($1>>>0)<($size>>>0);
	 do {
	  if ($cmp) {
	   $tobool2 = ($provided|0)==(0);
	   if (!($tobool2)) {
	    $cmp4 = ($provided_block|0)==(0|0);
	    if (!($cmp4)) {
	     $ptr8 = (($mem) + 8|0);
	     HEAP32[$ptr8>>2] = $provided_block;
	     HEAP32[$n>>2] = 1024;
	     $6 = $provided_block;$7 = 1024;
	     break;
	    }
	    HEAP32[$failed>>2] = 1;
	    $retval$0 = 0;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $mul = $size << 3;
	   $cmp10 = ($mul>>>0)>(1024);
	   $mul$ = $cmp10 ? $mul : 1024;
	   $call = (_malloc(8)|0);
	   $cmp15 = ($call|0)==(0|0);
	   if ($cmp15) {
	    HEAP32[$failed>>2] = 1;
	    $retval$0 = 0;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $call19 = (_malloc($mul$)|0);
	   HEAP32[$call>>2] = $call19;
	   $cmp21 = ($call19|0)==(0|0);
	   if ($cmp21) {
	    _free($call);
	    HEAP32[$failed>>2] = 1;
	    $retval$0 = 0;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $next = (($call) + 4|0);
	   HEAP32[$next>>2] = 0;
	   $current = (($mem) + 4|0);
	   $2 = HEAP32[$current>>2]|0;
	   $cmp25 = ($2|0)==(0|0);
	   if (!($cmp25)) {
	    $next28 = (($2) + 4|0);
	    HEAP32[$next28>>2] = $call;
	   }
	   $3 = HEAP32[$mem>>2]|0;
	   $cmp30 = ($3|0)==(0|0);
	   if ($cmp30) {
	    HEAP32[$mem>>2] = $call;
	   }
	   HEAP32[$current>>2] = $call;
	   $4 = HEAP32[$call>>2]|0;
	   $ptr36 = (($mem) + 8|0);
	   HEAP32[$ptr36>>2] = $4;
	   HEAP32[$n>>2] = $mul$;
	   $6 = $4;$7 = $mul$;
	  } else {
	   $ptr40$phi$trans$insert = (($mem) + 8|0);
	   $$pre = HEAP32[$ptr40$phi$trans$insert>>2]|0;
	   $6 = $$pre;$7 = $1;
	  }
	 } while(0);
	 $ptr40 = (($mem) + 8|0);
	 $5 = $6;
	 $add = (($5) + ($size))|0;
	 $rem = $add & 3;
	 $tobool41 = ($rem|0)==(0);
	 $sub = (4 - ($rem))|0;
	 $$sub = $tobool41 ? 0 : $sub;
	 $add45 = (($$sub) + ($size))|0;
	 $add$ptr = (($6) + ($add45)|0);
	 HEAP32[$ptr40>>2] = $add$ptr;
	 $sub49 = (($7) - ($add45))|0;
	 HEAP32[$n>>2] = $sub49;
	 $tobool50 = ($zero|0)==(0);
	 if ($tobool50) {
	  $retval$0 = $6;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 _memset(($6|0),0,($add45|0))|0;
	 $retval$0 = $6;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function ___string_read($f,$buf,$len) {
	 $f = $f|0;
	 $buf = $buf|0;
	 $len = $len|0;
	 var $0 = 0, $add = 0, $add$ptr = 0, $add$ptr3 = 0, $call = 0, $cmp = 0, $cookie = 0, $k$0 = 0, $k$0$len = 0, $rend = 0, $rpos = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cookie = (($f) + 84|0);
	 $0 = HEAP32[$cookie>>2]|0;
	 $add = (($len) + 256)|0;
	 $call = (_memchr($0,0,$add)|0);
	 $tobool = ($call|0)==(0|0);
	 if ($tobool) {
	  $k$0 = $add;
	 } else {
	  $sub$ptr$lhs$cast = $call;
	  $sub$ptr$rhs$cast = $0;
	  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	  $k$0 = $sub$ptr$sub;
	 }
	 $cmp = ($k$0>>>0)<($len>>>0);
	 $k$0$len = $cmp ? $k$0 : $len;
	 _memcpy(($buf|0),($0|0),($k$0$len|0))|0;
	 $add$ptr = (($0) + ($k$0$len)|0);
	 $rpos = (($f) + 4|0);
	 HEAP32[$rpos>>2] = $add$ptr;
	 $add$ptr3 = (($0) + ($k$0)|0);
	 $rend = (($f) + 8|0);
	 HEAP32[$rend>>2] = $add$ptr3;
	 HEAP32[$cookie>>2] = $add$ptr3;
	 STACKTOP = sp;return ($k$0$len|0);
	}
	function _asprintf($s,$fmt,$varargs) {
	 $s = $s|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 $call = (_vasprintf($s,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _fwprintf($f,$fmt,$varargs) {
	 $f = $f|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 $call = (_vfwprintf($f,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _swprintf($s,$n,$fmt,$varargs) {
	 $s = $s|0;
	 $n = $n|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 $call = (_vswprintf($s,$n,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _vfwprintf($f,$fmt,$ap) {
	 $f = $f|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $ap2 = 0, $call = 0, $call7 = 0, $cmp = 0, $nl_arg = 0, $nl_type = 0, $retval$0 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap2 = sp + 112|0;
	 $nl_type = sp + 72|0;
	 $nl_arg = sp;
	 dest=$nl_type+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 $vacopy_currentptr = HEAP32[$ap>>2]|0;
	 HEAP32[$ap2>>2] = $vacopy_currentptr;
	 $call = (_wprintf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
	 $cmp = ($call|0)<(0);
	 if ($cmp) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $call7 = (_wprintf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
	  $retval$0 = $call7;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _wprintf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
	 $f = $f|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 $nl_arg = $nl_arg|0;
	 $nl_type = $nl_type|0;
	 var $$p$0 = 0, $$pre = 0, $$pre368 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
	 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
	 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
	 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0;
	 var $168 = 0, $168$phi = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
	 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
	 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
	 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
	 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$i = 0, $add$i127 = 0, $add$ptr = 0;
	 var $add$ptr106 = 0, $add$ptr13 = 0, $add$ptr13$sum = 0, $add$ptr13$sum320 = 0, $add$ptr13$sum322 = 0, $add$ptr246 = 0, $add$ptr265 = 0, $add$ptr27 = 0, $add$ptr277 = 0, $add$ptr282 = 0, $add$ptr287 = 0, $add$ptr292 = 0, $add$ptr297 = 0, $add$ptr328 = 0, $add$ptr61 = 0, $and = 0, $and171 = 0, $and175 = 0, $and175$ = 0, $and218 = 0;
	 var $and256 = 0, $and275 = 0, $and275$lobit = 0, $and278 = 0, $and278$lobit = 0, $and283 = 0, $and283$lobit = 0, $and288 = 0, $and293 = 0, $and293$lobit = 0, $and36 = 0, $arg$sroa$0$sroa$0$0$extract$trunc243 = 0, $arg$sroa$0$sroa$0$0$extract$trunc245 = 0, $arg$sroa$0$sroa$1$4$extract$trunc281304 = 0, $arg$sroa$0$sroa$1$4$extract$trunc281304$phi = 0, $arg$sroa$0$sroa$1$4$extract$trunc281305 = 0, $arg$sroa$0$sroa$1$4$extract$trunc281305319 = 0, $arg$sroa$0$sroa$1$4$extract$trunc281305374 = 0, $arglist_current = 0, $arglist_current11 = 0;
	 var $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current5 = 0, $arglist_current67 = 0, $arglist_current70 = 0, $arglist_current73 = 0, $arglist_current76 = 0, $arglist_current79 = 0, $arglist_current8 = 0, $arglist_current82 = 0, $arglist_current85 = 0, $arglist_current88 = 0, $arglist_current91 = 0, $arglist_current94 = 0;
	 var $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next6 = 0, $arglist_next68 = 0, $arglist_next71 = 0, $arglist_next74 = 0, $arglist_next77 = 0, $arglist_next80 = 0, $arglist_next83 = 0, $arglist_next86 = 0, $arglist_next89 = 0, $arglist_next9 = 0;
	 var $arglist_next92 = 0, $arglist_next95 = 0, $argpos$0 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx137 = 0, $arrayidx156 = 0, $arrayidx22 = 0, $arrayidx300 = 0, $arrayidx324 = 0, $arrayidx337 = 0, $arrayidx47 = 0, $arrayidx51 = 0, $arrayidx56 = 0, $arrayidx86 = 0, $arrayidx90 = 0, $arrayidx94 = 0, $bs$0343 = 0, $bs$1348 = 0, $call = 0;
	 var $call$i120 = 0, $call$i129 = 0, $call12 = 0, $call198 = 0, $call20 = 0, $call206 = 0, $call240 = 0, $call264 = 0, $call3$i = 0, $call3$i122 = 0, $call307 = 0, $call311 = 0, $call48 = 0, $charfmt = 0, $cmp = 0, $cmp$i = 0, $cmp$i152 = 0, $cmp1 = 0, $cmp130 = 0, $cmp140 = 0;
	 var $cmp145 = 0, $cmp148 = 0, $cmp172 = 0, $cmp214 = 0, $cmp23 = 0, $cmp232 = 0, $cmp237 = 0, $cmp237341 = 0, $cmp241 = 0, $cmp248 = 0, $cmp252 = 0, $cmp321 = 0, $cmp33 = 0, $cmp33333 = 0, $cmp334 = 0, $cmp45 = 0, $cmp52 = 0, $cmp70 = 0, $cmp78 = 0, $cmp83 = 0;
	 var $cmp87 = 0, $cmp95 = 0, $cnt$0 = 0, $cnt$1 = 0, $conv12$i = 0, $conv12$i169 = 0, $conv138 = 0, $conv17$mask$i = 0, $conv17$mask$i174 = 0, $conv185 = 0, $conv188 = 0, $conv22$i = 0, $conv22$i179 = 0, $conv27$mask$i = 0, $conv27$mask$i184 = 0, $conv301 = 0, $dec = 0, $dec$i = 0, $dec$i137 = 0, $dec$i146 = 0;
	 var $div = 0, $fl$0330370 = 0, $fl$0335 = 0, $fl$1 = 0, $i$05$i = 0, $i$05$i124 = 0, $i$2326 = 0, $i$3324 = 0, $i104 = 0, $i60 = 0, $inc = 0, $inc331 = 0, $inc344 = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i119 = 0, $incdec$ptr$i128 = 0, $incdec$ptr$i128306 = 0, $incdec$ptr$i128307 = 0, $incdec$ptr$i128308 = 0;
	 var $incdec$ptr$i128309 = 0, $incdec$ptr$i128310 = 0, $incdec$ptr$i128313 = 0, $incdec$ptr$i128314 = 0, $incdec$ptr$i138 = 0, $incdec$ptr$i147 = 0, $incdec$ptr134 = 0, $incdec$ptr43 = 0, $isdigit = 0, $isdigittmp = 0, $l$0 = 0, $l$1$lcssa376 = 0, $l$1$w$1 = 0, $l$1342 = 0, $l$2347 = 0, $l$addr$03$i = 0, $l$addr$03$i135 = 0, $l$addr$03$i144 = 0, $l10n$0 = 0, $l10n$0$phi = 0;
	 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot339 = 0, $mul = 0, $mul$i = 0, $mul$i125 = 0, $or = 0, $or298 = 0, $or73 = 0, $p$0 = 0, $p$1 = 0, $p$1$w$1 = 0, $retval$0 = 0, $s$addr$02$i = 0, $s$addr$02$i136 = 0, $s$addr$02$i145 = 0, $sext = 0, $sext321 = 0, $shl = 0;
	 var $st$0 = 0, $storemerge = 0, $storemerge117328372 = 0, $storemerge117334 = 0, $storemerge118 = 0, $sub = 0, $sub$i = 0, $sub$i126 = 0, $sub$ptr$div = 0, $sub$ptr$div212 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast209 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast210 = 0, $sub$ptr$sub = 0, $sub$ptr$sub211 = 0, $sub102 = 0, $sub129 = 0, $sub139 = 0, $sub221 = 0;
	 var $sub227 = 0, $sub259 = 0, $sub26 = 0, $sub270 = 0, $sub299 = 0, $sub32 = 0, $sub32332 = 0, $sub35 = 0, $sub55 = 0, $sub58 = 0, $sub74 = 0, $t$0 = 0, $tobool = 0, $tobool$i = 0, $tobool$i121 = 0, $tobool$i130 = 0, $tobool$i140 = 0, $tobool$i149 = 0, $tobool1$i = 0, $tobool1$i134 = 0;
	 var $tobool1$i143 = 0, $tobool108 = 0, $tobool14 = 0, $tobool142 = 0, $tobool169 = 0, $tobool17 = 0, $tobool207 = 0, $tobool21 = 0, $tobool219 = 0, $tobool257 = 0, $tobool263 = 0, $tobool263346 = 0, $tobool314 = 0, $tobool317 = 0, $tobool325 = 0, $tobool37 = 0, $tobool4$i = 0, $tobool4$i123 = 0, $tobool49 = 0, $tobool6 = 0;
	 var $tobool63 = 0, $vararg_buffer = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer56 = 0, $vararg_buffer61 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr59 = 0, $vararg_ptr60 = 0;
	 var $vararg_ptr64 = 0, $vararg_ptr65 = 0, $w$0 = 0, $w$1 = 0, $wc = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer61 = sp + 80|0;
	 $vararg_buffer56 = sp + 32|0;
	 $vararg_buffer47 = sp + 48|0;
	 $vararg_buffer43 = sp + 24|0;
	 $vararg_buffer39 = sp + 8|0;
	 $vararg_buffer35 = sp;
	 $vararg_buffer = sp + 16|0;
	 $charfmt = sp + 104|0;
	 $wc = sp + 96|0;
	 $tobool14 = ($f|0)!=(0|0);
	 $168 = 0;$arg$sroa$0$sroa$1$4$extract$trunc281304 = 0;$cnt$0 = 0;$incdec$ptr$i128314 = $fmt;$l$0 = 0;$l10n$0 = 0;
	 L1: while(1) {
	  $cmp = ($cnt$0|0)>(-1);
	  do {
	   if ($cmp) {
	    $sub = (2147483647 - ($cnt$0))|0;
	    $cmp1 = ($l$0|0)>($sub|0);
	    if (!($cmp1)) {
	     $add = (($l$0) + ($cnt$0))|0;
	     $cnt$1 = $add;
	     break;
	    }
	    $0 = HEAP32[$f>>2]|0;
	    $and = $0 & 32;
	    $tobool = ($and|0)==(0);
	    if ($tobool) {
	     $call = (___errno_location()|0);
	     HEAP32[$call>>2] = 75;
	     $cnt$1 = -1;
	    } else {
	     $cnt$1 = -1;
	    }
	   } else {
	    $cnt$1 = $cnt$0;
	   }
	  } while(0);
	  $1 = HEAP32[$incdec$ptr$i128314>>2]|0;
	  $tobool6 = ($1|0)==(0);
	  if ($tobool6) {
	   label = 99;
	   break;
	  } else {
	   $169 = $1;$incdec$ptr$i128313 = $incdec$ptr$i128314;
	  }
	  while(1) {
	   if ((($169|0) == 37) | (($169|0) == 0)) {
	    break;
	   }
	   $incdec$ptr = (($incdec$ptr$i128313) + 4|0);
	   $$pre = HEAP32[$incdec$ptr>>2]|0;
	   $169 = $$pre;$incdec$ptr$i128313 = $incdec$ptr;
	  }
	  $call12 = (_wcsspn($incdec$ptr$i128313,153392)|0);
	  $div = $call12 >>> 1;
	  $add$ptr = (($incdec$ptr$i128313) + ($div<<2)|0);
	  $mul = $div << 1;
	  $add$ptr13 = (($incdec$ptr$i128313) + ($mul<<2)|0);
	  $sub$ptr$lhs$cast = $add$ptr;
	  $sub$ptr$rhs$cast = $incdec$ptr$i128314;
	  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	  $sub$ptr$div = $sub$ptr$sub >> 2;
	  if ($tobool14) {
	   $tobool1$i = ($sub$ptr$div|0)==(0);
	   if (!($tobool1$i)) {
	    $l$addr$03$i = $sub$ptr$div;$s$addr$02$i = $incdec$ptr$i128314;
	    while(1) {
	     $dec$i = (($l$addr$03$i) + -1)|0;
	     $incdec$ptr$i = (($s$addr$02$i) + 4|0);
	     $2 = HEAP32[$s$addr$02$i>>2]|0;
	     (_fputwc($2,$f)|0);
	     $tobool$i = ($dec$i|0)==(0);
	     if ($tobool$i) {
	      label = 13;
	      break;
	     } else {
	      $l$addr$03$i = $dec$i;$s$addr$02$i = $incdec$ptr$i;
	     }
	    }
	   }
	  } else {
	   label = 13;
	  }
	  if ((label|0) == 13) {
	   label = 0;
	   $tobool17 = ($sub$ptr$div|0)==(0);
	   if (!($tobool17)) {
	    $l10n$0$phi = $l10n$0;$arg$sroa$0$sroa$1$4$extract$trunc281304$phi = $arg$sroa$0$sroa$1$4$extract$trunc281304;$168$phi = $168;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $add$ptr13;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$0$phi;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281304$phi;$168 = $168$phi;
	    continue;
	   }
	  }
	  $add$ptr13$sum320 = $mul | 1;
	  $arrayidx = (($incdec$ptr$i128313) + ($add$ptr13$sum320<<2)|0);
	  $3 = HEAP32[$arrayidx>>2]|0;
	  $call20 = (_iswdigit($3)|0);
	  $tobool21 = ($call20|0)==(0);
	  if ($tobool21) {
	   $argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx;
	  } else {
	   $add$ptr13$sum = (($mul) + 2)|0;
	   $arrayidx22 = (($incdec$ptr$i128313) + ($add$ptr13$sum<<2)|0);
	   $4 = HEAP32[$arrayidx22>>2]|0;
	   $cmp23 = ($4|0)==(36);
	   if ($cmp23) {
	    $5 = HEAP32[$arrayidx>>2]|0;
	    $sub26 = (($5) + -48)|0;
	    $add$ptr13$sum322 = (($mul) + 3)|0;
	    $add$ptr27 = (($incdec$ptr$i128313) + ($add$ptr13$sum322<<2)|0);
	    $argpos$0 = $sub26;$l10n$1 = 1;$storemerge = $add$ptr27;
	   } else {
	    $argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx;
	   }
	  }
	  $6 = HEAP32[$storemerge>>2]|0;
	  $sub32332 = (($6) + -32)|0;
	  $cmp33333 = ($sub32332>>>0)<(32);
	  L25: do {
	   if ($cmp33333) {
	    $7 = $6;$fl$0335 = 0;$storemerge117334 = $storemerge;
	    while(1) {
	     $sub35 = (($7) + -32)|0;
	     $shl = 1 << $sub35;
	     $and36 = $shl & 75913;
	     $tobool37 = ($and36|0)==(0);
	     if ($tobool37) {
	      break;
	     }
	     $or = $shl | $fl$0335;
	     $incdec$ptr43 = (($storemerge117334) + 4|0);
	     $8 = HEAP32[$incdec$ptr43>>2]|0;
	     $sub32 = (($8) + -32)|0;
	     $cmp33 = ($sub32>>>0)<(32);
	     if ($cmp33) {
	      $7 = $8;$fl$0335 = $or;$storemerge117334 = $incdec$ptr43;
	     } else {
	      $20 = $8;$fl$0330370 = $or;$storemerge117328372 = $incdec$ptr43;
	      label = 29;
	      break L25;
	     }
	    }
	    $cmp45 = ($7|0)==(42);
	    if ($cmp45) {
	     $arrayidx47 = (($storemerge117334) + 4|0);
	     $9 = HEAP32[$arrayidx47>>2]|0;
	     $call48 = (_iswdigit($9)|0);
	     $tobool49 = ($call48|0)==(0);
	     if ($tobool49) {
	      label = 24;
	     } else {
	      $arrayidx51 = (($storemerge117334) + 8|0);
	      $10 = HEAP32[$arrayidx51>>2]|0;
	      $cmp52 = ($10|0)==(36);
	      if ($cmp52) {
	       $11 = HEAP32[$arrayidx47>>2]|0;
	       $sub55 = (($11) + -48)|0;
	       $arrayidx56 = (($nl_type) + ($sub55<<2)|0);
	       HEAP32[$arrayidx56>>2] = 10;
	       $12 = HEAP32[$arrayidx47>>2]|0;
	       $sub58 = (($12) + -48)|0;
	       $i60 = (($nl_arg) + ($sub58<<3)|0);
	       $13 = $i60;
	       $14 = $13;
	       $15 = HEAP32[$14>>2]|0;
	       $16 = (($13) + 4)|0;
	       $17 = $16;
	       $18 = HEAP32[$17>>2]|0;
	       $add$ptr61 = (($storemerge117334) + 12|0);
	       $l10n$2 = 1;$storemerge118 = $add$ptr61;$w$0 = $15;
	      } else {
	       label = 24;
	      }
	     }
	     if ((label|0) == 24) {
	      label = 0;
	      $tobool63 = ($l10n$1|0)==(0);
	      if (!($tobool63)) {
	       $retval$0 = -1;
	       label = 117;
	       break L1;
	      }
	      if (!($tobool14)) {
	       $fl$1 = $fl$0335;$incdec$ptr$i128310 = $arrayidx47;$l10n$3 = 0;$w$1 = 0;
	       break;
	      }
	      $arglist_current = HEAP32[$ap>>2]|0;
	      $19 = HEAP32[$arglist_current>>2]|0;
	      $arglist_next = (($arglist_current) + 4|0);
	      HEAP32[$ap>>2] = $arglist_next;
	      $l10n$2 = 0;$storemerge118 = $arrayidx47;$w$0 = $19;
	     }
	     $cmp70 = ($w$0|0)<(0);
	     if ($cmp70) {
	      $or73 = $fl$0335 | 8192;
	      $sub74 = (0 - ($w$0))|0;
	      $fl$1 = $or73;$incdec$ptr$i128310 = $storemerge118;$l10n$3 = $l10n$2;$w$1 = $sub74;
	     } else {
	      $fl$1 = $fl$0335;$incdec$ptr$i128310 = $storemerge118;$l10n$3 = $l10n$2;$w$1 = $w$0;
	     }
	    } else {
	     $20 = $7;$fl$0330370 = $fl$0335;$storemerge117328372 = $storemerge117334;
	     label = 29;
	    }
	   } else {
	    $20 = $6;$fl$0330370 = 0;$storemerge117328372 = $storemerge;
	    label = 29;
	   }
	  } while(0);
	  if ((label|0) == 29) {
	   label = 0;
	   $call3$i = (_iswdigit($20)|0);
	   $tobool4$i = ($call3$i|0)==(0);
	   if ($tobool4$i) {
	    $fl$1 = $fl$0330370;$incdec$ptr$i128310 = $storemerge117328372;$l10n$3 = $l10n$1;$w$1 = 0;
	   } else {
	    $i$05$i = 0;$incdec$ptr$i128307 = $storemerge117328372;
	    while(1) {
	     $mul$i = ($i$05$i*10)|0;
	     $21 = HEAP32[$incdec$ptr$i128307>>2]|0;
	     $sub$i = (($mul$i) + -48)|0;
	     $add$i = (($sub$i) + ($21))|0;
	     $incdec$ptr$i119 = (($incdec$ptr$i128307) + 4|0);
	     $22 = HEAP32[$incdec$ptr$i119>>2]|0;
	     $call$i120 = (_iswdigit($22)|0);
	     $tobool$i121 = ($call$i120|0)==(0);
	     if ($tobool$i121) {
	      break;
	     } else {
	      $i$05$i = $add$i;$incdec$ptr$i128307 = $incdec$ptr$i119;
	     }
	    }
	    $cmp78 = ($add$i|0)<(0);
	    if ($cmp78) {
	     $retval$0 = -1;
	     label = 117;
	     break;
	    } else {
	     $fl$1 = $fl$0330370;$incdec$ptr$i128310 = $incdec$ptr$i119;$l10n$3 = $l10n$1;$w$1 = $add$i;
	    }
	   }
	  }
	  $23 = HEAP32[$incdec$ptr$i128310>>2]|0;
	  $cmp83 = ($23|0)==(46);
	  L46: do {
	   if ($cmp83) {
	    $arrayidx86 = (($incdec$ptr$i128310) + 4|0);
	    $24 = HEAP32[$arrayidx86>>2]|0;
	    $cmp87 = ($24|0)==(42);
	    if (!($cmp87)) {
	     $call3$i122 = (_iswdigit($24)|0);
	     $tobool4$i123 = ($call3$i122|0)==(0);
	     if ($tobool4$i123) {
	      $incdec$ptr$i128309 = $arrayidx86;$p$0 = 0;
	      break;
	     } else {
	      $i$05$i124 = 0;$incdec$ptr$i128306 = $arrayidx86;
	     }
	     while(1) {
	      $mul$i125 = ($i$05$i124*10)|0;
	      $35 = HEAP32[$incdec$ptr$i128306>>2]|0;
	      $sub$i126 = (($mul$i125) + -48)|0;
	      $add$i127 = (($sub$i126) + ($35))|0;
	      $incdec$ptr$i128 = (($incdec$ptr$i128306) + 4|0);
	      $36 = HEAP32[$incdec$ptr$i128>>2]|0;
	      $call$i129 = (_iswdigit($36)|0);
	      $tobool$i130 = ($call$i129|0)==(0);
	      if ($tobool$i130) {
	       $incdec$ptr$i128309 = $incdec$ptr$i128;$p$0 = $add$i127;
	       break L46;
	      } else {
	       $i$05$i124 = $add$i127;$incdec$ptr$i128306 = $incdec$ptr$i128;
	      }
	     }
	    }
	    $arrayidx90 = (($incdec$ptr$i128310) + 8|0);
	    $25 = HEAP32[$arrayidx90>>2]|0;
	    $isdigittmp = (($25) + -48)|0;
	    $isdigit = ($isdigittmp>>>0)<(10);
	    if ($isdigit) {
	     $arrayidx94 = (($incdec$ptr$i128310) + 12|0);
	     $26 = HEAP32[$arrayidx94>>2]|0;
	     $cmp95 = ($26|0)==(36);
	     if ($cmp95) {
	      $arrayidx100 = (($nl_type) + ($isdigittmp<<2)|0);
	      HEAP32[$arrayidx100>>2] = 10;
	      $27 = HEAP32[$arrayidx90>>2]|0;
	      $sub102 = (($27) + -48)|0;
	      $i104 = (($nl_arg) + ($sub102<<3)|0);
	      $28 = $i104;
	      $29 = $28;
	      $30 = HEAP32[$29>>2]|0;
	      $31 = (($28) + 4)|0;
	      $32 = $31;
	      $33 = HEAP32[$32>>2]|0;
	      $add$ptr106 = (($incdec$ptr$i128310) + 16|0);
	      $incdec$ptr$i128309 = $add$ptr106;$p$0 = $30;
	      break;
	     }
	    }
	    $tobool108 = ($l10n$3|0)==(0);
	    if (!($tobool108)) {
	     $retval$0 = -1;
	     label = 117;
	     break L1;
	    }
	    if ($tobool14) {
	     $arglist_current2 = HEAP32[$ap>>2]|0;
	     $34 = HEAP32[$arglist_current2>>2]|0;
	     $arglist_next3 = (($arglist_current2) + 4|0);
	     HEAP32[$ap>>2] = $arglist_next3;
	     $incdec$ptr$i128309 = $arrayidx90;$p$0 = $34;
	    } else {
	     $incdec$ptr$i128309 = $arrayidx90;$p$0 = 0;
	    }
	   } else {
	    $incdec$ptr$i128309 = $incdec$ptr$i128310;$p$0 = -1;
	   }
	  } while(0);
	  $incdec$ptr$i128308 = $incdec$ptr$i128309;$st$0 = 0;
	  while(1) {
	   $37 = HEAP32[$incdec$ptr$i128308>>2]|0;
	   $sub129 = (($37) + -65)|0;
	   $cmp130 = ($sub129>>>0)>(57);
	   if ($cmp130) {
	    $retval$0 = -1;
	    label = 117;
	    break L1;
	   }
	   $incdec$ptr134 = (($incdec$ptr$i128308) + 4|0);
	   $arrayidx137 = ((153400 + (($st$0*58)|0)|0) + ($sub129)|0);
	   $38 = HEAP8[$arrayidx137>>0]|0;
	   $conv138 = $38&255;
	   $sub139 = (($conv138) + -1)|0;
	   $cmp140 = ($sub139>>>0)<(8);
	   if ($cmp140) {
	    $incdec$ptr$i128308 = $incdec$ptr134;$st$0 = $conv138;
	   } else {
	    break;
	   }
	  }
	  $tobool142 = ($38<<24>>24)==(0);
	  if ($tobool142) {
	   $retval$0 = -1;
	   label = 117;
	   break;
	  }
	  $cmp145 = ($38<<24>>24)==(19);
	  $cmp148 = ($argpos$0|0)>(-1);
	  L65: do {
	   if ($cmp145) {
	    if ($cmp148) {
	     $retval$0 = -1;
	     label = 117;
	     break L1;
	    } else {
	     $170 = $168;$arg$sroa$0$sroa$1$4$extract$trunc281305 = $arg$sroa$0$sroa$1$4$extract$trunc281304;
	     label = 63;
	    }
	   } else {
	    if ($cmp148) {
	     $arrayidx156 = (($nl_type) + ($argpos$0<<2)|0);
	     HEAP32[$arrayidx156>>2] = $conv138;
	     $39 = (($nl_arg) + ($argpos$0<<3)|0);
	     $40 = $39;
	     $41 = $40;
	     $42 = HEAP32[$41>>2]|0;
	     $43 = (($40) + 4)|0;
	     $44 = $43;
	     $45 = HEAP32[$44>>2]|0;
	     $46 = $42;
	     $170 = $46;$arg$sroa$0$sroa$1$4$extract$trunc281305 = $45;
	     label = 63;
	     break;
	    }
	    if (!($tobool14)) {
	     $retval$0 = 0;
	     label = 117;
	     break L1;
	    }
	    $cmp$i = ($38&255)>(20);
	    if ($cmp$i) {
	     $83 = $37;$84 = $168;$arg$sroa$0$sroa$1$4$extract$trunc281305319 = $arg$sroa$0$sroa$1$4$extract$trunc281304;
	    } else {
	     do {
	      switch ($conv138|0) {
	      case 9:  {
	       $arglist_current5 = HEAP32[$ap>>2]|0;
	       $47 = HEAP32[$arglist_current5>>2]|0;
	       $arglist_next6 = (($arglist_current5) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next6;
	       $171 = $47;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = $arg$sroa$0$sroa$1$4$extract$trunc281304;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 10:  {
	       $arglist_current8 = HEAP32[$ap>>2]|0;
	       $48 = HEAP32[$arglist_current8>>2]|0;
	       $arglist_next9 = (($arglist_current8) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next9;
	       $49 = ($48|0)<(0);
	       $50 = $49 << 31 >> 31;
	       $51 = $48;
	       $171 = $51;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = $50;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 11:  {
	       $arglist_current11 = HEAP32[$ap>>2]|0;
	       $52 = HEAP32[$arglist_current11>>2]|0;
	       $arglist_next12 = (($arglist_current11) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next12;
	       $53 = $52;
	       $171 = $53;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = 0;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 12:  {
	       $arglist_current14 = HEAP32[$ap>>2]|0;
	       $54 = $arglist_current14;
	       $55 = $54;
	       $56 = HEAP32[$55>>2]|0;
	       $57 = (($54) + 4)|0;
	       $58 = $57;
	       $59 = HEAP32[$58>>2]|0;
	       $arglist_next15 = (($arglist_current14) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next15;
	       $60 = $56;
	       $171 = $60;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = $59;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 13:  {
	       $arglist_current17 = HEAP32[$ap>>2]|0;
	       $61 = HEAP32[$arglist_current17>>2]|0;
	       $arglist_next18 = (($arglist_current17) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next18;
	       $conv12$i = $61&65535;
	       $62 = $conv12$i << 16 >> 16;
	       $63 = ($62|0)<(0);
	       $64 = $63 << 31 >> 31;
	       $sext321 = $61 << 16;
	       $arg$sroa$0$sroa$0$0$extract$trunc245 = $sext321 >> 16;
	       $65 = $arg$sroa$0$sroa$0$0$extract$trunc245;
	       $171 = $65;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = $64;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 14:  {
	       $arglist_current20 = HEAP32[$ap>>2]|0;
	       $66 = HEAP32[$arglist_current20>>2]|0;
	       $arglist_next21 = (($arglist_current20) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next21;
	       $conv17$mask$i = $66 & 65535;
	       $67 = $conv17$mask$i;
	       $171 = $67;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = 0;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 15:  {
	       $arglist_current23 = HEAP32[$ap>>2]|0;
	       $68 = HEAP32[$arglist_current23>>2]|0;
	       $arglist_next24 = (($arglist_current23) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next24;
	       $conv22$i = $68&255;
	       $69 = $conv22$i << 24 >> 24;
	       $70 = ($69|0)<(0);
	       $71 = $70 << 31 >> 31;
	       $sext = $68 << 24;
	       $arg$sroa$0$sroa$0$0$extract$trunc243 = $sext >> 24;
	       $72 = $arg$sroa$0$sroa$0$0$extract$trunc243;
	       $171 = $72;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = $71;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 16:  {
	       $arglist_current26 = HEAP32[$ap>>2]|0;
	       $73 = HEAP32[$arglist_current26>>2]|0;
	       $arglist_next27 = (($arglist_current26) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next27;
	       $conv27$mask$i = $73 & 255;
	       $74 = $conv27$mask$i;
	       $171 = $74;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = 0;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 17:  {
	       $arglist_current29 = HEAP32[$ap>>2]|0;
	       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$75 = +HEAPF64[tempDoublePtr>>3];
	       $arglist_next30 = (($arglist_current29) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next30;
	       HEAPF64[tempDoublePtr>>3] = $75;$76 = HEAP32[tempDoublePtr>>2]|0;
	       $77 = HEAP32[tempDoublePtr+4>>2]|0;
	       $78 = $76;
	       $171 = $78;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = $77;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 18:  {
	       $arglist_current32 = HEAP32[$ap>>2]|0;
	       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$79 = +HEAPF64[tempDoublePtr>>3];
	       $arglist_next33 = (($arglist_current32) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next33;
	       HEAPF64[tempDoublePtr>>3] = $79;$80 = HEAP32[tempDoublePtr>>2]|0;
	       $81 = HEAP32[tempDoublePtr+4>>2]|0;
	       $82 = $80;
	       $170 = $82;$arg$sroa$0$sroa$1$4$extract$trunc281305 = $81;
	       label = 63;
	       break L65;
	       break;
	      }
	      default: {
	       $171 = $168;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = $arg$sroa$0$sroa$1$4$extract$trunc281304;
	       label = 64;
	       break L65;
	      }
	      }
	     } while(0);
	    }
	   }
	  } while(0);
	  if ((label|0) == 63) {
	   label = 0;
	   if ($tobool14) {
	    $171 = $170;$arg$sroa$0$sroa$1$4$extract$trunc281305374 = $arg$sroa$0$sroa$1$4$extract$trunc281305;
	    label = 64;
	   } else {
	    $168 = $170;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue;
	   }
	  }
	  if ((label|0) == 64) {
	   label = 0;
	   $$pre368 = HEAP32[$incdec$ptr$i128308>>2]|0;
	   $83 = $$pre368;$84 = $171;$arg$sroa$0$sroa$1$4$extract$trunc281305319 = $arg$sroa$0$sroa$1$4$extract$trunc281305374;
	  }
	  $tobool169 = ($st$0|0)==(0);
	  if ($tobool169) {
	   $t$0 = $83;
	  } else {
	   $and171 = $83 & 15;
	   $cmp172 = ($and171|0)==(3);
	   $and175 = $83 & -33;
	   $and175$ = $cmp172 ? $and175 : $83;
	   $t$0 = $and175$;
	  }
	  switch ($t$0|0) {
	  case 110:  {
	   switch ($st$0|0) {
	   case 0:  {
	    HEAP32[$84>>2] = $cnt$1;
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   case 1:  {
	    HEAP32[$84>>2] = $cnt$1;
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   case 2:  {
	    $85 = ($cnt$1|0)<(0);
	    $86 = $85 << 31 >> 31;
	    $87 = $84;
	    $88 = $87;
	    HEAP32[$88>>2] = $cnt$1;
	    $89 = (($87) + 4)|0;
	    $90 = $89;
	    HEAP32[$90>>2] = $86;
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   case 3:  {
	    $conv185 = $cnt$1&65535;
	    HEAP16[$84>>1] = $conv185;
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   case 4:  {
	    $conv188 = $cnt$1&255;
	    HEAP8[$84>>0] = $conv188;
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   case 6:  {
	    HEAP32[$84>>2] = $cnt$1;
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   case 7:  {
	    $91 = ($cnt$1|0)<(0);
	    $92 = $91 << 31 >> 31;
	    $93 = $84;
	    $94 = $93;
	    HEAP32[$94>>2] = $cnt$1;
	    $95 = (($93) + 4)|0;
	    $96 = $95;
	    HEAP32[$96>>2] = $92;
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   default: {
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue L1;
	   }
	   }
	   break;
	  }
	  case 99:  {
	   $97 = $84;
	   $call198 = (_btowc($97)|0);
	   (_fputwc($call198,$f)|0);
	   $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = 1;$l10n$0 = $l10n$3;
	   continue L1;
	   break;
	  }
	  case 67:  {
	   $98 = $84;
	   (_fputwc($98,$f)|0);
	   $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = 1;$l10n$0 = $l10n$3;
	   continue L1;
	   break;
	  }
	  case 83:  {
	   $call206 = (_wmemchr($84,0,$p$0)|0);
	   $tobool207 = ($call206|0)==(0|0);
	   if ($tobool207) {
	    $p$1 = $p$0;
	   } else {
	    $sub$ptr$lhs$cast209 = $call206;
	    $sub$ptr$rhs$cast210 = $84;
	    $sub$ptr$sub211 = (($sub$ptr$lhs$cast209) - ($sub$ptr$rhs$cast210))|0;
	    $sub$ptr$div212 = $sub$ptr$sub211 >> 2;
	    $p$1 = $sub$ptr$div212;
	   }
	   $cmp214 = ($w$1|0)<($p$1|0);
	   $p$1$w$1 = $cmp214 ? $p$1 : $w$1;
	   $and218 = $fl$1 & 8192;
	   $tobool219 = ($and218|0)==(0);
	   if ($tobool219) {
	    $sub221 = (($p$1$w$1) - ($p$1))|0;
	    HEAP32[$vararg_buffer>>2] = $sub221;
	    $vararg_ptr34 = (($vararg_buffer) + 4|0);
	    HEAP32[$vararg_ptr34>>2] = 153872;
	    (_fprintf(($f|0),(153864|0),($vararg_buffer|0))|0);
	    $tobool1$i134 = ($p$1|0)==(0);
	    if ($tobool1$i134) {
	     $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $p$1$w$1;$l10n$0 = $l10n$3;
	     continue L1;
	    } else {
	     $l$addr$03$i135 = $p$1;$s$addr$02$i136 = $84;
	    }
	    while(1) {
	     $dec$i137 = (($l$addr$03$i135) + -1)|0;
	     $incdec$ptr$i138 = (($s$addr$02$i136) + 4|0);
	     $99 = HEAP32[$s$addr$02$i136>>2]|0;
	     (_fputwc($99,$f)|0);
	     $tobool$i140 = ($dec$i137|0)==(0);
	     if ($tobool$i140) {
	      $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $p$1$w$1;$l10n$0 = $l10n$3;
	      continue L1;
	     } else {
	      $l$addr$03$i135 = $dec$i137;$s$addr$02$i136 = $incdec$ptr$i138;
	     }
	    }
	   }
	   $tobool1$i143 = ($p$1|0)==(0);
	   if (!($tobool1$i143)) {
	    $l$addr$03$i144 = $p$1;$s$addr$02$i145 = $84;
	    while(1) {
	     $dec$i146 = (($l$addr$03$i144) + -1)|0;
	     $incdec$ptr$i147 = (($s$addr$02$i145) + 4|0);
	     $100 = HEAP32[$s$addr$02$i145>>2]|0;
	     (_fputwc($100,$f)|0);
	     $tobool$i149 = ($dec$i146|0)==(0);
	     if ($tobool$i149) {
	      break;
	     } else {
	      $l$addr$03$i144 = $dec$i146;$s$addr$02$i145 = $incdec$ptr$i147;
	     }
	    }
	   }
	   $sub227 = (($p$1$w$1) - ($p$1))|0;
	   HEAP32[$vararg_buffer35>>2] = $sub227;
	   $vararg_ptr38 = (($vararg_buffer35) + 4|0);
	   HEAP32[$vararg_ptr38>>2] = 153872;
	   (_fprintf(($f|0),(153864|0),($vararg_buffer35|0))|0);
	   $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $p$1$w$1;$l10n$0 = $l10n$3;
	   continue L1;
	   break;
	  }
	  case 115:  {
	   $cmp232 = ($p$0|0)<(0);
	   $$p$0 = $cmp232 ? 2147483647 : $p$0;
	   $cmp237341 = ($$p$0|0)>(0);
	   L122: do {
	    if ($cmp237341) {
	     $bs$0343 = $84;$l$1342 = 0;
	     while(1) {
	      $call240 = (_mbtowc($wc,$bs$0343,4)|0);
	      $cmp241 = ($call240|0)>(0);
	      if (!($cmp241)) {
	       break;
	      }
	      $add$ptr246 = (($bs$0343) + ($call240)|0);
	      $inc = (($l$1342) + 1)|0;
	      $cmp237 = ($inc|0)<($$p$0|0);
	      if ($cmp237) {
	       $bs$0343 = $add$ptr246;$l$1342 = $inc;
	      } else {
	       $l$1$lcssa376 = $inc;
	       break L122;
	      }
	     }
	     $cmp248 = ($call240|0)<(0);
	     if ($cmp248) {
	      $retval$0 = -1;
	      label = 117;
	      break L1;
	     } else {
	      $l$1$lcssa376 = $l$1342;
	     }
	    } else {
	     $l$1$lcssa376 = 0;
	    }
	   } while(0);
	   $cmp252 = ($w$1|0)<($l$1$lcssa376|0);
	   $l$1$w$1 = $cmp252 ? $l$1$lcssa376 : $w$1;
	   $and256 = $fl$1 & 8192;
	   $tobool257 = ($and256|0)!=(0);
	   if (!($tobool257)) {
	    $sub259 = (($l$1$w$1) - ($l$1$lcssa376))|0;
	    HEAP32[$vararg_buffer39>>2] = $sub259;
	    $vararg_ptr42 = (($vararg_buffer39) + 4|0);
	    HEAP32[$vararg_ptr42>>2] = 153872;
	    (_fprintf(($f|0),(153864|0),($vararg_buffer39|0))|0);
	   }
	   $tobool263346 = ($l$1$lcssa376|0)==(0);
	   if (!($tobool263346)) {
	    $bs$1348 = $84;$l$2347 = $l$1$lcssa376;
	    while(1) {
	     $dec = (($l$2347) + -1)|0;
	     $call264 = (_mbtowc($wc,$bs$1348,4)|0);
	     $add$ptr265 = (($bs$1348) + ($call264)|0);
	     $101 = HEAP32[$wc>>2]|0;
	     (_fputwc($101,$f)|0);
	     $tobool263 = ($dec|0)==(0);
	     if ($tobool263) {
	      break;
	     } else {
	      $bs$1348 = $add$ptr265;$l$2347 = $dec;
	     }
	    }
	   }
	   if (!($tobool257)) {
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $l$1$w$1;$l10n$0 = $l10n$3;
	    continue L1;
	   }
	   $sub270 = (($l$1$w$1) - ($l$1$lcssa376))|0;
	   HEAP32[$vararg_buffer43>>2] = $sub270;
	   $vararg_ptr46 = (($vararg_buffer43) + 4|0);
	   HEAP32[$vararg_ptr46>>2] = 153872;
	   (_fprintf(($f|0),(153864|0),($vararg_buffer43|0))|0);
	   $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $l$1$w$1;$l10n$0 = $l10n$3;
	   continue L1;
	   break;
	  }
	  default: {
	   $and275 = $fl$1 >>> 3;
	   $and275$lobit = $and275 & 1;
	   $102 = $and275$lobit ^ 1;
	   $add$ptr277 = (153904 + ($102)|0);
	   $and278 = $fl$1 >>> 11;
	   $and278$lobit = $and278 & 1;
	   $103 = $and278$lobit ^ 1;
	   $add$ptr282 = (153912 + ($103)|0);
	   $and283 = $fl$1 >>> 13;
	   $and283$lobit = $and283 & 1;
	   $104 = $and283$lobit ^ 1;
	   $add$ptr287 = (153920 + ($104)|0);
	   $and288 = $fl$1 & 1;
	   $105 = $and288 ^ 1;
	   $add$ptr292 = (153928 + ($105)|0);
	   $and293 = $fl$1 >>> 16;
	   $and293$lobit = $and293 & 1;
	   $106 = $and293$lobit ^ 1;
	   $add$ptr297 = (153936 + ($106)|0);
	   $or298 = $t$0 | 32;
	   $sub299 = (($or298) + -97)|0;
	   $arrayidx300 = (153944 + ($sub299)|0);
	   $107 = HEAP8[$arrayidx300>>0]|0;
	   $conv301 = $107 << 24 >> 24;
	   HEAP32[$vararg_buffer47>>2] = $add$ptr277;
	   $vararg_ptr50 = (($vararg_buffer47) + 4|0);
	   HEAP32[$vararg_ptr50>>2] = $add$ptr282;
	   $vararg_ptr51 = (($vararg_buffer47) + 8|0);
	   HEAP32[$vararg_ptr51>>2] = $add$ptr287;
	   $vararg_ptr52 = (($vararg_buffer47) + 12|0);
	   HEAP32[$vararg_ptr52>>2] = $add$ptr292;
	   $vararg_ptr53 = (($vararg_buffer47) + 16|0);
	   HEAP32[$vararg_ptr53>>2] = $add$ptr297;
	   $vararg_ptr54 = (($vararg_buffer47) + 20|0);
	   HEAP32[$vararg_ptr54>>2] = $conv301;
	   $vararg_ptr55 = (($vararg_buffer47) + 24|0);
	   HEAP32[$vararg_ptr55>>2] = $t$0;
	   (_snprintf($charfmt,16,153880,$vararg_buffer47)|0);
	   switch ($or298|0) {
	   case 103: case 102: case 101: case 97:  {
	    $108 = $84;
	    HEAP32[tempDoublePtr>>2] = $108;HEAP32[tempDoublePtr+4>>2] = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$109 = +HEAPF64[tempDoublePtr>>3];
	    HEAP32[$vararg_buffer56>>2] = $w$1;
	    $vararg_ptr59 = (($vararg_buffer56) + 4|0);
	    HEAP32[$vararg_ptr59>>2] = $p$0;
	    $vararg_ptr60 = (($vararg_buffer56) + 8|0);
	    HEAPF64[tempDoublePtr>>3]=$109;HEAP32[$vararg_ptr60>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr60+4>>2]=HEAP32[tempDoublePtr+4>>2];
	    $call307 = (_fprintf(($f|0),($charfmt|0),($vararg_buffer56|0))|0);
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $call307;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   case 112: case 120: case 117: case 111: case 105: case 100:  {
	    $110 = $84;
	    HEAP32[$vararg_buffer61>>2] = $w$1;
	    $vararg_ptr64 = (($vararg_buffer61) + 4|0);
	    HEAP32[$vararg_ptr64>>2] = $p$0;
	    $vararg_ptr65 = (($vararg_buffer61) + 8|0);
	    $111 = $vararg_ptr65;
	    $112 = $111;
	    HEAP32[$112>>2] = $110;
	    $113 = (($111) + 4)|0;
	    $114 = $113;
	    HEAP32[$114>>2] = $arg$sroa$0$sroa$1$4$extract$trunc281305319;
	    $call311 = (_fprintf(($f|0),($charfmt|0),($vararg_buffer61|0))|0);
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $call311;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   default: {
	    $168 = $84;$arg$sroa$0$sroa$1$4$extract$trunc281304 = $arg$sroa$0$sroa$1$4$extract$trunc281305319;$cnt$0 = $cnt$1;$incdec$ptr$i128314 = $incdec$ptr134;$l$0 = $sub$ptr$div;$l10n$0 = $l10n$3;
	    continue L1;
	   }
	   }
	  }
	  }
	 }
	 if ((label|0) == 99) {
	  $tobool314 = ($f|0)==(0|0);
	  if (!($tobool314)) {
	   $retval$0 = $cnt$1;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $tobool317 = ($l10n$0|0)==(0);
	  if ($tobool317) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $i$2326 = 1;
	  }
	  while(1) {
	   $arrayidx324 = (($nl_type) + ($i$2326<<2)|0);
	   $115 = HEAP32[$arrayidx324>>2]|0;
	   $tobool325 = ($115|0)==(0);
	   if ($tobool325) {
	    $i$3324 = $i$2326;
	    break;
	   }
	   $add$ptr328 = (($nl_arg) + ($i$2326<<3)|0);
	   $cmp$i152 = ($115>>>0)>(20);
	   L146: do {
	    if (!($cmp$i152)) {
	     do {
	      switch ($115|0) {
	      case 9:  {
	       $arglist_current67 = HEAP32[$ap>>2]|0;
	       $116 = HEAP32[$arglist_current67>>2]|0;
	       $arglist_next68 = (($arglist_current67) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next68;
	       HEAP32[$add$ptr328>>2] = $116;
	       break L146;
	       break;
	      }
	      case 10:  {
	       $arglist_current70 = HEAP32[$ap>>2]|0;
	       $117 = HEAP32[$arglist_current70>>2]|0;
	       $arglist_next71 = (($arglist_current70) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next71;
	       $118 = ($117|0)<(0);
	       $119 = $118 << 31 >> 31;
	       $120 = $add$ptr328;
	       $121 = $120;
	       HEAP32[$121>>2] = $117;
	       $122 = (($120) + 4)|0;
	       $123 = $122;
	       HEAP32[$123>>2] = $119;
	       break L146;
	       break;
	      }
	      case 11:  {
	       $arglist_current73 = HEAP32[$ap>>2]|0;
	       $124 = HEAP32[$arglist_current73>>2]|0;
	       $arglist_next74 = (($arglist_current73) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next74;
	       $125 = $add$ptr328;
	       $126 = $125;
	       HEAP32[$126>>2] = $124;
	       $127 = (($125) + 4)|0;
	       $128 = $127;
	       HEAP32[$128>>2] = 0;
	       break L146;
	       break;
	      }
	      case 12:  {
	       $arglist_current76 = HEAP32[$ap>>2]|0;
	       $129 = $arglist_current76;
	       $130 = $129;
	       $131 = HEAP32[$130>>2]|0;
	       $132 = (($129) + 4)|0;
	       $133 = $132;
	       $134 = HEAP32[$133>>2]|0;
	       $arglist_next77 = (($arglist_current76) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next77;
	       $135 = $add$ptr328;
	       $136 = $135;
	       HEAP32[$136>>2] = $131;
	       $137 = (($135) + 4)|0;
	       $138 = $137;
	       HEAP32[$138>>2] = $134;
	       break L146;
	       break;
	      }
	      case 13:  {
	       $arglist_current79 = HEAP32[$ap>>2]|0;
	       $139 = HEAP32[$arglist_current79>>2]|0;
	       $arglist_next80 = (($arglist_current79) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next80;
	       $conv12$i169 = $139&65535;
	       $140 = $conv12$i169 << 16 >> 16;
	       $141 = ($140|0)<(0);
	       $142 = $141 << 31 >> 31;
	       $143 = $add$ptr328;
	       $144 = $143;
	       HEAP32[$144>>2] = $140;
	       $145 = (($143) + 4)|0;
	       $146 = $145;
	       HEAP32[$146>>2] = $142;
	       break L146;
	       break;
	      }
	      case 14:  {
	       $arglist_current82 = HEAP32[$ap>>2]|0;
	       $147 = HEAP32[$arglist_current82>>2]|0;
	       $arglist_next83 = (($arglist_current82) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next83;
	       $conv17$mask$i174 = $147 & 65535;
	       $148 = $add$ptr328;
	       $149 = $148;
	       HEAP32[$149>>2] = $conv17$mask$i174;
	       $150 = (($148) + 4)|0;
	       $151 = $150;
	       HEAP32[$151>>2] = 0;
	       break L146;
	       break;
	      }
	      case 15:  {
	       $arglist_current85 = HEAP32[$ap>>2]|0;
	       $152 = HEAP32[$arglist_current85>>2]|0;
	       $arglist_next86 = (($arglist_current85) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next86;
	       $conv22$i179 = $152&255;
	       $153 = $conv22$i179 << 24 >> 24;
	       $154 = ($153|0)<(0);
	       $155 = $154 << 31 >> 31;
	       $156 = $add$ptr328;
	       $157 = $156;
	       HEAP32[$157>>2] = $153;
	       $158 = (($156) + 4)|0;
	       $159 = $158;
	       HEAP32[$159>>2] = $155;
	       break L146;
	       break;
	      }
	      case 16:  {
	       $arglist_current88 = HEAP32[$ap>>2]|0;
	       $160 = HEAP32[$arglist_current88>>2]|0;
	       $arglist_next89 = (($arglist_current88) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next89;
	       $conv27$mask$i184 = $160 & 255;
	       $161 = $add$ptr328;
	       $162 = $161;
	       HEAP32[$162>>2] = $conv27$mask$i184;
	       $163 = (($161) + 4)|0;
	       $164 = $163;
	       HEAP32[$164>>2] = 0;
	       break L146;
	       break;
	      }
	      case 17:  {
	       $arglist_current91 = HEAP32[$ap>>2]|0;
	       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current91>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current91+4>>2];$165 = +HEAPF64[tempDoublePtr>>3];
	       $arglist_next92 = (($arglist_current91) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next92;
	       HEAPF64[$add$ptr328>>3] = $165;
	       break L146;
	       break;
	      }
	      case 18:  {
	       $arglist_current94 = HEAP32[$ap>>2]|0;
	       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current94>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current94+4>>2];$166 = +HEAPF64[tempDoublePtr>>3];
	       $arglist_next95 = (($arglist_current94) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next95;
	       HEAPF64[$add$ptr328>>3] = $166;
	       break L146;
	       break;
	      }
	      default: {
	       break L146;
	      }
	      }
	     } while(0);
	    }
	   } while(0);
	   $inc331 = (($i$2326) + 1)|0;
	   $cmp321 = ($inc331|0)<(10);
	   if ($cmp321) {
	    $i$2326 = $inc331;
	   } else {
	    $retval$0 = 1;
	    label = 117;
	    break;
	   }
	  }
	  if ((label|0) == 117) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  while(1) {
	   $arrayidx337 = (($nl_type) + ($i$3324<<2)|0);
	   $167 = HEAP32[$arrayidx337>>2]|0;
	   $lnot339 = ($167|0)==(0);
	   $inc344 = (($i$3324) + 1)|0;
	   if (!($lnot339)) {
	    $retval$0 = -1;
	    label = 117;
	    break;
	   }
	   $cmp334 = ($inc344|0)<(10);
	   if ($cmp334) {
	    $i$3324 = $inc344;
	   } else {
	    $retval$0 = 1;
	    label = 117;
	    break;
	   }
	  }
	  if ((label|0) == 117) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 else if ((label|0) == 117) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _vswprintf($s,$n,$fmt,$ap) {
	 $s = $s|0;
	 $n = $n|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $add = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cond = 0, $vla = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_fopen((153968|0),(154008|0))|0);
	 $call1 = (_vfwprintf($call,$fmt,$ap)|0);
	 (_fclose(($call|0))|0);
	 $call3 = (_fopen((153968|0),(154016|0))|0);
	 $add = (($call1) + 1)|0;
	 $vla = STACKTOP; STACKTOP = STACKTOP + ((((1*$add)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
	 (_fread(($vla|0),1,($call1|0),($call3|0))|0);
	 (_fclose(($call3|0))|0);
	 (_remove((153968|0))|0);
	 $arrayidx = (($vla) + ($call1)|0);
	 HEAP8[$arrayidx>>0] = 0;
	 $call7 = (_mbstowcs($s,$vla,$n)|0);
	 $cmp = ($call7>>>0)>=($n>>>0);
	 $cond = $cmp ? -1 : $call7;
	 STACKTOP = sp;return ($cond|0);
	}
	function _vwprintf($fmt,$ap) {
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $0 = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[_stdout>>2]|0;
	 $call = (_vfwprintf($0,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wprintf($fmt,$varargs) {
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 $call = (_vwprintf($fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function ___fputwc_unlocked($c,$f) {
	 $c = $c|0;
	 $f = $f|0;
	 var $0 = 0, $arrayidx = 0, $c$addr$0 = 0, $call1 = 0, $call2 = 0, $call6 = 0, $cmp = 0, $cmp5 = 0, $cmp58 = 0, $cmp7 = 0, $conv = 0, $i$09 = 0, $inc = 0, $isascii = 0, $mbc = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $mbc = sp;
	 $isascii = ($c>>>0)<(128);
	 L1: do {
	  if ($isascii) {
	   $call1 = (_fputc(($c|0),($f|0))|0);
	   $c$addr$0 = $call1;
	  } else {
	   $call2 = (_wctomb($mbc,$c)|0);
	   $cmp = ($call2|0)<(0);
	   if ($cmp) {
	    $c$addr$0 = -1;
	   } else {
	    $cmp58 = ($call2|0)>(0);
	    if ($cmp58) {
	     $i$09 = 0;
	     while(1) {
	      $arrayidx = (($mbc) + ($i$09)|0);
	      $0 = HEAP8[$arrayidx>>0]|0;
	      $conv = $0 << 24 >> 24;
	      $call6 = (_fputc(($conv|0),($f|0))|0);
	      $cmp7 = ($call6|0)==(-1);
	      $inc = (($i$09) + 1)|0;
	      if ($cmp7) {
	       $c$addr$0 = -1;
	       break L1;
	      }
	      $cmp5 = ($inc|0)<($call2|0);
	      if ($cmp5) {
	       $i$09 = $inc;
	      } else {
	       $c$addr$0 = $c;
	       break;
	      }
	     }
	    } else {
	     $c$addr$0 = $c;
	    }
	   }
	  }
	 } while(0);
	 STACKTOP = sp;return ($c$addr$0|0);
	}
	function _fputwc($c,$f) {
	 $c = $c|0;
	 $f = $f|0;
	 var $0 = 0, $arrayidx$i = 0, $c$addr$0$i = 0, $call1$i = 0, $call2$i = 0, $call6$i = 0, $cmp$i = 0, $cmp5$i = 0, $cmp58$i = 0, $cmp7$i = 0, $conv$i = 0, $i$09$i = 0, $inc$i = 0, $isascii$i = 0, $mbc$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $mbc$i = sp;
	 $isascii$i = ($c>>>0)<(128);
	 L1: do {
	  if ($isascii$i) {
	   $call1$i = (_fputc(($c|0),($f|0))|0);
	   $c$addr$0$i = $call1$i;
	  } else {
	   $call2$i = (_wctomb($mbc$i,$c)|0);
	   $cmp$i = ($call2$i|0)<(0);
	   if ($cmp$i) {
	    $c$addr$0$i = -1;
	   } else {
	    $cmp58$i = ($call2$i|0)>(0);
	    if ($cmp58$i) {
	     $i$09$i = 0;
	     while(1) {
	      $arrayidx$i = (($mbc$i) + ($i$09$i)|0);
	      $0 = HEAP8[$arrayidx$i>>0]|0;
	      $conv$i = $0 << 24 >> 24;
	      $call6$i = (_fputc(($conv$i|0),($f|0))|0);
	      $cmp7$i = ($call6$i|0)==(-1);
	      $inc$i = (($i$09$i) + 1)|0;
	      if ($cmp7$i) {
	       $c$addr$0$i = -1;
	       break L1;
	      }
	      $cmp5$i = ($inc$i|0)<($call2$i|0);
	      if ($cmp5$i) {
	       $i$09$i = $inc$i;
	      } else {
	       $c$addr$0$i = $c;
	       break;
	      }
	     }
	    } else {
	     $c$addr$0$i = $c;
	    }
	   }
	  }
	 } while(0);
	 STACKTOP = sp;return ($c$addr$0$i|0);
	}
	function _fputws($ws,$f) {
	 $ws = $ws|0;
	 $f = $f|0;
	 var $$pre = 0, $0 = 0, $add = 0, $buf = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp3 = 0, $l$0 = 0, $retval$0 = 0, $tobool = 0, $ws$addr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ws$addr = sp;
	 $buf = sp + 8|0;
	 HEAP32[$ws$addr>>2] = $ws;
	 $0 = $ws;$l$0 = 0;
	 while(1) {
	  $tobool = ($0|0)==(0|0);
	  if ($tobool) {
	   $retval$0 = $l$0;
	   break;
	  }
	  $call = (_wcsrtombs($buf,$ws$addr,1024,0)|0);
	  $add = (($call) + 1)|0;
	  $cmp = ($add>>>0)>(1);
	  if (!($cmp)) {
	   $retval$0 = $call;
	   break;
	  }
	  $call2 = (_fwrite(($buf|0),1,($call|0),($f|0))|0);
	  $cmp3 = ($call2>>>0)<($call>>>0);
	  if ($cmp3) {
	   $retval$0 = -1;
	   break;
	  }
	  $$pre = HEAP32[$ws$addr>>2]|0;
	  $0 = $$pre;$l$0 = $call;
	 }
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _sscanf($s,$fmt,$varargs) {
	 $s = $s|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 $call = (_vsscanf($s,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _vasprintf($s,$fmt,$ap) {
	 $s = $s|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $add = 0, $add10 = 0, $ap2 = 0, $call = 0, $call11 = 0, $call16 = 0, $call2 = 0, $call6 = 0, $cmp = 0, $cmp9 = 0, $cond = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool7 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap2 = sp;
	 $call = (_malloc(240)|0);
	 $tobool = ($call|0)==(0|0);
	 do {
	  if ($tobool) {
	   $retval$0 = -1;
	  } else {
	   $vacopy_currentptr = HEAP32[$ap>>2]|0;
	   HEAP32[$ap2>>2] = $vacopy_currentptr;
	   $call2 = (_vsnprintf($call,240,$fmt,$ap2)|0);
	   $cmp = ($call2>>>0)<(240);
	   if ($cmp) {
	    $add = (($call2) + 1)|0;
	    $call6 = (_realloc($call,$add)|0);
	    $tobool7 = ($call6|0)!=(0|0);
	    $cond = $tobool7 ? $call6 : $call;
	    HEAP32[$s>>2] = $cond;
	    $retval$0 = $call2;
	    break;
	   }
	   _free($call);
	   $cmp9 = ($call2|0)<(0);
	   if ($cmp9) {
	    $retval$0 = -1;
	   } else {
	    $add10 = (($call2) + 1)|0;
	    $call11 = (_malloc($add10)|0);
	    HEAP32[$s>>2] = $call11;
	    $tobool12 = ($call11|0)==(0|0);
	    if ($tobool12) {
	     $retval$0 = -1;
	    } else {
	     $call16 = (_vsnprintf($call11,$add10,$fmt,$ap)|0);
	     $retval$0 = $call16;
	    }
	   }
	  }
	 } while(0);
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _MUSL_vfscanf($f,$fmt,$ap) {
	 $f = $f|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $$ = 0, $$198 = 0, $$compoundliteral$sroa$1$4$idx3 = 0, $$compoundliteral322 = 0, $$lcssa214 = 0, $$pre = 0, $$pre421 = 0, $$pre422 = 0, $$pre423 = 0, $$pre424 = 0, $$pre425 = 0, $$pre426 = 0, $$pre427 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
	 var $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
	 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
	 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
	 var $add = 0, $add$ptr = 0, $add$ptr80 = 0, $add167 = 0, $add168 = 0, $add23 = 0, $add271 = 0, $add280 = 0, $add289 = 0, $add289$ = 0, $add318 = 0, $add318$us = 0, $add318$us247 = 0, $add339343 = 0, $add371 = 0, $add382342 = 0, $add407 = 0, $add429 = 0, $add450 = 0, $add538 = 0;
	 var $add539 = 0, $add90 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $and = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $arrayidx = 0, $arrayidx204 = 0, $arrayidx209 = 0, $arrayidx228 = 0, $arrayidx237 = 0, $arrayidx252 = 0, $arrayidx262 = 0, $arrayidx27 = 0, $arrayidx272 = 0;
	 var $arrayidx281 = 0, $arrayidx319 = 0, $arrayidx319$us = 0, $arrayidx319$us248 = 0, $arrayidx331 = 0, $arrayidx331$us256 = 0, $arrayidx372 = 0, $arrayidx377 = 0, $arrayidx408 = 0, $arrayidx413 = 0, $arrayidx430 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx73 = 0, $base$0 = 0, $c$0225 = 0, $call = 0, $call10 = 0, $call11 = 0, $call147 = 0;
	 var $call150 = 0, $call179 = 0, $call299 = 0, $call3 = 0, $call315 = 0, $call315$us = 0, $call315$us241 = 0, $call324 = 0, $call324$us = 0, $call324$us252 = 0, $call341 = 0, $call347 = 0, $call354 = 0, $call368 = 0, $call385 = 0, $call404 = 0, $call426 = 0, $call44 = 0, $call512 = 0.0, $cmp = 0;
	 var $cmp$i = 0, $cmp105 = 0, $cmp113 = 0, $cmp125 = 0, $cmp130 = 0, $cmp140 = 0, $cmp172 = 0, $cmp182 = 0, $cmp194 = 0, $cmp194$not = 0, $cmp197 = 0, $cmp214 = 0, $cmp25 = 0, $cmp266 = 0, $cmp266224 = 0, $cmp293 = 0, $cmp308 = 0, $cmp308$us = 0, $cmp308$us262 = 0, $cmp335$us = 0;
	 var $cmp335$us259 = 0, $cmp361 = 0, $cmp37 = 0, $cmp378 = 0, $cmp397 = 0, $cmp419 = 0, $cmp464 = 0, $cmp48 = 0, $cmp503 = 0, $cmp58 = 0, $cmp75 = 0, $cmp94 = 0, $cond = 0, $cond149 = 0, $cond317 = 0, $cond317$us = 0, $cond317$us246 = 0, $cond370 = 0, $cond406 = 0, $cond428 = 0;
	 var $cond46 = 0, $conv = 0, $conv$i201 = 0, $conv103 = 0, $conv124 = 0, $conv145 = 0, $conv2 = 0, $conv2$i203 = 0, $conv227 = 0, $conv236 = 0, $conv263 = 0, $conv265 = 0, $conv278$pre = 0, $conv278$pre$phiZ2D = 0, $conv279 = 0, $conv28 = 0, $conv313 = 0, $conv313$us = 0, $conv313$us244 = 0, $conv323 = 0;
	 var $conv323$us = 0, $conv323$us251 = 0, $conv34 = 0, $conv366 = 0, $conv375 = 0, $conv402 = 0, $conv411 = 0, $conv42 = 0, $conv424 = 0, $conv47 = 0, $conv526 = 0.0, $conv85 = 0, $conv85215 = 0, $conv85220 = 0, $conv9 = 0, $dec = 0, $dec$i = 0, $dec$matches$0 = 0, $dest$0 = 0, $factor = 0;
	 var $factor213 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph233 = 0, $i$0$ph233$lcssa = 0, $i$0$ph233$us239 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc330 = 0, $inc330$us255 = 0, $inc376 = 0, $inc412 = 0, $inc542 = 0, $incdec$ptr102 = 0, $incdec$ptr108 = 0;
	 var $incdec$ptr108$incdec$ptr102 = 0, $incdec$ptr116 = 0, $incdec$ptr116$incdec$ptr102 = 0, $incdec$ptr144 = 0, $incdec$ptr158 = 0, $incdec$ptr176 = 0, $incdec$ptr19 = 0, $incdec$ptr190 = 0, $incdec$ptr212 = 0, $incdec$ptr217 = 0, $incdec$ptr225 = 0, $incdec$ptr234 = 0, $incdec$ptr283 = 0, $incdec$ptr312 = 0, $incdec$ptr312$us = 0, $incdec$ptr312$us243 = 0, $incdec$ptr365 = 0, $incdec$ptr401 = 0, $incdec$ptr41 = 0, $incdec$ptr423 = 0;
	 var $incdec$ptr441 = 0, $incdec$ptr545 = 0, $incdec$ptr55 = 0, $incdec$ptr69 = 0, $incdec$ptr8 = 0, $incdec$ptr92 = 0, $incdec$ptr99 = 0, $invert$0 = 0, $isdigit = 0, $isdigit193 = 0, $isdigit193217 = 0, $isdigittmp = 0, $isdigittmp192 = 0, $isdigittmp192216 = 0, $k$0$ph = 0, $k$1$ph = 0, $lnot$ext = 0, $matches$0$inc542 = 0, $matches$0334 = 0, $matches$1 = 0;
	 var $matches$2 = 0, $matches$3 = 0, $mul = 0, $mul298 = 0, $mul340 = 0, $not$tobool540 = 0, $or = 0, $or$cond$us = 0, $or$cond196 = 0, $or$cond197 = 0, $or$conv124 = 0, $p$0340 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3218 = 0, $p$4 = 0, $p$5 = 0;
	 var $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0339 = 0, $pos$1 = 0, $pos$2 = 0, $rend163 = 0, $rpos138 = 0, $s$0332 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $scanset = 0, $shcnt161 = 0;
	 var $shend139 = 0, $size$0 = 0, $st = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast164 = 0, $sub$ptr$lhs$cast447 = 0, $sub$ptr$lhs$cast496 = 0, $sub$ptr$lhs$cast516 = 0, $sub$ptr$lhs$cast535 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast165 = 0, $sub$ptr$rhs$cast448 = 0, $sub$ptr$rhs$cast497 = 0, $sub$ptr$rhs$cast517 = 0, $sub$ptr$rhs$cast536 = 0, $sub$ptr$sub = 0, $sub$ptr$sub166 = 0, $sub$ptr$sub449 = 0, $sub$ptr$sub498195 = 0, $sub$ptr$sub518194 = 0;
	 var $sub$ptr$sub537 = 0, $sub91 = 0, $tobool = 0, $tobool$i199 = 0, $tobool1 = 0, $tobool12 = 0, $tobool151 = 0, $tobool155 = 0, $tobool16 = 0, $tobool187 = 0, $tobool296 = 0, $tobool300 = 0, $tobool320 = 0, $tobool320$us = 0, $tobool320$us249 = 0, $tobool328 = 0, $tobool331 = 0, $tobool342 = 0, $tobool348 = 0, $tobool355 = 0;
	 var $tobool373 = 0, $tobool386 = 0, $tobool392 = 0, $tobool4 = 0, $tobool409 = 0, $tobool431 = 0, $tobool438 = 0, $tobool451 = 0, $tobool479 = 0, $tobool483 = 0, $tobool500 = 0, $tobool506 = 0, $tobool52 = 0, $tobool520 = 0, $tobool523 = 0, $tobool548 = 0, $tobool551 = 0, $tobool97 = 0, $vacopy_currentptr = 0, $wc = 0;
	 var $wcs$0333 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph361 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $width$0$lcssa = 0, $width$0219 = 0, $width$1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap2$i = sp + 16|0;
	 $st = sp + 8|0;
	 $scanset = sp + 33|0;
	 $wc = sp;
	 $$compoundliteral322 = sp + 32|0;
	 $0 = HEAP8[$fmt>>0]|0;
	 $tobool331 = ($0<<24>>24)==(0);
	 if ($tobool331) {
	  $matches$3 = 0;
	  STACKTOP = sp;return ($matches$3|0);
	 }
	 $rpos138 = (($f) + 4|0);
	 $shend139 = (($f) + 100|0);
	 $shcnt161 = (($f) + 108|0);
	 $rend163 = (($f) + 8|0);
	 $arrayidx204 = (($scanset) + 10|0);
	 $arrayidx209 = (($scanset) + 33|0);
	 $$compoundliteral$sroa$1$4$idx3 = (($st) + 4|0);
	 $arrayidx228 = (($scanset) + 46|0);
	 $arrayidx237 = (($scanset) + 94|0);
	 $1 = $0;$matches$0334 = 0;$p$0340 = $fmt;$pos$0339 = 0;$s$0332 = 0;$wcs$0333 = 0;
	 L4: while(1) {
	  $conv = $1&255;
	  $call = (_isspace($conv)|0);
	  $tobool1 = ($call|0)==(0);
	  L6: do {
	   if ($tobool1) {
	    $10 = HEAP8[$p$0340>>0]|0;
	    $cmp25 = ($10<<24>>24)==(37);
	    L8: do {
	     if ($cmp25) {
	      $arrayidx27 = (($p$0340) + 1|0);
	      $11 = HEAP8[$arrayidx27>>0]|0;
	      do {
	       if ((($11<<24>>24) == 37)) {
	        break L8;
	       } else if ((($11<<24>>24) == 42)) {
	        $incdec$ptr69 = (($p$0340) + 2|0);
	        $dest$0 = 0;$p$2 = $incdec$ptr69;
	       } else {
	        $conv28 = $11&255;
	        $isdigittmp = (($conv28) + -48)|0;
	        $isdigit = ($isdigittmp>>>0)<(10);
	        if ($isdigit) {
	         $arrayidx73 = (($p$0340) + 2|0);
	         $18 = HEAP8[$arrayidx73>>0]|0;
	         $cmp75 = ($18<<24>>24)==(36);
	         if ($cmp75) {
	          $vacopy_currentptr = HEAP32[$ap>>2]|0;
	          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
	          $i$0$i = $isdigittmp;
	          while(1) {
	           $cmp$i = ($i$0$i>>>0)>(1);
	           $arglist_current = HEAP32[$ap2$i>>2]|0;
	           $19 = HEAP32[$arglist_current>>2]|0;
	           $arglist_next = (($arglist_current) + 4|0);
	           HEAP32[$ap2$i>>2] = $arglist_next;
	           $dec$i = (($i$0$i) + -1)|0;
	           if ($cmp$i) {
	            $i$0$i = $dec$i;
	           } else {
	            break;
	           }
	          }
	          $add$ptr80 = (($p$0340) + 3|0);
	          $dest$0 = $19;$p$2 = $add$ptr80;
	          break;
	         }
	        }
	        $arglist_current2 = HEAP32[$ap>>2]|0;
	        $20 = HEAP32[$arglist_current2>>2]|0;
	        $arglist_next3 = (($arglist_current2) + 4|0);
	        HEAP32[$ap>>2] = $arglist_next3;
	        $dest$0 = $20;$p$2 = $arrayidx27;
	       }
	      } while(0);
	      $21 = HEAP8[$p$2>>0]|0;
	      $conv85215 = $21&255;
	      $isdigittmp192216 = (($conv85215) + -48)|0;
	      $isdigit193217 = ($isdigittmp192216>>>0)<(10);
	      if ($isdigit193217) {
	       $conv85220 = $conv85215;$p$3218 = $p$2;$width$0219 = 0;
	       while(1) {
	        $mul = ($width$0219*10)|0;
	        $add90 = (($mul) + -48)|0;
	        $sub91 = (($add90) + ($conv85220))|0;
	        $incdec$ptr92 = (($p$3218) + 1|0);
	        $22 = HEAP8[$incdec$ptr92>>0]|0;
	        $conv85 = $22&255;
	        $isdigittmp192 = (($conv85) + -48)|0;
	        $isdigit193 = ($isdigittmp192>>>0)<(10);
	        if ($isdigit193) {
	         $conv85220 = $conv85;$p$3218 = $incdec$ptr92;$width$0219 = $sub91;
	        } else {
	         $$lcssa214 = $22;$p$3$lcssa = $incdec$ptr92;$width$0$lcssa = $sub91;
	         break;
	        }
	       }
	      } else {
	       $$lcssa214 = $21;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
	      }
	      $cmp94 = ($$lcssa214<<24>>24)==(109);
	      if ($cmp94) {
	       $tobool97 = ($dest$0|0)!=(0|0);
	       $lnot$ext = $tobool97&1;
	       $incdec$ptr99 = (($p$3$lcssa) + 1|0);
	       $$pre = HEAP8[$incdec$ptr99>>0]|0;
	       $23 = $$pre;$alloc$0 = $lnot$ext;$p$4 = $incdec$ptr99;$s$1 = 0;$wcs$1 = 0;
	      } else {
	       $23 = $$lcssa214;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0332;$wcs$1 = $wcs$0333;
	      }
	      $incdec$ptr102 = (($p$4) + 1|0);
	      $conv103 = $23&255;
	      switch ($conv103|0) {
	      case 104:  {
	       $24 = HEAP8[$incdec$ptr102>>0]|0;
	       $cmp105 = ($24<<24>>24)==(104);
	       $incdec$ptr108 = (($p$4) + 2|0);
	       $incdec$ptr108$incdec$ptr102 = $cmp105 ? $incdec$ptr108 : $incdec$ptr102;
	       $$ = $cmp105 ? -2 : -1;
	       $p$5 = $incdec$ptr108$incdec$ptr102;$size$0 = $$;
	       break;
	      }
	      case 106:  {
	       $p$5 = $incdec$ptr102;$size$0 = 3;
	       break;
	      }
	      case 108:  {
	       $25 = HEAP8[$incdec$ptr102>>0]|0;
	       $cmp113 = ($25<<24>>24)==(108);
	       $incdec$ptr116 = (($p$4) + 2|0);
	       $incdec$ptr116$incdec$ptr102 = $cmp113 ? $incdec$ptr116 : $incdec$ptr102;
	       $$198 = $cmp113 ? 3 : 1;
	       $p$5 = $incdec$ptr116$incdec$ptr102;$size$0 = $$198;
	       break;
	      }
	      case 116: case 122:  {
	       $p$5 = $incdec$ptr102;$size$0 = 1;
	       break;
	      }
	      case 76:  {
	       $p$5 = $incdec$ptr102;$size$0 = 2;
	       break;
	      }
	      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
	       $p$5 = $p$4;$size$0 = 0;
	       break;
	      }
	      default: {
	       $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
	       label = 162;
	       break L4;
	      }
	      }
	      $26 = HEAP8[$p$5>>0]|0;
	      $conv124 = $26&255;
	      $and = $conv124 & 47;
	      $cmp125 = ($and|0)==(3);
	      $or = $conv124 | 32;
	      $or$conv124 = $cmp125 ? $or : $conv124;
	      $$size$0 = $cmp125 ? 1 : $size$0;
	      if ((($or$conv124|0) == 99)) {
	       $cmp130 = ($width$0$lcssa|0)<(1);
	       $$width$0 = $cmp130 ? 1 : $width$0$lcssa;
	       $pos$1 = $pos$0339;$width$1 = $$width$0;
	      } else if ((($or$conv124|0) == 110)) {
	       $27 = ($pos$0339|0)<(0);
	       $28 = $27 << 31 >> 31;
	       $tobool$i199 = ($dest$0|0)==(0|0);
	       if ($tobool$i199) {
	        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
	        break L6;
	       }
	       switch ($$size$0|0) {
	       case -2:  {
	        $conv$i201 = $pos$0339&255;
	        HEAP8[$dest$0>>0] = $conv$i201;
	        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
	        break L6;
	        break;
	       }
	       case -1:  {
	        $conv2$i203 = $pos$0339&65535;
	        HEAP16[$dest$0>>1] = $conv2$i203;
	        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
	        break L6;
	        break;
	       }
	       case 0:  {
	        HEAP32[$dest$0>>2] = $pos$0339;
	        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
	        break L6;
	        break;
	       }
	       case 1:  {
	        HEAP32[$dest$0>>2] = $pos$0339;
	        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
	        break L6;
	        break;
	       }
	       case 3:  {
	        $29 = $dest$0;
	        $30 = $29;
	        HEAP32[$30>>2] = $pos$0339;
	        $31 = (($29) + 4)|0;
	        $32 = $31;
	        HEAP32[$32>>2] = $28;
	        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
	        break L6;
	        break;
	       }
	       default: {
	        $matches$1 = $matches$0334;$p$11 = $p$5;$pos$2 = $pos$0339;$s$5 = $s$1;$wcs$6 = $wcs$1;
	        break L6;
	       }
	       }
	      } else if ((($or$conv124|0) == 91)) {
	       $pos$1 = $pos$0339;$width$1 = $width$0$lcssa;
	      } else {
	       ___shlim($f,0);
	       while(1) {
	        $33 = HEAP32[$rpos138>>2]|0;
	        $34 = HEAP32[$shend139>>2]|0;
	        $cmp140 = ($33>>>0)<($34>>>0);
	        if ($cmp140) {
	         $incdec$ptr144 = (($33) + 1|0);
	         HEAP32[$rpos138>>2] = $incdec$ptr144;
	         $35 = HEAP8[$33>>0]|0;
	         $conv145 = $35&255;
	         $cond149 = $conv145;
	        } else {
	         $call147 = (___shgetc($f)|0);
	         $cond149 = $call147;
	        }
	        $call150 = (_isspace($cond149)|0);
	        $tobool151 = ($call150|0)==(0);
	        if ($tobool151) {
	         break;
	        }
	       }
	       $36 = HEAP32[$shend139>>2]|0;
	       $tobool155 = ($36|0)==(0|0);
	       $$pre422 = HEAP32[$rpos138>>2]|0;
	       if ($tobool155) {
	        $39 = $$pre422;
	       } else {
	        $incdec$ptr158 = (($$pre422) + -1|0);
	        HEAP32[$rpos138>>2] = $incdec$ptr158;
	        $39 = $incdec$ptr158;
	       }
	       $37 = HEAP32[$shcnt161>>2]|0;
	       $38 = HEAP32[$rend163>>2]|0;
	       $sub$ptr$lhs$cast164 = $39;
	       $sub$ptr$rhs$cast165 = $38;
	       $sub$ptr$sub166 = (($37) + ($pos$0339))|0;
	       $add167 = (($sub$ptr$sub166) + ($sub$ptr$lhs$cast164))|0;
	       $add168 = (($add167) - ($sub$ptr$rhs$cast165))|0;
	       $pos$1 = $add168;$width$1 = $width$0$lcssa;
	      }
	      ___shlim($f,$width$1);
	      $40 = HEAP32[$rpos138>>2]|0;
	      $41 = HEAP32[$shend139>>2]|0;
	      $cmp172 = ($40>>>0)<($41>>>0);
	      if ($cmp172) {
	       $incdec$ptr176 = (($40) + 1|0);
	       HEAP32[$rpos138>>2] = $incdec$ptr176;
	       $42 = $41;
	      } else {
	       $call179 = (___shgetc($f)|0);
	       $cmp182 = ($call179|0)<(0);
	       if ($cmp182) {
	        $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
	        label = 162;
	        break L4;
	       }
	       $$pre423 = HEAP32[$shend139>>2]|0;
	       $42 = $$pre423;
	      }
	      $tobool187 = ($42|0)==(0|0);
	      if (!($tobool187)) {
	       $43 = HEAP32[$rpos138>>2]|0;
	       $incdec$ptr190 = (($43) + -1|0);
	       HEAP32[$rpos138>>2] = $incdec$ptr190;
	      }
	      L65: do {
	       switch ($or$conv124|0) {
	       case 91: case 99: case 115:  {
	        $cmp194 = ($or$conv124|0)==(99);
	        $44 = $or$conv124 & 239;
	        $45 = ($44|0)==(99);
	        L67: do {
	         if ($45) {
	          $cmp197 = ($or$conv124|0)==(115);
	          _memset(($scanset|0),-1,257)|0;
	          HEAP8[$scanset>>0] = 0;
	          if ($cmp197) {
	           HEAP8[$arrayidx209>>0] = 0;
	           ;HEAP8[$arrayidx204+0>>0]=0|0;HEAP8[$arrayidx204+1>>0]=0|0;HEAP8[$arrayidx204+2>>0]=0|0;HEAP8[$arrayidx204+3>>0]=0|0;HEAP8[$arrayidx204+4>>0]=0|0;
	           $p$9 = $p$5;
	          } else {
	           $p$9 = $p$5;
	          }
	         } else {
	          $incdec$ptr212 = (($p$5) + 1|0);
	          $46 = HEAP8[$incdec$ptr212>>0]|0;
	          $cmp214 = ($46<<24>>24)==(94);
	          $incdec$ptr217 = (($p$5) + 2|0);
	          $invert$0 = $cmp214&1;
	          $p$6 = $cmp214 ? $incdec$ptr217 : $incdec$ptr212;
	          $47 = $cmp214&1;
	          _memset(($scanset|0),($47|0),257)|0;
	          HEAP8[$scanset>>0] = 0;
	          $48 = HEAP8[$p$6>>0]|0;
	          if ((($48<<24>>24) == 45)) {
	           $incdec$ptr225 = (($p$6) + 1|0);
	           $49 = $invert$0 ^ 1;
	           $conv227 = $49&255;
	           HEAP8[$arrayidx228>>0] = $conv227;
	           $conv278$pre$phiZ2D = $conv227;$p$7$ph = $incdec$ptr225;
	          } else if ((($48<<24>>24) == 93)) {
	           $incdec$ptr234 = (($p$6) + 1|0);
	           $50 = $invert$0 ^ 1;
	           $conv236 = $50&255;
	           HEAP8[$arrayidx237>>0] = $conv236;
	           $conv278$pre$phiZ2D = $conv236;$p$7$ph = $incdec$ptr234;
	          } else {
	           $$pre427 = $invert$0 ^ 1;
	           $conv278$pre = $$pre427&255;
	           $conv278$pre$phiZ2D = $conv278$pre;$p$7$ph = $p$6;
	          }
	          $p$7 = $p$7$ph;
	          while(1) {
	           $51 = HEAP8[$p$7>>0]|0;
	           if ((($51<<24>>24) == 45)) {
	            $arrayidx252 = (($p$7) + 1|0);
	            $52 = HEAP8[$arrayidx252>>0]|0;
	            if ((($52<<24>>24) == 93) | (($52<<24>>24) == 0)) {
	             $55 = 45;$p$8 = $p$7;
	            } else {
	             $arrayidx262 = (($p$7) + -1|0);
	             $53 = HEAP8[$arrayidx262>>0]|0;
	             $cmp266224 = ($53&255)<($52&255);
	             if ($cmp266224) {
	              $conv263 = $53&255;
	              $c$0225 = $conv263;
	              while(1) {
	               $add271 = (($c$0225) + 1)|0;
	               $arrayidx272 = (($scanset) + ($add271)|0);
	               HEAP8[$arrayidx272>>0] = $conv278$pre$phiZ2D;
	               $54 = HEAP8[$arrayidx252>>0]|0;
	               $conv265 = $54&255;
	               $cmp266 = ($add271|0)<($conv265|0);
	               if ($cmp266) {
	                $c$0225 = $add271;
	               } else {
	                $55 = $54;$p$8 = $arrayidx252;
	                break;
	               }
	              }
	             } else {
	              $55 = $52;$p$8 = $arrayidx252;
	             }
	            }
	           } else if ((($51<<24>>24) == 93)) {
	            $p$9 = $p$7;
	            break L67;
	           } else if ((($51<<24>>24) == 0)) {
	            $alloc$1 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
	            label = 162;
	            break L4;
	           } else {
	            $55 = $51;$p$8 = $p$7;
	           }
	           $conv279 = $55&255;
	           $add280 = (($conv279) + 1)|0;
	           $arrayidx281 = (($scanset) + ($add280)|0);
	           HEAP8[$arrayidx281>>0] = $conv278$pre$phiZ2D;
	           $incdec$ptr283 = (($p$8) + 1|0);
	           $p$7 = $incdec$ptr283;
	          }
	         }
	        } while(0);
	        $add289 = (($width$1) + 1)|0;
	        $add289$ = $cmp194 ? $add289 : 31;
	        $cmp293 = ($$size$0|0)==(1);
	        $tobool296 = ($alloc$0|0)!=(0);
	        L86: do {
	         if ($cmp293) {
	          if ($tobool296) {
	           $mul298 = $add289$ << 2;
	           $call299 = (_malloc($mul298)|0);
	           $tobool300 = ($call299|0)==(0|0);
	           if ($tobool300) {
	            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $call299;
	            label = 162;
	            break L4;
	           } else {
	            $wcs$2 = $call299;
	           }
	          } else {
	           $wcs$2 = $dest$0;
	          }
	          HEAP32[$st>>2] = 0;
	          HEAP32[$$compoundliteral$sroa$1$4$idx3>>2] = 0;
	          $i$0$ph = 0;$k$0$ph = $add289$;$wcs$3$ph = $wcs$2;
	          L121: while(1) {
	           $tobool328 = ($wcs$3$ph|0)==(0|0);
	           if ($tobool328) {
	            while(1) {
	             $56 = HEAP32[$rpos138>>2]|0;
	             $59 = HEAP32[$shend139>>2]|0;
	             $cmp308$us = ($56>>>0)<($59>>>0);
	             if ($cmp308$us) {
	              $incdec$ptr312$us = (($56) + 1|0);
	              HEAP32[$rpos138>>2] = $incdec$ptr312$us;
	              $57 = HEAP8[$56>>0]|0;
	              $conv313$us = $57&255;
	              $cond317$us = $conv313$us;
	             } else {
	              $call315$us = (___shgetc($f)|0);
	              $cond317$us = $call315$us;
	             }
	             $add318$us = (($cond317$us) + 1)|0;
	             $arrayidx319$us = (($scanset) + ($add318$us)|0);
	             $58 = HEAP8[$arrayidx319$us>>0]|0;
	             $tobool320$us = ($58<<24>>24)==(0);
	             if ($tobool320$us) {
	              $i$0$ph233$lcssa = $i$0$ph;$wcs$3$ph361 = 0;
	              break L121;
	             }
	             $conv323$us = $cond317$us&255;
	             HEAP8[$$compoundliteral322>>0] = $conv323$us;
	             $call324$us = (_mbrtowc($wc,$$compoundliteral322,1,$st)|0);
	             if ((($call324$us|0) == -2)) {
	              continue;
	             } else if ((($call324$us|0) == -1)) {
	              $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
	              label = 162;
	              break L4;
	             }
	             $cmp335$us = ($i$0$ph|0)==($k$0$ph|0);
	             $or$cond$us = $tobool296 & $cmp335$us;
	             if ($or$cond$us) {
	              $i$1$lcssa = $i$0$ph;
	              break;
	             }
	            }
	           } else {
	            if ($tobool296) {
	             $i$0$ph233$us239 = $i$0$ph;
	            } else {
	             $i$0$ph233 = $i$0$ph;
	             label = 98;
	             break;
	            }
	            while(1) {
	             while(1) {
	              $60 = HEAP32[$rpos138>>2]|0;
	              $64 = HEAP32[$shend139>>2]|0;
	              $cmp308$us262 = ($60>>>0)<($64>>>0);
	              if ($cmp308$us262) {
	               $incdec$ptr312$us243 = (($60) + 1|0);
	               HEAP32[$rpos138>>2] = $incdec$ptr312$us243;
	               $61 = HEAP8[$60>>0]|0;
	               $conv313$us244 = $61&255;
	               $cond317$us246 = $conv313$us244;
	              } else {
	               $call315$us241 = (___shgetc($f)|0);
	               $cond317$us246 = $call315$us241;
	              }
	              $add318$us247 = (($cond317$us246) + 1)|0;
	              $arrayidx319$us248 = (($scanset) + ($add318$us247)|0);
	              $62 = HEAP8[$arrayidx319$us248>>0]|0;
	              $tobool320$us249 = ($62<<24>>24)==(0);
	              if ($tobool320$us249) {
	               $i$0$ph233$lcssa = $i$0$ph233$us239;$wcs$3$ph361 = $wcs$3$ph;
	               break L121;
	              }
	              $conv323$us251 = $cond317$us246&255;
	              HEAP8[$$compoundliteral322>>0] = $conv323$us251;
	              $call324$us252 = (_mbrtowc($wc,$$compoundliteral322,1,$st)|0);
	              if ((($call324$us252|0) == -1)) {
	               $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
	               label = 162;
	               break L4;
	              } else if (!((($call324$us252|0) == -2))) {
	               break;
	              }
	             }
	             $63 = HEAP32[$wc>>2]|0;
	             $inc330$us255 = (($i$0$ph233$us239) + 1)|0;
	             $arrayidx331$us256 = (($wcs$3$ph) + ($i$0$ph233$us239<<2)|0);
	             HEAP32[$arrayidx331$us256>>2] = $63;
	             $cmp335$us259 = ($inc330$us255|0)==($k$0$ph|0);
	             if ($cmp335$us259) {
	              $i$1$lcssa = $k$0$ph;
	              break;
	             } else {
	              $i$0$ph233$us239 = $inc330$us255;
	             }
	            }
	           }
	           $factor = $k$0$ph << 1;
	           $add339343 = $factor | 1;
	           $mul340 = $add339343 << 2;
	           $call341 = (_realloc($wcs$3$ph,$mul340)|0);
	           $tobool342 = ($call341|0)==(0|0);
	           if ($tobool342) {
	            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
	            label = 162;
	            break L4;
	           }
	           $i$0$ph = $i$1$lcssa;$k$0$ph = $add339343;$wcs$3$ph = $call341;
	          }
	          L145: do {
	           if ((label|0) == 98) {
	            while(1) {
	             label = 0;
	             while(1) {
	              $65 = HEAP32[$rpos138>>2]|0;
	              $66 = HEAP32[$shend139>>2]|0;
	              $cmp308 = ($65>>>0)<($66>>>0);
	              if ($cmp308) {
	               $incdec$ptr312 = (($65) + 1|0);
	               HEAP32[$rpos138>>2] = $incdec$ptr312;
	               $67 = HEAP8[$65>>0]|0;
	               $conv313 = $67&255;
	               $cond317 = $conv313;
	              } else {
	               $call315 = (___shgetc($f)|0);
	               $cond317 = $call315;
	              }
	              $add318 = (($cond317) + 1)|0;
	              $arrayidx319 = (($scanset) + ($add318)|0);
	              $68 = HEAP8[$arrayidx319>>0]|0;
	              $tobool320 = ($68<<24>>24)==(0);
	              if ($tobool320) {
	               $i$0$ph233$lcssa = $i$0$ph233;$wcs$3$ph361 = $wcs$3$ph;
	               break L145;
	              }
	              $conv323 = $cond317&255;
	              HEAP8[$$compoundliteral322>>0] = $conv323;
	              $call324 = (_mbrtowc($wc,$$compoundliteral322,1,$st)|0);
	              if ((($call324|0) == -1)) {
	               $alloc$1 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
	               label = 162;
	               break L4;
	              } else if (!((($call324|0) == -2))) {
	               break;
	              }
	             }
	             $69 = HEAP32[$wc>>2]|0;
	             $inc330 = (($i$0$ph233) + 1)|0;
	             $arrayidx331 = (($wcs$3$ph) + ($i$0$ph233<<2)|0);
	             HEAP32[$arrayidx331>>2] = $69;
	             $i$0$ph233 = $inc330;
	             label = 98;
	            }
	           }
	          } while(0);
	          $call347 = (_mbsinit($st)|0);
	          $tobool348 = ($call347|0)==(0);
	          if ($tobool348) {
	           $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph361;
	           label = 162;
	           break L4;
	          } else {
	           $i$4 = $i$0$ph233$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph361;
	          }
	         } else {
	          if ($tobool296) {
	           $call354 = (_malloc($add289$)|0);
	           $tobool355 = ($call354|0)==(0|0);
	           if ($tobool355) {
	            $alloc$1 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
	            label = 162;
	            break L4;
	           } else {
	            $i$2$ph = 0;$k$1$ph = $add289$;$s$2$ph = $call354;
	           }
	           while(1) {
	            $i$2 = $i$2$ph;
	            while(1) {
	             $70 = HEAP32[$rpos138>>2]|0;
	             $71 = HEAP32[$shend139>>2]|0;
	             $cmp361 = ($70>>>0)<($71>>>0);
	             if ($cmp361) {
	              $incdec$ptr365 = (($70) + 1|0);
	              HEAP32[$rpos138>>2] = $incdec$ptr365;
	              $72 = HEAP8[$70>>0]|0;
	              $conv366 = $72&255;
	              $cond370 = $conv366;
	             } else {
	              $call368 = (___shgetc($f)|0);
	              $cond370 = $call368;
	             }
	             $add371 = (($cond370) + 1)|0;
	             $arrayidx372 = (($scanset) + ($add371)|0);
	             $73 = HEAP8[$arrayidx372>>0]|0;
	             $tobool373 = ($73<<24>>24)==(0);
	             if ($tobool373) {
	              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
	              break L86;
	             }
	             $conv375 = $cond370&255;
	             $inc376 = (($i$2) + 1)|0;
	             $arrayidx377 = (($s$2$ph) + ($i$2)|0);
	             HEAP8[$arrayidx377>>0] = $conv375;
	             $cmp378 = ($inc376|0)==($k$1$ph|0);
	             if ($cmp378) {
	              break;
	             } else {
	              $i$2 = $inc376;
	             }
	            }
	            $factor213 = $k$1$ph << 1;
	            $add382342 = $factor213 | 1;
	            $call385 = (_realloc($s$2$ph,$add382342)|0);
	            $tobool386 = ($call385|0)==(0|0);
	            if ($tobool386) {
	             $alloc$1 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
	             label = 162;
	             break L4;
	            } else {
	             $i$2$ph$phi = $k$1$ph;$k$1$ph = $add382342;$s$2$ph = $call385;$i$2$ph = $i$2$ph$phi;
	            }
	           }
	          }
	          $tobool392 = ($dest$0|0)==(0|0);
	          if ($tobool392) {
	           $79 = $42;
	           while(1) {
	            $78 = HEAP32[$rpos138>>2]|0;
	            $cmp419 = ($78>>>0)<($79>>>0);
	            if ($cmp419) {
	             $incdec$ptr423 = (($78) + 1|0);
	             HEAP32[$rpos138>>2] = $incdec$ptr423;
	             $80 = HEAP8[$78>>0]|0;
	             $conv424 = $80&255;
	             $cond428 = $conv424;
	            } else {
	             $call426 = (___shgetc($f)|0);
	             $cond428 = $call426;
	            }
	            $add429 = (($cond428) + 1)|0;
	            $arrayidx430 = (($scanset) + ($add429)|0);
	            $81 = HEAP8[$arrayidx430>>0]|0;
	            $tobool431 = ($81<<24>>24)==(0);
	            if ($tobool431) {
	             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
	             break L86;
	            }
	            $$pre425 = HEAP32[$shend139>>2]|0;
	            $79 = $$pre425;
	           }
	          } else {
	           $75 = $42;$i$3 = 0;
	           while(1) {
	            $74 = HEAP32[$rpos138>>2]|0;
	            $cmp397 = ($74>>>0)<($75>>>0);
	            if ($cmp397) {
	             $incdec$ptr401 = (($74) + 1|0);
	             HEAP32[$rpos138>>2] = $incdec$ptr401;
	             $76 = HEAP8[$74>>0]|0;
	             $conv402 = $76&255;
	             $cond406 = $conv402;
	            } else {
	             $call404 = (___shgetc($f)|0);
	             $cond406 = $call404;
	            }
	            $add407 = (($cond406) + 1)|0;
	            $arrayidx408 = (($scanset) + ($add407)|0);
	            $77 = HEAP8[$arrayidx408>>0]|0;
	            $tobool409 = ($77<<24>>24)==(0);
	            if ($tobool409) {
	             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
	             break L86;
	            }
	            $conv411 = $cond406&255;
	            $inc412 = (($i$3) + 1)|0;
	            $arrayidx413 = (($dest$0) + ($i$3)|0);
	            HEAP8[$arrayidx413>>0] = $conv411;
	            $$pre421 = HEAP32[$shend139>>2]|0;
	            $75 = $$pre421;$i$3 = $inc412;
	           }
	          }
	         }
	        } while(0);
	        $82 = HEAP32[$shend139>>2]|0;
	        $tobool438 = ($82|0)==(0|0);
	        $$pre424 = HEAP32[$rpos138>>2]|0;
	        if ($tobool438) {
	         $85 = $$pre424;
	        } else {
	         $incdec$ptr441 = (($$pre424) + -1|0);
	         HEAP32[$rpos138>>2] = $incdec$ptr441;
	         $85 = $incdec$ptr441;
	        }
	        $83 = HEAP32[$shcnt161>>2]|0;
	        $84 = HEAP32[$rend163>>2]|0;
	        $sub$ptr$lhs$cast447 = $85;
	        $sub$ptr$rhs$cast448 = $84;
	        $sub$ptr$sub449 = (($sub$ptr$lhs$cast447) - ($sub$ptr$rhs$cast448))|0;
	        $add450 = (($sub$ptr$sub449) + ($83))|0;
	        $tobool451 = ($add450|0)==(0);
	        if ($tobool451) {
	         $alloc$2 = $alloc$0;$matches$2 = $matches$0334;$s$7 = $s$3;$wcs$8 = $wcs$4;
	         break L4;
	        }
	        $cmp194$not = $cmp194 ^ 1;
	        $cmp464 = ($add450|0)==($width$1|0);
	        $or$cond196 = $cmp464 | $cmp194$not;
	        if (!($or$cond196)) {
	         $alloc$2 = $alloc$0;$matches$2 = $matches$0334;$s$7 = $s$3;$wcs$8 = $wcs$4;
	         break L4;
	        }
	        do {
	         if ($tobool296) {
	          if ($cmp293) {
	           HEAP32[$dest$0>>2] = $wcs$4;
	           break;
	          } else {
	           HEAP32[$dest$0>>2] = $s$3;
	           break;
	          }
	         }
	        } while(0);
	        if ($cmp194) {
	         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
	        } else {
	         $tobool479 = ($wcs$4|0)==(0|0);
	         if (!($tobool479)) {
	          $arrayidx481 = (($wcs$4) + ($i$4<<2)|0);
	          HEAP32[$arrayidx481>>2] = 0;
	         }
	         $tobool483 = ($s$3|0)==(0|0);
	         if ($tobool483) {
	          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
	         } else {
	          $arrayidx485 = (($s$3) + ($i$4)|0);
	          HEAP8[$arrayidx485>>0] = 0;
	          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
	         }
	        }
	        break;
	       }
	       case 111:  {
	        $base$0 = 8;
	        label = 144;
	        break;
	       }
	       case 117: case 100:  {
	        $base$0 = 10;
	        label = 144;
	        break;
	       }
	       case 105:  {
	        $base$0 = 0;
	        label = 144;
	        break;
	       }
	       case 120: case 88: case 112:  {
	        $base$0 = 16;
	        label = 144;
	        break;
	       }
	       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
	        $call512 = (+___floatscan($f,$$size$0,0));
	        $98 = HEAP32[$shcnt161>>2]|0;
	        $99 = HEAP32[$rpos138>>2]|0;
	        $100 = HEAP32[$rend163>>2]|0;
	        $sub$ptr$lhs$cast516 = $99;
	        $sub$ptr$rhs$cast517 = $100;
	        $sub$ptr$sub518194 = (($sub$ptr$rhs$cast517) - ($sub$ptr$lhs$cast516))|0;
	        $tobool520 = ($98|0)==($sub$ptr$sub518194|0);
	        if ($tobool520) {
	         $alloc$2 = $alloc$0;$matches$2 = $matches$0334;$s$7 = $s$1;$wcs$8 = $wcs$1;
	         break L4;
	        }
	        $tobool523 = ($dest$0|0)==(0|0);
	        if ($tobool523) {
	         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	        } else {
	         if ((($$size$0|0) == 0)) {
	          $conv526 = $call512;
	          HEAPF32[$dest$0>>2] = $conv526;
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L65;
	         } else if ((($$size$0|0) == 1)) {
	          HEAPF64[$dest$0>>3] = $call512;
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L65;
	         } else if ((($$size$0|0) == 2)) {
	          HEAPF64[$dest$0>>3] = $call512;
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L65;
	         } else {
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L65;
	         }
	        }
	        break;
	       }
	       default: {
	        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	       }
	       }
	      } while(0);
	      L184: do {
	       if ((label|0) == 144) {
	        label = 0;
	        $86 = (___intscan($f,$base$0,0,-1,-1)|0);
	        $87 = tempRet0;
	        $88 = HEAP32[$shcnt161>>2]|0;
	        $89 = HEAP32[$rpos138>>2]|0;
	        $90 = HEAP32[$rend163>>2]|0;
	        $sub$ptr$lhs$cast496 = $89;
	        $sub$ptr$rhs$cast497 = $90;
	        $sub$ptr$sub498195 = (($sub$ptr$rhs$cast497) - ($sub$ptr$lhs$cast496))|0;
	        $tobool500 = ($88|0)==($sub$ptr$sub498195|0);
	        if ($tobool500) {
	         $alloc$2 = $alloc$0;$matches$2 = $matches$0334;$s$7 = $s$1;$wcs$8 = $wcs$1;
	         break L4;
	        }
	        $cmp503 = ($or$conv124|0)!=(112);
	        $tobool506 = ($dest$0|0)==(0|0);
	        $or$cond197 = $cmp503 | $tobool506;
	        if (!($or$cond197)) {
	         $91 = $86;
	         HEAP32[$dest$0>>2] = $91;
	         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	         break;
	        }
	        if ($tobool506) {
	         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	        } else {
	         switch ($$size$0|0) {
	         case -2:  {
	          $92 = $86&255;
	          HEAP8[$dest$0>>0] = $92;
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L184;
	          break;
	         }
	         case -1:  {
	          $93 = $86&65535;
	          HEAP16[$dest$0>>1] = $93;
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L184;
	          break;
	         }
	         case 0:  {
	          HEAP32[$dest$0>>2] = $86;
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L184;
	          break;
	         }
	         case 1:  {
	          HEAP32[$dest$0>>2] = $86;
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L184;
	          break;
	         }
	         case 3:  {
	          $94 = $dest$0;
	          $95 = $94;
	          HEAP32[$95>>2] = $86;
	          $96 = (($94) + 4)|0;
	          $97 = $96;
	          HEAP32[$97>>2] = $87;
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L184;
	          break;
	         }
	         default: {
	          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
	          break L184;
	         }
	         }
	        }
	       }
	      } while(0);
	      $101 = HEAP32[$shcnt161>>2]|0;
	      $102 = HEAP32[$rpos138>>2]|0;
	      $103 = HEAP32[$rend163>>2]|0;
	      $sub$ptr$lhs$cast535 = $102;
	      $sub$ptr$rhs$cast536 = $103;
	      $sub$ptr$sub537 = (($101) + ($pos$1))|0;
	      $add538 = (($sub$ptr$sub537) + ($sub$ptr$lhs$cast535))|0;
	      $add539 = (($add538) - ($sub$ptr$rhs$cast536))|0;
	      $not$tobool540 = ($dest$0|0)!=(0|0);
	      $inc542 = $not$tobool540&1;
	      $matches$0$inc542 = (($inc542) + ($matches$0334))|0;
	      $matches$1 = $matches$0$inc542;$p$11 = $p$10;$pos$2 = $add539;$s$5 = $s$4;$wcs$6 = $wcs$5;
	      break L6;
	     }
	    } while(0);
	    $conv34 = $cmp25&1;
	    $add$ptr = (($p$0340) + ($conv34)|0);
	    ___shlim($f,0);
	    $12 = HEAP32[$rpos138>>2]|0;
	    $13 = HEAP32[$shend139>>2]|0;
	    $cmp37 = ($12>>>0)<($13>>>0);
	    if ($cmp37) {
	     $incdec$ptr41 = (($12) + 1|0);
	     HEAP32[$rpos138>>2] = $incdec$ptr41;
	     $14 = HEAP8[$12>>0]|0;
	     $conv42 = $14&255;
	     $cond46 = $conv42;
	    } else {
	     $call44 = (___shgetc($f)|0);
	     $cond46 = $call44;
	    }
	    $15 = HEAP8[$add$ptr>>0]|0;
	    $conv47 = $15&255;
	    $cmp48 = ($cond46|0)==($conv47|0);
	    if (!($cmp48)) {
	     label = 19;
	     break L4;
	    }
	    $inc = (($pos$0339) + 1)|0;
	    $matches$1 = $matches$0334;$p$11 = $add$ptr;$pos$2 = $inc;$s$5 = $s$0332;$wcs$6 = $wcs$0333;
	   } else {
	    $p$1 = $p$0340;
	    while(1) {
	     $arrayidx = (($p$1) + 1|0);
	     $2 = HEAP8[$arrayidx>>0]|0;
	     $conv2 = $2&255;
	     $call3 = (_isspace($conv2)|0);
	     $tobool4 = ($call3|0)==(0);
	     if ($tobool4) {
	      break;
	     } else {
	      $p$1 = $arrayidx;
	     }
	    }
	    ___shlim($f,0);
	    while(1) {
	     $3 = HEAP32[$rpos138>>2]|0;
	     $4 = HEAP32[$shend139>>2]|0;
	     $cmp = ($3>>>0)<($4>>>0);
	     if ($cmp) {
	      $incdec$ptr8 = (($3) + 1|0);
	      HEAP32[$rpos138>>2] = $incdec$ptr8;
	      $5 = HEAP8[$3>>0]|0;
	      $conv9 = $5&255;
	      $cond = $conv9;
	     } else {
	      $call10 = (___shgetc($f)|0);
	      $cond = $call10;
	     }
	     $call11 = (_isspace($cond)|0);
	     $tobool12 = ($call11|0)==(0);
	     if ($tobool12) {
	      break;
	     }
	    }
	    $6 = HEAP32[$shend139>>2]|0;
	    $tobool16 = ($6|0)==(0|0);
	    $$pre426 = HEAP32[$rpos138>>2]|0;
	    if ($tobool16) {
	     $9 = $$pre426;
	    } else {
	     $incdec$ptr19 = (($$pre426) + -1|0);
	     HEAP32[$rpos138>>2] = $incdec$ptr19;
	     $9 = $incdec$ptr19;
	    }
	    $7 = HEAP32[$shcnt161>>2]|0;
	    $8 = HEAP32[$rend163>>2]|0;
	    $sub$ptr$lhs$cast = $9;
	    $sub$ptr$rhs$cast = $8;
	    $sub$ptr$sub = (($7) + ($pos$0339))|0;
	    $add = (($sub$ptr$sub) + ($sub$ptr$lhs$cast))|0;
	    $add23 = (($add) - ($sub$ptr$rhs$cast))|0;
	    $matches$1 = $matches$0334;$p$11 = $p$1;$pos$2 = $add23;$s$5 = $s$0332;$wcs$6 = $wcs$0333;
	   }
	  } while(0);
	  $incdec$ptr545 = (($p$11) + 1|0);
	  $104 = HEAP8[$incdec$ptr545>>0]|0;
	  $tobool = ($104<<24>>24)==(0);
	  if ($tobool) {
	   $matches$3 = $matches$1;
	   label = 165;
	   break;
	  } else {
	   $1 = $104;$matches$0334 = $matches$1;$p$0340 = $incdec$ptr545;$pos$0339 = $pos$2;$s$0332 = $s$5;$wcs$0333 = $wcs$6;
	  }
	 }
	 if ((label|0) == 165) {
	  STACKTOP = sp;return ($matches$3|0);
	 }
	 if ((label|0) == 19) {
	  $16 = HEAP32[$shend139>>2]|0;
	  $tobool52 = ($16|0)==(0|0);
	  if (!($tobool52)) {
	   $17 = HEAP32[$rpos138>>2]|0;
	   $incdec$ptr55 = (($17) + -1|0);
	   HEAP32[$rpos138>>2] = $incdec$ptr55;
	  }
	  $cmp58 = ($cond46|0)<(0);
	  if ($cmp58) {
	   $alloc$1 = 0;$s$6 = $s$0332;$wcs$7 = $wcs$0333;
	   label = 162;
	  } else {
	   $matches$3 = $matches$0334;
	   STACKTOP = sp;return ($matches$3|0);
	  }
	 }
	 if ((label|0) == 162) {
	  $tobool548 = ($matches$0334|0)==(0);
	  $dec = $tobool548 << 31 >> 31;
	  $dec$matches$0 = (($dec) + ($matches$0334))|0;
	  $alloc$2 = $alloc$1;$matches$2 = $dec$matches$0;$s$7 = $s$6;$wcs$8 = $wcs$7;
	 }
	 $tobool551 = ($alloc$2|0)==(0);
	 if ($tobool551) {
	  $matches$3 = $matches$2;
	  STACKTOP = sp;return ($matches$3|0);
	 }
	 _free($s$7);
	 _free($wcs$8);
	 $matches$3 = $matches$2;
	 STACKTOP = sp;return ($matches$3|0);
	}
	function _vsscanf($s,$fmt,$ap) {
	 $s = $s|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $buf = 0, $call = 0, $cookie = 0, $f = 0, $lock = 0, $read = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f = sp;
	 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 $read = (($f) + 32|0);
	 HEAP32[$read>>2] = 20;
	 $buf = (($f) + 44|0);
	 HEAP32[$buf>>2] = $s;
	 $lock = (($f) + 76|0);
	 HEAP32[$lock>>2] = -1;
	 $cookie = (($f) + 84|0);
	 HEAP32[$cookie>>2] = $s;
	 $call = (_MUSL_vfscanf($f,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _do_read($f,$buf,$len) {
	 $f = $f|0;
	 $buf = $buf|0;
	 $len = $len|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (___string_read($f,$buf,$len)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _atoll($s) {
	 $s = $s|0;
	 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
	 var $call = 0, $call6 = 0, $call67 = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv5 = 0, $conv56 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $neg$0 = 0, $neg$1$ph = 0, $s$addr$0 = 0, $s$addr$1$ph = 0, $s$addr$19 = 0, $sub = 0, $tobool = 0, $tobool14 = 0, $tobool7 = 0, $tobool78 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 $s$addr$0 = $s;
	 while(1) {
	  $0 = HEAP8[$s$addr$0>>0]|0;
	  $conv = $0 << 24 >> 24;
	  $call = (_isspace($conv)|0);
	  $tobool = ($call|0)==(0);
	  $incdec$ptr = (($s$addr$0) + 1|0);
	  if ($tobool) {
	   break;
	  } else {
	   $s$addr$0 = $incdec$ptr;
	  }
	 }
	 $1 = HEAP8[$s$addr$0>>0]|0;
	 $conv1 = $1 << 24 >> 24;
	 if ((($conv1|0) == 43)) {
	  $neg$0 = 0;
	  label = 5;
	 } else if ((($conv1|0) == 45)) {
	  $neg$0 = 1;
	  label = 5;
	 } else {
	  $2 = $1;$neg$1$ph = 0;$s$addr$1$ph = $s$addr$0;
	 }
	 if ((label|0) == 5) {
	  $$pre = HEAP8[$incdec$ptr>>0]|0;
	  $2 = $$pre;$neg$1$ph = $neg$0;$s$addr$1$ph = $incdec$ptr;
	 }
	 $conv56 = $2 << 24 >> 24;
	 $call67 = (_isdigit($conv56)|0);
	 $tobool78 = ($call67|0)==(0);
	 if ($tobool78) {
	  $13 = 0;$14 = 0;
	 } else {
	  $3 = 0;$4 = 0;$s$addr$19 = $s$addr$1$ph;
	  while(1) {
	   $5 = (___muldi3(($3|0),($4|0),10,0)|0);
	   $6 = tempRet0;
	   $incdec$ptr9 = (($s$addr$19) + 1|0);
	   $7 = HEAP8[$s$addr$19>>0]|0;
	   $conv10 = $7 << 24 >> 24;
	   $sub = (($conv10) + -48)|0;
	   $8 = ($sub|0)<(0);
	   $9 = $8 << 31 >> 31;
	   $10 = (_i64Subtract(($5|0),($6|0),($sub|0),($9|0))|0);
	   $11 = tempRet0;
	   $12 = HEAP8[$incdec$ptr9>>0]|0;
	   $conv5 = $12 << 24 >> 24;
	   $call6 = (_isdigit($conv5)|0);
	   $tobool7 = ($call6|0)==(0);
	   if ($tobool7) {
	    $13 = $10;$14 = $11;
	    break;
	   } else {
	    $3 = $10;$4 = $11;$s$addr$19 = $incdec$ptr9;
	   }
	  }
	 }
	 $tobool14 = ($neg$1$ph|0)!=(0);
	 $15 = (_i64Subtract(0,0,($13|0),($14|0))|0);
	 $16 = tempRet0;
	 $17 = $tobool14 ? $13 : $15;
	 $18 = $tobool14 ? $14 : $16;
	 tempRet0 = $18;
	 STACKTOP = sp;return ($17|0);
	}
	function _bsearch($key,$base,$nel,$width,$cmp) {
	 $key = $key|0;
	 $base = $base|0;
	 $nel = $nel|0;
	 $width = $width|0;
	 $cmp = $cmp|0;
	 var $add$ptr = 0, $base$addr$0$add$ptr = 0, $base$addr$011 = 0, $call = 0, $cmp1 = 0, $cmp19 = 0, $cmp2 = 0, $cmp5 = 0, $div = 0, $div$sub = 0, $mul = 0, $nel$addr$010 = 0, $retval$0 = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp19 = ($nel|0)==(0);
	 L1: do {
	  if ($cmp19) {
	   $retval$0 = 0;
	  } else {
	   $base$addr$011 = $base;$nel$addr$010 = $nel;
	   while(1) {
	    $div = $nel$addr$010 >>> 1;
	    $mul = Math_imul($div, $width)|0;
	    $add$ptr = (($base$addr$011) + ($mul)|0);
	    $call = (FUNCTION_TABLE_iii[$cmp & 31]($key,$add$ptr)|0);
	    $tobool = ($call|0)==(0);
	    if ($tobool) {
	     $retval$0 = $add$ptr;
	     break L1;
	    }
	    $cmp2 = ($nel$addr$010|0)==(1);
	    if ($cmp2) {
	     $retval$0 = 0;
	     break L1;
	    }
	    $cmp5 = ($call|0)<(0);
	    $sub = (($nel$addr$010) - ($div))|0;
	    $div$sub = $cmp5 ? $div : $sub;
	    $base$addr$0$add$ptr = $cmp5 ? $base$addr$011 : $add$ptr;
	    $cmp1 = ($div$sub|0)==(0);
	    if ($cmp1) {
	     $retval$0 = 0;
	     break;
	    } else {
	     $base$addr$011 = $base$addr$0$add$ptr;$nel$addr$010 = $div$sub;
	    }
	   }
	  }
	 } while(0);
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _ecvt($x,$n,$dp,$sign) {
	 $x = +$x;
	 $n = $n|0;
	 $dp = $dp|0;
	 $sign = $sign|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $add$ptr$sum = 0, $add$ptr18 = 0, $add20 = 0, $arrayidx16 = 0, $arrayidx16$lcssa = 0, $arrayidx1612 = 0, $arrayidx6 = 0, $arrayidx67 = 0, $call19 = 0, $cmp = 0, $cmp14 = 0, $cmp4 = 0, $cmp8 = 0, $cmp88 = 0, $conv15 = 0;
	 var $conv5 = 0, $i$0$lcssa = 0, $i$09 = 0, $inc = 0, $j$010 = 0, $sub = 0, $sub3 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $tmp = sp + 16|0;
	 $sub = (($n) + -1)|0;
	 $cmp = ($sub>>>0)>(15);
	 $sub3 = $cmp ? 14 : $sub;
	 HEAP32[$vararg_buffer>>2] = $sub3;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAPF64[tempDoublePtr>>3]=$x;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
	 (_sprintf($tmp,154040,$vararg_buffer)|0);
	 $0 = HEAP8[$tmp>>0]|0;
	 $cmp4 = ($0<<24>>24)==(45);
	 $conv5 = $cmp4&1;
	 HEAP32[$sign>>2] = $conv5;
	 $arrayidx67 = (($tmp) + ($conv5)|0);
	 $1 = HEAP8[$arrayidx67>>0]|0;
	 $cmp88 = ($1<<24>>24)==(101);
	 if ($cmp88) {
	  $arrayidx16$lcssa = 154024;$i$0$lcssa = $conv5;
	 } else {
	  $2 = $1;$arrayidx1612 = 154024;$i$09 = $conv5;$j$010 = 0;
	  while(1) {
	   HEAP8[$arrayidx1612>>0] = $2;
	   $inc = (($i$09) + 1)|0;
	   $cmp14 = ($2<<24>>24)!=(46);
	   $conv15 = $cmp14&1;
	   $add = (($conv15) + ($j$010))|0;
	   $arrayidx6 = (($tmp) + ($inc)|0);
	   $3 = HEAP8[$arrayidx6>>0]|0;
	   $cmp8 = ($3<<24>>24)==(101);
	   $arrayidx16 = (154024 + ($add)|0);
	   if ($cmp8) {
	    $arrayidx16$lcssa = $arrayidx16;$i$0$lcssa = $inc;
	    break;
	   } else {
	    $2 = $3;$arrayidx1612 = $arrayidx16;$i$09 = $inc;$j$010 = $add;
	   }
	  }
	 }
	 HEAP8[$arrayidx16$lcssa>>0] = 0;
	 $add$ptr$sum = (($i$0$lcssa) + 1)|0;
	 $add$ptr18 = (($tmp) + ($add$ptr$sum)|0);
	 $call19 = (_atoi($add$ptr18)|0);
	 $add20 = (($call19) + 1)|0;
	 HEAP32[$dp>>2] = $add20;
	 STACKTOP = sp;return (154024|0);
	}
	function _fcvt($x,$n,$dp,$sign) {
	 $x = +$x;
	 $n = $n|0;
	 $dp = $dp|0;
	 $sign = $sign|0;
	 var $$n = 0, $$n$op = 0, $$sum = 0, $0 = 0, $1 = 0, $add$ptr$sum12 = 0, $add$ptr11 = 0, $add$ptr24 = 0, $arrayidx5 = 0, $call12 = 0, $call15 = 0, $call27 = 0, $cmp = 0, $cmp17 = 0, $cmp20 = 0, $cmp3 = 0, $cmp7 = 0, $conv4 = 0, $lz$0 = 0, $retval$0 = 0;
	 var $sub = 0, $sub26 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 $tmp = sp + 12|0;
	 $cmp = ($n>>>0)>(1400);
	 $$n = $cmp ? 1400 : $n;
	 HEAP32[$vararg_buffer>>2] = $$n;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAPF64[tempDoublePtr>>3]=$x;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
	 (_sprintf($tmp,154048,$vararg_buffer)|0);
	 $0 = HEAP8[$tmp>>0]|0;
	 $cmp3 = ($0<<24>>24)==(45);
	 $conv4 = $cmp3&1;
	 $arrayidx5 = (($tmp) + ($conv4)|0);
	 $1 = HEAP8[$arrayidx5>>0]|0;
	 $cmp7 = ($1<<24>>24)==(48);
	 if ($cmp7) {
	  $add$ptr$sum12 = $conv4 | 2;
	  $add$ptr11 = (($tmp) + ($add$ptr$sum12)|0);
	  $call12 = (_strspn($add$ptr11,154056)|0);
	  $lz$0 = $call12;
	 } else {
	  $call15 = (_strcspn($arrayidx5,154064)|0);
	  $sub = (0 - ($call15))|0;
	  $lz$0 = $sub;
	 }
	 $cmp17 = ($$n|0)>($lz$0|0);
	 if ($cmp17) {
	  $sub26 = (($$n) - ($lz$0))|0;
	  $call27 = (_ecvt($x,$sub26,$dp,$sign)|0);
	  $retval$0 = $call27;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  HEAP32[$sign>>2] = $conv4;
	  HEAP32[$dp>>2] = 1;
	  $cmp20 = ($$n>>>0)>(14);
	  $$n$op = (14 - ($$n))|0;
	  $$sum = $cmp20 ? 0 : $$n$op;
	  $add$ptr24 = (154072 + ($$sum)|0);
	  $retval$0 = $add$ptr24;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _gcvt($x,$n,$b) {
	 $x = +$x;
	 $n = $n|0;
	 $b = $b|0;
	 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer = sp;
	 HEAP32[$vararg_buffer>>2] = $n;
	 $vararg_ptr1 = (($vararg_buffer) + 4|0);
	 HEAPF64[tempDoublePtr>>3]=$x;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
	 (_sprintf($b,154088,$vararg_buffer)|0);
	 STACKTOP = sp;return ($b|0);
	}
	function _qsort($base,$nel,$width,$cmp) {
	 $base = $base|0;
	 $nel = $nel|0;
	 $width = $width|0;
	 $cmp = $cmp|0;
	 var $$add$i = 0, $$or$i201236 = 0, $$pre$i = 0, $$pre$i108 = 0, $$pre$i57 = 0, $$pre$i94 = 0, $0 = 0, $0$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
	 var $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr$i70 = 0, $add$ptr$sum = 0, $add$ptr$sum$i = 0, $add$ptr$sum$i74 = 0, $add$ptr$us$i = 0, $add$ptr$us$i114 = 0, $add$ptr1 = 0, $add$ptr33 = 0;
	 var $add$ptr55$sum = 0, $add$ptr57 = 0, $add$ptr6$i = 0, $add$ptr6$i75 = 0, $add$ptr65 = 0, $add$ptr70$pre = 0, $add$us$i = 0, $add$us$i112 = 0, $add14 = 0, $add47 = 0, $add59 = 0, $add6 = 0, $and = 0, $and$i$i = 0, $and$i11$i = 0, $and3$i$i = 0, $and3$i4$i = 0, $ar$i = 0, $arrayidx = 0, $arrayidx$i100 = 0;
	 var $arrayidx$i54 = 0, $arrayidx15$i = 0, $arrayidx15$i85 = 0, $arrayidx16 = 0, $arrayidx4$i = 0, $arrayidx4$i72 = 0, $arrayidx53 = 0, $arrayidx7 = 0, $arrayidx7$us$i = 0, $arrayidx7$us$i111 = 0, $arrayidx8$us$i = 0, $arrayidx8$us$i113 = 0, $call$i = 0, $call$i76 = 0, $call10$i = 0, $call10$i79 = 0, $call12$i = 0, $call12$i82 = 0, $call151 = 0, $call151246 = 0;
	 var $call151247 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i136 = 0, $cmp$i148 = 0, $cmp$i152 = 0, $cmp$i3$i = 0, $cmp$i99 = 0, $cmp1$i = 0, $cmp1$i92 = 0, $cmp11 = 0, $cmp11$i = 0, $cmp11$i80 = 0, $cmp118$i = 0, $cmp118$i64 = 0, $cmp13$i = 0, $cmp13$i83 = 0, $cmp17 = 0, $cmp24 = 0, $cmp3$i = 0;
	 var $cmp3$i122 = 0, $cmp3$i150 = 0, $cmp3$i254 = 0, $cmp3$us$i = 0, $cmp3$us$i118 = 0, $cmp37 = 0, $cmp39 = 0, $cmp41 = 0, $cmp43 = 0, $cmp619$i = 0, $cmp619$i103 = 0, $cmp8 = 0, $cmp8$i = 0, $cmp8$i77 = 0, $cmp9 = 0, $cmp9260 = 0, $cond$i = 0, $cond$i123 = 0, $cond$i123252 = 0, $cond$i255 = 0;
	 var $cond$i258 = 0, $cond$us$i = 0, $cond$us$i119 = 0, $exitcond$i = 0, $exitcond$i115 = 0, $head$0$lcssa = 0, $head$0263 = 0, $head$1 = 0, $head$addr$0$be$i = 0, $head$addr$0$be$i91 = 0, $head$addr$020$i = 0, $head$addr$020$i68 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i96 = 0, $i$020$us$i = 0, $i$020$us$i110 = 0, $i$021$i = 0, $i$021$i67 = 0, $idx$neg = 0;
	 var $inc = 0, $inc$i = 0, $inc$i$i = 0, $inc$i84 = 0, $inc$i9$i = 0, $lnot$i$i = 0, $lnot$i12$i = 0, $lnot4$i$i = 0, $lnot4$i5$i = 0, $lp = 0, $mul = 0, $n$addr$0$i160 = 0, $nTrailingZeros$06$i$i = 0, $nTrailingZeros$06$i7$i = 0, $or = 0, $or$i = 0, $or$i134 = 0, $or$i144 = 0, $or$i165 = 0, $or$i177 = 0;
	 var $or$i189 = 0, $or$i201 = 0, $or$i201234 = 0, $or$i201236$lcssa = 0, $or$i201236$shr8$i202240 = 0, $or$i201236262 = 0, $or$i201237 = 0, $or63 = 0, $pshift$0$lcssa = 0, $pshift$0264 = 0, $pshift$1 = 0, $pshift$2 = 0, $pshift$addr$0$be$i = 0, $pshift$addr$0$be$i90 = 0, $pshift$addr$019$i = 0, $pshift$addr$019$i69 = 0, $retval$0$i14$i = 0, $shl$i = 0, $shl$i132 = 0, $shl$i142 = 0;
	 var $shl$i164 = 0, $shl$i174 = 0, $shl$i186 = 0, $shl$i200 = 0, $shl8$i = 0, $shl8$i145 = 0, $shl8$i190 = 0, $shr$i = 0, $shr$i$i = 0, $shr$i10$i = 0, $shr$i133 = 0, $shr$i143 = 0, $shr$i161 = 0, $shr$i176 = 0, $shr$i188 = 0, $shr8$i = 0, $shr8$i166 = 0, $shr8$i202 = 0, $shr8$i202238 = 0, $shr8$i202240$lcssa = 0;
	 var $shr8$i202240261 = 0, $shr8$i202241 = 0, $sub$i = 0, $sub$i126 = 0, $sub$i140 = 0, $sub$i140$sub15 = 0, $sub$i147 = 0, $sub$i157 = 0, $sub$i58 = 0, $sub$i71 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$us$i = 0, $sub$us$i107 = 0, $sub15 = 0, $sub16$i = 0, $sub16$i87 = 0, $sub5$i = 0, $sub5$i163 = 0;
	 var $sub50 = 0, $sum = 0, $sum$i = 0, $sum$i73 = 0, $tmp$i = 0, $tmp$i98 = 0, $tobool = 0, $tobool$i = 0, $tobool$i124 = 0, $tobool$i256 = 0, $tobool$us$i = 0, $tobool$us$i105 = 0, $tobool21$i = 0, $width$addr$022$i121251 = 0, $width$addr$022$i257 = 0, $width$addr$022$us$i = 0, $width$addr$022$us$i117 = 0, $x$addr$05$i$i = 0, $x$addr$05$i8$i = 0, $xor = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tmp$i98 = sp + 680|0;
	 $tmp$i = sp + 424|0;
	 $ar$i = sp + 192|0;
	 $lp = sp;
	 $mul = Math_imul($width, $nel)|0;
	 $tobool = ($mul|0)==(0);
	 if ($tobool) {
	  STACKTOP = sp;return;
	 }
	 $add$ptr$sum = (($mul) - ($width))|0;
	 $arrayidx = (($lp) + 4|0);
	 HEAP32[$arrayidx>>2] = $width;
	 HEAP32[$lp>>2] = $width;
	 $0 = $width;$1 = $width;$i$0 = 2;
	 while(1) {
	  $add = (($0) + ($width))|0;
	  $add6 = (($add) + ($1))|0;
	  $arrayidx7 = (($lp) + ($i$0<<2)|0);
	  HEAP32[$arrayidx7>>2] = $add6;
	  $cmp8 = ($add6>>>0)<($mul>>>0);
	  $inc = (($i$0) + 1)|0;
	  if ($cmp8) {
	   $0$phi = $1;$1 = $add6;$i$0 = $inc;$0 = $0$phi;
	  } else {
	   break;
	  }
	 }
	 $idx$neg = (0 - ($width))|0;
	 $add$ptr1 = (($base) + ($add$ptr$sum)|0);
	 $cmp9260 = ($add$ptr$sum|0)>(0);
	 if ($cmp9260) {
	  $tobool21$i = ($width|0)==(0);
	  $cmp3$i254 = ($width>>>0)>(256);
	  $cond$i255 = $cmp3$i254 ? 256 : $width;
	  $tobool$i256 = ($cond$i255|0)==($width|0);
	  $sub$ptr$lhs$cast = $add$ptr1;
	  $head$0263 = $base;$or$i201236262 = 1;$pshift$0264 = 1;$shr8$i202240261 = 0;
	  while(1) {
	   $and = $or$i201236262 & 3;
	   $cmp11 = ($and|0)==(3);
	   do {
	    if ($cmp11) {
	     HEAP32[$ar$i>>2] = $head$0263;
	     $cmp118$i = ($pshift$0264|0)>(1);
	     L44: do {
	      if ($cmp118$i) {
	       $3 = $head$0263;$head$addr$020$i = $head$0263;$i$021$i = 1;$pshift$addr$019$i = $pshift$0264;
	       while(1) {
	        $add$ptr$i = (($head$addr$020$i) + ($idx$neg)|0);
	        $sub$i = (($pshift$addr$019$i) + -2)|0;
	        $arrayidx4$i = (($lp) + ($sub$i<<2)|0);
	        $2 = HEAP32[$arrayidx4$i>>2]|0;
	        $sum$i = (($2) + ($width))|0;
	        $add$ptr$sum$i = (0 - ($sum$i))|0;
	        $add$ptr6$i = (($head$addr$020$i) + ($add$ptr$sum$i)|0);
	        $call$i = (FUNCTION_TABLE_iii[$cmp & 31]($3,$add$ptr6$i)|0);
	        $cmp8$i = ($call$i|0)>(-1);
	        if ($cmp8$i) {
	         $call10$i = (FUNCTION_TABLE_iii[$cmp & 31]($3,$add$ptr$i)|0);
	         $cmp11$i = ($call10$i|0)>(-1);
	         if ($cmp11$i) {
	          $i$0$lcssa$i = $i$021$i;
	          break;
	         }
	        }
	        $call12$i = (FUNCTION_TABLE_iii[$cmp & 31]($add$ptr6$i,$add$ptr$i)|0);
	        $cmp13$i = ($call12$i|0)>(-1);
	        $inc$i = (($i$021$i) + 1)|0;
	        $arrayidx15$i = (($ar$i) + ($i$021$i<<2)|0);
	        if ($cmp13$i) {
	         HEAP32[$arrayidx15$i>>2] = $add$ptr6$i;
	         $sub16$i = (($pshift$addr$019$i) + -1)|0;
	         $head$addr$0$be$i = $add$ptr6$i;$pshift$addr$0$be$i = $sub16$i;
	        } else {
	         HEAP32[$arrayidx15$i>>2] = $add$ptr$i;
	         $head$addr$0$be$i = $add$ptr$i;$pshift$addr$0$be$i = $sub$i;
	        }
	        $cmp1$i = ($pshift$addr$0$be$i|0)>(1);
	        if (!($cmp1$i)) {
	         $i$0$lcssa$i = $inc$i;
	         break;
	        }
	        $$pre$i = HEAP32[$ar$i>>2]|0;
	        $3 = $$pre$i;$head$addr$020$i = $head$addr$0$be$i;$i$021$i = $inc$i;$pshift$addr$019$i = $pshift$addr$0$be$i;
	       }
	       $cmp$i = ($i$0$lcssa$i|0)<(2);
	       if (!($cmp$i)) {
	        $arrayidx$i54 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
	        HEAP32[$arrayidx$i54>>2] = $tmp$i;
	        if (!($tobool21$i)) {
	         $cmp619$i = ($i$0$lcssa$i|0)>(0);
	         if ($cmp619$i) {
	          $8 = $tmp$i;$width$addr$022$us$i = $width;
	         } else {
	          $4 = HEAP32[$ar$i>>2]|0;
	          _memcpy(($tmp$i|0),($4|0),($cond$i255|0))|0;
	          if ($tobool$i256) {
	           break;
	          } else {
	           $cond$i258 = $cond$i255;$width$addr$022$i257 = $width;
	          }
	          while(1) {
	           $sub$i58 = (($width$addr$022$i257) - ($cond$i258))|0;
	           $cmp3$i = ($sub$i58>>>0)>(256);
	           $cond$i = $cmp3$i ? 256 : $sub$i58;
	           _memcpy(($tmp$i|0),($4|0),($cond$i|0))|0;
	           $tobool$i = ($sub$i58|0)==($cond$i|0);
	           if ($tobool$i) {
	            break L44;
	           } else {
	            $cond$i258 = $cond$i;$width$addr$022$i257 = $sub$i58;
	           }
	          }
	         }
	         while(1) {
	          $cmp3$us$i = ($width$addr$022$us$i>>>0)>(256);
	          $cond$us$i = $cmp3$us$i ? 256 : $width$addr$022$us$i;
	          $7 = HEAP32[$ar$i>>2]|0;
	          _memcpy(($8|0),($7|0),($cond$us$i|0))|0;
	          $6 = $7;$i$020$us$i = 0;
	          while(1) {
	           $arrayidx7$us$i = (($ar$i) + ($i$020$us$i<<2)|0);
	           $add$us$i = (($i$020$us$i) + 1)|0;
	           $arrayidx8$us$i = (($ar$i) + ($add$us$i<<2)|0);
	           $5 = HEAP32[$arrayidx8$us$i>>2]|0;
	           _memcpy(($6|0),($5|0),($cond$us$i|0))|0;
	           $add$ptr$us$i = (($6) + ($cond$us$i)|0);
	           HEAP32[$arrayidx7$us$i>>2] = $add$ptr$us$i;
	           $exitcond$i = ($add$us$i|0)==($i$0$lcssa$i|0);
	           if ($exitcond$i) {
	            break;
	           } else {
	            $6 = $5;$i$020$us$i = $add$us$i;
	           }
	          }
	          $tobool$us$i = ($width$addr$022$us$i|0)==($cond$us$i|0);
	          if ($tobool$us$i) {
	           break L44;
	          }
	          $sub$us$i = (($width$addr$022$us$i) - ($cond$us$i))|0;
	          $$pre$i57 = HEAP32[$arrayidx$i54>>2]|0;
	          $8 = $$pre$i57;$width$addr$022$us$i = $sub$us$i;
	         }
	        }
	       }
	      }
	     } while(0);
	     $shr$i = $or$i201236262 >>> 2;
	     $shl$i = $shr8$i202240261 << 30;
	     $or$i = $shr$i | $shl$i;
	     $shr8$i = $shr8$i202240261 >>> 2;
	     $add14 = (($pshift$0264) + 2)|0;
	     $or$i201237 = $or$i;$pshift$1 = $add14;$shr8$i202241 = $shr8$i;
	    } else {
	     $sub15 = (($pshift$0264) + -1)|0;
	     $arrayidx16 = (($lp) + ($sub15<<2)|0);
	     $9 = HEAP32[$arrayidx16>>2]|0;
	     $sub$ptr$rhs$cast = $head$0263;
	     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	     $cmp17 = ($9>>>0)<($sub$ptr$sub>>>0);
	     L13: do {
	      if ($cmp17) {
	       HEAP32[$ar$i>>2] = $head$0263;
	       $cmp118$i64 = ($pshift$0264|0)>(1);
	       if ($cmp118$i64) {
	        $11 = $head$0263;$head$addr$020$i68 = $head$0263;$i$021$i67 = 1;$pshift$addr$019$i69 = $pshift$0264;
	        while(1) {
	         $add$ptr$i70 = (($head$addr$020$i68) + ($idx$neg)|0);
	         $sub$i71 = (($pshift$addr$019$i69) + -2)|0;
	         $arrayidx4$i72 = (($lp) + ($sub$i71<<2)|0);
	         $10 = HEAP32[$arrayidx4$i72>>2]|0;
	         $sum$i73 = (($10) + ($width))|0;
	         $add$ptr$sum$i74 = (0 - ($sum$i73))|0;
	         $add$ptr6$i75 = (($head$addr$020$i68) + ($add$ptr$sum$i74)|0);
	         $call$i76 = (FUNCTION_TABLE_iii[$cmp & 31]($11,$add$ptr6$i75)|0);
	         $cmp8$i77 = ($call$i76|0)>(-1);
	         if ($cmp8$i77) {
	          $call10$i79 = (FUNCTION_TABLE_iii[$cmp & 31]($11,$add$ptr$i70)|0);
	          $cmp11$i80 = ($call10$i79|0)>(-1);
	          if ($cmp11$i80) {
	           $i$0$lcssa$i96 = $i$021$i67;
	           break;
	          }
	         }
	         $call12$i82 = (FUNCTION_TABLE_iii[$cmp & 31]($add$ptr6$i75,$add$ptr$i70)|0);
	         $cmp13$i83 = ($call12$i82|0)>(-1);
	         $inc$i84 = (($i$021$i67) + 1)|0;
	         $arrayidx15$i85 = (($ar$i) + ($i$021$i67<<2)|0);
	         if ($cmp13$i83) {
	          HEAP32[$arrayidx15$i85>>2] = $add$ptr6$i75;
	          $sub16$i87 = (($pshift$addr$019$i69) + -1)|0;
	          $head$addr$0$be$i91 = $add$ptr6$i75;$pshift$addr$0$be$i90 = $sub16$i87;
	         } else {
	          HEAP32[$arrayidx15$i85>>2] = $add$ptr$i70;
	          $head$addr$0$be$i91 = $add$ptr$i70;$pshift$addr$0$be$i90 = $sub$i71;
	         }
	         $cmp1$i92 = ($pshift$addr$0$be$i90|0)>(1);
	         if (!($cmp1$i92)) {
	          $i$0$lcssa$i96 = $inc$i84;
	          break;
	         }
	         $$pre$i94 = HEAP32[$ar$i>>2]|0;
	         $11 = $$pre$i94;$head$addr$020$i68 = $head$addr$0$be$i91;$i$021$i67 = $inc$i84;$pshift$addr$019$i69 = $pshift$addr$0$be$i90;
	        }
	        $cmp$i99 = ($i$0$lcssa$i96|0)<(2);
	        if (!($cmp$i99)) {
	         $arrayidx$i100 = (($ar$i) + ($i$0$lcssa$i96<<2)|0);
	         HEAP32[$arrayidx$i100>>2] = $tmp$i98;
	         if (!($tobool21$i)) {
	          $cmp619$i103 = ($i$0$lcssa$i96|0)>(0);
	          if ($cmp619$i103) {
	           $16 = $tmp$i98;$width$addr$022$us$i117 = $width;
	          } else {
	           $12 = HEAP32[$ar$i>>2]|0;
	           _memcpy(($tmp$i98|0),($12|0),($cond$i255|0))|0;
	           if ($tobool$i256) {
	            break;
	           } else {
	            $cond$i123252 = $cond$i255;$width$addr$022$i121251 = $width;
	           }
	           while(1) {
	            $sub$i126 = (($width$addr$022$i121251) - ($cond$i123252))|0;
	            $cmp3$i122 = ($sub$i126>>>0)>(256);
	            $cond$i123 = $cmp3$i122 ? 256 : $sub$i126;
	            _memcpy(($tmp$i98|0),($12|0),($cond$i123|0))|0;
	            $tobool$i124 = ($sub$i126|0)==($cond$i123|0);
	            if ($tobool$i124) {
	             break L13;
	            } else {
	             $cond$i123252 = $cond$i123;$width$addr$022$i121251 = $sub$i126;
	            }
	           }
	          }
	          while(1) {
	           $cmp3$us$i118 = ($width$addr$022$us$i117>>>0)>(256);
	           $cond$us$i119 = $cmp3$us$i118 ? 256 : $width$addr$022$us$i117;
	           $15 = HEAP32[$ar$i>>2]|0;
	           _memcpy(($16|0),($15|0),($cond$us$i119|0))|0;
	           $14 = $15;$i$020$us$i110 = 0;
	           while(1) {
	            $arrayidx7$us$i111 = (($ar$i) + ($i$020$us$i110<<2)|0);
	            $add$us$i112 = (($i$020$us$i110) + 1)|0;
	            $arrayidx8$us$i113 = (($ar$i) + ($add$us$i112<<2)|0);
	            $13 = HEAP32[$arrayidx8$us$i113>>2]|0;
	            _memcpy(($14|0),($13|0),($cond$us$i119|0))|0;
	            $add$ptr$us$i114 = (($14) + ($cond$us$i119)|0);
	            HEAP32[$arrayidx7$us$i111>>2] = $add$ptr$us$i114;
	            $exitcond$i115 = ($add$us$i112|0)==($i$0$lcssa$i96|0);
	            if ($exitcond$i115) {
	             break;
	            } else {
	             $14 = $13;$i$020$us$i110 = $add$us$i112;
	            }
	           }
	           $tobool$us$i105 = ($width$addr$022$us$i117|0)==($cond$us$i119|0);
	           if ($tobool$us$i105) {
	            break L13;
	           }
	           $sub$us$i107 = (($width$addr$022$us$i117) - ($cond$us$i119))|0;
	           $$pre$i108 = HEAP32[$arrayidx$i100>>2]|0;
	           $16 = $$pre$i108;$width$addr$022$us$i117 = $sub$us$i107;
	          }
	         }
	        }
	       }
	      } else {
	       _trinkle($head$0263,$width,$cmp,$or$i201236262,$shr8$i202240261,$pshift$0264,0,$lp);
	      }
	     } while(0);
	     $cmp24 = ($pshift$0264|0)==(1);
	     if ($cmp24) {
	      $shl$i132 = $shr8$i202240261 << 1;
	      $shr$i133 = $or$i201236262 >>> 31;
	      $or$i134 = $shr$i133 | $shl$i132;
	      $shl8$i = $or$i201236262 << 1;
	      $or$i201237 = $shl8$i;$pshift$1 = 0;$shr8$i202241 = $or$i134;
	      break;
	     } else {
	      $cmp$i136 = ($sub15>>>0)>(31);
	      $sub$i140 = (($pshift$0264) + -33)|0;
	      $$or$i201236 = $cmp$i136 ? 0 : $or$i201236262;
	      $or$i201236$shr8$i202240 = $cmp$i136 ? $or$i201236262 : $shr8$i202240261;
	      $sub$i140$sub15 = $cmp$i136 ? $sub$i140 : $sub15;
	      $shl$i142 = $or$i201236$shr8$i202240 << $sub$i140$sub15;
	      $sub5$i = (32 - ($sub$i140$sub15))|0;
	      $shr$i143 = $$or$i201236 >>> $sub5$i;
	      $or$i144 = $shr$i143 | $shl$i142;
	      $shl8$i145 = $$or$i201236 << $sub$i140$sub15;
	      $or$i201237 = $shl8$i145;$pshift$1 = 1;$shr8$i202241 = $or$i144;
	      break;
	     }
	    }
	   } while(0);
	   $or = $or$i201237 | 1;
	   $add$ptr33 = (($head$0263) + ($width)|0);
	   $cmp9 = ($add$ptr33>>>0)<($add$ptr1>>>0);
	   if ($cmp9) {
	    $head$0263 = $add$ptr33;$or$i201236262 = $or;$pshift$0264 = $pshift$1;$shr8$i202240261 = $shr8$i202241;
	   } else {
	    $head$0$lcssa = $add$ptr33;$or$i201236$lcssa = $or;$pshift$0$lcssa = $pshift$1;$shr8$i202240$lcssa = $shr8$i202241;
	    break;
	   }
	  }
	 } else {
	  $head$0$lcssa = $base;$or$i201236$lcssa = 1;$pshift$0$lcssa = 1;$shr8$i202240$lcssa = 0;
	 }
	 _trinkle($head$0$lcssa,$width,$cmp,$or$i201236$lcssa,$shr8$i202240$lcssa,$pshift$0$lcssa,0,$lp);
	 $head$1 = $head$0$lcssa;$or$i201234 = $or$i201236$lcssa;$pshift$2 = $pshift$0$lcssa;$shr8$i202238 = $shr8$i202240$lcssa;
	 while(1) {
	  $cmp37 = ($pshift$2|0)==(1);
	  if ($cmp37) {
	   $cmp39 = ($or$i201234|0)==(1);
	   if ($cmp39) {
	    $cmp41 = ($shr8$i202238|0)==(0);
	    if ($cmp41) {
	     break;
	    } else {
	     label = 52;
	    }
	   }
	  } else {
	   label = 52;
	  }
	  if ((label|0) == 52) {
	   label = 0;
	   $cmp43 = ($pshift$2|0)<(2);
	   if (!($cmp43)) {
	    $shl$i174 = $shr8$i202238 << 2;
	    $shr$i176 = $or$i201234 >>> 30;
	    $or$i177 = $shr$i176 | $shl$i174;
	    $sub50 = (($pshift$2) + -2)|0;
	    $19 = $or$i201234 << 1;
	    $xor = $19 & 2147483646;
	    $20 = $shr$i176 << 31;
	    $shl$i200 = $xor | $20;
	    $or$i201 = $shl$i200 ^ 3;
	    $shr8$i202 = $or$i177 >>> 1;
	    $arrayidx53 = (($lp) + ($sub50<<2)|0);
	    $21 = HEAP32[$arrayidx53>>2]|0;
	    $sum = (($21) + ($width))|0;
	    $add$ptr55$sum = (0 - ($sum))|0;
	    $add$ptr57 = (($head$1) + ($add$ptr55$sum)|0);
	    $add59 = (($pshift$2) + -1)|0;
	    _trinkle($add$ptr57,$width,$cmp,$or$i201,$shr8$i202,$add59,1,$lp);
	    $shl$i186 = $shr8$i202 << 1;
	    $shr$i188 = $shr$i176 & 1;
	    $or$i189 = $shl$i186 | $shr$i188;
	    $shl8$i190 = $or$i201 << 1;
	    $or63 = $shl8$i190 | 1;
	    $add$ptr65 = (($head$1) + ($idx$neg)|0);
	    _trinkle($add$ptr65,$width,$cmp,$or63,$or$i189,$sub50,1,$lp);
	    $head$1 = $add$ptr65;$or$i201234 = $or63;$pshift$2 = $sub50;$shr8$i202238 = $or$i189;
	    continue;
	   }
	  }
	  $sub$i147 = (($or$i201234) + -1)|0;
	  $cmp$i$i = ($sub$i147|0)==(0);
	  if ($cmp$i$i) {
	   $call151247 = 32;
	   label = 62;
	  } else {
	   $and3$i$i = $sub$i147 & 1;
	   $lnot4$i$i = ($and3$i$i|0)==(0);
	   if ($lnot4$i$i) {
	    $nTrailingZeros$06$i$i = 0;$x$addr$05$i$i = $sub$i147;
	    while(1) {
	     $inc$i$i = (($nTrailingZeros$06$i$i) + 1)|0;
	     $shr$i$i = $x$addr$05$i$i >>> 1;
	     $and$i$i = $shr$i$i & 1;
	     $lnot$i$i = ($and$i$i|0)==(0);
	     if ($lnot$i$i) {
	      $nTrailingZeros$06$i$i = $inc$i$i;$x$addr$05$i$i = $shr$i$i;
	     } else {
	      break;
	     }
	    }
	    $cmp$i148 = ($inc$i$i|0)==(0);
	    if ($cmp$i148) {
	     label = 57;
	    } else {
	     $call151 = $inc$i$i;
	    }
	   } else {
	    label = 57;
	   }
	   if ((label|0) == 57) {
	    label = 0;
	    $cmp$i3$i = ($shr8$i202238|0)==(0);
	    if ($cmp$i3$i) {
	     $retval$0$i14$i = 32;
	    } else {
	     $and3$i4$i = $shr8$i202238 & 1;
	     $lnot4$i5$i = ($and3$i4$i|0)==(0);
	     if ($lnot4$i5$i) {
	      $nTrailingZeros$06$i7$i = 0;$x$addr$05$i8$i = $shr8$i202238;
	      while(1) {
	       $inc$i9$i = (($nTrailingZeros$06$i7$i) + 1)|0;
	       $shr$i10$i = $x$addr$05$i8$i >>> 1;
	       $and$i11$i = $shr$i10$i & 1;
	       $lnot$i12$i = ($and$i11$i|0)==(0);
	       if ($lnot$i12$i) {
	        $nTrailingZeros$06$i7$i = $inc$i9$i;$x$addr$05$i8$i = $shr$i10$i;
	       } else {
	        $retval$0$i14$i = $inc$i9$i;
	        break;
	       }
	      }
	     } else {
	      $retval$0$i14$i = 0;
	     }
	    }
	    $add$i = (($retval$0$i14$i) + 32)|0;
	    $cmp3$i150 = ($retval$0$i14$i|0)==(0);
	    $$add$i = $cmp3$i150 ? 0 : $add$i;
	    $call151 = $$add$i;
	   }
	   $cmp$i152 = ($call151>>>0)>(31);
	   if ($cmp$i152) {
	    $call151247 = $call151;
	    label = 62;
	   } else {
	    $17 = $or$i201234;$18 = $shr8$i202238;$call151246 = $call151;$n$addr$0$i160 = $call151;
	   }
	  }
	  if ((label|0) == 62) {
	   label = 0;
	   $sub$i157 = (($call151247) + -32)|0;
	   $17 = $shr8$i202238;$18 = 0;$call151246 = $call151247;$n$addr$0$i160 = $sub$i157;
	  }
	  $shr$i161 = $17 >>> $n$addr$0$i160;
	  $sub5$i163 = (32 - ($n$addr$0$i160))|0;
	  $shl$i164 = $18 << $sub5$i163;
	  $or$i165 = $shl$i164 | $shr$i161;
	  $shr8$i166 = $18 >>> $n$addr$0$i160;
	  $add47 = (($call151246) + ($pshift$2))|0;
	  $add$ptr70$pre = (($head$1) + ($idx$neg)|0);
	  $head$1 = $add$ptr70$pre;$or$i201234 = $or$i165;$pshift$2 = $add47;$shr8$i202238 = $shr8$i166;
	 }
	 STACKTOP = sp;return;
	}
	function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
	 $head = $head|0;
	 $width = $width|0;
	 $cmp = $cmp|0;
	 $pp$val = $pp$val|0;
	 $pp$1$val = $pp$1$val|0;
	 $pshift = $pshift|0;
	 $trusty = $trusty|0;
	 $lp = $lp|0;
	 var $$add$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i31 = 0, $$pre$i50 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
	 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$sum$i = 0, $add$ptr$us$i = 0, $add$ptr$us$i56 = 0, $add$ptr15 = 0, $add$ptr15$sum = 0, $add$ptr20 = 0, $add$ptr6$i = 0, $add$us$i = 0, $add$us$i54 = 0, $and$i$i = 0, $and$i11$i = 0, $and3$i$i = 0, $and3$i4$i = 0;
	 var $ar = 0, $ar$i = 0, $arrayidx$i28 = 0, $arrayidx$i42 = 0, $arrayidx15$i = 0, $arrayidx18 = 0, $arrayidx28 = 0, $arrayidx4$i = 0, $arrayidx7$us$i = 0, $arrayidx7$us$i53 = 0, $arrayidx8$us$i = 0, $arrayidx8$us$i55 = 0, $arrayidx9 = 0, $call = 0, $call$i = 0, $call10$i = 0, $call12$i = 0, $call21 = 0, $call23 = 0, $call2925 = 0;
	 var $call292510 = 0, $call29259 = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i27 = 0, $cmp$i3$i = 0, $cmp$i34 = 0, $cmp$i41 = 0, $cmp1$i = 0, $cmp11 = 0, $cmp11$i = 0, $cmp118$i = 0, $cmp12 = 0, $cmp13$i = 0, $cmp22 = 0, $cmp24 = 0, $cmp3$i = 0, $cmp3$i32 = 0, $cmp3$i3214 = 0, $cmp3$i64 = 0;
	 var $cmp3$i6420 = 0, $cmp3$us$i = 0, $cmp3$us$i60 = 0, $cmp6 = 0, $cmp619$i = 0, $cmp619$i45 = 0, $cmp625 = 0, $cmp8 = 0, $cmp8$i = 0, $cmp826 = 0, $cond$i = 0, $cond$i15 = 0, $cond$i18 = 0, $cond$i65 = 0, $cond$i6521 = 0, $cond$i6524 = 0, $cond$us$i = 0, $cond$us$i61 = 0, $exitcond$i = 0, $exitcond$i57 = 0;
	 var $head$addr$0$be$i = 0, $head$addr$0$lcssa = 0, $head$addr$0$lcssa45 = 0, $head$addr$020$i = 0, $head$addr$035 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa46 = 0, $i$020$us$i = 0, $i$020$us$i52 = 0, $i$021$i = 0, $i$034 = 0, $idx$neg = 0, $idx$neg14 = 0, $inc = 0, $inc$i = 0, $inc$i$i = 0, $inc$i9$i = 0, $lnot$i$i = 0, $lnot$i12$i = 0;
	 var $lnot4$i$i = 0, $lnot4$i5$i = 0, $n$addr$0$i = 0, $nTrailingZeros$06$i$i = 0, $nTrailingZeros$06$i7$i = 0, $or$cond = 0, $or$cond12 = 0, $or$cond1227 = 0, $or$i = 0, $p$sroa$1$4$load4631 = 0, $p$sroa$1$4$load5728 = 0, $pshift$addr$0$be$i = 0, $pshift$addr$0$lcssa = 0, $pshift$addr$0$lcssa47 = 0, $pshift$addr$019$i = 0, $pshift$addr$033 = 0, $retval$0$i14$i = 0, $shl$i = 0, $shr$i = 0, $shr$i$i = 0;
	 var $shr$i10$i = 0, $shr8$i = 0, $sub = 0, $sub$i = 0, $sub$i26 = 0, $sub$i33 = 0, $sub$i36 = 0, $sub$i68 = 0, $sub$us$i = 0, $sub$us$i49 = 0, $sub16$i = 0, $sub5$i = 0, $sum = 0, $sum$i = 0, $tmp$i = 0, $tmp$i40 = 0, $tobool = 0, $tobool$i = 0, $tobool$i16 = 0, $tobool$i66 = 0;
	 var $tobool$i6622 = 0, $tobool$us$i = 0, $tobool$us$i47 = 0, $tobool21$i = 0, $tobool21$i43 = 0, $tobool31 = 0, $trusty$addr$0$lcssa = 0, $trusty$addr$032 = 0, $width$addr$022$i17 = 0, $width$addr$022$i6323 = 0, $width$addr$022$us$i = 0, $width$addr$022$us$i59 = 0, $x$addr$05$i$i = 0, $x$addr$05$i8$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $tmp$i40 = sp + 712|0;
	 $tmp$i = sp + 456|0;
	 $ar$i = sp + 228|0;
	 $ar = sp;
	 HEAP32[$ar>>2] = $head;
	 $idx$neg14 = (0 - ($width))|0;
	 $cmp625 = ($pp$val|0)==(1);
	 $cmp826 = ($pp$1$val|0)==(0);
	 $or$cond1227 = $cmp625 & $cmp826;
	 L1: do {
	  if ($or$cond1227) {
	   $head$addr$0$lcssa = $head;$i$0$lcssa = 1;$pshift$addr$0$lcssa = $pshift;$trusty$addr$0$lcssa = $trusty;
	   label = 18;
	  } else {
	   $1 = $head;$head$addr$035 = $head;$i$034 = 1;$p$sroa$1$4$load4631 = $pp$val;$p$sroa$1$4$load5728 = $pp$1$val;$pshift$addr$033 = $pshift;$trusty$addr$032 = $trusty;
	   while(1) {
	    $arrayidx9 = (($lp) + ($pshift$addr$033<<2)|0);
	    $0 = HEAP32[$arrayidx9>>2]|0;
	    $idx$neg = (0 - ($0))|0;
	    $add$ptr = (($head$addr$035) + ($idx$neg)|0);
	    $call = (FUNCTION_TABLE_iii[$cmp & 31]($add$ptr,$1)|0);
	    $cmp11 = ($call|0)<(1);
	    if ($cmp11) {
	     $head$addr$0$lcssa = $head$addr$035;$i$0$lcssa = $i$034;$pshift$addr$0$lcssa = $pshift$addr$033;$trusty$addr$0$lcssa = $trusty$addr$032;
	     label = 18;
	     break L1;
	    }
	    $tobool = ($trusty$addr$032|0)==(0);
	    $cmp12 = ($pshift$addr$033|0)>(1);
	    $or$cond = $tobool & $cmp12;
	    if ($or$cond) {
	     $add$ptr15 = (($head$addr$035) + ($idx$neg14)|0);
	     $sub = (($pshift$addr$033) + -2)|0;
	     $arrayidx18 = (($lp) + ($sub<<2)|0);
	     $2 = HEAP32[$arrayidx18>>2]|0;
	     $call21 = (FUNCTION_TABLE_iii[$cmp & 31]($add$ptr15,$add$ptr)|0);
	     $cmp22 = ($call21|0)>(-1);
	     if ($cmp22) {
	      $head$addr$0$lcssa45 = $head$addr$035;$i$0$lcssa46 = $i$034;$pshift$addr$0$lcssa47 = $pshift$addr$033;
	      break L1;
	     }
	     $sum = (($2) + ($width))|0;
	     $add$ptr15$sum = (0 - ($sum))|0;
	     $add$ptr20 = (($head$addr$035) + ($add$ptr15$sum)|0);
	     $call23 = (FUNCTION_TABLE_iii[$cmp & 31]($add$ptr20,$add$ptr)|0);
	     $cmp24 = ($call23|0)>(-1);
	     if ($cmp24) {
	      $head$addr$0$lcssa45 = $head$addr$035;$i$0$lcssa46 = $i$034;$pshift$addr$0$lcssa47 = $pshift$addr$033;
	      break L1;
	     }
	    }
	    $inc = (($i$034) + 1)|0;
	    $arrayidx28 = (($ar) + ($i$034<<2)|0);
	    HEAP32[$arrayidx28>>2] = $add$ptr;
	    $sub$i = (($p$sroa$1$4$load4631) + -1)|0;
	    $cmp$i$i = ($sub$i|0)==(0);
	    if ($cmp$i$i) {
	     $call292510 = 32;
	     label = 15;
	    } else {
	     $and3$i$i = $sub$i & 1;
	     $lnot4$i$i = ($and3$i$i|0)==(0);
	     if ($lnot4$i$i) {
	      $nTrailingZeros$06$i$i = 0;$x$addr$05$i$i = $sub$i;
	      while(1) {
	       $inc$i$i = (($nTrailingZeros$06$i$i) + 1)|0;
	       $shr$i$i = $x$addr$05$i$i >>> 1;
	       $and$i$i = $shr$i$i & 1;
	       $lnot$i$i = ($and$i$i|0)==(0);
	       if ($lnot$i$i) {
	        $nTrailingZeros$06$i$i = $inc$i$i;$x$addr$05$i$i = $shr$i$i;
	       } else {
	        break;
	       }
	      }
	      $cmp$i = ($inc$i$i|0)==(0);
	      if ($cmp$i) {
	       label = 10;
	      } else {
	       $call2925 = $inc$i$i;
	      }
	     } else {
	      label = 10;
	     }
	     if ((label|0) == 10) {
	      label = 0;
	      $cmp$i3$i = ($p$sroa$1$4$load5728|0)==(0);
	      if ($cmp$i3$i) {
	       $retval$0$i14$i = 32;
	      } else {
	       $and3$i4$i = $p$sroa$1$4$load5728 & 1;
	       $lnot4$i5$i = ($and3$i4$i|0)==(0);
	       if ($lnot4$i5$i) {
	        $nTrailingZeros$06$i7$i = 0;$x$addr$05$i8$i = $p$sroa$1$4$load5728;
	        while(1) {
	         $inc$i9$i = (($nTrailingZeros$06$i7$i) + 1)|0;
	         $shr$i10$i = $x$addr$05$i8$i >>> 1;
	         $and$i11$i = $shr$i10$i & 1;
	         $lnot$i12$i = ($and$i11$i|0)==(0);
	         if ($lnot$i12$i) {
	          $nTrailingZeros$06$i7$i = $inc$i9$i;$x$addr$05$i8$i = $shr$i10$i;
	         } else {
	          $retval$0$i14$i = $inc$i9$i;
	          break;
	         }
	        }
	       } else {
	        $retval$0$i14$i = 0;
	       }
	      }
	      $add$i = (($retval$0$i14$i) + 32)|0;
	      $cmp3$i = ($retval$0$i14$i|0)==(0);
	      $$add$i = $cmp3$i ? 0 : $add$i;
	      $call2925 = $$add$i;
	     }
	     $cmp$i34 = ($call2925>>>0)>(31);
	     if ($cmp$i34) {
	      $call292510 = $call2925;
	      label = 15;
	     } else {
	      $3 = $p$sroa$1$4$load4631;$4 = $p$sroa$1$4$load5728;$call29259 = $call2925;$n$addr$0$i = $call2925;
	     }
	    }
	    if ((label|0) == 15) {
	     label = 0;
	     $sub$i36 = (($call292510) + -32)|0;
	     $3 = $p$sroa$1$4$load5728;$4 = 0;$call29259 = $call292510;$n$addr$0$i = $sub$i36;
	    }
	    $shr$i = $3 >>> $n$addr$0$i;
	    $sub5$i = (32 - ($n$addr$0$i))|0;
	    $shl$i = $4 << $sub5$i;
	    $or$i = $shl$i | $shr$i;
	    $shr8$i = $4 >>> $n$addr$0$i;
	    $add = (($call29259) + ($pshift$addr$033))|0;
	    $cmp6 = ($or$i|0)==(1);
	    $cmp8 = ($shr8$i|0)==(0);
	    $or$cond12 = $cmp6 & $cmp8;
	    if ($or$cond12) {
	     $head$addr$0$lcssa45 = $add$ptr;$i$0$lcssa46 = $inc;$pshift$addr$0$lcssa47 = $add;
	     break L1;
	    }
	    $$pre = HEAP32[$ar>>2]|0;
	    $1 = $$pre;$head$addr$035 = $add$ptr;$i$034 = $inc;$p$sroa$1$4$load4631 = $or$i;$p$sroa$1$4$load5728 = $shr8$i;$pshift$addr$033 = $add;$trusty$addr$032 = 0;
	   }
	  }
	 } while(0);
	 if ((label|0) == 18) {
	  $tobool31 = ($trusty$addr$0$lcssa|0)==(0);
	  if ($tobool31) {
	   $head$addr$0$lcssa45 = $head$addr$0$lcssa;$i$0$lcssa46 = $i$0$lcssa;$pshift$addr$0$lcssa47 = $pshift$addr$0$lcssa;
	  } else {
	   STACKTOP = sp;return;
	  }
	 }
	 $cmp$i41 = ($i$0$lcssa46|0)<(2);
	 L31: do {
	  if (!($cmp$i41)) {
	   $arrayidx$i42 = (($ar) + ($i$0$lcssa46<<2)|0);
	   HEAP32[$arrayidx$i42>>2] = $tmp$i40;
	   $tobool21$i43 = ($width|0)==(0);
	   if (!($tobool21$i43)) {
	    $cmp619$i45 = ($i$0$lcssa46|0)>(0);
	    if ($cmp619$i45) {
	     $9 = $tmp$i40;$width$addr$022$us$i59 = $width;
	    } else {
	     $cmp3$i6420 = ($width>>>0)>(256);
	     $cond$i6521 = $cmp3$i6420 ? 256 : $width;
	     $5 = HEAP32[$ar>>2]|0;
	     _memcpy(($tmp$i40|0),($5|0),($cond$i6521|0))|0;
	     $tobool$i6622 = ($cond$i6521|0)==($width|0);
	     if ($tobool$i6622) {
	      break;
	     } else {
	      $cond$i6524 = $cond$i6521;$width$addr$022$i6323 = $width;
	     }
	     while(1) {
	      $sub$i68 = (($width$addr$022$i6323) - ($cond$i6524))|0;
	      $cmp3$i64 = ($sub$i68>>>0)>(256);
	      $cond$i65 = $cmp3$i64 ? 256 : $sub$i68;
	      _memcpy(($tmp$i40|0),($5|0),($cond$i65|0))|0;
	      $tobool$i66 = ($sub$i68|0)==($cond$i65|0);
	      if ($tobool$i66) {
	       break L31;
	      } else {
	       $cond$i6524 = $cond$i65;$width$addr$022$i6323 = $sub$i68;
	      }
	     }
	    }
	    while(1) {
	     $cmp3$us$i60 = ($width$addr$022$us$i59>>>0)>(256);
	     $cond$us$i61 = $cmp3$us$i60 ? 256 : $width$addr$022$us$i59;
	     $8 = HEAP32[$ar>>2]|0;
	     _memcpy(($9|0),($8|0),($cond$us$i61|0))|0;
	     $7 = $8;$i$020$us$i52 = 0;
	     while(1) {
	      $arrayidx7$us$i53 = (($ar) + ($i$020$us$i52<<2)|0);
	      $add$us$i54 = (($i$020$us$i52) + 1)|0;
	      $arrayidx8$us$i55 = (($ar) + ($add$us$i54<<2)|0);
	      $6 = HEAP32[$arrayidx8$us$i55>>2]|0;
	      _memcpy(($7|0),($6|0),($cond$us$i61|0))|0;
	      $add$ptr$us$i56 = (($7) + ($cond$us$i61)|0);
	      HEAP32[$arrayidx7$us$i53>>2] = $add$ptr$us$i56;
	      $exitcond$i57 = ($add$us$i54|0)==($i$0$lcssa46|0);
	      if ($exitcond$i57) {
	       break;
	      } else {
	       $7 = $6;$i$020$us$i52 = $add$us$i54;
	      }
	     }
	     $tobool$us$i47 = ($width$addr$022$us$i59|0)==($cond$us$i61|0);
	     if ($tobool$us$i47) {
	      break L31;
	     }
	     $sub$us$i49 = (($width$addr$022$us$i59) - ($cond$us$i61))|0;
	     $$pre$i50 = HEAP32[$arrayidx$i42>>2]|0;
	     $9 = $$pre$i50;$width$addr$022$us$i59 = $sub$us$i49;
	    }
	   }
	  }
	 } while(0);
	 HEAP32[$ar$i>>2] = $head$addr$0$lcssa45;
	 $cmp118$i = ($pshift$addr$0$lcssa47|0)>(1);
	 L45: do {
	  if ($cmp118$i) {
	   $11 = $head$addr$0$lcssa45;$head$addr$020$i = $head$addr$0$lcssa45;$i$021$i = 1;$pshift$addr$019$i = $pshift$addr$0$lcssa47;
	   while(1) {
	    $add$ptr$i = (($head$addr$020$i) + ($idx$neg14)|0);
	    $sub$i26 = (($pshift$addr$019$i) + -2)|0;
	    $arrayidx4$i = (($lp) + ($sub$i26<<2)|0);
	    $10 = HEAP32[$arrayidx4$i>>2]|0;
	    $sum$i = (($10) + ($width))|0;
	    $add$ptr$sum$i = (0 - ($sum$i))|0;
	    $add$ptr6$i = (($head$addr$020$i) + ($add$ptr$sum$i)|0);
	    $call$i = (FUNCTION_TABLE_iii[$cmp & 31]($11,$add$ptr6$i)|0);
	    $cmp8$i = ($call$i|0)>(-1);
	    if ($cmp8$i) {
	     $call10$i = (FUNCTION_TABLE_iii[$cmp & 31]($11,$add$ptr$i)|0);
	     $cmp11$i = ($call10$i|0)>(-1);
	     if ($cmp11$i) {
	      $i$0$lcssa$i = $i$021$i;
	      break;
	     }
	    }
	    $call12$i = (FUNCTION_TABLE_iii[$cmp & 31]($add$ptr6$i,$add$ptr$i)|0);
	    $cmp13$i = ($call12$i|0)>(-1);
	    $inc$i = (($i$021$i) + 1)|0;
	    $arrayidx15$i = (($ar$i) + ($i$021$i<<2)|0);
	    if ($cmp13$i) {
	     HEAP32[$arrayidx15$i>>2] = $add$ptr6$i;
	     $sub16$i = (($pshift$addr$019$i) + -1)|0;
	     $head$addr$0$be$i = $add$ptr6$i;$pshift$addr$0$be$i = $sub16$i;
	    } else {
	     HEAP32[$arrayidx15$i>>2] = $add$ptr$i;
	     $head$addr$0$be$i = $add$ptr$i;$pshift$addr$0$be$i = $sub$i26;
	    }
	    $cmp1$i = ($pshift$addr$0$be$i|0)>(1);
	    if (!($cmp1$i)) {
	     $i$0$lcssa$i = $inc$i;
	     break;
	    }
	    $$pre$i = HEAP32[$ar$i>>2]|0;
	    $11 = $$pre$i;$head$addr$020$i = $head$addr$0$be$i;$i$021$i = $inc$i;$pshift$addr$019$i = $pshift$addr$0$be$i;
	   }
	   $cmp$i27 = ($i$0$lcssa$i|0)<(2);
	   if ($cmp$i27) {
	    $17 = $tmp$i;
	   } else {
	    $arrayidx$i28 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
	    HEAP32[$arrayidx$i28>>2] = $tmp$i;
	    $tobool21$i = ($width|0)==(0);
	    if ($tobool21$i) {
	     $17 = $tmp$i;
	    } else {
	     $cmp619$i = ($i$0$lcssa$i|0)>(0);
	     if ($cmp619$i) {
	      $16 = $tmp$i;$width$addr$022$us$i = $width;
	     } else {
	      $cmp3$i3214 = ($width>>>0)>(256);
	      $cond$i15 = $cmp3$i3214 ? 256 : $width;
	      $12 = HEAP32[$ar$i>>2]|0;
	      _memcpy(($tmp$i|0),($12|0),($cond$i15|0))|0;
	      $tobool$i16 = ($cond$i15|0)==($width|0);
	      if ($tobool$i16) {
	       $17 = $tmp$i;
	       break;
	      } else {
	       $cond$i18 = $cond$i15;$width$addr$022$i17 = $width;
	      }
	      while(1) {
	       $sub$i33 = (($width$addr$022$i17) - ($cond$i18))|0;
	       $cmp3$i32 = ($sub$i33>>>0)>(256);
	       $cond$i = $cmp3$i32 ? 256 : $sub$i33;
	       _memcpy(($tmp$i|0),($12|0),($cond$i|0))|0;
	       $tobool$i = ($sub$i33|0)==($cond$i|0);
	       if ($tobool$i) {
	        $17 = $tmp$i;
	        break L45;
	       } else {
	        $cond$i18 = $cond$i;$width$addr$022$i17 = $sub$i33;
	       }
	      }
	     }
	     while(1) {
	      $cmp3$us$i = ($width$addr$022$us$i>>>0)>(256);
	      $cond$us$i = $cmp3$us$i ? 256 : $width$addr$022$us$i;
	      $15 = HEAP32[$ar$i>>2]|0;
	      _memcpy(($16|0),($15|0),($cond$us$i|0))|0;
	      $14 = $15;$i$020$us$i = 0;
	      while(1) {
	       $arrayidx7$us$i = (($ar$i) + ($i$020$us$i<<2)|0);
	       $add$us$i = (($i$020$us$i) + 1)|0;
	       $arrayidx8$us$i = (($ar$i) + ($add$us$i<<2)|0);
	       $13 = HEAP32[$arrayidx8$us$i>>2]|0;
	       _memcpy(($14|0),($13|0),($cond$us$i|0))|0;
	       $add$ptr$us$i = (($14) + ($cond$us$i)|0);
	       HEAP32[$arrayidx7$us$i>>2] = $add$ptr$us$i;
	       $exitcond$i = ($add$us$i|0)==($i$0$lcssa$i|0);
	       if ($exitcond$i) {
	        break;
	       } else {
	        $14 = $13;$i$020$us$i = $add$us$i;
	       }
	      }
	      $tobool$us$i = ($width$addr$022$us$i|0)==($cond$us$i|0);
	      if ($tobool$us$i) {
	       $17 = $tmp$i;
	       break L45;
	      }
	      $sub$us$i = (($width$addr$022$us$i) - ($cond$us$i))|0;
	      $$pre$i31 = HEAP32[$arrayidx$i28>>2]|0;
	      $16 = $$pre$i31;$width$addr$022$us$i = $sub$us$i;
	     }
	    }
	   }
	  } else {
	   $17 = $tmp$i;
	  }
	 } while(0);
	 STACKTOP = sp;return;
	}
	function _wcstof($s,$p) {
	 $s = $s|0;
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr7$i = 0, $buf$i = 0, $buf1$i = 0, $buf_size$i = 0, $call$i = 0, $call2$i = 0.0, $cond$i = 0, $conv = 0.0, $cookie$i = 0, $f$i = 0, $incdec$ptr$i = 0, $lock$i = 0, $read$i = 0, $rend$i = 0;
	 var $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $t$0$i = 0, $tobool$i = 0, $tobool3$i = 0, $tobool6$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$i = sp + 112|0;
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$f$i>>2] = 0;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = 0;
	 $add$ptr$i = (($buf$i) + 4|0);
	 $buf1$i = (($f$i) + 44|0);
	 HEAP32[$buf1$i>>2] = $add$ptr$i;
	 $buf_size$i = (($f$i) + 48|0);
	 HEAP32[$buf_size$i>>2] = 60;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 $read$i = (($f$i) + 32|0);
	 HEAP32[$read$i>>2] = 21;
	 $t$0$i = $s;
	 while(1) {
	  $0 = HEAP32[$t$0$i>>2]|0;
	  $call$i = (_iswspace($0)|0);
	  $tobool$i = ($call$i|0)==(0);
	  $incdec$ptr$i = (($t$0$i) + 4|0);
	  if ($tobool$i) {
	   break;
	  } else {
	   $t$0$i = $incdec$ptr$i;
	  }
	 }
	 $cookie$i = (($f$i) + 84|0);
	 HEAP32[$cookie$i>>2] = $t$0$i;
	 ___shlim($f$i,0);
	 $call2$i = (+___floatscan($f$i,0,1));
	 $tobool3$i = ($p|0)==(0|0);
	 if ($tobool3$i) {
	  $conv = $call2$i;
	  STACKTOP = sp;return (+$conv);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $1 = HEAP32[$shcnt$i>>2]|0;
	 $2 = HEAP32[$rpos$i>>2]|0;
	 $3 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $2;
	 $sub$ptr$rhs$cast$i = $3;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($1))|0;
	 $tobool6$i = ($add$i|0)==(0);
	 if ($tobool6$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr7$i = (($t$0$i) + ($add$i<<2)|0);
	  $cond$i = $add$ptr7$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 $conv = $call2$i;
	 STACKTOP = sp;return (+$conv);
	}
	function _wcstod($s,$p) {
	 $s = $s|0;
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr7$i = 0, $buf$i = 0, $buf1$i = 0, $buf_size$i = 0, $call$i = 0, $call2$i = 0.0, $cond$i = 0, $cookie$i = 0, $f$i = 0, $incdec$ptr$i = 0, $lock$i = 0, $read$i = 0, $rend$i = 0, $rpos$i = 0;
	 var $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $t$0$i = 0, $tobool$i = 0, $tobool3$i = 0, $tobool6$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$i = sp + 112|0;
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$f$i>>2] = 0;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = 0;
	 $add$ptr$i = (($buf$i) + 4|0);
	 $buf1$i = (($f$i) + 44|0);
	 HEAP32[$buf1$i>>2] = $add$ptr$i;
	 $buf_size$i = (($f$i) + 48|0);
	 HEAP32[$buf_size$i>>2] = 60;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 $read$i = (($f$i) + 32|0);
	 HEAP32[$read$i>>2] = 21;
	 $t$0$i = $s;
	 while(1) {
	  $0 = HEAP32[$t$0$i>>2]|0;
	  $call$i = (_iswspace($0)|0);
	  $tobool$i = ($call$i|0)==(0);
	  $incdec$ptr$i = (($t$0$i) + 4|0);
	  if ($tobool$i) {
	   break;
	  } else {
	   $t$0$i = $incdec$ptr$i;
	  }
	 }
	 $cookie$i = (($f$i) + 84|0);
	 HEAP32[$cookie$i>>2] = $t$0$i;
	 ___shlim($f$i,0);
	 $call2$i = (+___floatscan($f$i,1,1));
	 $tobool3$i = ($p|0)==(0|0);
	 if ($tobool3$i) {
	  STACKTOP = sp;return (+$call2$i);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $1 = HEAP32[$shcnt$i>>2]|0;
	 $2 = HEAP32[$rpos$i>>2]|0;
	 $3 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $2;
	 $sub$ptr$rhs$cast$i = $3;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($1))|0;
	 $tobool6$i = ($add$i|0)==(0);
	 if ($tobool6$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr7$i = (($t$0$i) + ($add$i<<2)|0);
	  $cond$i = $add$ptr7$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 STACKTOP = sp;return (+$call2$i);
	}
	function _wcstold($s,$p) {
	 $s = $s|0;
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr7$i = 0, $buf$i = 0, $buf1$i = 0, $buf_size$i = 0, $call$i = 0, $call2$i = 0.0, $cond$i = 0, $cookie$i = 0, $f$i = 0, $incdec$ptr$i = 0, $lock$i = 0, $read$i = 0, $rend$i = 0, $rpos$i = 0;
	 var $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $t$0$i = 0, $tobool$i = 0, $tobool3$i = 0, $tobool6$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$i = sp + 112|0;
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$f$i>>2] = 0;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = 0;
	 $add$ptr$i = (($buf$i) + 4|0);
	 $buf1$i = (($f$i) + 44|0);
	 HEAP32[$buf1$i>>2] = $add$ptr$i;
	 $buf_size$i = (($f$i) + 48|0);
	 HEAP32[$buf_size$i>>2] = 60;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 $read$i = (($f$i) + 32|0);
	 HEAP32[$read$i>>2] = 21;
	 $t$0$i = $s;
	 while(1) {
	  $0 = HEAP32[$t$0$i>>2]|0;
	  $call$i = (_iswspace($0)|0);
	  $tobool$i = ($call$i|0)==(0);
	  $incdec$ptr$i = (($t$0$i) + 4|0);
	  if ($tobool$i) {
	   break;
	  } else {
	   $t$0$i = $incdec$ptr$i;
	  }
	 }
	 $cookie$i = (($f$i) + 84|0);
	 HEAP32[$cookie$i>>2] = $t$0$i;
	 ___shlim($f$i,0);
	 $call2$i = (+___floatscan($f$i,2,1));
	 $tobool3$i = ($p|0)==(0|0);
	 if ($tobool3$i) {
	  STACKTOP = sp;return (+$call2$i);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $1 = HEAP32[$shcnt$i>>2]|0;
	 $2 = HEAP32[$rpos$i>>2]|0;
	 $3 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $2;
	 $sub$ptr$rhs$cast$i = $3;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($1))|0;
	 $tobool6$i = ($add$i|0)==(0);
	 if ($tobool6$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr7$i = (($t$0$i) + ($add$i<<2)|0);
	  $cond$i = $add$ptr7$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 STACKTOP = sp;return (+$call2$i);
	}
	function _do_read134($f,$buf,$len) {
	 $f = $f|0;
	 $buf = $buf|0;
	 $len = $len|0;
	 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $add$ptr10 = 0, $arrayidx1 = 0, $arrayidx7 = 0, $buf8$pre = 0, $buf_size = 0, $cmp = 0, $cmp21 = 0, $cmp4 = 0, $cookie = 0, $i$0$lcssa = 0;
	 var $i$022 = 0, $inc = 0, $incdec$ptr = 0, $or$cond = 0, $phitmp = 0, $phitmp$ = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $tobool = 0, $tobool12 = 0, $tobool13 = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cookie = (($f) + 84|0);
	 $0 = HEAP32[$cookie>>2]|0;
	 $1 = HEAP32[$0>>2]|0;
	 $tobool = ($1|0)!=(0);
	 $$ = $tobool ? $0 : 154096;
	 $buf_size = (($f) + 48|0);
	 $2 = HEAP32[$buf_size>>2]|0;
	 $cmp21 = ($2|0)==(0);
	 $buf8$pre = (($f) + 44|0);
	 L1: do {
	  if ($cmp21) {
	   $i$0$lcssa = 0;
	  } else {
	   $i$022 = 0;
	   while(1) {
	    $arrayidx1 = (($$) + ($i$022<<2)|0);
	    $3 = HEAP32[$arrayidx1>>2]|0;
	    $tobool2 = ($3|0)==(0);
	    if ($tobool2) {
	     $i$0$lcssa = $i$022;
	     break L1;
	    }
	    $cmp4 = ($3|0)<(128);
	    $phitmp = $3&255;
	    $phitmp$ = $cmp4 ? $phitmp : 64;
	    $4 = HEAP32[$buf8$pre>>2]|0;
	    $arrayidx7 = (($4) + ($i$022)|0);
	    HEAP8[$arrayidx7>>0] = $phitmp$;
	    $inc = (($i$022) + 1)|0;
	    $5 = HEAP32[$buf_size>>2]|0;
	    $cmp = ($inc>>>0)<($5>>>0);
	    if ($cmp) {
	     $i$022 = $inc;
	    } else {
	     $i$0$lcssa = $inc;
	     break;
	    }
	   }
	  }
	 } while(0);
	 $6 = HEAP32[$buf8$pre>>2]|0;
	 $rpos = (($f) + 4|0);
	 HEAP32[$rpos>>2] = $6;
	 $add$ptr = (($6) + ($i$0$lcssa)|0);
	 $rend = (($f) + 8|0);
	 HEAP32[$rend>>2] = $add$ptr;
	 $add$ptr10 = (($$) + ($i$0$lcssa<<2)|0);
	 HEAP32[$cookie>>2] = $add$ptr10;
	 $tobool12 = ($i$0$lcssa|0)==(0);
	 $tobool13 = ($len|0)==(0);
	 $or$cond = $tobool12 | $tobool13;
	 if ($or$cond) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $incdec$ptr = (($6) + 1|0);
	 HEAP32[$rpos>>2] = $incdec$ptr;
	 $7 = HEAP8[$6>>0]|0;
	 HEAP8[$buf>>0] = $7;
	 $retval$0 = 1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _wcstoull($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr7$i = 0, $buf$i = 0, $buf1$i = 0, $buf_size$i = 0, $call$i = 0, $cond$i = 0, $cookie$i = 0, $f$i = 0, $incdec$ptr$i = 0, $lock$i = 0, $read$i = 0, $rend$i = 0;
	 var $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $t$0$i = 0, $tobool$i = 0, $tobool3$i = 0, $tobool6$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$i = sp + 112|0;
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$f$i>>2] = 0;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = 0;
	 $add$ptr$i = (($buf$i) + 4|0);
	 $buf1$i = (($f$i) + 44|0);
	 HEAP32[$buf1$i>>2] = $add$ptr$i;
	 $buf_size$i = (($f$i) + 48|0);
	 HEAP32[$buf_size$i>>2] = 60;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 $read$i = (($f$i) + 32|0);
	 HEAP32[$read$i>>2] = 22;
	 $t$0$i = $s;
	 while(1) {
	  $0 = HEAP32[$t$0$i>>2]|0;
	  $call$i = (_iswspace($0)|0);
	  $tobool$i = ($call$i|0)==(0);
	  $incdec$ptr$i = (($t$0$i) + 4|0);
	  if ($tobool$i) {
	   break;
	  } else {
	   $t$0$i = $incdec$ptr$i;
	  }
	 }
	 $cookie$i = (($f$i) + 84|0);
	 HEAP32[$cookie$i>>2] = $t$0$i;
	 ___shlim($f$i,0);
	 $1 = (___intscan($f$i,$base,1,-1,-1)|0);
	 $2 = tempRet0;
	 $tobool3$i = ($p|0)==(0|0);
	 if ($tobool3$i) {
	  tempRet0 = $2;
	  STACKTOP = sp;return ($1|0);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $3 = HEAP32[$shcnt$i>>2]|0;
	 $4 = HEAP32[$rpos$i>>2]|0;
	 $5 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $4;
	 $sub$ptr$rhs$cast$i = $5;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($3))|0;
	 $tobool6$i = ($add$i|0)==(0);
	 if ($tobool6$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr7$i = (($t$0$i) + ($add$i<<2)|0);
	  $cond$i = $add$ptr7$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 tempRet0 = $2;
	 STACKTOP = sp;return ($1|0);
	}
	function _wcstoll($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr7$i = 0, $buf$i = 0, $buf1$i = 0, $buf_size$i = 0, $call$i = 0, $cond$i = 0, $cookie$i = 0, $f$i = 0, $incdec$ptr$i = 0, $lock$i = 0, $read$i = 0, $rend$i = 0;
	 var $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $t$0$i = 0, $tobool$i = 0, $tobool3$i = 0, $tobool6$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$i = sp + 112|0;
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$f$i>>2] = 0;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = 0;
	 $add$ptr$i = (($buf$i) + 4|0);
	 $buf1$i = (($f$i) + 44|0);
	 HEAP32[$buf1$i>>2] = $add$ptr$i;
	 $buf_size$i = (($f$i) + 48|0);
	 HEAP32[$buf_size$i>>2] = 60;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 $read$i = (($f$i) + 32|0);
	 HEAP32[$read$i>>2] = 22;
	 $t$0$i = $s;
	 while(1) {
	  $0 = HEAP32[$t$0$i>>2]|0;
	  $call$i = (_iswspace($0)|0);
	  $tobool$i = ($call$i|0)==(0);
	  $incdec$ptr$i = (($t$0$i) + 4|0);
	  if ($tobool$i) {
	   break;
	  } else {
	   $t$0$i = $incdec$ptr$i;
	  }
	 }
	 $cookie$i = (($f$i) + 84|0);
	 HEAP32[$cookie$i>>2] = $t$0$i;
	 ___shlim($f$i,0);
	 $1 = (___intscan($f$i,$base,1,0,-2147483648)|0);
	 $2 = tempRet0;
	 $tobool3$i = ($p|0)==(0|0);
	 if ($tobool3$i) {
	  tempRet0 = $2;
	  STACKTOP = sp;return ($1|0);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $3 = HEAP32[$shcnt$i>>2]|0;
	 $4 = HEAP32[$rpos$i>>2]|0;
	 $5 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $4;
	 $sub$ptr$rhs$cast$i = $5;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($3))|0;
	 $tobool6$i = ($add$i|0)==(0);
	 if ($tobool6$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr7$i = (($t$0$i) + ($add$i<<2)|0);
	  $cond$i = $add$ptr7$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 tempRet0 = $2;
	 STACKTOP = sp;return ($1|0);
	}
	function _wcstoul($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr7$i = 0, $buf$i = 0, $buf1$i = 0, $buf_size$i = 0, $call$i = 0, $cond$i = 0, $cookie$i = 0, $f$i = 0, $incdec$ptr$i = 0, $lock$i = 0, $read$i = 0, $rend$i = 0;
	 var $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $t$0$i = 0, $tobool$i = 0, $tobool3$i = 0, $tobool6$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$i = sp + 112|0;
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$f$i>>2] = 0;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = 0;
	 $add$ptr$i = (($buf$i) + 4|0);
	 $buf1$i = (($f$i) + 44|0);
	 HEAP32[$buf1$i>>2] = $add$ptr$i;
	 $buf_size$i = (($f$i) + 48|0);
	 HEAP32[$buf_size$i>>2] = 60;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 $read$i = (($f$i) + 32|0);
	 HEAP32[$read$i>>2] = 22;
	 $t$0$i = $s;
	 while(1) {
	  $0 = HEAP32[$t$0$i>>2]|0;
	  $call$i = (_iswspace($0)|0);
	  $tobool$i = ($call$i|0)==(0);
	  $incdec$ptr$i = (($t$0$i) + 4|0);
	  if ($tobool$i) {
	   break;
	  } else {
	   $t$0$i = $incdec$ptr$i;
	  }
	 }
	 $cookie$i = (($f$i) + 84|0);
	 HEAP32[$cookie$i>>2] = $t$0$i;
	 ___shlim($f$i,0);
	 $1 = (___intscan($f$i,$base,1,-1,0)|0);
	 $2 = tempRet0;
	 $tobool3$i = ($p|0)==(0|0);
	 if ($tobool3$i) {
	  STACKTOP = sp;return ($1|0);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $3 = HEAP32[$shcnt$i>>2]|0;
	 $4 = HEAP32[$rpos$i>>2]|0;
	 $5 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $4;
	 $sub$ptr$rhs$cast$i = $5;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($3))|0;
	 $tobool6$i = ($add$i|0)==(0);
	 if ($tobool6$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr7$i = (($t$0$i) + ($add$i<<2)|0);
	  $cond$i = $add$ptr7$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 STACKTOP = sp;return ($1|0);
	}
	function _wcstol($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr7$i = 0, $buf$i = 0, $buf1$i = 0, $buf_size$i = 0, $call$i = 0, $cond$i = 0, $cookie$i = 0, $f$i = 0, $incdec$ptr$i = 0, $lock$i = 0, $read$i = 0, $rend$i = 0;
	 var $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $t$0$i = 0, $tobool$i = 0, $tobool3$i = 0, $tobool6$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$i = sp + 112|0;
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$f$i>>2] = 0;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = 0;
	 $add$ptr$i = (($buf$i) + 4|0);
	 $buf1$i = (($f$i) + 44|0);
	 HEAP32[$buf1$i>>2] = $add$ptr$i;
	 $buf_size$i = (($f$i) + 48|0);
	 HEAP32[$buf_size$i>>2] = 60;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 $read$i = (($f$i) + 32|0);
	 HEAP32[$read$i>>2] = 22;
	 $t$0$i = $s;
	 while(1) {
	  $0 = HEAP32[$t$0$i>>2]|0;
	  $call$i = (_iswspace($0)|0);
	  $tobool$i = ($call$i|0)==(0);
	  $incdec$ptr$i = (($t$0$i) + 4|0);
	  if ($tobool$i) {
	   break;
	  } else {
	   $t$0$i = $incdec$ptr$i;
	  }
	 }
	 $cookie$i = (($f$i) + 84|0);
	 HEAP32[$cookie$i>>2] = $t$0$i;
	 ___shlim($f$i,0);
	 $1 = (___intscan($f$i,$base,1,-2147483648,0)|0);
	 $2 = tempRet0;
	 $tobool3$i = ($p|0)==(0|0);
	 if ($tobool3$i) {
	  STACKTOP = sp;return ($1|0);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $3 = HEAP32[$shcnt$i>>2]|0;
	 $4 = HEAP32[$rpos$i>>2]|0;
	 $5 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $4;
	 $sub$ptr$rhs$cast$i = $5;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($3))|0;
	 $tobool6$i = ($add$i|0)==(0);
	 if ($tobool6$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr7$i = (($t$0$i) + ($add$i<<2)|0);
	  $cond$i = $add$ptr7$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 STACKTOP = sp;return ($1|0);
	}
	function _wcstoimax($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$i$i = 0, $add$ptr$i$i = 0, $add$ptr7$i$i = 0, $buf$i$i = 0, $buf1$i$i = 0, $buf_size$i$i = 0, $call$i$i = 0, $cond$i$i = 0, $cookie$i$i = 0, $f$i$i = 0, $incdec$ptr$i$i = 0, $lock$i$i = 0, $read$i$i = 0, $rend$i$i = 0;
	 var $rpos$i$i = 0, $shcnt$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $t$0$i$i = 0, $tobool$i$i = 0, $tobool3$i$i = 0, $tobool6$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$i$i = sp + 112|0;
	 $f$i$i = sp;
	 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$f$i$i>>2] = 0;
	 $rend$i$i = (($f$i$i) + 8|0);
	 HEAP32[$rend$i$i>>2] = 0;
	 $rpos$i$i = (($f$i$i) + 4|0);
	 HEAP32[$rpos$i$i>>2] = 0;
	 $add$ptr$i$i = (($buf$i$i) + 4|0);
	 $buf1$i$i = (($f$i$i) + 44|0);
	 HEAP32[$buf1$i$i>>2] = $add$ptr$i$i;
	 $buf_size$i$i = (($f$i$i) + 48|0);
	 HEAP32[$buf_size$i$i>>2] = 60;
	 $lock$i$i = (($f$i$i) + 76|0);
	 HEAP32[$lock$i$i>>2] = -1;
	 $read$i$i = (($f$i$i) + 32|0);
	 HEAP32[$read$i$i>>2] = 22;
	 $t$0$i$i = $s;
	 while(1) {
	  $0 = HEAP32[$t$0$i$i>>2]|0;
	  $call$i$i = (_iswspace($0)|0);
	  $tobool$i$i = ($call$i$i|0)==(0);
	  $incdec$ptr$i$i = (($t$0$i$i) + 4|0);
	  if ($tobool$i$i) {
	   break;
	  } else {
	   $t$0$i$i = $incdec$ptr$i$i;
	  }
	 }
	 $cookie$i$i = (($f$i$i) + 84|0);
	 HEAP32[$cookie$i$i>>2] = $t$0$i$i;
	 ___shlim($f$i$i,0);
	 $1 = (___intscan($f$i$i,$base,1,0,-2147483648)|0);
	 $2 = tempRet0;
	 $tobool3$i$i = ($p|0)==(0|0);
	 if ($tobool3$i$i) {
	  tempRet0 = $2;
	  STACKTOP = sp;return ($1|0);
	 }
	 $shcnt$i$i = (($f$i$i) + 108|0);
	 $3 = HEAP32[$shcnt$i$i>>2]|0;
	 $4 = HEAP32[$rpos$i$i>>2]|0;
	 $5 = HEAP32[$rend$i$i>>2]|0;
	 $sub$ptr$lhs$cast$i$i = $4;
	 $sub$ptr$rhs$cast$i$i = $5;
	 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
	 $add$i$i = (($sub$ptr$sub$i$i) + ($3))|0;
	 $tobool6$i$i = ($add$i$i|0)==(0);
	 if ($tobool6$i$i) {
	  $cond$i$i = $s;
	 } else {
	  $add$ptr7$i$i = (($t$0$i$i) + ($add$i$i<<2)|0);
	  $cond$i$i = $add$ptr7$i$i;
	 }
	 HEAP32[$p>>2] = $cond$i$i;
	 tempRet0 = $2;
	 STACKTOP = sp;return ($1|0);
	}
	function _wcstoumax($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$i$i = 0, $add$ptr$i$i = 0, $add$ptr7$i$i = 0, $buf$i$i = 0, $buf1$i$i = 0, $buf_size$i$i = 0, $call$i$i = 0, $cond$i$i = 0, $cookie$i$i = 0, $f$i$i = 0, $incdec$ptr$i$i = 0, $lock$i$i = 0, $read$i$i = 0, $rend$i$i = 0;
	 var $rpos$i$i = 0, $shcnt$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $t$0$i$i = 0, $tobool$i$i = 0, $tobool3$i$i = 0, $tobool6$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $buf$i$i = sp + 112|0;
	 $f$i$i = sp;
	 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 HEAP32[$f$i$i>>2] = 0;
	 $rend$i$i = (($f$i$i) + 8|0);
	 HEAP32[$rend$i$i>>2] = 0;
	 $rpos$i$i = (($f$i$i) + 4|0);
	 HEAP32[$rpos$i$i>>2] = 0;
	 $add$ptr$i$i = (($buf$i$i) + 4|0);
	 $buf1$i$i = (($f$i$i) + 44|0);
	 HEAP32[$buf1$i$i>>2] = $add$ptr$i$i;
	 $buf_size$i$i = (($f$i$i) + 48|0);
	 HEAP32[$buf_size$i$i>>2] = 60;
	 $lock$i$i = (($f$i$i) + 76|0);
	 HEAP32[$lock$i$i>>2] = -1;
	 $read$i$i = (($f$i$i) + 32|0);
	 HEAP32[$read$i$i>>2] = 22;
	 $t$0$i$i = $s;
	 while(1) {
	  $0 = HEAP32[$t$0$i$i>>2]|0;
	  $call$i$i = (_iswspace($0)|0);
	  $tobool$i$i = ($call$i$i|0)==(0);
	  $incdec$ptr$i$i = (($t$0$i$i) + 4|0);
	  if ($tobool$i$i) {
	   break;
	  } else {
	   $t$0$i$i = $incdec$ptr$i$i;
	  }
	 }
	 $cookie$i$i = (($f$i$i) + 84|0);
	 HEAP32[$cookie$i$i>>2] = $t$0$i$i;
	 ___shlim($f$i$i,0);
	 $1 = (___intscan($f$i$i,$base,1,-1,-1)|0);
	 $2 = tempRet0;
	 $tobool3$i$i = ($p|0)==(0|0);
	 if ($tobool3$i$i) {
	  tempRet0 = $2;
	  STACKTOP = sp;return ($1|0);
	 }
	 $shcnt$i$i = (($f$i$i) + 108|0);
	 $3 = HEAP32[$shcnt$i$i>>2]|0;
	 $4 = HEAP32[$rpos$i$i>>2]|0;
	 $5 = HEAP32[$rend$i$i>>2]|0;
	 $sub$ptr$lhs$cast$i$i = $4;
	 $sub$ptr$rhs$cast$i$i = $5;
	 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
	 $add$i$i = (($sub$ptr$sub$i$i) + ($3))|0;
	 $tobool6$i$i = ($add$i$i|0)==(0);
	 if ($tobool6$i$i) {
	  $cond$i$i = $s;
	 } else {
	  $add$ptr7$i$i = (($t$0$i$i) + ($add$i$i<<2)|0);
	  $cond$i$i = $add$ptr7$i$i;
	 }
	 HEAP32[$p>>2] = $cond$i$i;
	 tempRet0 = $2;
	 STACKTOP = sp;return ($1|0);
	}
	function _do_read136($f,$buf,$len) {
	 $f = $f|0;
	 $buf = $buf|0;
	 $len = $len|0;
	 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $add$ptr10 = 0, $arrayidx1 = 0, $arrayidx7 = 0, $buf8$pre = 0, $buf_size = 0, $cmp = 0, $cmp21 = 0, $cmp4 = 0, $cookie = 0, $i$0$lcssa = 0;
	 var $i$022 = 0, $inc = 0, $incdec$ptr = 0, $or$cond = 0, $phitmp = 0, $phitmp$ = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $tobool = 0, $tobool12 = 0, $tobool13 = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cookie = (($f) + 84|0);
	 $0 = HEAP32[$cookie>>2]|0;
	 $1 = HEAP32[$0>>2]|0;
	 $tobool = ($1|0)!=(0);
	 $$ = $tobool ? $0 : 154104;
	 $buf_size = (($f) + 48|0);
	 $2 = HEAP32[$buf_size>>2]|0;
	 $cmp21 = ($2|0)==(0);
	 $buf8$pre = (($f) + 44|0);
	 L1: do {
	  if ($cmp21) {
	   $i$0$lcssa = 0;
	  } else {
	   $i$022 = 0;
	   while(1) {
	    $arrayidx1 = (($$) + ($i$022<<2)|0);
	    $3 = HEAP32[$arrayidx1>>2]|0;
	    $tobool2 = ($3|0)==(0);
	    if ($tobool2) {
	     $i$0$lcssa = $i$022;
	     break L1;
	    }
	    $cmp4 = ($3|0)<(128);
	    $phitmp = $3&255;
	    $phitmp$ = $cmp4 ? $phitmp : 64;
	    $4 = HEAP32[$buf8$pre>>2]|0;
	    $arrayidx7 = (($4) + ($i$022)|0);
	    HEAP8[$arrayidx7>>0] = $phitmp$;
	    $inc = (($i$022) + 1)|0;
	    $5 = HEAP32[$buf_size>>2]|0;
	    $cmp = ($inc>>>0)<($5>>>0);
	    if ($cmp) {
	     $i$022 = $inc;
	    } else {
	     $i$0$lcssa = $inc;
	     break;
	    }
	   }
	  }
	 } while(0);
	 $6 = HEAP32[$buf8$pre>>2]|0;
	 $rpos = (($f) + 4|0);
	 HEAP32[$rpos>>2] = $6;
	 $add$ptr = (($6) + ($i$0$lcssa)|0);
	 $rend = (($f) + 8|0);
	 HEAP32[$rend>>2] = $add$ptr;
	 $add$ptr10 = (($$) + ($i$0$lcssa<<2)|0);
	 HEAP32[$cookie>>2] = $add$ptr10;
	 $tobool12 = ($i$0$lcssa|0)==(0);
	 $tobool13 = ($len|0)==(0);
	 $or$cond = $tobool12 | $tobool13;
	 if ($or$cond) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $incdec$ptr = (($6) + 1|0);
	 HEAP32[$rpos>>2] = $incdec$ptr;
	 $7 = HEAP8[$6>>0]|0;
	 HEAP8[$buf>>0] = $7;
	 $retval$0 = 1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _bcmp($s1,$s2,$n) {
	 $s1 = $s1|0;
	 $s2 = $s2|0;
	 $n = $n|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_memcmp($s1,$s2,$n)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _bcopy($s1,$s2,$n) {
	 $s1 = $s1|0;
	 $s2 = $s2|0;
	 $n = $n|0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 _memmove(($s2|0),($s1|0),($n|0))|0;
	 STACKTOP = sp;return;
	}
	function _bzero($s,$n) {
	 $s = $s|0;
	 $n = $n|0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 _memset(($s|0),0,($n|0))|0;
	 STACKTOP = sp;return;
	}
	function _index($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strchr($s,$c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _memccpy($dest,$src,$c,$n) {
	 $dest = $dest|0;
	 $src = $src|0;
	 $c = $c|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $and18 = 0, $and19 = 0, $and4 = 0, $and444 = 0, $cmp = 0, $cmp14 = 0, $cmp1437 = 0;
	 var $cmp33 = 0, $cmp43 = 0, $cmp7 = 0, $conv1 = 0, $d$0$lcssa = 0, $d$050 = 0, $d$1$ph = 0, $d$134 = 0, $d$2 = 0, $dec = 0, $dec38 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $incdec$ptr26 = 0, $incdec$ptr39 = 0, $incdec$ptr40 = 0, $incdec$ptr9 = 0, $lnot = 0, $mul = 0, $n$addr$0$lcssa = 0;
	 var $n$addr$049 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2$ph = 0, $n$addr$233 = 0, $neg = 0, $or$cond = 0, $or$cond48 = 0, $retval$0 = 0, $s$0$lcssa = 0, $s$051 = 0, $s$1$ph = 0, $s$135 = 0, $s$2 = 0, $sub = 0, $sub24 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool$not = 0, $tobool$not46 = 0;
	 var $tobool30 = 0, $tobool3032 = 0, $tobool45 = 0, $tobool5 = 0, $tobool52 = 0, $tobool547 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0, $xor = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $conv1 = $c & 255;
	 $0 = $src;
	 $1 = $dest;
	 $2 = $0 ^ $1;
	 $3 = $2 & 3;
	 $cmp = ($3|0)==(0);
	 if ($cmp) {
	  $and444 = $0 & 3;
	  $tobool45 = ($and444|0)!=(0);
	  $tobool$not46 = $tobool45 ^ 1;
	  $tobool547 = ($n|0)==(0);
	  $or$cond48 = $tobool547 | $tobool$not46;
	  L3: do {
	   if ($or$cond48) {
	    $d$0$lcssa = $dest;$n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool$lcssa = $tobool45;
	   } else {
	    $4 = $c&255;
	    $d$050 = $dest;$n$addr$049 = $n;$s$051 = $src;$tobool52 = $tobool45;
	    while(1) {
	     $5 = HEAP8[$s$051>>0]|0;
	     HEAP8[$d$050>>0] = $5;
	     $cmp7 = ($5<<24>>24)==($4<<24>>24);
	     if ($cmp7) {
	      $d$0$lcssa = $d$050;$n$addr$0$lcssa = $n$addr$049;$s$0$lcssa = $s$051;$tobool$lcssa = $tobool52;
	      break L3;
	     }
	     $dec = (($n$addr$049) + -1)|0;
	     $incdec$ptr = (($s$051) + 1|0);
	     $incdec$ptr9 = (($d$050) + 1|0);
	     $6 = $incdec$ptr;
	     $and4 = $6 & 3;
	     $tobool = ($and4|0)!=(0);
	     $tobool$not = $tobool ^ 1;
	     $tobool5 = ($dec|0)==(0);
	     $or$cond = $tobool5 | $tobool$not;
	     if ($or$cond) {
	      $d$0$lcssa = $incdec$ptr9;$n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool$lcssa = $tobool;
	      break;
	     } else {
	      $d$050 = $incdec$ptr9;$n$addr$049 = $dec;$s$051 = $incdec$ptr;$tobool52 = $tobool;
	     }
	    }
	   }
	  } while(0);
	  if ($tobool$lcssa) {
	   $d$2 = $d$0$lcssa;$s$2 = $s$0$lcssa;
	  } else {
	   $mul = Math_imul($conv1, 16843009)|0;
	   $cmp1437 = ($n$addr$0$lcssa>>>0)>(3);
	   L10: do {
	    if ($cmp1437) {
	     $n$addr$138 = $n$addr$0$lcssa;$wd$039 = $d$0$lcssa;$ws$040 = $s$0$lcssa;
	     while(1) {
	      $7 = HEAP32[$ws$040>>2]|0;
	      $xor = $7 ^ $mul;
	      $sub = (($xor) + -16843009)|0;
	      $neg = $xor & -2139062144;
	      $and18 = $neg ^ -2139062144;
	      $and19 = $and18 & $sub;
	      $lnot = ($and19|0)==(0);
	      if (!($lnot)) {
	       $n$addr$1$lcssa = $n$addr$138;$wd$0$lcssa = $wd$039;$ws$0$lcssa = $ws$040;
	       break L10;
	      }
	      HEAP32[$wd$039>>2] = $7;
	      $sub24 = (($n$addr$138) + -4)|0;
	      $incdec$ptr25 = (($ws$040) + 4|0);
	      $incdec$ptr26 = (($wd$039) + 4|0);
	      $cmp14 = ($sub24>>>0)>(3);
	      if ($cmp14) {
	       $n$addr$138 = $sub24;$wd$039 = $incdec$ptr26;$ws$040 = $incdec$ptr25;
	      } else {
	       $n$addr$1$lcssa = $sub24;$wd$0$lcssa = $incdec$ptr26;$ws$0$lcssa = $incdec$ptr25;
	       break;
	      }
	     }
	    } else {
	     $n$addr$1$lcssa = $n$addr$0$lcssa;$wd$0$lcssa = $d$0$lcssa;$ws$0$lcssa = $s$0$lcssa;
	    }
	   } while(0);
	   $d$1$ph = $wd$0$lcssa;$n$addr$2$ph = $n$addr$1$lcssa;$s$1$ph = $ws$0$lcssa;
	   label = 11;
	  }
	 } else {
	  $d$1$ph = $dest;$n$addr$2$ph = $n;$s$1$ph = $src;
	  label = 11;
	 }
	 L15: do {
	  if ((label|0) == 11) {
	   $tobool3032 = ($n$addr$2$ph|0)==(0);
	   if ($tobool3032) {
	    $d$2 = $d$1$ph;$s$2 = $s$1$ph;
	   } else {
	    $8 = $c&255;
	    $d$134 = $d$1$ph;$n$addr$233 = $n$addr$2$ph;$s$135 = $s$1$ph;
	    while(1) {
	     $9 = HEAP8[$s$135>>0]|0;
	     HEAP8[$d$134>>0] = $9;
	     $cmp33 = ($9<<24>>24)==($8<<24>>24);
	     if ($cmp33) {
	      $d$2 = $d$134;$s$2 = $s$135;
	      break L15;
	     }
	     $dec38 = (($n$addr$233) + -1)|0;
	     $incdec$ptr39 = (($s$135) + 1|0);
	     $incdec$ptr40 = (($d$134) + 1|0);
	     $tobool30 = ($dec38|0)==(0);
	     if ($tobool30) {
	      $d$2 = $incdec$ptr40;$s$2 = $incdec$ptr39;
	      break;
	     } else {
	      $d$134 = $incdec$ptr40;$n$addr$233 = $dec38;$s$135 = $incdec$ptr39;
	     }
	    }
	   }
	  }
	 } while(0);
	 $10 = HEAP8[$s$2>>0]|0;
	 $11 = $c&255;
	 $cmp43 = ($10<<24>>24)==($11<<24>>24);
	 $add$ptr = (($d$2) + 1|0);
	 $retval$0 = $cmp43 ? $add$ptr : 0;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _memmem($h0,$k,$n0,$l) {
	 $h0 = $h0|0;
	 $k = $k|0;
	 $n0 = $n0|0;
	 $l = $l|0;
	 var $$pr$i = 0, $$pr$us$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
	 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
	 var $9 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i35 = 0, $add$ptr126$i = 0, $add$ptr126$us$i = 0, $add$ptr129$i = 0, $add$ptr129$us$i = 0, $add$ptr157$i = 0, $add$ptr157$us$i = 0, $add$ptr180$i = 0, $add$ptr180$us$i = 0, $add$ptr20$i = 0, $add$ptr26$i = 0, $add20$i = 0, $add38$i = 0, $add38137$i = 0, $add38137157$i = 0, $add38137157166$i = 0, $add38137157166180$i = 0;
	 var $add38137157170$i = 0, $add38137160$i = 0, $add38140$i = 0, $add42$i = 0, $add54$i = 0, $add6$i = 0, $add6149$i = 0, $add6149184$i = 0, $add6149184193$i = 0, $add6149184193208$i = 0, $add6149184197$i = 0, $add6149187$i = 0, $add6152$i = 0, $add75$i = 0, $add76$i = 0, $add82$i = 0, $add82$mem$0$us$i = 0, $add9$i = 0, $add90$i = 0, $and$i = 0;
	 var $and$us$i = 0, $arrayidx$i$phi$trans$insert = 0, $arrayidx1$i = 0, $arrayidx10$i = 0, $arrayidx100$i = 0, $arrayidx100$us$i = 0, $arrayidx103$i = 0, $arrayidx103$us$i = 0, $arrayidx11$i = 0, $arrayidx114$i = 0, $arrayidx114$us$i = 0, $arrayidx13$i = 0, $arrayidx14$i = 0, $arrayidx140$i = 0, $arrayidx140$us$i = 0, $arrayidx140119$i = 0, $arrayidx140119$us$i = 0, $arrayidx145$i = 0, $arrayidx145$us$i = 0, $arrayidx15$i = 0;
	 var $arrayidx165$i = 0, $arrayidx165$us$i = 0, $arrayidx168$i = 0, $arrayidx168$us$i = 0, $arrayidx18$i = 0, $arrayidx22$i = 0, $arrayidx3$i = 0, $arrayidx4$i = 0, $arrayidx43$i = 0, $arrayidx46$i = 0, $arrayidx5$i = 0, $arrayidx7$i = 0, $arrayidx8$i = 0, $byteset$i = 0, $call = 0, $call$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i47 = 0, $cmp$i67 = 0;
	 var $cmp121$us$i = 0, $cmp132$us$i = 0, $cmp147$i = 0, $cmp147$us$i = 0, $cmp15$i = 0, $cmp161$i = 0, $cmp161$us$i = 0, $cmp17$i = 0, $cmp170$i = 0, $cmp170$us$i = 0, $cmp29$i = 0, $cmp39$i = 0, $cmp39138$i = 0, $cmp39138158$i = 0, $cmp39138158167$i = 0, $cmp4 = 0, $cmp48$i = 0, $cmp51$i = 0, $cmp65$i = 0, $cmp7$i = 0;
	 var $cmp7150$i = 0, $cmp7150185$i = 0, $cmp7150185194$i = 0, $cmp7150185194205$i = 0, $cmp77$i = 0, $cmp86$i = 0, $cmp95$i = 0, $cmp95$us$i = 0, $cmp95127$i = 0, $conv = 0, $conv$i30 = 0, $conv101$i = 0, $conv101$us$i = 0, $conv11$i = 0, $conv12$i = 0, $conv12$i63 = 0, $conv15$i = 0, $conv16$i = 0, $conv18$i = 0, $conv19$i = 0;
	 var $conv2$i = 0, $conv2$i40 = 0, $conv2$i55 = 0, $conv21$i = 0, $conv23$i = 0, $conv28$i = 0, $conv5$i = 0, $conv5$i42 = 0, $conv5$i58 = 0, $conv8$i = 0, $conv9$i = 0, $conv9$i61 = 0, $dec$i = 0, $dec$i70 = 0, $div$i = 0, $div102$i = 0, $div102$us$i = 0, $exitcond$i = 0, $h$addr$0$be$i = 0, $h$addr$0$be$us$i = 0;
	 var $h$addr$0128$i = 0, $h$addr$0128$us$i = 0, $h$addr$016$i = 0, $h$addr$04$i = 0, $h$addr$04$i46 = 0, $hw$0$in5$i = 0, $hw$017$i = 0, $hw$05$i = 0, $i$0154$i = 0, $inc151$i = 0, $inc151$us$i = 0, $inc21$i = 0, $inc34$i = 0, $inc56$i = 0, $inc71$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i71 = 0, $incdec$ptr17$i = 0, $ip$0$ph202$i = 0, $ip$0$ph202256$i = 0;
	 var $ip$0$ph206$i = 0, $ip$1$ip$0$i = 0, $ip$1$ip$0$sub85$i = 0, $ip$1$ph174$i = 0, $ip$1$ph178$i = 0, $jp$0$ph142$ph195$i = 0, $jp$0$ph142186$i = 0, $jp$0$ph207$i = 0, $jp$1$ph131$ph168$i = 0, $jp$1$ph131159$i = 0, $jp$1$ph179$i = 0, $k$0151$i = 0, $k$1139$i = 0, $k$2$us$i = 0, $k$3121$i = 0, $k$3121$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $k$addr$0$i = 0, $k$addr$015$i = 0;
	 var $k$addr$02$i = 0, $k$addr$03$i = 0, $k$addr$06$i = 0, $mem$0$be$us$i = 0, $mem$0129$us$i = 0, $mem0$0$i = 0, $n0$idx = 0, $n0$idx$val = 0, $n0$idx28 = 0, $n0$idx28$val = 0, $n0$idx29 = 0, $n0$idx29$val = 0, $notlhs$i = 0, $notrhs$us$i = 0, $or$cond = 0, $or$cond114$us$i = 0, $or$i = 0, $or$i32 = 0, $or$i41 = 0, $or$i57 = 0;
	 var $or10$i = 0, $or14$i = 0, $or17$i = 0, $or18$i = 0, $or19$i = 0, $or21$i = 0, $or22$i = 0, $or24$i = 0, $or29$i = 0, $or7$i = 0, $or7$i60 = 0, $or9$i = 0, $p$0$ph$ph191$i = 0, $p$0$ph$ph191260$i = 0, $p$0$ph$ph196$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph164$i = 0, $p$1$ph$ph169$i = 0, $p$3$i = 0, $phitmp = 0;
	 var $rem$i = 0, $rem107$i = 0, $rem107$us$i = 0, $retval$0 = 0, $shift$i = 0, $shl$i = 0, $shl$i31 = 0, $shl$i39 = 0, $shl$i54 = 0, $shl10$i = 0, $shl108$i = 0, $shl108$us$i = 0, $shl13$i = 0, $shl13$i65 = 0, $shl16$i = 0, $shl16$i64 = 0, $shl17$i = 0, $shl20$i = 0, $shl23$i = 0, $shl27$i = 0;
	 var $shl3$i = 0, $shl3$i56 = 0, $shl6$i = 0, $shl6$i43 = 0, $shl6$i59 = 0, $sub = 0, $sub$i = 0, $sub$i44 = 0, $sub$i62 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$us$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$us$i = 0, $sub$ptr$sub26 = 0, $sub115$i = 0, $sub115$us$i = 0, $sub124$i = 0;
	 var $sub156$i = 0, $sub156$us$i = 0, $sub164$i = 0, $sub164$us$i = 0, $sub69$i = 0, $sub84$i = 0, $sub85$i = 0, $sub92$i = 0, $sub99$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i36 = 0, $tobool$i50 = 0, $tobool$i72 = 0, $tobool109$i = 0, $tobool109$us$i = 0, $tobool116$i = 0, $tobool116$us$i = 0, $tobool14$i = 0, $tobool142$i = 0;
	 var $tobool142$us$i = 0, $tobool142120$i = 0, $tobool142120$us$i = 0, $tobool2$i = 0, $tobool3 = 0, $tobool3$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $byteset$i = sp + 1024|0;
	 $shift$i = sp;
	 $tobool = ($l|0)==(0);
	 if ($tobool) {
	  $retval$0 = $h0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $cmp = ($k>>>0)<($l>>>0);
	 if ($cmp) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $0 = HEAP8[$n0>>0]|0;
	 $conv = $0&255;
	 $call = (_memchr($h0,$conv,$k)|0);
	 $tobool3 = ($call|0)==(0|0);
	 $cmp4 = ($l|0)==(1);
	 $or$cond = $tobool3 | $cmp4;
	 if ($or$cond) {
	  $retval$0 = $call;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $sub$ptr$lhs$cast = $call;
	 $sub$ptr$rhs$cast = $h0;
	 $sub$ptr$sub26 = (($sub$ptr$rhs$cast) - ($sub$ptr$lhs$cast))|0;
	 $sub = (($sub$ptr$sub26) + ($k))|0;
	 if ((($l|0) == 3)) {
	  $n0$idx28 = (($n0) + 1|0);
	  $n0$idx28$val = HEAP8[$n0$idx28>>0]|0;
	  $n0$idx29 = (($n0) + 2|0);
	  $n0$idx29$val = HEAP8[$n0$idx29>>0]|0;
	  $shl$i39 = $conv << 24;
	  $conv2$i40 = $n0$idx28$val&255;
	  $shl3$i = $conv2$i40 << 16;
	  $or$i41 = $shl3$i | $shl$i39;
	  $conv5$i42 = $n0$idx29$val&255;
	  $shl6$i43 = $conv5$i42 << 8;
	  $or7$i = $or$i41 | $shl6$i43;
	  $arrayidx15$i = (($call) + 2|0);
	  $sub$i44 = (($sub) + -2)|0;
	  $tobool2$i = ($sub$i44|0)==(0);
	  if ($tobool2$i) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $arrayidx11$i = (($call) + 1|0);
	  $4 = HEAP8[$arrayidx11$i>>0]|0;
	  $5 = HEAP8[$call>>0]|0;
	  $6 = HEAP8[$arrayidx15$i>>0]|0;
	  $conv12$i = $4&255;
	  $conv9$i = $5&255;
	  $conv16$i = $6&255;
	  $shl13$i = $conv12$i << 16;
	  $shl10$i = $conv9$i << 24;
	  $shl17$i = $conv16$i << 8;
	  $or14$i = $shl10$i | $shl13$i;
	  $or18$i = $or14$i | $shl17$i;
	  $h$addr$04$i46 = $arrayidx15$i;$hw$05$i = $or18$i;$k$addr$03$i = $sub$i44;
	  while(1) {
	   $cmp$i47 = ($hw$05$i|0)==($or7$i|0);
	   if ($cmp$i47) {
	    break;
	   }
	   $dec$i = (($k$addr$03$i) + -1)|0;
	   $incdec$ptr$i = (($h$addr$04$i46) + 1|0);
	   $7 = HEAP8[$incdec$ptr$i>>0]|0;
	   $conv21$i = $7&255;
	   $or22$i = $conv21$i | $hw$05$i;
	   $shl23$i = $or22$i << 8;
	   $tobool$i50 = ($dec$i|0)==(0);
	   if ($tobool$i50) {
	    $retval$0 = 0;
	    label = 75;
	    break;
	   } else {
	    $h$addr$04$i46 = $incdec$ptr$i;$hw$05$i = $shl23$i;$k$addr$03$i = $dec$i;
	   }
	  }
	  if ((label|0) == 75) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $add$ptr20$i = (($h$addr$04$i46) + -2|0);
	  $retval$0 = $add$ptr20$i;
	  STACKTOP = sp;return ($retval$0|0);
	 } else if ((($l|0) == 4)) {
	  $shl$i54 = $conv << 24;
	  $arrayidx1$i = (($n0) + 1|0);
	  $8 = HEAP8[$arrayidx1$i>>0]|0;
	  $conv2$i55 = $8&255;
	  $shl3$i56 = $conv2$i55 << 16;
	  $or$i57 = $shl3$i56 | $shl$i54;
	  $arrayidx4$i = (($n0) + 2|0);
	  $9 = HEAP8[$arrayidx4$i>>0]|0;
	  $conv5$i58 = $9&255;
	  $shl6$i59 = $conv5$i58 << 8;
	  $or7$i60 = $or$i57 | $shl6$i59;
	  $arrayidx8$i = (($n0) + 3|0);
	  $10 = HEAP8[$arrayidx8$i>>0]|0;
	  $conv9$i61 = $10&255;
	  $or10$i = $or7$i60 | $conv9$i61;
	  $arrayidx22$i = (($call) + 3|0);
	  $sub$i62 = (($sub) + -3)|0;
	  $tobool14$i = ($sub$i62|0)==(0);
	  if ($tobool14$i) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $arrayidx14$i = (($call) + 1|0);
	  $arrayidx18$i = (($call) + 2|0);
	  $11 = HEAP8[$arrayidx14$i>>0]|0;
	  $12 = HEAP8[$call>>0]|0;
	  $13 = HEAP8[$arrayidx18$i>>0]|0;
	  $conv15$i = $11&255;
	  $conv12$i63 = $12&255;
	  $conv19$i = $13&255;
	  $shl16$i64 = $conv15$i << 16;
	  $shl13$i65 = $conv12$i63 << 24;
	  $14 = HEAP8[$arrayidx22$i>>0]|0;
	  $shl20$i = $conv19$i << 8;
	  $or17$i = $shl13$i65 | $shl16$i64;
	  $conv23$i = $14&255;
	  $or21$i = $or17$i | $shl20$i;
	  $or24$i = $or21$i | $conv23$i;
	  $h$addr$016$i = $arrayidx22$i;$hw$017$i = $or24$i;$k$addr$015$i = $sub$i62;
	  while(1) {
	   $cmp$i67 = ($hw$017$i|0)==($or10$i|0);
	   if ($cmp$i67) {
	    break;
	   }
	   $dec$i70 = (($k$addr$015$i) + -1)|0;
	   $shl27$i = $hw$017$i << 8;
	   $incdec$ptr$i71 = (($h$addr$016$i) + 1|0);
	   $15 = HEAP8[$incdec$ptr$i71>>0]|0;
	   $conv28$i = $15&255;
	   $or29$i = $conv28$i | $shl27$i;
	   $tobool$i72 = ($dec$i70|0)==(0);
	   if ($tobool$i72) {
	    $retval$0 = 0;
	    label = 75;
	    break;
	   } else {
	    $h$addr$016$i = $incdec$ptr$i71;$hw$017$i = $or29$i;$k$addr$015$i = $dec$i70;
	   }
	  }
	  if ((label|0) == 75) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $add$ptr26$i = (($h$addr$016$i) + -3|0);
	  $retval$0 = $add$ptr26$i;
	  STACKTOP = sp;return ($retval$0|0);
	 } else if ((($l|0) == 2)) {
	  $n0$idx = (($n0) + 1|0);
	  $n0$idx$val = HEAP8[$n0$idx>>0]|0;
	  $shl$i = $conv << 8;
	  $conv2$i = $n0$idx$val&255;
	  $or$i = $conv2$i | $shl$i;
	  $arrayidx7$i = (($call) + 1|0);
	  $k$addr$02$i = (($sub) + -1)|0;
	  $tobool3$i = ($k$addr$02$i|0)==(0);
	  if ($tobool3$i) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $1 = HEAP8[$call>>0]|0;
	  $2 = HEAP8[$arrayidx7$i>>0]|0;
	  $conv5$i = $1&255;
	  $conv8$i = $2&255;
	  $shl6$i = $conv5$i << 8;
	  $or9$i = $shl6$i | $conv8$i;
	  $h$addr$04$i = $arrayidx7$i;$hw$0$in5$i = $or9$i;$k$addr$06$i = $k$addr$02$i;
	  while(1) {
	   $conv11$i = $hw$0$in5$i & 65535;
	   $cmp$i = ($conv11$i|0)==($or$i|0);
	   if ($cmp$i) {
	    break;
	   }
	   $shl16$i = $conv11$i << 8;
	   $incdec$ptr17$i = (($h$addr$04$i) + 1|0);
	   $3 = HEAP8[$incdec$ptr17$i>>0]|0;
	   $conv18$i = $3&255;
	   $or19$i = $conv18$i | $shl16$i;
	   $k$addr$0$i = (($k$addr$06$i) + -1)|0;
	   $tobool$i = ($k$addr$0$i|0)==(0);
	   if ($tobool$i) {
	    $retval$0 = 0;
	    label = 75;
	    break;
	   } else {
	    $h$addr$04$i = $incdec$ptr17$i;$hw$0$in5$i = $or19$i;$k$addr$06$i = $k$addr$0$i;
	   }
	  }
	  if ((label|0) == 75) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $add$ptr$i = (($h$addr$04$i) + -1|0);
	  $retval$0 = $add$ptr$i;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $add$ptr = (($call) + ($sub)|0);
	  ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
	  $16 = $0;$i$0154$i = 1;
	  while(1) {
	   $conv$i30 = $16&255;
	   $rem$i = $conv$i30 & 31;
	   $shl$i31 = 1 << $rem$i;
	   $div$i = $conv$i30 >>> 5;
	   $arrayidx3$i = (($byteset$i) + ($div$i<<2)|0);
	   $17 = HEAP32[$arrayidx3$i>>2]|0;
	   $or$i32 = $shl$i31 | $17;
	   HEAP32[$arrayidx3$i>>2] = $or$i32;
	   $arrayidx5$i = (($shift$i) + ($conv$i30<<2)|0);
	   HEAP32[$arrayidx5$i>>2] = $i$0154$i;
	   $exitcond$i = ($i$0154$i|0)==($l|0);
	   if ($exitcond$i) {
	    break;
	   }
	   $arrayidx$i$phi$trans$insert = (($n0) + ($i$0154$i)|0);
	   $$pre = HEAP8[$arrayidx$i$phi$trans$insert>>0]|0;
	   $phitmp = (($i$0154$i) + 1)|0;
	   $16 = $$pre;$i$0154$i = $phitmp;
	  }
	  $cmp7150185194205$i = ($l>>>0)>(1);
	  L38: do {
	   if ($cmp7150185194205$i) {
	    $add6149184193208$i = 1;$ip$0$ph206$i = -1;$jp$0$ph207$i = 0;
	    L39: while(1) {
	     $add6149184197$i = $add6149184193208$i;$jp$0$ph142$ph195$i = $jp$0$ph207$i;$p$0$ph$ph196$i = 1;
	     while(1) {
	      $add6149187$i = $add6149184197$i;$jp$0$ph142186$i = $jp$0$ph142$ph195$i;
	      L43: while(1) {
	       $add6152$i = $add6149187$i;$k$0151$i = 1;
	       while(1) {
	        $add9$i = (($k$0151$i) + ($ip$0$ph206$i))|0;
	        $arrayidx10$i = (($n0) + ($add9$i)|0);
	        $18 = HEAP8[$arrayidx10$i>>0]|0;
	        $arrayidx13$i = (($n0) + ($add6152$i)|0);
	        $19 = HEAP8[$arrayidx13$i>>0]|0;
	        $cmp15$i = ($18<<24>>24)==($19<<24>>24);
	        if (!($cmp15$i)) {
	         break L43;
	        }
	        $cmp17$i = ($k$0151$i|0)==($p$0$ph$ph196$i|0);
	        $inc21$i = (($k$0151$i) + 1)|0;
	        if ($cmp17$i) {
	         break;
	        }
	        $add6$i = (($inc21$i) + ($jp$0$ph142186$i))|0;
	        $cmp7$i = ($add6$i>>>0)<($l>>>0);
	        if ($cmp7$i) {
	         $add6152$i = $add6$i;$k$0151$i = $inc21$i;
	        } else {
	         $ip$0$ph202$i = $ip$0$ph206$i;$p$0$ph$ph191$i = $p$0$ph$ph196$i;
	         break L39;
	        }
	       }
	       $add20$i = (($jp$0$ph142186$i) + ($p$0$ph$ph196$i))|0;
	       $add6149$i = (($add20$i) + 1)|0;
	       $cmp7150$i = ($add6149$i>>>0)<($l>>>0);
	       if ($cmp7150$i) {
	        $add6149187$i = $add6149$i;$jp$0$ph142186$i = $add20$i;
	       } else {
	        $ip$0$ph202$i = $ip$0$ph206$i;$p$0$ph$ph191$i = $p$0$ph$ph196$i;
	        break L39;
	       }
	      }
	      $cmp29$i = ($18&255)>($19&255);
	      $sub$i = (($add6152$i) - ($ip$0$ph206$i))|0;
	      if (!($cmp29$i)) {
	       break;
	      }
	      $add6149184$i = (($add6152$i) + 1)|0;
	      $cmp7150185$i = ($add6149184$i>>>0)<($l>>>0);
	      if ($cmp7150185$i) {
	       $add6149184197$i = $add6149184$i;$jp$0$ph142$ph195$i = $add6152$i;$p$0$ph$ph196$i = $sub$i;
	      } else {
	       $ip$0$ph202$i = $ip$0$ph206$i;$p$0$ph$ph191$i = $sub$i;
	       break L39;
	      }
	     }
	     $inc34$i = (($jp$0$ph142186$i) + 1)|0;
	     $add6149184193$i = (($jp$0$ph142186$i) + 2)|0;
	     $cmp7150185194$i = ($add6149184193$i>>>0)<($l>>>0);
	     if ($cmp7150185194$i) {
	      $add6149184193208$i = $add6149184193$i;$ip$0$ph206$i = $jp$0$ph142186$i;$jp$0$ph207$i = $inc34$i;
	     } else {
	      $ip$0$ph202$i = $jp$0$ph142186$i;$p$0$ph$ph191$i = 1;
	      break;
	     }
	    }
	    $add38137157166180$i = 1;$ip$1$ph178$i = -1;$jp$1$ph179$i = 0;
	    while(1) {
	     $add38137157170$i = $add38137157166180$i;$jp$1$ph131$ph168$i = $jp$1$ph179$i;$p$1$ph$ph169$i = 1;
	     while(1) {
	      $add38137160$i = $add38137157170$i;$jp$1$ph131159$i = $jp$1$ph131$ph168$i;
	      L58: while(1) {
	       $add38140$i = $add38137160$i;$k$1139$i = 1;
	       while(1) {
	        $add42$i = (($k$1139$i) + ($ip$1$ph178$i))|0;
	        $arrayidx43$i = (($n0) + ($add42$i)|0);
	        $20 = HEAP8[$arrayidx43$i>>0]|0;
	        $arrayidx46$i = (($n0) + ($add38140$i)|0);
	        $21 = HEAP8[$arrayidx46$i>>0]|0;
	        $cmp48$i = ($20<<24>>24)==($21<<24>>24);
	        if (!($cmp48$i)) {
	         break L58;
	        }
	        $cmp51$i = ($k$1139$i|0)==($p$1$ph$ph169$i|0);
	        $inc56$i = (($k$1139$i) + 1)|0;
	        if ($cmp51$i) {
	         break;
	        }
	        $add38$i = (($inc56$i) + ($jp$1$ph131159$i))|0;
	        $cmp39$i = ($add38$i>>>0)<($l>>>0);
	        if ($cmp39$i) {
	         $add38140$i = $add38$i;$k$1139$i = $inc56$i;
	        } else {
	         $ip$0$ph202256$i = $ip$0$ph202$i;$ip$1$ph174$i = $ip$1$ph178$i;$p$0$ph$ph191260$i = $p$0$ph$ph191$i;$p$1$ph$ph164$i = $p$1$ph$ph169$i;
	         break L38;
	        }
	       }
	       $add54$i = (($jp$1$ph131159$i) + ($p$1$ph$ph169$i))|0;
	       $add38137$i = (($add54$i) + 1)|0;
	       $cmp39138$i = ($add38137$i>>>0)<($l>>>0);
	       if ($cmp39138$i) {
	        $add38137160$i = $add38137$i;$jp$1$ph131159$i = $add54$i;
	       } else {
	        $ip$0$ph202256$i = $ip$0$ph202$i;$ip$1$ph174$i = $ip$1$ph178$i;$p$0$ph$ph191260$i = $p$0$ph$ph191$i;$p$1$ph$ph164$i = $p$1$ph$ph169$i;
	        break L38;
	       }
	      }
	      $cmp65$i = ($20&255)<($21&255);
	      $sub69$i = (($add38140$i) - ($ip$1$ph178$i))|0;
	      if (!($cmp65$i)) {
	       break;
	      }
	      $add38137157$i = (($add38140$i) + 1)|0;
	      $cmp39138158$i = ($add38137157$i>>>0)<($l>>>0);
	      if ($cmp39138158$i) {
	       $add38137157170$i = $add38137157$i;$jp$1$ph131$ph168$i = $add38140$i;$p$1$ph$ph169$i = $sub69$i;
	      } else {
	       $ip$0$ph202256$i = $ip$0$ph202$i;$ip$1$ph174$i = $ip$1$ph178$i;$p$0$ph$ph191260$i = $p$0$ph$ph191$i;$p$1$ph$ph164$i = $sub69$i;
	       break L38;
	      }
	     }
	     $inc71$i = (($jp$1$ph131159$i) + 1)|0;
	     $add38137157166$i = (($jp$1$ph131159$i) + 2)|0;
	     $cmp39138158167$i = ($add38137157166$i>>>0)<($l>>>0);
	     if ($cmp39138158167$i) {
	      $add38137157166180$i = $add38137157166$i;$ip$1$ph178$i = $jp$1$ph131159$i;$jp$1$ph179$i = $inc71$i;
	     } else {
	      $ip$0$ph202256$i = $ip$0$ph202$i;$ip$1$ph174$i = $jp$1$ph131159$i;$p$0$ph$ph191260$i = $p$0$ph$ph191$i;$p$1$ph$ph164$i = 1;
	      break;
	     }
	    }
	   } else {
	    $ip$0$ph202256$i = -1;$ip$1$ph174$i = -1;$p$0$ph$ph191260$i = 1;$p$1$ph$ph164$i = 1;
	   }
	  } while(0);
	  $add75$i = (($ip$1$ph174$i) + 1)|0;
	  $add76$i = (($ip$0$ph202256$i) + 1)|0;
	  $cmp77$i = ($add75$i>>>0)>($add76$i>>>0);
	  $p$1$p$0$i = $cmp77$i ? $p$1$ph$ph164$i : $p$0$ph$ph191260$i;
	  $ip$1$ip$0$i = $cmp77$i ? $ip$1$ph174$i : $ip$0$ph202256$i;
	  $add$ptr$i35 = (($n0) + ($p$1$p$0$i)|0);
	  $add82$i = (($ip$1$ip$0$i) + 1)|0;
	  $call$i = (_memcmp($n0,$add$ptr$i35,$add82$i)|0);
	  $tobool$i36 = ($call$i|0)==(0);
	  if ($tobool$i36) {
	   $sub92$i = (($l) - ($p$1$p$0$i))|0;
	   $mem0$0$i = $sub92$i;$p$3$i = $p$1$p$0$i;
	  } else {
	   $sub84$i = (($l) - ($ip$1$ip$0$i))|0;
	   $sub85$i = (($sub84$i) + -1)|0;
	   $cmp86$i = ($ip$1$ip$0$i>>>0)>($sub85$i>>>0);
	   $ip$1$ip$0$sub85$i = $cmp86$i ? $ip$1$ip$0$i : $sub85$i;
	   $add90$i = (($ip$1$ip$0$sub85$i) + 1)|0;
	   $mem0$0$i = 0;$p$3$i = $add90$i;
	  }
	  $sub$ptr$lhs$cast$i = $add$ptr;
	  $cmp95127$i = ($sub>>>0)<($l>>>0);
	  if ($cmp95127$i) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $sub99$i = (($l) + -1)|0;
	  $notlhs$i = ($mem0$0$i|0)==(0);
	  $sub124$i = (($l) - ($p$3$i))|0;
	  if (!($notlhs$i)) {
	   $h$addr$0128$us$i = $call;$mem$0129$us$i = 0;
	   L77: while(1) {
	    $arrayidx100$us$i = (($h$addr$0128$us$i) + ($sub99$i)|0);
	    $22 = HEAP8[$arrayidx100$us$i>>0]|0;
	    $conv101$us$i = $22&255;
	    $div102$us$i = $conv101$us$i >>> 5;
	    $arrayidx103$us$i = (($byteset$i) + ($div102$us$i<<2)|0);
	    $23 = HEAP32[$arrayidx103$us$i>>2]|0;
	    $rem107$us$i = $conv101$us$i & 31;
	    $shl108$us$i = 1 << $rem107$us$i;
	    $and$us$i = $shl108$us$i & $23;
	    $tobool109$us$i = ($and$us$i|0)==(0);
	    L79: do {
	     if ($tobool109$us$i) {
	      $add$ptr129$us$i = (($h$addr$0128$us$i) + ($l)|0);
	      $h$addr$0$be$us$i = $add$ptr129$us$i;$mem$0$be$us$i = 0;
	     } else {
	      $arrayidx114$us$i = (($shift$i) + ($conv101$us$i<<2)|0);
	      $24 = HEAP32[$arrayidx114$us$i>>2]|0;
	      $sub115$us$i = (($l) - ($24))|0;
	      $tobool116$us$i = ($24|0)==($l|0);
	      if (!($tobool116$us$i)) {
	       $notrhs$us$i = ($mem$0129$us$i|0)!=(0);
	       $cmp121$us$i = ($sub115$us$i>>>0)<($p$3$i>>>0);
	       $or$cond114$us$i = $notrhs$us$i & $cmp121$us$i;
	       $k$2$us$i = $or$cond114$us$i ? $sub124$i : $sub115$us$i;
	       $add$ptr126$us$i = (($h$addr$0128$us$i) + ($k$2$us$i)|0);
	       $h$addr$0$be$us$i = $add$ptr126$us$i;$mem$0$be$us$i = 0;
	       break;
	      }
	      $cmp132$us$i = ($add82$i>>>0)>($mem$0129$us$i>>>0);
	      $add82$mem$0$us$i = $cmp132$us$i ? $add82$i : $mem$0129$us$i;
	      $arrayidx140119$us$i = (($n0) + ($add82$mem$0$us$i)|0);
	      $25 = HEAP8[$arrayidx140119$us$i>>0]|0;
	      $tobool142120$us$i = ($25<<24>>24)==(0);
	      L84: do {
	       if ($tobool142120$us$i) {
	        $k$4$us$i = $add82$i;
	       } else {
	        $$pr$us$i = $25;$k$3121$us$i = $add82$mem$0$us$i;
	        while(1) {
	         $arrayidx145$us$i = (($h$addr$0128$us$i) + ($k$3121$us$i)|0);
	         $27 = HEAP8[$arrayidx145$us$i>>0]|0;
	         $cmp147$us$i = ($$pr$us$i<<24>>24)==($27<<24>>24);
	         $inc151$us$i = (($k$3121$us$i) + 1)|0;
	         if (!($cmp147$us$i)) {
	          break;
	         }
	         $arrayidx140$us$i = (($n0) + ($inc151$us$i)|0);
	         $26 = HEAP8[$arrayidx140$us$i>>0]|0;
	         $tobool142$us$i = ($26<<24>>24)==(0);
	         if ($tobool142$us$i) {
	          $k$4$us$i = $add82$i;
	          break L84;
	         } else {
	          $$pr$us$i = $26;$k$3121$us$i = $inc151$us$i;
	         }
	        }
	        $sub156$us$i = (($k$3121$us$i) - ($ip$1$ip$0$i))|0;
	        $add$ptr157$us$i = (($h$addr$0128$us$i) + ($sub156$us$i)|0);
	        $h$addr$0$be$us$i = $add$ptr157$us$i;$mem$0$be$us$i = 0;
	        break L79;
	       }
	      } while(0);
	      while(1) {
	       $cmp161$us$i = ($k$4$us$i>>>0)>($mem$0129$us$i>>>0);
	       if (!($cmp161$us$i)) {
	        $retval$0 = $h$addr$0128$us$i;
	        label = 75;
	        break L77;
	       }
	       $sub164$us$i = (($k$4$us$i) + -1)|0;
	       $arrayidx165$us$i = (($n0) + ($sub164$us$i)|0);
	       $28 = HEAP8[$arrayidx165$us$i>>0]|0;
	       $arrayidx168$us$i = (($h$addr$0128$us$i) + ($sub164$us$i)|0);
	       $29 = HEAP8[$arrayidx168$us$i>>0]|0;
	       $cmp170$us$i = ($28<<24>>24)==($29<<24>>24);
	       if ($cmp170$us$i) {
	        $k$4$us$i = $sub164$us$i;
	       } else {
	        break;
	       }
	      }
	      $add$ptr180$us$i = (($h$addr$0128$us$i) + ($p$3$i)|0);
	      $h$addr$0$be$us$i = $add$ptr180$us$i;$mem$0$be$us$i = $mem0$0$i;
	     }
	    } while(0);
	    $sub$ptr$rhs$cast$us$i = $h$addr$0$be$us$i;
	    $sub$ptr$sub$us$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$us$i))|0;
	    $cmp95$us$i = ($sub$ptr$sub$us$i>>>0)<($l>>>0);
	    if ($cmp95$us$i) {
	     $retval$0 = 0;
	     label = 75;
	     break;
	    } else {
	     $h$addr$0128$us$i = $h$addr$0$be$us$i;$mem$0129$us$i = $mem$0$be$us$i;
	    }
	   }
	   if ((label|0) == 75) {
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  }
	  $arrayidx140119$i = (($n0) + ($add82$i)|0);
	  $h$addr$0128$i = $call;
	  L99: while(1) {
	   $arrayidx100$i = (($h$addr$0128$i) + ($sub99$i)|0);
	   $30 = HEAP8[$arrayidx100$i>>0]|0;
	   $conv101$i = $30&255;
	   $div102$i = $conv101$i >>> 5;
	   $arrayidx103$i = (($byteset$i) + ($div102$i<<2)|0);
	   $31 = HEAP32[$arrayidx103$i>>2]|0;
	   $rem107$i = $conv101$i & 31;
	   $shl108$i = 1 << $rem107$i;
	   $and$i = $shl108$i & $31;
	   $tobool109$i = ($and$i|0)==(0);
	   L101: do {
	    if ($tobool109$i) {
	     $add$ptr129$i = (($h$addr$0128$i) + ($l)|0);
	     $h$addr$0$be$i = $add$ptr129$i;
	    } else {
	     $arrayidx114$i = (($shift$i) + ($conv101$i<<2)|0);
	     $32 = HEAP32[$arrayidx114$i>>2]|0;
	     $tobool116$i = ($32|0)==($l|0);
	     if (!($tobool116$i)) {
	      $sub115$i = (($l) - ($32))|0;
	      $add$ptr126$i = (($h$addr$0128$i) + ($sub115$i)|0);
	      $h$addr$0$be$i = $add$ptr126$i;
	      break;
	     }
	     $33 = HEAP8[$arrayidx140119$i>>0]|0;
	     $tobool142120$i = ($33<<24>>24)==(0);
	     L106: do {
	      if ($tobool142120$i) {
	       $k$4$i = $add82$i;
	      } else {
	       $$pr$i = $33;$k$3121$i = $add82$i;
	       while(1) {
	        $arrayidx145$i = (($h$addr$0128$i) + ($k$3121$i)|0);
	        $35 = HEAP8[$arrayidx145$i>>0]|0;
	        $cmp147$i = ($$pr$i<<24>>24)==($35<<24>>24);
	        $inc151$i = (($k$3121$i) + 1)|0;
	        if (!($cmp147$i)) {
	         break;
	        }
	        $arrayidx140$i = (($n0) + ($inc151$i)|0);
	        $34 = HEAP8[$arrayidx140$i>>0]|0;
	        $tobool142$i = ($34<<24>>24)==(0);
	        if ($tobool142$i) {
	         $k$4$i = $add82$i;
	         break L106;
	        } else {
	         $$pr$i = $34;$k$3121$i = $inc151$i;
	        }
	       }
	       $sub156$i = (($k$3121$i) - ($ip$1$ip$0$i))|0;
	       $add$ptr157$i = (($h$addr$0128$i) + ($sub156$i)|0);
	       $h$addr$0$be$i = $add$ptr157$i;
	       break L101;
	      }
	     } while(0);
	     while(1) {
	      $cmp161$i = ($k$4$i|0)==(0);
	      if ($cmp161$i) {
	       $retval$0 = $h$addr$0128$i;
	       label = 75;
	       break L99;
	      }
	      $sub164$i = (($k$4$i) + -1)|0;
	      $arrayidx165$i = (($n0) + ($sub164$i)|0);
	      $36 = HEAP8[$arrayidx165$i>>0]|0;
	      $arrayidx168$i = (($h$addr$0128$i) + ($sub164$i)|0);
	      $37 = HEAP8[$arrayidx168$i>>0]|0;
	      $cmp170$i = ($36<<24>>24)==($37<<24>>24);
	      if ($cmp170$i) {
	       $k$4$i = $sub164$i;
	      } else {
	       break;
	      }
	     }
	     $add$ptr180$i = (($h$addr$0128$i) + ($p$3$i)|0);
	     $h$addr$0$be$i = $add$ptr180$i;
	    }
	   } while(0);
	   $sub$ptr$rhs$cast$i = $h$addr$0$be$i;
	   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	   $cmp95$i = ($sub$ptr$sub$i>>>0)<($l>>>0);
	   if ($cmp95$i) {
	    $retval$0 = 0;
	    label = 75;
	    break;
	   } else {
	    $h$addr$0128$i = $h$addr$0$be$i;
	   }
	  }
	  if ((label|0) == 75) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 return 0|0;
	}
	function _mempcpy($dest,$src,$n) {
	 $dest = $dest|0;
	 $src = $src|0;
	 $n = $n|0;
	 var $add$ptr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 _memcpy(($dest|0),($src|0),($n|0))|0;
	 $add$ptr = (($dest) + ($n)|0);
	 STACKTOP = sp;return ($add$ptr|0);
	}
	function ___memrchr($m,$c,$n) {
	 $m = $m|0;
	 $c = $c|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $arrayidx = 0, $cmp = 0, $dec = 0, $n$addr$0 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = $c&255;
	 $n$addr$0 = $n;
	 while(1) {
	  $dec = (($n$addr$0) + -1)|0;
	  $tobool = ($n$addr$0|0)==(0);
	  if ($tobool) {
	   $retval$0 = 0;
	   label = 4;
	   break;
	  }
	  $arrayidx = (($m) + ($dec)|0);
	  $1 = HEAP8[$arrayidx>>0]|0;
	  $cmp = ($1<<24>>24)==($0<<24>>24);
	  if ($cmp) {
	   $retval$0 = $arrayidx;
	   label = 4;
	   break;
	  } else {
	   $n$addr$0 = $dec;
	  }
	 }
	 if ((label|0) == 4) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _rindex($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strrchr($s,$c)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function ___stpcpy($d,$s) {
	 $d = $d|0;
	 $s = $s|0;
	 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and23 = 0, $and7 = 0, $and724 = 0, $cmp = 0, $d$addr$0$lcssa = 0, $d$addr$035 = 0, $d$addr$1$ph = 0, $d$addr$119 = 0;
	 var $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr12 = 0, $incdec$ptr19 = 0, $incdec$ptr20 = 0, $incdec$ptr5 = 0, $lnot = 0, $lnot25 = 0, $neg = 0, $neg22 = 0, $rem2 = 0, $rem233 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1$ph = 0, $s$addr$120 = 0, $sub = 0, $sub21 = 0, $tobool = 0;
	 var $tobool16 = 0, $tobool1618 = 0, $tobool3 = 0, $tobool34 = 0, $wd$0$lcssa = 0, $wd$026 = 0, $ws$0$lcssa = 0, $ws$027 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = $s;
	 $1 = $d;
	 $2 = $0 ^ $1;
	 $3 = $2 & 3;
	 $cmp = ($3|0)==(0);
	 if ($cmp) {
	  $rem233 = $0 & 3;
	  $tobool34 = ($rem233|0)==(0);
	  L3: do {
	   if ($tobool34) {
	    $d$addr$0$lcssa = $d;$s$addr$0$lcssa = $s;
	   } else {
	    $d$addr$035 = $d;$s$addr$036 = $s;
	    while(1) {
	     $4 = HEAP8[$s$addr$036>>0]|0;
	     HEAP8[$d$addr$035>>0] = $4;
	     $tobool3 = ($4<<24>>24)==(0);
	     if ($tobool3) {
	      $retval$0 = $d$addr$035;
	      break;
	     }
	     $incdec$ptr = (($s$addr$036) + 1|0);
	     $incdec$ptr5 = (($d$addr$035) + 1|0);
	     $5 = $incdec$ptr;
	     $rem2 = $5 & 3;
	     $tobool = ($rem2|0)==(0);
	     if ($tobool) {
	      $d$addr$0$lcssa = $incdec$ptr5;$s$addr$0$lcssa = $incdec$ptr;
	      break L3;
	     } else {
	      $d$addr$035 = $incdec$ptr5;$s$addr$036 = $incdec$ptr;
	     }
	    }
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  } while(0);
	  $6 = HEAP32[$s$addr$0$lcssa>>2]|0;
	  $sub21 = (($6) + -16843009)|0;
	  $neg22 = $6 & -2139062144;
	  $and23 = $neg22 ^ -2139062144;
	  $and724 = $and23 & $sub21;
	  $lnot25 = ($and724|0)==(0);
	  if ($lnot25) {
	   $7 = $6;$wd$026 = $d$addr$0$lcssa;$ws$027 = $s$addr$0$lcssa;
	   while(1) {
	    $incdec$ptr11 = (($ws$027) + 4|0);
	    $incdec$ptr12 = (($wd$026) + 4|0);
	    HEAP32[$wd$026>>2] = $7;
	    $8 = HEAP32[$incdec$ptr11>>2]|0;
	    $sub = (($8) + -16843009)|0;
	    $neg = $8 & -2139062144;
	    $and = $neg ^ -2139062144;
	    $and7 = $and & $sub;
	    $lnot = ($and7|0)==(0);
	    if ($lnot) {
	     $7 = $8;$wd$026 = $incdec$ptr12;$ws$027 = $incdec$ptr11;
	    } else {
	     $wd$0$lcssa = $incdec$ptr12;$ws$0$lcssa = $incdec$ptr11;
	     break;
	    }
	   }
	  } else {
	   $wd$0$lcssa = $d$addr$0$lcssa;$ws$0$lcssa = $s$addr$0$lcssa;
	  }
	  $d$addr$1$ph = $wd$0$lcssa;$s$addr$1$ph = $ws$0$lcssa;
	 } else {
	  $d$addr$1$ph = $d;$s$addr$1$ph = $s;
	 }
	 $9 = HEAP8[$s$addr$1$ph>>0]|0;
	 HEAP8[$d$addr$1$ph>>0] = $9;
	 $tobool1618 = ($9<<24>>24)==(0);
	 if ($tobool1618) {
	  $retval$0 = $d$addr$1$ph;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $d$addr$119 = $d$addr$1$ph;$s$addr$120 = $s$addr$1$ph;
	 }
	 while(1) {
	  $incdec$ptr19 = (($s$addr$120) + 1|0);
	  $incdec$ptr20 = (($d$addr$119) + 1|0);
	  $10 = HEAP8[$incdec$ptr19>>0]|0;
	  HEAP8[$incdec$ptr20>>0] = $10;
	  $tobool16 = ($10<<24>>24)==(0);
	  if ($tobool16) {
	   $retval$0 = $incdec$ptr20;
	   break;
	  } else {
	   $d$addr$119 = $incdec$ptr20;$s$addr$120 = $incdec$ptr19;
	  }
	 }
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strcasestr($h,$n) {
	 $h = $h|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $h$addr$05 = 0, $incdec$ptr = 0, $retval$0 = 0, $tobool = 0, $tobool2 = 0, $tobool4 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strlen(($n|0))|0);
	 $0 = HEAP8[$h>>0]|0;
	 $tobool4 = ($0<<24>>24)==(0);
	 L1: do {
	  if ($tobool4) {
	   $retval$0 = 0;
	  } else {
	   $h$addr$05 = $h;
	   while(1) {
	    $call1 = (_strncasecmp($h$addr$05,$n,$call)|0);
	    $tobool2 = ($call1|0)==(0);
	    $incdec$ptr = (($h$addr$05) + 1|0);
	    if ($tobool2) {
	     $retval$0 = $h$addr$05;
	     break L1;
	    }
	    $1 = HEAP8[$incdec$ptr>>0]|0;
	    $tobool = ($1<<24>>24)==(0);
	    if ($tobool) {
	     $retval$0 = 0;
	     break;
	    } else {
	     $h$addr$05 = $incdec$ptr;
	    }
	   }
	  }
	 } while(0);
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strchr($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (___strchrnul($s,$c)|0);
	 $0 = HEAP8[$call>>0]|0;
	 $1 = $c&255;
	 $cmp = ($0<<24>>24)==($1<<24>>24);
	 $cond = $cmp ? $call : 0;
	 STACKTOP = sp;return ($cond|0);
	}
	function ___strchrnul($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and24 = 0, $and9 = 0, $and925 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
	 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $lnot = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg23 = 0, $or$cond = 0, $rem = 0, $rem30 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$032 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub22 = 0, $tobool = 0, $tobool10 = 0;
	 var $tobool1026 = 0, $tobool2 = 0, $tobool23 = 0, $tobool231 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$027 = 0, $xor = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $conv1 = $c & 255;
	 $tobool = ($conv1|0)==(0);
	 if ($tobool) {
	  $call = (_strlen(($s|0))|0);
	  $add$ptr = (($s) + ($call)|0);
	  $retval$0 = $add$ptr;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $0 = $s;
	 $rem30 = $0 & 3;
	 $tobool231 = ($rem30|0)==(0);
	 L5: do {
	  if ($tobool231) {
	   $s$addr$0$lcssa = $s;
	  } else {
	   $1 = $c&255;
	   $s$addr$032 = $s;
	   while(1) {
	    $3 = HEAP8[$s$addr$032>>0]|0;
	    $tobool3 = ($3<<24>>24)==(0);
	    if ($tobool3) {
	     $retval$0 = $s$addr$032;
	     label = 13;
	     break;
	    }
	    $cmp = ($3<<24>>24)==($1<<24>>24);
	    $incdec$ptr = (($s$addr$032) + 1|0);
	    if ($cmp) {
	     $retval$0 = $s$addr$032;
	     label = 13;
	     break;
	    }
	    $2 = $incdec$ptr;
	    $rem = $2 & 3;
	    $tobool2 = ($rem|0)==(0);
	    if ($tobool2) {
	     $s$addr$0$lcssa = $incdec$ptr;
	     break L5;
	    } else {
	     $s$addr$032 = $incdec$ptr;
	    }
	   }
	   if ((label|0) == 13) {
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  }
	 } while(0);
	 $mul = Math_imul($conv1, 16843009)|0;
	 $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
	 $sub22 = (($4) + -16843009)|0;
	 $neg23 = $4 & -2139062144;
	 $and24 = $neg23 ^ -2139062144;
	 $and925 = $and24 & $sub22;
	 $tobool1026 = ($and925|0)==(0);
	 L15: do {
	  if ($tobool1026) {
	   $6 = $4;$w$027 = $s$addr$0$lcssa;
	   while(1) {
	    $xor = $6 ^ $mul;
	    $sub11 = (($xor) + -16843009)|0;
	    $neg13 = $xor & -2139062144;
	    $and14 = $neg13 ^ -2139062144;
	    $and15 = $and14 & $sub11;
	    $lnot = ($and15|0)==(0);
	    $incdec$ptr19 = (($w$027) + 4|0);
	    if (!($lnot)) {
	     $w$0$lcssa = $w$027;
	     break L15;
	    }
	    $5 = HEAP32[$incdec$ptr19>>2]|0;
	    $sub = (($5) + -16843009)|0;
	    $neg = $5 & -2139062144;
	    $and = $neg ^ -2139062144;
	    $and9 = $and & $sub;
	    $tobool10 = ($and9|0)==(0);
	    if ($tobool10) {
	     $6 = $5;$w$027 = $incdec$ptr19;
	    } else {
	     $w$0$lcssa = $incdec$ptr19;
	     break;
	    }
	   }
	  } else {
	   $w$0$lcssa = $s$addr$0$lcssa;
	  }
	 } while(0);
	 $7 = $c&255;
	 $s$addr$1 = $w$0$lcssa;
	 while(1) {
	  $8 = HEAP8[$s$addr$1>>0]|0;
	  $tobool23 = ($8<<24>>24)==(0);
	  $cmp26 = ($8<<24>>24)==($7<<24>>24);
	  $or$cond = $tobool23 | $cmp26;
	  $incdec$ptr31 = (($s$addr$1) + 1|0);
	  if ($or$cond) {
	   $retval$0 = $s$addr$1;
	   break;
	  } else {
	   $s$addr$1 = $incdec$ptr31;
	  }
	 }
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strcspn($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $arrayidx1 = 0, $arrayidx15 = 0, $arrayidx7 = 0, $byteset = 0, $c$addr$017 = 0, $call = 0, $conv = 0, $conv13 = 0, $conv5 = 0, $div = 0;
	 var $div14 = 0, $incdec$ptr = 0, $incdec$ptr23 = 0, $lnot = 0, $or = 0, $rem = 0, $rem17 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $shl = 0, $shl18 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast25 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast26 = 0, $sub$ptr$sub = 0, $sub$ptr$sub27 = 0, $tobool = 0, $tobool11 = 0;
	 var $tobool1114 = 0, $tobool2 = 0, $tobool4 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $byteset = sp;
	 $0 = HEAP8[$c>>0]|0;
	 $tobool = ($0<<24>>24)==(0);
	 if (!($tobool)) {
	  $arrayidx1 = (($c) + 1|0);
	  $1 = HEAP8[$arrayidx1>>0]|0;
	  $tobool2 = ($1<<24>>24)==(0);
	  if (!($tobool2)) {
	   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
	   $3 = $0;$c$addr$017 = $c;
	   while(1) {
	    $conv5 = $3&255;
	    $rem = $conv5 & 31;
	    $shl = 1 << $rem;
	    $div = $conv5 >>> 5;
	    $arrayidx7 = (($byteset) + ($div<<2)|0);
	    $4 = HEAP32[$arrayidx7>>2]|0;
	    $or = $4 | $shl;
	    HEAP32[$arrayidx7>>2] = $or;
	    $incdec$ptr = (($c$addr$017) + 1|0);
	    $5 = HEAP8[$incdec$ptr>>0]|0;
	    $tobool4 = ($5<<24>>24)==(0);
	    if ($tobool4) {
	     break;
	    } else {
	     $3 = $5;$c$addr$017 = $incdec$ptr;
	    }
	   }
	   $2 = HEAP8[$s>>0]|0;
	   $tobool1114 = ($2<<24>>24)==(0);
	   L7: do {
	    if ($tobool1114) {
	     $s$addr$0$lcssa = $s;
	    } else {
	     $7 = $2;$s$addr$015 = $s;
	     while(1) {
	      $conv13 = $7&255;
	      $div14 = $conv13 >>> 5;
	      $arrayidx15 = (($byteset) + ($div14<<2)|0);
	      $8 = HEAP32[$arrayidx15>>2]|0;
	      $rem17 = $conv13 & 31;
	      $shl18 = 1 << $rem17;
	      $and = $8 & $shl18;
	      $lnot = ($and|0)==(0);
	      $incdec$ptr23 = (($s$addr$015) + 1|0);
	      if (!($lnot)) {
	       $s$addr$0$lcssa = $s$addr$015;
	       break L7;
	      }
	      $6 = HEAP8[$incdec$ptr23>>0]|0;
	      $tobool11 = ($6<<24>>24)==(0);
	      if ($tobool11) {
	       $s$addr$0$lcssa = $incdec$ptr23;
	       break;
	      } else {
	       $7 = $6;$s$addr$015 = $incdec$ptr23;
	      }
	     }
	    }
	   } while(0);
	   $sub$ptr$lhs$cast25 = $s$addr$0$lcssa;
	   $sub$ptr$rhs$cast26 = $s;
	   $sub$ptr$sub27 = (($sub$ptr$lhs$cast25) - ($sub$ptr$rhs$cast26))|0;
	   $retval$0 = $sub$ptr$sub27;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 $conv = $0 << 24 >> 24;
	 $call = (___strchrnul($s,$conv)|0);
	 $sub$ptr$lhs$cast = $call;
	 $sub$ptr$rhs$cast = $s;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $retval$0 = $sub$ptr$sub;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function ___strdup($s) {
	 $s = $s|0;
	 var $add = 0, $call = 0, $call1 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strlen(($s|0))|0);
	 $add = (($call) + 1)|0;
	 $call1 = (_malloc($add)|0);
	 $tobool = ($call1|0)==(0|0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 _memcpy(($call1|0),($s|0),($add|0))|0;
	 $retval$0 = $call1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strlcat($d,$s,$n) {
	 $d = $d|0;
	 $s = $s|0;
	 $n = $n|0;
	 var $add$ptr = 0, $call = 0, $call1 = 0, $call1$pn = 0, $call2 = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strnlen($d,$n)|0);
	 $cmp = ($call|0)==($n|0);
	 if ($cmp) {
	  $call1 = (_strlen(($s|0))|0);
	  $call1$pn = $call1;
	 } else {
	  $add$ptr = (($d) + ($call)|0);
	  $sub = (($n) - ($call))|0;
	  $call2 = (_strlcpy($add$ptr,$s,$sub)|0);
	  $call1$pn = $call2;
	 }
	 $retval$0 = (($call1$pn) + ($call))|0;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strlcpy($d,$s,$n) {
	 $d = $d|0;
	 $s = $s|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $and18 = 0, $and19 = 0, $and3 = 0, $and343 = 0, $call = 0, $cmp = 0, $cmp15 = 0, $cmp1536 = 0, $d$addr$0$lcssa = 0, $d$addr$0$lcssa65 = 0;
	 var $d$addr$049 = 0, $d$addr$1$lcssa = 0, $d$addr$1$ph = 0, $d$addr$134 = 0, $d$addr$2 = 0, $dec = 0, $dec38 = 0, $dec7 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $incdec$ptr26 = 0, $incdec$ptr39 = 0, $incdec$ptr40 = 0, $incdec$ptr8 = 0, $lnot = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa66 = 0, $n$addr$048 = 0, $n$addr$1$lcssa = 0, $n$addr$137 = 0;
	 var $n$addr$2$ph = 0, $n$addr$233 = 0, $neg = 0, $or$cond = 0, $or$cond46 = 0, $s$addr$0$lcssa = 0, $s$addr$0$lcssa67 = 0, $s$addr$047 = 0, $s$addr$1$lcssa = 0, $s$addr$1$ph = 0, $s$addr$132 = 0, $s$addr$2 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast$pre = 0, $sub$ptr$rhs$cast$pre$phiZZZZ2D = 0, $sub$ptr$sub = 0, $sub24 = 0, $tobool = 0, $tobool12 = 0;
	 var $tobool31 = 0, $tobool3131 = 0, $tobool34 = 0, $tobool4 = 0, $tobool444 = 0, $tobool5 = 0, $tobool5$lcssa = 0, $tobool545 = 0, $tobool6 = 0, $wd$0$lcssa = 0, $wd$038 = 0, $ws$0$lcssa = 0, $ws$039 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $dec = (($n) + -1)|0;
	 $tobool = ($n|0)==(0);
	 if ($tobool) {
	  $sub$ptr$rhs$cast$pre = $d;
	  $d$addr$2 = $d;$s$addr$2 = $s;$sub$ptr$rhs$cast$pre$phiZZZZ2D = $sub$ptr$rhs$cast$pre;
	  $sub$ptr$lhs$cast = $d$addr$2;
	  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$pre$phiZZZZ2D))|0;
	  $call = (_strlen(($s$addr$2|0))|0);
	  $add = (($sub$ptr$sub) + ($call))|0;
	  STACKTOP = sp;return ($add|0);
	 }
	 $0 = $s;
	 $1 = $d;
	 $2 = $0 ^ $1;
	 $3 = $2 & 3;
	 $cmp = ($3|0)==(0);
	 do {
	  if ($cmp) {
	   $and343 = $0 & 3;
	   $tobool444 = ($and343|0)==(0);
	   $tobool545 = ($dec|0)==(0);
	   $or$cond46 = $tobool444 | $tobool545;
	   L7: do {
	    if ($or$cond46) {
	     $d$addr$0$lcssa = $d;$n$addr$0$lcssa = $dec;$s$addr$0$lcssa = $s;$tobool5$lcssa = $tobool545;
	     label = 7;
	    } else {
	     $d$addr$049 = $d;$n$addr$048 = $dec;$s$addr$047 = $s;
	     while(1) {
	      $4 = HEAP8[$s$addr$047>>0]|0;
	      HEAP8[$d$addr$049>>0] = $4;
	      $tobool6 = ($4<<24>>24)==(0);
	      if ($tobool6) {
	       $d$addr$0$lcssa65 = $d$addr$049;$n$addr$0$lcssa66 = $n$addr$048;$s$addr$0$lcssa67 = $s$addr$047;
	       break L7;
	      }
	      $dec7 = (($n$addr$048) + -1)|0;
	      $incdec$ptr = (($s$addr$047) + 1|0);
	      $incdec$ptr8 = (($d$addr$049) + 1|0);
	      $5 = $incdec$ptr;
	      $and3 = $5 & 3;
	      $tobool4 = ($and3|0)==(0);
	      $tobool5 = ($dec7|0)==(0);
	      $or$cond = $tobool4 | $tobool5;
	      if ($or$cond) {
	       $d$addr$0$lcssa = $incdec$ptr8;$n$addr$0$lcssa = $dec7;$s$addr$0$lcssa = $incdec$ptr;$tobool5$lcssa = $tobool5;
	       label = 7;
	       break;
	      } else {
	       $d$addr$049 = $incdec$ptr8;$n$addr$048 = $dec7;$s$addr$047 = $incdec$ptr;
	      }
	     }
	    }
	   } while(0);
	   if ((label|0) == 7) {
	    if ($tobool5$lcssa) {
	     $d$addr$1$lcssa = $d$addr$0$lcssa;$s$addr$1$lcssa = $s$addr$0$lcssa;
	     break;
	    } else {
	     $d$addr$0$lcssa65 = $d$addr$0$lcssa;$n$addr$0$lcssa66 = $n$addr$0$lcssa;$s$addr$0$lcssa67 = $s$addr$0$lcssa;
	    }
	   }
	   $6 = HEAP8[$s$addr$0$lcssa67>>0]|0;
	   $tobool12 = ($6<<24>>24)==(0);
	   if ($tobool12) {
	    $d$addr$1$ph = $d$addr$0$lcssa65;$n$addr$2$ph = $n$addr$0$lcssa66;$s$addr$1$ph = $s$addr$0$lcssa67;
	    label = 13;
	   } else {
	    $cmp1536 = ($n$addr$0$lcssa66>>>0)>(3);
	    L15: do {
	     if ($cmp1536) {
	      $n$addr$137 = $n$addr$0$lcssa66;$wd$038 = $d$addr$0$lcssa65;$ws$039 = $s$addr$0$lcssa67;
	      while(1) {
	       $7 = HEAP32[$ws$039>>2]|0;
	       $sub = (($7) + -16843009)|0;
	       $neg = $7 & -2139062144;
	       $and18 = $neg ^ -2139062144;
	       $and19 = $and18 & $sub;
	       $lnot = ($and19|0)==(0);
	       if (!($lnot)) {
	        $n$addr$1$lcssa = $n$addr$137;$wd$0$lcssa = $wd$038;$ws$0$lcssa = $ws$039;
	        break L15;
	       }
	       HEAP32[$wd$038>>2] = $7;
	       $sub24 = (($n$addr$137) + -4)|0;
	       $incdec$ptr25 = (($ws$039) + 4|0);
	       $incdec$ptr26 = (($wd$038) + 4|0);
	       $cmp15 = ($sub24>>>0)>(3);
	       if ($cmp15) {
	        $n$addr$137 = $sub24;$wd$038 = $incdec$ptr26;$ws$039 = $incdec$ptr25;
	       } else {
	        $n$addr$1$lcssa = $sub24;$wd$0$lcssa = $incdec$ptr26;$ws$0$lcssa = $incdec$ptr25;
	        break;
	       }
	      }
	     } else {
	      $n$addr$1$lcssa = $n$addr$0$lcssa66;$wd$0$lcssa = $d$addr$0$lcssa65;$ws$0$lcssa = $s$addr$0$lcssa67;
	     }
	    } while(0);
	    $d$addr$1$ph = $wd$0$lcssa;$n$addr$2$ph = $n$addr$1$lcssa;$s$addr$1$ph = $ws$0$lcssa;
	    label = 13;
	   }
	  } else {
	   $d$addr$1$ph = $d;$n$addr$2$ph = $dec;$s$addr$1$ph = $s;
	   label = 13;
	  }
	 } while(0);
	 L20: do {
	  if ((label|0) == 13) {
	   $tobool3131 = ($n$addr$2$ph|0)==(0);
	   if ($tobool3131) {
	    $d$addr$1$lcssa = $d$addr$1$ph;$s$addr$1$lcssa = $s$addr$1$ph;
	   } else {
	    $d$addr$134 = $d$addr$1$ph;$n$addr$233 = $n$addr$2$ph;$s$addr$132 = $s$addr$1$ph;
	    while(1) {
	     $8 = HEAP8[$s$addr$132>>0]|0;
	     HEAP8[$d$addr$134>>0] = $8;
	     $tobool34 = ($8<<24>>24)==(0);
	     if ($tobool34) {
	      $d$addr$1$lcssa = $d$addr$134;$s$addr$1$lcssa = $s$addr$132;
	      break L20;
	     }
	     $dec38 = (($n$addr$233) + -1)|0;
	     $incdec$ptr39 = (($s$addr$132) + 1|0);
	     $incdec$ptr40 = (($d$addr$134) + 1|0);
	     $tobool31 = ($dec38|0)==(0);
	     if ($tobool31) {
	      $d$addr$1$lcssa = $incdec$ptr40;$s$addr$1$lcssa = $incdec$ptr39;
	      break;
	     } else {
	      $d$addr$134 = $incdec$ptr40;$n$addr$233 = $dec38;$s$addr$132 = $incdec$ptr39;
	     }
	    }
	   }
	  }
	 } while(0);
	 HEAP8[$d$addr$1$lcssa>>0] = 0;
	 $d$addr$2 = $d$addr$1$lcssa;$s$addr$2 = $s$addr$1$lcssa;$sub$ptr$rhs$cast$pre$phiZZZZ2D = $1;
	 $sub$ptr$lhs$cast = $d$addr$2;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$pre$phiZZZZ2D))|0;
	 $call = (_strlen(($s$addr$2|0))|0);
	 $add = (($sub$ptr$sub) + ($call))|0;
	 STACKTOP = sp;return ($add|0);
	}
	function _strncat($d,$s,$n) {
	 $d = $d|0;
	 $s = $s|0;
	 $n = $n|0;
	 var $0 = 0, $add$ptr = 0, $call = 0, $d$addr$0$lcssa = 0, $d$addr$010 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $n$addr$09 = 0, $s$addr$08 = 0, $tobool = 0, $tobool1 = 0, $tobool7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strlen(($d|0))|0);
	 $add$ptr = (($d) + ($call)|0);
	 $tobool7 = ($n|0)==(0);
	 L1: do {
	  if ($tobool7) {
	   $d$addr$0$lcssa = $add$ptr;
	  } else {
	   $d$addr$010 = $add$ptr;$n$addr$09 = $n;$s$addr$08 = $s;
	   while(1) {
	    $0 = HEAP8[$s$addr$08>>0]|0;
	    $tobool1 = ($0<<24>>24)==(0);
	    if ($tobool1) {
	     $d$addr$0$lcssa = $d$addr$010;
	     break L1;
	    }
	    $dec = (($n$addr$09) + -1)|0;
	    $incdec$ptr = (($s$addr$08) + 1|0);
	    $incdec$ptr2 = (($d$addr$010) + 1|0);
	    HEAP8[$d$addr$010>>0] = $0;
	    $tobool = ($dec|0)==(0);
	    if ($tobool) {
	     $d$addr$0$lcssa = $incdec$ptr2;
	     break;
	    } else {
	     $d$addr$010 = $incdec$ptr2;$n$addr$09 = $dec;$s$addr$08 = $incdec$ptr;
	    }
	   }
	  }
	 } while(0);
	 HEAP8[$d$addr$0$lcssa>>0] = 0;
	 STACKTOP = sp;return ($d|0);
	}
	function _strndup($s,$n) {
	 $s = $s|0;
	 $n = $n|0;
	 var $add = 0, $arrayidx = 0, $call = 0, $call1 = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strnlen($s,$n)|0);
	 $add = (($call) + 1)|0;
	 $call1 = (_malloc($add)|0);
	 $tobool = ($call1|0)==(0|0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 _memcpy(($call1|0),($s|0),($call|0))|0;
	 $arrayidx = (($call1) + ($call)|0);
	 HEAP8[$arrayidx>>0] = 0;
	 $retval$0 = $call1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strnlen($s,$n) {
	 $s = $s|0;
	 $n = $n|0;
	 var $call = 0, $cond = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_memchr($s,0,$n)|0);
	 $tobool = ($call|0)==(0|0);
	 if ($tobool) {
	  $cond = $n;
	  STACKTOP = sp;return ($cond|0);
	 }
	 $sub$ptr$lhs$cast = $call;
	 $sub$ptr$rhs$cast = $s;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $cond = $sub$ptr$sub;
	 STACKTOP = sp;return ($cond|0);
	}
	function _strpbrk($s,$b) {
	 $s = $s|0;
	 $b = $b|0;
	 var $0 = 0, $add$ptr = 0, $call = 0, $cond = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strcspn($s,$b)|0);
	 $add$ptr = (($s) + ($call)|0);
	 $0 = HEAP8[$add$ptr>>0]|0;
	 $tobool = ($0<<24>>24)!=(0);
	 $cond = $tobool ? $add$ptr : 0;
	 STACKTOP = sp;return ($cond|0);
	}
	function _strrchr($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $add = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_strlen(($s|0))|0);
	 $add = (($call) + 1)|0;
	 $call1 = (___memrchr($s,$c,$add)|0);
	 STACKTOP = sp;return ($call1|0);
	}
	function _strsep($str,$sep) {
	 $str = $str|0;
	 $sep = $sep|0;
	 var $0 = 0, $1 = 0, $add$ptr = 0, $add$ptr$sum = 0, $call = 0, $end$0 = 0, $incdec$ptr = 0, $retval$0 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$str>>2]|0;
	 $tobool = ($0|0)==(0|0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call = (_strcspn($0,$sep)|0);
	 $add$ptr = (($0) + ($call)|0);
	 $1 = HEAP8[$add$ptr>>0]|0;
	 $tobool1 = ($1<<24>>24)==(0);
	 if ($tobool1) {
	  $end$0 = 0;
	 } else {
	  $add$ptr$sum = (($call) + 1)|0;
	  $incdec$ptr = (($0) + ($add$ptr$sum)|0);
	  HEAP8[$add$ptr>>0] = 0;
	  $end$0 = $incdec$ptr;
	 }
	 HEAP32[$str>>2] = $end$0;
	 $retval$0 = $0;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strsignal($signum) {
	 $signum = $signum|0;
	 var $$ = 0, $0 = 0, $cmp = 0, $dec8 = 0, $dec8$in = 0, $incdec$ptr = 0, $s$0$lcssa = 0, $s$07 = 0, $s$1 = 0, $sub = 0, $tobool = 0, $tobool2 = 0, $tobool6 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub = (($signum) + -1)|0;
	 $cmp = ($sub>>>0)>(63);
	 $$ = $cmp ? 0 : $signum;
	 $tobool6 = ($$|0)==(0);
	 if ($tobool6) {
	  $s$0$lcssa = 154112;
	  STACKTOP = sp;return ($s$0$lcssa|0);
	 } else {
	  $dec8$in = $$;$s$07 = 154112;
	 }
	 while(1) {
	  $s$1 = $s$07;
	  while(1) {
	   $0 = HEAP8[$s$1>>0]|0;
	   $tobool2 = ($0<<24>>24)==(0);
	   $incdec$ptr = (($s$1) + 1|0);
	   if ($tobool2) {
	    break;
	   } else {
	    $s$1 = $incdec$ptr;
	   }
	  }
	  $dec8 = (($dec8$in) + -1)|0;
	  $tobool = ($dec8|0)==(0);
	  if ($tobool) {
	   $s$0$lcssa = $incdec$ptr;
	   break;
	  } else {
	   $dec8$in = $dec8;$s$07 = $incdec$ptr;
	  }
	 }
	 STACKTOP = sp;return ($s$0$lcssa|0);
	}
	function _strspn($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx1 = 0, $arrayidx12 = 0, $arrayidx24 = 0, $byteset = 0, $c$addr$018 = 0, $cmp = 0, $conv10 = 0, $conv22 = 0, $div = 0;
	 var $div23 = 0, $incdec$ptr = 0, $incdec$ptr16 = 0, $incdec$ptr32 = 0, $or = 0, $rem = 0, $rem26 = 0, $retval$0 = 0, $s$addr$0 = 0, $s$addr$1$lcssa = 0, $s$addr$116 = 0, $shl = 0, $shl27 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast34 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast35 = 0, $sub$ptr$sub = 0, $sub$ptr$sub36 = 0, $tobool = 0;
	 var $tobool2 = 0, $tobool20 = 0, $tobool2015 = 0, $tobool28 = 0, $tobool9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $byteset = sp;
	 ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
	 $0 = HEAP8[$c>>0]|0;
	 $tobool = ($0<<24>>24)==(0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx1 = (($c) + 1|0);
	 $1 = HEAP8[$arrayidx1>>0]|0;
	 $tobool2 = ($1<<24>>24)==(0);
	 if ($tobool2) {
	  $s$addr$0 = $s;
	  while(1) {
	   $2 = HEAP8[$s$addr$0>>0]|0;
	   $cmp = ($2<<24>>24)==($0<<24>>24);
	   $incdec$ptr = (($s$addr$0) + 1|0);
	   if ($cmp) {
	    $s$addr$0 = $incdec$ptr;
	   } else {
	    break;
	   }
	  }
	  $sub$ptr$lhs$cast = $s$addr$0;
	  $sub$ptr$rhs$cast = $s;
	  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	  $retval$0 = $sub$ptr$sub;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $4 = $0;$c$addr$018 = $c;
	 }
	 while(1) {
	  $conv10 = $4&255;
	  $rem = $conv10 & 31;
	  $shl = 1 << $rem;
	  $div = $conv10 >>> 5;
	  $arrayidx12 = (($byteset) + ($div<<2)|0);
	  $5 = HEAP32[$arrayidx12>>2]|0;
	  $or = $5 | $shl;
	  HEAP32[$arrayidx12>>2] = $or;
	  $incdec$ptr16 = (($c$addr$018) + 1|0);
	  $6 = HEAP8[$incdec$ptr16>>0]|0;
	  $tobool9 = ($6<<24>>24)==(0);
	  if ($tobool9) {
	   break;
	  } else {
	   $4 = $6;$c$addr$018 = $incdec$ptr16;
	  }
	 }
	 $3 = HEAP8[$s>>0]|0;
	 $tobool2015 = ($3<<24>>24)==(0);
	 L12: do {
	  if ($tobool2015) {
	   $s$addr$1$lcssa = $s;
	  } else {
	   $8 = $3;$s$addr$116 = $s;
	   while(1) {
	    $conv22 = $8&255;
	    $div23 = $conv22 >>> 5;
	    $arrayidx24 = (($byteset) + ($div23<<2)|0);
	    $9 = HEAP32[$arrayidx24>>2]|0;
	    $rem26 = $conv22 & 31;
	    $shl27 = 1 << $rem26;
	    $and = $9 & $shl27;
	    $tobool28 = ($and|0)==(0);
	    $incdec$ptr32 = (($s$addr$116) + 1|0);
	    if ($tobool28) {
	     $s$addr$1$lcssa = $s$addr$116;
	     break L12;
	    }
	    $7 = HEAP8[$incdec$ptr32>>0]|0;
	    $tobool20 = ($7<<24>>24)==(0);
	    if ($tobool20) {
	     $s$addr$1$lcssa = $incdec$ptr32;
	     break;
	    } else {
	     $8 = $7;$s$addr$116 = $incdec$ptr32;
	    }
	   }
	  }
	 } while(0);
	 $sub$ptr$lhs$cast34 = $s$addr$1$lcssa;
	 $sub$ptr$rhs$cast35 = $s;
	 $sub$ptr$sub36 = (($sub$ptr$lhs$cast34) - ($sub$ptr$rhs$cast35))|0;
	 $retval$0 = $sub$ptr$sub36;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strstr($h,$n) {
	 $h = $h|0;
	 $n = $n|0;
	 var $$add$ptr$i = 0, $$add$ptr26$i = 0, $$add$ptr32$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
	 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
	 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr$i23 = 0, $add$ptr119$i = 0, $add$ptr119$us$i = 0, $add$ptr149$i = 0, $add$ptr149$us$i = 0, $add$ptr152$i = 0, $add$ptr152$us$i = 0, $add$ptr182$i = 0, $add$ptr182$us$i = 0, $add$ptr205$i = 0, $add$ptr205$us$i = 0, $add$ptr26$i = 0, $add$ptr32$i = 0;
	 var $add13$i = 0, $add13156$i = 0, $add13156200$i = 0, $add13156200209$i = 0, $add13156200209224$i = 0, $add13156200213$i = 0, $add13156203$i = 0, $add13159$i = 0, $add15$i = 0, $add27$i = 0, $add46$i = 0, $add46144$i = 0, $add46144172$i = 0, $add46144172181$i = 0, $add46144172181196$i = 0, $add46144172185$i = 0, $add46144175$i = 0, $add46147$i = 0, $add50$i = 0, $add62$i = 0;
	 var $add83$i = 0, $add84$i = 0, $add90$i = 0, $add90$mem$0$us$i = 0, $add99$i = 0, $and$i = 0, $and$us$i = 0, $arrayidx$i = 0, $arrayidx1$i = 0, $arrayidx10 = 0, $arrayidx10$i = 0, $arrayidx123$i = 0, $arrayidx123$us$i = 0, $arrayidx126$i = 0, $arrayidx126$us$i = 0, $arrayidx137$i = 0, $arrayidx137$us$i = 0, $arrayidx15 = 0, $arrayidx16$i = 0, $arrayidx163$i = 0;
	 var $arrayidx163$us$i = 0, $arrayidx163131$i = 0, $arrayidx163131$us$i = 0, $arrayidx169$i = 0, $arrayidx169$us$i = 0, $arrayidx19 = 0, $arrayidx19$i = 0, $arrayidx190$i = 0, $arrayidx190$us$i = 0, $arrayidx193$i = 0, $arrayidx193$us$i = 0, $arrayidx2 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx51$i = 0, $arrayidx54$i = 0, $arrayidx6 = 0, $arrayidx8$i = 0, $byteset$i = 0, $call = 0;
	 var $call$i = 0, $call108$i = 0, $call108$us$i = 0, $cmp$i = 0, $cmp$i22 = 0, $cmp$i33 = 0, $cmp$i52 = 0, $cmp104$i = 0, $cmp104$us$i = 0, $cmp114$i = 0, $cmp114$us$i = 0, $cmp14$i = 0, $cmp144$us$i = 0, $cmp155$us$i = 0, $cmp157$i = 0, $cmp157201$i = 0, $cmp157201210$i = 0, $cmp157201210221$i = 0, $cmp171$i = 0, $cmp171$us$i = 0;
	 var $cmp186$i = 0, $cmp186$us$i = 0, $cmp195$i = 0, $cmp195$us$i = 0, $cmp2$i = 0, $cmp21$i = 0, $cmp24$i = 0, $cmp37$i = 0, $cmp47$i = 0, $cmp47145$i = 0, $cmp47145173$i = 0, $cmp47145173182$i = 0, $cmp56$i = 0, $cmp59$i = 0, $cmp73$i = 0, $cmp85$i = 0, $cmp95$i = 0, $conv = 0, $conv$i = 0, $conv$i24 = 0;
	 var $conv$i36 = 0, $conv12$i = 0, $conv12$i30 = 0, $conv12$i47 = 0, $conv124$i = 0, $conv124$us$i = 0, $conv15$i = 0, $conv16$i = 0, $conv18$i = 0, $conv19$i = 0, $conv2$i = 0, $conv2$i26 = 0, $conv2$i39 = 0, $conv21$i = 0, $conv23$i = 0, $conv28$i = 0, $conv5$i = 0, $conv5$i18 = 0, $conv5$i28 = 0, $conv5$i42 = 0;
	 var $conv8$i = 0, $conv9$i = 0, $conv9$i46 = 0, $div$i = 0, $div125$i = 0, $div125$us$i = 0, $h$addr$0$i = 0, $h$addr$0$lcssa$i = 0, $h$addr$0$lcssa$i35 = 0, $h$addr$0$lcssa$i56 = 0, $h$addr$0$us$i = 0, $h$addr$016$i = 0, $h$addr$02$i = 0, $h$addr$04$i = 0, $hw$0$in3$i = 0, $hw$017$i = 0, $hw$05$i = 0, $inc176$i = 0, $inc176$us$i = 0, $inc28$i = 0;
	 var $inc42$i = 0, $inc64$i = 0, $inc79$i = 0, $incdec$ptr$i = 0, $incdec$ptr$i50 = 0, $incdec$ptr17$i = 0, $ip$0$ph218$i = 0, $ip$0$ph218288$i = 0, $ip$0$ph222$i = 0, $ip$1$ip$0$i = 0, $ip$1$ip$0$sub94$i = 0, $ip$1$ph190$i = 0, $ip$1$ph194$i = 0, $jp$0$ph149$ph211$i = 0, $jp$0$ph149202$i = 0, $jp$0$ph223$i = 0, $jp$1$ph138$ph183$i = 0, $jp$1$ph138174$i = 0, $jp$1$ph195$i = 0, $k$0158$i = 0;
	 var $k$1146$i = 0, $k$2$us$i = 0, $k$3133$i = 0, $k$3133$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $l$0167$i = 0, $mem$0$us$i = 0, $notlhs$i = 0, $notrhs$us$i = 0, $or$cond$i = 0, $or$cond$i53 = 0, $or$cond126$us$i = 0, $or$i = 0, $or$i20 = 0, $or$i27 = 0, $or$i41 = 0, $or10$i = 0, $or107$i = 0, $or107296$i = 0;
	 var $or107301$i = 0, $or14$i = 0, $or17$i = 0, $or18$i = 0, $or19$i = 0, $or21$i = 0, $or22$i = 0, $or24$i = 0, $or29$i = 0, $or7$i = 0, $or7$i44 = 0, $or9$i = 0, $p$0$ph$ph207$i = 0, $p$0$ph$ph207292$i = 0, $p$0$ph$ph212$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph179$i = 0, $p$1$ph$ph184$i = 0, $p$3300$i = 0, $rem$i = 0;
	 var $rem130$i = 0, $rem130$us$i = 0, $retval$0 = 0, $shift$i = 0, $shl$i = 0, $shl$i19 = 0, $shl$i25 = 0, $shl$i37 = 0, $shl10$i = 0, $shl13$i = 0, $shl13$i48 = 0, $shl131$i = 0, $shl131$us$i = 0, $shl16$i = 0, $shl16$i49 = 0, $shl17$i = 0, $shl20$i = 0, $shl23$i = 0, $shl27$i = 0, $shl3$i = 0;
	 var $shl3$i40 = 0, $shl6$i = 0, $shl6$i29 = 0, $shl6$i43 = 0, $sub$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$us$i = 0, $sub$ptr$lhs$cast111$i = 0, $sub$ptr$lhs$cast111$us$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$us$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$us$i = 0, $sub$ptr$sub113$i = 0, $sub$ptr$sub113$us$i = 0, $sub101$i = 0, $sub138$i = 0, $sub138$us$i = 0, $sub181$i = 0, $sub181$us$i = 0;
	 var $sub189$i = 0, $sub189$us$i = 0, $sub77$i = 0, $sub93$i = 0, $sub94$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i21 = 0, $tobool$i32 = 0, $tobool$i51 = 0, $tobool$lcssa$i = 0, $tobool$lcssa$i55 = 0, $tobool1 = 0, $tobool109$i = 0, $tobool109$us$i = 0, $tobool11 = 0, $tobool132$i = 0, $tobool132$us$i = 0, $tobool139$i = 0, $tobool139$us$i = 0;
	 var $tobool16 = 0, $tobool165$i = 0, $tobool165$us$i = 0, $tobool165132$i = 0, $tobool165132$us$i = 0, $tobool20 = 0, $tobool22$i = 0, $tobool25 = 0, $tobool29 = 0, $tobool3 = 0, $tobool3$i = 0, $tobool7 = 0, $tobool91$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $byteset$i = sp + 1024|0;
	 $shift$i = sp;
	 $0 = HEAP8[$n>>0]|0;
	 $tobool = ($0<<24>>24)==(0);
	 if ($tobool) {
	  $retval$0 = $h;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $conv = $0 << 24 >> 24;
	 $call = (_strchr($h,$conv)|0);
	 $tobool1 = ($call|0)==(0|0);
	 if ($tobool1) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx2 = (($n) + 1|0);
	 $1 = HEAP8[$arrayidx2>>0]|0;
	 $tobool3 = ($1<<24>>24)==(0);
	 if ($tobool3) {
	  $retval$0 = $call;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx6 = (($call) + 1|0);
	 $2 = HEAP8[$arrayidx6>>0]|0;
	 $tobool7 = ($2<<24>>24)==(0);
	 if ($tobool7) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx10 = (($n) + 2|0);
	 $3 = HEAP8[$arrayidx10>>0]|0;
	 $tobool11 = ($3<<24>>24)==(0);
	 if ($tobool11) {
	  $conv$i = $0&255;
	  $shl$i = $conv$i << 8;
	  $conv2$i = $1&255;
	  $or$i = $conv2$i | $shl$i;
	  $4 = HEAP8[$call>>0]|0;
	  $conv5$i = $4&255;
	  $conv8$i = $2&255;
	  $shl6$i = $conv5$i << 8;
	  $or9$i = $shl6$i | $conv8$i;
	  $39 = $2;$h$addr$02$i = $arrayidx6;$hw$0$in3$i = $or9$i;
	  while(1) {
	   $conv12$i = $hw$0$in3$i & 65535;
	   $cmp$i = ($conv12$i|0)==($or$i|0);
	   if ($cmp$i) {
	    $6 = $39;$h$addr$0$lcssa$i = $h$addr$02$i;
	    break;
	   }
	   $shl16$i = $conv12$i << 8;
	   $incdec$ptr17$i = (($h$addr$02$i) + 1|0);
	   $5 = HEAP8[$incdec$ptr17$i>>0]|0;
	   $conv18$i = $5&255;
	   $or19$i = $conv18$i | $shl16$i;
	   $tobool$i = ($5<<24>>24)==(0);
	   if ($tobool$i) {
	    $6 = 0;$h$addr$0$lcssa$i = $incdec$ptr17$i;
	    break;
	   } else {
	    $39 = $5;$h$addr$02$i = $incdec$ptr17$i;$hw$0$in3$i = $or19$i;
	   }
	  }
	  $tobool22$i = ($6<<24>>24)==(0);
	  $add$ptr$i = (($h$addr$0$lcssa$i) + -1|0);
	  $$add$ptr$i = $tobool22$i ? 0 : $add$ptr$i;
	  $retval$0 = $$add$ptr$i;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx15 = (($call) + 2|0);
	 $7 = HEAP8[$arrayidx15>>0]|0;
	 $tobool16 = ($7<<24>>24)==(0);
	 if ($tobool16) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx19 = (($n) + 3|0);
	 $8 = HEAP8[$arrayidx19>>0]|0;
	 $tobool20 = ($8<<24>>24)==(0);
	 if ($tobool20) {
	  $conv$i24 = $0&255;
	  $shl$i25 = $conv$i24 << 24;
	  $conv2$i26 = $1&255;
	  $shl3$i = $conv2$i26 << 16;
	  $or$i27 = $shl3$i | $shl$i25;
	  $conv5$i28 = $3&255;
	  $shl6$i29 = $conv5$i28 << 8;
	  $or7$i = $or$i27 | $shl6$i29;
	  $9 = HEAP8[$call>>0]|0;
	  $conv9$i = $9&255;
	  $shl10$i = $conv9$i << 24;
	  $conv12$i30 = $2&255;
	  $shl13$i = $conv12$i30 << 16;
	  $conv16$i = $7&255;
	  $shl17$i = $conv16$i << 8;
	  $or14$i = $shl17$i | $shl13$i;
	  $or18$i = $or14$i | $shl10$i;
	  $cmp2$i = ($or18$i|0)==($or7$i|0);
	  if ($cmp2$i) {
	   $h$addr$0$lcssa$i35 = $arrayidx15;$tobool$lcssa$i = 0;
	  } else {
	   $h$addr$04$i = $arrayidx15;$hw$05$i = $or18$i;
	   while(1) {
	    $incdec$ptr$i = (($h$addr$04$i) + 1|0);
	    $10 = HEAP8[$incdec$ptr$i>>0]|0;
	    $conv21$i = $10&255;
	    $or22$i = $conv21$i | $hw$05$i;
	    $shl23$i = $or22$i << 8;
	    $tobool$i32 = ($10<<24>>24)==(0);
	    $cmp$i33 = ($shl23$i|0)==($or7$i|0);
	    $or$cond$i = $tobool$i32 | $cmp$i33;
	    if ($or$cond$i) {
	     $h$addr$0$lcssa$i35 = $incdec$ptr$i;$tobool$lcssa$i = $tobool$i32;
	     break;
	    } else {
	     $h$addr$04$i = $incdec$ptr$i;$hw$05$i = $shl23$i;
	    }
	   }
	  }
	  $add$ptr26$i = (($h$addr$0$lcssa$i35) + -2|0);
	  $$add$ptr26$i = $tobool$lcssa$i ? 0 : $add$ptr26$i;
	  $retval$0 = $$add$ptr26$i;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx24 = (($call) + 3|0);
	 $11 = HEAP8[$arrayidx24>>0]|0;
	 $tobool25 = ($11<<24>>24)==(0);
	 if ($tobool25) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx28 = (($n) + 4|0);
	 $12 = HEAP8[$arrayidx28>>0]|0;
	 $tobool29 = ($12<<24>>24)==(0);
	 if ($tobool29) {
	  $conv$i36 = $0&255;
	  $shl$i37 = $conv$i36 << 24;
	  $conv2$i39 = $1&255;
	  $shl3$i40 = $conv2$i39 << 16;
	  $or$i41 = $shl3$i40 | $shl$i37;
	  $conv5$i42 = $3&255;
	  $shl6$i43 = $conv5$i42 << 8;
	  $or7$i44 = $or$i41 | $shl6$i43;
	  $conv9$i46 = $8&255;
	  $or10$i = $or7$i44 | $conv9$i46;
	  $13 = HEAP8[$call>>0]|0;
	  $conv12$i47 = $13&255;
	  $shl13$i48 = $conv12$i47 << 24;
	  $conv15$i = $2&255;
	  $shl16$i49 = $conv15$i << 16;
	  $conv19$i = $7&255;
	  $shl20$i = $conv19$i << 8;
	  $conv23$i = $11&255;
	  $or17$i = $shl20$i | $shl16$i49;
	  $or21$i = $or17$i | $conv23$i;
	  $or24$i = $or21$i | $shl13$i48;
	  $cmp14$i = ($or24$i|0)==($or10$i|0);
	  if ($cmp14$i) {
	   $h$addr$0$lcssa$i56 = $arrayidx24;$tobool$lcssa$i55 = 0;
	  } else {
	   $h$addr$016$i = $arrayidx24;$hw$017$i = $or24$i;
	   while(1) {
	    $shl27$i = $hw$017$i << 8;
	    $incdec$ptr$i50 = (($h$addr$016$i) + 1|0);
	    $14 = HEAP8[$incdec$ptr$i50>>0]|0;
	    $conv28$i = $14&255;
	    $or29$i = $conv28$i | $shl27$i;
	    $tobool$i51 = ($14<<24>>24)==(0);
	    $cmp$i52 = ($or29$i|0)==($or10$i|0);
	    $or$cond$i53 = $tobool$i51 | $cmp$i52;
	    if ($or$cond$i53) {
	     $h$addr$0$lcssa$i56 = $incdec$ptr$i50;$tobool$lcssa$i55 = $tobool$i51;
	     break;
	    } else {
	     $h$addr$016$i = $incdec$ptr$i50;$hw$017$i = $or29$i;
	    }
	   }
	  }
	  $add$ptr32$i = (($h$addr$0$lcssa$i56) + -3|0);
	  $$add$ptr32$i = $tobool$lcssa$i55 ? 0 : $add$ptr32$i;
	  $retval$0 = $$add$ptr32$i;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
	 $16 = $0;$l$0167$i = 0;
	 while(1) {
	  $arrayidx1$i = (($call) + ($l$0167$i)|0);
	  $15 = HEAP8[$arrayidx1$i>>0]|0;
	  $tobool3$i = ($15<<24>>24)==(0);
	  if ($tobool3$i) {
	   $retval$0 = 0;
	   label = 79;
	   break;
	  }
	  $conv5$i18 = $16&255;
	  $rem$i = $conv5$i18 & 31;
	  $shl$i19 = 1 << $rem$i;
	  $div$i = $conv5$i18 >>> 5;
	  $arrayidx8$i = (($byteset$i) + ($div$i<<2)|0);
	  $17 = HEAP32[$arrayidx8$i>>2]|0;
	  $or$i20 = $17 | $shl$i19;
	  HEAP32[$arrayidx8$i>>2] = $or$i20;
	  $add$i = (($l$0167$i) + 1)|0;
	  $arrayidx10$i = (($shift$i) + ($conv5$i18<<2)|0);
	  HEAP32[$arrayidx10$i>>2] = $add$i;
	  $arrayidx$i = (($n) + ($add$i)|0);
	  $18 = HEAP8[$arrayidx$i>>0]|0;
	  $tobool$i21 = ($18<<24>>24)==(0);
	  if ($tobool$i21) {
	   break;
	  } else {
	   $16 = $18;$l$0167$i = $add$i;
	  }
	 }
	 if ((label|0) == 79) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $cmp157201210221$i = ($add$i>>>0)>(1);
	 L49: do {
	  if ($cmp157201210221$i) {
	   $add13156200209224$i = 1;$ip$0$ph222$i = -1;$jp$0$ph223$i = 0;
	   L50: while(1) {
	    $add13156200213$i = $add13156200209224$i;$jp$0$ph149$ph211$i = $jp$0$ph223$i;$p$0$ph$ph212$i = 1;
	    while(1) {
	     $add13156203$i = $add13156200213$i;$jp$0$ph149202$i = $jp$0$ph149$ph211$i;
	     L54: while(1) {
	      $add13159$i = $add13156203$i;$k$0158$i = 1;
	      while(1) {
	       $add15$i = (($k$0158$i) + ($ip$0$ph222$i))|0;
	       $arrayidx16$i = (($n) + ($add15$i)|0);
	       $19 = HEAP8[$arrayidx16$i>>0]|0;
	       $arrayidx19$i = (($n) + ($add13159$i)|0);
	       $20 = HEAP8[$arrayidx19$i>>0]|0;
	       $cmp21$i = ($19<<24>>24)==($20<<24>>24);
	       if (!($cmp21$i)) {
	        break L54;
	       }
	       $cmp24$i = ($k$0158$i|0)==($p$0$ph$ph212$i|0);
	       $inc28$i = (($k$0158$i) + 1)|0;
	       if ($cmp24$i) {
	        break;
	       }
	       $add13$i = (($inc28$i) + ($jp$0$ph149202$i))|0;
	       $cmp$i22 = ($add13$i>>>0)<($add$i>>>0);
	       if ($cmp$i22) {
	        $add13159$i = $add13$i;$k$0158$i = $inc28$i;
	       } else {
	        $ip$0$ph218$i = $ip$0$ph222$i;$p$0$ph$ph207$i = $p$0$ph$ph212$i;
	        break L50;
	       }
	      }
	      $add27$i = (($jp$0$ph149202$i) + ($p$0$ph$ph212$i))|0;
	      $add13156$i = (($add27$i) + 1)|0;
	      $cmp157$i = ($add13156$i>>>0)<($add$i>>>0);
	      if ($cmp157$i) {
	       $add13156203$i = $add13156$i;$jp$0$ph149202$i = $add27$i;
	      } else {
	       $ip$0$ph218$i = $ip$0$ph222$i;$p$0$ph$ph207$i = $p$0$ph$ph212$i;
	       break L50;
	      }
	     }
	     $cmp37$i = ($19&255)>($20&255);
	     $sub$i = (($add13159$i) - ($ip$0$ph222$i))|0;
	     if (!($cmp37$i)) {
	      break;
	     }
	     $add13156200$i = (($add13159$i) + 1)|0;
	     $cmp157201$i = ($add13156200$i>>>0)<($add$i>>>0);
	     if ($cmp157201$i) {
	      $add13156200213$i = $add13156200$i;$jp$0$ph149$ph211$i = $add13159$i;$p$0$ph$ph212$i = $sub$i;
	     } else {
	      $ip$0$ph218$i = $ip$0$ph222$i;$p$0$ph$ph207$i = $sub$i;
	      break L50;
	     }
	    }
	    $inc42$i = (($jp$0$ph149202$i) + 1)|0;
	    $add13156200209$i = (($jp$0$ph149202$i) + 2)|0;
	    $cmp157201210$i = ($add13156200209$i>>>0)<($add$i>>>0);
	    if ($cmp157201210$i) {
	     $add13156200209224$i = $add13156200209$i;$ip$0$ph222$i = $jp$0$ph149202$i;$jp$0$ph223$i = $inc42$i;
	    } else {
	     $ip$0$ph218$i = $jp$0$ph149202$i;$p$0$ph$ph207$i = 1;
	     break;
	    }
	   }
	   $add46144172181196$i = 1;$ip$1$ph194$i = -1;$jp$1$ph195$i = 0;
	   while(1) {
	    $add46144172185$i = $add46144172181196$i;$jp$1$ph138$ph183$i = $jp$1$ph195$i;$p$1$ph$ph184$i = 1;
	    while(1) {
	     $add46144175$i = $add46144172185$i;$jp$1$ph138174$i = $jp$1$ph138$ph183$i;
	     L69: while(1) {
	      $add46147$i = $add46144175$i;$k$1146$i = 1;
	      while(1) {
	       $add50$i = (($k$1146$i) + ($ip$1$ph194$i))|0;
	       $arrayidx51$i = (($n) + ($add50$i)|0);
	       $21 = HEAP8[$arrayidx51$i>>0]|0;
	       $arrayidx54$i = (($n) + ($add46147$i)|0);
	       $22 = HEAP8[$arrayidx54$i>>0]|0;
	       $cmp56$i = ($21<<24>>24)==($22<<24>>24);
	       if (!($cmp56$i)) {
	        break L69;
	       }
	       $cmp59$i = ($k$1146$i|0)==($p$1$ph$ph184$i|0);
	       $inc64$i = (($k$1146$i) + 1)|0;
	       if ($cmp59$i) {
	        break;
	       }
	       $add46$i = (($inc64$i) + ($jp$1$ph138174$i))|0;
	       $cmp47$i = ($add46$i>>>0)<($add$i>>>0);
	       if ($cmp47$i) {
	        $add46147$i = $add46$i;$k$1146$i = $inc64$i;
	       } else {
	        $ip$0$ph218288$i = $ip$0$ph218$i;$ip$1$ph190$i = $ip$1$ph194$i;$p$0$ph$ph207292$i = $p$0$ph$ph207$i;$p$1$ph$ph179$i = $p$1$ph$ph184$i;
	        break L49;
	       }
	      }
	      $add62$i = (($jp$1$ph138174$i) + ($p$1$ph$ph184$i))|0;
	      $add46144$i = (($add62$i) + 1)|0;
	      $cmp47145$i = ($add46144$i>>>0)<($add$i>>>0);
	      if ($cmp47145$i) {
	       $add46144175$i = $add46144$i;$jp$1$ph138174$i = $add62$i;
	      } else {
	       $ip$0$ph218288$i = $ip$0$ph218$i;$ip$1$ph190$i = $ip$1$ph194$i;$p$0$ph$ph207292$i = $p$0$ph$ph207$i;$p$1$ph$ph179$i = $p$1$ph$ph184$i;
	       break L49;
	      }
	     }
	     $cmp73$i = ($21&255)<($22&255);
	     $sub77$i = (($add46147$i) - ($ip$1$ph194$i))|0;
	     if (!($cmp73$i)) {
	      break;
	     }
	     $add46144172$i = (($add46147$i) + 1)|0;
	     $cmp47145173$i = ($add46144172$i>>>0)<($add$i>>>0);
	     if ($cmp47145173$i) {
	      $add46144172185$i = $add46144172$i;$jp$1$ph138$ph183$i = $add46147$i;$p$1$ph$ph184$i = $sub77$i;
	     } else {
	      $ip$0$ph218288$i = $ip$0$ph218$i;$ip$1$ph190$i = $ip$1$ph194$i;$p$0$ph$ph207292$i = $p$0$ph$ph207$i;$p$1$ph$ph179$i = $sub77$i;
	      break L49;
	     }
	    }
	    $inc79$i = (($jp$1$ph138174$i) + 1)|0;
	    $add46144172181$i = (($jp$1$ph138174$i) + 2)|0;
	    $cmp47145173182$i = ($add46144172181$i>>>0)<($add$i>>>0);
	    if ($cmp47145173182$i) {
	     $add46144172181196$i = $add46144172181$i;$ip$1$ph194$i = $jp$1$ph138174$i;$jp$1$ph195$i = $inc79$i;
	    } else {
	     $ip$0$ph218288$i = $ip$0$ph218$i;$ip$1$ph190$i = $jp$1$ph138174$i;$p$0$ph$ph207292$i = $p$0$ph$ph207$i;$p$1$ph$ph179$i = 1;
	     break;
	    }
	   }
	  } else {
	   $ip$0$ph218288$i = -1;$ip$1$ph190$i = -1;$p$0$ph$ph207292$i = 1;$p$1$ph$ph179$i = 1;
	  }
	 } while(0);
	 $add83$i = (($ip$1$ph190$i) + 1)|0;
	 $add84$i = (($ip$0$ph218288$i) + 1)|0;
	 $cmp85$i = ($add83$i>>>0)>($add84$i>>>0);
	 $p$1$p$0$i = $cmp85$i ? $p$1$ph$ph179$i : $p$0$ph$ph207292$i;
	 $ip$1$ip$0$i = $cmp85$i ? $ip$1$ph190$i : $ip$0$ph218288$i;
	 $add$ptr$i23 = (($n) + ($p$1$p$0$i)|0);
	 $add90$i = (($ip$1$ip$0$i) + 1)|0;
	 $call$i = (_memcmp($n,$add$ptr$i23,$add90$i)|0);
	 $tobool91$i = ($call$i|0)==(0);
	 if ($tobool91$i) {
	  $sub101$i = (($add$i) - ($p$1$p$0$i))|0;
	  $or107$i = $add$i | 63;
	  $notlhs$i = ($add$i|0)==($p$1$p$0$i|0);
	  if ($notlhs$i) {
	   $or107301$i = $or107$i;$p$3300$i = $add$i;
	  } else {
	   $h$addr$0$us$i = $call;$mem$0$us$i = 0;$z$0$us$i = $call;
	   L83: while(1) {
	    $sub$ptr$lhs$cast$us$i = $z$0$us$i;
	    $sub$ptr$rhs$cast$us$i = $h$addr$0$us$i;
	    $sub$ptr$sub$us$i = (($sub$ptr$lhs$cast$us$i) - ($sub$ptr$rhs$cast$us$i))|0;
	    $cmp104$us$i = ($sub$ptr$sub$us$i>>>0)<($add$i>>>0);
	    do {
	     if ($cmp104$us$i) {
	      $call108$us$i = (_memchr($z$0$us$i,0,$or107$i)|0);
	      $tobool109$us$i = ($call108$us$i|0)==(0|0);
	      if ($tobool109$us$i) {
	       $add$ptr119$us$i = (($z$0$us$i) + ($or107$i)|0);
	       $z$1$us$i = $add$ptr119$us$i;
	       break;
	      } else {
	       $sub$ptr$lhs$cast111$us$i = $call108$us$i;
	       $sub$ptr$sub113$us$i = (($sub$ptr$lhs$cast111$us$i) - ($sub$ptr$rhs$cast$us$i))|0;
	       $cmp114$us$i = ($sub$ptr$sub113$us$i>>>0)<($add$i>>>0);
	       if ($cmp114$us$i) {
	        $retval$0 = 0;
	        label = 79;
	        break L83;
	       } else {
	        $z$1$us$i = $call108$us$i;
	        break;
	       }
	      }
	     } else {
	      $z$1$us$i = $z$0$us$i;
	     }
	    } while(0);
	    $arrayidx123$us$i = (($h$addr$0$us$i) + ($l$0167$i)|0);
	    $23 = HEAP8[$arrayidx123$us$i>>0]|0;
	    $conv124$us$i = $23&255;
	    $div125$us$i = $conv124$us$i >>> 5;
	    $arrayidx126$us$i = (($byteset$i) + ($div125$us$i<<2)|0);
	    $24 = HEAP32[$arrayidx126$us$i>>2]|0;
	    $rem130$us$i = $conv124$us$i & 31;
	    $shl131$us$i = 1 << $rem130$us$i;
	    $and$us$i = $shl131$us$i & $24;
	    $tobool132$us$i = ($and$us$i|0)==(0);
	    if ($tobool132$us$i) {
	     $add$ptr152$us$i = (($h$addr$0$us$i) + ($add$i)|0);
	     $h$addr$0$us$i = $add$ptr152$us$i;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
	     continue;
	    }
	    $arrayidx137$us$i = (($shift$i) + ($conv124$us$i<<2)|0);
	    $25 = HEAP32[$arrayidx137$us$i>>2]|0;
	    $sub138$us$i = (($add$i) - ($25))|0;
	    $tobool139$us$i = ($add$i|0)==($25|0);
	    if (!($tobool139$us$i)) {
	     $notrhs$us$i = ($mem$0$us$i|0)!=(0);
	     $cmp144$us$i = ($sub138$us$i>>>0)<($p$1$p$0$i>>>0);
	     $or$cond126$us$i = $notrhs$us$i & $cmp144$us$i;
	     $k$2$us$i = $or$cond126$us$i ? $sub101$i : $sub138$us$i;
	     $add$ptr149$us$i = (($h$addr$0$us$i) + ($k$2$us$i)|0);
	     $h$addr$0$us$i = $add$ptr149$us$i;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
	     continue;
	    }
	    $cmp155$us$i = ($add90$i>>>0)>($mem$0$us$i>>>0);
	    $add90$mem$0$us$i = $cmp155$us$i ? $add90$i : $mem$0$us$i;
	    $arrayidx163131$us$i = (($n) + ($add90$mem$0$us$i)|0);
	    $26 = HEAP8[$arrayidx163131$us$i>>0]|0;
	    $tobool165132$us$i = ($26<<24>>24)==(0);
	    L97: do {
	     if ($tobool165132$us$i) {
	      $k$4$us$i = $add90$i;
	     } else {
	      $$pr$us$i = $26;$k$3133$us$i = $add90$mem$0$us$i;
	      while(1) {
	       $arrayidx169$us$i = (($h$addr$0$us$i) + ($k$3133$us$i)|0);
	       $28 = HEAP8[$arrayidx169$us$i>>0]|0;
	       $cmp171$us$i = ($$pr$us$i<<24>>24)==($28<<24>>24);
	       $inc176$us$i = (($k$3133$us$i) + 1)|0;
	       if (!($cmp171$us$i)) {
	        break;
	       }
	       $arrayidx163$us$i = (($n) + ($inc176$us$i)|0);
	       $27 = HEAP8[$arrayidx163$us$i>>0]|0;
	       $tobool165$us$i = ($27<<24>>24)==(0);
	       if ($tobool165$us$i) {
	        $k$4$us$i = $add90$i;
	        break L97;
	       } else {
	        $$pr$us$i = $27;$k$3133$us$i = $inc176$us$i;
	       }
	      }
	      $sub181$us$i = (($k$3133$us$i) - ($ip$1$ip$0$i))|0;
	      $add$ptr182$us$i = (($h$addr$0$us$i) + ($sub181$us$i)|0);
	      $h$addr$0$us$i = $add$ptr182$us$i;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
	      continue L83;
	     }
	    } while(0);
	    while(1) {
	     $cmp186$us$i = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
	     if (!($cmp186$us$i)) {
	      $retval$0 = $h$addr$0$us$i;
	      label = 79;
	      break L83;
	     }
	     $sub189$us$i = (($k$4$us$i) + -1)|0;
	     $arrayidx190$us$i = (($n) + ($sub189$us$i)|0);
	     $29 = HEAP8[$arrayidx190$us$i>>0]|0;
	     $arrayidx193$us$i = (($h$addr$0$us$i) + ($sub189$us$i)|0);
	     $30 = HEAP8[$arrayidx193$us$i>>0]|0;
	     $cmp195$us$i = ($29<<24>>24)==($30<<24>>24);
	     if ($cmp195$us$i) {
	      $k$4$us$i = $sub189$us$i;
	     } else {
	      break;
	     }
	    }
	    $add$ptr205$us$i = (($h$addr$0$us$i) + ($p$1$p$0$i)|0);
	    $h$addr$0$us$i = $add$ptr205$us$i;$mem$0$us$i = $sub101$i;$z$0$us$i = $z$1$us$i;
	   }
	   if ((label|0) == 79) {
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  }
	 } else {
	  $sub93$i = (($add$i) - ($ip$1$ip$0$i))|0;
	  $sub94$i = (($sub93$i) + -1)|0;
	  $cmp95$i = ($ip$1$ip$0$i>>>0)>($sub94$i>>>0);
	  $ip$1$ip$0$sub94$i = $cmp95$i ? $ip$1$ip$0$i : $sub94$i;
	  $add99$i = (($ip$1$ip$0$sub94$i) + 1)|0;
	  $or107296$i = $add$i | 63;
	  $or107301$i = $or107296$i;$p$3300$i = $add99$i;
	 }
	 $arrayidx163131$i = (($n) + ($add90$i)|0);
	 $h$addr$0$i = $call;$z$0$i = $call;
	 L110: while(1) {
	  $sub$ptr$lhs$cast$i = $z$0$i;
	  $sub$ptr$rhs$cast$i = $h$addr$0$i;
	  $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	  $cmp104$i = ($sub$ptr$sub$i>>>0)<($add$i>>>0);
	  do {
	   if ($cmp104$i) {
	    $call108$i = (_memchr($z$0$i,0,$or107301$i)|0);
	    $tobool109$i = ($call108$i|0)==(0|0);
	    if ($tobool109$i) {
	     $add$ptr119$i = (($z$0$i) + ($or107301$i)|0);
	     $z$1$i = $add$ptr119$i;
	     break;
	    } else {
	     $sub$ptr$lhs$cast111$i = $call108$i;
	     $sub$ptr$sub113$i = (($sub$ptr$lhs$cast111$i) - ($sub$ptr$rhs$cast$i))|0;
	     $cmp114$i = ($sub$ptr$sub113$i>>>0)<($add$i>>>0);
	     if ($cmp114$i) {
	      $retval$0 = 0;
	      label = 79;
	      break L110;
	     } else {
	      $z$1$i = $call108$i;
	      break;
	     }
	    }
	   } else {
	    $z$1$i = $z$0$i;
	   }
	  } while(0);
	  $arrayidx123$i = (($h$addr$0$i) + ($l$0167$i)|0);
	  $31 = HEAP8[$arrayidx123$i>>0]|0;
	  $conv124$i = $31&255;
	  $div125$i = $conv124$i >>> 5;
	  $arrayidx126$i = (($byteset$i) + ($div125$i<<2)|0);
	  $32 = HEAP32[$arrayidx126$i>>2]|0;
	  $rem130$i = $conv124$i & 31;
	  $shl131$i = 1 << $rem130$i;
	  $and$i = $shl131$i & $32;
	  $tobool132$i = ($and$i|0)==(0);
	  if ($tobool132$i) {
	   $add$ptr152$i = (($h$addr$0$i) + ($add$i)|0);
	   $h$addr$0$i = $add$ptr152$i;$z$0$i = $z$1$i;
	   continue;
	  }
	  $arrayidx137$i = (($shift$i) + ($conv124$i<<2)|0);
	  $33 = HEAP32[$arrayidx137$i>>2]|0;
	  $tobool139$i = ($add$i|0)==($33|0);
	  if (!($tobool139$i)) {
	   $sub138$i = (($add$i) - ($33))|0;
	   $add$ptr149$i = (($h$addr$0$i) + ($sub138$i)|0);
	   $h$addr$0$i = $add$ptr149$i;$z$0$i = $z$1$i;
	   continue;
	  }
	  $34 = HEAP8[$arrayidx163131$i>>0]|0;
	  $tobool165132$i = ($34<<24>>24)==(0);
	  L124: do {
	   if ($tobool165132$i) {
	    $k$4$i = $add90$i;
	   } else {
	    $$pr$i = $34;$k$3133$i = $add90$i;
	    while(1) {
	     $arrayidx169$i = (($h$addr$0$i) + ($k$3133$i)|0);
	     $36 = HEAP8[$arrayidx169$i>>0]|0;
	     $cmp171$i = ($$pr$i<<24>>24)==($36<<24>>24);
	     $inc176$i = (($k$3133$i) + 1)|0;
	     if (!($cmp171$i)) {
	      break;
	     }
	     $arrayidx163$i = (($n) + ($inc176$i)|0);
	     $35 = HEAP8[$arrayidx163$i>>0]|0;
	     $tobool165$i = ($35<<24>>24)==(0);
	     if ($tobool165$i) {
	      $k$4$i = $add90$i;
	      break L124;
	     } else {
	      $$pr$i = $35;$k$3133$i = $inc176$i;
	     }
	    }
	    $sub181$i = (($k$3133$i) - ($ip$1$ip$0$i))|0;
	    $add$ptr182$i = (($h$addr$0$i) + ($sub181$i)|0);
	    $h$addr$0$i = $add$ptr182$i;$z$0$i = $z$1$i;
	    continue L110;
	   }
	  } while(0);
	  while(1) {
	   $cmp186$i = ($k$4$i|0)==(0);
	   if ($cmp186$i) {
	    $retval$0 = $h$addr$0$i;
	    label = 79;
	    break L110;
	   }
	   $sub189$i = (($k$4$i) + -1)|0;
	   $arrayidx190$i = (($n) + ($sub189$i)|0);
	   $37 = HEAP8[$arrayidx190$i>>0]|0;
	   $arrayidx193$i = (($h$addr$0$i) + ($sub189$i)|0);
	   $38 = HEAP8[$arrayidx193$i>>0]|0;
	   $cmp195$i = ($37<<24>>24)==($38<<24>>24);
	   if ($cmp195$i) {
	    $k$4$i = $sub189$i;
	   } else {
	    break;
	   }
	  }
	  $add$ptr205$i = (($h$addr$0$i) + ($p$3300$i)|0);
	  $h$addr$0$i = $add$ptr205$i;$z$0$i = $z$1$i;
	 }
	 if ((label|0) == 79) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _strtok($s,$sep) {
	 $s = $s|0;
	 $sep = $sep|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr6 = 0, $add$ptr6$sum = 0, $call = 0, $call5 = 0, $incdec$ptr = 0, $retval$0 = 0, $s$addr$0 = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($s|0)==(0|0);
	 if ($tobool) {
	  $0 = HEAP32[154784>>2]|0;
	  $tobool1 = ($0|0)==(0|0);
	  if ($tobool1) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $s$addr$0 = $0;
	  }
	 } else {
	  $s$addr$0 = $s;
	 }
	 $call = (_strspn($s$addr$0,$sep)|0);
	 $add$ptr = (($s$addr$0) + ($call)|0);
	 $1 = HEAP8[$add$ptr>>0]|0;
	 $tobool2 = ($1<<24>>24)==(0);
	 if ($tobool2) {
	  HEAP32[154784>>2] = 0;
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call5 = (_strcspn($add$ptr,$sep)|0);
	 $add$ptr$sum = (($call5) + ($call))|0;
	 $add$ptr6 = (($s$addr$0) + ($add$ptr$sum)|0);
	 HEAP32[154784>>2] = $add$ptr6;
	 $2 = HEAP8[$add$ptr6>>0]|0;
	 $tobool7 = ($2<<24>>24)==(0);
	 if ($tobool7) {
	  HEAP32[154784>>2] = 0;
	  $retval$0 = $add$ptr;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $add$ptr6$sum = (($add$ptr$sum) + 1)|0;
	  $incdec$ptr = (($s$addr$0) + ($add$ptr6$sum)|0);
	  HEAP32[154784>>2] = $incdec$ptr;
	  HEAP8[$add$ptr6>>0] = 0;
	  $retval$0 = $add$ptr;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _strtok_r($s,$sep,$p) {
	 $s = $s|0;
	 $sep = $sep|0;
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr6 = 0, $add$ptr6$sum = 0, $call = 0, $call5 = 0, $incdec$ptr = 0, $retval$0 = 0, $s$addr$0 = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($s|0)==(0|0);
	 if ($tobool) {
	  $0 = HEAP32[$p>>2]|0;
	  $tobool1 = ($0|0)==(0|0);
	  if ($tobool1) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $s$addr$0 = $0;
	  }
	 } else {
	  $s$addr$0 = $s;
	 }
	 $call = (_strspn($s$addr$0,$sep)|0);
	 $add$ptr = (($s$addr$0) + ($call)|0);
	 $1 = HEAP8[$add$ptr>>0]|0;
	 $tobool2 = ($1<<24>>24)==(0);
	 if ($tobool2) {
	  HEAP32[$p>>2] = 0;
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call5 = (_strcspn($add$ptr,$sep)|0);
	 $add$ptr$sum = (($call5) + ($call))|0;
	 $add$ptr6 = (($s$addr$0) + ($add$ptr$sum)|0);
	 HEAP32[$p>>2] = $add$ptr6;
	 $2 = HEAP8[$add$ptr6>>0]|0;
	 $tobool7 = ($2<<24>>24)==(0);
	 if ($tobool7) {
	  HEAP32[$p>>2] = 0;
	  $retval$0 = $add$ptr;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $add$ptr6$sum = (($add$ptr$sum) + 1)|0;
	  $incdec$ptr = (($s$addr$0) + ($add$ptr6$sum)|0);
	  HEAP32[$p>>2] = $incdec$ptr;
	  HEAP8[$add$ptr6>>0] = 0;
	  $retval$0 = $add$ptr;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _strverscmp($l,$r) {
	 $l = $l|0;
	 $r = $r|0;
	 var $$ = 0, $$haszero$0 = 0, $$haszero$033 = 0, $$haszero$035 = 0, $$lcssa4056 = 0, $$lcssa57 = 0, $$pre = 0, $$pre54 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx$phi$trans$insert = 0, $arrayidx49$phi$trans$insert = 0;
	 var $cmp = 0, $cmp14 = 0, $cmp22 = 0, $cmp25 = 0, $cmp28 = 0, $cmp43 = 0, $cmp56 = 0, $cmp62 = 0, $cmp7 = 0, $conv = 0, $conv32 = 0, $conv36 = 0, $conv42 = 0, $conv43 = 0, $conv47 = 0, $conv50 = 0, $haszero$046 = 0, $haszero$1 = 0, $haszero$2 = 0, $inc = 0;
	 var $inc54 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $isdigit = 0, $isdigit26 = 0, $isdigit28 = 0, $isdigit30 = 0, $isdigit32 = 0, $isdigittmp = 0, $isdigittmp25 = 0, $isdigittmp27 = 0, $isdigittmp29 = 0, $isdigittmp31 = 0, $l$addr$0$lcssa60 = 0, $l$addr$0$lcssa61 = 0, $l$addr$044 = 0, $lenl$0 = 0, $lenr$0 = 0, $or$cond = 0, $or$cond34 = 0;
	 var $r$addr$0$lcssa58 = 0, $r$addr$0$lcssa59 = 0, $r$addr$045 = 0, $retval$0 = 0, $sub = 0, $sub69 = 0, $tobool40 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP8[$l>>0]|0;
	 $1 = HEAP8[$r>>0]|0;
	 $cmp43 = ($0<<24>>24)==($1<<24>>24);
	 do {
	  if ($cmp43) {
	   $conv42 = $0 << 24 >> 24;
	   $9 = $0;$conv47 = $conv42;$haszero$046 = 1;$l$addr$044 = $l;$r$addr$045 = $r;
	   while(1) {
	    if ((($9<<24>>24) == 48)) {
	     $cmp7 = ($haszero$046|0)==(1);
	     $$haszero$0 = $cmp7 ? 0 : $haszero$046;
	     $haszero$1 = $$haszero$0;
	    } else if ((($9<<24>>24) == 0)) {
	     $retval$0 = 0;
	     label = 20;
	     break;
	    } else {
	     $isdigittmp31 = (($conv47) + -48)|0;
	     $isdigit32 = ($isdigittmp31>>>0)<(10);
	     if ($isdigit32) {
	      $cmp14 = ($haszero$046|0)==(1);
	      $$haszero$033 = $cmp14 ? 2 : $haszero$046;
	      $haszero$1 = $$haszero$033;
	     } else {
	      $haszero$1 = 1;
	     }
	    }
	    $incdec$ptr = (($l$addr$044) + 1|0);
	    $incdec$ptr21 = (($r$addr$045) + 1|0);
	    $2 = HEAP8[$incdec$ptr>>0]|0;
	    $conv = $2 << 24 >> 24;
	    $3 = HEAP8[$incdec$ptr21>>0]|0;
	    $cmp = ($2<<24>>24)==($3<<24>>24);
	    if ($cmp) {
	     $9 = $2;$conv47 = $conv;$haszero$046 = $haszero$1;$l$addr$044 = $incdec$ptr;$r$addr$045 = $incdec$ptr21;
	    } else {
	     label = 8;
	     break;
	    }
	   }
	   if ((label|0) == 8) {
	    $cmp22 = ($haszero$1|0)==(1);
	    if ($cmp22) {
	     $$lcssa4056 = $3;$$lcssa57 = $2;$l$addr$0$lcssa61 = $incdec$ptr;$r$addr$0$lcssa59 = $incdec$ptr21;
	     label = 9;
	     break;
	    } else {
	     $5 = $2;$6 = $3;$haszero$2 = $haszero$1;$l$addr$0$lcssa60 = $incdec$ptr;$r$addr$0$lcssa58 = $incdec$ptr21;
	     break;
	    }
	   }
	   else if ((label|0) == 20) {
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  } else {
	   $$lcssa4056 = $1;$$lcssa57 = $0;$l$addr$0$lcssa61 = $l;$r$addr$0$lcssa59 = $r;
	   label = 9;
	  }
	 } while(0);
	 if ((label|0) == 9) {
	  $cmp25 = ($$lcssa57<<24>>24)==(48);
	  $cmp28 = ($$lcssa4056<<24>>24)==(48);
	  $or$cond = $cmp25 | $cmp28;
	  $4 = $or$cond&1;
	  $$haszero$035 = $4 ^ 1;
	  $5 = $$lcssa57;$6 = $$lcssa4056;$haszero$2 = $$haszero$035;$l$addr$0$lcssa60 = $l$addr$0$lcssa61;$r$addr$0$lcssa58 = $r$addr$0$lcssa59;
	 }
	 $conv32 = $5 << 24 >> 24;
	 $isdigittmp = (($conv32) + -48)|0;
	 $isdigit = ($isdigittmp>>>0)<(10);
	 $conv36 = $6 << 24 >> 24;
	 if ($isdigit) {
	  $isdigittmp25 = (($conv36) + -48)|0;
	  $isdigit26 = ($isdigittmp25>>>0)>(9);
	  $tobool40 = ($haszero$2|0)==(0);
	  $or$cond34 = $isdigit26 | $tobool40;
	  if (!($or$cond34)) {
	   $7 = $5;$lenl$0 = 0;
	   while(1) {
	    $conv43 = $7 << 24 >> 24;
	    $isdigittmp27 = (($conv43) + -48)|0;
	    $isdigit28 = ($isdigittmp27>>>0)<(10);
	    $inc = (($lenl$0) + 1)|0;
	    if (!($isdigit28)) {
	     $8 = $6;$lenr$0 = 0;
	     break;
	    }
	    $arrayidx$phi$trans$insert = (($l$addr$0$lcssa60) + ($inc)|0);
	    $$pre = HEAP8[$arrayidx$phi$trans$insert>>0]|0;
	    $7 = $$pre;$lenl$0 = $inc;
	   }
	   while(1) {
	    $conv50 = $8 << 24 >> 24;
	    $isdigittmp29 = (($conv50) + -48)|0;
	    $isdigit30 = ($isdigittmp29>>>0)<(10);
	    $inc54 = (($lenr$0) + 1)|0;
	    if (!($isdigit30)) {
	     break;
	    }
	    $arrayidx49$phi$trans$insert = (($r$addr$0$lcssa58) + ($inc54)|0);
	    $$pre54 = HEAP8[$arrayidx49$phi$trans$insert>>0]|0;
	    $8 = $$pre54;$lenr$0 = $inc54;
	   }
	   $cmp56 = ($lenl$0|0)==($lenr$0|0);
	   if ($cmp56) {
	    $sub = (($conv32) - ($conv36))|0;
	    $retval$0 = $sub;
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    $cmp62 = ($lenl$0>>>0)>($lenr$0>>>0);
	    $$ = $cmp62 ? 1 : -1;
	    $retval$0 = $$;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  }
	 }
	 $sub69 = (($conv32) - ($conv36))|0;
	 $retval$0 = $sub69;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _wcpcpy($d,$s) {
	 $d = $d|0;
	 $s = $s|0;
	 var $add$ptr = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcscpy($d,$s)|0);
	 $call1 = (_wcslen($s)|0);
	 $add$ptr = (($call) + ($call1<<2)|0);
	 STACKTOP = sp;return ($add$ptr|0);
	}
	function _wcpncpy($d,$s,$n) {
	 $d = $d|0;
	 $s = $s|0;
	 $n = $n|0;
	 var $add$ptr = 0, $call = 0, $call1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcsncpy($d,$s,$n)|0);
	 $call1 = (_wcsnlen($s,$n)|0);
	 $add$ptr = (($call) + ($call1<<2)|0);
	 STACKTOP = sp;return ($add$ptr|0);
	}
	function _wcscasecmp($l,$r) {
	 $l = $l|0;
	 $r = $r|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcsncasecmp($l,$r,-1)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wcscasecmp_l($l,$r,$locale) {
	 $l = $l|0;
	 $r = $r|0;
	 $locale = $locale|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcscasecmp($l,$r)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wcscat($dest,$src) {
	 $dest = $dest|0;
	 $src = $src|0;
	 var $add$ptr = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcslen($dest)|0);
	 $add$ptr = (($dest) + ($call<<2)|0);
	 (_wcscpy($add$ptr,$src)|0);
	 STACKTOP = sp;return ($dest|0);
	}
	function _wcschr($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $0 = 0, $add$ptr = 0, $call = 0, $cmp = 0, $cond = 0, $incdec$ptr = 0, $or$cond = 0, $retval$0 = 0, $s$addr$0 = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($c|0)==(0);
	 if ($tobool) {
	  $call = (_wcslen($s)|0);
	  $add$ptr = (($s) + ($call<<2)|0);
	  $retval$0 = $add$ptr;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $s$addr$0 = $s;
	 }
	 while(1) {
	  $0 = HEAP32[$s$addr$0>>2]|0;
	  $tobool1 = ($0|0)==(0);
	  $cmp = ($0|0)==($c|0);
	  $or$cond = $tobool1 | $cmp;
	  $incdec$ptr = (($s$addr$0) + 4|0);
	  if ($or$cond) {
	   break;
	  } else {
	   $s$addr$0 = $incdec$ptr;
	  }
	 }
	 $tobool2 = ($0|0)!=(0);
	 $cond = $tobool2 ? $s$addr$0 : 0;
	 $retval$0 = $cond;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _wcscmp($l,$r) {
	 $l = $l|0;
	 $r = $r|0;
	 var $$lcssa = 0, $$lcssa9 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp10 = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $l$addr$015 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond8 = 0, $or$cond814 = 0, $r$addr$016 = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0;
	 var $tobool113 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$l>>2]|0;
	 $1 = HEAP32[$r>>2]|0;
	 $cmp10 = ($0|0)!=($1|0);
	 $tobool11 = ($0|0)==(0);
	 $or$cond12 = $cmp10 | $tobool11;
	 $tobool113 = ($1|0)==(0);
	 $or$cond814 = $or$cond12 | $tobool113;
	 if ($or$cond814) {
	  $$lcssa = $0;$$lcssa9 = $1;
	  $sub = (($$lcssa) - ($$lcssa9))|0;
	  STACKTOP = sp;return ($sub|0);
	 } else {
	  $l$addr$015 = $l;$r$addr$016 = $r;
	 }
	 while(1) {
	  $incdec$ptr = (($l$addr$015) + 4|0);
	  $incdec$ptr2 = (($r$addr$016) + 4|0);
	  $2 = HEAP32[$incdec$ptr>>2]|0;
	  $3 = HEAP32[$incdec$ptr2>>2]|0;
	  $cmp = ($2|0)!=($3|0);
	  $tobool = ($2|0)==(0);
	  $or$cond = $cmp | $tobool;
	  $tobool1 = ($3|0)==(0);
	  $or$cond8 = $or$cond | $tobool1;
	  if ($or$cond8) {
	   $$lcssa = $2;$$lcssa9 = $3;
	   break;
	  } else {
	   $l$addr$015 = $incdec$ptr;$r$addr$016 = $incdec$ptr2;
	  }
	 }
	 $sub = (($$lcssa) - ($$lcssa9))|0;
	 STACKTOP = sp;return ($sub|0);
	}
	function _wcscpy($d,$s) {
	 $d = $d|0;
	 $s = $s|0;
	 var $0 = 0, $d$addr$0 = 0, $incdec$ptr = 0, $incdec$ptr1 = 0, $s$addr$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $d$addr$0 = $d;$s$addr$0 = $s;
	 while(1) {
	  $incdec$ptr = (($s$addr$0) + 4|0);
	  $0 = HEAP32[$s$addr$0>>2]|0;
	  $incdec$ptr1 = (($d$addr$0) + 4|0);
	  HEAP32[$d$addr$0>>2] = $0;
	  $tobool = ($0|0)==(0);
	  if ($tobool) {
	   break;
	  } else {
	   $d$addr$0 = $incdec$ptr1;$s$addr$0 = $incdec$ptr;
	  }
	 }
	 STACKTOP = sp;return ($d|0);
	}
	function _wcscspn($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx1 = 0, $call = 0, $call4 = 0, $call6 = 0, $call9 = 0, $incdec$ptr = 0, $lnot = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $sub$ptr$div = 0, $sub$ptr$div14 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast11 = 0, $sub$ptr$rhs$cast = 0;
	 var $sub$ptr$rhs$cast12 = 0, $sub$ptr$sub = 0, $sub$ptr$sub13 = 0, $tobool = 0, $tobool2 = 0, $tobool5 = 0, $tobool8 = 0, $tobool812 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$c>>2]|0;
	 $tobool = ($0|0)==(0);
	 if ($tobool) {
	  $call = (_wcslen($s)|0);
	  $retval$0 = $call;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx1 = (($c) + 4|0);
	 $1 = HEAP32[$arrayidx1>>2]|0;
	 $tobool2 = ($1|0)==(0);
	 if ($tobool2) {
	  $call4 = (_wcschr($s,$0)|0);
	  $tobool5 = ($call4|0)==(0|0);
	  if ($tobool5) {
	   $call6 = (_wcslen($s)|0);
	   $retval$0 = $call6;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $sub$ptr$lhs$cast = $call4;
	   $sub$ptr$rhs$cast = $s;
	   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	   $sub$ptr$div = $sub$ptr$sub >> 2;
	   $retval$0 = $sub$ptr$div;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 } else {
	  $2 = HEAP32[$s>>2]|0;
	  $tobool812 = ($2|0)==(0);
	  L7: do {
	   if ($tobool812) {
	    $s$addr$0$lcssa = $s;
	   } else {
	    $4 = $2;$s$addr$013 = $s;
	    while(1) {
	     $call9 = (_wcschr($c,$4)|0);
	     $lnot = ($call9|0)==(0|0);
	     $incdec$ptr = (($s$addr$013) + 4|0);
	     if (!($lnot)) {
	      $s$addr$0$lcssa = $s$addr$013;
	      break L7;
	     }
	     $3 = HEAP32[$incdec$ptr>>2]|0;
	     $tobool8 = ($3|0)==(0);
	     if ($tobool8) {
	      $s$addr$0$lcssa = $incdec$ptr;
	      break;
	     } else {
	      $4 = $3;$s$addr$013 = $incdec$ptr;
	     }
	    }
	   }
	  } while(0);
	  $sub$ptr$lhs$cast11 = $s$addr$0$lcssa;
	  $sub$ptr$rhs$cast12 = $s;
	  $sub$ptr$sub13 = (($sub$ptr$lhs$cast11) - ($sub$ptr$rhs$cast12))|0;
	  $sub$ptr$div14 = $sub$ptr$sub13 >> 2;
	  $retval$0 = $sub$ptr$div14;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _wcsdup($s) {
	 $s = $s|0;
	 var $add = 0, $call = 0, $call1 = 0, $call3 = 0, $mul = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcslen($s)|0);
	 $add = (($call) + 1)|0;
	 $mul = $add << 2;
	 $call1 = (_malloc($mul)|0);
	 $tobool = ($call1|0)==(0|0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call3 = (_wmemcpy($call1,$s,$add)|0);
	 $retval$0 = $call3;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _wcslen($s) {
	 $s = $s|0;
	 var $0 = 0, $incdec$ptr = 0, $s$addr$0 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $s$addr$0 = $s;
	 while(1) {
	  $0 = HEAP32[$s$addr$0>>2]|0;
	  $tobool = ($0|0)==(0);
	  $incdec$ptr = (($s$addr$0) + 4|0);
	  if ($tobool) {
	   break;
	  } else {
	   $s$addr$0 = $incdec$ptr;
	  }
	 }
	 $sub$ptr$lhs$cast = $s$addr$0;
	 $sub$ptr$rhs$cast = $s;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $sub$ptr$div = $sub$ptr$sub >> 2;
	 STACKTOP = sp;return ($sub$ptr$div|0);
	}
	function _wcsncasecmp($l,$r,$n) {
	 $l = $l|0;
	 $r = $r|0;
	 $n = $n|0;
	 var $$pre$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp6 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $l$addr$015 = 0, $n$addr$017 = 0, $n$addr$017$in = 0, $or$cond = 0;
	 var $r$addr$0$lcssa = 0, $r$addr$016 = 0, $retval$0 = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool114 = 0, $tobool2 = 0, $tobool4 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($n|0)==(0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $0 = HEAP32[$l>>2]|0;
	 $tobool114 = ($0|0)==(0);
	 L4: do {
	  if ($tobool114) {
	   $5 = 0;$r$addr$0$lcssa = $r;
	  } else {
	   $2 = $0;$l$addr$015 = $l;$n$addr$017$in = $n;$r$addr$016 = $r;
	   while(1) {
	    $n$addr$017 = (($n$addr$017$in) + -1)|0;
	    $1 = HEAP32[$r$addr$016>>2]|0;
	    $tobool2 = ($1|0)==(0);
	    $tobool4 = ($n$addr$017|0)==(0);
	    $or$cond = $tobool2 | $tobool4;
	    if ($or$cond) {
	     $5 = $2;$r$addr$0$lcssa = $r$addr$016;
	     break L4;
	    }
	    $cmp = ($2|0)==($1|0);
	    if (!($cmp)) {
	     $call = (_towlower($2)|0);
	     $3 = HEAP32[$r$addr$016>>2]|0;
	     $call5 = (_towlower($3)|0);
	     $cmp6 = ($call|0)==($call5|0);
	     if (!($cmp6)) {
	      break;
	     }
	    }
	    $incdec$ptr = (($l$addr$015) + 4|0);
	    $incdec$ptr7 = (($r$addr$016) + 4|0);
	    $4 = HEAP32[$incdec$ptr>>2]|0;
	    $tobool1 = ($4|0)==(0);
	    if ($tobool1) {
	     $5 = 0;$r$addr$0$lcssa = $incdec$ptr7;
	     break L4;
	    } else {
	     $2 = $4;$l$addr$015 = $incdec$ptr;$n$addr$017$in = $n$addr$017;$r$addr$016 = $incdec$ptr7;
	    }
	   }
	   $$pre$pre = HEAP32[$l$addr$015>>2]|0;
	   $5 = $$pre$pre;$r$addr$0$lcssa = $r$addr$016;
	  }
	 } while(0);
	 $call9 = (_towlower($5)|0);
	 $6 = HEAP32[$r$addr$0$lcssa>>2]|0;
	 $call10 = (_towlower($6)|0);
	 $sub = (($call9) - ($call10))|0;
	 $retval$0 = $sub;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _wcsncasecmp_l($l,$r,$n,$locale) {
	 $l = $l|0;
	 $r = $r|0;
	 $n = $n|0;
	 $locale = $locale|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcsncasecmp($l,$r,$n)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wcsncat($d,$s,$n) {
	 $d = $d|0;
	 $s = $s|0;
	 $n = $n|0;
	 var $0 = 0, $add$ptr = 0, $call = 0, $d$addr$0$lcssa = 0, $d$addr$010 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $n$addr$09 = 0, $s$addr$08 = 0, $tobool = 0, $tobool1 = 0, $tobool7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcslen($d)|0);
	 $add$ptr = (($d) + ($call<<2)|0);
	 $tobool7 = ($n|0)==(0);
	 L1: do {
	  if ($tobool7) {
	   $d$addr$0$lcssa = $add$ptr;
	  } else {
	   $d$addr$010 = $add$ptr;$n$addr$09 = $n;$s$addr$08 = $s;
	   while(1) {
	    $0 = HEAP32[$s$addr$08>>2]|0;
	    $tobool1 = ($0|0)==(0);
	    if ($tobool1) {
	     $d$addr$0$lcssa = $d$addr$010;
	     break L1;
	    }
	    $dec = (($n$addr$09) + -1)|0;
	    $incdec$ptr = (($s$addr$08) + 4|0);
	    $incdec$ptr2 = (($d$addr$010) + 4|0);
	    HEAP32[$d$addr$010>>2] = $0;
	    $tobool = ($dec|0)==(0);
	    if ($tobool) {
	     $d$addr$0$lcssa = $incdec$ptr2;
	     break;
	    } else {
	     $d$addr$010 = $incdec$ptr2;$n$addr$09 = $dec;$s$addr$08 = $incdec$ptr;
	    }
	   }
	  }
	 } while(0);
	 HEAP32[$d$addr$0$lcssa>>2] = 0;
	 STACKTOP = sp;return ($d|0);
	}
	function _wcsncmp($l,$r,$n) {
	 $l = $l|0;
	 $r = $r|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $cmp = 0, $cond = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$014 = 0, $n$addr$016 = 0, $or$cond = 0, $or$cond11 = 0, $r$addr$015 = 0, $sub = 0, $tobool = 0, $tobool13 = 0, $tobool2 = 0, $tobool3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool13 = ($n|0)==(0);
	 if ($tobool13) {
	  $cond = 0;
	  STACKTOP = sp;return ($cond|0);
	 } else {
	  $l$addr$014 = $l;$n$addr$016 = $n;$r$addr$015 = $r;
	 }
	 while(1) {
	  $0 = HEAP32[$l$addr$014>>2]|0;
	  $1 = HEAP32[$r$addr$015>>2]|0;
	  $cmp = ($0|0)!=($1|0);
	  $tobool2 = ($0|0)==(0);
	  $or$cond = $cmp | $tobool2;
	  $tobool3 = ($1|0)==(0);
	  $or$cond11 = $or$cond | $tobool3;
	  if ($or$cond11) {
	   break;
	  }
	  $dec = (($n$addr$016) + -1)|0;
	  $incdec$ptr = (($l$addr$014) + 4|0);
	  $incdec$ptr4 = (($r$addr$015) + 4|0);
	  $tobool = ($dec|0)==(0);
	  if ($tobool) {
	   $cond = 0;
	   label = 5;
	   break;
	  } else {
	   $l$addr$014 = $incdec$ptr;$n$addr$016 = $dec;$r$addr$015 = $incdec$ptr4;
	  }
	 }
	 if ((label|0) == 5) {
	  STACKTOP = sp;return ($cond|0);
	 }
	 $sub = (($0) - ($1))|0;
	 $cond = $sub;
	 STACKTOP = sp;return ($cond|0);
	}
	function _wcsncpy($d,$s,$n) {
	 $d = $d|0;
	 $s = $s|0;
	 $n = $n|0;
	 var $0 = 0, $d$addr$0$lcssa = 0, $d$addr$09 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr2 = 0, $n$addr$0$lcssa = 0, $n$addr$08 = 0, $s$addr$07 = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool6 = ($n|0)==(0);
	 L1: do {
	  if ($tobool6) {
	   $d$addr$0$lcssa = $d;$n$addr$0$lcssa = 0;
	  } else {
	   $d$addr$09 = $d;$n$addr$08 = $n;$s$addr$07 = $s;
	   while(1) {
	    $0 = HEAP32[$s$addr$07>>2]|0;
	    $tobool1 = ($0|0)==(0);
	    if ($tobool1) {
	     $d$addr$0$lcssa = $d$addr$09;$n$addr$0$lcssa = $n$addr$08;
	     break L1;
	    }
	    $dec = (($n$addr$08) + -1)|0;
	    $incdec$ptr = (($s$addr$07) + 4|0);
	    $incdec$ptr2 = (($d$addr$09) + 4|0);
	    HEAP32[$d$addr$09>>2] = $0;
	    $tobool = ($dec|0)==(0);
	    if ($tobool) {
	     $d$addr$0$lcssa = $incdec$ptr2;$n$addr$0$lcssa = 0;
	     break;
	    } else {
	     $d$addr$09 = $incdec$ptr2;$n$addr$08 = $dec;$s$addr$07 = $incdec$ptr;
	    }
	   }
	  }
	 } while(0);
	 (_wmemset($d$addr$0$lcssa,0,$n$addr$0$lcssa)|0);
	 STACKTOP = sp;return ($d|0);
	}
	function _wcsnlen($s,$n) {
	 $s = $s|0;
	 $n = $n|0;
	 var $call = 0, $n$addr$0 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wmemchr($s,0,$n)|0);
	 $tobool = ($call|0)==(0|0);
	 if ($tobool) {
	  $n$addr$0 = $n;
	  STACKTOP = sp;return ($n$addr$0|0);
	 }
	 $sub$ptr$lhs$cast = $call;
	 $sub$ptr$rhs$cast = $s;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $sub$ptr$div = $sub$ptr$sub >> 2;
	 $n$addr$0 = $sub$ptr$div;
	 STACKTOP = sp;return ($n$addr$0|0);
	}
	function _wcspbrk($s,$b) {
	 $s = $s|0;
	 $b = $b|0;
	 var $0 = 0, $add$ptr = 0, $call = 0, $cond = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcscspn($s,$b)|0);
	 $add$ptr = (($s) + ($call<<2)|0);
	 $0 = HEAP32[$add$ptr>>2]|0;
	 $tobool = ($0|0)!=(0);
	 $cond = $tobool ? $add$ptr : 0;
	 STACKTOP = sp;return ($cond|0);
	}
	function _wcsrchr($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $0 = 0, $add$ptr = 0, $call = 0, $cmp = 0, $cmp$lcssa = 0, $cmp1 = 0, $cmp8 = 0, $incdec$ptr = 0, $p$09 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcslen($s)|0);
	 $cmp8 = ($call|0)>(-1);
	 L1: do {
	  if ($cmp8) {
	   $add$ptr = (($s) + ($call<<2)|0);
	   $p$09 = $add$ptr;
	   while(1) {
	    $0 = HEAP32[$p$09>>2]|0;
	    $cmp1 = ($0|0)==($c|0);
	    $incdec$ptr = (($p$09) + -4|0);
	    if ($cmp1) {
	     $cmp$lcssa = $p$09;
	     break L1;
	    }
	    $cmp = ($incdec$ptr>>>0)<($s>>>0);
	    if ($cmp) {
	     $cmp$lcssa = 0;
	     break;
	    } else {
	     $p$09 = $incdec$ptr;
	    }
	   }
	  } else {
	   $cmp$lcssa = 0;
	  }
	 } while(0);
	 STACKTOP = sp;return ($cmp$lcssa|0);
	}
	function _wcsspn($s,$c) {
	 $s = $s|0;
	 $c = $c|0;
	 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$s>>2]|0;
	 $tobool5 = ($0|0)==(0);
	 L1: do {
	  if ($tobool5) {
	   $s$addr$0$lcssa = $s;
	  } else {
	   $2 = $0;$s$addr$06 = $s;
	   while(1) {
	    $call = (_wcschr($c,$2)|0);
	    $tobool1 = ($call|0)==(0|0);
	    $incdec$ptr = (($s$addr$06) + 4|0);
	    if ($tobool1) {
	     $s$addr$0$lcssa = $s$addr$06;
	     break L1;
	    }
	    $1 = HEAP32[$incdec$ptr>>2]|0;
	    $tobool = ($1|0)==(0);
	    if ($tobool) {
	     $s$addr$0$lcssa = $incdec$ptr;
	     break;
	    } else {
	     $2 = $1;$s$addr$06 = $incdec$ptr;
	    }
	   }
	  }
	 } while(0);
	 $sub$ptr$lhs$cast = $s$addr$0$lcssa;
	 $sub$ptr$rhs$cast = $s;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $sub$ptr$div = $sub$ptr$sub >> 2;
	 STACKTOP = sp;return ($sub$ptr$div|0);
	}
	function _wcsstr($h,$n) {
	 $h = $h|0;
	 $n = $n|0;
	 var $$pr105$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr90$i = 0;
	 var $add13$i = 0, $add135$i = 0, $add135177$i = 0, $add135177186$i = 0, $add135177186201$i = 0, $add135177190$i = 0, $add135180$i = 0, $add138$i = 0, $add29$i = 0, $add29123$i = 0, $add29123149$i = 0, $add29123149158$i = 0, $add29123149158173$i = 0, $add29123149162$i = 0, $add29123152$i = 0, $add29126$i = 0, $add32$i = 0, $add40$i = 0, $add5$i = 0, $add58$i = 0;
	 var $add59$i = 0, $add64$i = 0, $add64$mem$0$i = 0, $add72$i = 0, $arrayidx$i = 0, $arrayidx1$i = 0, $arrayidx10 = 0, $arrayidx101$i = 0, $arrayidx101110$i = 0, $arrayidx105$i = 0, $arrayidx123$i = 0, $arrayidx125$i = 0, $arrayidx33$i = 0, $arrayidx35$i = 0, $arrayidx6 = 0, $arrayidx6$i = 0, $arrayidx8$i = 0, $call = 0, $call$i = 0, $call79$i = 0;
	 var $cmp$i = 0, $cmp106$i = 0, $cmp11$i = 0, $cmp120$i = 0, $cmp126$i = 0, $cmp136$i = 0, $cmp136178$i = 0, $cmp136178187$i = 0, $cmp136178187198$i = 0, $cmp21$i = 0, $cmp30$i = 0, $cmp30124$i = 0, $cmp30124150$i = 0, $cmp30124150159$i = 0, $cmp36$i = 0, $cmp38$i = 0, $cmp49$i = 0, $cmp60$i = 0, $cmp69$i = 0, $cmp77$i = 0;
	 var $cmp86$i = 0, $cmp9$i = 0, $cmp94$i = 0, $h$addr$0$be$i = 0, $h$addr$0$i = 0, $inc$i = 0, $inc110$i = 0, $inc14$i = 0, $inc25$i = 0, $inc42$i = 0, $inc54$i = 0, $ip$0$ph195$i = 0, $ip$0$ph195258$i = 0, $ip$0$ph199$i = 0, $ip$1$ip$0$i = 0, $ip$1$ip$0$sub68$i = 0, $ip$1$ph167$i = 0, $ip$1$ph171$i = 0, $jp$0$ph128$ph188$i = 0, $jp$0$ph128179$i = 0;
	 var $jp$0$ph200$i = 0, $jp$1$ph117$ph160$i = 0, $jp$1$ph117151$i = 0, $jp$1$ph172$i = 0, $k$0137$i = 0, $k$1125$i = 0, $k$2112$i = 0, $k$3$i = 0, $l$0140250$i = 0, $l$0145$i = 0, $mem$0$be$i = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$i = 0, $p$0$ph$ph184$i = 0, $p$0$ph$ph184262$i = 0, $p$0$ph$ph189$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph156$i = 0, $p$1$ph$ph161$i = 0;
	 var $p$3$i = 0, $retval$0 = 0, $sub$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div85$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast82$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub84$i = 0, $sub115$i = 0, $sub115$pn$i = 0, $sub122$i = 0, $sub52$i = 0, $sub67$i = 0, $sub68$i = 0, $sub74$i = 0, $tobool = 0, $tobool$i = 0, $tobool102$i = 0;
	 var $tobool102111$i = 0, $tobool11 = 0, $tobool144$i = 0, $tobool2 = 0, $tobool2$i = 0, $tobool5 = 0, $tobool65$i = 0, $tobool7 = 0, $tobool80$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$n>>2]|0;
	 $tobool = ($0|0)==(0);
	 if ($tobool) {
	  $retval$0 = $h;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $1 = HEAP32[$h>>2]|0;
	 $tobool2 = ($1|0)==(0);
	 if ($tobool2) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call = (_wcschr($h,$0)|0);
	 $tobool5 = ($call|0)==(0|0);
	 if ($tobool5) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx6 = (($n) + 4|0);
	 $2 = HEAP32[$arrayidx6>>2]|0;
	 $tobool7 = ($2|0)==(0);
	 if ($tobool7) {
	  $retval$0 = $call;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $arrayidx10 = (($call) + 4|0);
	 $3 = HEAP32[$arrayidx10>>2]|0;
	 $tobool11 = ($3|0)==(0);
	 if ($tobool11) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $4 = HEAP32[$n>>2]|0;
	 $tobool144$i = ($4|0)==(0);
	 L16: do {
	  if ($tobool144$i) {
	   $ip$0$ph195258$i = -1;$ip$1$ph167$i = -1;$l$0140250$i = 0;$p$0$ph$ph184262$i = 1;$p$1$ph$ph156$i = 1;
	  } else {
	   $l$0145$i = 0;
	   while(1) {
	    $arrayidx1$i = (($call) + ($l$0145$i<<2)|0);
	    $6 = HEAP32[$arrayidx1$i>>2]|0;
	    $tobool2$i = ($6|0)==(0);
	    $inc$i = (($l$0145$i) + 1)|0;
	    if ($tobool2$i) {
	     $retval$0 = 0;
	     label = 46;
	     break;
	    }
	    $arrayidx$i = (($n) + ($inc$i<<2)|0);
	    $5 = HEAP32[$arrayidx$i>>2]|0;
	    $tobool$i = ($5|0)==(0);
	    if ($tobool$i) {
	     break;
	    } else {
	     $l$0145$i = $inc$i;
	    }
	   }
	   if ((label|0) == 46) {
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $cmp136178187198$i = ($inc$i>>>0)>(1);
	   if ($cmp136178187198$i) {
	    $add135177186201$i = 1;$ip$0$ph199$i = -1;$jp$0$ph200$i = 0;
	    L23: while(1) {
	     $add135177190$i = $add135177186201$i;$jp$0$ph128$ph188$i = $jp$0$ph200$i;$p$0$ph$ph189$i = 1;
	     while(1) {
	      $add135180$i = $add135177190$i;$jp$0$ph128179$i = $jp$0$ph128$ph188$i;
	      L27: while(1) {
	       $add138$i = $add135180$i;$k$0137$i = 1;
	       while(1) {
	        $add5$i = (($k$0137$i) + ($ip$0$ph199$i))|0;
	        $arrayidx6$i = (($n) + ($add5$i<<2)|0);
	        $7 = HEAP32[$arrayidx6$i>>2]|0;
	        $arrayidx8$i = (($n) + ($add138$i<<2)|0);
	        $8 = HEAP32[$arrayidx8$i>>2]|0;
	        $cmp9$i = ($7|0)==($8|0);
	        if (!($cmp9$i)) {
	         break L27;
	        }
	        $cmp11$i = ($k$0137$i|0)==($p$0$ph$ph189$i|0);
	        $inc14$i = (($k$0137$i) + 1)|0;
	        if ($cmp11$i) {
	         break;
	        }
	        $add$i = (($inc14$i) + ($jp$0$ph128179$i))|0;
	        $cmp$i = ($add$i>>>0)<($inc$i>>>0);
	        if ($cmp$i) {
	         $add138$i = $add$i;$k$0137$i = $inc14$i;
	        } else {
	         $ip$0$ph195$i = $ip$0$ph199$i;$p$0$ph$ph184$i = $p$0$ph$ph189$i;
	         break L23;
	        }
	       }
	       $add13$i = (($jp$0$ph128179$i) + ($p$0$ph$ph189$i))|0;
	       $add135$i = (($add13$i) + 1)|0;
	       $cmp136$i = ($add135$i>>>0)<($inc$i>>>0);
	       if ($cmp136$i) {
	        $add135180$i = $add135$i;$jp$0$ph128179$i = $add13$i;
	       } else {
	        $ip$0$ph195$i = $ip$0$ph199$i;$p$0$ph$ph184$i = $p$0$ph$ph189$i;
	        break L23;
	       }
	      }
	      $cmp21$i = ($7|0)>($8|0);
	      $sub$i = (($add138$i) - ($ip$0$ph199$i))|0;
	      if (!($cmp21$i)) {
	       break;
	      }
	      $add135177$i = (($add138$i) + 1)|0;
	      $cmp136178$i = ($add135177$i>>>0)<($inc$i>>>0);
	      if ($cmp136178$i) {
	       $add135177190$i = $add135177$i;$jp$0$ph128$ph188$i = $add138$i;$p$0$ph$ph189$i = $sub$i;
	      } else {
	       $ip$0$ph195$i = $ip$0$ph199$i;$p$0$ph$ph184$i = $sub$i;
	       break L23;
	      }
	     }
	     $inc25$i = (($jp$0$ph128179$i) + 1)|0;
	     $add135177186$i = (($jp$0$ph128179$i) + 2)|0;
	     $cmp136178187$i = ($add135177186$i>>>0)<($inc$i>>>0);
	     if ($cmp136178187$i) {
	      $add135177186201$i = $add135177186$i;$ip$0$ph199$i = $jp$0$ph128179$i;$jp$0$ph200$i = $inc25$i;
	     } else {
	      $ip$0$ph195$i = $jp$0$ph128179$i;$p$0$ph$ph184$i = 1;
	      break;
	     }
	    }
	    $add29123149158173$i = 1;$ip$1$ph171$i = -1;$jp$1$ph172$i = 0;
	    while(1) {
	     $add29123149162$i = $add29123149158173$i;$jp$1$ph117$ph160$i = $jp$1$ph172$i;$p$1$ph$ph161$i = 1;
	     while(1) {
	      $add29123152$i = $add29123149162$i;$jp$1$ph117151$i = $jp$1$ph117$ph160$i;
	      L42: while(1) {
	       $add29126$i = $add29123152$i;$k$1125$i = 1;
	       while(1) {
	        $add32$i = (($k$1125$i) + ($ip$1$ph171$i))|0;
	        $arrayidx33$i = (($n) + ($add32$i<<2)|0);
	        $9 = HEAP32[$arrayidx33$i>>2]|0;
	        $arrayidx35$i = (($n) + ($add29126$i<<2)|0);
	        $10 = HEAP32[$arrayidx35$i>>2]|0;
	        $cmp36$i = ($9|0)==($10|0);
	        if (!($cmp36$i)) {
	         break L42;
	        }
	        $cmp38$i = ($k$1125$i|0)==($p$1$ph$ph161$i|0);
	        $inc42$i = (($k$1125$i) + 1)|0;
	        if ($cmp38$i) {
	         break;
	        }
	        $add29$i = (($inc42$i) + ($jp$1$ph117151$i))|0;
	        $cmp30$i = ($add29$i>>>0)<($inc$i>>>0);
	        if ($cmp30$i) {
	         $add29126$i = $add29$i;$k$1125$i = $inc42$i;
	        } else {
	         $ip$0$ph195258$i = $ip$0$ph195$i;$ip$1$ph167$i = $ip$1$ph171$i;$l$0140250$i = $inc$i;$p$0$ph$ph184262$i = $p$0$ph$ph184$i;$p$1$ph$ph156$i = $p$1$ph$ph161$i;
	         break L16;
	        }
	       }
	       $add40$i = (($jp$1$ph117151$i) + ($p$1$ph$ph161$i))|0;
	       $add29123$i = (($add40$i) + 1)|0;
	       $cmp30124$i = ($add29123$i>>>0)<($inc$i>>>0);
	       if ($cmp30124$i) {
	        $add29123152$i = $add29123$i;$jp$1$ph117151$i = $add40$i;
	       } else {
	        $ip$0$ph195258$i = $ip$0$ph195$i;$ip$1$ph167$i = $ip$1$ph171$i;$l$0140250$i = $inc$i;$p$0$ph$ph184262$i = $p$0$ph$ph184$i;$p$1$ph$ph156$i = $p$1$ph$ph161$i;
	        break L16;
	       }
	      }
	      $cmp49$i = ($9|0)<($10|0);
	      $sub52$i = (($add29126$i) - ($ip$1$ph171$i))|0;
	      if (!($cmp49$i)) {
	       break;
	      }
	      $add29123149$i = (($add29126$i) + 1)|0;
	      $cmp30124150$i = ($add29123149$i>>>0)<($inc$i>>>0);
	      if ($cmp30124150$i) {
	       $add29123149162$i = $add29123149$i;$jp$1$ph117$ph160$i = $add29126$i;$p$1$ph$ph161$i = $sub52$i;
	      } else {
	       $ip$0$ph195258$i = $ip$0$ph195$i;$ip$1$ph167$i = $ip$1$ph171$i;$l$0140250$i = $inc$i;$p$0$ph$ph184262$i = $p$0$ph$ph184$i;$p$1$ph$ph156$i = $sub52$i;
	       break L16;
	      }
	     }
	     $inc54$i = (($jp$1$ph117151$i) + 1)|0;
	     $add29123149158$i = (($jp$1$ph117151$i) + 2)|0;
	     $cmp30124150159$i = ($add29123149158$i>>>0)<($inc$i>>>0);
	     if ($cmp30124150159$i) {
	      $add29123149158173$i = $add29123149158$i;$ip$1$ph171$i = $jp$1$ph117151$i;$jp$1$ph172$i = $inc54$i;
	     } else {
	      $ip$0$ph195258$i = $ip$0$ph195$i;$ip$1$ph167$i = $jp$1$ph117151$i;$l$0140250$i = $inc$i;$p$0$ph$ph184262$i = $p$0$ph$ph184$i;$p$1$ph$ph156$i = 1;
	      break;
	     }
	    }
	   } else {
	    $ip$0$ph195258$i = -1;$ip$1$ph167$i = -1;$l$0140250$i = $inc$i;$p$0$ph$ph184262$i = 1;$p$1$ph$ph156$i = 1;
	   }
	  }
	 } while(0);
	 $add58$i = (($ip$1$ph167$i) + 1)|0;
	 $add59$i = (($ip$0$ph195258$i) + 1)|0;
	 $cmp60$i = ($add58$i>>>0)>($add59$i>>>0);
	 $p$1$p$0$i = $cmp60$i ? $p$1$ph$ph156$i : $p$0$ph$ph184262$i;
	 $ip$1$ip$0$i = $cmp60$i ? $ip$1$ph167$i : $ip$0$ph195258$i;
	 $add$ptr$i = (($n) + ($p$1$p$0$i<<2)|0);
	 $add64$i = (($ip$1$ip$0$i) + 1)|0;
	 $call$i = (_wmemcmp($n,$add$ptr$i,$add64$i)|0);
	 $tobool65$i = ($call$i|0)==(0);
	 if ($tobool65$i) {
	  $sub74$i = (($l$0140250$i) - ($p$1$p$0$i))|0;
	  $mem0$0$i = $sub74$i;$p$3$i = $p$1$p$0$i;
	 } else {
	  $sub67$i = (($l$0140250$i) - ($ip$1$ip$0$i))|0;
	  $sub68$i = (($sub67$i) + -1)|0;
	  $cmp69$i = ($ip$1$ip$0$i>>>0)>($sub68$i>>>0);
	  $ip$1$ip$0$sub68$i = $cmp69$i ? $ip$1$ip$0$i : $sub68$i;
	  $add72$i = (($ip$1$ip$0$sub68$i) + 1)|0;
	  $mem0$0$i = 0;$p$3$i = $add72$i;
	 }
	 $or$i = $l$0140250$i | 63;
	 $h$addr$0$i = $call;$mem$0$i = 0;$z$0$i = $call;
	 L57: while(1) {
	  $sub$ptr$lhs$cast$i = $z$0$i;
	  $sub$ptr$rhs$cast$i = $h$addr$0$i;
	  $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	  $sub$ptr$div$i = $sub$ptr$sub$i >> 2;
	  $cmp77$i = ($sub$ptr$div$i>>>0)<($l$0140250$i>>>0);
	  do {
	   if ($cmp77$i) {
	    $call79$i = (_wmemchr($z$0$i,0,$or$i)|0);
	    $tobool80$i = ($call79$i|0)==(0|0);
	    if ($tobool80$i) {
	     $add$ptr90$i = (($z$0$i) + ($or$i<<2)|0);
	     $z$1$i = $add$ptr90$i;
	     break;
	    } else {
	     $sub$ptr$lhs$cast82$i = $call79$i;
	     $sub$ptr$sub84$i = (($sub$ptr$lhs$cast82$i) - ($sub$ptr$rhs$cast$i))|0;
	     $sub$ptr$div85$i = $sub$ptr$sub84$i >> 2;
	     $cmp86$i = ($sub$ptr$div85$i>>>0)<($l$0140250$i>>>0);
	     if ($cmp86$i) {
	      $retval$0 = 0;
	      label = 46;
	      break L57;
	     } else {
	      $z$1$i = $call79$i;
	      break;
	     }
	    }
	   } else {
	    $z$1$i = $z$0$i;
	   }
	  } while(0);
	  $cmp94$i = ($add64$i>>>0)>($mem$0$i>>>0);
	  $add64$mem$0$i = $cmp94$i ? $add64$i : $mem$0$i;
	  $arrayidx101110$i = (($n) + ($add64$mem$0$i<<2)|0);
	  $11 = HEAP32[$arrayidx101110$i>>2]|0;
	  $tobool102111$i = ($11|0)==(0);
	  L65: do {
	   if ($tobool102111$i) {
	    $k$3$i = $add64$i;
	    label = 44;
	   } else {
	    $$pr105$i = $11;$k$2112$i = $add64$mem$0$i;
	    while(1) {
	     $arrayidx105$i = (($h$addr$0$i) + ($k$2112$i<<2)|0);
	     $13 = HEAP32[$arrayidx105$i>>2]|0;
	     $cmp106$i = ($$pr105$i|0)==($13|0);
	     $inc110$i = (($k$2112$i) + 1)|0;
	     if (!($cmp106$i)) {
	      break;
	     }
	     $arrayidx101$i = (($n) + ($inc110$i<<2)|0);
	     $12 = HEAP32[$arrayidx101$i>>2]|0;
	     $tobool102$i = ($12|0)==(0);
	     if ($tobool102$i) {
	      $k$3$i = $add64$i;
	      label = 44;
	      break L65;
	     } else {
	      $$pr105$i = $12;$k$2112$i = $inc110$i;
	     }
	    }
	    $sub115$i = (($k$2112$i) - ($ip$1$ip$0$i))|0;
	    $mem$0$be$i = 0;$sub115$pn$i = $sub115$i;
	   }
	  } while(0);
	  if ((label|0) == 44) {
	   while(1) {
	    label = 0;
	    $cmp120$i = ($k$3$i>>>0)>($mem$0$i>>>0);
	    if (!($cmp120$i)) {
	     $retval$0 = $h$addr$0$i;
	     label = 46;
	     break L57;
	    }
	    $sub122$i = (($k$3$i) + -1)|0;
	    $arrayidx123$i = (($n) + ($sub122$i<<2)|0);
	    $14 = HEAP32[$arrayidx123$i>>2]|0;
	    $arrayidx125$i = (($h$addr$0$i) + ($sub122$i<<2)|0);
	    $15 = HEAP32[$arrayidx125$i>>2]|0;
	    $cmp126$i = ($14|0)==($15|0);
	    if ($cmp126$i) {
	     $k$3$i = $sub122$i;
	     label = 44;
	    } else {
	     $mem$0$be$i = $mem0$0$i;$sub115$pn$i = $p$3$i;
	     break;
	    }
	   }
	  }
	  $h$addr$0$be$i = (($h$addr$0$i) + ($sub115$pn$i<<2)|0);
	  $h$addr$0$i = $h$addr$0$be$i;$mem$0$i = $mem$0$be$i;$z$0$i = $z$1$i;
	 }
	 if ((label|0) == 46) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _wcstok($s,$sep,$p) {
	 $s = $s|0;
	 $sep = $sep|0;
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr6 = 0, $add$ptr6$sum = 0, $call = 0, $call5 = 0, $incdec$ptr = 0, $retval$0 = 0, $s$addr$0 = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($s|0)==(0|0);
	 if ($tobool) {
	  $0 = HEAP32[$p>>2]|0;
	  $tobool1 = ($0|0)==(0|0);
	  if ($tobool1) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $s$addr$0 = $0;
	  }
	 } else {
	  $s$addr$0 = $s;
	 }
	 $call = (_wcsspn($s$addr$0,$sep)|0);
	 $add$ptr = (($s$addr$0) + ($call<<2)|0);
	 $1 = HEAP32[$add$ptr>>2]|0;
	 $tobool2 = ($1|0)==(0);
	 if ($tobool2) {
	  HEAP32[$p>>2] = 0;
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $call5 = (_wcscspn($add$ptr,$sep)|0);
	 $add$ptr$sum = (($call5) + ($call))|0;
	 $add$ptr6 = (($s$addr$0) + ($add$ptr$sum<<2)|0);
	 HEAP32[$p>>2] = $add$ptr6;
	 $2 = HEAP32[$add$ptr6>>2]|0;
	 $tobool7 = ($2|0)==(0);
	 if ($tobool7) {
	  HEAP32[$p>>2] = 0;
	  $retval$0 = $add$ptr;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $add$ptr6$sum = (($add$ptr$sum) + 1)|0;
	  $incdec$ptr = (($s$addr$0) + ($add$ptr6$sum<<2)|0);
	  HEAP32[$p>>2] = $incdec$ptr;
	  HEAP32[$add$ptr6>>2] = 0;
	  $retval$0 = $add$ptr;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _wcswcs($haystack,$needle) {
	 $haystack = $haystack|0;
	 $needle = $needle|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_wcsstr($haystack,$needle)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _wmemchr($s,$c,$n) {
	 $s = $s|0;
	 $c = $c|0;
	 $n = $n|0;
	 var $0 = 0, $cmp = 0, $dec = 0, $incdec$ptr = 0, $n$addr$07 = 0, $s$addr$06 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool5 = ($n|0)==(0);
	 L1: do {
	  if ($tobool5) {
	   $tobool$lcssa = 0;
	  } else {
	   $n$addr$07 = $n;$s$addr$06 = $s;
	   while(1) {
	    $0 = HEAP32[$s$addr$06>>2]|0;
	    $cmp = ($0|0)==($c|0);
	    if ($cmp) {
	     $tobool$lcssa = $s$addr$06;
	     break L1;
	    }
	    $dec = (($n$addr$07) + -1)|0;
	    $incdec$ptr = (($s$addr$06) + 4|0);
	    $tobool = ($dec|0)==(0);
	    if ($tobool) {
	     $tobool$lcssa = 0;
	     break;
	    } else {
	     $n$addr$07 = $dec;$s$addr$06 = $incdec$ptr;
	    }
	   }
	  }
	 } while(0);
	 STACKTOP = sp;return ($tobool$lcssa|0);
	}
	function _wmemcmp($l,$r,$n) {
	 $l = $l|0;
	 $r = $r|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $cmp = 0, $cond = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr1 = 0, $l$addr$09 = 0, $n$addr$011 = 0, $r$addr$010 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool8 = ($n|0)==(0);
	 L1: do {
	  if ($tobool8) {
	   $cond = 0;
	  } else {
	   $l$addr$09 = $l;$n$addr$011 = $n;$r$addr$010 = $r;
	   while(1) {
	    $0 = HEAP32[$l$addr$09>>2]|0;
	    $1 = HEAP32[$r$addr$010>>2]|0;
	    $cmp = ($0|0)==($1|0);
	    if (!($cmp)) {
	     break;
	    }
	    $dec = (($n$addr$011) + -1)|0;
	    $incdec$ptr = (($l$addr$09) + 4|0);
	    $incdec$ptr1 = (($r$addr$010) + 4|0);
	    $tobool = ($dec|0)==(0);
	    if ($tobool) {
	     $cond = 0;
	     break L1;
	    } else {
	     $l$addr$09 = $incdec$ptr;$n$addr$011 = $dec;$r$addr$010 = $incdec$ptr1;
	    }
	   }
	   $sub = (($0) - ($1))|0;
	   $cond = $sub;
	  }
	 } while(0);
	 STACKTOP = sp;return ($cond|0);
	}
	function _wmemcpy($d,$s,$n) {
	 $d = $d|0;
	 $s = $s|0;
	 $n = $n|0;
	 var $0 = 0, $d$addr$05 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr1 = 0, $n$addr$04 = 0, $s$addr$03 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool2 = ($n|0)==(0);
	 if ($tobool2) {
	  STACKTOP = sp;return ($d|0);
	 } else {
	  $d$addr$05 = $d;$n$addr$04 = $n;$s$addr$03 = $s;
	 }
	 while(1) {
	  $dec = (($n$addr$04) + -1)|0;
	  $incdec$ptr = (($s$addr$03) + 4|0);
	  $0 = HEAP32[$s$addr$03>>2]|0;
	  $incdec$ptr1 = (($d$addr$05) + 4|0);
	  HEAP32[$d$addr$05>>2] = $0;
	  $tobool = ($dec|0)==(0);
	  if ($tobool) {
	   break;
	  } else {
	   $d$addr$05 = $incdec$ptr1;$n$addr$04 = $dec;$s$addr$03 = $incdec$ptr;
	  }
	 }
	 STACKTOP = sp;return ($d|0);
	}
	function _wmemmove($d,$s,$n) {
	 $d = $d|0;
	 $s = $s|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $arrayidx = 0, $arrayidx1 = 0, $cmp = 0, $d$addr$017 = 0, $dec12 = 0, $dec12$in = 0, $dec3 = 0, $incdec$ptr = 0, $incdec$ptr6 = 0, $n$addr$116 = 0, $s$addr$015 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool11 = 0, $tobool4 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub$ptr$lhs$cast = $d;
	 $sub$ptr$rhs$cast = $s;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $sub$ptr$div = $sub$ptr$sub >> 2;
	 $cmp = ($sub$ptr$div>>>0)<($n>>>0);
	 $tobool11 = ($n|0)==(0);
	 if ($cmp) {
	  if ($tobool11) {
	   STACKTOP = sp;return ($d|0);
	  } else {
	   $dec12$in = $n;
	  }
	  while(1) {
	   $dec12 = (($dec12$in) + -1)|0;
	   $arrayidx = (($s) + ($dec12<<2)|0);
	   $0 = HEAP32[$arrayidx>>2]|0;
	   $arrayidx1 = (($d) + ($dec12<<2)|0);
	   HEAP32[$arrayidx1>>2] = $0;
	   $tobool = ($dec12|0)==(0);
	   if ($tobool) {
	    break;
	   } else {
	    $dec12$in = $dec12;
	   }
	  }
	  STACKTOP = sp;return ($d|0);
	 } else {
	  if ($tobool11) {
	   STACKTOP = sp;return ($d|0);
	  } else {
	   $d$addr$017 = $d;$n$addr$116 = $n;$s$addr$015 = $s;
	  }
	  while(1) {
	   $dec3 = (($n$addr$116) + -1)|0;
	   $incdec$ptr = (($s$addr$015) + 4|0);
	   $1 = HEAP32[$s$addr$015>>2]|0;
	   $incdec$ptr6 = (($d$addr$017) + 4|0);
	   HEAP32[$d$addr$017>>2] = $1;
	   $tobool4 = ($dec3|0)==(0);
	   if ($tobool4) {
	    break;
	   } else {
	    $d$addr$017 = $incdec$ptr6;$n$addr$116 = $dec3;$s$addr$015 = $incdec$ptr;
	   }
	  }
	  STACKTOP = sp;return ($d|0);
	 }
	 return 0|0;
	}
	function _wmemset($d,$c,$n) {
	 $d = $d|0;
	 $c = $c|0;
	 $n = $n|0;
	 var $d$addr$04 = 0, $dec = 0, $incdec$ptr = 0, $n$addr$03 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool2 = ($n|0)==(0);
	 if ($tobool2) {
	  STACKTOP = sp;return ($d|0);
	 } else {
	  $d$addr$04 = $d;$n$addr$03 = $n;
	 }
	 while(1) {
	  $dec = (($n$addr$03) + -1)|0;
	  $incdec$ptr = (($d$addr$04) + 4|0);
	  HEAP32[$d$addr$04>>2] = $c;
	  $tobool = ($dec|0)==(0);
	  if ($tobool) {
	   break;
	  } else {
	   $d$addr$04 = $incdec$ptr;$n$addr$03 = $dec;
	  }
	 }
	 STACKTOP = sp;return ($d|0);
	}
	function _malloc($bytes) {
	 $bytes = $bytes|0;
	 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i144 = 0, $$pre$i66$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i145Z2D = 0, $$pre$phi$i67$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
	 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
	 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
	 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
	 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
	 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
	 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
	 var $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
	 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
	 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
	 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
	 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F289$0$i = 0, $I252$0$i$i = 0, $I315$0$i = 0, $I57$0$c$i$i = 0, $I57$0$i$i = 0, $K105$017$i$i = 0, $K305$043$i$i = 0, $K372$024$i = 0;
	 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i135 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i137 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i134 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i69$i = 0, $T$016$i$i = 0, $T$023$i = 0, $T$042$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i113 = 0, $add$i147 = 0, $add$ptr$i = 0;
	 var $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i10$i$i = 0, $add$ptr$i11$i = 0, $add$ptr$i126 = 0, $add$ptr$i160 = 0, $add$ptr$i22$i = 0, $add$ptr$i37$i = 0, $add$ptr$sum$i$i = 0, $add$ptr$sum$i141172 = 0, $add$ptr$sum$i173 = 0, $add$ptr$sum1$i = 0, $add$ptr$sum1$i142 = 0, $add$ptr$sum10$i = 0, $add$ptr$sum104 = 0, $add$ptr$sum11$i = 0, $add$ptr$sum12$i = 0, $add$ptr$sum13$i = 0, $add$ptr$sum14$i = 0, $add$ptr$sum2$i = 0;
	 var $add$ptr$sum3$i = 0, $add$ptr$sum4$i = 0, $add$ptr$sum5$i = 0, $add$ptr$sum6$i = 0, $add$ptr$sum7$i = 0, $add$ptr$sum8$i = 0, $add$ptr$sum9$i = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr16$sum$i$i = 0, $add$ptr16$sum23$i$i = 0, $add$ptr16$sum25$i$i = 0, $add$ptr16$sum2627$i$i = 0, $add$ptr16$sum2829$i$i = 0, $add$ptr16$sum3031$i$i = 0, $add$ptr16$sum32$i$i = 0, $add$ptr16$sum4$i$i = 0, $add$ptr16$sum56$i$i = 0, $add$ptr16$sum7$i$i = 0, $add$ptr165 = 0;
	 var $add$ptr165$sum = 0, $add$ptr168 = 0, $add$ptr17$i$i = 0, $add$ptr17$sum$i$i = 0, $add$ptr17$sum10$i$i = 0, $add$ptr17$sum11$i$i = 0, $add$ptr17$sum12$i$i = 0, $add$ptr17$sum13$i$i = 0, $add$ptr17$sum16$i$i = 0, $add$ptr17$sum17$i$i = 0, $add$ptr17$sum18$i$i = 0, $add$ptr17$sum19$i$i = 0, $add$ptr17$sum20$i$i = 0, $add$ptr17$sum21$i$i = 0, $add$ptr17$sum22$i$i = 0, $add$ptr17$sum23$i$i = 0, $add$ptr17$sum33$i$i = 0, $add$ptr17$sum34$i$i = 0, $add$ptr17$sum35$i$i = 0, $add$ptr17$sum8$i$i = 0;
	 var $add$ptr17$sum9$i$i = 0, $add$ptr177$sum = 0, $add$ptr181 = 0, $add$ptr181$sum$i = 0, $add$ptr186$i = 0, $add$ptr190 = 0, $add$ptr190$i = 0, $add$ptr190$sum = 0, $add$ptr196 = 0, $add$ptr2$sum$i$i = 0, $add$ptr2$sum1$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr224$i = 0, $add$ptr224$sum$i = 0, $add$ptr224$sum131$i = 0, $add$ptr224$sum132$i = 0, $add$ptr224$sum133$i = 0, $add$ptr224$sum134$i = 0, $add$ptr224$sum135$i = 0;
	 var $add$ptr224$sum136$i = 0, $add$ptr224$sum137$i = 0, $add$ptr224$sum138$i = 0, $add$ptr224$sum139$i = 0, $add$ptr224$sum140$i = 0, $add$ptr224$sum141$i = 0, $add$ptr224$sum142$i = 0, $add$ptr224$sum143$i = 0, $add$ptr225$i = 0, $add$ptr2418$i$i = 0, $add$ptr2420$i$i = 0, $add$ptr255$i = 0, $add$ptr255$sum$i = 0, $add$ptr262$i = 0, $add$ptr272$sum$i = 0, $add$ptr281$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr30$i52$i = 0, $add$ptr30$sum$i$i = 0;
	 var $add$ptr368$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i28$i = 0, $add$ptr4$i43$i = 0, $add$ptr4$sum$i$i = 0, $add$ptr4$sum$i$i$i = 0, $add$ptr4$sum$i31$i = 0, $add$ptr4$sum$i49$i = 0, $add$ptr4$sum1$i$i = 0, $add$ptr4$sum1415$i$i = 0, $add$ptr436$i = 0, $add$ptr5$i$i = 0, $add$ptr6$sum$i$i = 0, $add$ptr6$sum$i$i$i = 0, $add$ptr6$sum$i33$i = 0, $add$ptr7$i$i = 0, $add$ptr82$i$i = 0, $add$ptr95 = 0, $add$ptr95$sum102 = 0;
	 var $add$ptr98 = 0, $add10$i = 0, $add107$i = 0, $add13$i = 0, $add137$i = 0, $add14$i = 0, $add143 = 0, $add147$i = 0, $add17$i = 0, $add17$i150 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add209$i = 0, $add212$i = 0, $add22$i = 0, $add243$i = 0;
	 var $add26$i$i = 0, $add267$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add336$i = 0, $add341$i = 0, $add345$i = 0, $add347$i = 0, $add350$i = 0, $add43$i = 0, $add48$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add58 = 0, $add62 = 0, $add64 = 0;
	 var $add74$i = 0, $add74$i$i = 0, $add77$i = 0, $add79$i$i = 0, $add8 = 0, $add81$i = 0, $add83$i$i = 0, $add85$i = 0, $add85$i$i = 0, $add88$i$i = 0, $add89$i = 0, $add9$i = 0, $add91$i = 0, $add98$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i110 = 0, $and$i12$i = 0;
	 var $and$i14$i = 0, $and$i23$i = 0, $and$i38$i = 0, $and101$i = 0, $and103$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and11914$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and144 = 0, $and17$i = 0, $and191$i = 0, $and193$i = 0, $and199$i = 0, $and209$i$i = 0;
	 var $and21$i = 0, $and21$i116 = 0, $and227$i$i = 0, $and233$i = 0, $and26$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and291$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i25$i = 0, $and3$i40$i = 0, $and30$i = 0, $and318$i$i = 0, $and31840$i$i = 0, $and32$i = 0;
	 var $and32$i$i = 0, $and33$i$i = 0, $and330$i = 0, $and335$i = 0, $and340$i = 0, $and349$i = 0, $and362$i = 0, $and37$i$i = 0, $and386$i = 0, $and38621$i = 0, $and39$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and43 = 0, $and46 = 0, $and46$i = 0, $and49 = 0, $and49$i$i = 0, $and53 = 0;
	 var $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i44$i = 0, $and61 = 0, $and63$i = 0, $and67$i = 0, $and69$i$i = 0, $and7 = 0, $and7$i$i = 0, $and72$i = 0, $and73$i$i = 0, $and74 = 0, $and76$i = 0, $and77$$i = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and84$i = 0;
	 var $and87$i$i = 0, $and88$i = 0, $and9$i = 0, $and96$i$i = 0, $and99$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i117 = 0, $arrayidx$i21$i = 0, $arrayidx$i57$i = 0, $arrayidx$sum = 0, $arrayidx$sum$i$i = 0, $arrayidx$sum$pre$i$i = 0, $arrayidx$sum1$i$i = 0, $arrayidx$sum9$i$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx103$sum$pre = 0, $arrayidx103$sum103 = 0;
	 var $arrayidx105$i = 0, $arrayidx107$i$i = 0, $arrayidx112$i = 0, $arrayidx113$i = 0, $arrayidx121$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0, $arrayidx148$i = 0, $arrayidx150$i = 0, $arrayidx151$i$i = 0, $arrayidx154$i = 0, $arrayidx154$i131 = 0, $arrayidx160$i = 0, $arrayidx164$i = 0, $arrayidx165$i = 0, $arrayidx178$i$i = 0, $arrayidx183$i = 0, $arrayidx184$i$i = 0;
	 var $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx196$sum$pre$i = 0, $arrayidx196$sum2$i = 0, $arrayidx203$i = 0, $arrayidx211$i = 0, $arrayidx223$i$i = 0, $arrayidx223$sum$pre$i$i = 0, $arrayidx223$sum24$i$i = 0, $arrayidx227$i = 0, $arrayidx23$i = 0, $arrayidx238$i = 0, $arrayidx244$i = 0, $arrayidx255$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx288$i = 0, $arrayidx288$sum$pre$i = 0, $arrayidx288$sum15$i = 0, $arrayidx290$i$i = 0;
	 var $arrayidx325$i$i = 0, $arrayidx354$i = 0, $arrayidx357$i = 0, $arrayidx393$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx66$sum = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0, $arrayidx93$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk$i = 0, $bk$i$i = 0;
	 var $bk$i128 = 0, $bk$i55$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk135$i = 0, $bk139$i$i = 0, $bk155$i$i = 0, $bk158$i$i = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0, $bk310$i = 0, $bk312$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk369$i = 0;
	 var $bk406$i = 0, $bk425$i = 0, $bk428$i = 0, $bk43$i$i = 0, $bk47$i = 0, $bk55$i$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$0$i = 0, $call$i$i = 0, $call104$i = 0, $call128$i = 0, $call129$i = 0, $call265$i = 0, $call34$$i = 0, $call34$i = 0, $call6$i$i = 0, $call65$i = 0;
	 var $call80$$i = 0, $call80$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child289$sum$i$i = 0, $child356$i = 0, $child356$sum$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i107 = 0, $cmp$i11$i$i = 0, $cmp$i13$i = 0, $cmp$i146 = 0, $cmp$i15$i = 0, $cmp$i24$i = 0, $cmp$i39$i = 0, $cmp$i9$i = 0, $cmp1 = 0;
	 var $cmp1$i = 0, $cmp1$i$i = 0, $cmp10 = 0, $cmp100$i$i = 0, $cmp101$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i$i = 0, $cmp112$i$i = 0, $cmp113 = 0, $cmp114$i = 0, $cmp115$i = 0, $cmp115$i162 = 0, $cmp118$i = 0, $cmp12$i = 0, $cmp120$i = 0;
	 var $cmp120$i$i = 0, $cmp120$i63$i = 0, $cmp12015$i$i = 0, $cmp122$i = 0, $cmp124$i = 0, $cmp124$i$i = 0, $cmp126$i = 0, $cmp127$i = 0, $cmp128 = 0, $cmp128$i$i = 0, $cmp130$i = 0, $cmp132$i = 0, $cmp133$i$i = 0, $cmp134$i = 0, $cmp136$i = 0, $cmp137$i$i = 0, $cmp138 = 0, $cmp138$i = 0, $cmp138$i164 = 0, $cmp139$i = 0;
	 var $cmp142$i = 0, $cmp144$i$i = 0, $cmp145 = 0, $cmp147$i$i = 0, $cmp148$i = 0, $cmp15 = 0, $cmp15$i = 0, $cmp150$i$i = 0, $cmp151$i = 0, $cmp154$i = 0, $cmp155 = 0, $cmp155$i = 0, $cmp155$i132 = 0, $cmp156$i = 0, $cmp156$i$i = 0, $cmp159$i = 0, $cmp159$i166 = 0, $cmp16 = 0, $cmp160$i$i = 0, $cmp161 = 0;
	 var $cmp161$i = 0, $cmp165$i = 0, $cmp168$i$i = 0, $cmp170$i = 0, $cmp172$i$i = 0, $cmp174$i = 0, $cmp179$i = 0, $cmp183 = 0, $cmp183$i = 0, $cmp184$i = 0, $cmp185$i$i = 0, $cmp187$i = 0, $cmp189$i$i = 0, $cmp19$i = 0, $cmp191$i = 0, $cmp197$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0, $cmp200$i = 0;
	 var $cmp204$i = 0, $cmp206$i = 0, $cmp208$i = 0, $cmp21$i = 0, $cmp215$i = 0, $cmp215$i$i = 0, $cmp216$i = 0, $cmp220$i = 0, $cmp221$i = 0, $cmp225$i = 0, $cmp228$i = 0, $cmp232$i = 0, $cmp236$i$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp245$i = 0, $cmp249$i = 0, $cmp250$i = 0, $cmp254$i$i = 0, $cmp258$i$i = 0;
	 var $cmp26$i = 0, $cmp264$i = 0, $cmp27$i$i = 0, $cmp2719$i$i = 0, $cmp28$i = 0, $cmp28$i$i = 0, $cmp283$i = 0, $cmp29 = 0, $cmp29$i = 0, $cmp3$i$i = 0, $cmp300$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp318$i = 0, $cmp319$i$i = 0, $cmp31941$i$i = 0, $cmp32$i = 0, $cmp32$i152 = 0, $cmp322$i = 0, $cmp327$i$i = 0;
	 var $cmp33$i = 0, $cmp332$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp346$i$i = 0, $cmp35$i = 0, $cmp35$i154 = 0, $cmp350$i$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp373$i = 0, $cmp38$i$i = 0, $cmp387$i = 0, $cmp38722$i = 0, $cmp395$i = 0, $cmp40$i = 0, $cmp40$i155 = 0, $cmp400$i = 0, $cmp41$i$i = 0, $cmp414$i = 0;
	 var $cmp418$i = 0, $cmp42$i$i = 0, $cmp44$i$i = 0, $cmp45$i = 0, $cmp45$i123 = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp46$i59$i = 0, $cmp48$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp51$i = 0, $cmp52$i = 0, $cmp54$i = 0, $cmp54$i$i = 0, $cmp54$i156 = 0, $cmp56$i = 0, $cmp57$i = 0, $cmp57$i$i = 0, $cmp59$i$i = 0;
	 var $cmp60$i = 0, $cmp60$i$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0, $cmp64$i = 0, $cmp66$i = 0, $cmp66$i158 = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76 = 0, $cmp76$i = 0, $cmp78$i = 0, $cmp79 = 0, $cmp81$i = 0, $cmp81$i$i = 0, $cmp82$i = 0, $cmp83$i$i = 0;
	 var $cmp86$i = 0, $cmp86$i$i = 0, $cmp88$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp90$i161 = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp9626$i = 0, $cmp97$i$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i27$i = 0, $cond$i42$i = 0, $cond$v$0$i = 0;
	 var $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond18$i = 0, $cond315$i$i = 0, $cond37$i$i = 0, $cond382$i = 0, $cond4$i = 0, $cond6$i = 0, $exitcond$i$i = 0, $fd$i = 0, $fd$i$i = 0, $fd$i129 = 0, $fd103$i$i = 0, $fd123 = 0, $fd138$i = 0, $fd140$i$i = 0, $fd145$i$i = 0, $fd157$i$i = 0, $fd219$i = 0;
	 var $fd247$i$i = 0, $fd303$i$i = 0, $fd311$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd370$i = 0, $fd407$i = 0, $fd412$i = 0, $fd427$i = 0, $fd50$i = 0, $fd54$i$i = 0, $fd59$i$i = 0, $fd68$pre$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd78$i$i = 0, $fd85$i$i = 0, $fd9 = 0, $head = 0;
	 var $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i122 = 0, $head$i18$i = 0, $head$i32$i = 0, $head$i50$i = 0, $head118$i$i = 0, $head11813$i$i = 0, $head167 = 0, $head172 = 0, $head176 = 0, $head178 = 0, $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head192 = 0, $head195 = 0, $head208$i$i = 0;
	 var $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head258$i = 0, $head261$i = 0, $head270$i = 0, $head273$i = 0, $head278$i = 0, $head280$i = 0, $head29$i = 0, $head29$i$i = 0, $head31$i$i = 0, $head317$i$i = 0, $head31739$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head385$i = 0, $head38520$i = 0, $head7$i$i = 0, $head7$i$i$i = 0;
	 var $head7$i34$i = 0, $head94 = 0, $head97 = 0, $head98$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $inc$i$i = 0, $index$i = 0, $index$i$i = 0, $index$i138 = 0, $index$i64$i = 0, $index288$i$i = 0, $index355$i = 0, $mem$0 = 0, $nb$0 = 0, $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i139 = 0, $neg$i149 = 0;
	 var $neg100$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg45$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next228$i = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i157 = 0, $or$cond1$i = 0, $or$cond16$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond6$not$i = 0;
	 var $or$cond7$i = 0, $or$cond8$i = 0, $or$cond93$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i163 = 0, $or$i30$i = 0, $or101$i$i = 0, $or110 = 0, $or166 = 0, $or171 = 0, $or175 = 0, $or178$i = 0, $or179 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or191 = 0;
	 var $or194 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or257$i = 0, $or26 = 0, $or260$i = 0, $or269$i = 0, $or274$i = 0, $or277$i = 0, $or279$i = 0, $or28$i$i = 0, $or296$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or367$i = 0, $or40 = 0, $or44$i$i = 0;
	 var $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i127 = 0, $parent$i61$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent159$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0, $parent225$i = 0, $parent239$i = 0, $parent256$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0;
	 var $parent368$i = 0, $parent405$i = 0, $parent429$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i120 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$328$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sflags190$i = 0, $sflags232$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i111 = 0, $shl$i20$i = 0, $shl$i56$i = 0;
	 var $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl191$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl221$i$i = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl287$i = 0, $shl290$i = 0;
	 var $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl332$i = 0, $shl337$i = 0, $shl343$i = 0, $shl346$i = 0, $shl35 = 0, $shl361$i = 0, $shl37 = 0, $shl383$i = 0, $shl39$i$i = 0, $shl394$i = 0, $shl48$i$i = 0, $shl52$i = 0, $shl59$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0;
	 var $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i106 = 0, $shr$i54$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i114 = 0, $shr110$i$i = 0, $shr12$i = 0, $shr123$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i115 = 0;
	 var $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr282$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr317$i = 0, $shr322$i$i = 0, $shr329$i = 0, $shr334$i = 0, $shr339$i = 0, $shr344$i = 0;
	 var $shr348$i = 0, $shr377$i = 0, $shr390$i = 0, $shr4$i = 0, $shr41$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i109 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0, $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0;
	 var $shr7$i112 = 0, $shr71$i = 0, $shr72$i$i = 0, $shr74$i = 0, $shr75$i = 0, $shr77$i$i = 0, $shr78$i = 0, $shr79$i = 0, $shr8$i = 0, $shr82$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr86$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr90$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size185$i = 0, $size242$i = 0;
	 var $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0109$i = 0, $sp$1105$i = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i105 = 0, $sub$i148 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i46$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i47$i = 0;
	 var $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i48$i = 0, $sub$ptr$sub$tsize$1$i = 0, $sub10$i = 0, $sub100$i = 0, $sub100$rsize$3$i = 0, $sub109$i = 0, $sub113$i$i = 0, $sub117$i = 0, $sub14$i = 0, $sub159 = 0, $sub16$i$i = 0, $sub169$i = 0, $sub18$i$i = 0, $sub187 = 0, $sub2$i = 0, $sub22$i = 0, $sub253$i = 0, $sub262$i$i = 0;
	 var $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub31$rsize$0$i = 0, $sub313$i$i = 0, $sub328$i = 0, $sub33$i = 0, $sub333$i = 0, $sub338$i = 0, $sub342$i = 0, $sub38$i = 0, $sub380$i = 0, $sub4$i = 0, $sub42 = 0, $sub44 = 0, $sub47$i = 0, $sub5$i$i = 0, $sub5$i$i$i = 0;
	 var $sub5$i29$i = 0, $sub6$i = 0, $sub62$i = 0, $sub66$i = 0, $sub67$i$i = 0, $sub69$i = 0, $sub71$i$i = 0, $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub96$i = 0, $t$0$i = 0, $t$0$i119 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$227$i = 0, $tbase$0$i = 0, $tbase$291$i = 0, $tobool$i$i = 0;
	 var $tobool107 = 0, $tobool192$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool234$i = 0, $tobool27$i = 0, $tobool292$i = 0, $tobool296$i$i = 0, $tobool363$i = 0, $tobool97$i$i = 0, $tsize$0$i = 0, $tsize$0748284$i = 0, $tsize$1$i = 0, $tsize$290$i = 0, $v$0$i = 0, $v$0$i121 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$329$i = 0;
	 var $xor$i$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($bytes>>>0)<(245);
	 do {
	  if ($cmp) {
	   $cmp1 = ($bytes>>>0)<(11);
	   if ($cmp1) {
	    $cond = 16;
	   } else {
	    $add2 = (($bytes) + 11)|0;
	    $and = $add2 & -8;
	    $cond = $and;
	   }
	   $shr = $cond >>> 3;
	   $0 = HEAP32[154792>>2]|0;
	   $shr3 = $0 >>> $shr;
	   $and4 = $shr3 & 3;
	   $cmp5 = ($and4|0)==(0);
	   if (!($cmp5)) {
	    $neg = $shr3 & 1;
	    $and7 = $neg ^ 1;
	    $add8 = (($and7) + ($shr))|0;
	    $shl = $add8 << 1;
	    $arrayidx = ((154792 + ($shl<<2)|0) + 40|0);
	    $arrayidx$sum = (($shl) + 2)|0;
	    $1 = ((154792 + ($arrayidx$sum<<2)|0) + 40|0);
	    $2 = HEAP32[$1>>2]|0;
	    $fd9 = (($2) + 8|0);
	    $3 = HEAP32[$fd9>>2]|0;
	    $cmp10 = ($arrayidx|0)==($3|0);
	    do {
	     if ($cmp10) {
	      $shl12 = 1 << $add8;
	      $neg13 = $shl12 ^ -1;
	      $and14 = $0 & $neg13;
	      HEAP32[154792>>2] = $and14;
	     } else {
	      $4 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp15 = ($3>>>0)<($4>>>0);
	      if ($cmp15) {
	       _abort();
	       // unreachable;
	      }
	      $bk = (($3) + 12|0);
	      $5 = HEAP32[$bk>>2]|0;
	      $cmp16 = ($5|0)==($2|0);
	      if ($cmp16) {
	       HEAP32[$bk>>2] = $arrayidx;
	       HEAP32[$1>>2] = $3;
	       break;
	      } else {
	       _abort();
	       // unreachable;
	      }
	     }
	    } while(0);
	    $shl22 = $add8 << 3;
	    $or23 = $shl22 | 3;
	    $head = (($2) + 4|0);
	    HEAP32[$head>>2] = $or23;
	    $add$ptr$sum104 = $shl22 | 4;
	    $head25 = (($2) + ($add$ptr$sum104)|0);
	    $6 = HEAP32[$head25>>2]|0;
	    $or26 = $6 | 1;
	    HEAP32[$head25>>2] = $or26;
	    $mem$0 = $fd9;
	    STACKTOP = sp;return ($mem$0|0);
	   }
	   $7 = HEAP32[((154792 + 8|0))>>2]|0;
	   $cmp29 = ($cond>>>0)>($7>>>0);
	   if ($cmp29) {
	    $cmp31 = ($shr3|0)==(0);
	    if (!($cmp31)) {
	     $shl35 = $shr3 << $shr;
	     $shl37 = 2 << $shr;
	     $sub = (0 - ($shl37))|0;
	     $or40 = $shl37 | $sub;
	     $and41 = $shl35 & $or40;
	     $sub42 = (0 - ($and41))|0;
	     $and43 = $and41 & $sub42;
	     $sub44 = (($and43) + -1)|0;
	     $shr45 = $sub44 >>> 12;
	     $and46 = $shr45 & 16;
	     $shr47 = $sub44 >>> $and46;
	     $shr48 = $shr47 >>> 5;
	     $and49 = $shr48 & 8;
	     $add50 = $and49 | $and46;
	     $shr51 = $shr47 >>> $and49;
	     $shr52 = $shr51 >>> 2;
	     $and53 = $shr52 & 4;
	     $add54 = $add50 | $and53;
	     $shr55 = $shr51 >>> $and53;
	     $shr56 = $shr55 >>> 1;
	     $and57 = $shr56 & 2;
	     $add58 = $add54 | $and57;
	     $shr59 = $shr55 >>> $and57;
	     $shr60 = $shr59 >>> 1;
	     $and61 = $shr60 & 1;
	     $add62 = $add58 | $and61;
	     $shr63 = $shr59 >>> $and61;
	     $add64 = (($add62) + ($shr63))|0;
	     $shl65 = $add64 << 1;
	     $arrayidx66 = ((154792 + ($shl65<<2)|0) + 40|0);
	     $arrayidx66$sum = (($shl65) + 2)|0;
	     $8 = ((154792 + ($arrayidx66$sum<<2)|0) + 40|0);
	     $9 = HEAP32[$8>>2]|0;
	     $fd69 = (($9) + 8|0);
	     $10 = HEAP32[$fd69>>2]|0;
	     $cmp70 = ($arrayidx66|0)==($10|0);
	     do {
	      if ($cmp70) {
	       $shl72 = 1 << $add64;
	       $neg73 = $shl72 ^ -1;
	       $and74 = $0 & $neg73;
	       HEAP32[154792>>2] = $and74;
	      } else {
	       $11 = HEAP32[((154792 + 16|0))>>2]|0;
	       $cmp76 = ($10>>>0)<($11>>>0);
	       if ($cmp76) {
	        _abort();
	        // unreachable;
	       }
	       $bk78 = (($10) + 12|0);
	       $12 = HEAP32[$bk78>>2]|0;
	       $cmp79 = ($12|0)==($9|0);
	       if ($cmp79) {
	        HEAP32[$bk78>>2] = $arrayidx66;
	        HEAP32[$8>>2] = $10;
	        break;
	       } else {
	        _abort();
	        // unreachable;
	       }
	      }
	     } while(0);
	     $shl90 = $add64 << 3;
	     $sub91 = (($shl90) - ($cond))|0;
	     $or93 = $cond | 3;
	     $head94 = (($9) + 4|0);
	     HEAP32[$head94>>2] = $or93;
	     $add$ptr95 = (($9) + ($cond)|0);
	     $or96 = $sub91 | 1;
	     $add$ptr95$sum102 = $cond | 4;
	     $head97 = (($9) + ($add$ptr95$sum102)|0);
	     HEAP32[$head97>>2] = $or96;
	     $add$ptr98 = (($9) + ($shl90)|0);
	     HEAP32[$add$ptr98>>2] = $sub91;
	     $13 = HEAP32[((154792 + 8|0))>>2]|0;
	     $cmp99 = ($13|0)==(0);
	     if (!($cmp99)) {
	      $14 = HEAP32[((154792 + 20|0))>>2]|0;
	      $shr101 = $13 >>> 3;
	      $shl102 = $shr101 << 1;
	      $arrayidx103 = ((154792 + ($shl102<<2)|0) + 40|0);
	      $15 = HEAP32[154792>>2]|0;
	      $shl105 = 1 << $shr101;
	      $and106 = $15 & $shl105;
	      $tobool107 = ($and106|0)==(0);
	      if ($tobool107) {
	       $or110 = $15 | $shl105;
	       HEAP32[154792>>2] = $or110;
	       $arrayidx103$sum$pre = (($shl102) + 2)|0;
	       $$pre = ((154792 + ($arrayidx103$sum$pre<<2)|0) + 40|0);
	       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
	      } else {
	       $arrayidx103$sum103 = (($shl102) + 2)|0;
	       $16 = ((154792 + ($arrayidx103$sum103<<2)|0) + 40|0);
	       $17 = HEAP32[$16>>2]|0;
	       $18 = HEAP32[((154792 + 16|0))>>2]|0;
	       $cmp113 = ($17>>>0)<($18>>>0);
	       if ($cmp113) {
	        _abort();
	        // unreachable;
	       } else {
	        $$pre$phiZ2D = $16;$F104$0 = $17;
	       }
	      }
	      HEAP32[$$pre$phiZ2D>>2] = $14;
	      $bk122 = (($F104$0) + 12|0);
	      HEAP32[$bk122>>2] = $14;
	      $fd123 = (($14) + 8|0);
	      HEAP32[$fd123>>2] = $F104$0;
	      $bk124 = (($14) + 12|0);
	      HEAP32[$bk124>>2] = $arrayidx103;
	     }
	     HEAP32[((154792 + 8|0))>>2] = $sub91;
	     HEAP32[((154792 + 20|0))>>2] = $add$ptr95;
	     $mem$0 = $fd69;
	     STACKTOP = sp;return ($mem$0|0);
	    }
	    $19 = HEAP32[((154792 + 4|0))>>2]|0;
	    $cmp128 = ($19|0)==(0);
	    if ($cmp128) {
	     $nb$0 = $cond;
	    } else {
	     $sub$i = (0 - ($19))|0;
	     $and$i = $19 & $sub$i;
	     $sub2$i = (($and$i) + -1)|0;
	     $shr$i = $sub2$i >>> 12;
	     $and3$i = $shr$i & 16;
	     $shr4$i = $sub2$i >>> $and3$i;
	     $shr5$i = $shr4$i >>> 5;
	     $and6$i = $shr5$i & 8;
	     $add$i = $and6$i | $and3$i;
	     $shr7$i = $shr4$i >>> $and6$i;
	     $shr8$i = $shr7$i >>> 2;
	     $and9$i = $shr8$i & 4;
	     $add10$i = $add$i | $and9$i;
	     $shr11$i = $shr7$i >>> $and9$i;
	     $shr12$i = $shr11$i >>> 1;
	     $and13$i = $shr12$i & 2;
	     $add14$i = $add10$i | $and13$i;
	     $shr15$i = $shr11$i >>> $and13$i;
	     $shr16$i = $shr15$i >>> 1;
	     $and17$i = $shr16$i & 1;
	     $add18$i = $add14$i | $and17$i;
	     $shr19$i = $shr15$i >>> $and17$i;
	     $add20$i = (($add18$i) + ($shr19$i))|0;
	     $arrayidx$i = ((154792 + ($add20$i<<2)|0) + 304|0);
	     $20 = HEAP32[$arrayidx$i>>2]|0;
	     $head$i = (($20) + 4|0);
	     $21 = HEAP32[$head$i>>2]|0;
	     $and21$i = $21 & -8;
	     $sub22$i = (($and21$i) - ($cond))|0;
	     $rsize$0$i = $sub22$i;$t$0$i = $20;$v$0$i = $20;
	     while(1) {
	      $arrayidx23$i = (($t$0$i) + 16|0);
	      $22 = HEAP32[$arrayidx23$i>>2]|0;
	      $cmp$i = ($22|0)==(0|0);
	      if ($cmp$i) {
	       $arrayidx27$i = (($t$0$i) + 20|0);
	       $23 = HEAP32[$arrayidx27$i>>2]|0;
	       $cmp28$i = ($23|0)==(0|0);
	       if ($cmp28$i) {
	        break;
	       } else {
	        $cond6$i = $23;
	       }
	      } else {
	       $cond6$i = $22;
	      }
	      $head29$i = (($cond6$i) + 4|0);
	      $24 = HEAP32[$head29$i>>2]|0;
	      $and30$i = $24 & -8;
	      $sub31$i = (($and30$i) - ($cond))|0;
	      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
	      $sub31$rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
	      $cond$v$0$i = $cmp32$i ? $cond6$i : $v$0$i;
	      $rsize$0$i = $sub31$rsize$0$i;$t$0$i = $cond6$i;$v$0$i = $cond$v$0$i;
	     }
	     $25 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp33$i = ($v$0$i>>>0)<($25>>>0);
	     if ($cmp33$i) {
	      _abort();
	      // unreachable;
	     }
	     $add$ptr$i = (($v$0$i) + ($cond)|0);
	     $cmp35$i = ($v$0$i>>>0)<($add$ptr$i>>>0);
	     if (!($cmp35$i)) {
	      _abort();
	      // unreachable;
	     }
	     $parent$i = (($v$0$i) + 24|0);
	     $26 = HEAP32[$parent$i>>2]|0;
	     $bk$i = (($v$0$i) + 12|0);
	     $27 = HEAP32[$bk$i>>2]|0;
	     $cmp40$i = ($27|0)==($v$0$i|0);
	     do {
	      if ($cmp40$i) {
	       $arrayidx61$i = (($v$0$i) + 20|0);
	       $31 = HEAP32[$arrayidx61$i>>2]|0;
	       $cmp62$i = ($31|0)==(0|0);
	       if ($cmp62$i) {
	        $arrayidx65$i = (($v$0$i) + 16|0);
	        $32 = HEAP32[$arrayidx65$i>>2]|0;
	        $cmp66$i = ($32|0)==(0|0);
	        if ($cmp66$i) {
	         $R$1$i = 0;
	         break;
	        } else {
	         $R$0$i = $32;$RP$0$i = $arrayidx65$i;
	        }
	       } else {
	        $R$0$i = $31;$RP$0$i = $arrayidx61$i;
	       }
	       while(1) {
	        $arrayidx71$i = (($R$0$i) + 20|0);
	        $33 = HEAP32[$arrayidx71$i>>2]|0;
	        $cmp72$i = ($33|0)==(0|0);
	        if (!($cmp72$i)) {
	         $R$0$i = $33;$RP$0$i = $arrayidx71$i;
	         continue;
	        }
	        $arrayidx75$i = (($R$0$i) + 16|0);
	        $34 = HEAP32[$arrayidx75$i>>2]|0;
	        $cmp76$i = ($34|0)==(0|0);
	        if ($cmp76$i) {
	         break;
	        } else {
	         $R$0$i = $34;$RP$0$i = $arrayidx75$i;
	        }
	       }
	       $cmp81$i = ($RP$0$i>>>0)<($25>>>0);
	       if ($cmp81$i) {
	        _abort();
	        // unreachable;
	       } else {
	        HEAP32[$RP$0$i>>2] = 0;
	        $R$1$i = $R$0$i;
	        break;
	       }
	      } else {
	       $fd$i = (($v$0$i) + 8|0);
	       $28 = HEAP32[$fd$i>>2]|0;
	       $cmp45$i = ($28>>>0)<($25>>>0);
	       if ($cmp45$i) {
	        _abort();
	        // unreachable;
	       }
	       $bk47$i = (($28) + 12|0);
	       $29 = HEAP32[$bk47$i>>2]|0;
	       $cmp48$i = ($29|0)==($v$0$i|0);
	       if (!($cmp48$i)) {
	        _abort();
	        // unreachable;
	       }
	       $fd50$i = (($27) + 8|0);
	       $30 = HEAP32[$fd50$i>>2]|0;
	       $cmp51$i = ($30|0)==($v$0$i|0);
	       if ($cmp51$i) {
	        HEAP32[$bk47$i>>2] = $27;
	        HEAP32[$fd50$i>>2] = $28;
	        $R$1$i = $27;
	        break;
	       } else {
	        _abort();
	        // unreachable;
	       }
	      }
	     } while(0);
	     $cmp90$i = ($26|0)==(0|0);
	     do {
	      if (!($cmp90$i)) {
	       $index$i = (($v$0$i) + 28|0);
	       $35 = HEAP32[$index$i>>2]|0;
	       $arrayidx94$i = ((154792 + ($35<<2)|0) + 304|0);
	       $36 = HEAP32[$arrayidx94$i>>2]|0;
	       $cmp95$i = ($v$0$i|0)==($36|0);
	       if ($cmp95$i) {
	        HEAP32[$arrayidx94$i>>2] = $R$1$i;
	        $cond4$i = ($R$1$i|0)==(0|0);
	        if ($cond4$i) {
	         $shl$i = 1 << $35;
	         $neg$i = $shl$i ^ -1;
	         $37 = HEAP32[((154792 + 4|0))>>2]|0;
	         $and103$i = $37 & $neg$i;
	         HEAP32[((154792 + 4|0))>>2] = $and103$i;
	         break;
	        }
	       } else {
	        $38 = HEAP32[((154792 + 16|0))>>2]|0;
	        $cmp107$i = ($26>>>0)<($38>>>0);
	        if ($cmp107$i) {
	         _abort();
	         // unreachable;
	        }
	        $arrayidx113$i = (($26) + 16|0);
	        $39 = HEAP32[$arrayidx113$i>>2]|0;
	        $cmp114$i = ($39|0)==($v$0$i|0);
	        if ($cmp114$i) {
	         HEAP32[$arrayidx113$i>>2] = $R$1$i;
	        } else {
	         $arrayidx121$i = (($26) + 20|0);
	         HEAP32[$arrayidx121$i>>2] = $R$1$i;
	        }
	        $cmp126$i = ($R$1$i|0)==(0|0);
	        if ($cmp126$i) {
	         break;
	        }
	       }
	       $40 = HEAP32[((154792 + 16|0))>>2]|0;
	       $cmp130$i = ($R$1$i>>>0)<($40>>>0);
	       if ($cmp130$i) {
	        _abort();
	        // unreachable;
	       }
	       $parent135$i = (($R$1$i) + 24|0);
	       HEAP32[$parent135$i>>2] = $26;
	       $arrayidx137$i = (($v$0$i) + 16|0);
	       $41 = HEAP32[$arrayidx137$i>>2]|0;
	       $cmp138$i = ($41|0)==(0|0);
	       do {
	        if (!($cmp138$i)) {
	         $42 = HEAP32[((154792 + 16|0))>>2]|0;
	         $cmp142$i = ($41>>>0)<($42>>>0);
	         if ($cmp142$i) {
	          _abort();
	          // unreachable;
	         } else {
	          $arrayidx148$i = (($R$1$i) + 16|0);
	          HEAP32[$arrayidx148$i>>2] = $41;
	          $parent149$i = (($41) + 24|0);
	          HEAP32[$parent149$i>>2] = $R$1$i;
	          break;
	         }
	        }
	       } while(0);
	       $arrayidx154$i = (($v$0$i) + 20|0);
	       $43 = HEAP32[$arrayidx154$i>>2]|0;
	       $cmp155$i = ($43|0)==(0|0);
	       if (!($cmp155$i)) {
	        $44 = HEAP32[((154792 + 16|0))>>2]|0;
	        $cmp159$i = ($43>>>0)<($44>>>0);
	        if ($cmp159$i) {
	         _abort();
	         // unreachable;
	        } else {
	         $arrayidx165$i = (($R$1$i) + 20|0);
	         HEAP32[$arrayidx165$i>>2] = $43;
	         $parent166$i = (($43) + 24|0);
	         HEAP32[$parent166$i>>2] = $R$1$i;
	         break;
	        }
	       }
	      }
	     } while(0);
	     $cmp174$i = ($rsize$0$i>>>0)<(16);
	     if ($cmp174$i) {
	      $add177$i = (($rsize$0$i) + ($cond))|0;
	      $or178$i = $add177$i | 3;
	      $head179$i = (($v$0$i) + 4|0);
	      HEAP32[$head179$i>>2] = $or178$i;
	      $add$ptr181$sum$i = (($add177$i) + 4)|0;
	      $head182$i = (($v$0$i) + ($add$ptr181$sum$i)|0);
	      $45 = HEAP32[$head182$i>>2]|0;
	      $or183$i = $45 | 1;
	      HEAP32[$head182$i>>2] = $or183$i;
	     } else {
	      $or186$i = $cond | 3;
	      $head187$i = (($v$0$i) + 4|0);
	      HEAP32[$head187$i>>2] = $or186$i;
	      $or188$i = $rsize$0$i | 1;
	      $add$ptr$sum$i173 = $cond | 4;
	      $head189$i = (($v$0$i) + ($add$ptr$sum$i173)|0);
	      HEAP32[$head189$i>>2] = $or188$i;
	      $add$ptr$sum1$i = (($rsize$0$i) + ($cond))|0;
	      $add$ptr190$i = (($v$0$i) + ($add$ptr$sum1$i)|0);
	      HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
	      $46 = HEAP32[((154792 + 8|0))>>2]|0;
	      $cmp191$i = ($46|0)==(0);
	      if (!($cmp191$i)) {
	       $47 = HEAP32[((154792 + 20|0))>>2]|0;
	       $shr194$i = $46 >>> 3;
	       $shl195$i = $shr194$i << 1;
	       $arrayidx196$i = ((154792 + ($shl195$i<<2)|0) + 40|0);
	       $48 = HEAP32[154792>>2]|0;
	       $shl198$i = 1 << $shr194$i;
	       $and199$i = $48 & $shl198$i;
	       $tobool200$i = ($and199$i|0)==(0);
	       if ($tobool200$i) {
	        $or204$i = $48 | $shl198$i;
	        HEAP32[154792>>2] = $or204$i;
	        $arrayidx196$sum$pre$i = (($shl195$i) + 2)|0;
	        $$pre$i = ((154792 + ($arrayidx196$sum$pre$i<<2)|0) + 40|0);
	        $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
	       } else {
	        $arrayidx196$sum2$i = (($shl195$i) + 2)|0;
	        $49 = ((154792 + ($arrayidx196$sum2$i<<2)|0) + 40|0);
	        $50 = HEAP32[$49>>2]|0;
	        $51 = HEAP32[((154792 + 16|0))>>2]|0;
	        $cmp208$i = ($50>>>0)<($51>>>0);
	        if ($cmp208$i) {
	         _abort();
	         // unreachable;
	        } else {
	         $$pre$phi$iZ2D = $49;$F197$0$i = $50;
	        }
	       }
	       HEAP32[$$pre$phi$iZ2D>>2] = $47;
	       $bk218$i = (($F197$0$i) + 12|0);
	       HEAP32[$bk218$i>>2] = $47;
	       $fd219$i = (($47) + 8|0);
	       HEAP32[$fd219$i>>2] = $F197$0$i;
	       $bk220$i = (($47) + 12|0);
	       HEAP32[$bk220$i>>2] = $arrayidx196$i;
	      }
	      HEAP32[((154792 + 8|0))>>2] = $rsize$0$i;
	      HEAP32[((154792 + 20|0))>>2] = $add$ptr$i;
	     }
	     $add$ptr225$i = (($v$0$i) + 8|0);
	     $mem$0 = $add$ptr225$i;
	     STACKTOP = sp;return ($mem$0|0);
	    }
	   } else {
	    $nb$0 = $cond;
	   }
	  } else {
	   $cmp138 = ($bytes>>>0)>(4294967231);
	   if ($cmp138) {
	    $nb$0 = -1;
	   } else {
	    $add143 = (($bytes) + 11)|0;
	    $and144 = $add143 & -8;
	    $52 = HEAP32[((154792 + 4|0))>>2]|0;
	    $cmp145 = ($52|0)==(0);
	    if ($cmp145) {
	     $nb$0 = $and144;
	    } else {
	     $sub$i105 = (0 - ($and144))|0;
	     $shr$i106 = $add143 >>> 8;
	     $cmp$i107 = ($shr$i106|0)==(0);
	     if ($cmp$i107) {
	      $idx$0$i = 0;
	     } else {
	      $cmp1$i = ($and144>>>0)>(16777215);
	      if ($cmp1$i) {
	       $idx$0$i = 31;
	      } else {
	       $sub4$i = (($shr$i106) + 1048320)|0;
	       $shr5$i109 = $sub4$i >>> 16;
	       $and$i110 = $shr5$i109 & 8;
	       $shl$i111 = $shr$i106 << $and$i110;
	       $sub6$i = (($shl$i111) + 520192)|0;
	       $shr7$i112 = $sub6$i >>> 16;
	       $and8$i = $shr7$i112 & 4;
	       $add$i113 = $and8$i | $and$i110;
	       $shl9$i = $shl$i111 << $and8$i;
	       $sub10$i = (($shl9$i) + 245760)|0;
	       $shr11$i114 = $sub10$i >>> 16;
	       $and12$i = $shr11$i114 & 2;
	       $add13$i = $add$i113 | $and12$i;
	       $sub14$i = (14 - ($add13$i))|0;
	       $shl15$i = $shl9$i << $and12$i;
	       $shr16$i115 = $shl15$i >>> 15;
	       $add17$i = (($sub14$i) + ($shr16$i115))|0;
	       $shl18$i = $add17$i << 1;
	       $add19$i = (($add17$i) + 7)|0;
	       $shr20$i = $and144 >>> $add19$i;
	       $and21$i116 = $shr20$i & 1;
	       $add22$i = $and21$i116 | $shl18$i;
	       $idx$0$i = $add22$i;
	      }
	     }
	     $arrayidx$i117 = ((154792 + ($idx$0$i<<2)|0) + 304|0);
	     $53 = HEAP32[$arrayidx$i117>>2]|0;
	     $cmp24$i = ($53|0)==(0|0);
	     L126: do {
	      if ($cmp24$i) {
	       $rsize$2$i = $sub$i105;$t$1$i = 0;$v$2$i = 0;
	      } else {
	       $cmp26$i = ($idx$0$i|0)==(31);
	       if ($cmp26$i) {
	        $cond$i = 0;
	       } else {
	        $shr27$i = $idx$0$i >>> 1;
	        $sub30$i = (25 - ($shr27$i))|0;
	        $cond$i = $sub30$i;
	       }
	       $shl31$i = $and144 << $cond$i;
	       $rsize$0$i120 = $sub$i105;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i119 = $53;$v$0$i121 = 0;
	       while(1) {
	        $head$i122 = (($t$0$i119) + 4|0);
	        $54 = HEAP32[$head$i122>>2]|0;
	        $and32$i = $54 & -8;
	        $sub33$i = (($and32$i) - ($and144))|0;
	        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i120>>>0);
	        if ($cmp34$i) {
	         $cmp36$i = ($and32$i|0)==($and144|0);
	         if ($cmp36$i) {
	          $rsize$2$i = $sub33$i;$t$1$i = $t$0$i119;$v$2$i = $t$0$i119;
	          break L126;
	         } else {
	          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i119;
	         }
	        } else {
	         $rsize$1$i = $rsize$0$i120;$v$1$i = $v$0$i121;
	        }
	        $arrayidx40$i = (($t$0$i119) + 20|0);
	        $55 = HEAP32[$arrayidx40$i>>2]|0;
	        $shr41$i = $sizebits$0$i >>> 31;
	        $arrayidx44$i = ((($t$0$i119) + ($shr41$i<<2)|0) + 16|0);
	        $56 = HEAP32[$arrayidx44$i>>2]|0;
	        $cmp45$i123 = ($55|0)==(0|0);
	        $cmp46$i = ($55|0)==($56|0);
	        $or$cond$i = $cmp45$i123 | $cmp46$i;
	        $rst$1$i = $or$cond$i ? $rst$0$i : $55;
	        $cmp49$i = ($56|0)==(0|0);
	        $shl52$i = $sizebits$0$i << 1;
	        if ($cmp49$i) {
	         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
	         break;
	        } else {
	         $rsize$0$i120 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $shl52$i;$t$0$i119 = $56;$v$0$i121 = $v$1$i;
	        }
	       }
	      }
	     } while(0);
	     $cmp54$i = ($t$1$i|0)==(0|0);
	     $cmp56$i = ($v$2$i|0)==(0|0);
	     $or$cond16$i = $cmp54$i & $cmp56$i;
	     if ($or$cond16$i) {
	      $shl59$i = 2 << $idx$0$i;
	      $sub62$i = (0 - ($shl59$i))|0;
	      $or$i = $shl59$i | $sub62$i;
	      $and63$i = $52 & $or$i;
	      $cmp64$i = ($and63$i|0)==(0);
	      if ($cmp64$i) {
	       $nb$0 = $and144;
	       break;
	      }
	      $sub66$i = (0 - ($and63$i))|0;
	      $and67$i = $and63$i & $sub66$i;
	      $sub69$i = (($and67$i) + -1)|0;
	      $shr71$i = $sub69$i >>> 12;
	      $and72$i = $shr71$i & 16;
	      $shr74$i = $sub69$i >>> $and72$i;
	      $shr75$i = $shr74$i >>> 5;
	      $and76$i = $shr75$i & 8;
	      $add77$i = $and76$i | $and72$i;
	      $shr78$i = $shr74$i >>> $and76$i;
	      $shr79$i = $shr78$i >>> 2;
	      $and80$i = $shr79$i & 4;
	      $add81$i = $add77$i | $and80$i;
	      $shr82$i = $shr78$i >>> $and80$i;
	      $shr83$i = $shr82$i >>> 1;
	      $and84$i = $shr83$i & 2;
	      $add85$i = $add81$i | $and84$i;
	      $shr86$i = $shr82$i >>> $and84$i;
	      $shr87$i = $shr86$i >>> 1;
	      $and88$i = $shr87$i & 1;
	      $add89$i = $add85$i | $and88$i;
	      $shr90$i = $shr86$i >>> $and88$i;
	      $add91$i = (($add89$i) + ($shr90$i))|0;
	      $arrayidx93$i = ((154792 + ($add91$i<<2)|0) + 304|0);
	      $57 = HEAP32[$arrayidx93$i>>2]|0;
	      $t$2$ph$i = $57;
	     } else {
	      $t$2$ph$i = $t$1$i;
	     }
	     $cmp9626$i = ($t$2$ph$i|0)==(0|0);
	     if ($cmp9626$i) {
	      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
	     } else {
	      $rsize$328$i = $rsize$2$i;$t$227$i = $t$2$ph$i;$v$329$i = $v$2$i;
	      while(1) {
	       $head98$i = (($t$227$i) + 4|0);
	       $58 = HEAP32[$head98$i>>2]|0;
	       $and99$i = $58 & -8;
	       $sub100$i = (($and99$i) - ($and144))|0;
	       $cmp101$i = ($sub100$i>>>0)<($rsize$328$i>>>0);
	       $sub100$rsize$3$i = $cmp101$i ? $sub100$i : $rsize$328$i;
	       $t$2$v$3$i = $cmp101$i ? $t$227$i : $v$329$i;
	       $arrayidx105$i = (($t$227$i) + 16|0);
	       $59 = HEAP32[$arrayidx105$i>>2]|0;
	       $cmp106$i = ($59|0)==(0|0);
	       if (!($cmp106$i)) {
	        $rsize$328$i = $sub100$rsize$3$i;$t$227$i = $59;$v$329$i = $t$2$v$3$i;
	        continue;
	       }
	       $arrayidx112$i = (($t$227$i) + 20|0);
	       $60 = HEAP32[$arrayidx112$i>>2]|0;
	       $cmp96$i = ($60|0)==(0|0);
	       if ($cmp96$i) {
	        $rsize$3$lcssa$i = $sub100$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
	        break;
	       } else {
	        $rsize$328$i = $sub100$rsize$3$i;$t$227$i = $60;$v$329$i = $t$2$v$3$i;
	       }
	      }
	     }
	     $cmp115$i = ($v$3$lcssa$i|0)==(0|0);
	     if ($cmp115$i) {
	      $nb$0 = $and144;
	     } else {
	      $61 = HEAP32[((154792 + 8|0))>>2]|0;
	      $sub117$i = (($61) - ($and144))|0;
	      $cmp118$i = ($rsize$3$lcssa$i>>>0)<($sub117$i>>>0);
	      if ($cmp118$i) {
	       $62 = HEAP32[((154792 + 16|0))>>2]|0;
	       $cmp120$i = ($v$3$lcssa$i>>>0)<($62>>>0);
	       if ($cmp120$i) {
	        _abort();
	        // unreachable;
	       }
	       $add$ptr$i126 = (($v$3$lcssa$i) + ($and144)|0);
	       $cmp122$i = ($v$3$lcssa$i>>>0)<($add$ptr$i126>>>0);
	       if (!($cmp122$i)) {
	        _abort();
	        // unreachable;
	       }
	       $parent$i127 = (($v$3$lcssa$i) + 24|0);
	       $63 = HEAP32[$parent$i127>>2]|0;
	       $bk$i128 = (($v$3$lcssa$i) + 12|0);
	       $64 = HEAP32[$bk$i128>>2]|0;
	       $cmp127$i = ($64|0)==($v$3$lcssa$i|0);
	       do {
	        if ($cmp127$i) {
	         $arrayidx150$i = (($v$3$lcssa$i) + 20|0);
	         $68 = HEAP32[$arrayidx150$i>>2]|0;
	         $cmp151$i = ($68|0)==(0|0);
	         if ($cmp151$i) {
	          $arrayidx154$i131 = (($v$3$lcssa$i) + 16|0);
	          $69 = HEAP32[$arrayidx154$i131>>2]|0;
	          $cmp155$i132 = ($69|0)==(0|0);
	          if ($cmp155$i132) {
	           $R$1$i137 = 0;
	           break;
	          } else {
	           $R$0$i135 = $69;$RP$0$i134 = $arrayidx154$i131;
	          }
	         } else {
	          $R$0$i135 = $68;$RP$0$i134 = $arrayidx150$i;
	         }
	         while(1) {
	          $arrayidx160$i = (($R$0$i135) + 20|0);
	          $70 = HEAP32[$arrayidx160$i>>2]|0;
	          $cmp161$i = ($70|0)==(0|0);
	          if (!($cmp161$i)) {
	           $R$0$i135 = $70;$RP$0$i134 = $arrayidx160$i;
	           continue;
	          }
	          $arrayidx164$i = (($R$0$i135) + 16|0);
	          $71 = HEAP32[$arrayidx164$i>>2]|0;
	          $cmp165$i = ($71|0)==(0|0);
	          if ($cmp165$i) {
	           break;
	          } else {
	           $R$0$i135 = $71;$RP$0$i134 = $arrayidx164$i;
	          }
	         }
	         $cmp170$i = ($RP$0$i134>>>0)<($62>>>0);
	         if ($cmp170$i) {
	          _abort();
	          // unreachable;
	         } else {
	          HEAP32[$RP$0$i134>>2] = 0;
	          $R$1$i137 = $R$0$i135;
	          break;
	         }
	        } else {
	         $fd$i129 = (($v$3$lcssa$i) + 8|0);
	         $65 = HEAP32[$fd$i129>>2]|0;
	         $cmp132$i = ($65>>>0)<($62>>>0);
	         if ($cmp132$i) {
	          _abort();
	          // unreachable;
	         }
	         $bk135$i = (($65) + 12|0);
	         $66 = HEAP32[$bk135$i>>2]|0;
	         $cmp136$i = ($66|0)==($v$3$lcssa$i|0);
	         if (!($cmp136$i)) {
	          _abort();
	          // unreachable;
	         }
	         $fd138$i = (($64) + 8|0);
	         $67 = HEAP32[$fd138$i>>2]|0;
	         $cmp139$i = ($67|0)==($v$3$lcssa$i|0);
	         if ($cmp139$i) {
	          HEAP32[$bk135$i>>2] = $64;
	          HEAP32[$fd138$i>>2] = $65;
	          $R$1$i137 = $64;
	          break;
	         } else {
	          _abort();
	          // unreachable;
	         }
	        }
	       } while(0);
	       $cmp179$i = ($63|0)==(0|0);
	       do {
	        if (!($cmp179$i)) {
	         $index$i138 = (($v$3$lcssa$i) + 28|0);
	         $72 = HEAP32[$index$i138>>2]|0;
	         $arrayidx183$i = ((154792 + ($72<<2)|0) + 304|0);
	         $73 = HEAP32[$arrayidx183$i>>2]|0;
	         $cmp184$i = ($v$3$lcssa$i|0)==($73|0);
	         if ($cmp184$i) {
	          HEAP32[$arrayidx183$i>>2] = $R$1$i137;
	          $cond18$i = ($R$1$i137|0)==(0|0);
	          if ($cond18$i) {
	           $shl191$i = 1 << $72;
	           $neg$i139 = $shl191$i ^ -1;
	           $74 = HEAP32[((154792 + 4|0))>>2]|0;
	           $and193$i = $74 & $neg$i139;
	           HEAP32[((154792 + 4|0))>>2] = $and193$i;
	           break;
	          }
	         } else {
	          $75 = HEAP32[((154792 + 16|0))>>2]|0;
	          $cmp197$i = ($63>>>0)<($75>>>0);
	          if ($cmp197$i) {
	           _abort();
	           // unreachable;
	          }
	          $arrayidx203$i = (($63) + 16|0);
	          $76 = HEAP32[$arrayidx203$i>>2]|0;
	          $cmp204$i = ($76|0)==($v$3$lcssa$i|0);
	          if ($cmp204$i) {
	           HEAP32[$arrayidx203$i>>2] = $R$1$i137;
	          } else {
	           $arrayidx211$i = (($63) + 20|0);
	           HEAP32[$arrayidx211$i>>2] = $R$1$i137;
	          }
	          $cmp216$i = ($R$1$i137|0)==(0|0);
	          if ($cmp216$i) {
	           break;
	          }
	         }
	         $77 = HEAP32[((154792 + 16|0))>>2]|0;
	         $cmp220$i = ($R$1$i137>>>0)<($77>>>0);
	         if ($cmp220$i) {
	          _abort();
	          // unreachable;
	         }
	         $parent225$i = (($R$1$i137) + 24|0);
	         HEAP32[$parent225$i>>2] = $63;
	         $arrayidx227$i = (($v$3$lcssa$i) + 16|0);
	         $78 = HEAP32[$arrayidx227$i>>2]|0;
	         $cmp228$i = ($78|0)==(0|0);
	         do {
	          if (!($cmp228$i)) {
	           $79 = HEAP32[((154792 + 16|0))>>2]|0;
	           $cmp232$i = ($78>>>0)<($79>>>0);
	           if ($cmp232$i) {
	            _abort();
	            // unreachable;
	           } else {
	            $arrayidx238$i = (($R$1$i137) + 16|0);
	            HEAP32[$arrayidx238$i>>2] = $78;
	            $parent239$i = (($78) + 24|0);
	            HEAP32[$parent239$i>>2] = $R$1$i137;
	            break;
	           }
	          }
	         } while(0);
	         $arrayidx244$i = (($v$3$lcssa$i) + 20|0);
	         $80 = HEAP32[$arrayidx244$i>>2]|0;
	         $cmp245$i = ($80|0)==(0|0);
	         if (!($cmp245$i)) {
	          $81 = HEAP32[((154792 + 16|0))>>2]|0;
	          $cmp249$i = ($80>>>0)<($81>>>0);
	          if ($cmp249$i) {
	           _abort();
	           // unreachable;
	          } else {
	           $arrayidx255$i = (($R$1$i137) + 20|0);
	           HEAP32[$arrayidx255$i>>2] = $80;
	           $parent256$i = (($80) + 24|0);
	           HEAP32[$parent256$i>>2] = $R$1$i137;
	           break;
	          }
	         }
	        }
	       } while(0);
	       $cmp264$i = ($rsize$3$lcssa$i>>>0)<(16);
	       L204: do {
	        if ($cmp264$i) {
	         $add267$i = (($rsize$3$lcssa$i) + ($and144))|0;
	         $or269$i = $add267$i | 3;
	         $head270$i = (($v$3$lcssa$i) + 4|0);
	         HEAP32[$head270$i>>2] = $or269$i;
	         $add$ptr272$sum$i = (($add267$i) + 4)|0;
	         $head273$i = (($v$3$lcssa$i) + ($add$ptr272$sum$i)|0);
	         $82 = HEAP32[$head273$i>>2]|0;
	         $or274$i = $82 | 1;
	         HEAP32[$head273$i>>2] = $or274$i;
	        } else {
	         $or277$i = $and144 | 3;
	         $head278$i = (($v$3$lcssa$i) + 4|0);
	         HEAP32[$head278$i>>2] = $or277$i;
	         $or279$i = $rsize$3$lcssa$i | 1;
	         $add$ptr$sum$i141172 = $and144 | 4;
	         $head280$i = (($v$3$lcssa$i) + ($add$ptr$sum$i141172)|0);
	         HEAP32[$head280$i>>2] = $or279$i;
	         $add$ptr$sum1$i142 = (($rsize$3$lcssa$i) + ($and144))|0;
	         $add$ptr281$i = (($v$3$lcssa$i) + ($add$ptr$sum1$i142)|0);
	         HEAP32[$add$ptr281$i>>2] = $rsize$3$lcssa$i;
	         $shr282$i = $rsize$3$lcssa$i >>> 3;
	         $cmp283$i = ($rsize$3$lcssa$i>>>0)<(256);
	         if ($cmp283$i) {
	          $shl287$i = $shr282$i << 1;
	          $arrayidx288$i = ((154792 + ($shl287$i<<2)|0) + 40|0);
	          $83 = HEAP32[154792>>2]|0;
	          $shl290$i = 1 << $shr282$i;
	          $and291$i = $83 & $shl290$i;
	          $tobool292$i = ($and291$i|0)==(0);
	          do {
	           if ($tobool292$i) {
	            $or296$i = $83 | $shl290$i;
	            HEAP32[154792>>2] = $or296$i;
	            $arrayidx288$sum$pre$i = (($shl287$i) + 2)|0;
	            $$pre$i144 = ((154792 + ($arrayidx288$sum$pre$i<<2)|0) + 40|0);
	            $$pre$phi$i145Z2D = $$pre$i144;$F289$0$i = $arrayidx288$i;
	           } else {
	            $arrayidx288$sum15$i = (($shl287$i) + 2)|0;
	            $84 = ((154792 + ($arrayidx288$sum15$i<<2)|0) + 40|0);
	            $85 = HEAP32[$84>>2]|0;
	            $86 = HEAP32[((154792 + 16|0))>>2]|0;
	            $cmp300$i = ($85>>>0)<($86>>>0);
	            if (!($cmp300$i)) {
	             $$pre$phi$i145Z2D = $84;$F289$0$i = $85;
	             break;
	            }
	            _abort();
	            // unreachable;
	           }
	          } while(0);
	          HEAP32[$$pre$phi$i145Z2D>>2] = $add$ptr$i126;
	          $bk310$i = (($F289$0$i) + 12|0);
	          HEAP32[$bk310$i>>2] = $add$ptr$i126;
	          $add$ptr$sum13$i = (($and144) + 8)|0;
	          $fd311$i = (($v$3$lcssa$i) + ($add$ptr$sum13$i)|0);
	          HEAP32[$fd311$i>>2] = $F289$0$i;
	          $add$ptr$sum14$i = (($and144) + 12)|0;
	          $bk312$i = (($v$3$lcssa$i) + ($add$ptr$sum14$i)|0);
	          HEAP32[$bk312$i>>2] = $arrayidx288$i;
	          break;
	         }
	         $shr317$i = $rsize$3$lcssa$i >>> 8;
	         $cmp318$i = ($shr317$i|0)==(0);
	         if ($cmp318$i) {
	          $I315$0$i = 0;
	         } else {
	          $cmp322$i = ($rsize$3$lcssa$i>>>0)>(16777215);
	          if ($cmp322$i) {
	           $I315$0$i = 31;
	          } else {
	           $sub328$i = (($shr317$i) + 1048320)|0;
	           $shr329$i = $sub328$i >>> 16;
	           $and330$i = $shr329$i & 8;
	           $shl332$i = $shr317$i << $and330$i;
	           $sub333$i = (($shl332$i) + 520192)|0;
	           $shr334$i = $sub333$i >>> 16;
	           $and335$i = $shr334$i & 4;
	           $add336$i = $and335$i | $and330$i;
	           $shl337$i = $shl332$i << $and335$i;
	           $sub338$i = (($shl337$i) + 245760)|0;
	           $shr339$i = $sub338$i >>> 16;
	           $and340$i = $shr339$i & 2;
	           $add341$i = $add336$i | $and340$i;
	           $sub342$i = (14 - ($add341$i))|0;
	           $shl343$i = $shl337$i << $and340$i;
	           $shr344$i = $shl343$i >>> 15;
	           $add345$i = (($sub342$i) + ($shr344$i))|0;
	           $shl346$i = $add345$i << 1;
	           $add347$i = (($add345$i) + 7)|0;
	           $shr348$i = $rsize$3$lcssa$i >>> $add347$i;
	           $and349$i = $shr348$i & 1;
	           $add350$i = $and349$i | $shl346$i;
	           $I315$0$i = $add350$i;
	          }
	         }
	         $arrayidx354$i = ((154792 + ($I315$0$i<<2)|0) + 304|0);
	         $add$ptr$sum2$i = (($and144) + 28)|0;
	         $index355$i = (($v$3$lcssa$i) + ($add$ptr$sum2$i)|0);
	         HEAP32[$index355$i>>2] = $I315$0$i;
	         $add$ptr$sum3$i = (($and144) + 16)|0;
	         $child356$i = (($v$3$lcssa$i) + ($add$ptr$sum3$i)|0);
	         $child356$sum$i = (($and144) + 20)|0;
	         $arrayidx357$i = (($v$3$lcssa$i) + ($child356$sum$i)|0);
	         HEAP32[$arrayidx357$i>>2] = 0;
	         HEAP32[$child356$i>>2] = 0;
	         $87 = HEAP32[((154792 + 4|0))>>2]|0;
	         $shl361$i = 1 << $I315$0$i;
	         $and362$i = $87 & $shl361$i;
	         $tobool363$i = ($and362$i|0)==(0);
	         if ($tobool363$i) {
	          $or367$i = $87 | $shl361$i;
	          HEAP32[((154792 + 4|0))>>2] = $or367$i;
	          HEAP32[$arrayidx354$i>>2] = $add$ptr$i126;
	          $add$ptr$sum4$i = (($and144) + 24)|0;
	          $parent368$i = (($v$3$lcssa$i) + ($add$ptr$sum4$i)|0);
	          HEAP32[$parent368$i>>2] = $arrayidx354$i;
	          $add$ptr$sum5$i = (($and144) + 12)|0;
	          $bk369$i = (($v$3$lcssa$i) + ($add$ptr$sum5$i)|0);
	          HEAP32[$bk369$i>>2] = $add$ptr$i126;
	          $add$ptr$sum6$i = (($and144) + 8)|0;
	          $fd370$i = (($v$3$lcssa$i) + ($add$ptr$sum6$i)|0);
	          HEAP32[$fd370$i>>2] = $add$ptr$i126;
	          break;
	         }
	         $88 = HEAP32[$arrayidx354$i>>2]|0;
	         $cmp373$i = ($I315$0$i|0)==(31);
	         if ($cmp373$i) {
	          $cond382$i = 0;
	         } else {
	          $shr377$i = $I315$0$i >>> 1;
	          $sub380$i = (25 - ($shr377$i))|0;
	          $cond382$i = $sub380$i;
	         }
	         $head38520$i = (($88) + 4|0);
	         $89 = HEAP32[$head38520$i>>2]|0;
	         $and38621$i = $89 & -8;
	         $cmp38722$i = ($and38621$i|0)==($rsize$3$lcssa$i|0);
	         L225: do {
	          if ($cmp38722$i) {
	           $T$0$lcssa$i = $88;
	          } else {
	           $shl383$i = $rsize$3$lcssa$i << $cond382$i;
	           $K372$024$i = $shl383$i;$T$023$i = $88;
	           while(1) {
	            $shr390$i = $K372$024$i >>> 31;
	            $arrayidx393$i = ((($T$023$i) + ($shr390$i<<2)|0) + 16|0);
	            $90 = HEAP32[$arrayidx393$i>>2]|0;
	            $cmp395$i = ($90|0)==(0|0);
	            if ($cmp395$i) {
	             break;
	            }
	            $shl394$i = $K372$024$i << 1;
	            $head385$i = (($90) + 4|0);
	            $91 = HEAP32[$head385$i>>2]|0;
	            $and386$i = $91 & -8;
	            $cmp387$i = ($and386$i|0)==($rsize$3$lcssa$i|0);
	            if ($cmp387$i) {
	             $T$0$lcssa$i = $90;
	             break L225;
	            } else {
	             $K372$024$i = $shl394$i;$T$023$i = $90;
	            }
	           }
	           $92 = HEAP32[((154792 + 16|0))>>2]|0;
	           $cmp400$i = ($arrayidx393$i>>>0)<($92>>>0);
	           if ($cmp400$i) {
	            _abort();
	            // unreachable;
	           } else {
	            HEAP32[$arrayidx393$i>>2] = $add$ptr$i126;
	            $add$ptr$sum10$i = (($and144) + 24)|0;
	            $parent405$i = (($v$3$lcssa$i) + ($add$ptr$sum10$i)|0);
	            HEAP32[$parent405$i>>2] = $T$023$i;
	            $add$ptr$sum11$i = (($and144) + 12)|0;
	            $bk406$i = (($v$3$lcssa$i) + ($add$ptr$sum11$i)|0);
	            HEAP32[$bk406$i>>2] = $add$ptr$i126;
	            $add$ptr$sum12$i = (($and144) + 8)|0;
	            $fd407$i = (($v$3$lcssa$i) + ($add$ptr$sum12$i)|0);
	            HEAP32[$fd407$i>>2] = $add$ptr$i126;
	            break L204;
	           }
	          }
	         } while(0);
	         $fd412$i = (($T$0$lcssa$i) + 8|0);
	         $93 = HEAP32[$fd412$i>>2]|0;
	         $94 = HEAP32[((154792 + 16|0))>>2]|0;
	         $cmp414$i = ($T$0$lcssa$i>>>0)<($94>>>0);
	         if ($cmp414$i) {
	          _abort();
	          // unreachable;
	         }
	         $cmp418$i = ($93>>>0)<($94>>>0);
	         if ($cmp418$i) {
	          _abort();
	          // unreachable;
	         } else {
	          $bk425$i = (($93) + 12|0);
	          HEAP32[$bk425$i>>2] = $add$ptr$i126;
	          HEAP32[$fd412$i>>2] = $add$ptr$i126;
	          $add$ptr$sum7$i = (($and144) + 8)|0;
	          $fd427$i = (($v$3$lcssa$i) + ($add$ptr$sum7$i)|0);
	          HEAP32[$fd427$i>>2] = $93;
	          $add$ptr$sum8$i = (($and144) + 12)|0;
	          $bk428$i = (($v$3$lcssa$i) + ($add$ptr$sum8$i)|0);
	          HEAP32[$bk428$i>>2] = $T$0$lcssa$i;
	          $add$ptr$sum9$i = (($and144) + 24)|0;
	          $parent429$i = (($v$3$lcssa$i) + ($add$ptr$sum9$i)|0);
	          HEAP32[$parent429$i>>2] = 0;
	          break;
	         }
	        }
	       } while(0);
	       $add$ptr436$i = (($v$3$lcssa$i) + 8|0);
	       $mem$0 = $add$ptr436$i;
	       STACKTOP = sp;return ($mem$0|0);
	      } else {
	       $nb$0 = $and144;
	      }
	     }
	    }
	   }
	  }
	 } while(0);
	 $95 = HEAP32[((154792 + 8|0))>>2]|0;
	 $cmp155 = ($nb$0>>>0)>($95>>>0);
	 if (!($cmp155)) {
	  $sub159 = (($95) - ($nb$0))|0;
	  $96 = HEAP32[((154792 + 20|0))>>2]|0;
	  $cmp161 = ($sub159>>>0)>(15);
	  if ($cmp161) {
	   $add$ptr165 = (($96) + ($nb$0)|0);
	   HEAP32[((154792 + 20|0))>>2] = $add$ptr165;
	   HEAP32[((154792 + 8|0))>>2] = $sub159;
	   $or166 = $sub159 | 1;
	   $add$ptr165$sum = (($nb$0) + 4)|0;
	   $head167 = (($96) + ($add$ptr165$sum)|0);
	   HEAP32[$head167>>2] = $or166;
	   $add$ptr168 = (($96) + ($95)|0);
	   HEAP32[$add$ptr168>>2] = $sub159;
	   $or171 = $nb$0 | 3;
	   $head172 = (($96) + 4|0);
	   HEAP32[$head172>>2] = $or171;
	  } else {
	   HEAP32[((154792 + 8|0))>>2] = 0;
	   HEAP32[((154792 + 20|0))>>2] = 0;
	   $or175 = $95 | 3;
	   $head176 = (($96) + 4|0);
	   HEAP32[$head176>>2] = $or175;
	   $add$ptr177$sum = (($95) + 4)|0;
	   $head178 = (($96) + ($add$ptr177$sum)|0);
	   $97 = HEAP32[$head178>>2]|0;
	   $or179 = $97 | 1;
	   HEAP32[$head178>>2] = $or179;
	  }
	  $add$ptr181 = (($96) + 8|0);
	  $mem$0 = $add$ptr181;
	  STACKTOP = sp;return ($mem$0|0);
	 }
	 $98 = HEAP32[((154792 + 12|0))>>2]|0;
	 $cmp183 = ($nb$0>>>0)<($98>>>0);
	 if ($cmp183) {
	  $sub187 = (($98) - ($nb$0))|0;
	  HEAP32[((154792 + 12|0))>>2] = $sub187;
	  $99 = HEAP32[((154792 + 24|0))>>2]|0;
	  $add$ptr190 = (($99) + ($nb$0)|0);
	  HEAP32[((154792 + 24|0))>>2] = $add$ptr190;
	  $or191 = $sub187 | 1;
	  $add$ptr190$sum = (($nb$0) + 4)|0;
	  $head192 = (($99) + ($add$ptr190$sum)|0);
	  HEAP32[$head192>>2] = $or191;
	  $or194 = $nb$0 | 3;
	  $head195 = (($99) + 4|0);
	  HEAP32[$head195>>2] = $or194;
	  $add$ptr196 = (($99) + 8|0);
	  $mem$0 = $add$ptr196;
	  STACKTOP = sp;return ($mem$0|0);
	 }
	 $100 = HEAP32[155264>>2]|0;
	 $cmp$i146 = ($100|0)==(0);
	 do {
	  if ($cmp$i146) {
	   $call$i$i = (_sysconf(30)|0);
	   $sub$i$i = (($call$i$i) + -1)|0;
	   $and$i$i = $sub$i$i & $call$i$i;
	   $cmp1$i$i = ($and$i$i|0)==(0);
	   if ($cmp1$i$i) {
	    HEAP32[((155264 + 8|0))>>2] = $call$i$i;
	    HEAP32[((155264 + 4|0))>>2] = $call$i$i;
	    HEAP32[((155264 + 12|0))>>2] = -1;
	    HEAP32[((155264 + 16|0))>>2] = -1;
	    HEAP32[((155264 + 20|0))>>2] = 0;
	    HEAP32[((154792 + 444|0))>>2] = 0;
	    $call6$i$i = (_time((0|0))|0);
	    $xor$i$i = $call6$i$i & -16;
	    $and7$i$i = $xor$i$i ^ 1431655768;
	    HEAP32[155264>>2] = $and7$i$i;
	    break;
	   } else {
	    _abort();
	    // unreachable;
	   }
	  }
	 } while(0);
	 $add$i147 = (($nb$0) + 48)|0;
	 $101 = HEAP32[((155264 + 8|0))>>2]|0;
	 $sub$i148 = (($nb$0) + 47)|0;
	 $add9$i = (($101) + ($sub$i148))|0;
	 $neg$i149 = (0 - ($101))|0;
	 $and11$i = $add9$i & $neg$i149;
	 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
	 if (!($cmp12$i)) {
	  $mem$0 = 0;
	  STACKTOP = sp;return ($mem$0|0);
	 }
	 $102 = HEAP32[((154792 + 440|0))>>2]|0;
	 $cmp15$i = ($102|0)==(0);
	 if (!($cmp15$i)) {
	  $103 = HEAP32[((154792 + 432|0))>>2]|0;
	  $add17$i150 = (($103) + ($and11$i))|0;
	  $cmp19$i = ($add17$i150>>>0)<=($103>>>0);
	  $cmp21$i = ($add17$i150>>>0)>($102>>>0);
	  $or$cond1$i = $cmp19$i | $cmp21$i;
	  if ($or$cond1$i) {
	   $mem$0 = 0;
	   STACKTOP = sp;return ($mem$0|0);
	  }
	 }
	 $104 = HEAP32[((154792 + 444|0))>>2]|0;
	 $and26$i = $104 & 4;
	 $tobool27$i = ($and26$i|0)==(0);
	 L269: do {
	  if ($tobool27$i) {
	   $105 = HEAP32[((154792 + 24|0))>>2]|0;
	   $cmp29$i = ($105|0)==(0|0);
	   L271: do {
	    if ($cmp29$i) {
	     label = 182;
	    } else {
	     $sp$0$i$i = ((154792 + 448|0));
	     while(1) {
	      $106 = HEAP32[$sp$0$i$i>>2]|0;
	      $cmp$i9$i = ($106>>>0)>($105>>>0);
	      if (!($cmp$i9$i)) {
	       $size$i$i = (($sp$0$i$i) + 4|0);
	       $107 = HEAP32[$size$i$i>>2]|0;
	       $add$ptr$i$i = (($106) + ($107)|0);
	       $cmp2$i$i = ($add$ptr$i$i>>>0)>($105>>>0);
	       if ($cmp2$i$i) {
	        break;
	       }
	      }
	      $next$i$i = (($sp$0$i$i) + 8|0);
	      $108 = HEAP32[$next$i$i>>2]|0;
	      $cmp3$i$i = ($108|0)==(0|0);
	      if ($cmp3$i$i) {
	       label = 182;
	       break L271;
	      } else {
	       $sp$0$i$i = $108;
	      }
	     }
	     $cmp32$i152 = ($sp$0$i$i|0)==(0|0);
	     if ($cmp32$i152) {
	      label = 182;
	     } else {
	      $113 = HEAP32[((154792 + 12|0))>>2]|0;
	      $add74$i = (($add9$i) - ($113))|0;
	      $and77$i = $add74$i & $neg$i149;
	      $cmp78$i = ($and77$i>>>0)<(2147483647);
	      if ($cmp78$i) {
	       $call80$i = (_sbrk(($and77$i|0))|0);
	       $114 = HEAP32[$sp$0$i$i>>2]|0;
	       $115 = HEAP32[$size$i$i>>2]|0;
	       $add$ptr$i160 = (($114) + ($115)|0);
	       $cmp82$i = ($call80$i|0)==($add$ptr$i160|0);
	       $and77$$i = $cmp82$i ? $and77$i : 0;
	       $call80$$i = $cmp82$i ? $call80$i : (-1);
	       $br$0$i = $call80$i;$ssize$1$i = $and77$i;$tbase$0$i = $call80$$i;$tsize$0$i = $and77$$i;
	       label = 191;
	      } else {
	       $tsize$0748284$i = 0;
	      }
	     }
	    }
	   } while(0);
	   do {
	    if ((label|0) == 182) {
	     $call34$i = (_sbrk(0)|0);
	     $cmp35$i154 = ($call34$i|0)==((-1)|0);
	     if ($cmp35$i154) {
	      $tsize$0748284$i = 0;
	     } else {
	      $109 = $call34$i;
	      $110 = HEAP32[((155264 + 4|0))>>2]|0;
	      $sub38$i = (($110) + -1)|0;
	      $and39$i = $sub38$i & $109;
	      $cmp40$i155 = ($and39$i|0)==(0);
	      if ($cmp40$i155) {
	       $ssize$0$i = $and11$i;
	      } else {
	       $add43$i = (($sub38$i) + ($109))|0;
	       $neg45$i = (0 - ($110))|0;
	       $and46$i = $add43$i & $neg45$i;
	       $sub47$i = (($and11$i) - ($109))|0;
	       $add48$i = (($sub47$i) + ($and46$i))|0;
	       $ssize$0$i = $add48$i;
	      }
	      $111 = HEAP32[((154792 + 432|0))>>2]|0;
	      $add51$i = (($111) + ($ssize$0$i))|0;
	      $cmp52$i = ($ssize$0$i>>>0)>($nb$0>>>0);
	      $cmp54$i156 = ($ssize$0$i>>>0)<(2147483647);
	      $or$cond$i157 = $cmp52$i & $cmp54$i156;
	      if ($or$cond$i157) {
	       $112 = HEAP32[((154792 + 440|0))>>2]|0;
	       $cmp57$i = ($112|0)==(0);
	       if (!($cmp57$i)) {
	        $cmp60$i = ($add51$i>>>0)<=($111>>>0);
	        $cmp63$i = ($add51$i>>>0)>($112>>>0);
	        $or$cond2$i = $cmp60$i | $cmp63$i;
	        if ($or$cond2$i) {
	         $tsize$0748284$i = 0;
	         break;
	        }
	       }
	       $call65$i = (_sbrk(($ssize$0$i|0))|0);
	       $cmp66$i158 = ($call65$i|0)==($call34$i|0);
	       $ssize$0$$i = $cmp66$i158 ? $ssize$0$i : 0;
	       $call34$$i = $cmp66$i158 ? $call34$i : (-1);
	       $br$0$i = $call65$i;$ssize$1$i = $ssize$0$i;$tbase$0$i = $call34$$i;$tsize$0$i = $ssize$0$$i;
	       label = 191;
	      } else {
	       $tsize$0748284$i = 0;
	      }
	     }
	    }
	   } while(0);
	   L291: do {
	    if ((label|0) == 191) {
	     $sub109$i = (0 - ($ssize$1$i))|0;
	     $cmp86$i = ($tbase$0$i|0)==((-1)|0);
	     if (!($cmp86$i)) {
	      $tbase$291$i = $tbase$0$i;$tsize$290$i = $tsize$0$i;
	      label = 202;
	      break L269;
	     }
	     $cmp88$i = ($br$0$i|0)!=((-1)|0);
	     $cmp90$i161 = ($ssize$1$i>>>0)<(2147483647);
	     $or$cond3$i = $cmp88$i & $cmp90$i161;
	     $cmp93$i = ($ssize$1$i>>>0)<($add$i147>>>0);
	     $or$cond4$i = $or$cond3$i & $cmp93$i;
	     do {
	      if ($or$cond4$i) {
	       $116 = HEAP32[((155264 + 8|0))>>2]|0;
	       $sub96$i = (($sub$i148) - ($ssize$1$i))|0;
	       $add98$i = (($sub96$i) + ($116))|0;
	       $neg100$i = (0 - ($116))|0;
	       $and101$i = $add98$i & $neg100$i;
	       $cmp102$i = ($and101$i>>>0)<(2147483647);
	       if ($cmp102$i) {
	        $call104$i = (_sbrk(($and101$i|0))|0);
	        $cmp105$i = ($call104$i|0)==((-1)|0);
	        if ($cmp105$i) {
	         (_sbrk(($sub109$i|0))|0);
	         $tsize$0748284$i = $tsize$0$i;
	         break L291;
	        } else {
	         $add107$i = (($and101$i) + ($ssize$1$i))|0;
	         $ssize$2$i = $add107$i;
	         break;
	        }
	       } else {
	        $ssize$2$i = $ssize$1$i;
	       }
	      } else {
	       $ssize$2$i = $ssize$1$i;
	      }
	     } while(0);
	     $cmp115$i162 = ($br$0$i|0)==((-1)|0);
	     if ($cmp115$i162) {
	      $tsize$0748284$i = $tsize$0$i;
	     } else {
	      $tbase$291$i = $br$0$i;$tsize$290$i = $ssize$2$i;
	      label = 202;
	      break L269;
	     }
	    }
	   } while(0);
	   $117 = HEAP32[((154792 + 444|0))>>2]|0;
	   $or$i163 = $117 | 4;
	   HEAP32[((154792 + 444|0))>>2] = $or$i163;
	   $tsize$1$i = $tsize$0748284$i;
	   label = 199;
	  } else {
	   $tsize$1$i = 0;
	   label = 199;
	  }
	 } while(0);
	 if ((label|0) == 199) {
	  $cmp124$i = ($and11$i>>>0)<(2147483647);
	  if ($cmp124$i) {
	   $call128$i = (_sbrk(($and11$i|0))|0);
	   $call129$i = (_sbrk(0)|0);
	   $notlhs$i = ($call128$i|0)!=((-1)|0);
	   $notrhs$i = ($call129$i|0)!=((-1)|0);
	   $or$cond6$not$i = $notrhs$i & $notlhs$i;
	   $cmp134$i = ($call128$i>>>0)<($call129$i>>>0);
	   $or$cond7$i = $or$cond6$not$i & $cmp134$i;
	   if ($or$cond7$i) {
	    $sub$ptr$lhs$cast$i = $call129$i;
	    $sub$ptr$rhs$cast$i = $call128$i;
	    $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	    $add137$i = (($nb$0) + 40)|0;
	    $cmp138$i164 = ($sub$ptr$sub$i>>>0)>($add137$i>>>0);
	    $sub$ptr$sub$tsize$1$i = $cmp138$i164 ? $sub$ptr$sub$i : $tsize$1$i;
	    if ($cmp138$i164) {
	     $tbase$291$i = $call128$i;$tsize$290$i = $sub$ptr$sub$tsize$1$i;
	     label = 202;
	    }
	   }
	  }
	 }
	 if ((label|0) == 202) {
	  $118 = HEAP32[((154792 + 432|0))>>2]|0;
	  $add147$i = (($118) + ($tsize$290$i))|0;
	  HEAP32[((154792 + 432|0))>>2] = $add147$i;
	  $119 = HEAP32[((154792 + 436|0))>>2]|0;
	  $cmp148$i = ($add147$i>>>0)>($119>>>0);
	  if ($cmp148$i) {
	   HEAP32[((154792 + 436|0))>>2] = $add147$i;
	  }
	  $120 = HEAP32[((154792 + 24|0))>>2]|0;
	  $cmp154$i = ($120|0)==(0|0);
	  L311: do {
	   if ($cmp154$i) {
	    $121 = HEAP32[((154792 + 16|0))>>2]|0;
	    $cmp156$i = ($121|0)==(0|0);
	    $cmp159$i166 = ($tbase$291$i>>>0)<($121>>>0);
	    $or$cond8$i = $cmp156$i | $cmp159$i166;
	    if ($or$cond8$i) {
	     HEAP32[((154792 + 16|0))>>2] = $tbase$291$i;
	    }
	    HEAP32[((154792 + 448|0))>>2] = $tbase$291$i;
	    HEAP32[((154792 + 452|0))>>2] = $tsize$290$i;
	    HEAP32[((154792 + 460|0))>>2] = 0;
	    $122 = HEAP32[155264>>2]|0;
	    HEAP32[((154792 + 36|0))>>2] = $122;
	    HEAP32[((154792 + 32|0))>>2] = -1;
	    $i$02$i$i = 0;
	    while(1) {
	     $shl$i$i = $i$02$i$i << 1;
	     $arrayidx$i$i = ((154792 + ($shl$i$i<<2)|0) + 40|0);
	     $arrayidx$sum$i$i = (($shl$i$i) + 3)|0;
	     $123 = ((154792 + ($arrayidx$sum$i$i<<2)|0) + 40|0);
	     HEAP32[$123>>2] = $arrayidx$i$i;
	     $arrayidx$sum1$i$i = (($shl$i$i) + 2)|0;
	     $124 = ((154792 + ($arrayidx$sum1$i$i<<2)|0) + 40|0);
	     HEAP32[$124>>2] = $arrayidx$i$i;
	     $inc$i$i = (($i$02$i$i) + 1)|0;
	     $exitcond$i$i = ($inc$i$i|0)==(32);
	     if ($exitcond$i$i) {
	      break;
	     } else {
	      $i$02$i$i = $inc$i$i;
	     }
	    }
	    $sub169$i = (($tsize$290$i) + -40)|0;
	    $add$ptr$i11$i = (($tbase$291$i) + 8|0);
	    $125 = $add$ptr$i11$i;
	    $and$i12$i = $125 & 7;
	    $cmp$i13$i = ($and$i12$i|0)==(0);
	    if ($cmp$i13$i) {
	     $cond$i$i = 0;
	    } else {
	     $126 = (0 - ($125))|0;
	     $and3$i$i = $126 & 7;
	     $cond$i$i = $and3$i$i;
	    }
	    $add$ptr4$i$i = (($tbase$291$i) + ($cond$i$i)|0);
	    $sub5$i$i = (($sub169$i) - ($cond$i$i))|0;
	    HEAP32[((154792 + 24|0))>>2] = $add$ptr4$i$i;
	    HEAP32[((154792 + 12|0))>>2] = $sub5$i$i;
	    $or$i$i = $sub5$i$i | 1;
	    $add$ptr4$sum$i$i = (($cond$i$i) + 4)|0;
	    $head$i$i = (($tbase$291$i) + ($add$ptr4$sum$i$i)|0);
	    HEAP32[$head$i$i>>2] = $or$i$i;
	    $add$ptr6$sum$i$i = (($tsize$290$i) + -36)|0;
	    $head7$i$i = (($tbase$291$i) + ($add$ptr6$sum$i$i)|0);
	    HEAP32[$head7$i$i>>2] = 40;
	    $127 = HEAP32[((155264 + 16|0))>>2]|0;
	    HEAP32[((154792 + 28|0))>>2] = $127;
	   } else {
	    $sp$0109$i = ((154792 + 448|0));
	    while(1) {
	     $128 = HEAP32[$sp$0109$i>>2]|0;
	     $size185$i = (($sp$0109$i) + 4|0);
	     $129 = HEAP32[$size185$i>>2]|0;
	     $add$ptr186$i = (($128) + ($129)|0);
	     $cmp187$i = ($tbase$291$i|0)==($add$ptr186$i|0);
	     if ($cmp187$i) {
	      label = 214;
	      break;
	     }
	     $next$i = (($sp$0109$i) + 8|0);
	     $130 = HEAP32[$next$i>>2]|0;
	     $cmp183$i = ($130|0)==(0|0);
	     if ($cmp183$i) {
	      break;
	     } else {
	      $sp$0109$i = $130;
	     }
	    }
	    if ((label|0) == 214) {
	     $sflags190$i = (($sp$0109$i) + 12|0);
	     $131 = HEAP32[$sflags190$i>>2]|0;
	     $and191$i = $131 & 8;
	     $tobool192$i = ($and191$i|0)==(0);
	     if ($tobool192$i) {
	      $cmp200$i = ($120>>>0)>=($128>>>0);
	      $cmp206$i = ($120>>>0)<($tbase$291$i>>>0);
	      $or$cond93$i = $cmp200$i & $cmp206$i;
	      if ($or$cond93$i) {
	       $add209$i = (($129) + ($tsize$290$i))|0;
	       HEAP32[$size185$i>>2] = $add209$i;
	       $132 = HEAP32[((154792 + 12|0))>>2]|0;
	       $add212$i = (($132) + ($tsize$290$i))|0;
	       $add$ptr$i22$i = (($120) + 8|0);
	       $133 = $add$ptr$i22$i;
	       $and$i23$i = $133 & 7;
	       $cmp$i24$i = ($and$i23$i|0)==(0);
	       if ($cmp$i24$i) {
	        $cond$i27$i = 0;
	       } else {
	        $134 = (0 - ($133))|0;
	        $and3$i25$i = $134 & 7;
	        $cond$i27$i = $and3$i25$i;
	       }
	       $add$ptr4$i28$i = (($120) + ($cond$i27$i)|0);
	       $sub5$i29$i = (($add212$i) - ($cond$i27$i))|0;
	       HEAP32[((154792 + 24|0))>>2] = $add$ptr4$i28$i;
	       HEAP32[((154792 + 12|0))>>2] = $sub5$i29$i;
	       $or$i30$i = $sub5$i29$i | 1;
	       $add$ptr4$sum$i31$i = (($cond$i27$i) + 4)|0;
	       $head$i32$i = (($120) + ($add$ptr4$sum$i31$i)|0);
	       HEAP32[$head$i32$i>>2] = $or$i30$i;
	       $add$ptr6$sum$i33$i = (($add212$i) + 4)|0;
	       $head7$i34$i = (($120) + ($add$ptr6$sum$i33$i)|0);
	       HEAP32[$head7$i34$i>>2] = 40;
	       $135 = HEAP32[((155264 + 16|0))>>2]|0;
	       HEAP32[((154792 + 28|0))>>2] = $135;
	       break;
	      }
	     }
	    }
	    $136 = HEAP32[((154792 + 16|0))>>2]|0;
	    $cmp215$i = ($tbase$291$i>>>0)<($136>>>0);
	    if ($cmp215$i) {
	     HEAP32[((154792 + 16|0))>>2] = $tbase$291$i;
	    }
	    $add$ptr224$i = (($tbase$291$i) + ($tsize$290$i)|0);
	    $sp$1105$i = ((154792 + 448|0));
	    while(1) {
	     $137 = HEAP32[$sp$1105$i>>2]|0;
	     $cmp225$i = ($137|0)==($add$ptr224$i|0);
	     if ($cmp225$i) {
	      label = 224;
	      break;
	     }
	     $next228$i = (($sp$1105$i) + 8|0);
	     $138 = HEAP32[$next228$i>>2]|0;
	     $cmp221$i = ($138|0)==(0|0);
	     if ($cmp221$i) {
	      break;
	     } else {
	      $sp$1105$i = $138;
	     }
	    }
	    if ((label|0) == 224) {
	     $sflags232$i = (($sp$1105$i) + 12|0);
	     $139 = HEAP32[$sflags232$i>>2]|0;
	     $and233$i = $139 & 8;
	     $tobool234$i = ($and233$i|0)==(0);
	     if ($tobool234$i) {
	      HEAP32[$sp$1105$i>>2] = $tbase$291$i;
	      $size242$i = (($sp$1105$i) + 4|0);
	      $140 = HEAP32[$size242$i>>2]|0;
	      $add243$i = (($140) + ($tsize$290$i))|0;
	      HEAP32[$size242$i>>2] = $add243$i;
	      $add$ptr$i37$i = (($tbase$291$i) + 8|0);
	      $141 = $add$ptr$i37$i;
	      $and$i38$i = $141 & 7;
	      $cmp$i39$i = ($and$i38$i|0)==(0);
	      if ($cmp$i39$i) {
	       $cond$i42$i = 0;
	      } else {
	       $142 = (0 - ($141))|0;
	       $and3$i40$i = $142 & 7;
	       $cond$i42$i = $and3$i40$i;
	      }
	      $add$ptr4$i43$i = (($tbase$291$i) + ($cond$i42$i)|0);
	      $add$ptr224$sum$i = (($tsize$290$i) + 8)|0;
	      $add$ptr5$i$i = (($tbase$291$i) + ($add$ptr224$sum$i)|0);
	      $143 = $add$ptr5$i$i;
	      $and6$i44$i = $143 & 7;
	      $cmp7$i$i = ($and6$i44$i|0)==(0);
	      if ($cmp7$i$i) {
	       $cond15$i$i = 0;
	      } else {
	       $144 = (0 - ($143))|0;
	       $and13$i$i = $144 & 7;
	       $cond15$i$i = $and13$i$i;
	      }
	      $add$ptr224$sum131$i = (($cond15$i$i) + ($tsize$290$i))|0;
	      $add$ptr16$i$i = (($tbase$291$i) + ($add$ptr224$sum131$i)|0);
	      $sub$ptr$lhs$cast$i46$i = $add$ptr16$i$i;
	      $sub$ptr$rhs$cast$i47$i = $add$ptr4$i43$i;
	      $sub$ptr$sub$i48$i = (($sub$ptr$lhs$cast$i46$i) - ($sub$ptr$rhs$cast$i47$i))|0;
	      $add$ptr4$sum$i49$i = (($cond$i42$i) + ($nb$0))|0;
	      $add$ptr17$i$i = (($tbase$291$i) + ($add$ptr4$sum$i49$i)|0);
	      $sub18$i$i = (($sub$ptr$sub$i48$i) - ($nb$0))|0;
	      $or19$i$i = $nb$0 | 3;
	      $add$ptr4$sum1$i$i = (($cond$i42$i) + 4)|0;
	      $head$i50$i = (($tbase$291$i) + ($add$ptr4$sum1$i$i)|0);
	      HEAP32[$head$i50$i>>2] = $or19$i$i;
	      $145 = HEAP32[((154792 + 24|0))>>2]|0;
	      $cmp20$i$i = ($add$ptr16$i$i|0)==($145|0);
	      L348: do {
	       if ($cmp20$i$i) {
	        $146 = HEAP32[((154792 + 12|0))>>2]|0;
	        $add$i$i = (($146) + ($sub18$i$i))|0;
	        HEAP32[((154792 + 12|0))>>2] = $add$i$i;
	        HEAP32[((154792 + 24|0))>>2] = $add$ptr17$i$i;
	        $or22$i$i = $add$i$i | 1;
	        $add$ptr17$sum35$i$i = (($add$ptr4$sum$i49$i) + 4)|0;
	        $head23$i$i = (($tbase$291$i) + ($add$ptr17$sum35$i$i)|0);
	        HEAP32[$head23$i$i>>2] = $or22$i$i;
	       } else {
	        $147 = HEAP32[((154792 + 20|0))>>2]|0;
	        $cmp24$i$i = ($add$ptr16$i$i|0)==($147|0);
	        if ($cmp24$i$i) {
	         $148 = HEAP32[((154792 + 8|0))>>2]|0;
	         $add26$i$i = (($148) + ($sub18$i$i))|0;
	         HEAP32[((154792 + 8|0))>>2] = $add26$i$i;
	         HEAP32[((154792 + 20|0))>>2] = $add$ptr17$i$i;
	         $or28$i$i = $add26$i$i | 1;
	         $add$ptr17$sum33$i$i = (($add$ptr4$sum$i49$i) + 4)|0;
	         $head29$i$i = (($tbase$291$i) + ($add$ptr17$sum33$i$i)|0);
	         HEAP32[$head29$i$i>>2] = $or28$i$i;
	         $add$ptr17$sum34$i$i = (($add26$i$i) + ($add$ptr4$sum$i49$i))|0;
	         $add$ptr30$i52$i = (($tbase$291$i) + ($add$ptr17$sum34$i$i)|0);
	         HEAP32[$add$ptr30$i52$i>>2] = $add26$i$i;
	         break;
	        }
	        $add$ptr16$sum$i$i = (($tsize$290$i) + 4)|0;
	        $add$ptr224$sum132$i = (($add$ptr16$sum$i$i) + ($cond15$i$i))|0;
	        $head32$i$i = (($tbase$291$i) + ($add$ptr224$sum132$i)|0);
	        $149 = HEAP32[$head32$i$i>>2]|0;
	        $and33$i$i = $149 & 3;
	        $cmp34$i$i = ($and33$i$i|0)==(1);
	        if ($cmp34$i$i) {
	         $and37$i$i = $149 & -8;
	         $shr$i54$i = $149 >>> 3;
	         $cmp38$i$i = ($149>>>0)<(256);
	         L356: do {
	          if ($cmp38$i$i) {
	           $add$ptr16$sum3031$i$i = $cond15$i$i | 8;
	           $add$ptr224$sum142$i = (($add$ptr16$sum3031$i$i) + ($tsize$290$i))|0;
	           $fd$i$i = (($tbase$291$i) + ($add$ptr224$sum142$i)|0);
	           $150 = HEAP32[$fd$i$i>>2]|0;
	           $add$ptr16$sum32$i$i = (($tsize$290$i) + 12)|0;
	           $add$ptr224$sum143$i = (($add$ptr16$sum32$i$i) + ($cond15$i$i))|0;
	           $bk$i55$i = (($tbase$291$i) + ($add$ptr224$sum143$i)|0);
	           $151 = HEAP32[$bk$i55$i>>2]|0;
	           $shl$i56$i = $shr$i54$i << 1;
	           $arrayidx$i57$i = ((154792 + ($shl$i56$i<<2)|0) + 40|0);
	           $cmp41$i$i = ($150|0)==($arrayidx$i57$i|0);
	           do {
	            if (!($cmp41$i$i)) {
	             $152 = HEAP32[((154792 + 16|0))>>2]|0;
	             $cmp42$i$i = ($150>>>0)<($152>>>0);
	             if ($cmp42$i$i) {
	              _abort();
	              // unreachable;
	             }
	             $bk43$i$i = (($150) + 12|0);
	             $153 = HEAP32[$bk43$i$i>>2]|0;
	             $cmp44$i$i = ($153|0)==($add$ptr16$i$i|0);
	             if ($cmp44$i$i) {
	              break;
	             }
	             _abort();
	             // unreachable;
	            }
	           } while(0);
	           $cmp46$i59$i = ($151|0)==($150|0);
	           if ($cmp46$i59$i) {
	            $shl48$i$i = 1 << $shr$i54$i;
	            $neg$i$i = $shl48$i$i ^ -1;
	            $154 = HEAP32[154792>>2]|0;
	            $and49$i$i = $154 & $neg$i$i;
	            HEAP32[154792>>2] = $and49$i$i;
	            break;
	           }
	           $cmp54$i$i = ($151|0)==($arrayidx$i57$i|0);
	           do {
	            if ($cmp54$i$i) {
	             $fd68$pre$i$i = (($151) + 8|0);
	             $fd68$pre$phi$i$iZ2D = $fd68$pre$i$i;
	            } else {
	             $155 = HEAP32[((154792 + 16|0))>>2]|0;
	             $cmp57$i$i = ($151>>>0)<($155>>>0);
	             if ($cmp57$i$i) {
	              _abort();
	              // unreachable;
	             }
	             $fd59$i$i = (($151) + 8|0);
	             $156 = HEAP32[$fd59$i$i>>2]|0;
	             $cmp60$i$i = ($156|0)==($add$ptr16$i$i|0);
	             if ($cmp60$i$i) {
	              $fd68$pre$phi$i$iZ2D = $fd59$i$i;
	              break;
	             }
	             _abort();
	             // unreachable;
	            }
	           } while(0);
	           $bk67$i$i = (($150) + 12|0);
	           HEAP32[$bk67$i$i>>2] = $151;
	           HEAP32[$fd68$pre$phi$i$iZ2D>>2] = $150;
	          } else {
	           $add$ptr16$sum23$i$i = $cond15$i$i | 24;
	           $add$ptr224$sum133$i = (($add$ptr16$sum23$i$i) + ($tsize$290$i))|0;
	           $parent$i61$i = (($tbase$291$i) + ($add$ptr224$sum133$i)|0);
	           $157 = HEAP32[$parent$i61$i>>2]|0;
	           $add$ptr16$sum4$i$i = (($tsize$290$i) + 12)|0;
	           $add$ptr224$sum134$i = (($add$ptr16$sum4$i$i) + ($cond15$i$i))|0;
	           $bk74$i$i = (($tbase$291$i) + ($add$ptr224$sum134$i)|0);
	           $158 = HEAP32[$bk74$i$i>>2]|0;
	           $cmp75$i$i = ($158|0)==($add$ptr16$i$i|0);
	           do {
	            if ($cmp75$i$i) {
	             $add$ptr16$sum56$i$i = $cond15$i$i | 16;
	             $add$ptr224$sum140$i = (($add$ptr16$sum$i$i) + ($add$ptr16$sum56$i$i))|0;
	             $arrayidx96$i$i = (($tbase$291$i) + ($add$ptr224$sum140$i)|0);
	             $163 = HEAP32[$arrayidx96$i$i>>2]|0;
	             $cmp97$i$i = ($163|0)==(0|0);
	             if ($cmp97$i$i) {
	              $add$ptr224$sum141$i = (($add$ptr16$sum56$i$i) + ($tsize$290$i))|0;
	              $child$i$i = (($tbase$291$i) + ($add$ptr224$sum141$i)|0);
	              $164 = HEAP32[$child$i$i>>2]|0;
	              $cmp100$i$i = ($164|0)==(0|0);
	              if ($cmp100$i$i) {
	               $R$1$i$i = 0;
	               break;
	              } else {
	               $R$0$i$i = $164;$RP$0$i$i = $child$i$i;
	              }
	             } else {
	              $R$0$i$i = $163;$RP$0$i$i = $arrayidx96$i$i;
	             }
	             while(1) {
	              $arrayidx103$i$i = (($R$0$i$i) + 20|0);
	              $165 = HEAP32[$arrayidx103$i$i>>2]|0;
	              $cmp104$i$i = ($165|0)==(0|0);
	              if (!($cmp104$i$i)) {
	               $R$0$i$i = $165;$RP$0$i$i = $arrayidx103$i$i;
	               continue;
	              }
	              $arrayidx107$i$i = (($R$0$i$i) + 16|0);
	              $166 = HEAP32[$arrayidx107$i$i>>2]|0;
	              $cmp108$i$i = ($166|0)==(0|0);
	              if ($cmp108$i$i) {
	               break;
	              } else {
	               $R$0$i$i = $166;$RP$0$i$i = $arrayidx107$i$i;
	              }
	             }
	             $167 = HEAP32[((154792 + 16|0))>>2]|0;
	             $cmp112$i$i = ($RP$0$i$i>>>0)<($167>>>0);
	             if ($cmp112$i$i) {
	              _abort();
	              // unreachable;
	             } else {
	              HEAP32[$RP$0$i$i>>2] = 0;
	              $R$1$i$i = $R$0$i$i;
	              break;
	             }
	            } else {
	             $add$ptr16$sum2829$i$i = $cond15$i$i | 8;
	             $add$ptr224$sum135$i = (($add$ptr16$sum2829$i$i) + ($tsize$290$i))|0;
	             $fd78$i$i = (($tbase$291$i) + ($add$ptr224$sum135$i)|0);
	             $159 = HEAP32[$fd78$i$i>>2]|0;
	             $160 = HEAP32[((154792 + 16|0))>>2]|0;
	             $cmp81$i$i = ($159>>>0)<($160>>>0);
	             if ($cmp81$i$i) {
	              _abort();
	              // unreachable;
	             }
	             $bk82$i$i = (($159) + 12|0);
	             $161 = HEAP32[$bk82$i$i>>2]|0;
	             $cmp83$i$i = ($161|0)==($add$ptr16$i$i|0);
	             if (!($cmp83$i$i)) {
	              _abort();
	              // unreachable;
	             }
	             $fd85$i$i = (($158) + 8|0);
	             $162 = HEAP32[$fd85$i$i>>2]|0;
	             $cmp86$i$i = ($162|0)==($add$ptr16$i$i|0);
	             if ($cmp86$i$i) {
	              HEAP32[$bk82$i$i>>2] = $158;
	              HEAP32[$fd85$i$i>>2] = $159;
	              $R$1$i$i = $158;
	              break;
	             } else {
	              _abort();
	              // unreachable;
	             }
	            }
	           } while(0);
	           $cmp120$i63$i = ($157|0)==(0|0);
	           if ($cmp120$i63$i) {
	            break;
	           }
	           $add$ptr16$sum25$i$i = (($tsize$290$i) + 28)|0;
	           $add$ptr224$sum136$i = (($add$ptr16$sum25$i$i) + ($cond15$i$i))|0;
	           $index$i64$i = (($tbase$291$i) + ($add$ptr224$sum136$i)|0);
	           $168 = HEAP32[$index$i64$i>>2]|0;
	           $arrayidx123$i$i = ((154792 + ($168<<2)|0) + 304|0);
	           $169 = HEAP32[$arrayidx123$i$i>>2]|0;
	           $cmp124$i$i = ($add$ptr16$i$i|0)==($169|0);
	           do {
	            if ($cmp124$i$i) {
	             HEAP32[$arrayidx123$i$i>>2] = $R$1$i$i;
	             $cond37$i$i = ($R$1$i$i|0)==(0|0);
	             if (!($cond37$i$i)) {
	              break;
	             }
	             $shl131$i$i = 1 << $168;
	             $neg132$i$i = $shl131$i$i ^ -1;
	             $170 = HEAP32[((154792 + 4|0))>>2]|0;
	             $and133$i$i = $170 & $neg132$i$i;
	             HEAP32[((154792 + 4|0))>>2] = $and133$i$i;
	             break L356;
	            } else {
	             $171 = HEAP32[((154792 + 16|0))>>2]|0;
	             $cmp137$i$i = ($157>>>0)<($171>>>0);
	             if ($cmp137$i$i) {
	              _abort();
	              // unreachable;
	             }
	             $arrayidx143$i$i = (($157) + 16|0);
	             $172 = HEAP32[$arrayidx143$i$i>>2]|0;
	             $cmp144$i$i = ($172|0)==($add$ptr16$i$i|0);
	             if ($cmp144$i$i) {
	              HEAP32[$arrayidx143$i$i>>2] = $R$1$i$i;
	             } else {
	              $arrayidx151$i$i = (($157) + 20|0);
	              HEAP32[$arrayidx151$i$i>>2] = $R$1$i$i;
	             }
	             $cmp156$i$i = ($R$1$i$i|0)==(0|0);
	             if ($cmp156$i$i) {
	              break L356;
	             }
	            }
	           } while(0);
	           $173 = HEAP32[((154792 + 16|0))>>2]|0;
	           $cmp160$i$i = ($R$1$i$i>>>0)<($173>>>0);
	           if ($cmp160$i$i) {
	            _abort();
	            // unreachable;
	           }
	           $parent165$i$i = (($R$1$i$i) + 24|0);
	           HEAP32[$parent165$i$i>>2] = $157;
	           $add$ptr16$sum2627$i$i = $cond15$i$i | 16;
	           $add$ptr224$sum137$i = (($add$ptr16$sum2627$i$i) + ($tsize$290$i))|0;
	           $child166$i$i = (($tbase$291$i) + ($add$ptr224$sum137$i)|0);
	           $174 = HEAP32[$child166$i$i>>2]|0;
	           $cmp168$i$i = ($174|0)==(0|0);
	           do {
	            if (!($cmp168$i$i)) {
	             $175 = HEAP32[((154792 + 16|0))>>2]|0;
	             $cmp172$i$i = ($174>>>0)<($175>>>0);
	             if ($cmp172$i$i) {
	              _abort();
	              // unreachable;
	             } else {
	              $arrayidx178$i$i = (($R$1$i$i) + 16|0);
	              HEAP32[$arrayidx178$i$i>>2] = $174;
	              $parent179$i$i = (($174) + 24|0);
	              HEAP32[$parent179$i$i>>2] = $R$1$i$i;
	              break;
	             }
	            }
	           } while(0);
	           $add$ptr224$sum138$i = (($add$ptr16$sum$i$i) + ($add$ptr16$sum2627$i$i))|0;
	           $arrayidx184$i$i = (($tbase$291$i) + ($add$ptr224$sum138$i)|0);
	           $176 = HEAP32[$arrayidx184$i$i>>2]|0;
	           $cmp185$i$i = ($176|0)==(0|0);
	           if ($cmp185$i$i) {
	            break;
	           }
	           $177 = HEAP32[((154792 + 16|0))>>2]|0;
	           $cmp189$i$i = ($176>>>0)<($177>>>0);
	           if ($cmp189$i$i) {
	            _abort();
	            // unreachable;
	           } else {
	            $arrayidx195$i$i = (($R$1$i$i) + 20|0);
	            HEAP32[$arrayidx195$i$i>>2] = $176;
	            $parent196$i$i = (($176) + 24|0);
	            HEAP32[$parent196$i$i>>2] = $R$1$i$i;
	            break;
	           }
	          }
	         } while(0);
	         $add$ptr16$sum7$i$i = $and37$i$i | $cond15$i$i;
	         $add$ptr224$sum139$i = (($add$ptr16$sum7$i$i) + ($tsize$290$i))|0;
	         $add$ptr205$i$i = (($tbase$291$i) + ($add$ptr224$sum139$i)|0);
	         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
	         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
	        } else {
	         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
	        }
	        $head208$i$i = (($oldfirst$0$i$i) + 4|0);
	        $178 = HEAP32[$head208$i$i>>2]|0;
	        $and209$i$i = $178 & -2;
	        HEAP32[$head208$i$i>>2] = $and209$i$i;
	        $or210$i$i = $qsize$0$i$i | 1;
	        $add$ptr17$sum$i$i = (($add$ptr4$sum$i49$i) + 4)|0;
	        $head211$i$i = (($tbase$291$i) + ($add$ptr17$sum$i$i)|0);
	        HEAP32[$head211$i$i>>2] = $or210$i$i;
	        $add$ptr17$sum8$i$i = (($qsize$0$i$i) + ($add$ptr4$sum$i49$i))|0;
	        $add$ptr212$i$i = (($tbase$291$i) + ($add$ptr17$sum8$i$i)|0);
	        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
	        $shr214$i$i = $qsize$0$i$i >>> 3;
	        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
	        if ($cmp215$i$i) {
	         $shl221$i$i = $shr214$i$i << 1;
	         $arrayidx223$i$i = ((154792 + ($shl221$i$i<<2)|0) + 40|0);
	         $179 = HEAP32[154792>>2]|0;
	         $shl226$i$i = 1 << $shr214$i$i;
	         $and227$i$i = $179 & $shl226$i$i;
	         $tobool228$i$i = ($and227$i$i|0)==(0);
	         do {
	          if ($tobool228$i$i) {
	           $or232$i$i = $179 | $shl226$i$i;
	           HEAP32[154792>>2] = $or232$i$i;
	           $arrayidx223$sum$pre$i$i = (($shl221$i$i) + 2)|0;
	           $$pre$i66$i = ((154792 + ($arrayidx223$sum$pre$i$i<<2)|0) + 40|0);
	           $$pre$phi$i67$iZ2D = $$pre$i66$i;$F224$0$i$i = $arrayidx223$i$i;
	          } else {
	           $arrayidx223$sum24$i$i = (($shl221$i$i) + 2)|0;
	           $180 = ((154792 + ($arrayidx223$sum24$i$i<<2)|0) + 40|0);
	           $181 = HEAP32[$180>>2]|0;
	           $182 = HEAP32[((154792 + 16|0))>>2]|0;
	           $cmp236$i$i = ($181>>>0)<($182>>>0);
	           if (!($cmp236$i$i)) {
	            $$pre$phi$i67$iZ2D = $180;$F224$0$i$i = $181;
	            break;
	           }
	           _abort();
	           // unreachable;
	          }
	         } while(0);
	         HEAP32[$$pre$phi$i67$iZ2D>>2] = $add$ptr17$i$i;
	         $bk246$i$i = (($F224$0$i$i) + 12|0);
	         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
	         $add$ptr17$sum22$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
	         $fd247$i$i = (($tbase$291$i) + ($add$ptr17$sum22$i$i)|0);
	         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
	         $add$ptr17$sum23$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
	         $bk248$i$i = (($tbase$291$i) + ($add$ptr17$sum23$i$i)|0);
	         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
	         break;
	        }
	        $shr253$i$i = $qsize$0$i$i >>> 8;
	        $cmp254$i$i = ($shr253$i$i|0)==(0);
	        do {
	         if ($cmp254$i$i) {
	          $I252$0$i$i = 0;
	         } else {
	          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
	          if ($cmp258$i$i) {
	           $I252$0$i$i = 31;
	           break;
	          }
	          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
	          $shr263$i$i = $sub262$i$i >>> 16;
	          $and264$i$i = $shr263$i$i & 8;
	          $shl265$i$i = $shr253$i$i << $and264$i$i;
	          $sub266$i$i = (($shl265$i$i) + 520192)|0;
	          $shr267$i$i = $sub266$i$i >>> 16;
	          $and268$i$i = $shr267$i$i & 4;
	          $add269$i$i = $and268$i$i | $and264$i$i;
	          $shl270$i$i = $shl265$i$i << $and268$i$i;
	          $sub271$i$i = (($shl270$i$i) + 245760)|0;
	          $shr272$i$i = $sub271$i$i >>> 16;
	          $and273$i$i = $shr272$i$i & 2;
	          $add274$i$i = $add269$i$i | $and273$i$i;
	          $sub275$i$i = (14 - ($add274$i$i))|0;
	          $shl276$i$i = $shl270$i$i << $and273$i$i;
	          $shr277$i$i = $shl276$i$i >>> 15;
	          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
	          $shl279$i$i = $add278$i$i << 1;
	          $add280$i$i = (($add278$i$i) + 7)|0;
	          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
	          $and282$i$i = $shr281$i$i & 1;
	          $add283$i$i = $and282$i$i | $shl279$i$i;
	          $I252$0$i$i = $add283$i$i;
	         }
	        } while(0);
	        $arrayidx287$i$i = ((154792 + ($I252$0$i$i<<2)|0) + 304|0);
	        $add$ptr17$sum9$i$i = (($add$ptr4$sum$i49$i) + 28)|0;
	        $index288$i$i = (($tbase$291$i) + ($add$ptr17$sum9$i$i)|0);
	        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
	        $add$ptr17$sum10$i$i = (($add$ptr4$sum$i49$i) + 16)|0;
	        $child289$i$i = (($tbase$291$i) + ($add$ptr17$sum10$i$i)|0);
	        $child289$sum$i$i = (($add$ptr4$sum$i49$i) + 20)|0;
	        $arrayidx290$i$i = (($tbase$291$i) + ($child289$sum$i$i)|0);
	        HEAP32[$arrayidx290$i$i>>2] = 0;
	        HEAP32[$child289$i$i>>2] = 0;
	        $183 = HEAP32[((154792 + 4|0))>>2]|0;
	        $shl294$i$i = 1 << $I252$0$i$i;
	        $and295$i$i = $183 & $shl294$i$i;
	        $tobool296$i$i = ($and295$i$i|0)==(0);
	        if ($tobool296$i$i) {
	         $or300$i$i = $183 | $shl294$i$i;
	         HEAP32[((154792 + 4|0))>>2] = $or300$i$i;
	         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
	         $add$ptr17$sum11$i$i = (($add$ptr4$sum$i49$i) + 24)|0;
	         $parent301$i$i = (($tbase$291$i) + ($add$ptr17$sum11$i$i)|0);
	         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
	         $add$ptr17$sum12$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
	         $bk302$i$i = (($tbase$291$i) + ($add$ptr17$sum12$i$i)|0);
	         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
	         $add$ptr17$sum13$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
	         $fd303$i$i = (($tbase$291$i) + ($add$ptr17$sum13$i$i)|0);
	         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
	         break;
	        }
	        $184 = HEAP32[$arrayidx287$i$i>>2]|0;
	        $cmp306$i$i = ($I252$0$i$i|0)==(31);
	        if ($cmp306$i$i) {
	         $cond315$i$i = 0;
	        } else {
	         $shr310$i$i = $I252$0$i$i >>> 1;
	         $sub313$i$i = (25 - ($shr310$i$i))|0;
	         $cond315$i$i = $sub313$i$i;
	        }
	        $head31739$i$i = (($184) + 4|0);
	        $185 = HEAP32[$head31739$i$i>>2]|0;
	        $and31840$i$i = $185 & -8;
	        $cmp31941$i$i = ($and31840$i$i|0)==($qsize$0$i$i|0);
	        L445: do {
	         if ($cmp31941$i$i) {
	          $T$0$lcssa$i69$i = $184;
	         } else {
	          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
	          $K305$043$i$i = $shl316$i$i;$T$042$i$i = $184;
	          while(1) {
	           $shr322$i$i = $K305$043$i$i >>> 31;
	           $arrayidx325$i$i = ((($T$042$i$i) + ($shr322$i$i<<2)|0) + 16|0);
	           $186 = HEAP32[$arrayidx325$i$i>>2]|0;
	           $cmp327$i$i = ($186|0)==(0|0);
	           if ($cmp327$i$i) {
	            break;
	           }
	           $shl326$i$i = $K305$043$i$i << 1;
	           $head317$i$i = (($186) + 4|0);
	           $187 = HEAP32[$head317$i$i>>2]|0;
	           $and318$i$i = $187 & -8;
	           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
	           if ($cmp319$i$i) {
	            $T$0$lcssa$i69$i = $186;
	            break L445;
	           } else {
	            $K305$043$i$i = $shl326$i$i;$T$042$i$i = $186;
	           }
	          }
	          $188 = HEAP32[((154792 + 16|0))>>2]|0;
	          $cmp332$i$i = ($arrayidx325$i$i>>>0)<($188>>>0);
	          if ($cmp332$i$i) {
	           _abort();
	           // unreachable;
	          } else {
	           HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
	           $add$ptr17$sum19$i$i = (($add$ptr4$sum$i49$i) + 24)|0;
	           $parent337$i$i = (($tbase$291$i) + ($add$ptr17$sum19$i$i)|0);
	           HEAP32[$parent337$i$i>>2] = $T$042$i$i;
	           $add$ptr17$sum20$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
	           $bk338$i$i = (($tbase$291$i) + ($add$ptr17$sum20$i$i)|0);
	           HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
	           $add$ptr17$sum21$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
	           $fd339$i$i = (($tbase$291$i) + ($add$ptr17$sum21$i$i)|0);
	           HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
	           break L348;
	          }
	         }
	        } while(0);
	        $fd344$i$i = (($T$0$lcssa$i69$i) + 8|0);
	        $189 = HEAP32[$fd344$i$i>>2]|0;
	        $190 = HEAP32[((154792 + 16|0))>>2]|0;
	        $cmp346$i$i = ($T$0$lcssa$i69$i>>>0)<($190>>>0);
	        if ($cmp346$i$i) {
	         _abort();
	         // unreachable;
	        }
	        $cmp350$i$i = ($189>>>0)<($190>>>0);
	        if ($cmp350$i$i) {
	         _abort();
	         // unreachable;
	        } else {
	         $bk357$i$i = (($189) + 12|0);
	         HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
	         HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
	         $add$ptr17$sum16$i$i = (($add$ptr4$sum$i49$i) + 8)|0;
	         $fd359$i$i = (($tbase$291$i) + ($add$ptr17$sum16$i$i)|0);
	         HEAP32[$fd359$i$i>>2] = $189;
	         $add$ptr17$sum17$i$i = (($add$ptr4$sum$i49$i) + 12)|0;
	         $bk360$i$i = (($tbase$291$i) + ($add$ptr17$sum17$i$i)|0);
	         HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i69$i;
	         $add$ptr17$sum18$i$i = (($add$ptr4$sum$i49$i) + 24)|0;
	         $parent361$i$i = (($tbase$291$i) + ($add$ptr17$sum18$i$i)|0);
	         HEAP32[$parent361$i$i>>2] = 0;
	         break;
	        }
	       }
	      } while(0);
	      $add$ptr4$sum1415$i$i = $cond$i42$i | 8;
	      $add$ptr368$i$i = (($tbase$291$i) + ($add$ptr4$sum1415$i$i)|0);
	      $mem$0 = $add$ptr368$i$i;
	      STACKTOP = sp;return ($mem$0|0);
	     }
	    }
	    $sp$0$i$i$i = ((154792 + 448|0));
	    while(1) {
	     $191 = HEAP32[$sp$0$i$i$i>>2]|0;
	     $cmp$i$i$i = ($191>>>0)>($120>>>0);
	     if (!($cmp$i$i$i)) {
	      $size$i$i$i = (($sp$0$i$i$i) + 4|0);
	      $192 = HEAP32[$size$i$i$i>>2]|0;
	      $add$ptr$i$i$i = (($191) + ($192)|0);
	      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($120>>>0);
	      if ($cmp2$i$i$i) {
	       break;
	      }
	     }
	     $next$i$i$i = (($sp$0$i$i$i) + 8|0);
	     $193 = HEAP32[$next$i$i$i>>2]|0;
	     $sp$0$i$i$i = $193;
	    }
	    $add$ptr$sum$i$i = (($192) + -47)|0;
	    $add$ptr2$sum$i$i = (($192) + -39)|0;
	    $add$ptr3$i$i = (($191) + ($add$ptr2$sum$i$i)|0);
	    $194 = $add$ptr3$i$i;
	    $and$i14$i = $194 & 7;
	    $cmp$i15$i = ($and$i14$i|0)==(0);
	    if ($cmp$i15$i) {
	     $cond$i17$i = 0;
	    } else {
	     $195 = (0 - ($194))|0;
	     $and6$i$i = $195 & 7;
	     $cond$i17$i = $and6$i$i;
	    }
	    $add$ptr2$sum1$i$i = (($add$ptr$sum$i$i) + ($cond$i17$i))|0;
	    $add$ptr7$i$i = (($191) + ($add$ptr2$sum1$i$i)|0);
	    $add$ptr82$i$i = (($120) + 16|0);
	    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr82$i$i>>>0);
	    $cond13$i$i = $cmp9$i$i ? $120 : $add$ptr7$i$i;
	    $add$ptr14$i$i = (($cond13$i$i) + 8|0);
	    $sub16$i$i = (($tsize$290$i) + -40)|0;
	    $add$ptr$i10$i$i = (($tbase$291$i) + 8|0);
	    $196 = $add$ptr$i10$i$i;
	    $and$i$i$i = $196 & 7;
	    $cmp$i11$i$i = ($and$i$i$i|0)==(0);
	    if ($cmp$i11$i$i) {
	     $cond$i$i$i = 0;
	    } else {
	     $197 = (0 - ($196))|0;
	     $and3$i$i$i = $197 & 7;
	     $cond$i$i$i = $and3$i$i$i;
	    }
	    $add$ptr4$i$i$i = (($tbase$291$i) + ($cond$i$i$i)|0);
	    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
	    HEAP32[((154792 + 24|0))>>2] = $add$ptr4$i$i$i;
	    HEAP32[((154792 + 12|0))>>2] = $sub5$i$i$i;
	    $or$i$i$i = $sub5$i$i$i | 1;
	    $add$ptr4$sum$i$i$i = (($cond$i$i$i) + 4)|0;
	    $head$i$i$i = (($tbase$291$i) + ($add$ptr4$sum$i$i$i)|0);
	    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
	    $add$ptr6$sum$i$i$i = (($tsize$290$i) + -36)|0;
	    $head7$i$i$i = (($tbase$291$i) + ($add$ptr6$sum$i$i$i)|0);
	    HEAP32[$head7$i$i$i>>2] = 40;
	    $198 = HEAP32[((155264 + 16|0))>>2]|0;
	    HEAP32[((154792 + 28|0))>>2] = $198;
	    $head$i18$i = (($cond13$i$i) + 4|0);
	    HEAP32[$head$i18$i>>2] = 27;
	    ;HEAP32[$add$ptr14$i$i+0>>2]=HEAP32[((154792 + 448|0))+0>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[((154792 + 448|0))+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[((154792 + 448|0))+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[((154792 + 448|0))+12>>2]|0;
	    HEAP32[((154792 + 448|0))>>2] = $tbase$291$i;
	    HEAP32[((154792 + 452|0))>>2] = $tsize$290$i;
	    HEAP32[((154792 + 460|0))>>2] = 0;
	    HEAP32[((154792 + 456|0))>>2] = $add$ptr14$i$i;
	    $add$ptr2418$i$i = (($cond13$i$i) + 28|0);
	    HEAP32[$add$ptr2418$i$i>>2] = 7;
	    $199 = (($cond13$i$i) + 32|0);
	    $cmp2719$i$i = ($199>>>0)<($add$ptr$i$i$i>>>0);
	    if ($cmp2719$i$i) {
	     $add$ptr2420$i$i = $add$ptr2418$i$i;
	     while(1) {
	      $200 = (($add$ptr2420$i$i) + 4|0);
	      HEAP32[$200>>2] = 7;
	      $201 = (($add$ptr2420$i$i) + 8|0);
	      $cmp27$i$i = ($201>>>0)<($add$ptr$i$i$i>>>0);
	      if ($cmp27$i$i) {
	       $add$ptr2420$i$i = $200;
	      } else {
	       break;
	      }
	     }
	    }
	    $cmp28$i$i = ($cond13$i$i|0)==($120|0);
	    if (!($cmp28$i$i)) {
	     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
	     $sub$ptr$rhs$cast$i$i = $120;
	     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
	     $add$ptr30$i$i = (($120) + ($sub$ptr$sub$i$i)|0);
	     $add$ptr30$sum$i$i = (($sub$ptr$sub$i$i) + 4)|0;
	     $head31$i$i = (($120) + ($add$ptr30$sum$i$i)|0);
	     $202 = HEAP32[$head31$i$i>>2]|0;
	     $and32$i$i = $202 & -2;
	     HEAP32[$head31$i$i>>2] = $and32$i$i;
	     $or33$i$i = $sub$ptr$sub$i$i | 1;
	     $head34$i$i = (($120) + 4|0);
	     HEAP32[$head34$i$i>>2] = $or33$i$i;
	     HEAP32[$add$ptr30$i$i>>2] = $sub$ptr$sub$i$i;
	     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
	     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
	     if ($cmp36$i$i) {
	      $shl$i20$i = $shr$i$i << 1;
	      $arrayidx$i21$i = ((154792 + ($shl$i20$i<<2)|0) + 40|0);
	      $203 = HEAP32[154792>>2]|0;
	      $shl39$i$i = 1 << $shr$i$i;
	      $and40$i$i = $203 & $shl39$i$i;
	      $tobool$i$i = ($and40$i$i|0)==(0);
	      do {
	       if ($tobool$i$i) {
	        $or44$i$i = $203 | $shl39$i$i;
	        HEAP32[154792>>2] = $or44$i$i;
	        $arrayidx$sum$pre$i$i = (($shl$i20$i) + 2)|0;
	        $$pre$i$i = ((154792 + ($arrayidx$sum$pre$i$i<<2)|0) + 40|0);
	        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i21$i;
	       } else {
	        $arrayidx$sum9$i$i = (($shl$i20$i) + 2)|0;
	        $204 = ((154792 + ($arrayidx$sum9$i$i<<2)|0) + 40|0);
	        $205 = HEAP32[$204>>2]|0;
	        $206 = HEAP32[((154792 + 16|0))>>2]|0;
	        $cmp46$i$i = ($205>>>0)<($206>>>0);
	        if (!($cmp46$i$i)) {
	         $$pre$phi$i$iZ2D = $204;$F$0$i$i = $205;
	         break;
	        }
	        _abort();
	        // unreachable;
	       }
	      } while(0);
	      HEAP32[$$pre$phi$i$iZ2D>>2] = $120;
	      $bk$i$i = (($F$0$i$i) + 12|0);
	      HEAP32[$bk$i$i>>2] = $120;
	      $fd54$i$i = (($120) + 8|0);
	      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
	      $bk55$i$i = (($120) + 12|0);
	      HEAP32[$bk55$i$i>>2] = $arrayidx$i21$i;
	      break;
	     }
	     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
	     $cmp59$i$i = ($shr58$i$i|0)==(0);
	     if ($cmp59$i$i) {
	      $I57$0$i$i = 0;
	     } else {
	      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
	      if ($cmp63$i$i) {
	       $I57$0$i$i = 31;
	      } else {
	       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
	       $shr68$i$i = $sub67$i$i >>> 16;
	       $and69$i$i = $shr68$i$i & 8;
	       $shl70$i$i = $shr58$i$i << $and69$i$i;
	       $sub71$i$i = (($shl70$i$i) + 520192)|0;
	       $shr72$i$i = $sub71$i$i >>> 16;
	       $and73$i$i = $shr72$i$i & 4;
	       $add74$i$i = $and73$i$i | $and69$i$i;
	       $shl75$i$i = $shl70$i$i << $and73$i$i;
	       $sub76$i$i = (($shl75$i$i) + 245760)|0;
	       $shr77$i$i = $sub76$i$i >>> 16;
	       $and78$i$i = $shr77$i$i & 2;
	       $add79$i$i = $add74$i$i | $and78$i$i;
	       $sub80$i$i = (14 - ($add79$i$i))|0;
	       $shl81$i$i = $shl75$i$i << $and78$i$i;
	       $shr82$i$i = $shl81$i$i >>> 15;
	       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
	       $shl84$i$i = $add83$i$i << 1;
	       $add85$i$i = (($add83$i$i) + 7)|0;
	       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
	       $and87$i$i = $shr86$i$i & 1;
	       $add88$i$i = $and87$i$i | $shl84$i$i;
	       $I57$0$i$i = $add88$i$i;
	      }
	     }
	     $arrayidx91$i$i = ((154792 + ($I57$0$i$i<<2)|0) + 304|0);
	     $index$i$i = (($120) + 28|0);
	     $I57$0$c$i$i = $I57$0$i$i;
	     HEAP32[$index$i$i>>2] = $I57$0$c$i$i;
	     $arrayidx92$i$i = (($120) + 20|0);
	     HEAP32[$arrayidx92$i$i>>2] = 0;
	     $207 = (($120) + 16|0);
	     HEAP32[$207>>2] = 0;
	     $208 = HEAP32[((154792 + 4|0))>>2]|0;
	     $shl95$i$i = 1 << $I57$0$i$i;
	     $and96$i$i = $208 & $shl95$i$i;
	     $tobool97$i$i = ($and96$i$i|0)==(0);
	     if ($tobool97$i$i) {
	      $or101$i$i = $208 | $shl95$i$i;
	      HEAP32[((154792 + 4|0))>>2] = $or101$i$i;
	      HEAP32[$arrayidx91$i$i>>2] = $120;
	      $parent$i$i = (($120) + 24|0);
	      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
	      $bk102$i$i = (($120) + 12|0);
	      HEAP32[$bk102$i$i>>2] = $120;
	      $fd103$i$i = (($120) + 8|0);
	      HEAP32[$fd103$i$i>>2] = $120;
	      break;
	     }
	     $209 = HEAP32[$arrayidx91$i$i>>2]|0;
	     $cmp106$i$i = ($I57$0$i$i|0)==(31);
	     if ($cmp106$i$i) {
	      $cond115$i$i = 0;
	     } else {
	      $shr110$i$i = $I57$0$i$i >>> 1;
	      $sub113$i$i = (25 - ($shr110$i$i))|0;
	      $cond115$i$i = $sub113$i$i;
	     }
	     $head11813$i$i = (($209) + 4|0);
	     $210 = HEAP32[$head11813$i$i>>2]|0;
	     $and11914$i$i = $210 & -8;
	     $cmp12015$i$i = ($and11914$i$i|0)==($sub$ptr$sub$i$i|0);
	     L499: do {
	      if ($cmp12015$i$i) {
	       $T$0$lcssa$i$i = $209;
	      } else {
	       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
	       $K105$017$i$i = $shl116$i$i;$T$016$i$i = $209;
	       while(1) {
	        $shr123$i$i = $K105$017$i$i >>> 31;
	        $arrayidx126$i$i = ((($T$016$i$i) + ($shr123$i$i<<2)|0) + 16|0);
	        $211 = HEAP32[$arrayidx126$i$i>>2]|0;
	        $cmp128$i$i = ($211|0)==(0|0);
	        if ($cmp128$i$i) {
	         break;
	        }
	        $shl127$i$i = $K105$017$i$i << 1;
	        $head118$i$i = (($211) + 4|0);
	        $212 = HEAP32[$head118$i$i>>2]|0;
	        $and119$i$i = $212 & -8;
	        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
	        if ($cmp120$i$i) {
	         $T$0$lcssa$i$i = $211;
	         break L499;
	        } else {
	         $K105$017$i$i = $shl127$i$i;$T$016$i$i = $211;
	        }
	       }
	       $213 = HEAP32[((154792 + 16|0))>>2]|0;
	       $cmp133$i$i = ($arrayidx126$i$i>>>0)<($213>>>0);
	       if ($cmp133$i$i) {
	        _abort();
	        // unreachable;
	       } else {
	        HEAP32[$arrayidx126$i$i>>2] = $120;
	        $parent138$i$i = (($120) + 24|0);
	        HEAP32[$parent138$i$i>>2] = $T$016$i$i;
	        $bk139$i$i = (($120) + 12|0);
	        HEAP32[$bk139$i$i>>2] = $120;
	        $fd140$i$i = (($120) + 8|0);
	        HEAP32[$fd140$i$i>>2] = $120;
	        break L311;
	       }
	      }
	     } while(0);
	     $fd145$i$i = (($T$0$lcssa$i$i) + 8|0);
	     $214 = HEAP32[$fd145$i$i>>2]|0;
	     $215 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp147$i$i = ($T$0$lcssa$i$i>>>0)<($215>>>0);
	     if ($cmp147$i$i) {
	      _abort();
	      // unreachable;
	     }
	     $cmp150$i$i = ($214>>>0)<($215>>>0);
	     if ($cmp150$i$i) {
	      _abort();
	      // unreachable;
	     } else {
	      $bk155$i$i = (($214) + 12|0);
	      HEAP32[$bk155$i$i>>2] = $120;
	      HEAP32[$fd145$i$i>>2] = $120;
	      $fd157$i$i = (($120) + 8|0);
	      HEAP32[$fd157$i$i>>2] = $214;
	      $bk158$i$i = (($120) + 12|0);
	      HEAP32[$bk158$i$i>>2] = $T$0$lcssa$i$i;
	      $parent159$i$i = (($120) + 24|0);
	      HEAP32[$parent159$i$i>>2] = 0;
	      break;
	     }
	    }
	   }
	  } while(0);
	  $216 = HEAP32[((154792 + 12|0))>>2]|0;
	  $cmp250$i = ($216>>>0)>($nb$0>>>0);
	  if ($cmp250$i) {
	   $sub253$i = (($216) - ($nb$0))|0;
	   HEAP32[((154792 + 12|0))>>2] = $sub253$i;
	   $217 = HEAP32[((154792 + 24|0))>>2]|0;
	   $add$ptr255$i = (($217) + ($nb$0)|0);
	   HEAP32[((154792 + 24|0))>>2] = $add$ptr255$i;
	   $or257$i = $sub253$i | 1;
	   $add$ptr255$sum$i = (($nb$0) + 4)|0;
	   $head258$i = (($217) + ($add$ptr255$sum$i)|0);
	   HEAP32[$head258$i>>2] = $or257$i;
	   $or260$i = $nb$0 | 3;
	   $head261$i = (($217) + 4|0);
	   HEAP32[$head261$i>>2] = $or260$i;
	   $add$ptr262$i = (($217) + 8|0);
	   $mem$0 = $add$ptr262$i;
	   STACKTOP = sp;return ($mem$0|0);
	  }
	 }
	 $call265$i = (___errno_location()|0);
	 HEAP32[$call265$i>>2] = 12;
	 $mem$0 = 0;
	 STACKTOP = sp;return ($mem$0|0);
	}
	function _free($mem) {
	 $mem = $mem|0;
	 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
	 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
	 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
	 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
	 var $9 = 0, $F502$0 = 0, $I526$0 = 0, $I526$0$c = 0, $K575$0270 = 0, $R$0 = 0, $R$1 = 0, $R327$0 = 0, $R327$1 = 0, $RP$0 = 0, $RP355$0 = 0, $T$0$lcssa = 0, $T$0269 = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum230 = 0, $add$ptr16 = 0, $add$ptr16$sum = 0, $add$ptr16$sum251 = 0, $add$ptr16$sum252 = 0;
	 var $add$ptr16$sum253 = 0, $add$ptr16$sum254 = 0, $add$ptr16$sum255 = 0, $add$ptr16$sum256 = 0, $add$ptr16$sum257 = 0, $add$ptr16$sum258 = 0, $add$ptr257 = 0, $add$ptr477 = 0, $add$ptr490 = 0, $add$ptr6 = 0, $add$ptr6$sum = 0, $add$ptr6$sum232 = 0, $add$ptr6$sum233234 = 0, $add$ptr6$sum235 = 0, $add$ptr6$sum243 = 0, $add$ptr6$sum244 = 0, $add$ptr6$sum247248 = 0, $add$ptr6$sum249 = 0, $add17 = 0, $add243 = 0;
	 var $add254 = 0, $add262 = 0, $add542 = 0, $add547 = 0, $add551 = 0, $add553 = 0, $add556 = 0, $and = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and229 = 0, $and237 = 0, $and261 = 0, $and296 = 0, $and405 = 0, $and46 = 0, $and487 = 0, $and5 = 0, $and504 = 0;
	 var $and537 = 0, $and541 = 0, $and546 = 0, $and555 = 0, $and566 = 0, $and584 = 0, $and584267 = 0, $and8 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx182 = 0, $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx274 = 0, $arrayidx357 = 0, $arrayidx369 = 0;
	 var $arrayidx374 = 0, $arrayidx395 = 0, $arrayidx414 = 0, $arrayidx422 = 0, $arrayidx449 = 0, $arrayidx455 = 0, $arrayidx465 = 0, $arrayidx501 = 0, $arrayidx501$sum$pre = 0, $arrayidx501$sum242 = 0, $arrayidx559 = 0, $arrayidx562 = 0, $arrayidx591 = 0, $arrayidx99 = 0, $bk = 0, $bk270 = 0, $bk281 = 0, $bk316 = 0, $bk328 = 0, $bk338 = 0;
	 var $bk34 = 0, $bk521 = 0, $bk523 = 0, $bk572 = 0, $bk603 = 0, $bk620 = 0, $bk623 = 0, $bk66 = 0, $bk73 = 0, $bk82 = 0, $child = 0, $child$sum = 0, $child171 = 0, $child171$sum = 0, $child356 = 0, $child356$sum = 0, $child438 = 0, $child438$sum = 0, $cmp = 0, $cmp$i = 0;
	 var $cmp1 = 0, $cmp100 = 0, $cmp104 = 0, $cmp109 = 0, $cmp114 = 0, $cmp118 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp143 = 0, $cmp150 = 0, $cmp162 = 0, $cmp165 = 0, $cmp173 = 0, $cmp176 = 0, $cmp18 = 0, $cmp189 = 0, $cmp192 = 0, $cmp2 = 0, $cmp211 = 0;
	 var $cmp22 = 0, $cmp225 = 0, $cmp240 = 0, $cmp246 = 0, $cmp25 = 0, $cmp251 = 0, $cmp264 = 0, $cmp275 = 0, $cmp278 = 0, $cmp282 = 0, $cmp29 = 0, $cmp291 = 0, $cmp300 = 0, $cmp303 = 0, $cmp307 = 0, $cmp31 = 0, $cmp329 = 0, $cmp335 = 0, $cmp339 = 0, $cmp343 = 0;
	 var $cmp35 = 0, $cmp358 = 0, $cmp363 = 0, $cmp370 = 0, $cmp375 = 0, $cmp381 = 0, $cmp390 = 0, $cmp396 = 0, $cmp408 = 0, $cmp415 = 0, $cmp42 = 0, $cmp427 = 0, $cmp430 = 0, $cmp440 = 0, $cmp443 = 0, $cmp456 = 0, $cmp459 = 0, $cmp479 = 0, $cmp494 = 0, $cmp50 = 0;
	 var $cmp511 = 0, $cmp528 = 0, $cmp53 = 0, $cmp532 = 0, $cmp57 = 0, $cmp576 = 0, $cmp585 = 0, $cmp585268 = 0, $cmp593 = 0, $cmp597 = 0, $cmp610 = 0, $cmp613 = 0, $cmp628 = 0, $cmp74 = 0, $cmp80 = 0, $cmp83 = 0, $cmp87 = 0, $cond = 0, $cond263 = 0, $cond264 = 0;
	 var $dec = 0, $fd = 0, $fd268 = 0, $fd306 = 0, $fd317$pre = 0, $fd317$pre$phiZ2D = 0, $fd333 = 0, $fd342 = 0, $fd522 = 0, $fd56 = 0, $fd573 = 0, $fd604 = 0, $fd609 = 0, $fd622 = 0, $fd67$pre = 0, $fd67$pre$phiZ2D = 0, $fd78 = 0, $fd86 = 0, $head = 0, $head209 = 0;
	 var $head216 = 0, $head228 = 0, $head245 = 0, $head256 = 0, $head476 = 0, $head489 = 0, $head583 = 0, $head583266 = 0, $index = 0, $index394 = 0, $index560 = 0, $neg = 0, $neg139 = 0, $neg295 = 0, $neg404 = 0, $next4$i = 0, $or = 0, $or244 = 0, $or255 = 0, $or475 = 0;
	 var $or488 = 0, $or508 = 0, $or570 = 0, $p$0 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent326 = 0, $parent437 = 0, $parent450 = 0, $parent466 = 0, $parent571 = 0, $parent602 = 0, $parent624 = 0, $psize$0 = 0, $psize$1 = 0, $shl = 0, $shl138 = 0, $shl273 = 0;
	 var $shl294 = 0, $shl403 = 0, $shl45 = 0, $shl500 = 0, $shl503 = 0, $shl538 = 0, $shl543 = 0, $shl549 = 0, $shl552 = 0, $shl565 = 0, $shl582 = 0, $shl592 = 0, $shr = 0, $shr263 = 0, $shr493 = 0, $shr527 = 0, $shr536 = 0, $shr540 = 0, $shr545 = 0, $shr550 = 0;
	 var $shr554 = 0, $shr578 = 0, $shr588 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub539 = 0, $sub544 = 0, $sub548 = 0, $sub581 = 0, $tobool230 = 0, $tobool238 = 0, $tobool505 = 0, $tobool567 = 0, $tobool9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($mem|0)==(0|0);
	 if ($cmp) {
	  STACKTOP = sp;return;
	 }
	 $add$ptr = (($mem) + -8|0);
	 $0 = HEAP32[((154792 + 16|0))>>2]|0;
	 $cmp1 = ($add$ptr>>>0)<($0>>>0);
	 if ($cmp1) {
	  _abort();
	  // unreachable;
	 }
	 $head = (($mem) + -4|0);
	 $1 = HEAP32[$head>>2]|0;
	 $and = $1 & 3;
	 $cmp2 = ($and|0)==(1);
	 if ($cmp2) {
	  _abort();
	  // unreachable;
	 }
	 $and5 = $1 & -8;
	 $add$ptr$sum = (($and5) + -8)|0;
	 $add$ptr6 = (($mem) + ($add$ptr$sum)|0);
	 $and8 = $1 & 1;
	 $tobool9 = ($and8|0)==(0);
	 do {
	  if ($tobool9) {
	   $2 = HEAP32[$add$ptr>>2]|0;
	   $cmp13 = ($and|0)==(0);
	   if ($cmp13) {
	    STACKTOP = sp;return;
	   }
	   $add$ptr$sum230 = (-8 - ($2))|0;
	   $add$ptr16 = (($mem) + ($add$ptr$sum230)|0);
	   $add17 = (($2) + ($and5))|0;
	   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
	   if ($cmp18) {
	    _abort();
	    // unreachable;
	   }
	   $3 = HEAP32[((154792 + 20|0))>>2]|0;
	   $cmp22 = ($add$ptr16|0)==($3|0);
	   if ($cmp22) {
	    $add$ptr6$sum = (($and5) + -4)|0;
	    $head209 = (($mem) + ($add$ptr6$sum)|0);
	    $28 = HEAP32[$head209>>2]|0;
	    $and210 = $28 & 3;
	    $cmp211 = ($and210|0)==(3);
	    if (!($cmp211)) {
	     $p$0 = $add$ptr16;$psize$0 = $add17;
	     break;
	    }
	    HEAP32[((154792 + 8|0))>>2] = $add17;
	    $29 = HEAP32[$head209>>2]|0;
	    $and215 = $29 & -2;
	    HEAP32[$head209>>2] = $and215;
	    $or = $add17 | 1;
	    $add$ptr16$sum = (($add$ptr$sum230) + 4)|0;
	    $head216 = (($mem) + ($add$ptr16$sum)|0);
	    HEAP32[$head216>>2] = $or;
	    HEAP32[$add$ptr6>>2] = $add17;
	    STACKTOP = sp;return;
	   }
	   $shr = $2 >>> 3;
	   $cmp25 = ($2>>>0)<(256);
	   if ($cmp25) {
	    $add$ptr16$sum257 = (($add$ptr$sum230) + 8)|0;
	    $fd = (($mem) + ($add$ptr16$sum257)|0);
	    $4 = HEAP32[$fd>>2]|0;
	    $add$ptr16$sum258 = (($add$ptr$sum230) + 12)|0;
	    $bk = (($mem) + ($add$ptr16$sum258)|0);
	    $5 = HEAP32[$bk>>2]|0;
	    $shl = $shr << 1;
	    $arrayidx = ((154792 + ($shl<<2)|0) + 40|0);
	    $cmp29 = ($4|0)==($arrayidx|0);
	    if (!($cmp29)) {
	     $cmp31 = ($4>>>0)<($0>>>0);
	     if ($cmp31) {
	      _abort();
	      // unreachable;
	     }
	     $bk34 = (($4) + 12|0);
	     $6 = HEAP32[$bk34>>2]|0;
	     $cmp35 = ($6|0)==($add$ptr16|0);
	     if (!($cmp35)) {
	      _abort();
	      // unreachable;
	     }
	    }
	    $cmp42 = ($5|0)==($4|0);
	    if ($cmp42) {
	     $shl45 = 1 << $shr;
	     $neg = $shl45 ^ -1;
	     $7 = HEAP32[154792>>2]|0;
	     $and46 = $7 & $neg;
	     HEAP32[154792>>2] = $and46;
	     $p$0 = $add$ptr16;$psize$0 = $add17;
	     break;
	    }
	    $cmp50 = ($5|0)==($arrayidx|0);
	    if ($cmp50) {
	     $fd67$pre = (($5) + 8|0);
	     $fd67$pre$phiZ2D = $fd67$pre;
	    } else {
	     $cmp53 = ($5>>>0)<($0>>>0);
	     if ($cmp53) {
	      _abort();
	      // unreachable;
	     }
	     $fd56 = (($5) + 8|0);
	     $8 = HEAP32[$fd56>>2]|0;
	     $cmp57 = ($8|0)==($add$ptr16|0);
	     if ($cmp57) {
	      $fd67$pre$phiZ2D = $fd56;
	     } else {
	      _abort();
	      // unreachable;
	     }
	    }
	    $bk66 = (($4) + 12|0);
	    HEAP32[$bk66>>2] = $5;
	    HEAP32[$fd67$pre$phiZ2D>>2] = $4;
	    $p$0 = $add$ptr16;$psize$0 = $add17;
	    break;
	   }
	   $add$ptr16$sum251 = (($add$ptr$sum230) + 24)|0;
	   $parent = (($mem) + ($add$ptr16$sum251)|0);
	   $9 = HEAP32[$parent>>2]|0;
	   $add$ptr16$sum252 = (($add$ptr$sum230) + 12)|0;
	   $bk73 = (($mem) + ($add$ptr16$sum252)|0);
	   $10 = HEAP32[$bk73>>2]|0;
	   $cmp74 = ($10|0)==($add$ptr16|0);
	   do {
	    if ($cmp74) {
	     $child$sum = (($add$ptr$sum230) + 20)|0;
	     $arrayidx99 = (($mem) + ($child$sum)|0);
	     $14 = HEAP32[$arrayidx99>>2]|0;
	     $cmp100 = ($14|0)==(0|0);
	     if ($cmp100) {
	      $add$ptr16$sum253 = (($add$ptr$sum230) + 16)|0;
	      $child = (($mem) + ($add$ptr16$sum253)|0);
	      $15 = HEAP32[$child>>2]|0;
	      $cmp104 = ($15|0)==(0|0);
	      if ($cmp104) {
	       $R$1 = 0;
	       break;
	      } else {
	       $R$0 = $15;$RP$0 = $child;
	      }
	     } else {
	      $R$0 = $14;$RP$0 = $arrayidx99;
	     }
	     while(1) {
	      $arrayidx108 = (($R$0) + 20|0);
	      $16 = HEAP32[$arrayidx108>>2]|0;
	      $cmp109 = ($16|0)==(0|0);
	      if (!($cmp109)) {
	       $R$0 = $16;$RP$0 = $arrayidx108;
	       continue;
	      }
	      $arrayidx113 = (($R$0) + 16|0);
	      $17 = HEAP32[$arrayidx113>>2]|0;
	      $cmp114 = ($17|0)==(0|0);
	      if ($cmp114) {
	       break;
	      } else {
	       $R$0 = $17;$RP$0 = $arrayidx113;
	      }
	     }
	     $cmp118 = ($RP$0>>>0)<($0>>>0);
	     if ($cmp118) {
	      _abort();
	      // unreachable;
	     } else {
	      HEAP32[$RP$0>>2] = 0;
	      $R$1 = $R$0;
	      break;
	     }
	    } else {
	     $add$ptr16$sum256 = (($add$ptr$sum230) + 8)|0;
	     $fd78 = (($mem) + ($add$ptr16$sum256)|0);
	     $11 = HEAP32[$fd78>>2]|0;
	     $cmp80 = ($11>>>0)<($0>>>0);
	     if ($cmp80) {
	      _abort();
	      // unreachable;
	     }
	     $bk82 = (($11) + 12|0);
	     $12 = HEAP32[$bk82>>2]|0;
	     $cmp83 = ($12|0)==($add$ptr16|0);
	     if (!($cmp83)) {
	      _abort();
	      // unreachable;
	     }
	     $fd86 = (($10) + 8|0);
	     $13 = HEAP32[$fd86>>2]|0;
	     $cmp87 = ($13|0)==($add$ptr16|0);
	     if ($cmp87) {
	      HEAP32[$bk82>>2] = $10;
	      HEAP32[$fd86>>2] = $11;
	      $R$1 = $10;
	      break;
	     } else {
	      _abort();
	      // unreachable;
	     }
	    }
	   } while(0);
	   $cmp127 = ($9|0)==(0|0);
	   if ($cmp127) {
	    $p$0 = $add$ptr16;$psize$0 = $add17;
	   } else {
	    $add$ptr16$sum254 = (($add$ptr$sum230) + 28)|0;
	    $index = (($mem) + ($add$ptr16$sum254)|0);
	    $18 = HEAP32[$index>>2]|0;
	    $arrayidx130 = ((154792 + ($18<<2)|0) + 304|0);
	    $19 = HEAP32[$arrayidx130>>2]|0;
	    $cmp131 = ($add$ptr16|0)==($19|0);
	    if ($cmp131) {
	     HEAP32[$arrayidx130>>2] = $R$1;
	     $cond263 = ($R$1|0)==(0|0);
	     if ($cond263) {
	      $shl138 = 1 << $18;
	      $neg139 = $shl138 ^ -1;
	      $20 = HEAP32[((154792 + 4|0))>>2]|0;
	      $and140 = $20 & $neg139;
	      HEAP32[((154792 + 4|0))>>2] = $and140;
	      $p$0 = $add$ptr16;$psize$0 = $add17;
	      break;
	     }
	    } else {
	     $21 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp143 = ($9>>>0)<($21>>>0);
	     if ($cmp143) {
	      _abort();
	      // unreachable;
	     }
	     $arrayidx149 = (($9) + 16|0);
	     $22 = HEAP32[$arrayidx149>>2]|0;
	     $cmp150 = ($22|0)==($add$ptr16|0);
	     if ($cmp150) {
	      HEAP32[$arrayidx149>>2] = $R$1;
	     } else {
	      $arrayidx157 = (($9) + 20|0);
	      HEAP32[$arrayidx157>>2] = $R$1;
	     }
	     $cmp162 = ($R$1|0)==(0|0);
	     if ($cmp162) {
	      $p$0 = $add$ptr16;$psize$0 = $add17;
	      break;
	     }
	    }
	    $23 = HEAP32[((154792 + 16|0))>>2]|0;
	    $cmp165 = ($R$1>>>0)<($23>>>0);
	    if ($cmp165) {
	     _abort();
	     // unreachable;
	    }
	    $parent170 = (($R$1) + 24|0);
	    HEAP32[$parent170>>2] = $9;
	    $add$ptr16$sum255 = (($add$ptr$sum230) + 16)|0;
	    $child171 = (($mem) + ($add$ptr16$sum255)|0);
	    $24 = HEAP32[$child171>>2]|0;
	    $cmp173 = ($24|0)==(0|0);
	    do {
	     if (!($cmp173)) {
	      $25 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp176 = ($24>>>0)<($25>>>0);
	      if ($cmp176) {
	       _abort();
	       // unreachable;
	      } else {
	       $arrayidx182 = (($R$1) + 16|0);
	       HEAP32[$arrayidx182>>2] = $24;
	       $parent183 = (($24) + 24|0);
	       HEAP32[$parent183>>2] = $R$1;
	       break;
	      }
	     }
	    } while(0);
	    $child171$sum = (($add$ptr$sum230) + 20)|0;
	    $arrayidx188 = (($mem) + ($child171$sum)|0);
	    $26 = HEAP32[$arrayidx188>>2]|0;
	    $cmp189 = ($26|0)==(0|0);
	    if ($cmp189) {
	     $p$0 = $add$ptr16;$psize$0 = $add17;
	    } else {
	     $27 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp192 = ($26>>>0)<($27>>>0);
	     if ($cmp192) {
	      _abort();
	      // unreachable;
	     } else {
	      $arrayidx198 = (($R$1) + 20|0);
	      HEAP32[$arrayidx198>>2] = $26;
	      $parent199 = (($26) + 24|0);
	      HEAP32[$parent199>>2] = $R$1;
	      $p$0 = $add$ptr16;$psize$0 = $add17;
	      break;
	     }
	    }
	   }
	  } else {
	   $p$0 = $add$ptr;$psize$0 = $and5;
	  }
	 } while(0);
	 $cmp225 = ($p$0>>>0)<($add$ptr6>>>0);
	 if (!($cmp225)) {
	  _abort();
	  // unreachable;
	 }
	 $add$ptr6$sum249 = (($and5) + -4)|0;
	 $head228 = (($mem) + ($add$ptr6$sum249)|0);
	 $30 = HEAP32[$head228>>2]|0;
	 $and229 = $30 & 1;
	 $tobool230 = ($and229|0)==(0);
	 if ($tobool230) {
	  _abort();
	  // unreachable;
	 }
	 $and237 = $30 & 2;
	 $tobool238 = ($and237|0)==(0);
	 if ($tobool238) {
	  $31 = HEAP32[((154792 + 24|0))>>2]|0;
	  $cmp240 = ($add$ptr6|0)==($31|0);
	  if ($cmp240) {
	   $32 = HEAP32[((154792 + 12|0))>>2]|0;
	   $add243 = (($32) + ($psize$0))|0;
	   HEAP32[((154792 + 12|0))>>2] = $add243;
	   HEAP32[((154792 + 24|0))>>2] = $p$0;
	   $or244 = $add243 | 1;
	   $head245 = (($p$0) + 4|0);
	   HEAP32[$head245>>2] = $or244;
	   $33 = HEAP32[((154792 + 20|0))>>2]|0;
	   $cmp246 = ($p$0|0)==($33|0);
	   if (!($cmp246)) {
	    STACKTOP = sp;return;
	   }
	   HEAP32[((154792 + 20|0))>>2] = 0;
	   HEAP32[((154792 + 8|0))>>2] = 0;
	   STACKTOP = sp;return;
	  }
	  $34 = HEAP32[((154792 + 20|0))>>2]|0;
	  $cmp251 = ($add$ptr6|0)==($34|0);
	  if ($cmp251) {
	   $35 = HEAP32[((154792 + 8|0))>>2]|0;
	   $add254 = (($35) + ($psize$0))|0;
	   HEAP32[((154792 + 8|0))>>2] = $add254;
	   HEAP32[((154792 + 20|0))>>2] = $p$0;
	   $or255 = $add254 | 1;
	   $head256 = (($p$0) + 4|0);
	   HEAP32[$head256>>2] = $or255;
	   $add$ptr257 = (($p$0) + ($add254)|0);
	   HEAP32[$add$ptr257>>2] = $add254;
	   STACKTOP = sp;return;
	  }
	  $and261 = $30 & -8;
	  $add262 = (($and261) + ($psize$0))|0;
	  $shr263 = $30 >>> 3;
	  $cmp264 = ($30>>>0)<(256);
	  do {
	   if ($cmp264) {
	    $fd268 = (($mem) + ($and5)|0);
	    $36 = HEAP32[$fd268>>2]|0;
	    $add$ptr6$sum247248 = $and5 | 4;
	    $bk270 = (($mem) + ($add$ptr6$sum247248)|0);
	    $37 = HEAP32[$bk270>>2]|0;
	    $shl273 = $shr263 << 1;
	    $arrayidx274 = ((154792 + ($shl273<<2)|0) + 40|0);
	    $cmp275 = ($36|0)==($arrayidx274|0);
	    if (!($cmp275)) {
	     $38 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp278 = ($36>>>0)<($38>>>0);
	     if ($cmp278) {
	      _abort();
	      // unreachable;
	     }
	     $bk281 = (($36) + 12|0);
	     $39 = HEAP32[$bk281>>2]|0;
	     $cmp282 = ($39|0)==($add$ptr6|0);
	     if (!($cmp282)) {
	      _abort();
	      // unreachable;
	     }
	    }
	    $cmp291 = ($37|0)==($36|0);
	    if ($cmp291) {
	     $shl294 = 1 << $shr263;
	     $neg295 = $shl294 ^ -1;
	     $40 = HEAP32[154792>>2]|0;
	     $and296 = $40 & $neg295;
	     HEAP32[154792>>2] = $and296;
	     break;
	    }
	    $cmp300 = ($37|0)==($arrayidx274|0);
	    if ($cmp300) {
	     $fd317$pre = (($37) + 8|0);
	     $fd317$pre$phiZ2D = $fd317$pre;
	    } else {
	     $41 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp303 = ($37>>>0)<($41>>>0);
	     if ($cmp303) {
	      _abort();
	      // unreachable;
	     }
	     $fd306 = (($37) + 8|0);
	     $42 = HEAP32[$fd306>>2]|0;
	     $cmp307 = ($42|0)==($add$ptr6|0);
	     if ($cmp307) {
	      $fd317$pre$phiZ2D = $fd306;
	     } else {
	      _abort();
	      // unreachable;
	     }
	    }
	    $bk316 = (($36) + 12|0);
	    HEAP32[$bk316>>2] = $37;
	    HEAP32[$fd317$pre$phiZ2D>>2] = $36;
	   } else {
	    $add$ptr6$sum232 = (($and5) + 16)|0;
	    $parent326 = (($mem) + ($add$ptr6$sum232)|0);
	    $43 = HEAP32[$parent326>>2]|0;
	    $add$ptr6$sum233234 = $and5 | 4;
	    $bk328 = (($mem) + ($add$ptr6$sum233234)|0);
	    $44 = HEAP32[$bk328>>2]|0;
	    $cmp329 = ($44|0)==($add$ptr6|0);
	    do {
	     if ($cmp329) {
	      $child356$sum = (($and5) + 12)|0;
	      $arrayidx357 = (($mem) + ($child356$sum)|0);
	      $49 = HEAP32[$arrayidx357>>2]|0;
	      $cmp358 = ($49|0)==(0|0);
	      if ($cmp358) {
	       $add$ptr6$sum235 = (($and5) + 8)|0;
	       $child356 = (($mem) + ($add$ptr6$sum235)|0);
	       $50 = HEAP32[$child356>>2]|0;
	       $cmp363 = ($50|0)==(0|0);
	       if ($cmp363) {
	        $R327$1 = 0;
	        break;
	       } else {
	        $R327$0 = $50;$RP355$0 = $child356;
	       }
	      } else {
	       $R327$0 = $49;$RP355$0 = $arrayidx357;
	      }
	      while(1) {
	       $arrayidx369 = (($R327$0) + 20|0);
	       $51 = HEAP32[$arrayidx369>>2]|0;
	       $cmp370 = ($51|0)==(0|0);
	       if (!($cmp370)) {
	        $R327$0 = $51;$RP355$0 = $arrayidx369;
	        continue;
	       }
	       $arrayidx374 = (($R327$0) + 16|0);
	       $52 = HEAP32[$arrayidx374>>2]|0;
	       $cmp375 = ($52|0)==(0|0);
	       if ($cmp375) {
	        break;
	       } else {
	        $R327$0 = $52;$RP355$0 = $arrayidx374;
	       }
	      }
	      $53 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp381 = ($RP355$0>>>0)<($53>>>0);
	      if ($cmp381) {
	       _abort();
	       // unreachable;
	      } else {
	       HEAP32[$RP355$0>>2] = 0;
	       $R327$1 = $R327$0;
	       break;
	      }
	     } else {
	      $fd333 = (($mem) + ($and5)|0);
	      $45 = HEAP32[$fd333>>2]|0;
	      $46 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp335 = ($45>>>0)<($46>>>0);
	      if ($cmp335) {
	       _abort();
	       // unreachable;
	      }
	      $bk338 = (($45) + 12|0);
	      $47 = HEAP32[$bk338>>2]|0;
	      $cmp339 = ($47|0)==($add$ptr6|0);
	      if (!($cmp339)) {
	       _abort();
	       // unreachable;
	      }
	      $fd342 = (($44) + 8|0);
	      $48 = HEAP32[$fd342>>2]|0;
	      $cmp343 = ($48|0)==($add$ptr6|0);
	      if ($cmp343) {
	       HEAP32[$bk338>>2] = $44;
	       HEAP32[$fd342>>2] = $45;
	       $R327$1 = $44;
	       break;
	      } else {
	       _abort();
	       // unreachable;
	      }
	     }
	    } while(0);
	    $cmp390 = ($43|0)==(0|0);
	    if (!($cmp390)) {
	     $add$ptr6$sum243 = (($and5) + 20)|0;
	     $index394 = (($mem) + ($add$ptr6$sum243)|0);
	     $54 = HEAP32[$index394>>2]|0;
	     $arrayidx395 = ((154792 + ($54<<2)|0) + 304|0);
	     $55 = HEAP32[$arrayidx395>>2]|0;
	     $cmp396 = ($add$ptr6|0)==($55|0);
	     if ($cmp396) {
	      HEAP32[$arrayidx395>>2] = $R327$1;
	      $cond264 = ($R327$1|0)==(0|0);
	      if ($cond264) {
	       $shl403 = 1 << $54;
	       $neg404 = $shl403 ^ -1;
	       $56 = HEAP32[((154792 + 4|0))>>2]|0;
	       $and405 = $56 & $neg404;
	       HEAP32[((154792 + 4|0))>>2] = $and405;
	       break;
	      }
	     } else {
	      $57 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp408 = ($43>>>0)<($57>>>0);
	      if ($cmp408) {
	       _abort();
	       // unreachable;
	      }
	      $arrayidx414 = (($43) + 16|0);
	      $58 = HEAP32[$arrayidx414>>2]|0;
	      $cmp415 = ($58|0)==($add$ptr6|0);
	      if ($cmp415) {
	       HEAP32[$arrayidx414>>2] = $R327$1;
	      } else {
	       $arrayidx422 = (($43) + 20|0);
	       HEAP32[$arrayidx422>>2] = $R327$1;
	      }
	      $cmp427 = ($R327$1|0)==(0|0);
	      if ($cmp427) {
	       break;
	      }
	     }
	     $59 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp430 = ($R327$1>>>0)<($59>>>0);
	     if ($cmp430) {
	      _abort();
	      // unreachable;
	     }
	     $parent437 = (($R327$1) + 24|0);
	     HEAP32[$parent437>>2] = $43;
	     $add$ptr6$sum244 = (($and5) + 8)|0;
	     $child438 = (($mem) + ($add$ptr6$sum244)|0);
	     $60 = HEAP32[$child438>>2]|0;
	     $cmp440 = ($60|0)==(0|0);
	     do {
	      if (!($cmp440)) {
	       $61 = HEAP32[((154792 + 16|0))>>2]|0;
	       $cmp443 = ($60>>>0)<($61>>>0);
	       if ($cmp443) {
	        _abort();
	        // unreachable;
	       } else {
	        $arrayidx449 = (($R327$1) + 16|0);
	        HEAP32[$arrayidx449>>2] = $60;
	        $parent450 = (($60) + 24|0);
	        HEAP32[$parent450>>2] = $R327$1;
	        break;
	       }
	      }
	     } while(0);
	     $child438$sum = (($and5) + 12)|0;
	     $arrayidx455 = (($mem) + ($child438$sum)|0);
	     $62 = HEAP32[$arrayidx455>>2]|0;
	     $cmp456 = ($62|0)==(0|0);
	     if (!($cmp456)) {
	      $63 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp459 = ($62>>>0)<($63>>>0);
	      if ($cmp459) {
	       _abort();
	       // unreachable;
	      } else {
	       $arrayidx465 = (($R327$1) + 20|0);
	       HEAP32[$arrayidx465>>2] = $62;
	       $parent466 = (($62) + 24|0);
	       HEAP32[$parent466>>2] = $R327$1;
	       break;
	      }
	     }
	    }
	   }
	  } while(0);
	  $or475 = $add262 | 1;
	  $head476 = (($p$0) + 4|0);
	  HEAP32[$head476>>2] = $or475;
	  $add$ptr477 = (($p$0) + ($add262)|0);
	  HEAP32[$add$ptr477>>2] = $add262;
	  $64 = HEAP32[((154792 + 20|0))>>2]|0;
	  $cmp479 = ($p$0|0)==($64|0);
	  if ($cmp479) {
	   HEAP32[((154792 + 8|0))>>2] = $add262;
	   STACKTOP = sp;return;
	  } else {
	   $psize$1 = $add262;
	  }
	 } else {
	  $and487 = $30 & -2;
	  HEAP32[$head228>>2] = $and487;
	  $or488 = $psize$0 | 1;
	  $head489 = (($p$0) + 4|0);
	  HEAP32[$head489>>2] = $or488;
	  $add$ptr490 = (($p$0) + ($psize$0)|0);
	  HEAP32[$add$ptr490>>2] = $psize$0;
	  $psize$1 = $psize$0;
	 }
	 $shr493 = $psize$1 >>> 3;
	 $cmp494 = ($psize$1>>>0)<(256);
	 if ($cmp494) {
	  $shl500 = $shr493 << 1;
	  $arrayidx501 = ((154792 + ($shl500<<2)|0) + 40|0);
	  $65 = HEAP32[154792>>2]|0;
	  $shl503 = 1 << $shr493;
	  $and504 = $65 & $shl503;
	  $tobool505 = ($and504|0)==(0);
	  if ($tobool505) {
	   $or508 = $65 | $shl503;
	   HEAP32[154792>>2] = $or508;
	   $arrayidx501$sum$pre = (($shl500) + 2)|0;
	   $$pre = ((154792 + ($arrayidx501$sum$pre<<2)|0) + 40|0);
	   $$pre$phiZ2D = $$pre;$F502$0 = $arrayidx501;
	  } else {
	   $arrayidx501$sum242 = (($shl500) + 2)|0;
	   $66 = ((154792 + ($arrayidx501$sum242<<2)|0) + 40|0);
	   $67 = HEAP32[$66>>2]|0;
	   $68 = HEAP32[((154792 + 16|0))>>2]|0;
	   $cmp511 = ($67>>>0)<($68>>>0);
	   if ($cmp511) {
	    _abort();
	    // unreachable;
	   } else {
	    $$pre$phiZ2D = $66;$F502$0 = $67;
	   }
	  }
	  HEAP32[$$pre$phiZ2D>>2] = $p$0;
	  $bk521 = (($F502$0) + 12|0);
	  HEAP32[$bk521>>2] = $p$0;
	  $fd522 = (($p$0) + 8|0);
	  HEAP32[$fd522>>2] = $F502$0;
	  $bk523 = (($p$0) + 12|0);
	  HEAP32[$bk523>>2] = $arrayidx501;
	  STACKTOP = sp;return;
	 }
	 $shr527 = $psize$1 >>> 8;
	 $cmp528 = ($shr527|0)==(0);
	 if ($cmp528) {
	  $I526$0 = 0;
	 } else {
	  $cmp532 = ($psize$1>>>0)>(16777215);
	  if ($cmp532) {
	   $I526$0 = 31;
	  } else {
	   $sub = (($shr527) + 1048320)|0;
	   $shr536 = $sub >>> 16;
	   $and537 = $shr536 & 8;
	   $shl538 = $shr527 << $and537;
	   $sub539 = (($shl538) + 520192)|0;
	   $shr540 = $sub539 >>> 16;
	   $and541 = $shr540 & 4;
	   $add542 = $and541 | $and537;
	   $shl543 = $shl538 << $and541;
	   $sub544 = (($shl543) + 245760)|0;
	   $shr545 = $sub544 >>> 16;
	   $and546 = $shr545 & 2;
	   $add547 = $add542 | $and546;
	   $sub548 = (14 - ($add547))|0;
	   $shl549 = $shl543 << $and546;
	   $shr550 = $shl549 >>> 15;
	   $add551 = (($sub548) + ($shr550))|0;
	   $shl552 = $add551 << 1;
	   $add553 = (($add551) + 7)|0;
	   $shr554 = $psize$1 >>> $add553;
	   $and555 = $shr554 & 1;
	   $add556 = $and555 | $shl552;
	   $I526$0 = $add556;
	  }
	 }
	 $arrayidx559 = ((154792 + ($I526$0<<2)|0) + 304|0);
	 $index560 = (($p$0) + 28|0);
	 $I526$0$c = $I526$0;
	 HEAP32[$index560>>2] = $I526$0$c;
	 $arrayidx562 = (($p$0) + 20|0);
	 HEAP32[$arrayidx562>>2] = 0;
	 $69 = (($p$0) + 16|0);
	 HEAP32[$69>>2] = 0;
	 $70 = HEAP32[((154792 + 4|0))>>2]|0;
	 $shl565 = 1 << $I526$0;
	 $and566 = $70 & $shl565;
	 $tobool567 = ($and566|0)==(0);
	 L199: do {
	  if ($tobool567) {
	   $or570 = $70 | $shl565;
	   HEAP32[((154792 + 4|0))>>2] = $or570;
	   HEAP32[$arrayidx559>>2] = $p$0;
	   $parent571 = (($p$0) + 24|0);
	   HEAP32[$parent571>>2] = $arrayidx559;
	   $bk572 = (($p$0) + 12|0);
	   HEAP32[$bk572>>2] = $p$0;
	   $fd573 = (($p$0) + 8|0);
	   HEAP32[$fd573>>2] = $p$0;
	  } else {
	   $71 = HEAP32[$arrayidx559>>2]|0;
	   $cmp576 = ($I526$0|0)==(31);
	   if ($cmp576) {
	    $cond = 0;
	   } else {
	    $shr578 = $I526$0 >>> 1;
	    $sub581 = (25 - ($shr578))|0;
	    $cond = $sub581;
	   }
	   $head583266 = (($71) + 4|0);
	   $72 = HEAP32[$head583266>>2]|0;
	   $and584267 = $72 & -8;
	   $cmp585268 = ($and584267|0)==($psize$1|0);
	   L205: do {
	    if ($cmp585268) {
	     $T$0$lcssa = $71;
	    } else {
	     $shl582 = $psize$1 << $cond;
	     $K575$0270 = $shl582;$T$0269 = $71;
	     while(1) {
	      $shr588 = $K575$0270 >>> 31;
	      $arrayidx591 = ((($T$0269) + ($shr588<<2)|0) + 16|0);
	      $73 = HEAP32[$arrayidx591>>2]|0;
	      $cmp593 = ($73|0)==(0|0);
	      if ($cmp593) {
	       break;
	      }
	      $shl592 = $K575$0270 << 1;
	      $head583 = (($73) + 4|0);
	      $74 = HEAP32[$head583>>2]|0;
	      $and584 = $74 & -8;
	      $cmp585 = ($and584|0)==($psize$1|0);
	      if ($cmp585) {
	       $T$0$lcssa = $73;
	       break L205;
	      } else {
	       $K575$0270 = $shl592;$T$0269 = $73;
	      }
	     }
	     $75 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp597 = ($arrayidx591>>>0)<($75>>>0);
	     if ($cmp597) {
	      _abort();
	      // unreachable;
	     } else {
	      HEAP32[$arrayidx591>>2] = $p$0;
	      $parent602 = (($p$0) + 24|0);
	      HEAP32[$parent602>>2] = $T$0269;
	      $bk603 = (($p$0) + 12|0);
	      HEAP32[$bk603>>2] = $p$0;
	      $fd604 = (($p$0) + 8|0);
	      HEAP32[$fd604>>2] = $p$0;
	      break L199;
	     }
	    }
	   } while(0);
	   $fd609 = (($T$0$lcssa) + 8|0);
	   $76 = HEAP32[$fd609>>2]|0;
	   $77 = HEAP32[((154792 + 16|0))>>2]|0;
	   $cmp610 = ($T$0$lcssa>>>0)<($77>>>0);
	   if ($cmp610) {
	    _abort();
	    // unreachable;
	   }
	   $cmp613 = ($76>>>0)<($77>>>0);
	   if ($cmp613) {
	    _abort();
	    // unreachable;
	   } else {
	    $bk620 = (($76) + 12|0);
	    HEAP32[$bk620>>2] = $p$0;
	    HEAP32[$fd609>>2] = $p$0;
	    $fd622 = (($p$0) + 8|0);
	    HEAP32[$fd622>>2] = $76;
	    $bk623 = (($p$0) + 12|0);
	    HEAP32[$bk623>>2] = $T$0$lcssa;
	    $parent624 = (($p$0) + 24|0);
	    HEAP32[$parent624>>2] = 0;
	    break;
	   }
	  }
	 } while(0);
	 $78 = HEAP32[((154792 + 32|0))>>2]|0;
	 $dec = (($78) + -1)|0;
	 HEAP32[((154792 + 32|0))>>2] = $dec;
	 $cmp628 = ($dec|0)==(0);
	 if ($cmp628) {
	  $sp$0$in$i = ((154792 + 456|0));
	 } else {
	  STACKTOP = sp;return;
	 }
	 while(1) {
	  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
	  $cmp$i = ($sp$0$i|0)==(0|0);
	  $next4$i = (($sp$0$i) + 8|0);
	  if ($cmp$i) {
	   break;
	  } else {
	   $sp$0$in$i = $next4$i;
	  }
	 }
	 HEAP32[((154792 + 32|0))>>2] = -1;
	 STACKTOP = sp;return;
	}
	function _calloc($n_elements,$elem_size) {
	 $n_elements = $n_elements|0;
	 $elem_size = $elem_size|0;
	 var $0 = 0, $and6 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp7 = 0, $div = 0, $head = 0, $mul = 0, $mul$ = 0, $or = 0, $req$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($n_elements|0)==(0);
	 if ($cmp) {
	  $req$0 = 0;
	 } else {
	  $mul = Math_imul($elem_size, $n_elements)|0;
	  $or = $elem_size | $n_elements;
	  $tobool = ($or>>>0)>(65535);
	  if ($tobool) {
	   $div = (($mul>>>0) / ($n_elements>>>0))&-1;
	   $cmp1 = ($div|0)==($elem_size|0);
	   $mul$ = $cmp1 ? $mul : -1;
	   $req$0 = $mul$;
	  } else {
	   $req$0 = $mul;
	  }
	 }
	 $call = (_malloc($req$0)|0);
	 $cmp4 = ($call|0)==(0|0);
	 if ($cmp4) {
	  STACKTOP = sp;return ($call|0);
	 }
	 $head = (($call) + -4|0);
	 $0 = HEAP32[$head>>2]|0;
	 $and6 = $0 & 3;
	 $cmp7 = ($and6|0)==(0);
	 if ($cmp7) {
	  STACKTOP = sp;return ($call|0);
	 }
	 _memset(($call|0),0,($req$0|0))|0;
	 STACKTOP = sp;return ($call|0);
	}
	function _realloc($oldmem,$bytes) {
	 $oldmem = $oldmem|0;
	 $bytes = $bytes|0;
	 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
	 var $cond24 = 0, $head = 0, $mem$0 = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($oldmem|0)==(0|0);
	 if ($cmp) {
	  $call = (_malloc($bytes)|0);
	  $mem$0 = $call;
	  STACKTOP = sp;return ($mem$0|0);
	 }
	 $cmp1 = ($bytes>>>0)>(4294967231);
	 if ($cmp1) {
	  $call3 = (___errno_location()|0);
	  HEAP32[$call3>>2] = 12;
	  $mem$0 = 0;
	  STACKTOP = sp;return ($mem$0|0);
	 }
	 $cmp5 = ($bytes>>>0)<(11);
	 if ($cmp5) {
	  $cond = 16;
	 } else {
	  $add6 = (($bytes) + 11)|0;
	  $and = $add6 & -8;
	  $cond = $and;
	 }
	 $add$ptr = (($oldmem) + -8|0);
	 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
	 $cmp8 = ($call7|0)==(0|0);
	 if (!($cmp8)) {
	  $add$ptr10 = (($call7) + 8|0);
	  $mem$0 = $add$ptr10;
	  STACKTOP = sp;return ($mem$0|0);
	 }
	 $call12 = (_malloc($bytes)|0);
	 $cmp13 = ($call12|0)==(0|0);
	 if ($cmp13) {
	  $mem$0 = 0;
	  STACKTOP = sp;return ($mem$0|0);
	 }
	 $head = (($oldmem) + -4|0);
	 $0 = HEAP32[$head>>2]|0;
	 $and15 = $0 & -8;
	 $and17 = $0 & 3;
	 $cmp18 = ($and17|0)==(0);
	 $cond19 = $cmp18 ? 8 : 4;
	 $sub = (($and15) - ($cond19))|0;
	 $cmp20 = ($sub>>>0)<($bytes>>>0);
	 $cond24 = $cmp20 ? $sub : $bytes;
	 _memcpy(($call12|0),($oldmem|0),($cond24|0))|0;
	 _free($oldmem);
	 $mem$0 = $call12;
	 STACKTOP = sp;return ($mem$0|0);
	}
	function _try_realloc_chunk($p,$nb) {
	 $p = $p|0;
	 $nb = $nb|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$0 = 0;
	 var $R$1 = 0, $RP$0 = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum10 = 0, $add$ptr$sum11 = 0, $add$ptr$sum1516 = 0, $add$ptr$sum2 = 0, $add$ptr$sum3 = 0, $add$ptr$sum7 = 0, $add$ptr$sum8 = 0, $add$ptr$sum9 = 0, $add$ptr17 = 0, $add$ptr17$sum = 0, $add$ptr298$sum6 = 0, $add$ptr303 = 0, $add$ptr303$sum = 0, $add$ptr317$sum5 = 0;
	 var $add$ptr41 = 0, $add$ptr41$sum = 0, $add$ptr66 = 0, $add$ptr66$sum = 0, $add$ptr67 = 0, $add$ptr67$sum = 0, $add$ptr91$sum = 0, $add105 = 0, $add58 = 0, $and = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and2 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0;
	 var $and7 = 0, $and80 = 0, $and87 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk118 = 0, $bk147 = 0, $bk155 = 0, $bk164 = 0, $child = 0, $child$sum = 0;
	 var $child249 = 0, $child249$sum = 0, $cmp = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0, $cmp11 = 0, $cmp111 = 0, $cmp114 = 0, $cmp116 = 0, $cmp119 = 0, $cmp125 = 0, $cmp13 = 0, $cmp133 = 0, $cmp136 = 0, $cmp139 = 0, $cmp15 = 0, $cmp156 = 0, $cmp162 = 0, $cmp165 = 0;
	 var $cmp168 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp195 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp220 = 0, $cmp227 = 0, $cmp239 = 0, $cmp243 = 0, $cmp251 = 0, $cmp255 = 0, $cmp268 = 0, $cmp272 = 0, $cmp288 = 0, $cmp3 = 0, $cmp34 = 0;
	 var $cmp36 = 0, $cmp5 = 0, $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd138 = 0, $fd148$pre = 0, $fd148$pre$phiZ2D = 0, $fd159 = 0, $fd167 = 0, $head = 0, $head23 = 0, $head299 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head6 = 0, $head74 = 0;
	 var $head79 = 0, $head92 = 0, $index = 0, $neg = 0, $neg215 = 0, $newp$0 = 0, $or = 0, $or$cond = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0;
	 var $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0, $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge12 = 0, $sub = 0, $sub$i = 0;
	 var $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool = 0, $tobool101 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $head = (($p) + 4|0);
	 $0 = HEAP32[$head>>2]|0;
	 $and = $0 & -8;
	 $add$ptr = (($p) + ($and)|0);
	 $1 = HEAP32[((154792 + 16|0))>>2]|0;
	 $cmp = ($p>>>0)<($1>>>0);
	 if ($cmp) {
	  _abort();
	  // unreachable;
	 }
	 $and2 = $0 & 3;
	 $cmp3 = ($and2|0)!=(1);
	 $cmp5 = ($p>>>0)<($add$ptr>>>0);
	 $or$cond = $cmp3 & $cmp5;
	 if (!($or$cond)) {
	  _abort();
	  // unreachable;
	 }
	 $add$ptr$sum1516 = $and | 4;
	 $head6 = (($p) + ($add$ptr$sum1516)|0);
	 $2 = HEAP32[$head6>>2]|0;
	 $and7 = $2 & 1;
	 $tobool = ($and7|0)==(0);
	 if ($tobool) {
	  _abort();
	  // unreachable;
	 }
	 $cmp11 = ($and2|0)==(0);
	 if ($cmp11) {
	  $cmp$i = ($nb>>>0)<(256);
	  if ($cmp$i) {
	   $newp$0 = 0;
	   STACKTOP = sp;return ($newp$0|0);
	  }
	  $add$i = (($nb) + 4)|0;
	  $cmp1$i = ($and>>>0)<($add$i>>>0);
	  if (!($cmp1$i)) {
	   $sub$i = (($and) - ($nb))|0;
	   $3 = HEAP32[((155264 + 8|0))>>2]|0;
	   $shl$i = $3 << 1;
	   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
	   if (!($cmp2$i)) {
	    $newp$0 = $p;
	    STACKTOP = sp;return ($newp$0|0);
	   }
	  }
	  $newp$0 = 0;
	  STACKTOP = sp;return ($newp$0|0);
	 }
	 $cmp13 = ($and>>>0)<($nb>>>0);
	 if (!($cmp13)) {
	  $sub = (($and) - ($nb))|0;
	  $cmp15 = ($sub>>>0)>(15);
	  if (!($cmp15)) {
	   $newp$0 = $p;
	   STACKTOP = sp;return ($newp$0|0);
	  }
	  $add$ptr17 = (($p) + ($nb)|0);
	  $and19 = $0 & 1;
	  $or = $and19 | $nb;
	  $or20 = $or | 2;
	  HEAP32[$head>>2] = $or20;
	  $add$ptr17$sum = (($nb) + 4)|0;
	  $head23 = (($p) + ($add$ptr17$sum)|0);
	  $or28 = $sub | 3;
	  HEAP32[$head23>>2] = $or28;
	  $4 = HEAP32[$head6>>2]|0;
	  $or32 = $4 | 1;
	  HEAP32[$head6>>2] = $or32;
	  _dispose_chunk($add$ptr17,$sub);
	  $newp$0 = $p;
	  STACKTOP = sp;return ($newp$0|0);
	 }
	 $5 = HEAP32[((154792 + 24|0))>>2]|0;
	 $cmp34 = ($add$ptr|0)==($5|0);
	 if ($cmp34) {
	  $6 = HEAP32[((154792 + 12|0))>>2]|0;
	  $add = (($6) + ($and))|0;
	  $cmp36 = ($add>>>0)>($nb>>>0);
	  if (!($cmp36)) {
	   $newp$0 = 0;
	   STACKTOP = sp;return ($newp$0|0);
	  }
	  $sub40 = (($add) - ($nb))|0;
	  $add$ptr41 = (($p) + ($nb)|0);
	  $and43 = $0 & 1;
	  $or44 = $and43 | $nb;
	  $or45 = $or44 | 2;
	  HEAP32[$head>>2] = $or45;
	  $add$ptr41$sum = (($nb) + 4)|0;
	  $head48 = (($p) + ($add$ptr41$sum)|0);
	  $or50 = $sub40 | 1;
	  HEAP32[$head48>>2] = $or50;
	  HEAP32[((154792 + 24|0))>>2] = $add$ptr41;
	  HEAP32[((154792 + 12|0))>>2] = $sub40;
	  $newp$0 = $p;
	  STACKTOP = sp;return ($newp$0|0);
	 }
	 $7 = HEAP32[((154792 + 20|0))>>2]|0;
	 $cmp56 = ($add$ptr|0)==($7|0);
	 if ($cmp56) {
	  $8 = HEAP32[((154792 + 8|0))>>2]|0;
	  $add58 = (($8) + ($and))|0;
	  $cmp59 = ($add58>>>0)<($nb>>>0);
	  if ($cmp59) {
	   $newp$0 = 0;
	   STACKTOP = sp;return ($newp$0|0);
	  }
	  $sub62 = (($add58) - ($nb))|0;
	  $cmp63 = ($sub62>>>0)>(15);
	  if ($cmp63) {
	   $add$ptr66 = (($p) + ($nb)|0);
	   $add$ptr67 = (($p) + ($add58)|0);
	   $and69 = $0 & 1;
	   $or70 = $and69 | $nb;
	   $or71 = $or70 | 2;
	   HEAP32[$head>>2] = $or71;
	   $add$ptr66$sum = (($nb) + 4)|0;
	   $head74 = (($p) + ($add$ptr66$sum)|0);
	   $or76 = $sub62 | 1;
	   HEAP32[$head74>>2] = $or76;
	   HEAP32[$add$ptr67>>2] = $sub62;
	   $add$ptr67$sum = (($add58) + 4)|0;
	   $head79 = (($p) + ($add$ptr67$sum)|0);
	   $9 = HEAP32[$head79>>2]|0;
	   $and80 = $9 & -2;
	   HEAP32[$head79>>2] = $and80;
	   $storemerge = $add$ptr66;$storemerge12 = $sub62;
	  } else {
	   $and87 = $0 & 1;
	   $or88 = $and87 | $add58;
	   $or89 = $or88 | 2;
	   HEAP32[$head>>2] = $or89;
	   $add$ptr91$sum = (($add58) + 4)|0;
	   $head92 = (($p) + ($add$ptr91$sum)|0);
	   $10 = HEAP32[$head92>>2]|0;
	   $or93 = $10 | 1;
	   HEAP32[$head92>>2] = $or93;
	   $storemerge = 0;$storemerge12 = 0;
	  }
	  HEAP32[((154792 + 8|0))>>2] = $storemerge12;
	  HEAP32[((154792 + 20|0))>>2] = $storemerge;
	  $newp$0 = $p;
	  STACKTOP = sp;return ($newp$0|0);
	 }
	 $and100 = $2 & 2;
	 $tobool101 = ($and100|0)==(0);
	 if (!($tobool101)) {
	  $newp$0 = 0;
	  STACKTOP = sp;return ($newp$0|0);
	 }
	 $and104 = $2 & -8;
	 $add105 = (($and104) + ($and))|0;
	 $cmp106 = ($add105>>>0)<($nb>>>0);
	 if ($cmp106) {
	  $newp$0 = 0;
	  STACKTOP = sp;return ($newp$0|0);
	 }
	 $sub110 = (($add105) - ($nb))|0;
	 $shr = $2 >>> 3;
	 $cmp111 = ($2>>>0)<(256);
	 do {
	  if ($cmp111) {
	   $add$ptr$sum10 = (($and) + 8)|0;
	   $fd = (($p) + ($add$ptr$sum10)|0);
	   $11 = HEAP32[$fd>>2]|0;
	   $add$ptr$sum11 = (($and) + 12)|0;
	   $bk = (($p) + ($add$ptr$sum11)|0);
	   $12 = HEAP32[$bk>>2]|0;
	   $shl = $shr << 1;
	   $arrayidx = ((154792 + ($shl<<2)|0) + 40|0);
	   $cmp114 = ($11|0)==($arrayidx|0);
	   if (!($cmp114)) {
	    $cmp116 = ($11>>>0)<($1>>>0);
	    if ($cmp116) {
	     _abort();
	     // unreachable;
	    }
	    $bk118 = (($11) + 12|0);
	    $13 = HEAP32[$bk118>>2]|0;
	    $cmp119 = ($13|0)==($add$ptr|0);
	    if (!($cmp119)) {
	     _abort();
	     // unreachable;
	    }
	   }
	   $cmp125 = ($12|0)==($11|0);
	   if ($cmp125) {
	    $shl127 = 1 << $shr;
	    $neg = $shl127 ^ -1;
	    $14 = HEAP32[154792>>2]|0;
	    $and128 = $14 & $neg;
	    HEAP32[154792>>2] = $and128;
	    break;
	   }
	   $cmp133 = ($12|0)==($arrayidx|0);
	   if ($cmp133) {
	    $fd148$pre = (($12) + 8|0);
	    $fd148$pre$phiZ2D = $fd148$pre;
	   } else {
	    $cmp136 = ($12>>>0)<($1>>>0);
	    if ($cmp136) {
	     _abort();
	     // unreachable;
	    }
	    $fd138 = (($12) + 8|0);
	    $15 = HEAP32[$fd138>>2]|0;
	    $cmp139 = ($15|0)==($add$ptr|0);
	    if ($cmp139) {
	     $fd148$pre$phiZ2D = $fd138;
	    } else {
	     _abort();
	     // unreachable;
	    }
	   }
	   $bk147 = (($11) + 12|0);
	   HEAP32[$bk147>>2] = $12;
	   HEAP32[$fd148$pre$phiZ2D>>2] = $11;
	  } else {
	   $add$ptr$sum = (($and) + 24)|0;
	   $parent = (($p) + ($add$ptr$sum)|0);
	   $16 = HEAP32[$parent>>2]|0;
	   $add$ptr$sum2 = (($and) + 12)|0;
	   $bk155 = (($p) + ($add$ptr$sum2)|0);
	   $17 = HEAP32[$bk155>>2]|0;
	   $cmp156 = ($17|0)==($add$ptr|0);
	   do {
	    if ($cmp156) {
	     $child$sum = (($and) + 20)|0;
	     $arrayidx179 = (($p) + ($child$sum)|0);
	     $21 = HEAP32[$arrayidx179>>2]|0;
	     $cmp180 = ($21|0)==(0|0);
	     if ($cmp180) {
	      $add$ptr$sum3 = (($and) + 16)|0;
	      $child = (($p) + ($add$ptr$sum3)|0);
	      $22 = HEAP32[$child>>2]|0;
	      $cmp183 = ($22|0)==(0|0);
	      if ($cmp183) {
	       $R$1 = 0;
	       break;
	      } else {
	       $R$0 = $22;$RP$0 = $child;
	      }
	     } else {
	      $R$0 = $21;$RP$0 = $arrayidx179;
	     }
	     while(1) {
	      $arrayidx186 = (($R$0) + 20|0);
	      $23 = HEAP32[$arrayidx186>>2]|0;
	      $cmp187 = ($23|0)==(0|0);
	      if (!($cmp187)) {
	       $R$0 = $23;$RP$0 = $arrayidx186;
	       continue;
	      }
	      $arrayidx190 = (($R$0) + 16|0);
	      $24 = HEAP32[$arrayidx190>>2]|0;
	      $cmp191 = ($24|0)==(0|0);
	      if ($cmp191) {
	       break;
	      } else {
	       $R$0 = $24;$RP$0 = $arrayidx190;
	      }
	     }
	     $cmp195 = ($RP$0>>>0)<($1>>>0);
	     if ($cmp195) {
	      _abort();
	      // unreachable;
	     } else {
	      HEAP32[$RP$0>>2] = 0;
	      $R$1 = $R$0;
	      break;
	     }
	    } else {
	     $add$ptr$sum9 = (($and) + 8)|0;
	     $fd159 = (($p) + ($add$ptr$sum9)|0);
	     $18 = HEAP32[$fd159>>2]|0;
	     $cmp162 = ($18>>>0)<($1>>>0);
	     if ($cmp162) {
	      _abort();
	      // unreachable;
	     }
	     $bk164 = (($18) + 12|0);
	     $19 = HEAP32[$bk164>>2]|0;
	     $cmp165 = ($19|0)==($add$ptr|0);
	     if (!($cmp165)) {
	      _abort();
	      // unreachable;
	     }
	     $fd167 = (($17) + 8|0);
	     $20 = HEAP32[$fd167>>2]|0;
	     $cmp168 = ($20|0)==($add$ptr|0);
	     if ($cmp168) {
	      HEAP32[$bk164>>2] = $17;
	      HEAP32[$fd167>>2] = $18;
	      $R$1 = $17;
	      break;
	     } else {
	      _abort();
	      // unreachable;
	     }
	    }
	   } while(0);
	   $cmp203 = ($16|0)==(0|0);
	   if (!($cmp203)) {
	    $add$ptr$sum7 = (($and) + 28)|0;
	    $index = (($p) + ($add$ptr$sum7)|0);
	    $25 = HEAP32[$index>>2]|0;
	    $arrayidx206 = ((154792 + ($25<<2)|0) + 304|0);
	    $26 = HEAP32[$arrayidx206>>2]|0;
	    $cmp207 = ($add$ptr|0)==($26|0);
	    if ($cmp207) {
	     HEAP32[$arrayidx206>>2] = $R$1;
	     $cond = ($R$1|0)==(0|0);
	     if ($cond) {
	      $shl214 = 1 << $25;
	      $neg215 = $shl214 ^ -1;
	      $27 = HEAP32[((154792 + 4|0))>>2]|0;
	      $and216 = $27 & $neg215;
	      HEAP32[((154792 + 4|0))>>2] = $and216;
	      break;
	     }
	    } else {
	     $28 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp220 = ($16>>>0)<($28>>>0);
	     if ($cmp220) {
	      _abort();
	      // unreachable;
	     }
	     $arrayidx226 = (($16) + 16|0);
	     $29 = HEAP32[$arrayidx226>>2]|0;
	     $cmp227 = ($29|0)==($add$ptr|0);
	     if ($cmp227) {
	      HEAP32[$arrayidx226>>2] = $R$1;
	     } else {
	      $arrayidx234 = (($16) + 20|0);
	      HEAP32[$arrayidx234>>2] = $R$1;
	     }
	     $cmp239 = ($R$1|0)==(0|0);
	     if ($cmp239) {
	      break;
	     }
	    }
	    $30 = HEAP32[((154792 + 16|0))>>2]|0;
	    $cmp243 = ($R$1>>>0)<($30>>>0);
	    if ($cmp243) {
	     _abort();
	     // unreachable;
	    }
	    $parent248 = (($R$1) + 24|0);
	    HEAP32[$parent248>>2] = $16;
	    $add$ptr$sum8 = (($and) + 16)|0;
	    $child249 = (($p) + ($add$ptr$sum8)|0);
	    $31 = HEAP32[$child249>>2]|0;
	    $cmp251 = ($31|0)==(0|0);
	    do {
	     if (!($cmp251)) {
	      $32 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp255 = ($31>>>0)<($32>>>0);
	      if ($cmp255) {
	       _abort();
	       // unreachable;
	      } else {
	       $arrayidx261 = (($R$1) + 16|0);
	       HEAP32[$arrayidx261>>2] = $31;
	       $parent262 = (($31) + 24|0);
	       HEAP32[$parent262>>2] = $R$1;
	       break;
	      }
	     }
	    } while(0);
	    $child249$sum = (($and) + 20)|0;
	    $arrayidx267 = (($p) + ($child249$sum)|0);
	    $33 = HEAP32[$arrayidx267>>2]|0;
	    $cmp268 = ($33|0)==(0|0);
	    if (!($cmp268)) {
	     $34 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp272 = ($33>>>0)<($34>>>0);
	     if ($cmp272) {
	      _abort();
	      // unreachable;
	     } else {
	      $arrayidx278 = (($R$1) + 20|0);
	      HEAP32[$arrayidx278>>2] = $33;
	      $parent279 = (($33) + 24|0);
	      HEAP32[$parent279>>2] = $R$1;
	      break;
	     }
	    }
	   }
	  }
	 } while(0);
	 $cmp288 = ($sub110>>>0)<(16);
	 if ($cmp288) {
	  $35 = HEAP32[$head>>2]|0;
	  $and294 = $35 & 1;
	  $or295 = $add105 | $and294;
	  $or296 = $or295 | 2;
	  HEAP32[$head>>2] = $or296;
	  $add$ptr298$sum6 = $add105 | 4;
	  $head299 = (($p) + ($add$ptr298$sum6)|0);
	  $36 = HEAP32[$head299>>2]|0;
	  $or300 = $36 | 1;
	  HEAP32[$head299>>2] = $or300;
	  $newp$0 = $p;
	  STACKTOP = sp;return ($newp$0|0);
	 } else {
	  $add$ptr303 = (($p) + ($nb)|0);
	  $37 = HEAP32[$head>>2]|0;
	  $and305 = $37 & 1;
	  $or306 = $and305 | $nb;
	  $or307 = $or306 | 2;
	  HEAP32[$head>>2] = $or307;
	  $add$ptr303$sum = (($nb) + 4)|0;
	  $head310 = (($p) + ($add$ptr303$sum)|0);
	  $or315 = $sub110 | 3;
	  HEAP32[$head310>>2] = $or315;
	  $add$ptr317$sum5 = $add105 | 4;
	  $head318 = (($p) + ($add$ptr317$sum5)|0);
	  $38 = HEAP32[$head318>>2]|0;
	  $or319 = $38 | 1;
	  HEAP32[$head318>>2] = $or319;
	  _dispose_chunk($add$ptr303,$sub110);
	  $newp$0 = $p;
	  STACKTOP = sp;return ($newp$0|0);
	 }
	 return 0|0;
	}
	function _realloc_in_place($oldmem,$bytes) {
	 $oldmem = $oldmem|0;
	 $bytes = $bytes|0;
	 var $add$ptr = 0, $add4 = 0, $and = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp6 = 0, $cond = 0, $oldmem$ = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($oldmem|0)==(0|0);
	 if ($cmp) {
	  STACKTOP = sp;return (0|0);
	 }
	 $cmp1 = ($bytes>>>0)>(4294967231);
	 if ($cmp1) {
	  $call = (___errno_location()|0);
	  HEAP32[$call>>2] = 12;
	  STACKTOP = sp;return (0|0);
	 }
	 $cmp3 = ($bytes>>>0)<(11);
	 if ($cmp3) {
	  $cond = 16;
	 } else {
	  $add4 = (($bytes) + 11)|0;
	  $and = $add4 & -8;
	  $cond = $and;
	 }
	 $add$ptr = (($oldmem) + -8|0);
	 $call5 = (_try_realloc_chunk($add$ptr,$cond)|0);
	 $cmp6 = ($call5|0)==($add$ptr|0);
	 $oldmem$ = $cmp6 ? $oldmem : 0;
	 STACKTOP = sp;return ($oldmem$|0);
	}
	function _memalign($alignment,$bytes) {
	 $alignment = $alignment|0;
	 $bytes = $bytes|0;
	 var $call = 0, $call1 = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($alignment>>>0)<(9);
	 if ($cmp) {
	  $call = (_malloc($bytes)|0);
	  $retval$0 = $call;
	 } else {
	  $call1 = (_internal_memalign($alignment,$bytes)|0);
	  $retval$0 = $call1;
	 }
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _internal_memalign($alignment,$bytes) {
	 $alignment = $alignment|0;
	 $bytes = $bytes|0;
	 var $$alignment = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$0 = 0, $add$ptr = 0, $add$ptr25 = 0, $add$ptr28 = 0, $add$ptr28$sum = 0, $add$ptr32 = 0, $add$ptr52$sum = 0, $add$ptr60$sum = 0;
	 var $add$ptr75 = 0, $add$ptr75$sum1 = 0, $add$ptr89$sum2 = 0, $add$ptr94 = 0, $add12 = 0, $add14 = 0, $add44 = 0, $add71 = 0, $alignment$addr$1 = 0, $and = 0, $and13 = 0, $and21 = 0, $and27 = 0, $and38 = 0, $and41 = 0, $and49 = 0, $and56 = 0, $and66 = 0, $and70 = 0, $and77 = 0;
	 var $call = 0, $call17 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp18 = 0, $cmp22 = 0, $cmp29 = 0, $cmp3 = 0, $cmp42 = 0, $cmp6 = 0, $cmp67 = 0, $cmp72 = 0, $cond = 0, $cond34 = 0, $head = 0, $head46 = 0, $head48 = 0, $head53 = 0, $head61 = 0;
	 var $head65 = 0, $head82 = 0, $head90 = 0, $mem$0 = 0, $or = 0, $or50 = 0, $or54 = 0, $or57 = 0, $or58 = 0, $or62 = 0, $or78 = 0, $or79 = 0, $or87 = 0, $or91 = 0, $p$0 = 0, $shl = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast35 = 0, $sub$ptr$rhs$cast = 0;
	 var $sub$ptr$sub = 0, $sub$ptr$sub37 = 0, $sub16 = 0, $sub20 = 0, $sub26 = 0, $sub39 = 0, $sub5 = 0, $sub74 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($alignment>>>0)<(16);
	 $$alignment = $cmp ? 16 : $alignment;
	 $sub = (($$alignment) + -1)|0;
	 $and = $sub & $$alignment;
	 $cmp1 = ($and|0)==(0);
	 if ($cmp1) {
	  $alignment$addr$1 = $$alignment;
	 } else {
	  $a$0 = 16;
	  while(1) {
	   $cmp3 = ($a$0>>>0)<($$alignment>>>0);
	   $shl = $a$0 << 1;
	   if ($cmp3) {
	    $a$0 = $shl;
	   } else {
	    $alignment$addr$1 = $a$0;
	    break;
	   }
	  }
	 }
	 $sub5 = (-64 - ($alignment$addr$1))|0;
	 $cmp6 = ($sub5>>>0)>($bytes>>>0);
	 if (!($cmp6)) {
	  $call = (___errno_location()|0);
	  HEAP32[$call>>2] = 12;
	  $mem$0 = 0;
	  STACKTOP = sp;return ($mem$0|0);
	 }
	 $cmp11 = ($bytes>>>0)<(11);
	 if ($cmp11) {
	  $cond = 16;
	 } else {
	  $add12 = (($bytes) + 11)|0;
	  $and13 = $add12 & -8;
	  $cond = $and13;
	 }
	 $add14 = (($alignment$addr$1) + 12)|0;
	 $sub16 = (($add14) + ($cond))|0;
	 $call17 = (_malloc($sub16)|0);
	 $cmp18 = ($call17|0)==(0|0);
	 if ($cmp18) {
	  $mem$0 = 0;
	  STACKTOP = sp;return ($mem$0|0);
	 }
	 $add$ptr = (($call17) + -8|0);
	 $0 = $call17;
	 $sub20 = (($alignment$addr$1) + -1)|0;
	 $and21 = $0 & $sub20;
	 $cmp22 = ($and21|0)==(0);
	 do {
	  if ($cmp22) {
	   $p$0 = $add$ptr;
	  } else {
	   $add$ptr25 = (($call17) + ($sub20)|0);
	   $1 = $add$ptr25;
	   $sub26 = (0 - ($alignment$addr$1))|0;
	   $and27 = $1 & $sub26;
	   $2 = $and27;
	   $add$ptr28 = (($2) + -8|0);
	   $sub$ptr$lhs$cast = $add$ptr28;
	   $sub$ptr$rhs$cast = $add$ptr;
	   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	   $cmp29 = ($sub$ptr$sub>>>0)>(15);
	   if ($cmp29) {
	    $cond34 = $add$ptr28;
	   } else {
	    $add$ptr28$sum = (($alignment$addr$1) + -8)|0;
	    $add$ptr32 = (($2) + ($add$ptr28$sum)|0);
	    $cond34 = $add$ptr32;
	   }
	   $sub$ptr$lhs$cast35 = $cond34;
	   $sub$ptr$sub37 = (($sub$ptr$lhs$cast35) - ($sub$ptr$rhs$cast))|0;
	   $head = (($call17) + -4|0);
	   $3 = HEAP32[$head>>2]|0;
	   $and38 = $3 & -8;
	   $sub39 = (($and38) - ($sub$ptr$sub37))|0;
	   $and41 = $3 & 3;
	   $cmp42 = ($and41|0)==(0);
	   if ($cmp42) {
	    $4 = HEAP32[$add$ptr>>2]|0;
	    $add44 = (($4) + ($sub$ptr$sub37))|0;
	    HEAP32[$cond34>>2] = $add44;
	    $head46 = (($cond34) + 4|0);
	    HEAP32[$head46>>2] = $sub39;
	    $p$0 = $cond34;
	    break;
	   } else {
	    $head48 = (($cond34) + 4|0);
	    $5 = HEAP32[$head48>>2]|0;
	    $and49 = $5 & 1;
	    $or = $sub39 | $and49;
	    $or50 = $or | 2;
	    HEAP32[$head48>>2] = $or50;
	    $add$ptr52$sum = (($sub39) + 4)|0;
	    $head53 = (($cond34) + ($add$ptr52$sum)|0);
	    $6 = HEAP32[$head53>>2]|0;
	    $or54 = $6 | 1;
	    HEAP32[$head53>>2] = $or54;
	    $7 = HEAP32[$head>>2]|0;
	    $and56 = $7 & 1;
	    $or57 = $sub$ptr$sub37 | $and56;
	    $or58 = $or57 | 2;
	    HEAP32[$head>>2] = $or58;
	    $add$ptr60$sum = (($sub$ptr$sub37) + -4)|0;
	    $head61 = (($call17) + ($add$ptr60$sum)|0);
	    $8 = HEAP32[$head61>>2]|0;
	    $or62 = $8 | 1;
	    HEAP32[$head61>>2] = $or62;
	    _dispose_chunk($add$ptr,$sub$ptr$sub37);
	    $p$0 = $cond34;
	    break;
	   }
	  }
	 } while(0);
	 $head65 = (($p$0) + 4|0);
	 $9 = HEAP32[$head65>>2]|0;
	 $and66 = $9 & 3;
	 $cmp67 = ($and66|0)==(0);
	 if (!($cmp67)) {
	  $and70 = $9 & -8;
	  $add71 = (($cond) + 16)|0;
	  $cmp72 = ($and70>>>0)>($add71>>>0);
	  if ($cmp72) {
	   $sub74 = (($and70) - ($cond))|0;
	   $add$ptr75 = (($p$0) + ($cond)|0);
	   $and77 = $9 & 1;
	   $or78 = $cond | $and77;
	   $or79 = $or78 | 2;
	   HEAP32[$head65>>2] = $or79;
	   $add$ptr75$sum1 = $cond | 4;
	   $head82 = (($p$0) + ($add$ptr75$sum1)|0);
	   $or87 = $sub74 | 3;
	   HEAP32[$head82>>2] = $or87;
	   $add$ptr89$sum2 = $and70 | 4;
	   $head90 = (($p$0) + ($add$ptr89$sum2)|0);
	   $10 = HEAP32[$head90>>2]|0;
	   $or91 = $10 | 1;
	   HEAP32[$head90>>2] = $or91;
	   _dispose_chunk($add$ptr75,$sub74);
	  }
	 }
	 $add$ptr94 = (($p$0) + 8|0);
	 $mem$0 = $add$ptr94;
	 STACKTOP = sp;return ($mem$0|0);
	}
	function _posix_memalign($pp,$alignment,$bytes) {
	 $pp = $pp|0;
	 $alignment = $alignment|0;
	 $bytes = $bytes|0;
	 var $$alignment = 0, $and = 0, $call = 0, $call12 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp16 = 0, $cmp2 = 0, $cmp4 = 0, $cmp8 = 0, $div = 0, $mem$0 = 0, $or$cond = 0, $rem = 0, $retval$0 = 0, $sub = 0, $sub7 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($alignment|0)==(8);
	 if ($cmp) {
	  $call = (_malloc($bytes)|0);
	  $mem$0 = $call;
	  label = 7;
	 } else {
	  $div = $alignment >>> 2;
	  $rem = $alignment & 3;
	  $cmp1 = ($rem|0)!=(0);
	  $cmp2 = ($div|0)==(0);
	  $or$cond = $cmp1 | $cmp2;
	  if ($or$cond) {
	   $retval$0 = 22;
	  } else {
	   $sub = (($div) + 1073741823)|0;
	   $and = $sub & $div;
	   $cmp4 = ($and|0)==(0);
	   if ($cmp4) {
	    $sub7 = (-64 - ($alignment))|0;
	    $cmp8 = ($sub7>>>0)<($bytes>>>0);
	    if ($cmp8) {
	     $retval$0 = 12;
	    } else {
	     $cmp10 = ($alignment>>>0)<(16);
	     $$alignment = $cmp10 ? 16 : $alignment;
	     $call12 = (_internal_memalign($$alignment,$bytes)|0);
	     $mem$0 = $call12;
	     label = 7;
	    }
	   } else {
	    $retval$0 = 22;
	   }
	  }
	 }
	 if ((label|0) == 7) {
	  $cmp16 = ($mem$0|0)==(0|0);
	  if ($cmp16) {
	   $retval$0 = 12;
	  } else {
	   HEAP32[$pp>>2] = $mem$0;
	   $retval$0 = 0;
	  }
	 }
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _valloc($bytes) {
	 $bytes = $bytes|0;
	 var $0 = 0, $1 = 0, $and$i = 0, $and7$i = 0, $call$i = 0, $call1 = 0, $call6$i = 0, $cmp = 0, $cmp1$i = 0, $sub$i = 0, $xor$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[155264>>2]|0;
	 $cmp = ($0|0)==(0);
	 if (!($cmp)) {
	  $1 = HEAP32[((155264 + 4|0))>>2]|0;
	  $call1 = (_memalign($1,$bytes)|0);
	  STACKTOP = sp;return ($call1|0);
	 }
	 $call$i = (_sysconf(30)|0);
	 $sub$i = (($call$i) + -1)|0;
	 $and$i = $sub$i & $call$i;
	 $cmp1$i = ($and$i|0)==(0);
	 if (!($cmp1$i)) {
	  _abort();
	  // unreachable;
	 }
	 HEAP32[((155264 + 8|0))>>2] = $call$i;
	 HEAP32[((155264 + 4|0))>>2] = $call$i;
	 HEAP32[((155264 + 12|0))>>2] = -1;
	 HEAP32[((155264 + 16|0))>>2] = -1;
	 HEAP32[((155264 + 20|0))>>2] = 0;
	 HEAP32[((154792 + 444|0))>>2] = 0;
	 $call6$i = (_time((0|0))|0);
	 $xor$i = $call6$i & -16;
	 $and7$i = $xor$i ^ 1431655768;
	 HEAP32[155264>>2] = $and7$i;
	 $1 = HEAP32[((155264 + 4|0))>>2]|0;
	 $call1 = (_memalign($1,$bytes)|0);
	 STACKTOP = sp;return ($call1|0);
	}
	function _pvalloc($bytes) {
	 $bytes = $bytes|0;
	 var $0 = 0, $1 = 0, $add = 0, $and = 0, $and$i = 0, $and7$i = 0, $call$i = 0, $call2 = 0, $call6$i = 0, $cmp = 0, $cmp1$i = 0, $neg = 0, $sub = 0, $sub$i = 0, $xor$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[155264>>2]|0;
	 $cmp = ($0|0)==(0);
	 do {
	  if ($cmp) {
	   $call$i = (_sysconf(30)|0);
	   $sub$i = (($call$i) + -1)|0;
	   $and$i = $sub$i & $call$i;
	   $cmp1$i = ($and$i|0)==(0);
	   if ($cmp1$i) {
	    HEAP32[((155264 + 8|0))>>2] = $call$i;
	    HEAP32[((155264 + 4|0))>>2] = $call$i;
	    HEAP32[((155264 + 12|0))>>2] = -1;
	    HEAP32[((155264 + 16|0))>>2] = -1;
	    HEAP32[((155264 + 20|0))>>2] = 0;
	    HEAP32[((154792 + 444|0))>>2] = 0;
	    $call6$i = (_time((0|0))|0);
	    $xor$i = $call6$i & -16;
	    $and7$i = $xor$i ^ 1431655768;
	    HEAP32[155264>>2] = $and7$i;
	    break;
	   } else {
	    _abort();
	    // unreachable;
	   }
	  }
	 } while(0);
	 $1 = HEAP32[((155264 + 4|0))>>2]|0;
	 $add = (($bytes) + -1)|0;
	 $sub = (($add) + ($1))|0;
	 $neg = (0 - ($1))|0;
	 $and = $sub & $neg;
	 $call2 = (_memalign($1,$and)|0);
	 STACKTOP = sp;return ($call2|0);
	}
	function _independent_calloc($n_elements,$elem_size,$chunks) {
	 $n_elements = $n_elements|0;
	 $elem_size = $elem_size|0;
	 $chunks = $chunks|0;
	 var $call = 0, $sz = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $sz = sp;
	 HEAP32[$sz>>2] = $elem_size;
	 $call = (_ialloc($n_elements,$sz,3,$chunks)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _ialloc($n_elements,$sizes,$opts,$chunks) {
	 $n_elements = $n_elements|0;
	 $sizes = $sizes|0;
	 $opts = $opts|0;
	 $chunks = $chunks|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $add$ptr56$sum = 0, $add$ptr58 = 0, $add$ptr63 = 0, $add$ptr63$us = 0, $add$ptr86 = 0, $add$ptr86$sum = 0, $add$ptr86$us = 0, $add$ptr86$us$sum = 0, $add10 = 0, $add19 = 0, $add31 = 0, $add35 = 0, $add37 = 0, $add77$us = 0;
	 var $and = 0, $and$i = 0, $and12 = 0, $and20 = 0, $and32 = 0, $and47 = 0, $and48 = 0, $and7$i = 0, $and78$us = 0, $array_size$0 = 0, $arrayidx = 0, $arrayidx64 = 0, $arrayidx64$us = 0, $arrayidx71$us = 0, $call$i = 0, $call39 = 0, $call6 = 0, $call6$i = 0, $cmp = 0, $cmp1 = 0;
	 var $cmp1$i = 0, $cmp15 = 0, $cmp2 = 0, $cmp25 = 0, $cmp26 = 0, $cmp44 = 0, $cmp54 = 0, $cmp66 = 0, $cmp66$us = 0, $cmp662 = 0, $cmp68 = 0, $cmp72$us = 0, $cmp8 = 0, $cond22 = 0, $cond34 = 0, $contents_size$08 = 0, $contents_size$1 = 0, $element_size$0 = 0, $head = 0, $head60 = 0;
	 var $head85 = 0, $head85$us = 0, $head90 = 0, $i$09 = 0, $i$15 = 0, $i$15$us = 0, $inc = 0, $inc93 = 0, $inc93$us = 0, $marray$0 = 0, $marray$1 = 0, $mul = 0, $mul23 = 0, $or59 = 0, $or84 = 0, $or84$us = 0, $or89 = 0, $p$0$in$lcssa = 0, $p$0$in3 = 0, $p$0$in3$us = 0;
	 var $remainder_size$0 = 0, $remainder_size$1$lcssa = 0, $remainder_size$14 = 0, $remainder_size$14$us = 0, $retval$0 = 0, $size$0$us = 0, $sub = 0, $sub$i = 0, $sub51 = 0, $sub52 = 0, $sub57 = 0, $sub65 = 0, $sub82 = 0, $sub82$us = 0, $tobool13 = 0, $tobool49 = 0, $xor$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[155264>>2]|0;
	 $cmp = ($0|0)==(0);
	 do {
	  if ($cmp) {
	   $call$i = (_sysconf(30)|0);
	   $sub$i = (($call$i) + -1)|0;
	   $and$i = $sub$i & $call$i;
	   $cmp1$i = ($and$i|0)==(0);
	   if ($cmp1$i) {
	    HEAP32[((155264 + 8|0))>>2] = $call$i;
	    HEAP32[((155264 + 4|0))>>2] = $call$i;
	    HEAP32[((155264 + 12|0))>>2] = -1;
	    HEAP32[((155264 + 16|0))>>2] = -1;
	    HEAP32[((155264 + 20|0))>>2] = 0;
	    HEAP32[((154792 + 444|0))>>2] = 0;
	    $call6$i = (_time((0|0))|0);
	    $xor$i = $call6$i & -16;
	    $and7$i = $xor$i ^ 1431655768;
	    HEAP32[155264>>2] = $and7$i;
	    break;
	   } else {
	    _abort();
	    // unreachable;
	   }
	  }
	 } while(0);
	 $cmp1 = ($chunks|0)==(0|0);
	 $cmp2 = ($n_elements|0)==(0);
	 do {
	  if ($cmp1) {
	   if ($cmp2) {
	    $call6 = (_malloc(0)|0);
	    $retval$0 = $call6;
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    $mul = $n_elements << 2;
	    $cmp8 = ($mul>>>0)<(11);
	    if ($cmp8) {
	     $array_size$0 = 16;$marray$0 = 0;
	     break;
	    }
	    $add10 = (($mul) + 11)|0;
	    $and = $add10 & -8;
	    $array_size$0 = $and;$marray$0 = 0;
	    break;
	   }
	  } else {
	   if ($cmp2) {
	    $retval$0 = $chunks;
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    $array_size$0 = 0;$marray$0 = $chunks;
	   }
	  }
	 } while(0);
	 $and12 = $opts & 1;
	 $tobool13 = ($and12|0)==(0);
	 if ($tobool13) {
	  if ($cmp2) {
	   $contents_size$1 = 0;$element_size$0 = 0;
	  } else {
	   $contents_size$08 = 0;$i$09 = 0;
	   while(1) {
	    $arrayidx = (($sizes) + ($i$09<<2)|0);
	    $2 = HEAP32[$arrayidx>>2]|0;
	    $cmp26 = ($2>>>0)<(11);
	    if ($cmp26) {
	     $cond34 = 16;
	    } else {
	     $add31 = (($2) + 11)|0;
	     $and32 = $add31 & -8;
	     $cond34 = $and32;
	    }
	    $add35 = (($cond34) + ($contents_size$08))|0;
	    $inc = (($i$09) + 1)|0;
	    $cmp25 = ($inc|0)==($n_elements|0);
	    if ($cmp25) {
	     $contents_size$1 = $add35;$element_size$0 = 0;
	     break;
	    } else {
	     $contents_size$08 = $add35;$i$09 = $inc;
	    }
	   }
	  }
	 } else {
	  $1 = HEAP32[$sizes>>2]|0;
	  $cmp15 = ($1>>>0)<(11);
	  if ($cmp15) {
	   $cond22 = 16;
	  } else {
	   $add19 = (($1) + 11)|0;
	   $and20 = $add19 & -8;
	   $cond22 = $and20;
	  }
	  $mul23 = Math_imul($cond22, $n_elements)|0;
	  $contents_size$1 = $mul23;$element_size$0 = $cond22;
	 }
	 $add37 = (($array_size$0) + -4)|0;
	 $sub = (($add37) + ($contents_size$1))|0;
	 $call39 = (_malloc($sub)|0);
	 $cmp44 = ($call39|0)==(0|0);
	 if ($cmp44) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $add$ptr = (($call39) + -8|0);
	 $head = (($call39) + -4|0);
	 $3 = HEAP32[$head>>2]|0;
	 $and47 = $3 & -8;
	 $and48 = $opts & 2;
	 $tobool49 = ($and48|0)==(0);
	 if (!($tobool49)) {
	  $sub51 = (-4 - ($array_size$0))|0;
	  $sub52 = (($sub51) + ($and47))|0;
	  _memset(($call39|0),0,($sub52|0))|0;
	 }
	 $cmp54 = ($marray$0|0)==(0|0);
	 if ($cmp54) {
	  $sub57 = (($and47) - ($contents_size$1))|0;
	  $add$ptr58 = (($call39) + ($contents_size$1)|0);
	  $or59 = $sub57 | 3;
	  $add$ptr56$sum = (($contents_size$1) + -4)|0;
	  $head60 = (($call39) + ($add$ptr56$sum)|0);
	  HEAP32[$head60>>2] = $or59;
	  $marray$1 = $add$ptr58;$remainder_size$0 = $contents_size$1;
	 } else {
	  $marray$1 = $marray$0;$remainder_size$0 = $and47;
	 }
	 HEAP32[$marray$1>>2] = $call39;
	 $sub65 = (($n_elements) + -1)|0;
	 $cmp662 = ($sub65|0)==(0);
	 L38: do {
	  if ($cmp662) {
	   $p$0$in$lcssa = $add$ptr;$remainder_size$1$lcssa = $remainder_size$0;
	  } else {
	   $cmp68 = ($element_size$0|0)==(0);
	   if ($cmp68) {
	    $i$15$us = 0;$p$0$in3$us = $add$ptr;$remainder_size$14$us = $remainder_size$0;
	   } else {
	    $i$15 = 0;$p$0$in3 = $add$ptr;$remainder_size$14 = $remainder_size$0;
	    while(1) {
	     $sub82 = (($remainder_size$14) - ($element_size$0))|0;
	     $or84 = $element_size$0 | 3;
	     $head85 = (($p$0$in3) + 4|0);
	     HEAP32[$head85>>2] = $or84;
	     $add$ptr86 = (($p$0$in3) + ($element_size$0)|0);
	     $inc93 = (($i$15) + 1)|0;
	     $add$ptr86$sum = (($element_size$0) + 8)|0;
	     $add$ptr63 = (($p$0$in3) + ($add$ptr86$sum)|0);
	     $arrayidx64 = (($marray$1) + ($inc93<<2)|0);
	     HEAP32[$arrayidx64>>2] = $add$ptr63;
	     $cmp66 = ($inc93|0)==($sub65|0);
	     if ($cmp66) {
	      $p$0$in$lcssa = $add$ptr86;$remainder_size$1$lcssa = $sub82;
	      break L38;
	     } else {
	      $i$15 = $inc93;$p$0$in3 = $add$ptr86;$remainder_size$14 = $sub82;
	     }
	    }
	   }
	   while(1) {
	    $arrayidx71$us = (($sizes) + ($i$15$us<<2)|0);
	    $4 = HEAP32[$arrayidx71$us>>2]|0;
	    $cmp72$us = ($4>>>0)<(11);
	    if ($cmp72$us) {
	     $size$0$us = 16;
	    } else {
	     $add77$us = (($4) + 11)|0;
	     $and78$us = $add77$us & -8;
	     $size$0$us = $and78$us;
	    }
	    $sub82$us = (($remainder_size$14$us) - ($size$0$us))|0;
	    $or84$us = $size$0$us | 3;
	    $head85$us = (($p$0$in3$us) + 4|0);
	    HEAP32[$head85$us>>2] = $or84$us;
	    $add$ptr86$us = (($p$0$in3$us) + ($size$0$us)|0);
	    $inc93$us = (($i$15$us) + 1)|0;
	    $add$ptr86$us$sum = (($size$0$us) + 8)|0;
	    $add$ptr63$us = (($p$0$in3$us) + ($add$ptr86$us$sum)|0);
	    $arrayidx64$us = (($marray$1) + ($inc93$us<<2)|0);
	    HEAP32[$arrayidx64$us>>2] = $add$ptr63$us;
	    $cmp66$us = ($inc93$us|0)==($sub65|0);
	    if ($cmp66$us) {
	     $p$0$in$lcssa = $add$ptr86$us;$remainder_size$1$lcssa = $sub82$us;
	     break;
	    } else {
	     $i$15$us = $inc93$us;$p$0$in3$us = $add$ptr86$us;$remainder_size$14$us = $sub82$us;
	    }
	   }
	  }
	 } while(0);
	 $or89 = $remainder_size$1$lcssa | 3;
	 $head90 = (($p$0$in$lcssa) + 4|0);
	 HEAP32[$head90>>2] = $or89;
	 $retval$0 = $marray$1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _independent_comalloc($n_elements,$sizes,$chunks) {
	 $n_elements = $n_elements|0;
	 $sizes = $sizes|0;
	 $chunks = $chunks|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_ialloc($n_elements,$sizes,0,$chunks)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _bulk_free($array,$nelem) {
	 $array = $array|0;
	 $nelem = $nelem|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $a$07$i = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr$sum$i = 0, $add$ptr10$sum$i = 0, $add$ptr10$sum23$i = 0, $add$ptr12$i = 0, $add$ptr21$sum$i = 0, $add$ptr7$i = 0, $and$i = 0, $and16$i = 0, $and18$i = 0, $and4$i = 0, $and91$i = 0;
	 var $arrayidx$i = 0, $cmp$i = 0, $cmp1$i = 0, $cmp11$i = 0, $cmp13$i = 0, $cmp2$i = 0, $cmp5$i = 0, $cmp6$i = 0, $head$i = 0, $head15$i = 0, $head22$i = 0, $incdec$ptr$pre$i = 0, $incdec$ptr$pre$phi$iZZ2D = 0, $or$i = 0, $or19$i = 0, $or23$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $arrayidx$i = (($array) + ($nelem<<2)|0);
	 $cmp6$i = ($nelem|0)==(0);
	 if ($cmp6$i) {
	  STACKTOP = sp;return 0;
	 } else {
	  $a$07$i = $array;
	 }
	 L3: while(1) {
	  $0 = HEAP32[$a$07$i>>2]|0;
	  $cmp1$i = ($0|0)==(0|0);
	  do {
	   if ($cmp1$i) {
	    $incdec$ptr$pre$i = (($a$07$i) + 4|0);
	    $incdec$ptr$pre$phi$iZZ2D = $incdec$ptr$pre$i;
	   } else {
	    $add$ptr$i = (($0) + -8|0);
	    $head$i = (($0) + -4|0);
	    $1 = HEAP32[$head$i>>2]|0;
	    $and$i = $1 & -8;
	    HEAP32[$a$07$i>>2] = 0;
	    $2 = HEAP32[((154792 + 16|0))>>2]|0;
	    $cmp2$i = ($add$ptr$i>>>0)<($2>>>0);
	    if ($cmp2$i) {
	     label = 10;
	     break L3;
	    }
	    $and4$i = $1 & 3;
	    $cmp5$i = ($and4$i|0)==(1);
	    if ($cmp5$i) {
	     label = 10;
	     break L3;
	    }
	    $add$ptr7$i = (($a$07$i) + 4|0);
	    $and91$i = (($1) + -8)|0;
	    $add$ptr$sum$i = $and91$i & -8;
	    $cmp11$i = ($add$ptr7$i|0)==($arrayidx$i|0);
	    if (!($cmp11$i)) {
	     $3 = HEAP32[$add$ptr7$i>>2]|0;
	     $add$ptr10$sum$i = (($add$ptr$sum$i) + 8)|0;
	     $add$ptr12$i = (($0) + ($add$ptr10$sum$i)|0);
	     $cmp13$i = ($3|0)==($add$ptr12$i|0);
	     if ($cmp13$i) {
	      $add$ptr10$sum23$i = $add$ptr$sum$i | 4;
	      $head15$i = (($0) + ($add$ptr10$sum23$i)|0);
	      $4 = HEAP32[$head15$i>>2]|0;
	      $and16$i = $4 & -8;
	      $add$i = (($and16$i) + ($and$i))|0;
	      $and18$i = $1 & 1;
	      $or$i = $and18$i | $add$i;
	      $or19$i = $or$i | 2;
	      HEAP32[$head$i>>2] = $or19$i;
	      $add$ptr21$sum$i = (($add$i) + -4)|0;
	      $head22$i = (($0) + ($add$ptr21$sum$i)|0);
	      $5 = HEAP32[$head22$i>>2]|0;
	      $or23$i = $5 | 1;
	      HEAP32[$head22$i>>2] = $or23$i;
	      HEAP32[$add$ptr7$i>>2] = $0;
	      $incdec$ptr$pre$phi$iZZ2D = $add$ptr7$i;
	      break;
	     }
	    }
	    _dispose_chunk($add$ptr$i,$and$i);
	    $incdec$ptr$pre$phi$iZZ2D = $add$ptr7$i;
	   }
	  } while(0);
	  $cmp$i = ($incdec$ptr$pre$phi$iZZ2D|0)==($arrayidx$i|0);
	  if ($cmp$i) {
	   label = 12;
	   break;
	  } else {
	   $a$07$i = $incdec$ptr$pre$phi$iZZ2D;
	  }
	 }
	 if ((label|0) == 10) {
	  _abort();
	  // unreachable;
	 }
	 else if ((label|0) == 12) {
	  STACKTOP = sp;return 0;
	 }
	 return 0|0;
	}
	function _malloc_trim($pad) {
	 $pad = $pad|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0;
	 var $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i3$i = 0, $add$ptr4$i$i = 0, $add$ptr4$sum$i$i = 0, $add$ptr6$sum$i$i = 0, $add7$i = 0, $and$i = 0, $and$i4$i = 0, $and$i5 = 0, $and3$i$i = 0, $and7$i = 0, $call$i = 0, $call20$i = 0, $call24$i = 0, $call25$i = 0, $call6$i = 0, $cmp = 0, $cmp$i1$i = 0, $cmp$i5$i = 0;
	 var $cmp1$i = 0, $cmp1$i2 = 0, $cmp17$i = 0, $cmp2$i = 0, $cmp2$i$i = 0, $cmp21$i = 0, $cmp26$i = 0, $cmp28$i = 0, $cmp3$i = 0, $cmp34$i = 0, $cmp47$i = 0, $cond$i$i = 0, $div$i = 0, $head$i$i = 0, $head7$i$i = 0, $mul$i = 0, $next$i$i = 0, $or$cond$i = 0, $or$i$i = 0, $released$2$i = 0;
	 var $sflags$i = 0, $size$i$i = 0, $sp$0$i$i = 0, $sub$i = 0, $sub$i4 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $sub19$i = 0, $sub19$mul$i = 0, $sub23$i = 0, $sub37$i = 0, $sub38$i = 0, $sub41$i = 0, $sub5$i$i = 0, $sub6$i = 0, $sub8$i = 0, $tobool11$i = 0, $xor$i = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[155264>>2]|0;
	 $cmp = ($0|0)==(0);
	 do {
	  if ($cmp) {
	   $call$i = (_sysconf(30)|0);
	   $sub$i = (($call$i) + -1)|0;
	   $and$i = $sub$i & $call$i;
	   $cmp1$i = ($and$i|0)==(0);
	   if ($cmp1$i) {
	    HEAP32[((155264 + 8|0))>>2] = $call$i;
	    HEAP32[((155264 + 4|0))>>2] = $call$i;
	    HEAP32[((155264 + 12|0))>>2] = -1;
	    HEAP32[((155264 + 16|0))>>2] = -1;
	    HEAP32[((155264 + 20|0))>>2] = 0;
	    HEAP32[((154792 + 444|0))>>2] = 0;
	    $call6$i = (_time((0|0))|0);
	    $xor$i = $call6$i & -16;
	    $and7$i = $xor$i ^ 1431655768;
	    HEAP32[155264>>2] = $and7$i;
	    break;
	   } else {
	    _abort();
	    // unreachable;
	   }
	  }
	 } while(0);
	 $cmp1$i2 = ($pad>>>0)<(4294967232);
	 if (!($cmp1$i2)) {
	  $released$2$i = 0;
	  STACKTOP = sp;return ($released$2$i|0);
	 }
	 $1 = HEAP32[((154792 + 24|0))>>2]|0;
	 $cmp2$i = ($1|0)==(0|0);
	 if ($cmp2$i) {
	  $released$2$i = 0;
	  STACKTOP = sp;return ($released$2$i|0);
	 }
	 $add$i = (($pad) + 40)|0;
	 $2 = HEAP32[((154792 + 12|0))>>2]|0;
	 $cmp3$i = ($2>>>0)>($add$i>>>0);
	 if ($cmp3$i) {
	  $3 = HEAP32[((155264 + 8|0))>>2]|0;
	  $sub6$i = (-41 - ($pad))|0;
	  $sub$i4 = (($sub6$i) + ($2))|0;
	  $add7$i = (($sub$i4) + ($3))|0;
	  $div$i = (($add7$i>>>0) / ($3>>>0))&-1;
	  $sp$0$i$i = ((154792 + 448|0));
	  while(1) {
	   $4 = HEAP32[$sp$0$i$i>>2]|0;
	   $cmp$i1$i = ($4>>>0)>($1>>>0);
	   if (!($cmp$i1$i)) {
	    $size$i$i = (($sp$0$i$i) + 4|0);
	    $5 = HEAP32[$size$i$i>>2]|0;
	    $add$ptr$i$i = (($4) + ($5)|0);
	    $cmp2$i$i = ($add$ptr$i$i>>>0)>($1>>>0);
	    if ($cmp2$i$i) {
	     break;
	    }
	   }
	   $next$i$i = (($sp$0$i$i) + 8|0);
	   $6 = HEAP32[$next$i$i>>2]|0;
	   $sp$0$i$i = $6;
	  }
	  $sub8$i = (($div$i) + -1)|0;
	  $mul$i = Math_imul($sub8$i, $3)|0;
	  $sflags$i = (($sp$0$i$i) + 12|0);
	  $7 = HEAP32[$sflags$i>>2]|0;
	  $and$i5 = $7 & 8;
	  $tobool11$i = ($and$i5|0)==(0);
	  if ($tobool11$i) {
	   $call20$i = (_sbrk(0)|0);
	   $8 = HEAP32[$sp$0$i$i>>2]|0;
	   $9 = HEAP32[$size$i$i>>2]|0;
	   $add$ptr$i = (($8) + ($9)|0);
	   $cmp21$i = ($call20$i|0)==($add$ptr$i|0);
	   if ($cmp21$i) {
	    $sub19$i = (-2147483648 - ($3))|0;
	    $cmp17$i = ($mul$i>>>0)>(2147483646);
	    $sub19$mul$i = $cmp17$i ? $sub19$i : $mul$i;
	    $sub23$i = (0 - ($sub19$mul$i))|0;
	    $call24$i = (_sbrk(($sub23$i|0))|0);
	    $call25$i = (_sbrk(0)|0);
	    $cmp26$i = ($call24$i|0)!=((-1)|0);
	    $cmp28$i = ($call25$i>>>0)<($call20$i>>>0);
	    $or$cond$i = $cmp26$i & $cmp28$i;
	    if ($or$cond$i) {
	     $sub$ptr$lhs$cast$i = $call20$i;
	     $sub$ptr$rhs$cast$i = $call25$i;
	     $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	     $cmp34$i = ($call20$i|0)==($call25$i|0);
	     if (!($cmp34$i)) {
	      $10 = HEAP32[$size$i$i>>2]|0;
	      $sub37$i = (($10) - ($sub$ptr$sub$i))|0;
	      HEAP32[$size$i$i>>2] = $sub37$i;
	      $11 = HEAP32[((154792 + 432|0))>>2]|0;
	      $sub38$i = (($11) - ($sub$ptr$sub$i))|0;
	      HEAP32[((154792 + 432|0))>>2] = $sub38$i;
	      $12 = HEAP32[((154792 + 24|0))>>2]|0;
	      $13 = HEAP32[((154792 + 12|0))>>2]|0;
	      $sub41$i = (($13) - ($sub$ptr$sub$i))|0;
	      $add$ptr$i3$i = (($12) + 8|0);
	      $14 = $add$ptr$i3$i;
	      $and$i4$i = $14 & 7;
	      $cmp$i5$i = ($and$i4$i|0)==(0);
	      if ($cmp$i5$i) {
	       $cond$i$i = 0;
	      } else {
	       $15 = (0 - ($14))|0;
	       $and3$i$i = $15 & 7;
	       $cond$i$i = $and3$i$i;
	      }
	      $add$ptr4$i$i = (($12) + ($cond$i$i)|0);
	      $sub5$i$i = (($sub41$i) - ($cond$i$i))|0;
	      HEAP32[((154792 + 24|0))>>2] = $add$ptr4$i$i;
	      HEAP32[((154792 + 12|0))>>2] = $sub5$i$i;
	      $or$i$i = $sub5$i$i | 1;
	      $add$ptr4$sum$i$i = (($cond$i$i) + 4)|0;
	      $head$i$i = (($12) + ($add$ptr4$sum$i$i)|0);
	      HEAP32[$head$i$i>>2] = $or$i$i;
	      $add$ptr6$sum$i$i = (($sub41$i) + 4)|0;
	      $head7$i$i = (($12) + ($add$ptr6$sum$i$i)|0);
	      HEAP32[$head7$i$i>>2] = 40;
	      $16 = HEAP32[((155264 + 16|0))>>2]|0;
	      HEAP32[((154792 + 28|0))>>2] = $16;
	      $released$2$i = 1;
	      STACKTOP = sp;return ($released$2$i|0);
	     }
	    }
	   }
	  }
	 }
	 $17 = HEAP32[((154792 + 12|0))>>2]|0;
	 $18 = HEAP32[((154792 + 28|0))>>2]|0;
	 $cmp47$i = ($17>>>0)>($18>>>0);
	 if (!($cmp47$i)) {
	  $released$2$i = 0;
	  STACKTOP = sp;return ($released$2$i|0);
	 }
	 HEAP32[((154792 + 28|0))>>2] = -1;
	 $released$2$i = 0;
	 STACKTOP = sp;return ($released$2$i|0);
	}
	function _malloc_footprint() {
	 var $0 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[((154792 + 432|0))>>2]|0;
	 STACKTOP = sp;return ($0|0);
	}
	function _malloc_max_footprint() {
	 var $0 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[((154792 + 436|0))>>2]|0;
	 STACKTOP = sp;return ($0|0);
	}
	function _malloc_footprint_limit() {
	 var $0 = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[((154792 + 440|0))>>2]|0;
	 $cmp = ($0|0)==(0);
	 $cond = $cmp ? -1 : $0;
	 STACKTOP = sp;return ($cond|0);
	}
	function _malloc_set_footprint_limit($bytes) {
	 $bytes = $bytes|0;
	 var $0 = 0, $add5 = 0, $and8 = 0, $cmp2 = 0, $neg7 = 0, $result$0 = 0, $sub4 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp2 = ($bytes|0)==(-1);
	 if ($cmp2) {
	  $result$0 = 0;
	 } else {
	  $0 = HEAP32[((155264 + 8|0))>>2]|0;
	  $sub4 = (($bytes) + -1)|0;
	  $add5 = (($sub4) + ($0))|0;
	  $neg7 = (0 - ($0))|0;
	  $and8 = $add5 & $neg7;
	  $result$0 = $and8;
	 }
	 HEAP32[((154792 + 440|0))>>2] = $result$0;
	 STACKTOP = sp;return ($result$0|0);
	}
	function _mallinfo($agg$result) {
	 $agg$result = $agg$result|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr14$i = 0, $add$ptr31$i = 0, $add$ptr9$i = 0;
	 var $add23$i = 0, $add28$i = 0, $and$i = 0, $and$i$i = 0, $and22$i = 0, $and25$i = 0, $and7$i$i = 0, $and8$i = 0, $call$i$i = 0, $call6$i$i = 0, $cmp$i = 0, $cmp1$i = 0, $cmp1$i$i = 0, $cmp12$i = 0, $cmp15$i = 0, $cmp18$i = 0, $cmp19$i = 0, $cmp2$i = 0, $cmp26$i = 0, $cmp4$i = 0;
	 var $cond$i = 0, $head$i = 0, $inc$i = 0, $mfree$011$i = 0, $mfree$1$lcssa$i = 0, $mfree$15$i = 0, $mfree$2$i = 0, $next$i = 0, $nfree$010$i = 0, $nfree$1$lcssa$i = 0, $nfree$14$i = 0, $nfree$2$i = 0, $nm$sroa$0$0$i = 0, $nm$sroa$1$0$i = 0, $nm$sroa$1$4$idx25$i = 0, $nm$sroa$2$8$idx$i = 0, $nm$sroa$3$0$i = 0, $nm$sroa$3$16$idx31$i = 0, $nm$sroa$4$0$i = 0, $nm$sroa$4$20$idx33$i = 0;
	 var $nm$sroa$5$24$idx35$i = 0, $nm$sroa$6$0$i = 0, $nm$sroa$6$28$idx37$i = 0, $nm$sroa$7$0$i = 0, $nm$sroa$7$32$idx39$i = 0, $nm$sroa$8$0$i = 0, $nm$sroa$8$36$idx41$i = 0, $or$cond$i = 0, $q$0$in7$i = 0, $s$013$i = 0, $size$i = 0, $sub$i$i = 0, $sub33$i = 0, $sub35$i = 0, $sum$012$i = 0, $sum$1$lcssa$i = 0, $sum$16$i = 0, $xor$i$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[155264>>2]|0;
	 $cmp$i = ($0|0)==(0);
	 do {
	  if ($cmp$i) {
	   $call$i$i = (_sysconf(30)|0);
	   $sub$i$i = (($call$i$i) + -1)|0;
	   $and$i$i = $sub$i$i & $call$i$i;
	   $cmp1$i$i = ($and$i$i|0)==(0);
	   if ($cmp1$i$i) {
	    HEAP32[((155264 + 8|0))>>2] = $call$i$i;
	    HEAP32[((155264 + 4|0))>>2] = $call$i$i;
	    HEAP32[((155264 + 12|0))>>2] = -1;
	    HEAP32[((155264 + 16|0))>>2] = -1;
	    HEAP32[((155264 + 20|0))>>2] = 0;
	    HEAP32[((154792 + 444|0))>>2] = 0;
	    $call6$i$i = (_time((0|0))|0);
	    $xor$i$i = $call6$i$i & -16;
	    $and7$i$i = $xor$i$i ^ 1431655768;
	    HEAP32[155264>>2] = $and7$i$i;
	    break;
	   } else {
	    _abort();
	    // unreachable;
	   }
	  }
	 } while(0);
	 $1 = HEAP32[((154792 + 24|0))>>2]|0;
	 $cmp1$i = ($1|0)==(0|0);
	 if ($cmp1$i) {
	  $nm$sroa$0$0$i = 0;$nm$sroa$1$0$i = 0;$nm$sroa$3$0$i = 0;$nm$sroa$4$0$i = 0;$nm$sroa$6$0$i = 0;$nm$sroa$7$0$i = 0;$nm$sroa$8$0$i = 0;
	 } else {
	  $2 = HEAP32[((154792 + 12|0))>>2]|0;
	  $add$i = (($2) + 40)|0;
	  $mfree$011$i = $add$i;$nfree$010$i = 1;$s$013$i = ((154792 + 448|0));$sum$012$i = $add$i;
	  while(1) {
	   $3 = HEAP32[$s$013$i>>2]|0;
	   $add$ptr$i = (($3) + 8|0);
	   $4 = $add$ptr$i;
	   $and$i = $4 & 7;
	   $cmp4$i = ($and$i|0)==(0);
	   if ($cmp4$i) {
	    $cond$i = 0;
	   } else {
	    $5 = (0 - ($4))|0;
	    $and8$i = $5 & 7;
	    $cond$i = $and8$i;
	   }
	   $add$ptr9$i = (($3) + ($cond$i)|0);
	   $size$i = (($s$013$i) + 4|0);
	   $6 = HEAP32[$size$i>>2]|0;
	   $add$ptr14$i = (($3) + ($6)|0);
	   $mfree$15$i = $mfree$011$i;$nfree$14$i = $nfree$010$i;$q$0$in7$i = $add$ptr9$i;$sum$16$i = $sum$012$i;
	   while(1) {
	    $cmp15$i = ($q$0$in7$i>>>0)>=($add$ptr14$i>>>0);
	    $cmp18$i = ($q$0$in7$i|0)==($1|0);
	    $or$cond$i = $cmp15$i | $cmp18$i;
	    if ($or$cond$i) {
	     $mfree$1$lcssa$i = $mfree$15$i;$nfree$1$lcssa$i = $nfree$14$i;$sum$1$lcssa$i = $sum$16$i;
	     break;
	    }
	    $head$i = (($q$0$in7$i) + 4|0);
	    $7 = HEAP32[$head$i>>2]|0;
	    $cmp19$i = ($7|0)==(7);
	    if ($cmp19$i) {
	     $mfree$1$lcssa$i = $mfree$15$i;$nfree$1$lcssa$i = $nfree$14$i;$sum$1$lcssa$i = $sum$16$i;
	     break;
	    }
	    $and22$i = $7 & -8;
	    $add23$i = (($and22$i) + ($sum$16$i))|0;
	    $and25$i = $7 & 3;
	    $cmp26$i = ($and25$i|0)==(1);
	    if ($cmp26$i) {
	     $add28$i = (($and22$i) + ($mfree$15$i))|0;
	     $inc$i = (($nfree$14$i) + 1)|0;
	     $mfree$2$i = $add28$i;$nfree$2$i = $inc$i;
	    } else {
	     $mfree$2$i = $mfree$15$i;$nfree$2$i = $nfree$14$i;
	    }
	    $add$ptr31$i = (($q$0$in7$i) + ($and22$i)|0);
	    $cmp12$i = ($add$ptr31$i>>>0)<($3>>>0);
	    if ($cmp12$i) {
	     $mfree$1$lcssa$i = $mfree$2$i;$nfree$1$lcssa$i = $nfree$2$i;$sum$1$lcssa$i = $add23$i;
	     break;
	    } else {
	     $mfree$15$i = $mfree$2$i;$nfree$14$i = $nfree$2$i;$q$0$in7$i = $add$ptr31$i;$sum$16$i = $add23$i;
	    }
	   }
	   $next$i = (($s$013$i) + 8|0);
	   $8 = HEAP32[$next$i>>2]|0;
	   $cmp2$i = ($8|0)==(0|0);
	   if ($cmp2$i) {
	    break;
	   } else {
	    $mfree$011$i = $mfree$1$lcssa$i;$nfree$010$i = $nfree$1$lcssa$i;$s$013$i = $8;$sum$012$i = $sum$1$lcssa$i;
	   }
	  }
	  $9 = HEAP32[((154792 + 432|0))>>2]|0;
	  $sub33$i = (($9) - ($sum$1$lcssa$i))|0;
	  $10 = HEAP32[((154792 + 436|0))>>2]|0;
	  $sub35$i = (($9) - ($mfree$1$lcssa$i))|0;
	  $nm$sroa$0$0$i = $sum$1$lcssa$i;$nm$sroa$1$0$i = $nfree$1$lcssa$i;$nm$sroa$3$0$i = $sub33$i;$nm$sroa$4$0$i = $10;$nm$sroa$6$0$i = $sub35$i;$nm$sroa$7$0$i = $mfree$1$lcssa$i;$nm$sroa$8$0$i = $2;
	 }
	 HEAP32[$agg$result>>2] = $nm$sroa$0$0$i;
	 $nm$sroa$1$4$idx25$i = (($agg$result) + 4|0);
	 HEAP32[$nm$sroa$1$4$idx25$i>>2] = $nm$sroa$1$0$i;
	 $nm$sroa$2$8$idx$i = (($agg$result) + 8|0);
	 $11 = $nm$sroa$2$8$idx$i;
	 $12 = $11;
	 HEAP32[$12>>2] = 0;
	 $13 = (($11) + 4)|0;
	 $14 = $13;
	 HEAP32[$14>>2] = 0;
	 $nm$sroa$3$16$idx31$i = (($agg$result) + 16|0);
	 HEAP32[$nm$sroa$3$16$idx31$i>>2] = $nm$sroa$3$0$i;
	 $nm$sroa$4$20$idx33$i = (($agg$result) + 20|0);
	 HEAP32[$nm$sroa$4$20$idx33$i>>2] = $nm$sroa$4$0$i;
	 $nm$sroa$5$24$idx35$i = (($agg$result) + 24|0);
	 HEAP32[$nm$sroa$5$24$idx35$i>>2] = 0;
	 $nm$sroa$6$28$idx37$i = (($agg$result) + 28|0);
	 HEAP32[$nm$sroa$6$28$idx37$i>>2] = $nm$sroa$6$0$i;
	 $nm$sroa$7$32$idx39$i = (($agg$result) + 32|0);
	 HEAP32[$nm$sroa$7$32$idx39$i>>2] = $nm$sroa$7$0$i;
	 $nm$sroa$8$36$idx41$i = (($agg$result) + 36|0);
	 HEAP32[$nm$sroa$8$36$idx41$i>>2] = $nm$sroa$8$0$i;
	 STACKTOP = sp;return;
	}
	function _malloc_stats() {
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$neg$i = 0, $add$ptr$i = 0, $add$ptr10$i = 0, $add$ptr15$i = 0, $add$ptr31$i = 0, $and$i = 0, $and$i$i = 0, $and23$i = 0;
	 var $and27$i = 0, $and7$i$i = 0, $and9$i = 0, $call$i$i = 0, $call6$i$i = 0, $cmp$i = 0, $cmp1$i = 0, $cmp1$i$i = 0, $cmp13$i = 0, $cmp16$i = 0, $cmp19$i = 0, $cmp2$i = 0, $cmp20$i = 0, $cmp24$i = 0, $cmp4$i = 0, $cond$i = 0, $fp$0$i = 0, $head$i = 0, $maxfp$0$i = 0, $next$i = 0;
	 var $or$cond$i = 0, $q$0$in3$i = 0, $s$05$i = 0, $size$i = 0, $sub$i = 0, $sub$i$i = 0, $sub28$i = 0, $used$04$i = 0, $used$1$lcssa$i = 0, $used$12$i = 0, $used$2$i = 0, $used$3$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $xor$i$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $vararg_buffer4 = sp + 16|0;
	 $vararg_buffer1 = sp + 8|0;
	 $vararg_buffer = sp;
	 $0 = HEAP32[155264>>2]|0;
	 $cmp$i = ($0|0)==(0);
	 do {
	  if ($cmp$i) {
	   $call$i$i = (_sysconf(30)|0);
	   $sub$i$i = (($call$i$i) + -1)|0;
	   $and$i$i = $sub$i$i & $call$i$i;
	   $cmp1$i$i = ($and$i$i|0)==(0);
	   if ($cmp1$i$i) {
	    HEAP32[((155264 + 8|0))>>2] = $call$i$i;
	    HEAP32[((155264 + 4|0))>>2] = $call$i$i;
	    HEAP32[((155264 + 12|0))>>2] = -1;
	    HEAP32[((155264 + 16|0))>>2] = -1;
	    HEAP32[((155264 + 20|0))>>2] = 0;
	    HEAP32[((154792 + 444|0))>>2] = 0;
	    $call6$i$i = (_time((0|0))|0);
	    $xor$i$i = $call6$i$i & -16;
	    $and7$i$i = $xor$i$i ^ 1431655768;
	    HEAP32[155264>>2] = $and7$i$i;
	    break;
	   } else {
	    _abort();
	    // unreachable;
	   }
	  }
	 } while(0);
	 $1 = HEAP32[((154792 + 24|0))>>2]|0;
	 $cmp1$i = ($1|0)==(0|0);
	 if ($cmp1$i) {
	  $fp$0$i = 0;$maxfp$0$i = 0;$used$3$i = 0;
	  $11 = HEAP32[_stderr>>2]|0;
	  HEAP32[$vararg_buffer>>2] = $maxfp$0$i;
	  (_fprintf(($11|0),(155288|0),($vararg_buffer|0))|0);
	  HEAP32[$vararg_buffer1>>2] = $fp$0$i;
	  (_fprintf(($11|0),(155320|0),($vararg_buffer1|0))|0);
	  HEAP32[$vararg_buffer4>>2] = $used$3$i;
	  (_fprintf(($11|0),(155352|0),($vararg_buffer4|0))|0);
	  STACKTOP = sp;return;
	 }
	 $2 = HEAP32[((154792 + 436|0))>>2]|0;
	 $3 = HEAP32[((154792 + 432|0))>>2]|0;
	 $4 = HEAP32[((154792 + 12|0))>>2]|0;
	 $add$neg$i = (($3) + -40)|0;
	 $sub$i = (($add$neg$i) - ($4))|0;
	 $s$05$i = ((154792 + 448|0));$used$04$i = $sub$i;
	 while(1) {
	  $5 = HEAP32[$s$05$i>>2]|0;
	  $add$ptr$i = (($5) + 8|0);
	  $6 = $add$ptr$i;
	  $and$i = $6 & 7;
	  $cmp4$i = ($and$i|0)==(0);
	  if ($cmp4$i) {
	   $cond$i = 0;
	  } else {
	   $7 = (0 - ($6))|0;
	   $and9$i = $7 & 7;
	   $cond$i = $and9$i;
	  }
	  $add$ptr10$i = (($5) + ($cond$i)|0);
	  $size$i = (($s$05$i) + 4|0);
	  $8 = HEAP32[$size$i>>2]|0;
	  $add$ptr15$i = (($5) + ($8)|0);
	  $q$0$in3$i = $add$ptr10$i;$used$12$i = $used$04$i;
	  while(1) {
	   $cmp16$i = ($q$0$in3$i>>>0)>=($add$ptr15$i>>>0);
	   $cmp19$i = ($q$0$in3$i|0)==($1|0);
	   $or$cond$i = $cmp16$i | $cmp19$i;
	   if ($or$cond$i) {
	    $used$1$lcssa$i = $used$12$i;
	    break;
	   }
	   $head$i = (($q$0$in3$i) + 4|0);
	   $9 = HEAP32[$head$i>>2]|0;
	   $cmp20$i = ($9|0)==(7);
	   if ($cmp20$i) {
	    $used$1$lcssa$i = $used$12$i;
	    break;
	   }
	   $and23$i = $9 & 3;
	   $cmp24$i = ($and23$i|0)==(1);
	   $and27$i = $9 & -8;
	   $sub28$i = $cmp24$i ? $and27$i : 0;
	   $used$2$i = (($used$12$i) - ($sub28$i))|0;
	   $add$ptr31$i = (($q$0$in3$i) + ($and27$i)|0);
	   $cmp13$i = ($add$ptr31$i>>>0)<($5>>>0);
	   if ($cmp13$i) {
	    $used$1$lcssa$i = $used$2$i;
	    break;
	   } else {
	    $q$0$in3$i = $add$ptr31$i;$used$12$i = $used$2$i;
	   }
	  }
	  $next$i = (($s$05$i) + 8|0);
	  $10 = HEAP32[$next$i>>2]|0;
	  $cmp2$i = ($10|0)==(0|0);
	  if ($cmp2$i) {
	   $fp$0$i = $3;$maxfp$0$i = $2;$used$3$i = $used$1$lcssa$i;
	   break;
	  } else {
	   $s$05$i = $10;$used$04$i = $used$1$lcssa$i;
	  }
	 }
	 $11 = HEAP32[_stderr>>2]|0;
	 HEAP32[$vararg_buffer>>2] = $maxfp$0$i;
	 (_fprintf(($11|0),(155288|0),($vararg_buffer|0))|0);
	 HEAP32[$vararg_buffer1>>2] = $fp$0$i;
	 (_fprintf(($11|0),(155320|0),($vararg_buffer1|0))|0);
	 HEAP32[$vararg_buffer4>>2] = $used$3$i;
	 (_fprintf(($11|0),(155352|0),($vararg_buffer4|0))|0);
	 STACKTOP = sp;return;
	}
	function _mallopt($param_number,$value) {
	 $param_number = $param_number|0;
	 $value = $value|0;
	 var $0 = 0, $1 = 0, $and$i = 0, $and$i$i = 0, $and7$i$i = 0, $call$i$i = 0, $call6$i$i = 0, $cmp$i = 0, $cmp1$i$i = 0, $cmp3$i = 0, $cmp4$i = 0, $retval$0$i = 0, $sub$i = 0, $sub$i$i = 0, $xor$i$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[155264>>2]|0;
	 $cmp$i = ($0|0)==(0);
	 do {
	  if ($cmp$i) {
	   $call$i$i = (_sysconf(30)|0);
	   $sub$i$i = (($call$i$i) + -1)|0;
	   $and$i$i = $sub$i$i & $call$i$i;
	   $cmp1$i$i = ($and$i$i|0)==(0);
	   if ($cmp1$i$i) {
	    HEAP32[((155264 + 8|0))>>2] = $call$i$i;
	    HEAP32[((155264 + 4|0))>>2] = $call$i$i;
	    HEAP32[((155264 + 12|0))>>2] = -1;
	    HEAP32[((155264 + 16|0))>>2] = -1;
	    HEAP32[((155264 + 20|0))>>2] = 0;
	    HEAP32[((154792 + 444|0))>>2] = 0;
	    $call6$i$i = (_time((0|0))|0);
	    $xor$i$i = $call6$i$i & -16;
	    $and7$i$i = $xor$i$i ^ 1431655768;
	    HEAP32[155264>>2] = $and7$i$i;
	    break;
	   } else {
	    _abort();
	    // unreachable;
	   }
	  }
	 } while(0);
	 if ((($param_number|0) == -3)) {
	  HEAP32[((155264 + 12|0))>>2] = $value;
	  $retval$0$i = 1;
	 } else if ((($param_number|0) == -1)) {
	  HEAP32[((155264 + 16|0))>>2] = $value;
	  $retval$0$i = 1;
	 } else if ((($param_number|0) == -2)) {
	  $1 = HEAP32[((155264 + 4|0))>>2]|0;
	  $cmp3$i = ($1>>>0)>($value>>>0);
	  if ($cmp3$i) {
	   $retval$0$i = 0;
	  } else {
	   $sub$i = (($value) + -1)|0;
	   $and$i = $sub$i & $value;
	   $cmp4$i = ($and$i|0)==(0);
	   if ($cmp4$i) {
	    HEAP32[((155264 + 8|0))>>2] = $value;
	    $retval$0$i = 1;
	   } else {
	    $retval$0$i = 0;
	   }
	  }
	 } else {
	  $retval$0$i = 0;
	 }
	 STACKTOP = sp;return ($retval$0$i|0);
	}
	function _malloc_usable_size($mem) {
	 $mem = $mem|0;
	 var $0 = 0, $and = 0, $and4 = 0, $cmp = 0, $cmp1 = 0, $cmp7 = 0, $cond = 0, $head = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($mem|0)==(0|0);
	 if ($cmp) {
	  $retval$0 = 0;
	 } else {
	  $head = (($mem) + -4|0);
	  $0 = HEAP32[$head>>2]|0;
	  $and = $0 & 3;
	  $cmp1 = ($and|0)==(1);
	  if ($cmp1) {
	   $retval$0 = 0;
	  } else {
	   $and4 = $0 & -8;
	   $cmp7 = ($and|0)==(0);
	   $cond = $cmp7 ? 8 : 4;
	   $sub = (($and4) - ($cond))|0;
	   $retval$0 = $sub;
	  }
	 }
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _dispose_chunk($p,$psize) {
	 $p = $p|0;
	 $psize = $psize|0;
	 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
	 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
	 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
	 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $F511$0 = 0, $I539$0 = 0, $I539$0$c = 0;
	 var $K591$036 = 0, $R$0 = 0, $R$1 = 0, $R325$0 = 0, $R325$1 = 0, $RP$0 = 0, $RP354$0 = 0, $T$0$lcssa = 0, $T$035 = 0, $add$ptr = 0, $add$ptr$sum = 0, $add$ptr$sum1 = 0, $add$ptr$sum12 = 0, $add$ptr$sum13 = 0, $add$ptr$sum14 = 0, $add$ptr$sum15 = 0, $add$ptr$sum16 = 0, $add$ptr$sum2 = 0, $add$ptr$sum3 = 0, $add$ptr$sum4 = 0;
	 var $add$ptr250 = 0, $add$ptr483 = 0, $add$ptr498 = 0, $add$ptr5 = 0, $add$ptr5$sum = 0, $add$ptr5$sum18 = 0, $add$ptr5$sum19 = 0, $add$ptr5$sum20 = 0, $add$ptr5$sum21 = 0, $add$ptr5$sum22 = 0, $add$ptr5$sum23 = 0, $add$ptr5$sum24 = 0, $add$ptr5$sum25 = 0, $add229 = 0, $add246 = 0, $add255 = 0, $add555 = 0, $add560 = 0, $add564 = 0, $add566 = 0;
	 var $add569 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and223 = 0, $and254 = 0, $and292 = 0, $and32 = 0, $and407 = 0, $and495 = 0, $and514 = 0, $and550 = 0, $and554 = 0, $and559 = 0, $and568 = 0, $and581 = 0, $and600 = 0;
	 var $and60033 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx268 = 0, $arrayidx356 = 0, $arrayidx368 = 0, $arrayidx373 = 0, $arrayidx396 = 0, $arrayidx417 = 0, $arrayidx425 = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx471 = 0, $arrayidx510 = 0;
	 var $arrayidx510$sum$pre = 0, $arrayidx510$sum11 = 0, $arrayidx573 = 0, $arrayidx576 = 0, $arrayidx607 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk22 = 0, $bk263 = 0, $bk276 = 0, $bk314 = 0, $bk326 = 0, $bk337 = 0, $bk52 = 0, $bk533 = 0, $bk535 = 0, $bk588 = 0, $bk60 = 0, $bk620 = 0;
	 var $bk639 = 0, $bk642 = 0, $bk70 = 0, $child = 0, $child$sum = 0, $child161 = 0, $child161$sum = 0, $child355 = 0, $child355$sum = 0, $child442 = 0, $child442$sum = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp106 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp132 = 0, $cmp139 = 0;
	 var $cmp151 = 0, $cmp155 = 0, $cmp163 = 0, $cmp167 = 0, $cmp17 = 0, $cmp180 = 0, $cmp184 = 0, $cmp20 = 0, $cmp203 = 0, $cmp217 = 0, $cmp226 = 0, $cmp23 = 0, $cmp234 = 0, $cmp242 = 0, $cmp257 = 0, $cmp269 = 0, $cmp273 = 0, $cmp277 = 0, $cmp28 = 0, $cmp286 = 0;
	 var $cmp297 = 0, $cmp301 = 0, $cmp305 = 0, $cmp327 = 0, $cmp334 = 0, $cmp338 = 0, $cmp342 = 0, $cmp357 = 0, $cmp36 = 0, $cmp362 = 0, $cmp369 = 0, $cmp374 = 0, $cmp381 = 0, $cmp390 = 0, $cmp397 = 0, $cmp40 = 0, $cmp411 = 0, $cmp418 = 0, $cmp430 = 0, $cmp434 = 0;
	 var $cmp44 = 0, $cmp444 = 0, $cmp448 = 0, $cmp461 = 0, $cmp465 = 0, $cmp486 = 0, $cmp502 = 0, $cmp523 = 0, $cmp541 = 0, $cmp545 = 0, $cmp592 = 0, $cmp601 = 0, $cmp60134 = 0, $cmp609 = 0, $cmp61 = 0, $cmp614 = 0, $cmp628 = 0, $cmp632 = 0, $cmp68 = 0, $cmp7 = 0;
	 var $cmp71 = 0, $cmp75 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond29 = 0, $cond30 = 0, $fd = 0, $fd261 = 0, $fd304 = 0, $fd315$pre = 0, $fd315$pre$phiZ2D = 0, $fd331 = 0, $fd341 = 0, $fd43 = 0, $fd53$pre = 0, $fd53$pre$phiZ2D = 0, $fd534 = 0, $fd589 = 0;
	 var $fd621 = 0, $fd626 = 0, $fd641 = 0, $fd65 = 0, $fd74 = 0, $head = 0, $head201 = 0, $head208 = 0, $head222 = 0, $head232 = 0, $head249 = 0, $head482 = 0, $head497 = 0, $head599 = 0, $head59932 = 0, $idx$neg = 0, $index = 0, $index394 = 0, $index574 = 0, $neg = 0;
	 var $neg127 = 0, $neg290 = 0, $neg405 = 0, $or = 0, $or231 = 0, $or248 = 0, $or481 = 0, $or496 = 0, $or519 = 0, $or586 = 0, $p$addr$0 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent324 = 0, $parent441 = 0, $parent455 = 0, $parent472 = 0, $parent587 = 0;
	 var $parent619 = 0, $parent643 = 0, $psize$addr$0 = 0, $psize$addr$1 = 0, $shl = 0, $shl126 = 0, $shl266 = 0, $shl289 = 0, $shl31 = 0, $shl404 = 0, $shl508 = 0, $shl513 = 0, $shl551 = 0, $shl556 = 0, $shl562 = 0, $shl565 = 0, $shl580 = 0, $shl598 = 0, $shl608 = 0, $shr = 0;
	 var $shr256 = 0, $shr501 = 0, $shr540 = 0, $shr549 = 0, $shr553 = 0, $shr558 = 0, $shr563 = 0, $shr567 = 0, $shr594 = 0, $shr604 = 0, $sub = 0, $sub552 = 0, $sub557 = 0, $sub561 = 0, $sub597 = 0, $tobool = 0, $tobool224 = 0, $tobool515 = 0, $tobool582 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 $add$ptr = (($p) + ($psize)|0);
	 $head = (($p) + 4|0);
	 $0 = HEAP32[$head>>2]|0;
	 $and = $0 & 1;
	 $tobool = ($and|0)==(0);
	 do {
	  if ($tobool) {
	   $1 = HEAP32[$p>>2]|0;
	   $and2 = $0 & 3;
	   $cmp = ($and2|0)==(0);
	   if ($cmp) {
	    STACKTOP = sp;return;
	   }
	   $idx$neg = (0 - ($1))|0;
	   $add$ptr5 = (($p) + ($idx$neg)|0);
	   $add6 = (($1) + ($psize))|0;
	   $2 = HEAP32[((154792 + 16|0))>>2]|0;
	   $cmp7 = ($add$ptr5>>>0)<($2>>>0);
	   if ($cmp7) {
	    _abort();
	    // unreachable;
	   }
	   $3 = HEAP32[((154792 + 20|0))>>2]|0;
	   $cmp10 = ($add$ptr5|0)==($3|0);
	   if ($cmp10) {
	    $add$ptr$sum = (($psize) + 4)|0;
	    $head201 = (($p) + ($add$ptr$sum)|0);
	    $28 = HEAP32[$head201>>2]|0;
	    $and202 = $28 & 3;
	    $cmp203 = ($and202|0)==(3);
	    if (!($cmp203)) {
	     $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
	     break;
	    }
	    HEAP32[((154792 + 8|0))>>2] = $add6;
	    $29 = HEAP32[$head201>>2]|0;
	    $and207 = $29 & -2;
	    HEAP32[$head201>>2] = $and207;
	    $or = $add6 | 1;
	    $add$ptr5$sum = (4 - ($1))|0;
	    $head208 = (($p) + ($add$ptr5$sum)|0);
	    HEAP32[$head208>>2] = $or;
	    HEAP32[$add$ptr>>2] = $add6;
	    STACKTOP = sp;return;
	   }
	   $shr = $1 >>> 3;
	   $cmp13 = ($1>>>0)<(256);
	   if ($cmp13) {
	    $add$ptr5$sum24 = (8 - ($1))|0;
	    $fd = (($p) + ($add$ptr5$sum24)|0);
	    $4 = HEAP32[$fd>>2]|0;
	    $add$ptr5$sum25 = (12 - ($1))|0;
	    $bk = (($p) + ($add$ptr5$sum25)|0);
	    $5 = HEAP32[$bk>>2]|0;
	    $shl = $shr << 1;
	    $arrayidx = ((154792 + ($shl<<2)|0) + 40|0);
	    $cmp17 = ($4|0)==($arrayidx|0);
	    if (!($cmp17)) {
	     $cmp20 = ($4>>>0)<($2>>>0);
	     if ($cmp20) {
	      _abort();
	      // unreachable;
	     }
	     $bk22 = (($4) + 12|0);
	     $6 = HEAP32[$bk22>>2]|0;
	     $cmp23 = ($6|0)==($add$ptr5|0);
	     if (!($cmp23)) {
	      _abort();
	      // unreachable;
	     }
	    }
	    $cmp28 = ($5|0)==($4|0);
	    if ($cmp28) {
	     $shl31 = 1 << $shr;
	     $neg = $shl31 ^ -1;
	     $7 = HEAP32[154792>>2]|0;
	     $and32 = $7 & $neg;
	     HEAP32[154792>>2] = $and32;
	     $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
	     break;
	    }
	    $cmp36 = ($5|0)==($arrayidx|0);
	    if ($cmp36) {
	     $fd53$pre = (($5) + 8|0);
	     $fd53$pre$phiZ2D = $fd53$pre;
	    } else {
	     $cmp40 = ($5>>>0)<($2>>>0);
	     if ($cmp40) {
	      _abort();
	      // unreachable;
	     }
	     $fd43 = (($5) + 8|0);
	     $8 = HEAP32[$fd43>>2]|0;
	     $cmp44 = ($8|0)==($add$ptr5|0);
	     if ($cmp44) {
	      $fd53$pre$phiZ2D = $fd43;
	     } else {
	      _abort();
	      // unreachable;
	     }
	    }
	    $bk52 = (($4) + 12|0);
	    HEAP32[$bk52>>2] = $5;
	    HEAP32[$fd53$pre$phiZ2D>>2] = $4;
	    $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
	    break;
	   }
	   $add$ptr5$sum18 = (24 - ($1))|0;
	   $parent = (($p) + ($add$ptr5$sum18)|0);
	   $9 = HEAP32[$parent>>2]|0;
	   $add$ptr5$sum19 = (12 - ($1))|0;
	   $bk60 = (($p) + ($add$ptr5$sum19)|0);
	   $10 = HEAP32[$bk60>>2]|0;
	   $cmp61 = ($10|0)==($add$ptr5|0);
	   do {
	    if ($cmp61) {
	     $add$ptr5$sum20 = (16 - ($1))|0;
	     $child$sum = (($add$ptr5$sum20) + 4)|0;
	     $arrayidx86 = (($p) + ($child$sum)|0);
	     $14 = HEAP32[$arrayidx86>>2]|0;
	     $cmp87 = ($14|0)==(0|0);
	     if ($cmp87) {
	      $child = (($p) + ($add$ptr5$sum20)|0);
	      $15 = HEAP32[$child>>2]|0;
	      $cmp91 = ($15|0)==(0|0);
	      if ($cmp91) {
	       $R$1 = 0;
	       break;
	      } else {
	       $R$0 = $15;$RP$0 = $child;
	      }
	     } else {
	      $R$0 = $14;$RP$0 = $arrayidx86;
	     }
	     while(1) {
	      $arrayidx95 = (($R$0) + 20|0);
	      $16 = HEAP32[$arrayidx95>>2]|0;
	      $cmp96 = ($16|0)==(0|0);
	      if (!($cmp96)) {
	       $R$0 = $16;$RP$0 = $arrayidx95;
	       continue;
	      }
	      $arrayidx100 = (($R$0) + 16|0);
	      $17 = HEAP32[$arrayidx100>>2]|0;
	      $cmp101 = ($17|0)==(0|0);
	      if ($cmp101) {
	       break;
	      } else {
	       $R$0 = $17;$RP$0 = $arrayidx100;
	      }
	     }
	     $cmp106 = ($RP$0>>>0)<($2>>>0);
	     if ($cmp106) {
	      _abort();
	      // unreachable;
	     } else {
	      HEAP32[$RP$0>>2] = 0;
	      $R$1 = $R$0;
	      break;
	     }
	    } else {
	     $add$ptr5$sum23 = (8 - ($1))|0;
	     $fd65 = (($p) + ($add$ptr5$sum23)|0);
	     $11 = HEAP32[$fd65>>2]|0;
	     $cmp68 = ($11>>>0)<($2>>>0);
	     if ($cmp68) {
	      _abort();
	      // unreachable;
	     }
	     $bk70 = (($11) + 12|0);
	     $12 = HEAP32[$bk70>>2]|0;
	     $cmp71 = ($12|0)==($add$ptr5|0);
	     if (!($cmp71)) {
	      _abort();
	      // unreachable;
	     }
	     $fd74 = (($10) + 8|0);
	     $13 = HEAP32[$fd74>>2]|0;
	     $cmp75 = ($13|0)==($add$ptr5|0);
	     if ($cmp75) {
	      HEAP32[$bk70>>2] = $10;
	      HEAP32[$fd74>>2] = $11;
	      $R$1 = $10;
	      break;
	     } else {
	      _abort();
	      // unreachable;
	     }
	    }
	   } while(0);
	   $cmp115 = ($9|0)==(0|0);
	   if ($cmp115) {
	    $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
	   } else {
	    $add$ptr5$sum21 = (28 - ($1))|0;
	    $index = (($p) + ($add$ptr5$sum21)|0);
	    $18 = HEAP32[$index>>2]|0;
	    $arrayidx118 = ((154792 + ($18<<2)|0) + 304|0);
	    $19 = HEAP32[$arrayidx118>>2]|0;
	    $cmp119 = ($add$ptr5|0)==($19|0);
	    if ($cmp119) {
	     HEAP32[$arrayidx118>>2] = $R$1;
	     $cond29 = ($R$1|0)==(0|0);
	     if ($cond29) {
	      $shl126 = 1 << $18;
	      $neg127 = $shl126 ^ -1;
	      $20 = HEAP32[((154792 + 4|0))>>2]|0;
	      $and128 = $20 & $neg127;
	      HEAP32[((154792 + 4|0))>>2] = $and128;
	      $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
	      break;
	     }
	    } else {
	     $21 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp132 = ($9>>>0)<($21>>>0);
	     if ($cmp132) {
	      _abort();
	      // unreachable;
	     }
	     $arrayidx138 = (($9) + 16|0);
	     $22 = HEAP32[$arrayidx138>>2]|0;
	     $cmp139 = ($22|0)==($add$ptr5|0);
	     if ($cmp139) {
	      HEAP32[$arrayidx138>>2] = $R$1;
	     } else {
	      $arrayidx146 = (($9) + 20|0);
	      HEAP32[$arrayidx146>>2] = $R$1;
	     }
	     $cmp151 = ($R$1|0)==(0|0);
	     if ($cmp151) {
	      $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
	      break;
	     }
	    }
	    $23 = HEAP32[((154792 + 16|0))>>2]|0;
	    $cmp155 = ($R$1>>>0)<($23>>>0);
	    if ($cmp155) {
	     _abort();
	     // unreachable;
	    }
	    $parent160 = (($R$1) + 24|0);
	    HEAP32[$parent160>>2] = $9;
	    $add$ptr5$sum22 = (16 - ($1))|0;
	    $child161 = (($p) + ($add$ptr5$sum22)|0);
	    $24 = HEAP32[$child161>>2]|0;
	    $cmp163 = ($24|0)==(0|0);
	    do {
	     if (!($cmp163)) {
	      $25 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp167 = ($24>>>0)<($25>>>0);
	      if ($cmp167) {
	       _abort();
	       // unreachable;
	      } else {
	       $arrayidx173 = (($R$1) + 16|0);
	       HEAP32[$arrayidx173>>2] = $24;
	       $parent174 = (($24) + 24|0);
	       HEAP32[$parent174>>2] = $R$1;
	       break;
	      }
	     }
	    } while(0);
	    $child161$sum = (($add$ptr5$sum22) + 4)|0;
	    $arrayidx179 = (($p) + ($child161$sum)|0);
	    $26 = HEAP32[$arrayidx179>>2]|0;
	    $cmp180 = ($26|0)==(0|0);
	    if ($cmp180) {
	     $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
	    } else {
	     $27 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp184 = ($26>>>0)<($27>>>0);
	     if ($cmp184) {
	      _abort();
	      // unreachable;
	     } else {
	      $arrayidx190 = (($R$1) + 20|0);
	      HEAP32[$arrayidx190>>2] = $26;
	      $parent191 = (($26) + 24|0);
	      HEAP32[$parent191>>2] = $R$1;
	      $p$addr$0 = $add$ptr5;$psize$addr$0 = $add6;
	      break;
	     }
	    }
	   }
	  } else {
	   $p$addr$0 = $p;$psize$addr$0 = $psize;
	  }
	 } while(0);
	 $30 = HEAP32[((154792 + 16|0))>>2]|0;
	 $cmp217 = ($add$ptr>>>0)<($30>>>0);
	 if ($cmp217) {
	  _abort();
	  // unreachable;
	 }
	 $add$ptr$sum1 = (($psize) + 4)|0;
	 $head222 = (($p) + ($add$ptr$sum1)|0);
	 $31 = HEAP32[$head222>>2]|0;
	 $and223 = $31 & 2;
	 $tobool224 = ($and223|0)==(0);
	 if ($tobool224) {
	  $32 = HEAP32[((154792 + 24|0))>>2]|0;
	  $cmp226 = ($add$ptr|0)==($32|0);
	  if ($cmp226) {
	   $33 = HEAP32[((154792 + 12|0))>>2]|0;
	   $add229 = (($33) + ($psize$addr$0))|0;
	   HEAP32[((154792 + 12|0))>>2] = $add229;
	   HEAP32[((154792 + 24|0))>>2] = $p$addr$0;
	   $or231 = $add229 | 1;
	   $head232 = (($p$addr$0) + 4|0);
	   HEAP32[$head232>>2] = $or231;
	   $34 = HEAP32[((154792 + 20|0))>>2]|0;
	   $cmp234 = ($p$addr$0|0)==($34|0);
	   if (!($cmp234)) {
	    STACKTOP = sp;return;
	   }
	   HEAP32[((154792 + 20|0))>>2] = 0;
	   HEAP32[((154792 + 8|0))>>2] = 0;
	   STACKTOP = sp;return;
	  }
	  $35 = HEAP32[((154792 + 20|0))>>2]|0;
	  $cmp242 = ($add$ptr|0)==($35|0);
	  if ($cmp242) {
	   $36 = HEAP32[((154792 + 8|0))>>2]|0;
	   $add246 = (($36) + ($psize$addr$0))|0;
	   HEAP32[((154792 + 8|0))>>2] = $add246;
	   HEAP32[((154792 + 20|0))>>2] = $p$addr$0;
	   $or248 = $add246 | 1;
	   $head249 = (($p$addr$0) + 4|0);
	   HEAP32[$head249>>2] = $or248;
	   $add$ptr250 = (($p$addr$0) + ($add246)|0);
	   HEAP32[$add$ptr250>>2] = $add246;
	   STACKTOP = sp;return;
	  }
	  $and254 = $31 & -8;
	  $add255 = (($and254) + ($psize$addr$0))|0;
	  $shr256 = $31 >>> 3;
	  $cmp257 = ($31>>>0)<(256);
	  do {
	   if ($cmp257) {
	    $add$ptr$sum15 = (($psize) + 8)|0;
	    $fd261 = (($p) + ($add$ptr$sum15)|0);
	    $37 = HEAP32[$fd261>>2]|0;
	    $add$ptr$sum16 = (($psize) + 12)|0;
	    $bk263 = (($p) + ($add$ptr$sum16)|0);
	    $38 = HEAP32[$bk263>>2]|0;
	    $shl266 = $shr256 << 1;
	    $arrayidx268 = ((154792 + ($shl266<<2)|0) + 40|0);
	    $cmp269 = ($37|0)==($arrayidx268|0);
	    if (!($cmp269)) {
	     $cmp273 = ($37>>>0)<($30>>>0);
	     if ($cmp273) {
	      _abort();
	      // unreachable;
	     }
	     $bk276 = (($37) + 12|0);
	     $39 = HEAP32[$bk276>>2]|0;
	     $cmp277 = ($39|0)==($add$ptr|0);
	     if (!($cmp277)) {
	      _abort();
	      // unreachable;
	     }
	    }
	    $cmp286 = ($38|0)==($37|0);
	    if ($cmp286) {
	     $shl289 = 1 << $shr256;
	     $neg290 = $shl289 ^ -1;
	     $40 = HEAP32[154792>>2]|0;
	     $and292 = $40 & $neg290;
	     HEAP32[154792>>2] = $and292;
	     break;
	    }
	    $cmp297 = ($38|0)==($arrayidx268|0);
	    if ($cmp297) {
	     $fd315$pre = (($38) + 8|0);
	     $fd315$pre$phiZ2D = $fd315$pre;
	    } else {
	     $cmp301 = ($38>>>0)<($30>>>0);
	     if ($cmp301) {
	      _abort();
	      // unreachable;
	     }
	     $fd304 = (($38) + 8|0);
	     $41 = HEAP32[$fd304>>2]|0;
	     $cmp305 = ($41|0)==($add$ptr|0);
	     if ($cmp305) {
	      $fd315$pre$phiZ2D = $fd304;
	     } else {
	      _abort();
	      // unreachable;
	     }
	    }
	    $bk314 = (($37) + 12|0);
	    HEAP32[$bk314>>2] = $38;
	    HEAP32[$fd315$pre$phiZ2D>>2] = $37;
	   } else {
	    $add$ptr$sum2 = (($psize) + 24)|0;
	    $parent324 = (($p) + ($add$ptr$sum2)|0);
	    $42 = HEAP32[$parent324>>2]|0;
	    $add$ptr$sum3 = (($psize) + 12)|0;
	    $bk326 = (($p) + ($add$ptr$sum3)|0);
	    $43 = HEAP32[$bk326>>2]|0;
	    $cmp327 = ($43|0)==($add$ptr|0);
	    do {
	     if ($cmp327) {
	      $child355$sum = (($psize) + 20)|0;
	      $arrayidx356 = (($p) + ($child355$sum)|0);
	      $47 = HEAP32[$arrayidx356>>2]|0;
	      $cmp357 = ($47|0)==(0|0);
	      if ($cmp357) {
	       $add$ptr$sum4 = (($psize) + 16)|0;
	       $child355 = (($p) + ($add$ptr$sum4)|0);
	       $48 = HEAP32[$child355>>2]|0;
	       $cmp362 = ($48|0)==(0|0);
	       if ($cmp362) {
	        $R325$1 = 0;
	        break;
	       } else {
	        $R325$0 = $48;$RP354$0 = $child355;
	       }
	      } else {
	       $R325$0 = $47;$RP354$0 = $arrayidx356;
	      }
	      while(1) {
	       $arrayidx368 = (($R325$0) + 20|0);
	       $49 = HEAP32[$arrayidx368>>2]|0;
	       $cmp369 = ($49|0)==(0|0);
	       if (!($cmp369)) {
	        $R325$0 = $49;$RP354$0 = $arrayidx368;
	        continue;
	       }
	       $arrayidx373 = (($R325$0) + 16|0);
	       $50 = HEAP32[$arrayidx373>>2]|0;
	       $cmp374 = ($50|0)==(0|0);
	       if ($cmp374) {
	        break;
	       } else {
	        $R325$0 = $50;$RP354$0 = $arrayidx373;
	       }
	      }
	      $cmp381 = ($RP354$0>>>0)<($30>>>0);
	      if ($cmp381) {
	       _abort();
	       // unreachable;
	      } else {
	       HEAP32[$RP354$0>>2] = 0;
	       $R325$1 = $R325$0;
	       break;
	      }
	     } else {
	      $add$ptr$sum14 = (($psize) + 8)|0;
	      $fd331 = (($p) + ($add$ptr$sum14)|0);
	      $44 = HEAP32[$fd331>>2]|0;
	      $cmp334 = ($44>>>0)<($30>>>0);
	      if ($cmp334) {
	       _abort();
	       // unreachable;
	      }
	      $bk337 = (($44) + 12|0);
	      $45 = HEAP32[$bk337>>2]|0;
	      $cmp338 = ($45|0)==($add$ptr|0);
	      if (!($cmp338)) {
	       _abort();
	       // unreachable;
	      }
	      $fd341 = (($43) + 8|0);
	      $46 = HEAP32[$fd341>>2]|0;
	      $cmp342 = ($46|0)==($add$ptr|0);
	      if ($cmp342) {
	       HEAP32[$bk337>>2] = $43;
	       HEAP32[$fd341>>2] = $44;
	       $R325$1 = $43;
	       break;
	      } else {
	       _abort();
	       // unreachable;
	      }
	     }
	    } while(0);
	    $cmp390 = ($42|0)==(0|0);
	    if (!($cmp390)) {
	     $add$ptr$sum12 = (($psize) + 28)|0;
	     $index394 = (($p) + ($add$ptr$sum12)|0);
	     $51 = HEAP32[$index394>>2]|0;
	     $arrayidx396 = ((154792 + ($51<<2)|0) + 304|0);
	     $52 = HEAP32[$arrayidx396>>2]|0;
	     $cmp397 = ($add$ptr|0)==($52|0);
	     if ($cmp397) {
	      HEAP32[$arrayidx396>>2] = $R325$1;
	      $cond30 = ($R325$1|0)==(0|0);
	      if ($cond30) {
	       $shl404 = 1 << $51;
	       $neg405 = $shl404 ^ -1;
	       $53 = HEAP32[((154792 + 4|0))>>2]|0;
	       $and407 = $53 & $neg405;
	       HEAP32[((154792 + 4|0))>>2] = $and407;
	       break;
	      }
	     } else {
	      $54 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp411 = ($42>>>0)<($54>>>0);
	      if ($cmp411) {
	       _abort();
	       // unreachable;
	      }
	      $arrayidx417 = (($42) + 16|0);
	      $55 = HEAP32[$arrayidx417>>2]|0;
	      $cmp418 = ($55|0)==($add$ptr|0);
	      if ($cmp418) {
	       HEAP32[$arrayidx417>>2] = $R325$1;
	      } else {
	       $arrayidx425 = (($42) + 20|0);
	       HEAP32[$arrayidx425>>2] = $R325$1;
	      }
	      $cmp430 = ($R325$1|0)==(0|0);
	      if ($cmp430) {
	       break;
	      }
	     }
	     $56 = HEAP32[((154792 + 16|0))>>2]|0;
	     $cmp434 = ($R325$1>>>0)<($56>>>0);
	     if ($cmp434) {
	      _abort();
	      // unreachable;
	     }
	     $parent441 = (($R325$1) + 24|0);
	     HEAP32[$parent441>>2] = $42;
	     $add$ptr$sum13 = (($psize) + 16)|0;
	     $child442 = (($p) + ($add$ptr$sum13)|0);
	     $57 = HEAP32[$child442>>2]|0;
	     $cmp444 = ($57|0)==(0|0);
	     do {
	      if (!($cmp444)) {
	       $58 = HEAP32[((154792 + 16|0))>>2]|0;
	       $cmp448 = ($57>>>0)<($58>>>0);
	       if ($cmp448) {
	        _abort();
	        // unreachable;
	       } else {
	        $arrayidx454 = (($R325$1) + 16|0);
	        HEAP32[$arrayidx454>>2] = $57;
	        $parent455 = (($57) + 24|0);
	        HEAP32[$parent455>>2] = $R325$1;
	        break;
	       }
	      }
	     } while(0);
	     $child442$sum = (($psize) + 20)|0;
	     $arrayidx460 = (($p) + ($child442$sum)|0);
	     $59 = HEAP32[$arrayidx460>>2]|0;
	     $cmp461 = ($59|0)==(0|0);
	     if (!($cmp461)) {
	      $60 = HEAP32[((154792 + 16|0))>>2]|0;
	      $cmp465 = ($59>>>0)<($60>>>0);
	      if ($cmp465) {
	       _abort();
	       // unreachable;
	      } else {
	       $arrayidx471 = (($R325$1) + 20|0);
	       HEAP32[$arrayidx471>>2] = $59;
	       $parent472 = (($59) + 24|0);
	       HEAP32[$parent472>>2] = $R325$1;
	       break;
	      }
	     }
	    }
	   }
	  } while(0);
	  $or481 = $add255 | 1;
	  $head482 = (($p$addr$0) + 4|0);
	  HEAP32[$head482>>2] = $or481;
	  $add$ptr483 = (($p$addr$0) + ($add255)|0);
	  HEAP32[$add$ptr483>>2] = $add255;
	  $61 = HEAP32[((154792 + 20|0))>>2]|0;
	  $cmp486 = ($p$addr$0|0)==($61|0);
	  if ($cmp486) {
	   HEAP32[((154792 + 8|0))>>2] = $add255;
	   STACKTOP = sp;return;
	  } else {
	   $psize$addr$1 = $add255;
	  }
	 } else {
	  $and495 = $31 & -2;
	  HEAP32[$head222>>2] = $and495;
	  $or496 = $psize$addr$0 | 1;
	  $head497 = (($p$addr$0) + 4|0);
	  HEAP32[$head497>>2] = $or496;
	  $add$ptr498 = (($p$addr$0) + ($psize$addr$0)|0);
	  HEAP32[$add$ptr498>>2] = $psize$addr$0;
	  $psize$addr$1 = $psize$addr$0;
	 }
	 $shr501 = $psize$addr$1 >>> 3;
	 $cmp502 = ($psize$addr$1>>>0)<(256);
	 if ($cmp502) {
	  $shl508 = $shr501 << 1;
	  $arrayidx510 = ((154792 + ($shl508<<2)|0) + 40|0);
	  $62 = HEAP32[154792>>2]|0;
	  $shl513 = 1 << $shr501;
	  $and514 = $62 & $shl513;
	  $tobool515 = ($and514|0)==(0);
	  if ($tobool515) {
	   $or519 = $62 | $shl513;
	   HEAP32[154792>>2] = $or519;
	   $arrayidx510$sum$pre = (($shl508) + 2)|0;
	   $$pre = ((154792 + ($arrayidx510$sum$pre<<2)|0) + 40|0);
	   $$pre$phiZ2D = $$pre;$F511$0 = $arrayidx510;
	  } else {
	   $arrayidx510$sum11 = (($shl508) + 2)|0;
	   $63 = ((154792 + ($arrayidx510$sum11<<2)|0) + 40|0);
	   $64 = HEAP32[$63>>2]|0;
	   $65 = HEAP32[((154792 + 16|0))>>2]|0;
	   $cmp523 = ($64>>>0)<($65>>>0);
	   if ($cmp523) {
	    _abort();
	    // unreachable;
	   } else {
	    $$pre$phiZ2D = $63;$F511$0 = $64;
	   }
	  }
	  HEAP32[$$pre$phiZ2D>>2] = $p$addr$0;
	  $bk533 = (($F511$0) + 12|0);
	  HEAP32[$bk533>>2] = $p$addr$0;
	  $fd534 = (($p$addr$0) + 8|0);
	  HEAP32[$fd534>>2] = $F511$0;
	  $bk535 = (($p$addr$0) + 12|0);
	  HEAP32[$bk535>>2] = $arrayidx510;
	  STACKTOP = sp;return;
	 }
	 $shr540 = $psize$addr$1 >>> 8;
	 $cmp541 = ($shr540|0)==(0);
	 if ($cmp541) {
	  $I539$0 = 0;
	 } else {
	  $cmp545 = ($psize$addr$1>>>0)>(16777215);
	  if ($cmp545) {
	   $I539$0 = 31;
	  } else {
	   $sub = (($shr540) + 1048320)|0;
	   $shr549 = $sub >>> 16;
	   $and550 = $shr549 & 8;
	   $shl551 = $shr540 << $and550;
	   $sub552 = (($shl551) + 520192)|0;
	   $shr553 = $sub552 >>> 16;
	   $and554 = $shr553 & 4;
	   $add555 = $and554 | $and550;
	   $shl556 = $shl551 << $and554;
	   $sub557 = (($shl556) + 245760)|0;
	   $shr558 = $sub557 >>> 16;
	   $and559 = $shr558 & 2;
	   $add560 = $add555 | $and559;
	   $sub561 = (14 - ($add560))|0;
	   $shl562 = $shl556 << $and559;
	   $shr563 = $shl562 >>> 15;
	   $add564 = (($sub561) + ($shr563))|0;
	   $shl565 = $add564 << 1;
	   $add566 = (($add564) + 7)|0;
	   $shr567 = $psize$addr$1 >>> $add566;
	   $and568 = $shr567 & 1;
	   $add569 = $and568 | $shl565;
	   $I539$0 = $add569;
	  }
	 }
	 $arrayidx573 = ((154792 + ($I539$0<<2)|0) + 304|0);
	 $index574 = (($p$addr$0) + 28|0);
	 $I539$0$c = $I539$0;
	 HEAP32[$index574>>2] = $I539$0$c;
	 $arrayidx576 = (($p$addr$0) + 20|0);
	 HEAP32[$arrayidx576>>2] = 0;
	 $66 = (($p$addr$0) + 16|0);
	 HEAP32[$66>>2] = 0;
	 $67 = HEAP32[((154792 + 4|0))>>2]|0;
	 $shl580 = 1 << $I539$0;
	 $and581 = $67 & $shl580;
	 $tobool582 = ($and581|0)==(0);
	 if ($tobool582) {
	  $or586 = $67 | $shl580;
	  HEAP32[((154792 + 4|0))>>2] = $or586;
	  HEAP32[$arrayidx573>>2] = $p$addr$0;
	  $parent587 = (($p$addr$0) + 24|0);
	  HEAP32[$parent587>>2] = $arrayidx573;
	  $bk588 = (($p$addr$0) + 12|0);
	  HEAP32[$bk588>>2] = $p$addr$0;
	  $fd589 = (($p$addr$0) + 8|0);
	  HEAP32[$fd589>>2] = $p$addr$0;
	  STACKTOP = sp;return;
	 }
	 $68 = HEAP32[$arrayidx573>>2]|0;
	 $cmp592 = ($I539$0|0)==(31);
	 if ($cmp592) {
	  $cond = 0;
	 } else {
	  $shr594 = $I539$0 >>> 1;
	  $sub597 = (25 - ($shr594))|0;
	  $cond = $sub597;
	 }
	 $head59932 = (($68) + 4|0);
	 $69 = HEAP32[$head59932>>2]|0;
	 $and60033 = $69 & -8;
	 $cmp60134 = ($and60033|0)==($psize$addr$1|0);
	 L194: do {
	  if ($cmp60134) {
	   $T$0$lcssa = $68;
	  } else {
	   $shl598 = $psize$addr$1 << $cond;
	   $K591$036 = $shl598;$T$035 = $68;
	   while(1) {
	    $shr604 = $K591$036 >>> 31;
	    $arrayidx607 = ((($T$035) + ($shr604<<2)|0) + 16|0);
	    $70 = HEAP32[$arrayidx607>>2]|0;
	    $cmp609 = ($70|0)==(0|0);
	    if ($cmp609) {
	     break;
	    }
	    $shl608 = $K591$036 << 1;
	    $head599 = (($70) + 4|0);
	    $71 = HEAP32[$head599>>2]|0;
	    $and600 = $71 & -8;
	    $cmp601 = ($and600|0)==($psize$addr$1|0);
	    if ($cmp601) {
	     $T$0$lcssa = $70;
	     break L194;
	    } else {
	     $K591$036 = $shl608;$T$035 = $70;
	    }
	   }
	   $72 = HEAP32[((154792 + 16|0))>>2]|0;
	   $cmp614 = ($arrayidx607>>>0)<($72>>>0);
	   if ($cmp614) {
	    _abort();
	    // unreachable;
	   }
	   HEAP32[$arrayidx607>>2] = $p$addr$0;
	   $parent619 = (($p$addr$0) + 24|0);
	   HEAP32[$parent619>>2] = $T$035;
	   $bk620 = (($p$addr$0) + 12|0);
	   HEAP32[$bk620>>2] = $p$addr$0;
	   $fd621 = (($p$addr$0) + 8|0);
	   HEAP32[$fd621>>2] = $p$addr$0;
	   STACKTOP = sp;return;
	  }
	 } while(0);
	 $fd626 = (($T$0$lcssa) + 8|0);
	 $73 = HEAP32[$fd626>>2]|0;
	 $74 = HEAP32[((154792 + 16|0))>>2]|0;
	 $cmp628 = ($T$0$lcssa>>>0)<($74>>>0);
	 if ($cmp628) {
	  _abort();
	  // unreachable;
	 }
	 $cmp632 = ($73>>>0)<($74>>>0);
	 if ($cmp632) {
	  _abort();
	  // unreachable;
	 }
	 $bk639 = (($73) + 12|0);
	 HEAP32[$bk639>>2] = $p$addr$0;
	 HEAP32[$fd626>>2] = $p$addr$0;
	 $fd641 = (($p$addr$0) + 8|0);
	 HEAP32[$fd641>>2] = $73;
	 $bk642 = (($p$addr$0) + 12|0);
	 HEAP32[$bk642>>2] = $T$0$lcssa;
	 $parent643 = (($p$addr$0) + 24|0);
	 HEAP32[$parent643>>2] = 0;
	 STACKTOP = sp;return;
	}
	function _isdigit($c) {
	 $c = $c|0;
	 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub = (($c) + -48)|0;
	 $cmp = ($sub>>>0)<(10);
	 $conv = $cmp&1;
	 STACKTOP = sp;return ($conv|0);
	}
	function _isspace($c) {
	 $c = $c|0;
	 var $0 = 0, $cmp = 0, $cmp1 = 0, $lor$ext = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($c|0)==(32);
	 if ($cmp) {
	  $0 = 1;
	 } else {
	  $sub = (($c) + -9)|0;
	  $cmp1 = ($sub>>>0)<(5);
	  $0 = $cmp1;
	 }
	 $lor$ext = $0&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _isupper($c) {
	 $c = $c|0;
	 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub = (($c) + -65)|0;
	 $cmp = ($sub>>>0)<(26);
	 $conv = $cmp&1;
	 STACKTOP = sp;return ($conv|0);
	}
	function _isxdigit($c) {
	 $c = $c|0;
	 var $0 = 0, $cmp = 0, $isdigit = 0, $isdigittmp = 0, $lor$ext = 0, $or = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $isdigittmp = (($c) + -48)|0;
	 $isdigit = ($isdigittmp>>>0)<(10);
	 if ($isdigit) {
	  $0 = 1;
	 } else {
	  $or = $c | 32;
	  $sub = (($or) + -97)|0;
	  $cmp = ($sub>>>0)<(6);
	  $0 = $cmp;
	 }
	 $lor$ext = $0&1;
	 STACKTOP = sp;return ($lor$ext|0);
	}
	function _tolower($c) {
	 $c = $c|0;
	 var $call = 0, $or = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_isupper($c)|0);
	 $tobool = ($call|0)==(0);
	 $or = $c | 32;
	 $retval$0 = $tobool ? $c : $or;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function ___intscan($f,$base,$pok,$0,$1) {
	 $f = $f|0;
	 $base = $base|0;
	 $pok = $pok|0;
	 $0 = $0|0;
	 $1 = $1|0;
	 var $$base = 0, $$base130 = 0, $$sum = 0, $$sum123 = 0, $$sum123150 = 0, $$sum124 = 0, $$sum125 = 0, $$sum126 = 0, $$sum127 = 0, $$sum127167 = 0, $$sum128 = 0, $$sum129 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
	 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
	 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
	 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
	 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
	 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
	 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
	 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
	 var $97 = 0, $98 = 0, $99 = 0, $add = 0, $add249 = 0, $and = 0, $and174 = 0, $arrayidx = 0, $arrayidx175 = 0, $arrayidx178 = 0, $arrayidx178151 = 0, $arrayidx206 = 0, $arrayidx237 = 0, $arrayidx237168 = 0, $arrayidx266 = 0, $arrayidx305 = 0, $arrayidx311 = 0, $arrayidx93 = 0, $base$addr$1 = 0, $base$addr$1134 = 0;
	 var $base$addr$1135 = 0, $c$0 = 0, $c$1 = 0, $c$1136 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3177 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$7163 = 0, $c$8 = 0, $c$9$be = 0, $call = 0, $call105 = 0;
	 var $call126 = 0, $call160 = 0, $call200 = 0, $call21 = 0, $call231 = 0, $call260 = 0, $call299 = 0, $call3 = 0, $call326 = 0, $call330 = 0, $call347 = 0, $call353 = 0, $call4 = 0, $call42 = 0, $call57 = 0, $cmp = 0, $cmp1 = 0, $cmp108 = 0, $cmp112 = 0, $cmp112184 = 0;
	 var $cmp114 = 0, $cmp114$ = 0, $cmp119 = 0, $cmp132 = 0, $cmp132176 = 0, $cmp14 = 0, $cmp153 = 0, $cmp165 = 0, $cmp180 = 0, $cmp180153 = 0, $cmp183 = 0, $cmp183$ = 0, $cmp193 = 0, $cmp208 = 0, $cmp208145 = 0, $cmp224 = 0, $cmp239 = 0, $cmp239170 = 0, $cmp242 = 0, $cmp242$ = 0;
	 var $cmp25 = 0, $cmp253 = 0, $cmp268 = 0, $cmp268162 = 0, $cmp292 = 0, $cmp30 = 0, $cmp307 = 0, $cmp313 = 0, $cmp319 = 0, $cmp35 = 0, $cmp45 = 0, $cmp50 = 0, $cmp61 = 0, $cmp7 = 0, $cmp95 = 0, $cond = 0, $cond44 = 0, $cond59 = 0, $conv = 0, $conv124 = 0;
	 var $conv158 = 0, $conv176 = 0, $conv179 = 0, $conv179152 = 0, $conv179155 = 0, $conv19 = 0, $conv198 = 0, $conv207 = 0, $conv207144 = 0, $conv229 = 0, $conv238 = 0, $conv238169 = 0, $conv238172 = 0, $conv258 = 0, $conv267 = 0, $conv267161 = 0, $conv297 = 0, $conv306 = 0, $conv312 = 0, $conv324 = 0;
	 var $conv40 = 0, $conv55 = 0, $conv94 = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr123 = 0, $incdec$ptr157 = 0, $incdec$ptr18 = 0, $incdec$ptr197 = 0, $incdec$ptr228 = 0, $incdec$ptr257 = 0, $incdec$ptr296 = 0, $incdec$ptr323 = 0, $incdec$ptr336 = 0, $incdec$ptr39 = 0, $incdec$ptr54 = 0, $incdec$ptr68 = 0, $incdec$ptr77 = 0, $mul173 = 0, $mul246 = 0;
	 var $neg$0 = 0, $or = 0, $or$cond = 0, $or$cond131 = 0, $or$cond132 = 0, $or$cond141 = 0, $or$cond141147 = 0, $or189 = 0, $phitmp207 = 0, $rpos = 0, $shend = 0, $shl = 0, $shr = 0, $sub = 0, $sub111 = 0, $sub111183 = 0, $sub111186 = 0, $sub131 = 0, $sub131$lcssa = 0, $sub131175 = 0;
	 var $sub131179 = 0, $sub170 = 0, $tobool = 0, $tobool171 = 0, $tobool333 = 0, $tobool345 = 0, $tobool65 = 0, $tobool71 = 0, $tobool99 = 0, $x$0185 = 0, $x$1154 = 0, $x$2171 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($base>>>0)>(36);
	 if ($cmp) {
	  $call = (___errno_location()|0);
	  HEAP32[$call>>2] = 22;
	  $143 = 0;$144 = 0;
	  tempRet0 = $143;
	  STACKTOP = sp;return ($144|0);
	 }
	 $rpos = (($f) + 4|0);
	 $shend = (($f) + 100|0);
	 while(1) {
	  $2 = HEAP32[$rpos>>2]|0;
	  $3 = HEAP32[$shend>>2]|0;
	  $cmp1 = ($2>>>0)<($3>>>0);
	  if ($cmp1) {
	   $incdec$ptr = (($2) + 1|0);
	   HEAP32[$rpos>>2] = $incdec$ptr;
	   $4 = HEAP8[$2>>0]|0;
	   $conv = $4&255;
	   $cond = $conv;
	  } else {
	   $call3 = (___shgetc($f)|0);
	   $cond = $call3;
	  }
	  $call4 = (_isspace($cond)|0);
	  $tobool = ($call4|0)==(0);
	  if ($tobool) {
	   break;
	  }
	 }
	 $cmp7 = ($cond|0)==(45);
	 do {
	  if ((($cond|0) == 43) | (($cond|0) == 45)) {
	   $sub = $cmp7 << 31 >> 31;
	   $5 = HEAP32[$rpos>>2]|0;
	   $6 = HEAP32[$shend>>2]|0;
	   $cmp14 = ($5>>>0)<($6>>>0);
	   if ($cmp14) {
	    $incdec$ptr18 = (($5) + 1|0);
	    HEAP32[$rpos>>2] = $incdec$ptr18;
	    $7 = HEAP8[$5>>0]|0;
	    $conv19 = $7&255;
	    $c$0 = $conv19;$neg$0 = $sub;
	    break;
	   } else {
	    $call21 = (___shgetc($f)|0);
	    $c$0 = $call21;$neg$0 = $sub;
	    break;
	   }
	  } else {
	   $c$0 = $cond;$neg$0 = 0;
	  }
	 } while(0);
	 $cmp25 = ($base|0)==(0);
	 $8 = $base & -17;
	 $9 = ($8|0)==(0);
	 $cmp30 = ($c$0|0)==(48);
	 $or$cond = $9 & $cmp30;
	 do {
	  if ($or$cond) {
	   $10 = HEAP32[$rpos>>2]|0;
	   $11 = HEAP32[$shend>>2]|0;
	   $cmp35 = ($10>>>0)<($11>>>0);
	   if ($cmp35) {
	    $incdec$ptr39 = (($10) + 1|0);
	    HEAP32[$rpos>>2] = $incdec$ptr39;
	    $12 = HEAP8[$10>>0]|0;
	    $conv40 = $12&255;
	    $cond44 = $conv40;
	   } else {
	    $call42 = (___shgetc($f)|0);
	    $cond44 = $call42;
	   }
	   $or = $cond44 | 32;
	   $cmp45 = ($or|0)==(120);
	   if (!($cmp45)) {
	    $$base = $cmp25 ? 8 : $base;
	    $base$addr$1 = $$base;$c$1 = $cond44;
	    label = 32;
	    break;
	   }
	   $13 = HEAP32[$rpos>>2]|0;
	   $14 = HEAP32[$shend>>2]|0;
	   $cmp50 = ($13>>>0)<($14>>>0);
	   if ($cmp50) {
	    $incdec$ptr54 = (($13) + 1|0);
	    HEAP32[$rpos>>2] = $incdec$ptr54;
	    $15 = HEAP8[$13>>0]|0;
	    $conv55 = $15&255;
	    $cond59 = $conv55;
	   } else {
	    $call57 = (___shgetc($f)|0);
	    $cond59 = $call57;
	   }
	   $$sum129 = (($cond59) + 1)|0;
	   $arrayidx = (155384 + ($$sum129)|0);
	   $16 = HEAP8[$arrayidx>>0]|0;
	   $cmp61 = ($16&255)>(15);
	   if ($cmp61) {
	    $17 = HEAP32[$shend>>2]|0;
	    $tobool65 = ($17|0)==(0|0);
	    if (!($tobool65)) {
	     $18 = HEAP32[$rpos>>2]|0;
	     $incdec$ptr68 = (($18) + -1|0);
	     HEAP32[$rpos>>2] = $incdec$ptr68;
	    }
	    $tobool71 = ($pok|0)==(0);
	    if ($tobool71) {
	     ___shlim($f,0);
	     $143 = 0;$144 = 0;
	     tempRet0 = $143;
	     STACKTOP = sp;return ($144|0);
	    }
	    if ($tobool65) {
	     $143 = 0;$144 = 0;
	     tempRet0 = $143;
	     STACKTOP = sp;return ($144|0);
	    }
	    $19 = HEAP32[$rpos>>2]|0;
	    $incdec$ptr77 = (($19) + -1|0);
	    HEAP32[$rpos>>2] = $incdec$ptr77;
	    $143 = 0;$144 = 0;
	    tempRet0 = $143;
	    STACKTOP = sp;return ($144|0);
	   } else {
	    $base$addr$1135 = 16;$c$1136 = $cond59;
	    label = 47;
	   }
	  } else {
	   $$base130 = $cmp25 ? 10 : $base;
	   $$sum = (($c$0) + 1)|0;
	   $arrayidx93 = (155384 + ($$sum)|0);
	   $20 = HEAP8[$arrayidx93>>0]|0;
	   $conv94 = $20&255;
	   $cmp95 = ($conv94>>>0)<($$base130>>>0);
	   if ($cmp95) {
	    $base$addr$1 = $$base130;$c$1 = $c$0;
	    label = 32;
	   } else {
	    $21 = HEAP32[$shend>>2]|0;
	    $tobool99 = ($21|0)==(0|0);
	    if (!($tobool99)) {
	     $22 = HEAP32[$rpos>>2]|0;
	     $incdec$ptr102 = (($22) + -1|0);
	     HEAP32[$rpos>>2] = $incdec$ptr102;
	    }
	    ___shlim($f,0);
	    $call105 = (___errno_location()|0);
	    HEAP32[$call105>>2] = 22;
	    $143 = 0;$144 = 0;
	    tempRet0 = $143;
	    STACKTOP = sp;return ($144|0);
	   }
	  }
	 } while(0);
	 if ((label|0) == 32) {
	  $cmp108 = ($base$addr$1|0)==(10);
	  if ($cmp108) {
	   $sub111183 = (($c$1) + -48)|0;
	   $cmp112184 = ($sub111183>>>0)<(10);
	   if ($cmp112184) {
	    $sub111186 = $sub111183;$x$0185 = 0;
	    while(1) {
	     $add = (($x$0185) + ($sub111186))|0;
	     $23 = HEAP32[$rpos>>2]|0;
	     $24 = HEAP32[$shend>>2]|0;
	     $cmp119 = ($23>>>0)<($24>>>0);
	     if ($cmp119) {
	      $incdec$ptr123 = (($23) + 1|0);
	      HEAP32[$rpos>>2] = $incdec$ptr123;
	      $25 = HEAP8[$23>>0]|0;
	      $conv124 = $25&255;
	      $c$2$be = $conv124;
	     } else {
	      $call126 = (___shgetc($f)|0);
	      $c$2$be = $call126;
	     }
	     $sub111 = (($c$2$be) + -48)|0;
	     $cmp112 = ($sub111>>>0)<(10);
	     $cmp114 = ($add>>>0)<(429496729);
	     $cmp114$ = $cmp112 & $cmp114;
	     if (!($cmp114$)) {
	      break;
	     }
	     $phitmp207 = ($add*10)|0;
	     $sub111186 = $sub111;$x$0185 = $phitmp207;
	    }
	    $145 = $add;$146 = 0;$c$2$lcssa = $c$2$be;
	   } else {
	    $145 = 0;$146 = 0;$c$2$lcssa = $c$1;
	   }
	   $sub131175 = (($c$2$lcssa) + -48)|0;
	   $cmp132176 = ($sub131175>>>0)<(10);
	   if ($cmp132176) {
	    $26 = $145;$27 = $146;$c$3177 = $c$2$lcssa;$sub131179 = $sub131175;
	    while(1) {
	     $28 = (___muldi3(($26|0),($27|0),10,0)|0);
	     $29 = tempRet0;
	     $30 = ($sub131179|0)<(0);
	     $31 = $30 << 31 >> 31;
	     $32 = $sub131179 ^ -1;
	     $33 = $31 ^ -1;
	     $34 = ($29>>>0)>($33>>>0);
	     $35 = ($29|0)==($33|0);
	     $36 = ($28>>>0)>($32>>>0);
	     $37 = $35 & $36;
	     $38 = $34 | $37;
	     if ($38) {
	      $147 = $26;$148 = $27;$c$3$lcssa = $c$3177;$sub131$lcssa = $sub131179;
	      break;
	     }
	     $39 = (_i64Add(($28|0),($29|0),($sub131179|0),($31|0))|0);
	     $40 = tempRet0;
	     $41 = HEAP32[$rpos>>2]|0;
	     $42 = HEAP32[$shend>>2]|0;
	     $cmp153 = ($41>>>0)<($42>>>0);
	     if ($cmp153) {
	      $incdec$ptr157 = (($41) + 1|0);
	      HEAP32[$rpos>>2] = $incdec$ptr157;
	      $43 = HEAP8[$41>>0]|0;
	      $conv158 = $43&255;
	      $c$3$be = $conv158;
	     } else {
	      $call160 = (___shgetc($f)|0);
	      $c$3$be = $call160;
	     }
	     $sub131 = (($c$3$be) + -48)|0;
	     $cmp132 = ($sub131>>>0)<(10);
	     $44 = ($40>>>0)<(429496729);
	     $45 = ($40|0)==(429496729);
	     $46 = ($39>>>0)<(2576980378);
	     $47 = $45 & $46;
	     $48 = $44 | $47;
	     $or$cond131 = $cmp132 & $48;
	     if ($or$cond131) {
	      $26 = $39;$27 = $40;$c$3177 = $c$3$be;$sub131179 = $sub131;
	     } else {
	      $147 = $39;$148 = $40;$c$3$lcssa = $c$3$be;$sub131$lcssa = $sub131;
	      break;
	     }
	    }
	    $cmp165 = ($sub131$lcssa>>>0)>(9);
	    if ($cmp165) {
	     $120 = $148;$123 = $147;
	    } else {
	     $149 = $147;$150 = $148;$base$addr$1134 = 10;$c$8 = $c$3$lcssa;
	     label = 73;
	    }
	   } else {
	    $120 = $146;$123 = $145;
	   }
	  } else {
	   $base$addr$1135 = $base$addr$1;$c$1136 = $c$1;
	   label = 47;
	  }
	 }
	 L70: do {
	  if ((label|0) == 47) {
	   $sub170 = (($base$addr$1135) + -1)|0;
	   $and = $sub170 & $base$addr$1135;
	   $tobool171 = ($and|0)==(0);
	   if ($tobool171) {
	    $mul173 = ($base$addr$1135*23)|0;
	    $shr = $mul173 >>> 5;
	    $and174 = $shr & 7;
	    $arrayidx175 = (155648 + ($and174)|0);
	    $50 = HEAP8[$arrayidx175>>0]|0;
	    $conv176 = $50 << 24 >> 24;
	    $$sum123150 = (($c$1136) + 1)|0;
	    $arrayidx178151 = (155384 + ($$sum123150)|0);
	    $51 = HEAP8[$arrayidx178151>>0]|0;
	    $conv179152 = $51&255;
	    $cmp180153 = ($conv179152>>>0)<($base$addr$1135>>>0);
	    if ($cmp180153) {
	     $conv179155 = $conv179152;$x$1154 = 0;
	     while(1) {
	      $shl = $x$1154 << $conv176;
	      $or189 = $conv179155 | $shl;
	      $52 = HEAP32[$rpos>>2]|0;
	      $53 = HEAP32[$shend>>2]|0;
	      $cmp193 = ($52>>>0)<($53>>>0);
	      if ($cmp193) {
	       $incdec$ptr197 = (($52) + 1|0);
	       HEAP32[$rpos>>2] = $incdec$ptr197;
	       $54 = HEAP8[$52>>0]|0;
	       $conv198 = $54&255;
	       $c$4$be = $conv198;
	      } else {
	       $call200 = (___shgetc($f)|0);
	       $c$4$be = $call200;
	      }
	      $$sum123 = (($c$4$be) + 1)|0;
	      $arrayidx178 = (155384 + ($$sum123)|0);
	      $55 = HEAP8[$arrayidx178>>0]|0;
	      $conv179 = $55&255;
	      $cmp180 = ($conv179>>>0)<($base$addr$1135>>>0);
	      $cmp183 = ($or189>>>0)<(134217728);
	      $cmp183$ = $cmp180 & $cmp183;
	      if ($cmp183$) {
	       $conv179155 = $conv179;$x$1154 = $or189;
	      } else {
	       break;
	      }
	     }
	     $58 = $55;$60 = 0;$63 = $or189;$c$4$lcssa = $c$4$be;
	    } else {
	     $58 = $51;$60 = 0;$63 = 0;$c$4$lcssa = $c$1136;
	    }
	    $56 = (_bitshift64Lshr(-1,-1,($conv176|0))|0);
	    $57 = tempRet0;
	    $conv207144 = $58&255;
	    $cmp208145 = ($conv207144>>>0)>=($base$addr$1135>>>0);
	    $59 = ($60>>>0)>($57>>>0);
	    $61 = ($60|0)==($57|0);
	    $62 = ($63>>>0)>($56>>>0);
	    $64 = $61 & $62;
	    $65 = $59 | $64;
	    $or$cond141147 = $cmp208145 | $65;
	    if ($or$cond141147) {
	     $149 = $63;$150 = $60;$base$addr$1134 = $base$addr$1135;$c$8 = $c$4$lcssa;
	     label = 73;
	     break;
	    } else {
	     $66 = $63;$67 = $60;$71 = $58;
	    }
	    while(1) {
	     $68 = (_bitshift64Shl(($66|0),($67|0),($conv176|0))|0);
	     $69 = tempRet0;
	     $70 = $71&255;
	     $72 = $70 | $68;
	     $73 = HEAP32[$rpos>>2]|0;
	     $74 = HEAP32[$shend>>2]|0;
	     $cmp224 = ($73>>>0)<($74>>>0);
	     if ($cmp224) {
	      $incdec$ptr228 = (($73) + 1|0);
	      HEAP32[$rpos>>2] = $incdec$ptr228;
	      $75 = HEAP8[$73>>0]|0;
	      $conv229 = $75&255;
	      $c$5$be = $conv229;
	     } else {
	      $call231 = (___shgetc($f)|0);
	      $c$5$be = $call231;
	     }
	     $$sum124 = (($c$5$be) + 1)|0;
	     $arrayidx206 = (155384 + ($$sum124)|0);
	     $76 = HEAP8[$arrayidx206>>0]|0;
	     $conv207 = $76&255;
	     $cmp208 = ($conv207>>>0)>=($base$addr$1135>>>0);
	     $77 = ($69>>>0)>($57>>>0);
	     $78 = ($69|0)==($57|0);
	     $79 = ($72>>>0)>($56>>>0);
	     $80 = $78 & $79;
	     $81 = $77 | $80;
	     $or$cond141 = $cmp208 | $81;
	     if ($or$cond141) {
	      $149 = $72;$150 = $69;$base$addr$1134 = $base$addr$1135;$c$8 = $c$5$be;
	      label = 73;
	      break L70;
	     } else {
	      $66 = $72;$67 = $69;$71 = $76;
	     }
	    }
	   }
	   $$sum127167 = (($c$1136) + 1)|0;
	   $arrayidx237168 = (155384 + ($$sum127167)|0);
	   $49 = HEAP8[$arrayidx237168>>0]|0;
	   $conv238169 = $49&255;
	   $cmp239170 = ($conv238169>>>0)<($base$addr$1135>>>0);
	   if ($cmp239170) {
	    $conv238172 = $conv238169;$x$2171 = 0;
	    while(1) {
	     $mul246 = Math_imul($x$2171, $base$addr$1135)|0;
	     $add249 = (($conv238172) + ($mul246))|0;
	     $82 = HEAP32[$rpos>>2]|0;
	     $83 = HEAP32[$shend>>2]|0;
	     $cmp253 = ($82>>>0)<($83>>>0);
	     if ($cmp253) {
	      $incdec$ptr257 = (($82) + 1|0);
	      HEAP32[$rpos>>2] = $incdec$ptr257;
	      $84 = HEAP8[$82>>0]|0;
	      $conv258 = $84&255;
	      $c$6$be = $conv258;
	     } else {
	      $call260 = (___shgetc($f)|0);
	      $c$6$be = $call260;
	     }
	     $$sum127 = (($c$6$be) + 1)|0;
	     $arrayidx237 = (155384 + ($$sum127)|0);
	     $85 = HEAP8[$arrayidx237>>0]|0;
	     $conv238 = $85&255;
	     $cmp239 = ($conv238>>>0)<($base$addr$1135>>>0);
	     $cmp242 = ($add249>>>0)<(119304647);
	     $cmp242$ = $cmp239 & $cmp242;
	     if ($cmp242$) {
	      $conv238172 = $conv238;$x$2171 = $add249;
	     } else {
	      break;
	     }
	    }
	    $151 = $add249;$152 = 0;$86 = $85;$c$6$lcssa = $c$6$be;
	   } else {
	    $151 = 0;$152 = 0;$86 = $49;$c$6$lcssa = $c$1136;
	   }
	   $conv267161 = $86&255;
	   $cmp268162 = ($conv267161>>>0)<($base$addr$1135>>>0);
	   if ($cmp268162) {
	    $87 = (___udivdi3(-1,-1,($base$addr$1135|0),0)|0);
	    $88 = tempRet0;
	    $90 = $152;$93 = $151;$99 = $86;$c$7163 = $c$6$lcssa;
	    while(1) {
	     $89 = ($90>>>0)>($88>>>0);
	     $91 = ($90|0)==($88|0);
	     $92 = ($93>>>0)>($87>>>0);
	     $94 = $91 & $92;
	     $95 = $89 | $94;
	     if ($95) {
	      $149 = $93;$150 = $90;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7163;
	      label = 73;
	      break L70;
	     }
	     $96 = (___muldi3(($93|0),($90|0),($base$addr$1135|0),0)|0);
	     $97 = tempRet0;
	     $98 = $99&255;
	     $100 = $98 ^ -1;
	     $101 = ($97>>>0)>(4294967295);
	     $102 = ($97|0)==(-1);
	     $103 = ($96>>>0)>($100>>>0);
	     $104 = $102 & $103;
	     $105 = $101 | $104;
	     if ($105) {
	      $149 = $93;$150 = $90;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7163;
	      label = 73;
	      break L70;
	     }
	     $106 = (_i64Add(($98|0),0,($96|0),($97|0))|0);
	     $107 = tempRet0;
	     $108 = HEAP32[$rpos>>2]|0;
	     $109 = HEAP32[$shend>>2]|0;
	     $cmp292 = ($108>>>0)<($109>>>0);
	     if ($cmp292) {
	      $incdec$ptr296 = (($108) + 1|0);
	      HEAP32[$rpos>>2] = $incdec$ptr296;
	      $110 = HEAP8[$108>>0]|0;
	      $conv297 = $110&255;
	      $c$7$be = $conv297;
	     } else {
	      $call299 = (___shgetc($f)|0);
	      $c$7$be = $call299;
	     }
	     $$sum128 = (($c$7$be) + 1)|0;
	     $arrayidx266 = (155384 + ($$sum128)|0);
	     $111 = HEAP8[$arrayidx266>>0]|0;
	     $conv267 = $111&255;
	     $cmp268 = ($conv267>>>0)<($base$addr$1135>>>0);
	     if ($cmp268) {
	      $90 = $107;$93 = $106;$99 = $111;$c$7163 = $c$7$be;
	     } else {
	      $149 = $106;$150 = $107;$base$addr$1134 = $base$addr$1135;$c$8 = $c$7$be;
	      label = 73;
	      break;
	     }
	    }
	   } else {
	    $149 = $151;$150 = $152;$base$addr$1134 = $base$addr$1135;$c$8 = $c$6$lcssa;
	    label = 73;
	   }
	  }
	 } while(0);
	 if ((label|0) == 73) {
	  $$sum125 = (($c$8) + 1)|0;
	  $arrayidx305 = (155384 + ($$sum125)|0);
	  $112 = HEAP8[$arrayidx305>>0]|0;
	  $conv306 = $112&255;
	  $cmp307 = ($conv306>>>0)<($base$addr$1134>>>0);
	  if ($cmp307) {
	   while(1) {
	    $113 = HEAP32[$rpos>>2]|0;
	    $114 = HEAP32[$shend>>2]|0;
	    $cmp319 = ($113>>>0)<($114>>>0);
	    if ($cmp319) {
	     $incdec$ptr323 = (($113) + 1|0);
	     HEAP32[$rpos>>2] = $incdec$ptr323;
	     $115 = HEAP8[$113>>0]|0;
	     $conv324 = $115&255;
	     $c$9$be = $conv324;
	    } else {
	     $call326 = (___shgetc($f)|0);
	     $c$9$be = $call326;
	    }
	    $$sum126 = (($c$9$be) + 1)|0;
	    $arrayidx311 = (155384 + ($$sum126)|0);
	    $116 = HEAP8[$arrayidx311>>0]|0;
	    $conv312 = $116&255;
	    $cmp313 = ($conv312>>>0)<($base$addr$1134>>>0);
	    if (!($cmp313)) {
	     break;
	    }
	   }
	   $call330 = (___errno_location()|0);
	   HEAP32[$call330>>2] = 34;
	   $120 = $1;$123 = $0;
	  } else {
	   $120 = $150;$123 = $149;
	  }
	 }
	 $117 = HEAP32[$shend>>2]|0;
	 $tobool333 = ($117|0)==(0|0);
	 if (!($tobool333)) {
	  $118 = HEAP32[$rpos>>2]|0;
	  $incdec$ptr336 = (($118) + -1|0);
	  HEAP32[$rpos>>2] = $incdec$ptr336;
	 }
	 $119 = ($120>>>0)<($1>>>0);
	 $121 = ($120|0)==($1|0);
	 $122 = ($123>>>0)<($0>>>0);
	 $124 = $121 & $122;
	 $125 = $119 | $124;
	 if (!($125)) {
	  $126 = $0 & 1;
	  $127 = ($126|0)==(0);
	  $128 = (0)==(0);
	  $129 = $127 & $128;
	  $tobool345 = ($neg$0|0)==(0);
	  $or$cond132 = $129 & $tobool345;
	  if ($or$cond132) {
	   $call347 = (___errno_location()|0);
	   HEAP32[$call347>>2] = 34;
	   $130 = (_i64Add(($0|0),($1|0),-1,-1)|0);
	   $131 = tempRet0;
	   $143 = $131;$144 = $130;
	   tempRet0 = $143;
	   STACKTOP = sp;return ($144|0);
	  }
	  $132 = ($120>>>0)>($1>>>0);
	  $133 = ($120|0)==($1|0);
	  $134 = ($123>>>0)>($0>>>0);
	  $135 = $133 & $134;
	  $136 = $132 | $135;
	  if ($136) {
	   $call353 = (___errno_location()|0);
	   HEAP32[$call353>>2] = 34;
	   $143 = $1;$144 = $0;
	   tempRet0 = $143;
	   STACKTOP = sp;return ($144|0);
	  }
	 }
	 $137 = ($neg$0|0)<(0);
	 $138 = $137 << 31 >> 31;
	 $139 = $123 ^ $neg$0;
	 $140 = $120 ^ $138;
	 $141 = (_i64Subtract(($139|0),($140|0),($neg$0|0),($138|0))|0);
	 $142 = tempRet0;
	 $143 = $142;$144 = $141;
	 tempRet0 = $143;
	 STACKTOP = sp;return ($144|0);
	}
	function ___floatscan($f,$prec,$pok) {
	 $f = $f|0;
	 $prec = $prec|0;
	 $pok = $pok|0;
	 var $$$i = 0, $$conv229$i = 0, $$inc66$i = 0, $$pre$i = 0, $$sub482$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
	 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
	 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
	 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
	 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
	 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
	 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
	 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
	 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
	 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
	 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
	 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
	 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
	 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa376$i = 0, $a$0298$i = 0, $a$1$i = 0, $a$2$ph249$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$4238$i = 0, $a$5$i = 0, $add210115$i = 0;
	 var $add214$i = 0, $add252$i = 0, $add256$i = 0.0, $add259$i = 0.0, $add265$i = 0, $add275$i = 0, $add287$i = 0, $add344$i = 0, $add368$i = 0, $add401$i = 0, $add414$i = 0, $add424$i = 0, $add435$i = 0, $add455$1$i = 0, $add460$1$i = 0, $add470$1$i = 0.0, $add476$i = 0, $add499$i = 0.0, $add501$i = 0, $add516$i = 0;
	 var $add523$i = 0.0, $add530$i = 0.0, $add536$i = 0, $add543$i = 0.0, $add547$i = 0.0, $add562$i = 0.0, $add59$i = 0, $add73$i = 0, $add80$i = 0.0, $add86$i = 0.0, $and$i = 0, $and$i112 = 0, $and323$us$i = 0, $and323$us282$i = 0, $and346$i = 0, $and351$i = 0, $and354$i = 0, $and369$i = 0, $and411$i = 0, $and425$i = 0;
	 var $and436$i = 0, $and445$i = 0, $and456$1$i = 0, $and456$i = 0, $and461$1$i = 0, $and502$i = 0, $and517$i = 0, $and537$i = 0, $and565$i = 0, $arrayidx = 0, $arrayidx186$i = 0, $arrayidx186$promoted$i = 0, $arrayidx219$i = 0, $arrayidx239$i = 0, $arrayidx256$i = 0, $arrayidx261$i = 0, $arrayidx284$i = 0, $arrayidx294$i = 0, $arrayidx306$us$i = 0, $arrayidx306$us266$i = 0;
	 var $arrayidx352$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx373$i = 0, $arrayidx374$i = 0, $arrayidx408$i = 0, $arrayidx440$i = 0, $arrayidx446$i = 0, $arrayidx463$1$i = 0, $arrayidx463$i = 0, $arrayidx468$1$i = 0, $arrayidx468$i = 0, $arrayidx509$i = 0, $arrayidx64$i = 0, $arrayidx77$i = 0, $arrayidx95 = 0, $bias$0$i = 0.0, $bias$096$i = 0.0, $bits$0$ph = 0, $bits$addr$0$i = 0;
	 var $bits$addr$0$i114 = 0, $brmerge = 0, $brmerge176 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$1154 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$3150 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$addr$0$i = 0, $c$addr$1$be$i = 0, $c$addr$1$ph$i = 0, $c$addr$2$i = 0, $c$addr$3$be$i = 0;
	 var $c$addr$3$lcssa$i = 0, $c$addr$3320$i = 0, $c$addr$3332$i = 0, $call = 0, $call$i = 0, $call$i90 = 0, $call101$i = 0, $call113 = 0, $call13$i = 0, $call133 = 0, $call135$i = 0, $call15$i = 0, $call157 = 0, $call165$i = 0, $call175$i = 0, $call187$i = 0, $call189 = 0, $call197$i = 0, $call215 = 0, $call229 = 0;
	 var $call23 = 0, $call240$i = 0.0, $call242$i = 0.0, $call263$i = 0, $call266$i = 0.0, $call27$i = 0, $call32$i = 0, $call43 = 0, $call44$i = 0, $call493$i = 0.0, $call494$i = 0.0, $call496$i = 0.0, $call497$i = 0.0, $call556$i = 0.0, $call570$i = 0.0, $call593$i = 0, $call596$i = 0.0, $call6 = 0, $call91$i = 0, $carry$0300$i = 0;
	 var $carry299$0$us$i = 0, $carry299$0$us264$i = 0, $carry299$1$lcssa$lcssa$i = 0, $carry299$1$us$i = 0, $carry299$1$us280$i = 0, $carry362$0241$i = 0, $cmp = 0, $cmp$i = 0, $cmp100$i = 0, $cmp101 = 0, $cmp106 = 0, $cmp121$i = 0, $cmp126 = 0, $cmp136 = 0, $cmp146$i = 0, $cmp149$i = 0, $cmp150 = 0, $cmp152$i = 0, $cmp16 = 0, $cmp161 = 0;
	 var $cmp165 = 0, $cmp169 = 0, $cmp172 = 0, $cmp176 = 0, $cmp183304$i = 0, $cmp19$i = 0, $cmp19343$i = 0, $cmp194$i109 = 0, $cmp197$i = 0, $cmp2$i = 0, $cmp20$i = 0, $cmp200$i = 0, $cmp203$i = 0, $cmp203$i110 = 0, $cmp20397$i = 0, $cmp206$i = 0, $cmp211$i = 0, $cmp217 = 0, $cmp222 = 0, $cmp226$i = 0;
	 var $cmp230$i = 0, $cmp231$i = 0, $cmp233 = 0, $cmp235$i = 0, $cmp244$i = 0, $cmp246$i = 0, $cmp25$i = 0, $cmp258$i = 0, $cmp258296$i = 0, $cmp26 = 0, $cmp269$i = 0, $cmp289$i = 0, $cmp29 = 0, $cmp292$i = 0, $cmp295$us257$i = 0, $cmp31 = 0, $cmp31$i = 0, $cmp31107$i = 0, $cmp324$us$i = 0, $cmp324$us283$i = 0;
	 var $cmp327$us$i = 0, $cmp327$us284$i = 0, $cmp347$i = 0, $cmp36 = 0, $cmp365$i = 0, $cmp37$i = 0, $cmp370$i = 0, $cmp375$i = 0, $cmp38$i = 0, $cmp383$i = 0, $cmp38322$i = 0, $cmp390$i = 0, $cmp393$i = 0, $cmp397$i = 0, $cmp40$i = 0, $cmp403$i = 0, $cmp40323$i = 0, $cmp403236$i = 0, $cmp40334$i = 0, $cmp418$i = 0;
	 var $cmp437$i = 0, $cmp457$1$i = 0, $cmp457$i = 0, $cmp478$i = 0, $cmp48$i = 0, $cmp483$i = 0, $cmp488$i = 0, $cmp49$i = 0, $cmp503$i = 0, $cmp51$i = 0, $cmp510$i = 0, $cmp518$i = 0, $cmp52$i = 0, $cmp525$i = 0, $cmp53 = 0, $cmp538$i = 0, $cmp54$i = 0, $cmp553$i = 0, $cmp567$i = 0, $cmp57 = 0;
	 var $cmp571$i = 0, $cmp578$i = 0, $cmp586$i = 0, $cmp6$i = 0, $cmp62$i = 0, $cmp67$i = 0, $cmp70 = 0, $cmp8$i = 0, $cmp84$i = 0, $cmp9 = 0, $cmp91 = 0, $cmp94$i = 0, $cmp97 = 0, $cond = 0, $cond$i = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $cond254$i = 0, $cond46$i = 0;
	 var $conv = 0, $conv$i = 0, $conv$i88 = 0, $conv11$i = 0, $conv111 = 0, $conv12 = 0, $conv13$i = 0, $conv131 = 0, $conv135$i = 0.0, $conv140$i = 0.0, $conv155 = 0, $conv155$i = 0.0, $conv157$i = 0.0, $conv166$i = 0.0, $conv176$i = 0.0, $conv179$i = 0.0, $conv188$i = 0.0, $conv198$i = 0.0, $conv206$i = 0.0, $conv208$i = 0.0;
	 var $conv21 = 0, $conv214$i = 0.0, $conv216$i = 0.0, $conv220$i = 0.0, $conv227 = 0, $conv234$i = 0.0, $conv236$i = 0.0, $conv240$i = 0.0, $conv241$i = 0.0, $conv25$i = 0, $conv253$pre$i = 0.0, $conv253$pre$phi$iZ2D = 0.0, $conv254$i = 0.0, $conv28 = 0, $conv30$i = 0, $conv41 = 0, $conv42$i = 0, $conv469$1$i = 0.0, $conv469$i = 0.0, $conv474$i = 0.0;
	 var $conv54$lnz$0$i = 0, $conv78$i = 0.0, $conv84 = 0.0, $conv86 = 0.0, $conv89$i = 0, $conv96 = 0, $conv99$i = 0, $d$0$i = 0, $dec = 0, $dec192124 = 0, $dec192124$in = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $div$i = 0.0, $div$i107 = 0, $div221$i = 0.0, $div264$i = 0, $div267$i = 0, $e2$0$ph$i = 0;
	 var $e2$0$us$i = 0, $e2$0$us253$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i84 = 0, $gotdig$2$i = 0, $gotdig$2$i94 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3313$i = 0, $gotdig$3328$i = 0;
	 var $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i95 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1329$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$0153 = 0, $i$0235$i = 0, $i$1$i = 0, $i$1152 = 0, $i$2149 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0;
	 var $inc189$i = 0, $inc191$i = 0, $inc204 = 0, $inc251$x$4$i = 0, $inc283$i = 0, $inc388$i = 0, $inc559$i = 0.0, $inc583$i = 0, $inc66$i = 0, $inc70$i = 0, $inc70$k$0$i = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i87 = 0, $incdec$ptr10$i = 0, $incdec$ptr110 = 0, $incdec$ptr111$i = 0, $incdec$ptr113$i = 0, $incdec$ptr12$i = 0, $incdec$ptr120$i = 0;
	 var $incdec$ptr128$i = 0, $incdec$ptr129$i = 0, $incdec$ptr130 = 0, $incdec$ptr143 = 0, $incdec$ptr154 = 0, $incdec$ptr159$i = 0, $incdec$ptr170$i = 0, $incdec$ptr184 = 0, $incdec$ptr199 = 0, $incdec$ptr20 = 0, $incdec$ptr212 = 0, $incdec$ptr226 = 0, $incdec$ptr24$i = 0, $incdec$ptr242 = 0, $incdec$ptr29$i = 0, $incdec$ptr40 = 0, $incdec$ptr41$i = 0, $incdec$ptr64 = 0, $incdec$ptr77 = 0, $incdec$ptr88$i = 0;
	 var $incdec$ptr98$i = 0, $j$0$lcssa$i = 0, $j$0318$i = 0, $j$0331$i = 0, $j$2$i = 0, $j$3305$i = 0, $k$0$lcssa$i = 0, $k$0316$i = 0, $k$0330$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4299$i = 0, $k$5$in$us$i = 0, $k$5$in$us263$i = 0, $k$5$us$i = 0, $k$5$us265$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us288$i = 0, $k$6239$i = 0, $lnz$0$lcssa$i = 0;
	 var $lnz$0311$i = 0, $lnz$0327$i = 0, $lnz$2$i = 0, $mul = 0, $mul$i = 0, $mul$i98 = 0, $mul136$i = 0.0, $mul141$i = 0.0, $mul143$i = 0, $mul158$i = 0.0, $mul167$i = 0.0, $mul168$i = 0.0, $mul177$i = 0.0, $mul178$i = 0.0, $mul180$i = 0.0, $mul187$i = 0, $mul187306$i = 0, $mul189$i = 0.0, $mul190$i = 0.0, $mul199$i = 0.0;
	 var $mul200$i = 0.0, $mul209$i = 0.0, $mul217$i = 0.0, $mul224$neg$i = 0, $mul237$i = 0.0, $mul241$i = 0.0, $mul255$i = 0.0, $mul258$i = 0.0, $mul268$i = 0, $mul417$i = 0, $mul465$1$i = 0.0, $mul475$i = 0.0, $mul522$i = 0.0, $mul529$i = 0.0, $mul542$i = 0.0, $mul546$i = 0.0, $mul582$i = 0.0, $mul79$i = 0.0, $mul85 = 0.0, $mul85$i = 0.0;
	 var $notlhs = 0, $notrhs = 0, $or = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i104 = 0, $or$cond1$i = 0, $or$cond175$not = 0, $or$cond2 = 0, $or$cond2$i = 0, $or$cond223$i = 0, $or$cond224$us$i = 0, $or$cond224$us285$i = 0, $or$cond225$i = 0, $or$cond226$i = 0, $or$cond227$i = 0, $or$cond228$i = 0, $or$cond2324$i = 0, $or$cond81 = 0, $or$cond89$i = 0;
	 var $or$cond90$i = 0, $or$i = 0, $or$i99 = 0, $or145$i = 0, $or232 = 0, $or356$i = 0, $or447$i = 0, $or94 = 0, $or99$i = 0, $rem$i = 0, $rem262$i = 0, $rem315$sink$off0$us$i = 0, $rem315$sink$off0$us279$i = 0, $retval$0 = 0.0, $rp$0$lcssa377$i = 0, $rp$0297$i = 0, $rp$1$i113 = 0, $rp$2$ph247$i = 0, $rp$3$i$ph = 0, $rp$3$ph244$i = 0;
	 var $rp$4237$i = 0, $rp$5$i = 0, $rpos = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $shend = 0, $shl409$i = 0, $shr$i = 0, $shr230$i = 0, $shr413$i = 0, $shr416$i = 0, $sign$0 = 0, $storemerge$i = 0, $sub$i = 0, $sub1$i = 0, $sub13 = 0, $sub160 = 0, $sub164 = 0, $sub168 = 0;
	 var $sub170$i = 0, $sub182$i = 0, $sub192$i = 0, $sub211$i = 0.0, $sub211$pn$i = 0.0, $sub218$i = 0, $sub225$i = 0, $sub238$i = 0, $sub239$i = 0, $sub255$i = 0, $sub260$i = 0.0, $sub276$i = 0, $sub286$i = 0, $sub300$lcssa$i = 0, $sub300$us$i = 0, $sub300$us259$i = 0, $sub301$us$i = 0, $sub301$us260$i = 0, $sub322$us$i = 0, $sub322$us281$i = 0;
	 var $sub339$us$i = 0, $sub339$us291$i = 0, $sub345$i = 0, $sub350$i = 0, $sub353$i = 0, $sub37$i = 0, $sub37321$i = 0, $sub37333$i = 0, $sub410$i = 0, $sub427$i = 0, $sub444$i = 0, $sub462$1$i = 0, $sub462$i = 0, $sub477$i = 0, $sub492$i = 0, $sub495$i = 0, $sub498$i = 0.0, $sub51$i = 0, $sub552$i = 0, $sub563$i = 0.0;
	 var $sub566$i = 0, $sub60$i = 0, $sub66$i = 0, $sub66$sub$i = 0, $sum$i = 0, $tobool = 0, $tobool$i = 0, $tobool105$i = 0, $tobool108$i = 0, $tobool110$i = 0, $tobool123$i = 0, $tobool125$i = 0, $tobool138$i = 0, $tobool138$i102 = 0, $tobool140 = 0, $tobool156$i = 0, $tobool167$i = 0, $tobool177$i = 0, $tobool180$i = 0, $tobool181 = 0;
	 var $tobool193 = 0, $tobool193123 = 0, $tobool209 = 0, $tobool239 = 0, $tobool244$i = 0, $tobool247$i = 0, $tobool249$i = 0, $tobool261$i = 0, $tobool273$i = 0, $tobool281$i = 0, $tobool331$us$i = 0, $tobool331$us287$i = 0, $tobool342$us$i = 0, $tobool342$us295$i = 0, $tobool422$i = 0, $tobool433$i = 0, $tobool513$i = 0, $tobool55 = 0, $tobool557$i = 0, $tobool56$i = 0;
	 var $tobool574$i = 0, $tobool589$i = 0, $tobool591$i = 0, $tobool61 = 0, $tobool82$i = 0, $tobool83$i = 0, $tobool88 = 0, $tobool95$i = 0, $tobool98$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$3104$i = 0, $x$4$lcssa$i = 0, $x$498$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
	 var $y$1$i = 0.0, $y$1$i115 = 0.0, $y$2$i = 0.0, $y$2$i116 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$399$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph248$i = 0, $z$1$us$i = 0, $z$1$us254$i = 0, $z$2$us$i = 0, $z$2$us262$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us290$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
	 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $x$i = sp;
	 if ((($prec|0) == 2)) {
	  $bits$0$ph = 53;$emin$0$ph = -1074;
	 } else if ((($prec|0) == 1)) {
	  $bits$0$ph = 53;$emin$0$ph = -1074;
	 } else if ((($prec|0) == 0)) {
	  $bits$0$ph = 24;$emin$0$ph = -149;
	 } else {
	  $retval$0 = 0.0;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 $rpos = (($f) + 4|0);
	 $shend = (($f) + 100|0);
	 while(1) {
	  $0 = HEAP32[$rpos>>2]|0;
	  $1 = HEAP32[$shend>>2]|0;
	  $cmp = ($0>>>0)<($1>>>0);
	  if ($cmp) {
	   $incdec$ptr = (($0) + 1|0);
	   HEAP32[$rpos>>2] = $incdec$ptr;
	   $2 = HEAP8[$0>>0]|0;
	   $conv = $2&255;
	   $cond = $conv;
	  } else {
	   $call = (___shgetc($f)|0);
	   $cond = $call;
	  }
	  $call6 = (_isspace($cond)|0);
	  $tobool = ($call6|0)==(0);
	  if ($tobool) {
	   break;
	  }
	 }
	 $cmp9 = ($cond|0)==(45);
	 do {
	  if ((($cond|0) == 43) | (($cond|0) == 45)) {
	   $conv12 = $cmp9&1;
	   $mul = $conv12 << 1;
	   $sub13 = (1 - ($mul))|0;
	   $3 = HEAP32[$rpos>>2]|0;
	   $4 = HEAP32[$shend>>2]|0;
	   $cmp16 = ($3>>>0)<($4>>>0);
	   if ($cmp16) {
	    $incdec$ptr20 = (($3) + 1|0);
	    HEAP32[$rpos>>2] = $incdec$ptr20;
	    $5 = HEAP8[$3>>0]|0;
	    $conv21 = $5&255;
	    $c$0 = $conv21;$sign$0 = $sub13;
	    break;
	   } else {
	    $call23 = (___shgetc($f)|0);
	    $c$0 = $call23;$sign$0 = $sub13;
	    break;
	   }
	  } else {
	   $c$0 = $cond;$sign$0 = 1;
	  }
	 } while(0);
	 $c$1154 = $c$0;$i$0153 = 0;
	 while(1) {
	  $or = $c$1154 | 32;
	  $arrayidx = (155664 + ($i$0153)|0);
	  $6 = HEAP8[$arrayidx>>0]|0;
	  $conv28 = $6 << 24 >> 24;
	  $cmp29 = ($or|0)==($conv28|0);
	  if (!($cmp29)) {
	   $c$1$lcssa = $c$1154;$i$0$lcssa = $i$0153;
	   break;
	  }
	  $cmp31 = ($i$0153>>>0)<(7);
	  do {
	   if ($cmp31) {
	    $7 = HEAP32[$rpos>>2]|0;
	    $8 = HEAP32[$shend>>2]|0;
	    $cmp36 = ($7>>>0)<($8>>>0);
	    if ($cmp36) {
	     $incdec$ptr40 = (($7) + 1|0);
	     HEAP32[$rpos>>2] = $incdec$ptr40;
	     $9 = HEAP8[$7>>0]|0;
	     $conv41 = $9&255;
	     $c$2 = $conv41;
	     break;
	    } else {
	     $call43 = (___shgetc($f)|0);
	     $c$2 = $call43;
	     break;
	    }
	   } else {
	    $c$2 = $c$1154;
	   }
	  } while(0);
	  $inc = (($i$0153) + 1)|0;
	  $cmp26 = ($inc>>>0)<(8);
	  if ($cmp26) {
	   $c$1154 = $c$2;$i$0153 = $inc;
	  } else {
	   $c$1$lcssa = $c$2;$i$0$lcssa = $inc;
	   break;
	  }
	 }
	 do {
	  if ((($i$0$lcssa|0) == 3)) {
	   label = 23;
	  } else if (!((($i$0$lcssa|0) == 8))) {
	   $cmp53 = ($i$0$lcssa>>>0)<(4);
	   $tobool55 = ($pok|0)==(0);
	   $or$cond = $cmp53 | $tobool55;
	   if (!($or$cond)) {
	    $cmp57 = ($i$0$lcssa|0)==(8);
	    if ($cmp57) {
	     break;
	    } else {
	     label = 23;
	     break;
	    }
	   }
	   $tobool88 = ($i$0$lcssa|0)==(0);
	   L34: do {
	    if ($tobool88) {
	     $c$3150 = $c$1$lcssa;$i$2149 = 0;
	     while(1) {
	      $or94 = $c$3150 | 32;
	      $arrayidx95 = (155680 + ($i$2149)|0);
	      $13 = HEAP8[$arrayidx95>>0]|0;
	      $conv96 = $13 << 24 >> 24;
	      $cmp97 = ($or94|0)==($conv96|0);
	      if (!($cmp97)) {
	       $c$5 = $c$3150;$i$3 = $i$2149;
	       break L34;
	      }
	      $cmp101 = ($i$2149>>>0)<(2);
	      do {
	       if ($cmp101) {
	        $14 = HEAP32[$rpos>>2]|0;
	        $15 = HEAP32[$shend>>2]|0;
	        $cmp106 = ($14>>>0)<($15>>>0);
	        if ($cmp106) {
	         $incdec$ptr110 = (($14) + 1|0);
	         HEAP32[$rpos>>2] = $incdec$ptr110;
	         $16 = HEAP8[$14>>0]|0;
	         $conv111 = $16&255;
	         $c$4 = $conv111;
	         break;
	        } else {
	         $call113 = (___shgetc($f)|0);
	         $c$4 = $call113;
	         break;
	        }
	       } else {
	        $c$4 = $c$3150;
	       }
	      } while(0);
	      $inc118 = (($i$2149) + 1)|0;
	      $cmp91 = ($inc118>>>0)<(3);
	      if ($cmp91) {
	       $c$3150 = $c$4;$i$2149 = $inc118;
	      } else {
	       $c$5 = $c$4;$i$3 = $inc118;
	       break;
	      }
	     }
	    } else {
	     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
	    }
	   } while(0);
	   if ((($i$3|0) == 0)) {
	    $cmp217 = ($c$5|0)==(48);
	    do {
	     if ($cmp217) {
	      $30 = HEAP32[$rpos>>2]|0;
	      $31 = HEAP32[$shend>>2]|0;
	      $cmp222 = ($30>>>0)<($31>>>0);
	      if ($cmp222) {
	       $incdec$ptr226 = (($30) + 1|0);
	       HEAP32[$rpos>>2] = $incdec$ptr226;
	       $32 = HEAP8[$30>>0]|0;
	       $conv227 = $32&255;
	       $cond231 = $conv227;
	      } else {
	       $call229 = (___shgetc($f)|0);
	       $cond231 = $call229;
	      }
	      $or232 = $cond231 | 32;
	      $cmp233 = ($or232|0)==(120);
	      if (!($cmp233)) {
	       $134 = HEAP32[$shend>>2]|0;
	       $tobool239 = ($134|0)==(0|0);
	       if ($tobool239) {
	        $c$6 = 48;
	        break;
	       }
	       $135 = HEAP32[$rpos>>2]|0;
	       $incdec$ptr242 = (($135) + -1|0);
	       HEAP32[$rpos>>2] = $incdec$ptr242;
	       $c$6 = 48;
	       break;
	      }
	      $33 = HEAP32[$rpos>>2]|0;
	      $34 = HEAP32[$shend>>2]|0;
	      $cmp$i = ($33>>>0)<($34>>>0);
	      if ($cmp$i) {
	       $incdec$ptr$i = (($33) + 1|0);
	       HEAP32[$rpos>>2] = $incdec$ptr$i;
	       $35 = HEAP8[$33>>0]|0;
	       $conv$i = $35&255;
	       $c$0$i = $conv$i;$gotdig$0$i = 0;
	      } else {
	       $call$i = (___shgetc($f)|0);
	       $c$0$i = $call$i;$gotdig$0$i = 0;
	      }
	      while(1) {
	       if ((($c$0$i|0) == 46)) {
	        label = 70;
	        break;
	       } else if (!((($c$0$i|0) == 48))) {
	        $50 = 0;$53 = 0;$70 = 0;$72 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
	        break;
	       }
	       $36 = HEAP32[$rpos>>2]|0;
	       $37 = HEAP32[$shend>>2]|0;
	       $cmp6$i = ($36>>>0)<($37>>>0);
	       if ($cmp6$i) {
	        $incdec$ptr10$i = (($36) + 1|0);
	        HEAP32[$rpos>>2] = $incdec$ptr10$i;
	        $38 = HEAP8[$36>>0]|0;
	        $conv11$i = $38&255;
	        $c$0$i = $conv11$i;$gotdig$0$i = 1;
	        continue;
	       } else {
	        $call13$i = (___shgetc($f)|0);
	        $c$0$i = $call13$i;$gotdig$0$i = 1;
	        continue;
	       }
	      }
	      L71: do {
	       if ((label|0) == 70) {
	        $39 = HEAP32[$rpos>>2]|0;
	        $40 = HEAP32[$shend>>2]|0;
	        $cmp20$i = ($39>>>0)<($40>>>0);
	        if ($cmp20$i) {
	         $incdec$ptr24$i = (($39) + 1|0);
	         HEAP32[$rpos>>2] = $incdec$ptr24$i;
	         $41 = HEAP8[$39>>0]|0;
	         $conv25$i = $41&255;
	         $c$1$ph$i = $conv25$i;
	        } else {
	         $call27$i = (___shgetc($f)|0);
	         $c$1$ph$i = $call27$i;
	        }
	        $cmp31107$i = ($c$1$ph$i|0)==(48);
	        if ($cmp31107$i) {
	         $45 = -1;$46 = -1;
	         while(1) {
	          $42 = HEAP32[$rpos>>2]|0;
	          $43 = HEAP32[$shend>>2]|0;
	          $cmp37$i = ($42>>>0)<($43>>>0);
	          if ($cmp37$i) {
	           $incdec$ptr41$i = (($42) + 1|0);
	           HEAP32[$rpos>>2] = $incdec$ptr41$i;
	           $44 = HEAP8[$42>>0]|0;
	           $conv42$i = $44&255;
	           $cond46$i = $conv42$i;
	          } else {
	           $call44$i = (___shgetc($f)|0);
	           $cond46$i = $call44$i;
	          }
	          $cmp31$i = ($cond46$i|0)==(48);
	          if (!($cmp31$i)) {
	           $50 = 0;$53 = 0;$70 = $45;$72 = $46;$c$2$i = $cond46$i;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
	           break L71;
	          }
	          $47 = (_i64Add(($45|0),($46|0),-1,-1)|0);
	          $48 = tempRet0;
	          $45 = $47;$46 = $48;
	         }
	        } else {
	         $50 = 0;$53 = 0;$70 = 0;$72 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
	        }
	       }
	      } while(0);
	      L84: while(1) {
	       $sub$i = (($c$2$i) + -48)|0;
	       $cmp49$i = ($sub$i>>>0)<(10);
	       do {
	        if ($cmp49$i) {
	         $d$0$i = $sub$i;
	         label = 84;
	        } else {
	         $or$i = $c$2$i | 32;
	         $sub51$i = (($or$i) + -97)|0;
	         $cmp52$i = ($sub51$i>>>0)<(6);
	         $cmp54$i = ($c$2$i|0)==(46);
	         $or$cond$i = $cmp52$i | $cmp54$i;
	         if (!($or$cond$i)) {
	          $c$2$lcssa$i = $c$2$i;
	          break L84;
	         }
	         if ($cmp54$i) {
	          $tobool$i = ($gotrad$0$i|0)==(0);
	          if ($tobool$i) {
	           $252 = $53;$253 = $50;$254 = $53;$255 = $50;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
	           break;
	          } else {
	           $c$2$lcssa$i = 46;
	           break L84;
	          }
	         } else {
	          $cmp62$i = ($c$2$i|0)>(57);
	          $sub66$i = (($or$i) + -87)|0;
	          $sub66$sub$i = $cmp62$i ? $sub66$i : $sub$i;
	          $d$0$i = $sub66$sub$i;
	          label = 84;
	          break;
	         }
	        }
	       } while(0);
	       if ((label|0) == 84) {
	        label = 0;
	        $49 = ($50|0)<(0);
	        $51 = ($50|0)==(0);
	        $52 = ($53>>>0)<(8);
	        $54 = $51 & $52;
	        $55 = $49 | $54;
	        do {
	         if ($55) {
	          $mul$i = $x$0$i << 4;
	          $add73$i = (($d$0$i) + ($mul$i))|0;
	          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $add73$i;$y$1$i = $y$0$i;
	         } else {
	          $56 = ($50|0)<(0);
	          $57 = ($50|0)==(0);
	          $58 = ($53>>>0)<(14);
	          $59 = $57 & $58;
	          $60 = $56 | $59;
	          if ($60) {
	           $conv78$i = (+($d$0$i|0));
	           $div$i = $scale$0$i * 0.0625;
	           $mul79$i = $div$i * $conv78$i;
	           $add80$i = $y$0$i + $mul79$i;
	           $gottail$1$i = $gottail$0$i;$scale$1$i = $div$i;$x$1$i = $x$0$i;$y$1$i = $add80$i;
	           break;
	          }
	          $tobool82$i = ($d$0$i|0)!=(0);
	          $tobool83$i = ($gottail$0$i|0)==(0);
	          $or$cond89$i = $tobool82$i & $tobool83$i;
	          if ($or$cond89$i) {
	           $mul85$i = $scale$0$i * 0.5;
	           $add86$i = $y$0$i + $mul85$i;
	           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $add86$i;
	          } else {
	           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
	          }
	         }
	        } while(0);
	        $61 = (_i64Add(($53|0),($50|0),1,0)|0);
	        $62 = tempRet0;
	        $252 = $70;$253 = $72;$254 = $61;$255 = $62;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
	       }
	       $63 = HEAP32[$rpos>>2]|0;
	       $64 = HEAP32[$shend>>2]|0;
	       $cmp94$i = ($63>>>0)<($64>>>0);
	       if ($cmp94$i) {
	        $incdec$ptr98$i = (($63) + 1|0);
	        HEAP32[$rpos>>2] = $incdec$ptr98$i;
	        $65 = HEAP8[$63>>0]|0;
	        $conv99$i = $65&255;
	        $50 = $255;$53 = $254;$70 = $252;$72 = $253;$c$2$i = $conv99$i;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
	        continue;
	       } else {
	        $call101$i = (___shgetc($f)|0);
	        $50 = $255;$53 = $254;$70 = $252;$72 = $253;$c$2$i = $call101$i;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
	        continue;
	       }
	      }
	      $tobool105$i = ($gotdig$2$i|0)==(0);
	      if ($tobool105$i) {
	       $66 = HEAP32[$shend>>2]|0;
	       $tobool108$i = ($66|0)==(0|0);
	       if (!($tobool108$i)) {
	        $67 = HEAP32[$rpos>>2]|0;
	        $incdec$ptr111$i = (($67) + -1|0);
	        HEAP32[$rpos>>2] = $incdec$ptr111$i;
	       }
	       if ($tobool55) {
	        ___shlim($f,0);
	       } else {
	        if (!($tobool108$i)) {
	         $68 = HEAP32[$rpos>>2]|0;
	         $incdec$ptr120$i = (($68) + -1|0);
	         HEAP32[$rpos>>2] = $incdec$ptr120$i;
	         $tobool123$i = ($gotrad$0$i|0)==(0);
	         if (!($tobool123$i)) {
	          $incdec$ptr129$i = (($68) + -2|0);
	          HEAP32[$rpos>>2] = $incdec$ptr129$i;
	         }
	        }
	       }
	       $conv135$i = (+($sign$0|0));
	       $mul136$i = $conv135$i * 0.0;
	       $retval$0 = $mul136$i;
	       STACKTOP = sp;return (+$retval$0);
	      }
	      $tobool138$i = ($gotrad$0$i|0)==(0);
	      $69 = $tobool138$i ? $53 : $70;
	      $71 = $tobool138$i ? $50 : $72;
	      $73 = ($50|0)<(0);
	      $74 = ($50|0)==(0);
	      $75 = ($53>>>0)<(8);
	      $76 = $74 & $75;
	      $77 = $73 | $76;
	      if ($77) {
	       $78 = $53;$79 = $50;$x$3104$i = $x$0$i;
	       while(1) {
	        $mul143$i = $x$3104$i << 4;
	        $80 = (_i64Add(($78|0),($79|0),1,0)|0);
	        $81 = tempRet0;
	        $82 = ($81|0)<(0);
	        $83 = ($81|0)==(0);
	        $84 = ($80>>>0)<(8);
	        $85 = $83 & $84;
	        $86 = $82 | $85;
	        if ($86) {
	         $78 = $80;$79 = $81;$x$3104$i = $mul143$i;
	        } else {
	         $x$3$lcssa$i = $mul143$i;
	         break;
	        }
	       }
	      } else {
	       $x$3$lcssa$i = $x$0$i;
	      }
	      $or145$i = $c$2$lcssa$i | 32;
	      $cmp146$i = ($or145$i|0)==(112);
	      do {
	       if ($cmp146$i) {
	        $87 = (_scanexp($f,$pok)|0);
	        $88 = tempRet0;
	        $89 = ($87|0)==(0);
	        $90 = ($88|0)==(-2147483648);
	        $91 = $89 & $90;
	        if ($91) {
	         if ($tobool55) {
	          ___shlim($f,0);
	          $retval$0 = 0.0;
	          STACKTOP = sp;return (+$retval$0);
	         } else {
	          $92 = HEAP32[$shend>>2]|0;
	          $tobool156$i = ($92|0)==(0|0);
	          if ($tobool156$i) {
	           $100 = 0;$101 = 0;
	           break;
	          }
	          $93 = HEAP32[$rpos>>2]|0;
	          $incdec$ptr159$i = (($93) + -1|0);
	          HEAP32[$rpos>>2] = $incdec$ptr159$i;
	          $100 = 0;$101 = 0;
	          break;
	         }
	        } else {
	         $100 = $87;$101 = $88;
	        }
	       } else {
	        $94 = HEAP32[$shend>>2]|0;
	        $tobool167$i = ($94|0)==(0|0);
	        if ($tobool167$i) {
	         $100 = 0;$101 = 0;
	        } else {
	         $95 = HEAP32[$rpos>>2]|0;
	         $incdec$ptr170$i = (($95) + -1|0);
	         HEAP32[$rpos>>2] = $incdec$ptr170$i;
	         $100 = 0;$101 = 0;
	        }
	       }
	      } while(0);
	      $96 = (_bitshift64Shl(($69|0),($71|0),2)|0);
	      $97 = tempRet0;
	      $98 = (_i64Add(($96|0),($97|0),-32,-1)|0);
	      $99 = tempRet0;
	      $102 = (_i64Add(($98|0),($99|0),($100|0),($101|0))|0);
	      $103 = tempRet0;
	      $tobool177$i = ($x$3$lcssa$i|0)==(0);
	      if ($tobool177$i) {
	       $conv179$i = (+($sign$0|0));
	       $mul180$i = $conv179$i * 0.0;
	       $retval$0 = $mul180$i;
	       STACKTOP = sp;return (+$retval$0);
	      }
	      $sub182$i = (0 - ($emin$0$ph))|0;
	      $104 = ($103|0)>(0);
	      $105 = ($103|0)==(0);
	      $106 = ($102>>>0)>($sub182$i>>>0);
	      $107 = $105 & $106;
	      $108 = $104 | $107;
	      if ($108) {
	       $call187$i = (___errno_location()|0);
	       HEAP32[$call187$i>>2] = 34;
	       $conv188$i = (+($sign$0|0));
	       $mul189$i = $conv188$i * 1.79769313486231570815E+308;
	       $mul190$i = $mul189$i * 1.79769313486231570815E+308;
	       $retval$0 = $mul190$i;
	       STACKTOP = sp;return (+$retval$0);
	      }
	      $sub192$i = (($emin$0$ph) + -106)|0;
	      $109 = ($sub192$i|0)<(0);
	      $110 = $109 << 31 >> 31;
	      $111 = ($103|0)<($110|0);
	      $112 = ($103|0)==($110|0);
	      $113 = ($102>>>0)<($sub192$i>>>0);
	      $114 = $112 & $113;
	      $115 = $111 | $114;
	      if ($115) {
	       $call197$i = (___errno_location()|0);
	       HEAP32[$call197$i>>2] = 34;
	       $conv198$i = (+($sign$0|0));
	       $mul199$i = $conv198$i * 2.22507385850720138309E-308;
	       $mul200$i = $mul199$i * 2.22507385850720138309E-308;
	       $retval$0 = $mul200$i;
	       STACKTOP = sp;return (+$retval$0);
	      }
	      $cmp20397$i = ($x$3$lcssa$i|0)>(-1);
	      if ($cmp20397$i) {
	       $116 = $102;$117 = $103;$x$498$i = $x$3$lcssa$i;$y$399$i = $y$0$i;
	       while(1) {
	        $cmp206$i = !($y$399$i >= 0.5);
	        $add214$i = $x$498$i << 1;
	        if ($cmp206$i) {
	         $sub211$pn$i = $y$399$i;$x$5$i = $add214$i;
	        } else {
	         $add210115$i = $add214$i | 1;
	         $sub211$i = $y$399$i + -1.0;
	         $sub211$pn$i = $sub211$i;$x$5$i = $add210115$i;
	        }
	        $y$4$i = $y$399$i + $sub211$pn$i;
	        $118 = (_i64Add(($116|0),($117|0),-1,-1)|0);
	        $119 = tempRet0;
	        $cmp203$i = ($x$5$i|0)>(-1);
	        if ($cmp203$i) {
	         $116 = $118;$117 = $119;$x$498$i = $x$5$i;$y$399$i = $y$4$i;
	        } else {
	         $124 = $118;$125 = $119;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
	         break;
	        }
	       }
	      } else {
	       $124 = $102;$125 = $103;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
	      }
	      $120 = ($emin$0$ph|0)<(0);
	      $121 = $120 << 31 >> 31;
	      $122 = (_i64Subtract(32,0,($emin$0$ph|0),($121|0))|0);
	      $123 = tempRet0;
	      $126 = (_i64Add(($124|0),($125|0),($122|0),($123|0))|0);
	      $127 = tempRet0;
	      $128 = (0)>($127|0);
	      $129 = (0)==($127|0);
	      $130 = ($bits$0$ph>>>0)>($126>>>0);
	      $131 = $129 & $130;
	      $132 = $128 | $131;
	      if ($132) {
	       $cmp230$i = ($126|0)<(0);
	       $$conv229$i = $cmp230$i ? 0 : $126;
	       $bits$addr$0$i = $$conv229$i;
	      } else {
	       $bits$addr$0$i = $bits$0$ph;
	      }
	      $cmp235$i = ($bits$addr$0$i|0)<(53);
	      do {
	       if ($cmp235$i) {
	        $sub239$i = (84 - ($bits$addr$0$i))|0;
	        $call240$i = (+_scalbn(1.0,$sub239$i));
	        $conv241$i = (+($sign$0|0));
	        $call242$i = (+_copysignl((+$call240$i),(+$conv241$i)));
	        $cmp244$i = ($bits$addr$0$i|0)<(32);
	        $tobool247$i = $y$3$lcssa$i != 0.0;
	        $or$cond90$i = $cmp244$i & $tobool247$i;
	        if (!($or$cond90$i)) {
	         $bias$096$i = $call242$i;$conv253$pre$phi$iZ2D = $conv241$i;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
	         break;
	        }
	        $and$i = $x$4$lcssa$i & 1;
	        $tobool249$i = ($and$i|0)==(0);
	        $133 = $and$i ^ 1;
	        $inc251$x$4$i = (($133) + ($x$4$lcssa$i))|0;
	        $$y$3$i = $tobool249$i ? 0.0 : $y$3$lcssa$i;
	        $bias$096$i = $call242$i;$conv253$pre$phi$iZ2D = $conv241$i;$x$6$i = $inc251$x$4$i;$y$5$i = $$y$3$i;
	       } else {
	        $conv253$pre$i = (+($sign$0|0));
	        $bias$096$i = 0.0;$conv253$pre$phi$iZ2D = $conv253$pre$i;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
	       }
	      } while(0);
	      $conv254$i = (+($x$6$i>>>0));
	      $mul255$i = $conv253$pre$phi$iZ2D * $conv254$i;
	      $add256$i = $bias$096$i + $mul255$i;
	      $mul258$i = $conv253$pre$phi$iZ2D * $y$5$i;
	      $add259$i = $mul258$i + $add256$i;
	      $sub260$i = $add259$i - $bias$096$i;
	      $tobool261$i = $sub260$i != 0.0;
	      if (!($tobool261$i)) {
	       $call263$i = (___errno_location()|0);
	       HEAP32[$call263$i>>2] = 34;
	      }
	      $call266$i = (+_scalbnl($sub260$i,$124));
	      $retval$0 = $call266$i;
	      STACKTOP = sp;return (+$retval$0);
	     } else {
	      $c$6 = $c$5;
	     }
	    } while(0);
	    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
	    $sub1$i = (0 - ($sum$i))|0;
	    $c$addr$0$i = $c$6;$gotdig$0$i84 = 0;
	    while(1) {
	     if ((($c$addr$0$i|0) == 46)) {
	      label = 139;
	      break;
	     } else if (!((($c$addr$0$i|0) == 48))) {
	      $256 = 0;$257 = 0;$c$addr$2$i = $c$addr$0$i;$gotdig$2$i94 = $gotdig$0$i84;$gotrad$0$i95 = 0;
	      break;
	     }
	     $136 = HEAP32[$rpos>>2]|0;
	     $137 = HEAP32[$shend>>2]|0;
	     $cmp2$i = ($136>>>0)<($137>>>0);
	     if ($cmp2$i) {
	      $incdec$ptr$i87 = (($136) + 1|0);
	      HEAP32[$rpos>>2] = $incdec$ptr$i87;
	      $138 = HEAP8[$136>>0]|0;
	      $conv$i88 = $138&255;
	      $c$addr$0$i = $conv$i88;$gotdig$0$i84 = 1;
	      continue;
	     } else {
	      $call$i90 = (___shgetc($f)|0);
	      $c$addr$0$i = $call$i90;$gotdig$0$i84 = 1;
	      continue;
	     }
	    }
	    L173: do {
	     if ((label|0) == 139) {
	      $139 = HEAP32[$rpos>>2]|0;
	      $140 = HEAP32[$shend>>2]|0;
	      $cmp8$i = ($139>>>0)<($140>>>0);
	      if ($cmp8$i) {
	       $incdec$ptr12$i = (($139) + 1|0);
	       HEAP32[$rpos>>2] = $incdec$ptr12$i;
	       $141 = HEAP8[$139>>0]|0;
	       $conv13$i = $141&255;
	       $c$addr$1$ph$i = $conv13$i;
	      } else {
	       $call15$i = (___shgetc($f)|0);
	       $c$addr$1$ph$i = $call15$i;
	      }
	      $cmp19343$i = ($c$addr$1$ph$i|0)==(48);
	      if ($cmp19343$i) {
	       $145 = -1;$146 = -1;
	       while(1) {
	        $142 = HEAP32[$rpos>>2]|0;
	        $143 = HEAP32[$shend>>2]|0;
	        $cmp25$i = ($142>>>0)<($143>>>0);
	        if ($cmp25$i) {
	         $incdec$ptr29$i = (($142) + 1|0);
	         HEAP32[$rpos>>2] = $incdec$ptr29$i;
	         $144 = HEAP8[$142>>0]|0;
	         $conv30$i = $144&255;
	         $c$addr$1$be$i = $conv30$i;
	        } else {
	         $call32$i = (___shgetc($f)|0);
	         $c$addr$1$be$i = $call32$i;
	        }
	        $cmp19$i = ($c$addr$1$be$i|0)==(48);
	        if (!($cmp19$i)) {
	         $256 = $145;$257 = $146;$c$addr$2$i = $c$addr$1$be$i;$gotdig$2$i94 = 1;$gotrad$0$i95 = 1;
	         break L173;
	        }
	        $147 = (_i64Add(($145|0),($146|0),-1,-1)|0);
	        $148 = tempRet0;
	        $145 = $147;$146 = $148;
	       }
	      } else {
	       $256 = 0;$257 = 0;$c$addr$2$i = $c$addr$1$ph$i;$gotdig$2$i94 = $gotdig$0$i84;$gotrad$0$i95 = 1;
	      }
	     }
	    } while(0);
	    HEAP32[$x$i>>2] = 0;
	    $sub37321$i = (($c$addr$2$i) + -48)|0;
	    $cmp38322$i = ($sub37321$i>>>0)<(10);
	    $cmp40323$i = ($c$addr$2$i|0)==(46);
	    $or$cond2324$i = $cmp38322$i | $cmp40323$i;
	    L187: do {
	     if ($or$cond2324$i) {
	      $arrayidx77$i = (($x$i) + 496|0);
	      $149 = 0;$150 = 0;$258 = $256;$259 = $257;$c$addr$3332$i = $c$addr$2$i;$cmp40334$i = $cmp40323$i;$gotdig$3328$i = $gotdig$2$i94;$gotrad$1329$i = $gotrad$0$i95;$j$0331$i = 0;$k$0330$i = 0;$lnz$0327$i = 0;$sub37333$i = $sub37321$i;
	      while(1) {
	       do {
	        if ($cmp40334$i) {
	         $cond$i = ($gotrad$1329$i|0)==(0);
	         if ($cond$i) {
	          $260 = $149;$261 = $150;$262 = $149;$263 = $150;$gotdig$4$i = $gotdig$3328$i;$gotrad$2$i = 1;$j$2$i = $j$0331$i;$k$2$i = $k$0330$i;$lnz$2$i = $lnz$0327$i;
	         } else {
	          $173 = $258;$174 = $259;$182 = $149;$185 = $150;$c$addr$3320$i = $c$addr$3332$i;$gotdig$3313$i = $gotdig$3328$i;$j$0318$i = $j$0331$i;$k$0316$i = $k$0330$i;$lnz$0311$i = $lnz$0327$i;
	          break L187;
	         }
	        } else {
	         $cmp48$i = ($k$0330$i|0)<(125);
	         $151 = (_i64Add(($149|0),($150|0),1,0)|0);
	         $152 = tempRet0;
	         $cmp51$i = ($c$addr$3332$i|0)!=(48);
	         if (!($cmp48$i)) {
	          if (!($cmp51$i)) {
	           $260 = $258;$261 = $259;$262 = $151;$263 = $152;$gotdig$4$i = $gotdig$3328$i;$gotrad$2$i = $gotrad$1329$i;$j$2$i = $j$0331$i;$k$2$i = $k$0330$i;$lnz$2$i = $lnz$0327$i;
	           break;
	          }
	          $154 = HEAP32[$arrayidx77$i>>2]|0;
	          $or$i99 = $154 | 1;
	          HEAP32[$arrayidx77$i>>2] = $or$i99;
	          $260 = $258;$261 = $259;$262 = $151;$263 = $152;$gotdig$4$i = $gotdig$3328$i;$gotrad$2$i = $gotrad$1329$i;$j$2$i = $j$0331$i;$k$2$i = $k$0330$i;$lnz$2$i = $lnz$0327$i;
	          break;
	         }
	         $conv54$lnz$0$i = $cmp51$i ? $151 : $lnz$0327$i;
	         $tobool56$i = ($j$0331$i|0)==(0);
	         $arrayidx64$i = (($x$i) + ($k$0330$i<<2)|0);
	         if ($tobool56$i) {
	          $storemerge$i = $sub37333$i;
	         } else {
	          $153 = HEAP32[$arrayidx64$i>>2]|0;
	          $mul$i98 = ($153*10)|0;
	          $add59$i = (($c$addr$3332$i) + -48)|0;
	          $sub60$i = (($add59$i) + ($mul$i98))|0;
	          $storemerge$i = $sub60$i;
	         }
	         HEAP32[$arrayidx64$i>>2] = $storemerge$i;
	         $inc66$i = (($j$0331$i) + 1)|0;
	         $cmp67$i = ($inc66$i|0)==(9);
	         $inc70$i = $cmp67$i&1;
	         $inc70$k$0$i = (($inc70$i) + ($k$0330$i))|0;
	         $$inc66$i = $cmp67$i ? 0 : $inc66$i;
	         $260 = $258;$261 = $259;$262 = $151;$263 = $152;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1329$i;$j$2$i = $$inc66$i;$k$2$i = $inc70$k$0$i;$lnz$2$i = $conv54$lnz$0$i;
	        }
	       } while(0);
	       $155 = HEAP32[$rpos>>2]|0;
	       $156 = HEAP32[$shend>>2]|0;
	       $cmp84$i = ($155>>>0)<($156>>>0);
	       if ($cmp84$i) {
	        $incdec$ptr88$i = (($155) + 1|0);
	        HEAP32[$rpos>>2] = $incdec$ptr88$i;
	        $157 = HEAP8[$155>>0]|0;
	        $conv89$i = $157&255;
	        $c$addr$3$be$i = $conv89$i;
	       } else {
	        $call91$i = (___shgetc($f)|0);
	        $c$addr$3$be$i = $call91$i;
	       }
	       $sub37$i = (($c$addr$3$be$i) + -48)|0;
	       $cmp38$i = ($sub37$i>>>0)<(10);
	       $cmp40$i = ($c$addr$3$be$i|0)==(46);
	       $or$cond2$i = $cmp38$i | $cmp40$i;
	       if ($or$cond2$i) {
	        $149 = $262;$150 = $263;$258 = $260;$259 = $261;$c$addr$3332$i = $c$addr$3$be$i;$cmp40334$i = $cmp40$i;$gotdig$3328$i = $gotdig$4$i;$gotrad$1329$i = $gotrad$2$i;$j$0331$i = $j$2$i;$k$0330$i = $k$2$i;$lnz$0327$i = $lnz$2$i;$sub37333$i = $sub37$i;
	       } else {
	        $159 = $262;$160 = $260;$162 = $263;$163 = $261;$c$addr$3$lcssa$i = $c$addr$3$be$i;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
	        label = 162;
	        break;
	       }
	      }
	     } else {
	      $159 = 0;$160 = $256;$162 = 0;$163 = $257;$c$addr$3$lcssa$i = $c$addr$2$i;$gotdig$3$lcssa$i = $gotdig$2$i94;$gotrad$1$lcssa$i = $gotrad$0$i95;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
	      label = 162;
	     }
	    } while(0);
	    if ((label|0) == 162) {
	     $tobool95$i = ($gotrad$1$lcssa$i|0)==(0);
	     $158 = $tobool95$i ? $159 : $160;
	     $161 = $tobool95$i ? $162 : $163;
	     $173 = $158;$174 = $161;$182 = $159;$185 = $162;$c$addr$3320$i = $c$addr$3$lcssa$i;$gotdig$3313$i = $gotdig$3$lcssa$i;$j$0318$i = $j$0$lcssa$i;$k$0316$i = $k$0$lcssa$i;$lnz$0311$i = $lnz$0$lcssa$i;
	    }
	    $tobool98$i = ($gotdig$3313$i|0)!=(0);
	    if ($tobool98$i) {
	     $or99$i = $c$addr$3320$i | 32;
	     $cmp100$i = ($or99$i|0)==(101);
	     if ($cmp100$i) {
	      $164 = (_scanexp($f,$pok)|0);
	      $165 = tempRet0;
	      $166 = ($164|0)==(0);
	      $167 = ($165|0)==(-2147483648);
	      $168 = $166 & $167;
	      do {
	       if ($168) {
	        if ($tobool55) {
	         ___shlim($f,0);
	         $retval$0 = 0.0;
	         STACKTOP = sp;return (+$retval$0);
	        } else {
	         $169 = HEAP32[$shend>>2]|0;
	         $tobool110$i = ($169|0)==(0|0);
	         if ($tobool110$i) {
	          $171 = 0;$172 = 0;
	          break;
	         }
	         $170 = HEAP32[$rpos>>2]|0;
	         $incdec$ptr113$i = (($170) + -1|0);
	         HEAP32[$rpos>>2] = $incdec$ptr113$i;
	         $171 = 0;$172 = 0;
	         break;
	        }
	       } else {
	        $171 = $164;$172 = $165;
	       }
	      } while(0);
	      $175 = (_i64Add(($171|0),($172|0),($173|0),($174|0))|0);
	      $176 = tempRet0;
	      $181 = $175;$184 = $176;
	     } else {
	      label = 171;
	     }
	    } else {
	     label = 171;
	    }
	    if ((label|0) == 171) {
	     $cmp121$i = ($c$addr$3320$i|0)>(-1);
	     if ($cmp121$i) {
	      $177 = HEAP32[$shend>>2]|0;
	      $tobool125$i = ($177|0)==(0|0);
	      if ($tobool125$i) {
	       $181 = $173;$184 = $174;
	      } else {
	       $178 = HEAP32[$rpos>>2]|0;
	       $incdec$ptr128$i = (($178) + -1|0);
	       HEAP32[$rpos>>2] = $incdec$ptr128$i;
	       $181 = $173;$184 = $174;
	      }
	     } else {
	      $181 = $173;$184 = $174;
	     }
	    }
	    if (!($tobool98$i)) {
	     $call135$i = (___errno_location()|0);
	     HEAP32[$call135$i>>2] = 22;
	     ___shlim($f,0);
	     $retval$0 = 0.0;
	     STACKTOP = sp;return (+$retval$0);
	    }
	    $179 = HEAP32[$x$i>>2]|0;
	    $tobool138$i102 = ($179|0)==(0);
	    if ($tobool138$i102) {
	     $conv140$i = (+($sign$0|0));
	     $mul141$i = $conv140$i * 0.0;
	     $retval$0 = $mul141$i;
	     STACKTOP = sp;return (+$retval$0);
	    }
	    $180 = ($181|0)==($182|0);
	    $183 = ($184|0)==($185|0);
	    $186 = $180 & $183;
	    $187 = ($185|0)<(0);
	    $188 = ($185|0)==(0);
	    $189 = ($182>>>0)<(10);
	    $190 = $188 & $189;
	    $191 = $187 | $190;
	    $or$cond$i104 = $186 & $191;
	    do {
	     if ($or$cond$i104) {
	      $cmp149$i = ($bits$0$ph>>>0)>(30);
	      if (!($cmp149$i)) {
	       $shr$i = $179 >>> $bits$0$ph;
	       $cmp152$i = ($shr$i|0)==(0);
	       if (!($cmp152$i)) {
	        break;
	       }
	      }
	      $conv155$i = (+($sign$0|0));
	      $conv157$i = (+($179>>>0));
	      $mul158$i = $conv155$i * $conv157$i;
	      $retval$0 = $mul158$i;
	      STACKTOP = sp;return (+$retval$0);
	     }
	    } while(0);
	    $div$i107 = (($emin$0$ph|0) / -2)&-1;
	    $192 = ($div$i107|0)<(0);
	    $193 = $192 << 31 >> 31;
	    $194 = ($184|0)>($193|0);
	    $195 = ($184|0)==($193|0);
	    $196 = ($181>>>0)>($div$i107>>>0);
	    $197 = $195 & $196;
	    $198 = $194 | $197;
	    if ($198) {
	     $call165$i = (___errno_location()|0);
	     HEAP32[$call165$i>>2] = 34;
	     $conv166$i = (+($sign$0|0));
	     $mul167$i = $conv166$i * 1.79769313486231570815E+308;
	     $mul168$i = $mul167$i * 1.79769313486231570815E+308;
	     $retval$0 = $mul168$i;
	     STACKTOP = sp;return (+$retval$0);
	    }
	    $sub170$i = (($emin$0$ph) + -106)|0;
	    $199 = ($sub170$i|0)<(0);
	    $200 = $199 << 31 >> 31;
	    $201 = ($184|0)<($200|0);
	    $202 = ($184|0)==($200|0);
	    $203 = ($181>>>0)<($sub170$i>>>0);
	    $204 = $202 & $203;
	    $205 = $201 | $204;
	    if ($205) {
	     $call175$i = (___errno_location()|0);
	     HEAP32[$call175$i>>2] = 34;
	     $conv176$i = (+($sign$0|0));
	     $mul177$i = $conv176$i * 2.22507385850720138309E-308;
	     $mul178$i = $mul177$i * 2.22507385850720138309E-308;
	     $retval$0 = $mul178$i;
	     STACKTOP = sp;return (+$retval$0);
	    }
	    $tobool180$i = ($j$0318$i|0)==(0);
	    if ($tobool180$i) {
	     $k$3$i = $k$0316$i;
	    } else {
	     $cmp183304$i = ($j$0318$i|0)<(9);
	     if ($cmp183304$i) {
	      $arrayidx186$i = (($x$i) + ($k$0316$i<<2)|0);
	      $arrayidx186$promoted$i = HEAP32[$arrayidx186$i>>2]|0;
	      $j$3305$i = $j$0318$i;$mul187306$i = $arrayidx186$promoted$i;
	      while(1) {
	       $mul187$i = ($mul187306$i*10)|0;
	       $inc189$i = (($j$3305$i) + 1)|0;
	       $exitcond$i = ($inc189$i|0)==(9);
	       if ($exitcond$i) {
	        break;
	       } else {
	        $j$3305$i = $inc189$i;$mul187306$i = $mul187$i;
	       }
	      }
	      HEAP32[$arrayidx186$i>>2] = $mul187$i;
	     }
	     $inc191$i = (($k$0316$i) + 1)|0;
	     $k$3$i = $inc191$i;
	    }
	    $cmp194$i109 = ($lnz$0311$i|0)<(9);
	    do {
	     if ($cmp194$i109) {
	      $cmp197$i = ($lnz$0311$i|0)<=($181|0);
	      $cmp200$i = ($181|0)<(18);
	      $or$cond1$i = $cmp197$i & $cmp200$i;
	      if ($or$cond1$i) {
	       $cmp203$i110 = ($181|0)==(9);
	       if ($cmp203$i110) {
	        $conv206$i = (+($sign$0|0));
	        $206 = HEAP32[$x$i>>2]|0;
	        $conv208$i = (+($206>>>0));
	        $mul209$i = $conv206$i * $conv208$i;
	        $retval$0 = $mul209$i;
	        STACKTOP = sp;return (+$retval$0);
	       }
	       $cmp211$i = ($181|0)<(9);
	       if ($cmp211$i) {
	        $conv214$i = (+($sign$0|0));
	        $207 = HEAP32[$x$i>>2]|0;
	        $conv216$i = (+($207>>>0));
	        $mul217$i = $conv214$i * $conv216$i;
	        $sub218$i = (8 - ($181))|0;
	        $arrayidx219$i = (155696 + ($sub218$i<<2)|0);
	        $208 = HEAP32[$arrayidx219$i>>2]|0;
	        $conv220$i = (+($208|0));
	        $div221$i = $mul217$i / $conv220$i;
	        $retval$0 = $div221$i;
	        STACKTOP = sp;return (+$retval$0);
	       }
	       $209 = Math_imul($181, -3)|0;
	       $mul224$neg$i = (($bits$0$ph) + 27)|0;
	       $sub225$i = (($mul224$neg$i) + ($209))|0;
	       $cmp226$i = ($sub225$i|0)>(30);
	       $$pre$i = HEAP32[$x$i>>2]|0;
	       if (!($cmp226$i)) {
	        $shr230$i = $$pre$i >>> $sub225$i;
	        $cmp231$i = ($shr230$i|0)==(0);
	        if (!($cmp231$i)) {
	         break;
	        }
	       }
	       $conv234$i = (+($sign$0|0));
	       $conv236$i = (+($$pre$i>>>0));
	       $mul237$i = $conv234$i * $conv236$i;
	       $sub238$i = (($181) + -10)|0;
	       $arrayidx239$i = (155696 + ($sub238$i<<2)|0);
	       $210 = HEAP32[$arrayidx239$i>>2]|0;
	       $conv240$i = (+($210|0));
	       $mul241$i = $mul237$i * $conv240$i;
	       $retval$0 = $mul241$i;
	       STACKTOP = sp;return (+$retval$0);
	      }
	     }
	    } while(0);
	    $rem$i = (($181|0) % 9)&-1;
	    $tobool244$i = ($rem$i|0)==(0);
	    if ($tobool244$i) {
	     $a$2$ph249$i = 0;$e2$0$ph$i = 0;$rp$2$ph247$i = $181;$z$1$ph248$i = $k$3$i;
	    } else {
	     $cmp246$i = ($181|0)>(-1);
	     $add252$i = (($rem$i) + 9)|0;
	     $cond254$i = $cmp246$i ? $rem$i : $add252$i;
	     $sub255$i = (8 - ($cond254$i))|0;
	     $arrayidx256$i = (155696 + ($sub255$i<<2)|0);
	     $211 = HEAP32[$arrayidx256$i>>2]|0;
	     $cmp258296$i = ($k$3$i|0)==(0);
	     if ($cmp258296$i) {
	      $a$0$lcssa376$i = 0;$rp$0$lcssa377$i = $181;$z$0$i = 0;
	     } else {
	      $div267$i = (1000000000 / ($211|0))&-1;
	      $a$0298$i = 0;$carry$0300$i = 0;$k$4299$i = 0;$rp$0297$i = $181;
	      while(1) {
	       $arrayidx261$i = (($x$i) + ($k$4299$i<<2)|0);
	       $212 = HEAP32[$arrayidx261$i>>2]|0;
	       $rem262$i = (($212>>>0) % ($211>>>0))&-1;
	       $div264$i = (($212>>>0) / ($211>>>0))&-1;
	       $add265$i = (($div264$i) + ($carry$0300$i))|0;
	       HEAP32[$arrayidx261$i>>2] = $add265$i;
	       $mul268$i = Math_imul($rem262$i, $div267$i)|0;
	       $cmp269$i = ($k$4299$i|0)==($a$0298$i|0);
	       $tobool273$i = ($add265$i|0)==(0);
	       $or$cond223$i = $cmp269$i & $tobool273$i;
	       $add275$i = (($k$4299$i) + 1)|0;
	       if ($or$cond223$i) {
	        $and$i112 = $add275$i & 127;
	        $sub276$i = (($rp$0297$i) + -9)|0;
	        $a$1$i = $and$i112;$rp$1$i113 = $sub276$i;
	       } else {
	        $a$1$i = $a$0298$i;$rp$1$i113 = $rp$0297$i;
	       }
	       $cmp258$i = ($add275$i|0)==($k$3$i|0);
	       if ($cmp258$i) {
	        break;
	       } else {
	        $a$0298$i = $a$1$i;$carry$0300$i = $mul268$i;$k$4299$i = $add275$i;$rp$0297$i = $rp$1$i113;
	       }
	      }
	      $tobool281$i = ($mul268$i|0)==(0);
	      if ($tobool281$i) {
	       $a$0$lcssa376$i = $a$1$i;$rp$0$lcssa377$i = $rp$1$i113;$z$0$i = $k$3$i;
	      } else {
	       $inc283$i = (($k$3$i) + 1)|0;
	       $arrayidx284$i = (($x$i) + ($k$3$i<<2)|0);
	       HEAP32[$arrayidx284$i>>2] = $mul268$i;
	       $a$0$lcssa376$i = $a$1$i;$rp$0$lcssa377$i = $rp$1$i113;$z$0$i = $inc283$i;
	      }
	     }
	     $sub286$i = (9 - ($cond254$i))|0;
	     $add287$i = (($sub286$i) + ($rp$0$lcssa377$i))|0;
	     $a$2$ph249$i = $a$0$lcssa376$i;$e2$0$ph$i = 0;$rp$2$ph247$i = $add287$i;$z$1$ph248$i = $z$0$i;
	    }
	    L285: while(1) {
	     $cmp289$i = ($rp$2$ph247$i|0)<(18);
	     $arrayidx294$i = (($x$i) + ($a$2$ph249$i<<2)|0);
	     if ($cmp289$i) {
	      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph248$i;
	      while(1) {
	       $sub301$us$i = (($z$1$us$i) + 127)|0;
	       $carry299$0$us$i = 0;$k$5$in$us$i = $sub301$us$i;$z$2$us$i = $z$1$us$i;
	       while(1) {
	        $k$5$us$i = $k$5$in$us$i & 127;
	        $arrayidx306$us$i = (($x$i) + ($k$5$us$i<<2)|0);
	        $213 = HEAP32[$arrayidx306$us$i>>2]|0;
	        $214 = (_bitshift64Shl(($213|0),0,29)|0);
	        $215 = tempRet0;
	        $216 = (_i64Add(($214|0),($215|0),($carry299$0$us$i|0),0)|0);
	        $217 = tempRet0;
	        $218 = ($217>>>0)>(0);
	        $219 = ($217|0)==(0);
	        $220 = ($216>>>0)>(1000000000);
	        $221 = $219 & $220;
	        $222 = $218 | $221;
	        if ($222) {
	         $223 = (___udivdi3(($216|0),($217|0),1000000000,0)|0);
	         $224 = tempRet0;
	         $225 = (___uremdi3(($216|0),($217|0),1000000000,0)|0);
	         $226 = tempRet0;
	         $carry299$1$us$i = $223;$rem315$sink$off0$us$i = $225;
	        } else {
	         $carry299$1$us$i = 0;$rem315$sink$off0$us$i = $216;
	        }
	        HEAP32[$arrayidx306$us$i>>2] = $rem315$sink$off0$us$i;
	        $sub322$us$i = (($z$2$us$i) + 127)|0;
	        $and323$us$i = $sub322$us$i & 127;
	        $cmp324$us$i = ($k$5$us$i|0)!=($and323$us$i|0);
	        $cmp327$us$i = ($k$5$us$i|0)==($a$2$ph249$i|0);
	        $or$cond224$us$i = $cmp324$us$i | $cmp327$us$i;
	        if ($or$cond224$us$i) {
	         $z$3$us$i = $z$2$us$i;
	        } else {
	         $tobool331$us$i = ($rem315$sink$off0$us$i|0)==(0);
	         $k$5$z$2$us$i = $tobool331$us$i ? $k$5$us$i : $z$2$us$i;
	         $z$3$us$i = $k$5$z$2$us$i;
	        }
	        $sub339$us$i = (($k$5$us$i) + -1)|0;
	        if ($cmp327$us$i) {
	         break;
	        } else {
	         $carry299$0$us$i = $carry299$1$us$i;$k$5$in$us$i = $sub339$us$i;$z$2$us$i = $z$3$us$i;
	        }
	       }
	       $sub300$us$i = (($e2$0$us$i) + -29)|0;
	       $tobool342$us$i = ($carry299$1$us$i|0)==(0);
	       if ($tobool342$us$i) {
	        $e2$0$us$i = $sub300$us$i;$z$1$us$i = $z$3$us$i;
	       } else {
	        $carry299$1$lcssa$lcssa$i = $carry299$1$us$i;$sub300$lcssa$i = $sub300$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
	        break;
	       }
	      }
	     } else {
	      $cmp292$i = ($rp$2$ph247$i|0)==(18);
	      if ($cmp292$i) {
	       $e2$0$us253$i = $e2$0$ph$i;$z$1$us254$i = $z$1$ph248$i;
	      } else {
	       $a$3$ph$i = $a$2$ph249$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph244$i = $rp$2$ph247$i;$z$5$ph$i = $z$1$ph248$i;
	       break;
	      }
	      while(1) {
	       $227 = HEAP32[$arrayidx294$i>>2]|0;
	       $cmp295$us257$i = ($227>>>0)<(9007199);
	       if (!($cmp295$us257$i)) {
	        $a$3$ph$i = $a$2$ph249$i;$e2$1$ph$i = $e2$0$us253$i;$rp$3$ph244$i = 18;$z$5$ph$i = $z$1$us254$i;
	        break L285;
	       }
	       $sub301$us260$i = (($z$1$us254$i) + 127)|0;
	       $carry299$0$us264$i = 0;$k$5$in$us263$i = $sub301$us260$i;$z$2$us262$i = $z$1$us254$i;
	       while(1) {
	        $k$5$us265$i = $k$5$in$us263$i & 127;
	        $arrayidx306$us266$i = (($x$i) + ($k$5$us265$i<<2)|0);
	        $228 = HEAP32[$arrayidx306$us266$i>>2]|0;
	        $229 = (_bitshift64Shl(($228|0),0,29)|0);
	        $230 = tempRet0;
	        $231 = (_i64Add(($229|0),($230|0),($carry299$0$us264$i|0),0)|0);
	        $232 = tempRet0;
	        $233 = ($232>>>0)>(0);
	        $234 = ($232|0)==(0);
	        $235 = ($231>>>0)>(1000000000);
	        $236 = $234 & $235;
	        $237 = $233 | $236;
	        if ($237) {
	         $238 = (___udivdi3(($231|0),($232|0),1000000000,0)|0);
	         $239 = tempRet0;
	         $240 = (___uremdi3(($231|0),($232|0),1000000000,0)|0);
	         $241 = tempRet0;
	         $carry299$1$us280$i = $238;$rem315$sink$off0$us279$i = $240;
	        } else {
	         $carry299$1$us280$i = 0;$rem315$sink$off0$us279$i = $231;
	        }
	        HEAP32[$arrayidx306$us266$i>>2] = $rem315$sink$off0$us279$i;
	        $sub322$us281$i = (($z$2$us262$i) + 127)|0;
	        $and323$us282$i = $sub322$us281$i & 127;
	        $cmp324$us283$i = ($k$5$us265$i|0)!=($and323$us282$i|0);
	        $cmp327$us284$i = ($k$5$us265$i|0)==($a$2$ph249$i|0);
	        $or$cond224$us285$i = $cmp324$us283$i | $cmp327$us284$i;
	        if ($or$cond224$us285$i) {
	         $z$3$us290$i = $z$2$us262$i;
	        } else {
	         $tobool331$us287$i = ($rem315$sink$off0$us279$i|0)==(0);
	         $k$5$z$2$us288$i = $tobool331$us287$i ? $k$5$us265$i : $z$2$us262$i;
	         $z$3$us290$i = $k$5$z$2$us288$i;
	        }
	        $sub339$us291$i = (($k$5$us265$i) + -1)|0;
	        if ($cmp327$us284$i) {
	         break;
	        } else {
	         $carry299$0$us264$i = $carry299$1$us280$i;$k$5$in$us263$i = $sub339$us291$i;$z$2$us262$i = $z$3$us290$i;
	        }
	       }
	       $sub300$us259$i = (($e2$0$us253$i) + -29)|0;
	       $tobool342$us295$i = ($carry299$1$us280$i|0)==(0);
	       if ($tobool342$us295$i) {
	        $e2$0$us253$i = $sub300$us259$i;$z$1$us254$i = $z$3$us290$i;
	       } else {
	        $carry299$1$lcssa$lcssa$i = $carry299$1$us280$i;$sub300$lcssa$i = $sub300$us259$i;$z$3$lcssa$lcssa$i = $z$3$us290$i;
	        break;
	       }
	      }
	     }
	     $add344$i = (($rp$2$ph247$i) + 9)|0;
	     $sub345$i = (($a$2$ph249$i) + 127)|0;
	     $and346$i = $sub345$i & 127;
	     $cmp347$i = ($and346$i|0)==($z$3$lcssa$lcssa$i|0);
	     if ($cmp347$i) {
	      $sub350$i = (($z$3$lcssa$lcssa$i) + 127)|0;
	      $and351$i = $sub350$i & 127;
	      $arrayidx352$i = (($x$i) + ($and351$i<<2)|0);
	      $242 = HEAP32[$arrayidx352$i>>2]|0;
	      $sub353$i = (($z$3$lcssa$lcssa$i) + 126)|0;
	      $and354$i = $sub353$i & 127;
	      $arrayidx355$i = (($x$i) + ($and354$i<<2)|0);
	      $243 = HEAP32[$arrayidx355$i>>2]|0;
	      $or356$i = $243 | $242;
	      HEAP32[$arrayidx355$i>>2] = $or356$i;
	      $z$4$i = $and351$i;
	     } else {
	      $z$4$i = $z$3$lcssa$lcssa$i;
	     }
	     $arrayidx358$i = (($x$i) + ($and346$i<<2)|0);
	     HEAP32[$arrayidx358$i>>2] = $carry299$1$lcssa$lcssa$i;
	     $a$2$ph249$i = $and346$i;$e2$0$ph$i = $sub300$lcssa$i;$rp$2$ph247$i = $add344$i;$z$1$ph248$i = $z$4$i;
	    }
	    L316: while(1) {
	     $add435$i = (($z$5$ph$i) + 1)|0;
	     $and436$i = $add435$i & 127;
	     $sub444$i = (($z$5$ph$i) + 127)|0;
	     $and445$i = $sub444$i & 127;
	     $arrayidx446$i = (($x$i) + ($and445$i<<2)|0);
	     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph244$i;
	     while(1) {
	      $cmp393$i = ($rp$3$i$ph|0)==(18);
	      $cmp397$i = ($rp$3$i$ph|0)>(27);
	      $$$i = $cmp397$i ? 9 : 1;
	      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
	      while(1) {
	       $i$0235$i = 0;
	       while(1) {
	        $add368$i = (($i$0235$i) + ($a$3$i))|0;
	        $and369$i = $add368$i & 127;
	        $cmp370$i = ($and369$i|0)==($z$5$ph$i|0);
	        if ($cmp370$i) {
	         $i$1$i = 2;
	         break;
	        }
	        $arrayidx373$i = (($x$i) + ($and369$i<<2)|0);
	        $244 = HEAP32[$arrayidx373$i>>2]|0;
	        $arrayidx374$i = (155688 + ($i$0235$i<<2)|0);
	        $245 = HEAP32[$arrayidx374$i>>2]|0;
	        $cmp375$i = ($244>>>0)<($245>>>0);
	        if ($cmp375$i) {
	         $i$1$i = 2;
	         break;
	        }
	        $cmp383$i = ($244>>>0)>($245>>>0);
	        $inc388$i = (($i$0235$i) + 1)|0;
	        if ($cmp383$i) {
	         $i$1$i = $i$0235$i;
	         break;
	        }
	        $cmp365$i = ($inc388$i|0)<(2);
	        if ($cmp365$i) {
	         $i$0235$i = $inc388$i;
	        } else {
	         $i$1$i = $inc388$i;
	         break;
	        }
	       }
	       $cmp390$i = ($i$1$i|0)==(2);
	       $or$cond225$i = $cmp390$i & $cmp393$i;
	       if ($or$cond225$i) {
	        break L316;
	       }
	       $add401$i = (($$$i) + ($e2$1$i))|0;
	       $cmp403236$i = ($a$3$i|0)==($z$5$ph$i|0);
	       if ($cmp403236$i) {
	        $a$3$i = $z$5$ph$i;$e2$1$i = $add401$i;
	       } else {
	        break;
	       }
	      }
	      $shl409$i = 1 << $$$i;
	      $sub410$i = (($shl409$i) + -1)|0;
	      $shr416$i = 1000000000 >>> $$$i;
	      $a$4238$i = $a$3$i;$carry362$0241$i = 0;$k$6239$i = $a$3$i;$rp$4237$i = $rp$3$i$ph;
	      while(1) {
	       $arrayidx408$i = (($x$i) + ($k$6239$i<<2)|0);
	       $246 = HEAP32[$arrayidx408$i>>2]|0;
	       $and411$i = $246 & $sub410$i;
	       $shr413$i = $246 >>> $$$i;
	       $add414$i = (($shr413$i) + ($carry362$0241$i))|0;
	       HEAP32[$arrayidx408$i>>2] = $add414$i;
	       $mul417$i = Math_imul($and411$i, $shr416$i)|0;
	       $cmp418$i = ($k$6239$i|0)==($a$4238$i|0);
	       $tobool422$i = ($add414$i|0)==(0);
	       $or$cond226$i = $cmp418$i & $tobool422$i;
	       $add424$i = (($k$6239$i) + 1)|0;
	       $and425$i = $add424$i & 127;
	       $sub427$i = (($rp$4237$i) + -9)|0;
	       $rp$5$i = $or$cond226$i ? $sub427$i : $rp$4237$i;
	       $a$5$i = $or$cond226$i ? $and425$i : $a$4238$i;
	       $cmp403$i = ($and425$i|0)==($z$5$ph$i|0);
	       if ($cmp403$i) {
	        break;
	       } else {
	        $a$4238$i = $a$5$i;$carry362$0241$i = $mul417$i;$k$6239$i = $and425$i;$rp$4237$i = $rp$5$i;
	       }
	      }
	      $tobool433$i = ($mul417$i|0)==(0);
	      if ($tobool433$i) {
	       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $add401$i;$rp$3$i$ph = $rp$5$i;
	       continue;
	      }
	      $cmp437$i = ($and436$i|0)==($a$5$i|0);
	      if (!($cmp437$i)) {
	       break;
	      }
	      $247 = HEAP32[$arrayidx446$i>>2]|0;
	      $or447$i = $247 | 1;
	      HEAP32[$arrayidx446$i>>2] = $or447$i;
	      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $add401$i;$rp$3$i$ph = $rp$5$i;
	     }
	     $arrayidx440$i = (($x$i) + ($z$5$ph$i<<2)|0);
	     HEAP32[$arrayidx440$i>>2] = $mul417$i;
	     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $add401$i;$rp$3$ph244$i = $rp$5$i;$z$5$ph$i = $and436$i;
	    }
	    $and456$i = $a$3$i & 127;
	    $cmp457$i = ($and456$i|0)==($z$5$ph$i|0);
	    if ($cmp457$i) {
	     $sub462$i = (($and436$i) + -1)|0;
	     $arrayidx463$i = (($x$i) + ($sub462$i<<2)|0);
	     HEAP32[$arrayidx463$i>>2] = 0;
	     $z$7$i = $and436$i;
	    } else {
	     $z$7$i = $z$5$ph$i;
	    }
	    $arrayidx468$i = (($x$i) + ($and456$i<<2)|0);
	    $248 = HEAP32[$arrayidx468$i>>2]|0;
	    $conv469$i = (+($248>>>0));
	    $add455$1$i = (($a$3$i) + 1)|0;
	    $and456$1$i = $add455$1$i & 127;
	    $cmp457$1$i = ($and456$1$i|0)==($z$7$i|0);
	    if ($cmp457$1$i) {
	     $add460$1$i = (($z$7$i) + 1)|0;
	     $and461$1$i = $add460$1$i & 127;
	     $sub462$1$i = (($and461$1$i) + -1)|0;
	     $arrayidx463$1$i = (($x$i) + ($sub462$1$i<<2)|0);
	     HEAP32[$arrayidx463$1$i>>2] = 0;
	     $z$7$1$i = $and461$1$i;
	    } else {
	     $z$7$1$i = $z$7$i;
	    }
	    $mul465$1$i = $conv469$i * 1.0E+9;
	    $arrayidx468$1$i = (($x$i) + ($and456$1$i<<2)|0);
	    $251 = HEAP32[$arrayidx468$1$i>>2]|0;
	    $conv469$1$i = (+($251>>>0));
	    $add470$1$i = $mul465$1$i + $conv469$1$i;
	    $conv474$i = (+($sign$0|0));
	    $mul475$i = $conv474$i * $add470$1$i;
	    $add476$i = (($e2$1$i) + 53)|0;
	    $sub477$i = (($add476$i) - ($emin$0$ph))|0;
	    $cmp478$i = ($sub477$i|0)<($bits$0$ph|0);
	    if ($cmp478$i) {
	     $cmp483$i = ($sub477$i|0)<(0);
	     $$sub482$i = $cmp483$i ? 0 : $sub477$i;
	     $bits$addr$0$i114 = $$sub482$i;$denormal$0$i = 1;
	    } else {
	     $bits$addr$0$i114 = $bits$0$ph;$denormal$0$i = 0;
	    }
	    $cmp488$i = ($bits$addr$0$i114|0)<(53);
	    if ($cmp488$i) {
	     $sub492$i = (105 - ($bits$addr$0$i114))|0;
	     $call493$i = (+_scalbn(1.0,$sub492$i));
	     $call494$i = (+_copysignl((+$call493$i),(+$mul475$i)));
	     $sub495$i = (53 - ($bits$addr$0$i114))|0;
	     $call496$i = (+_scalbn(1.0,$sub495$i));
	     $call497$i = (+_fmodl((+$mul475$i),(+$call496$i)));
	     $sub498$i = $mul475$i - $call497$i;
	     $add499$i = $call494$i + $sub498$i;
	     $bias$0$i = $call494$i;$frac$0$i = $call497$i;$y$1$i115 = $add499$i;
	    } else {
	     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i115 = $mul475$i;
	    }
	    $add501$i = (($a$3$i) + 2)|0;
	    $and502$i = $add501$i & 127;
	    $cmp503$i = ($and502$i|0)==($z$7$1$i|0);
	    do {
	     if ($cmp503$i) {
	      $frac$2$i = $frac$0$i;
	     } else {
	      $arrayidx509$i = (($x$i) + ($and502$i<<2)|0);
	      $249 = HEAP32[$arrayidx509$i>>2]|0;
	      $cmp510$i = ($249>>>0)<(500000000);
	      do {
	       if ($cmp510$i) {
	        $tobool513$i = ($249|0)==(0);
	        if ($tobool513$i) {
	         $add516$i = (($a$3$i) + 3)|0;
	         $and517$i = $add516$i & 127;
	         $cmp518$i = ($and517$i|0)==($z$7$1$i|0);
	         if ($cmp518$i) {
	          $frac$1$i = $frac$0$i;
	          break;
	         }
	        }
	        $mul522$i = $conv474$i * 0.25;
	        $add523$i = $mul522$i + $frac$0$i;
	        $frac$1$i = $add523$i;
	       } else {
	        $cmp525$i = ($249>>>0)>(500000000);
	        if ($cmp525$i) {
	         $mul529$i = $conv474$i * 0.75;
	         $add530$i = $mul529$i + $frac$0$i;
	         $frac$1$i = $add530$i;
	         break;
	        }
	        $add536$i = (($a$3$i) + 3)|0;
	        $and537$i = $add536$i & 127;
	        $cmp538$i = ($and537$i|0)==($z$7$1$i|0);
	        if ($cmp538$i) {
	         $mul542$i = $conv474$i * 0.5;
	         $add543$i = $mul542$i + $frac$0$i;
	         $frac$1$i = $add543$i;
	         break;
	        } else {
	         $mul546$i = $conv474$i * 0.75;
	         $add547$i = $mul546$i + $frac$0$i;
	         $frac$1$i = $add547$i;
	         break;
	        }
	       }
	      } while(0);
	      $sub552$i = (53 - ($bits$addr$0$i114))|0;
	      $cmp553$i = ($sub552$i|0)>(1);
	      if (!($cmp553$i)) {
	       $frac$2$i = $frac$1$i;
	       break;
	      }
	      $call556$i = (+_fmodl((+$frac$1$i),1.0));
	      $tobool557$i = $call556$i != 0.0;
	      if ($tobool557$i) {
	       $frac$2$i = $frac$1$i;
	       break;
	      }
	      $inc559$i = $frac$1$i + 1.0;
	      $frac$2$i = $inc559$i;
	     }
	    } while(0);
	    $add562$i = $y$1$i115 + $frac$2$i;
	    $sub563$i = $add562$i - $bias$0$i;
	    $and565$i = $add476$i & 2147483647;
	    $sub566$i = (-2 - ($sum$i))|0;
	    $cmp567$i = ($and565$i|0)>($sub566$i|0);
	    do {
	     if ($cmp567$i) {
	      $call570$i = (+Math_abs((+$sub563$i)));
	      $cmp571$i = !($call570$i >= 9007199254740992.0);
	      if ($cmp571$i) {
	       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i116 = $sub563$i;
	      } else {
	       $tobool574$i = ($denormal$0$i|0)!=(0);
	       $cmp578$i = ($bits$addr$0$i114|0)==($sub477$i|0);
	       $or$cond227$i = $tobool574$i & $cmp578$i;
	       $denormal$1$i = $or$cond227$i ? 0 : $denormal$0$i;
	       $mul582$i = $sub563$i * 0.5;
	       $inc583$i = (($e2$1$i) + 1)|0;
	       $denormal$2$i = $denormal$1$i;$e2$2$i = $inc583$i;$y$2$i116 = $mul582$i;
	      }
	      $250 = (($e2$2$i) + 50)|0;
	      $cmp586$i = ($250|0)>($sub1$i|0);
	      if (!($cmp586$i)) {
	       $tobool589$i = ($denormal$2$i|0)!=(0);
	       $tobool591$i = $frac$2$i != 0.0;
	       $or$cond228$i = $tobool589$i & $tobool591$i;
	       if (!($or$cond228$i)) {
	        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i116;
	        break;
	       }
	      }
	      $call593$i = (___errno_location()|0);
	      HEAP32[$call593$i>>2] = 34;
	      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i116;
	     } else {
	      $e2$3$i = $e2$1$i;$y$3$i = $sub563$i;
	     }
	    } while(0);
	    $call596$i = (+_scalbnl($y$3$i,$e2$3$i));
	    $retval$0 = $call596$i;
	    STACKTOP = sp;return (+$retval$0);
	   } else if ((($i$3|0) == 3)) {
	    $17 = HEAP32[$rpos>>2]|0;
	    $18 = HEAP32[$shend>>2]|0;
	    $cmp126 = ($17>>>0)<($18>>>0);
	    if ($cmp126) {
	     $incdec$ptr130 = (($17) + 1|0);
	     HEAP32[$rpos>>2] = $incdec$ptr130;
	     $19 = HEAP8[$17>>0]|0;
	     $conv131 = $19&255;
	     $cond135 = $conv131;
	    } else {
	     $call133 = (___shgetc($f)|0);
	     $cond135 = $call133;
	    }
	    $cmp136 = ($cond135|0)==(40);
	    if ($cmp136) {
	     $i$4 = 1;
	    } else {
	     $20 = HEAP32[$shend>>2]|0;
	     $tobool140 = ($20|0)==(0|0);
	     if ($tobool140) {
	      $retval$0 = nan;
	      STACKTOP = sp;return (+$retval$0);
	     }
	     $21 = HEAP32[$rpos>>2]|0;
	     $incdec$ptr143 = (($21) + -1|0);
	     HEAP32[$rpos>>2] = $incdec$ptr143;
	     $retval$0 = nan;
	     STACKTOP = sp;return (+$retval$0);
	    }
	    while(1) {
	     $22 = HEAP32[$rpos>>2]|0;
	     $23 = HEAP32[$shend>>2]|0;
	     $cmp150 = ($22>>>0)<($23>>>0);
	     if ($cmp150) {
	      $incdec$ptr154 = (($22) + 1|0);
	      HEAP32[$rpos>>2] = $incdec$ptr154;
	      $24 = HEAP8[$22>>0]|0;
	      $conv155 = $24&255;
	      $cond159 = $conv155;
	     } else {
	      $call157 = (___shgetc($f)|0);
	      $cond159 = $call157;
	     }
	     $sub160 = (($cond159) + -48)|0;
	     $cmp161 = ($sub160>>>0)<(10);
	     $sub164 = (($cond159) + -65)|0;
	     $cmp165 = ($sub164>>>0)<(26);
	     $or$cond81 = $cmp161 | $cmp165;
	     if (!($or$cond81)) {
	      $sub168 = (($cond159) + -97)|0;
	      $cmp169 = ($sub168>>>0)<(26);
	      $cmp172 = ($cond159|0)==(95);
	      $or$cond2 = $cmp169 | $cmp172;
	      if (!($or$cond2)) {
	       break;
	      }
	     }
	     $inc204 = (($i$4) + 1)|0;
	     $i$4 = $inc204;
	    }
	    $cmp176 = ($cond159|0)==(41);
	    if ($cmp176) {
	     $retval$0 = nan;
	     STACKTOP = sp;return (+$retval$0);
	    }
	    $25 = HEAP32[$shend>>2]|0;
	    $tobool181 = ($25|0)==(0|0);
	    if (!($tobool181)) {
	     $26 = HEAP32[$rpos>>2]|0;
	     $incdec$ptr184 = (($26) + -1|0);
	     HEAP32[$rpos>>2] = $incdec$ptr184;
	    }
	    if ($tobool55) {
	     $call189 = (___errno_location()|0);
	     HEAP32[$call189>>2] = 22;
	     ___shlim($f,0);
	     $retval$0 = 0.0;
	     STACKTOP = sp;return (+$retval$0);
	    }
	    $tobool193123 = ($i$4|0)==(0);
	    $brmerge176 = $tobool193123 | $tobool181;
	    if ($brmerge176) {
	     $retval$0 = nan;
	     STACKTOP = sp;return (+$retval$0);
	    } else {
	     $dec192124$in = $i$4;
	    }
	    while(1) {
	     $dec192124 = (($dec192124$in) + -1)|0;
	     $27 = HEAP32[$rpos>>2]|0;
	     $incdec$ptr199 = (($27) + -1|0);
	     HEAP32[$rpos>>2] = $incdec$ptr199;
	     $tobool193 = ($dec192124|0)==(0);
	     if ($tobool193) {
	      $retval$0 = nan;
	      break;
	     } else {
	      $dec192124$in = $dec192124;
	     }
	    }
	    STACKTOP = sp;return (+$retval$0);
	   } else {
	    $28 = HEAP32[$shend>>2]|0;
	    $tobool209 = ($28|0)==(0|0);
	    if (!($tobool209)) {
	     $29 = HEAP32[$rpos>>2]|0;
	     $incdec$ptr212 = (($29) + -1|0);
	     HEAP32[$rpos>>2] = $incdec$ptr212;
	    }
	    $call215 = (___errno_location()|0);
	    HEAP32[$call215>>2] = 22;
	    ___shlim($f,0);
	    $retval$0 = 0.0;
	    STACKTOP = sp;return (+$retval$0);
	   }
	  }
	 } while(0);
	 if ((label|0) == 23) {
	  $10 = HEAP32[$shend>>2]|0;
	  $tobool61 = ($10|0)==(0|0);
	  if (!($tobool61)) {
	   $11 = HEAP32[$rpos>>2]|0;
	   $incdec$ptr64 = (($11) + -1|0);
	   HEAP32[$rpos>>2] = $incdec$ptr64;
	  }
	  $notlhs = ($pok|0)==(0);
	  $notrhs = ($i$0$lcssa>>>0)<(4);
	  $or$cond175$not = $notrhs | $notlhs;
	  $brmerge = $or$cond175$not | $tobool61;
	  if (!($brmerge)) {
	   $i$1152 = $i$0$lcssa;
	   while(1) {
	    $12 = HEAP32[$rpos>>2]|0;
	    $incdec$ptr77 = (($12) + -1|0);
	    HEAP32[$rpos>>2] = $incdec$ptr77;
	    $dec = (($i$1152) + -1)|0;
	    $cmp70 = ($dec>>>0)>(3);
	    if ($cmp70) {
	     $i$1152 = $dec;
	    } else {
	     break;
	    }
	   }
	  }
	 }
	 $conv84 = (+($sign$0|0));
	 $mul85 = $conv84 * inf;
	 $conv86 = $mul85;
	 $retval$0 = $conv86;
	 STACKTOP = sp;return (+$retval$0);
	}
	function _scanexp($f,$pok) {
	 $f = $f|0;
	 $pok = $pok|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
	 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
	 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $c$0 = 0, $c$1$be = 0, $c$142 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$237 = 0, $c$3$be = 0, $call = 0, $call104 = 0, $call17 = 0, $call58 = 0, $call85 = 0, $cmp = 0;
	 var $cmp10 = 0, $cmp20 = 0, $cmp32 = 0, $cmp4 = 0, $cmp44 = 0, $cmp46 = 0, $cmp46$ = 0, $cmp51 = 0, $cmp64 = 0, $cmp6436 = 0, $cmp78 = 0, $cmp91 = 0, $cmp9134 = 0, $cmp97 = 0, $cond = 0, $cond19 = 0, $conv = 0, $conv102 = 0, $conv15 = 0, $conv56 = 0;
	 var $conv7 = 0, $conv83 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr112 = 0, $incdec$ptr14 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr55 = 0, $incdec$ptr82 = 0, $neg$0 = 0, $or$cond = 0, $or$cond32 = 0, $phitmp47 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31 = 0, $sub43 = 0, $sub48 = 0;
	 var $sub63 = 0, $sub6335 = 0, $sub90 = 0, $sub9033 = 0, $tobool = 0, $tobool109 = 0, $tobool115 = 0, $tobool24 = 0, $tobool36 = 0, $x$043 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $rpos = (($f) + 4|0);
	 $0 = HEAP32[$rpos>>2]|0;
	 $shend = (($f) + 100|0);
	 $1 = HEAP32[$shend>>2]|0;
	 $cmp = ($0>>>0)<($1>>>0);
	 if ($cmp) {
	  $incdec$ptr = (($0) + 1|0);
	  HEAP32[$rpos>>2] = $incdec$ptr;
	  $2 = HEAP8[$0>>0]|0;
	  $conv = $2&255;
	  $cond = $conv;
	 } else {
	  $call = (___shgetc($f)|0);
	  $cond = $call;
	 }
	 $cmp4 = ($cond|0)==(45);
	 if ((($cond|0) == 43) | (($cond|0) == 45)) {
	  $conv7 = $cmp4&1;
	  $3 = HEAP32[$rpos>>2]|0;
	  $4 = HEAP32[$shend>>2]|0;
	  $cmp10 = ($3>>>0)<($4>>>0);
	  if ($cmp10) {
	   $incdec$ptr14 = (($3) + 1|0);
	   HEAP32[$rpos>>2] = $incdec$ptr14;
	   $5 = HEAP8[$3>>0]|0;
	   $conv15 = $5&255;
	   $cond19 = $conv15;
	  } else {
	   $call17 = (___shgetc($f)|0);
	   $cond19 = $call17;
	  }
	  $sub = (($cond19) + -48)|0;
	  $cmp20 = ($sub>>>0)<(10);
	  $tobool = ($pok|0)==(0);
	  $or$cond = $cmp20 | $tobool;
	  if ($or$cond) {
	   $c$0 = $cond19;$neg$0 = $conv7;
	  } else {
	   $6 = HEAP32[$shend>>2]|0;
	   $tobool24 = ($6|0)==(0|0);
	   if ($tobool24) {
	    $c$0 = $cond19;$neg$0 = $conv7;
	   } else {
	    $7 = HEAP32[$rpos>>2]|0;
	    $incdec$ptr27 = (($7) + -1|0);
	    HEAP32[$rpos>>2] = $incdec$ptr27;
	    $c$0 = $cond19;$neg$0 = $conv7;
	   }
	  }
	 } else {
	  $c$0 = $cond;$neg$0 = 0;
	 }
	 $sub31 = (($c$0) + -48)|0;
	 $cmp32 = ($sub31>>>0)>(9);
	 if ($cmp32) {
	  $8 = HEAP32[$shend>>2]|0;
	  $tobool36 = ($8|0)==(0|0);
	  if ($tobool36) {
	   $44 = -2147483648;$45 = 0;
	   tempRet0 = $44;
	   STACKTOP = sp;return ($45|0);
	  }
	  $9 = HEAP32[$rpos>>2]|0;
	  $incdec$ptr39 = (($9) + -1|0);
	  HEAP32[$rpos>>2] = $incdec$ptr39;
	  $44 = -2147483648;$45 = 0;
	  tempRet0 = $44;
	  STACKTOP = sp;return ($45|0);
	 } else {
	  $c$142 = $c$0;$x$043 = 0;
	 }
	 while(1) {
	  $add = (($c$142) + -48)|0;
	  $sub48 = (($add) + ($x$043))|0;
	  $10 = HEAP32[$rpos>>2]|0;
	  $11 = HEAP32[$shend>>2]|0;
	  $cmp51 = ($10>>>0)<($11>>>0);
	  if ($cmp51) {
	   $incdec$ptr55 = (($10) + 1|0);
	   HEAP32[$rpos>>2] = $incdec$ptr55;
	   $12 = HEAP8[$10>>0]|0;
	   $conv56 = $12&255;
	   $c$1$be = $conv56;
	  } else {
	   $call58 = (___shgetc($f)|0);
	   $c$1$be = $call58;
	  }
	  $sub43 = (($c$1$be) + -48)|0;
	  $cmp44 = ($sub43>>>0)<(10);
	  $cmp46 = ($sub48|0)<(214748364);
	  $cmp46$ = $cmp44 & $cmp46;
	  if (!($cmp46$)) {
	   break;
	  }
	  $phitmp47 = ($sub48*10)|0;
	  $c$142 = $c$1$be;$x$043 = $phitmp47;
	 }
	 $13 = ($sub48|0)<(0);
	 $14 = $13 << 31 >> 31;
	 $sub6335 = (($c$1$be) + -48)|0;
	 $cmp6436 = ($sub6335>>>0)<(10);
	 if ($cmp6436) {
	  $15 = $sub48;$16 = $14;$c$237 = $c$1$be;
	  while(1) {
	   $17 = (___muldi3(($15|0),($16|0),10,0)|0);
	   $18 = tempRet0;
	   $19 = ($c$237|0)<(0);
	   $20 = $19 << 31 >> 31;
	   $21 = (_i64Add(($c$237|0),($20|0),-48,-1)|0);
	   $22 = tempRet0;
	   $23 = (_i64Add(($21|0),($22|0),($17|0),($18|0))|0);
	   $24 = tempRet0;
	   $25 = HEAP32[$rpos>>2]|0;
	   $26 = HEAP32[$shend>>2]|0;
	   $cmp78 = ($25>>>0)<($26>>>0);
	   if ($cmp78) {
	    $incdec$ptr82 = (($25) + 1|0);
	    HEAP32[$rpos>>2] = $incdec$ptr82;
	    $27 = HEAP8[$25>>0]|0;
	    $conv83 = $27&255;
	    $c$2$be = $conv83;
	   } else {
	    $call85 = (___shgetc($f)|0);
	    $c$2$be = $call85;
	   }
	   $sub63 = (($c$2$be) + -48)|0;
	   $cmp64 = ($sub63>>>0)<(10);
	   $28 = ($24|0)<(21474836);
	   $29 = ($24|0)==(21474836);
	   $30 = ($23>>>0)<(2061584302);
	   $31 = $29 & $30;
	   $32 = $28 | $31;
	   $or$cond32 = $cmp64 & $32;
	   if ($or$cond32) {
	    $15 = $23;$16 = $24;$c$237 = $c$2$be;
	   } else {
	    $38 = $23;$39 = $24;$c$2$lcssa = $c$2$be;
	    break;
	   }
	  }
	 } else {
	  $38 = $sub48;$39 = $14;$c$2$lcssa = $c$1$be;
	 }
	 $sub9033 = (($c$2$lcssa) + -48)|0;
	 $cmp9134 = ($sub9033>>>0)<(10);
	 if ($cmp9134) {
	  while(1) {
	   $33 = HEAP32[$rpos>>2]|0;
	   $34 = HEAP32[$shend>>2]|0;
	   $cmp97 = ($33>>>0)<($34>>>0);
	   if ($cmp97) {
	    $incdec$ptr101 = (($33) + 1|0);
	    HEAP32[$rpos>>2] = $incdec$ptr101;
	    $35 = HEAP8[$33>>0]|0;
	    $conv102 = $35&255;
	    $c$3$be = $conv102;
	   } else {
	    $call104 = (___shgetc($f)|0);
	    $c$3$be = $call104;
	   }
	   $sub90 = (($c$3$be) + -48)|0;
	   $cmp91 = ($sub90>>>0)<(10);
	   if (!($cmp91)) {
	    break;
	   }
	  }
	 }
	 $36 = HEAP32[$shend>>2]|0;
	 $tobool109 = ($36|0)==(0|0);
	 if (!($tobool109)) {
	  $37 = HEAP32[$rpos>>2]|0;
	  $incdec$ptr112 = (($37) + -1|0);
	  HEAP32[$rpos>>2] = $incdec$ptr112;
	 }
	 $tobool115 = ($neg$0|0)!=(0);
	 $40 = (_i64Subtract(0,0,($38|0),($39|0))|0);
	 $41 = tempRet0;
	 $42 = $tobool115 ? $40 : $38;
	 $43 = $tobool115 ? $41 : $39;
	 $44 = $43;$45 = $42;
	 tempRet0 = $44;
	 STACKTOP = sp;return ($45|0);
	}
	function ___shlim($f,$lim) {
	 $f = $f|0;
	 $lim = $lim|0;
	 var $0 = 0, $1 = 0, $add$ptr = 0, $cmp = 0, $or$cond = 0, $rend = 0, $rpos = 0, $shcnt = 0, $shend = 0, $shend4 = 0, $shlim = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $shlim = (($f) + 104|0);
	 HEAP32[$shlim>>2] = $lim;
	 $rend = (($f) + 8|0);
	 $0 = HEAP32[$rend>>2]|0;
	 $rpos = (($f) + 4|0);
	 $1 = HEAP32[$rpos>>2]|0;
	 $sub$ptr$lhs$cast = $0;
	 $sub$ptr$rhs$cast = $1;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $shcnt = (($f) + 108|0);
	 HEAP32[$shcnt>>2] = $sub$ptr$sub;
	 $tobool = ($lim|0)!=(0);
	 $cmp = ($sub$ptr$sub|0)>($lim|0);
	 $or$cond = $tobool & $cmp;
	 if ($or$cond) {
	  $add$ptr = (($1) + ($lim)|0);
	  $shend = (($f) + 100|0);
	  HEAP32[$shend>>2] = $add$ptr;
	  STACKTOP = sp;return;
	 } else {
	  $shend4 = (($f) + 100|0);
	  HEAP32[$shend4>>2] = $0;
	  STACKTOP = sp;return;
	 }
	}
	function ___shgetc($f) {
	 $f = $f|0;
	 var $$pre = 0, $$pre24 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$ptr = 0, $add29 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $cmp32 = 0, $cmp9 = 0, $conv = 0, $conv35 = 0;
	 var $rend17$phi$trans$insert = 0, $retval$0 = 0, $rpos = 0, $rpos31$phi$trans$insert = 0, $shcnt = 0, $shcnt28 = 0, $shcnt7 = 0, $shend = 0, $shend16 = 0, $shend18 = 0, $shlim = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast25 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast26 = 0, $sub$ptr$sub = 0, $sub$ptr$sub27 = 0, $sub8 = 0, $tobool = 0;
	 var $tobool21 = 0, $tobool4 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $shlim = (($f) + 104|0);
	 $0 = HEAP32[$shlim>>2]|0;
	 $tobool = ($0|0)==(0);
	 if ($tobool) {
	  label = 3;
	 } else {
	  $shcnt = (($f) + 108|0);
	  $1 = HEAP32[$shcnt>>2]|0;
	  $cmp = ($1|0)<($0|0);
	  if ($cmp) {
	   label = 3;
	  }
	 }
	 if ((label|0) == 3) {
	  $call = (___uflow($f)|0);
	  $cmp2 = ($call|0)<(0);
	  if (!($cmp2)) {
	   $2 = HEAP32[$shlim>>2]|0;
	   $tobool4 = ($2|0)==(0);
	   $rend17$phi$trans$insert = (($f) + 8|0);
	   $$pre = HEAP32[$rend17$phi$trans$insert>>2]|0;
	   if ($tobool4) {
	    label = 8;
	   } else {
	    $rpos = (($f) + 4|0);
	    $3 = HEAP32[$rpos>>2]|0;
	    $sub$ptr$lhs$cast = $$pre;
	    $sub$ptr$rhs$cast = $3;
	    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	    $shcnt7 = (($f) + 108|0);
	    $4 = HEAP32[$shcnt7>>2]|0;
	    $sub = (($2) - ($4))|0;
	    $sub8 = (($sub) + -1)|0;
	    $cmp9 = ($sub$ptr$sub|0)>($sub8|0);
	    if ($cmp9) {
	     $add$ptr = (($3) + ($sub8)|0);
	     $shend16 = (($f) + 100|0);
	     HEAP32[$shend16>>2] = $add$ptr;
	    } else {
	     label = 8;
	    }
	   }
	   if ((label|0) == 8) {
	    $shend18 = (($f) + 100|0);
	    HEAP32[$shend18>>2] = $$pre;
	   }
	   $tobool21 = ($$pre|0)==(0|0);
	   $rpos31$phi$trans$insert = (($f) + 4|0);
	   $$pre24 = HEAP32[$rpos31$phi$trans$insert>>2]|0;
	   if (!($tobool21)) {
	    $sub$ptr$lhs$cast25 = $$pre;
	    $sub$ptr$rhs$cast26 = $$pre24;
	    $shcnt28 = (($f) + 108|0);
	    $5 = HEAP32[$shcnt28>>2]|0;
	    $sub$ptr$sub27 = (($sub$ptr$lhs$cast25) + 1)|0;
	    $add = (($sub$ptr$sub27) - ($sub$ptr$rhs$cast26))|0;
	    $add29 = (($add) + ($5))|0;
	    HEAP32[$shcnt28>>2] = $add29;
	   }
	   $arrayidx = (($$pre24) + -1|0);
	   $6 = HEAP8[$arrayidx>>0]|0;
	   $conv = $6&255;
	   $cmp32 = ($conv|0)==($call|0);
	   if ($cmp32) {
	    $retval$0 = $call;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	   $conv35 = $call&255;
	   HEAP8[$arrayidx>>0] = $conv35;
	   $retval$0 = $call;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 $shend = (($f) + 100|0);
	 HEAP32[$shend>>2] = 0;
	 $retval$0 = -1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _frexp($x,$e) {
	 $x = +$x;
	 $e = $e|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $x$addr$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
	 $1 = HEAP32[tempDoublePtr+4>>2]|0;
	 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
	 $3 = tempRet0;
	 $conv = $2 & 2047;
	 if ((($conv|0) == 2047)) {
	  $retval$0 = $x;
	  STACKTOP = sp;return (+$retval$0);
	 } else if ((($conv|0) == 0)) {
	  $tobool1 = $x != 0.0;
	  if ($tobool1) {
	   $mul = $x * 18446744073709551616.0;
	   $call = (+_frexp($mul,$e));
	   $4 = HEAP32[$e>>2]|0;
	   $sub = (($4) + -64)|0;
	   $storemerge = $sub;$x$addr$0 = $call;
	  } else {
	   $storemerge = 0;$x$addr$0 = $x;
	  }
	  HEAP32[$e>>2] = $storemerge;
	  $retval$0 = $x$addr$0;
	  STACKTOP = sp;return (+$retval$0);
	 } else {
	  $sub8 = (($conv) + -1022)|0;
	  HEAP32[$e>>2] = $sub8;
	  $5 = $1 & -2146435073;
	  $6 = $5 | 1071644672;
	  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
	  $retval$0 = $7;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 return +0;
	}
	function _frexpf($x,$e) {
	 $x = +$x;
	 $e = $e|0;
	 var $0 = 0, $1 = 0, $2 = 0.0, $and = 0, $and11 = 0, $call = 0.0, $conv3 = 0.0, $or = 0, $retval$0 = 0.0, $shr = 0, $storemerge = 0, $sub = 0, $sub9 = 0, $tobool1 = 0, $x$addr$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
	 $shr = $0 >>> 23;
	 $and = $shr & 255;
	 if ((($and|0) == 255)) {
	  $retval$0 = $x;
	  STACKTOP = sp;return (+$retval$0);
	 } else if ((($and|0) == 0)) {
	  $tobool1 = $x != 0.0;
	  if ($tobool1) {
	   $conv3 = $x * 18446744073709551616.0;
	   $call = (+_frexpf($conv3,$e));
	   $1 = HEAP32[$e>>2]|0;
	   $sub = (($1) + -64)|0;
	   $storemerge = $sub;$x$addr$0 = $call;
	  } else {
	   $storemerge = 0;$x$addr$0 = $x;
	  }
	  HEAP32[$e>>2] = $storemerge;
	  $retval$0 = $x$addr$0;
	  STACKTOP = sp;return (+$retval$0);
	 } else {
	  $sub9 = (($and) + -126)|0;
	  HEAP32[$e>>2] = $sub9;
	  $and11 = $0 & -2139095041;
	  $or = $and11 | 1056964608;
	  $2 = (HEAP32[tempDoublePtr>>2]=$or,+HEAPF32[tempDoublePtr>>2]);
	  $retval$0 = $2;
	  STACKTOP = sp;return (+$retval$0);
	 }
	 return +0;
	}
	function _frexpl($x,$e) {
	 $x = +$x;
	 $e = $e|0;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+_frexp($x,$e));
	 STACKTOP = sp;return (+$call);
	}
	function _scalbn($x,$n) {
	 $x = +$x;
	 $n = $n|0;
	 var $$add14 = 0, $$sub4 = 0, $0 = 0, $1 = 0, $2 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp15 = 0, $cmp5 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul22 = 0.0, $mul3 = 0.0, $n$addr$0 = 0;
	 var $sub = 0, $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($n|0)>(1023);
	 if ($cmp) {
	  $mul = $x * 8.98846567431157953864E+307;
	  $sub = (($n) + -1023)|0;
	  $cmp1 = ($sub|0)>(1023);
	  if ($cmp1) {
	   $mul3 = $mul * 8.98846567431157953864E+307;
	   $sub4 = (($n) + -2046)|0;
	   $cmp5 = ($sub4|0)>(1023);
	   $$sub4 = $cmp5 ? 1023 : $sub4;
	   $n$addr$0 = $$sub4;$y$0 = $mul3;
	  } else {
	   $n$addr$0 = $sub;$y$0 = $mul;
	  }
	 } else {
	  $cmp8 = ($n|0)<(-1022);
	  if ($cmp8) {
	   $mul10 = $x * 2.22507385850720138309E-308;
	   $add = (($n) + 1022)|0;
	   $cmp11 = ($add|0)<(-1022);
	   if ($cmp11) {
	    $mul13 = $mul10 * 2.22507385850720138309E-308;
	    $add14 = (($n) + 2044)|0;
	    $cmp15 = ($add14|0)<(-1022);
	    $$add14 = $cmp15 ? -1022 : $add14;
	    $n$addr$0 = $$add14;$y$0 = $mul13;
	   } else {
	    $n$addr$0 = $add;$y$0 = $mul10;
	   }
	  } else {
	   $n$addr$0 = $n;$y$0 = $x;
	  }
	 }
	 $add21 = (($n$addr$0) + 1023)|0;
	 $0 = (_bitshift64Shl(($add21|0),0,52)|0);
	 $1 = tempRet0;
	 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $1;$2 = +HEAPF64[tempDoublePtr>>3];
	 $mul22 = $y$0 * $2;
	 STACKTOP = sp;return (+$mul22);
	}
	function _scalbnl($x,$n) {
	 $x = +$x;
	 $n = $n|0;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+_scalbn($x,$n));
	 STACKTOP = sp;return (+$call);
	}
	function _wctomb($s,$wc) {
	 $s = $s|0;
	 $wc = $wc|0;
	 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($s|0)==(0|0);
	 if ($tobool) {
	  $retval$0 = 0;
	 } else {
	  $call = (_wcrtomb($s,$wc,0)|0);
	  $retval$0 = $call;
	 }
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _wcrtomb($s,$wc,$st) {
	 $s = $s|0;
	 $wc = $wc|0;
	 $st = $st|0;
	 var $and = 0, $and19 = 0, $and23 = 0, $and36 = 0, $and41 = 0, $and45 = 0, $call = 0, $cmp = 0, $cmp11 = 0, $cmp2 = 0, $cmp28 = 0, $cmp9 = 0, $conv = 0, $conv16 = 0, $conv21 = 0, $conv25 = 0, $conv33 = 0, $conv38 = 0, $conv43 = 0, $conv47 = 0;
	 var $conv5 = 0, $conv7 = 0, $incdec$ptr = 0, $incdec$ptr17 = 0, $incdec$ptr22 = 0, $incdec$ptr34 = 0, $incdec$ptr39 = 0, $incdec$ptr44 = 0, $or = 0, $or$cond = 0, $or15 = 0, $or20 = 0, $or24 = 0, $or32 = 0, $or37 = 0, $or42 = 0, $or46 = 0, $or6 = 0, $retval$0 = 0, $shr1426 = 0;
	 var $shr1827 = 0, $shr28 = 0, $shr3123 = 0, $shr3524 = 0, $shr4025 = 0, $sub = 0, $sub27 = 0, $tobool = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($s|0)==(0|0);
	 if ($tobool) {
	  $retval$0 = 1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $cmp = ($wc>>>0)<(128);
	 if ($cmp) {
	  $conv = $wc&255;
	  HEAP8[$s>>0] = $conv;
	  $retval$0 = 1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $cmp2 = ($wc>>>0)<(2048);
	 if ($cmp2) {
	  $shr28 = $wc >>> 6;
	  $or = $shr28 | 192;
	  $conv5 = $or&255;
	  $incdec$ptr = (($s) + 1|0);
	  HEAP8[$s>>0] = $conv5;
	  $and = $wc & 63;
	  $or6 = $and | 128;
	  $conv7 = $or6&255;
	  HEAP8[$incdec$ptr>>0] = $conv7;
	  $retval$0 = 2;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $cmp9 = ($wc>>>0)<(55296);
	 $sub = (($wc) + -57344)|0;
	 $cmp11 = ($sub>>>0)<(8192);
	 $or$cond = $cmp9 | $cmp11;
	 if ($or$cond) {
	  $shr1426 = $wc >>> 12;
	  $or15 = $shr1426 | 224;
	  $conv16 = $or15&255;
	  $incdec$ptr17 = (($s) + 1|0);
	  HEAP8[$s>>0] = $conv16;
	  $shr1827 = $wc >>> 6;
	  $and19 = $shr1827 & 63;
	  $or20 = $and19 | 128;
	  $conv21 = $or20&255;
	  $incdec$ptr22 = (($s) + 2|0);
	  HEAP8[$incdec$ptr17>>0] = $conv21;
	  $and23 = $wc & 63;
	  $or24 = $and23 | 128;
	  $conv25 = $or24&255;
	  HEAP8[$incdec$ptr22>>0] = $conv25;
	  $retval$0 = 3;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $sub27 = (($wc) + -65536)|0;
	 $cmp28 = ($sub27>>>0)<(1048576);
	 if ($cmp28) {
	  $shr3123 = $wc >>> 18;
	  $or32 = $shr3123 | 240;
	  $conv33 = $or32&255;
	  $incdec$ptr34 = (($s) + 1|0);
	  HEAP8[$s>>0] = $conv33;
	  $shr3524 = $wc >>> 12;
	  $and36 = $shr3524 & 63;
	  $or37 = $and36 | 128;
	  $conv38 = $or37&255;
	  $incdec$ptr39 = (($s) + 2|0);
	  HEAP8[$incdec$ptr34>>0] = $conv38;
	  $shr4025 = $wc >>> 6;
	  $and41 = $shr4025 & 63;
	  $or42 = $and41 | 128;
	  $conv43 = $or42&255;
	  $incdec$ptr44 = (($s) + 3|0);
	  HEAP8[$incdec$ptr39>>0] = $conv43;
	  $and45 = $wc & 63;
	  $or46 = $and45 | 128;
	  $conv47 = $or46&255;
	  HEAP8[$incdec$ptr44>>0] = $conv47;
	  $retval$0 = 4;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $call = (___errno_location()|0);
	  HEAP32[$call>>2] = 84;
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function ___rand48_step($xi,$lc) {
	 $xi = $xi|0;
	 $lc = $lc|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
	 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx15 = 0, $arrayidx20 = 0, $arrayidx4 = 0, $conv = 0, $conv11 = 0, $conv2 = 0, $conv9 = 0, $or = 0, $or13 = 0, $shl = 0, $shl12 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP16[$xi>>1]|0;
	 $conv = $0&65535;
	 $arrayidx1 = (($xi) + 2|0);
	 $1 = HEAP16[$arrayidx1>>1]|0;
	 $conv2 = $1&65535;
	 $shl = $conv2 << 16;
	 $or = $shl | $conv;
	 $2 = ($or|0)<(0);
	 $3 = $2 << 31 >> 31;
	 $arrayidx4 = (($xi) + 4|0);
	 $4 = HEAP16[$arrayidx4>>1]|0;
	 $5 = $4&65535;
	 $6 = $3 | $5;
	 $7 = HEAP16[$lc>>1]|0;
	 $conv9 = $7&65535;
	 $arrayidx10 = (($lc) + 2|0);
	 $8 = HEAP16[$arrayidx10>>1]|0;
	 $conv11 = $8&65535;
	 $shl12 = $conv11 << 16;
	 $or13 = $shl12 | $conv9;
	 $9 = ($or13|0)<(0);
	 $10 = $9 << 31 >> 31;
	 $arrayidx15 = (($lc) + 4|0);
	 $11 = HEAP16[$arrayidx15>>1]|0;
	 $12 = $11&65535;
	 $13 = $10 | $12;
	 $14 = (___muldi3(($or13|0),($13|0),($or|0),($6|0))|0);
	 $15 = tempRet0;
	 $arrayidx20 = (($lc) + 6|0);
	 $16 = HEAP16[$arrayidx20>>1]|0;
	 $17 = $16&65535;
	 $18 = (_i64Add(($14|0),($15|0),($17|0),0)|0);
	 $19 = tempRet0;
	 $20 = $18&65535;
	 HEAP16[$xi>>1] = $20;
	 $21 = (_bitshift64Lshr(($18|0),($19|0),16)|0);
	 $22 = tempRet0;
	 $23 = $21&65535;
	 HEAP16[$arrayidx1>>1] = $23;
	 $24 = $19&65535;
	 HEAP16[$arrayidx4>>1] = $24;
	 $25 = $19 & 65535;
	 tempRet0 = $25;
	 STACKTOP = sp;return ($18|0);
	}
	function _erand48($s) {
	 $s = $s|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $sub = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (___rand48_step($s,((155728 + 6|0)))|0);
	 $1 = tempRet0;
	 $2 = (_bitshift64Shl(($0|0),($1|0),4)|0);
	 $3 = tempRet0;
	 $4 = $3 | 1072693248;
	 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
	 $sub = $5 + -1.0;
	 STACKTOP = sp;return (+$sub);
	}
	function _drand48() {
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $sub$i = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (___rand48_step(155728,((155728 + 6|0)))|0);
	 $1 = tempRet0;
	 $2 = (_bitshift64Shl(($0|0),($1|0),4)|0);
	 $3 = tempRet0;
	 $4 = $3 | 1072693248;
	 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $4;$5 = +HEAPF64[tempDoublePtr>>3];
	 $sub$i = $5 + -1.0;
	 STACKTOP = sp;return (+$sub$i);
	}
	function _lcong48($p) {
	 $p = $p|0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 ;HEAP16[155728+0>>1]=HEAP16[$p+0>>1]|0;HEAP16[155728+2>>1]=HEAP16[$p+2>>1]|0;HEAP16[155728+4>>1]=HEAP16[$p+4>>1]|0;HEAP16[155728+6>>1]=HEAP16[$p+6>>1]|0;HEAP16[155728+8>>1]=HEAP16[$p+8>>1]|0;HEAP16[155728+10>>1]=HEAP16[$p+10>>1]|0;HEAP16[155728+12>>1]=HEAP16[$p+12>>1]|0;
	 STACKTOP = sp;return;
	}
	function _nrand48($s) {
	 $s = $s|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (___rand48_step($s,((155728 + 6|0)))|0);
	 $1 = tempRet0;
	 $2 = (_bitshift64Lshr(($0|0),($1|0),17)|0);
	 $3 = tempRet0;
	 STACKTOP = sp;return ($2|0);
	}
	function _lrand48() {
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (___rand48_step(155728,((155728 + 6|0)))|0);
	 $1 = tempRet0;
	 $2 = (_bitshift64Lshr(($0|0),($1|0),17)|0);
	 $3 = tempRet0;
	 STACKTOP = sp;return ($2|0);
	}
	function _jrand48($s) {
	 $s = $s|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (___rand48_step($s,((155728 + 6|0)))|0);
	 $1 = tempRet0;
	 $2 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
	 $3 = tempRet0;
	 STACKTOP = sp;return ($2|0);
	}
	function _mrand48() {
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = (___rand48_step(155728,((155728 + 6|0)))|0);
	 $1 = tempRet0;
	 $2 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
	 $3 = tempRet0;
	 STACKTOP = sp;return ($2|0);
	}
	function _rand_r($seed) {
	 $seed = $seed|0;
	 var $0 = 0, $add = 0, $and$i = 0, $and3$i = 0, $div = 0, $mul = 0, $shl$i = 0, $shl2$i = 0, $shr$i = 0, $shr5$i = 0, $xor$i = 0, $xor1$i = 0, $xor4$i = 0, $xor6$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP32[$seed>>2]|0;
	 $mul = Math_imul($0, 1103515245)|0;
	 $add = (($mul) + 12345)|0;
	 HEAP32[$seed>>2] = $add;
	 $shr$i = $add >>> 11;
	 $xor$i = $shr$i ^ $add;
	 $shl$i = $xor$i << 7;
	 $and$i = $shl$i & -1658038656;
	 $xor1$i = $and$i ^ $xor$i;
	 $shl2$i = $xor1$i << 15;
	 $and3$i = $shl2$i & -272236544;
	 $xor4$i = $and3$i ^ $xor1$i;
	 $shr5$i = $xor4$i >>> 18;
	 $xor6$i = $shr5$i ^ $xor4$i;
	 $div = $xor6$i >>> 1;
	 STACKTOP = sp;return ($div|0);
	}
	function _srand($s) {
	 $s = $s|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $sub = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $sub = (($s) + -1)|0;
	 $0 = 155744;
	 $1 = $0;
	 HEAP32[$1>>2] = $sub;
	 $2 = (($0) + 4)|0;
	 $3 = $2;
	 HEAP32[$3>>2] = 0;
	 STACKTOP = sp;return;
	}
	function _rand() {
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = 155744;
	 $1 = $0;
	 $2 = HEAP32[$1>>2]|0;
	 $3 = (($0) + 4)|0;
	 $4 = $3;
	 $5 = HEAP32[$4>>2]|0;
	 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
	 $7 = tempRet0;
	 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
	 $9 = tempRet0;
	 $10 = 155744;
	 $11 = $10;
	 HEAP32[$11>>2] = $8;
	 $12 = (($10) + 4)|0;
	 $13 = $12;
	 HEAP32[$13>>2] = $9;
	 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
	 $15 = tempRet0;
	 STACKTOP = sp;return ($14|0);
	}
	function _srandom($seed) {
	 $seed = $seed|0;
	 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx10$i = 0, $cmp5$i = 0, $cmp7$i = 0, $cmp75$i = 0, $inc$i = 0, $k$06$i = 0, $or$i = 0;
	 var $phitmp$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 ___lock((155752|0));
	 $0 = HEAP32[155760>>2]|0;
	 if ((($0|0) == 0)) {
	  $1 = HEAP32[155768>>2]|0;
	  HEAP32[$1>>2] = $seed;
	  ___unlock((155752|0));
	  STACKTOP = sp;return;
	 } else if ((($0|0) == 31)) {
	  HEAP32[155784>>2] = 3;
	  HEAP32[155776>>2] = 0;
	  label = 6;
	 } else {
	  $cmp5$i = ($0|0)==(7);
	  $phitmp$i = $cmp5$i ? 3 : 1;
	  HEAP32[155784>>2] = $phitmp$i;
	  HEAP32[155776>>2] = 0;
	  $cmp75$i = ($0|0)>(0);
	  if ($cmp75$i) {
	   label = 6;
	  } else {
	   $$pre$i = HEAP32[155768>>2]|0;
	   $11 = $$pre$i;
	  }
	 }
	 if ((label|0) == 6) {
	  $2 = HEAP32[155768>>2]|0;
	  $3 = $seed;$4 = 0;$k$06$i = 0;
	  while(1) {
	   $5 = (___muldi3(($3|0),($4|0),1284865837,1481765933)|0);
	   $6 = tempRet0;
	   $7 = (_i64Add(($5|0),($6|0),1,0)|0);
	   $8 = tempRet0;
	   $arrayidx10$i = (($2) + ($k$06$i<<2)|0);
	   HEAP32[$arrayidx10$i>>2] = $8;
	   $inc$i = (($k$06$i) + 1)|0;
	   $9 = HEAP32[155760>>2]|0;
	   $cmp7$i = ($inc$i|0)<($9|0);
	   if ($cmp7$i) {
	    $3 = $7;$4 = $8;$k$06$i = $inc$i;
	   } else {
	    $11 = $2;
	    break;
	   }
	  }
	 }
	 $10 = HEAP32[$11>>2]|0;
	 $or$i = $10 | 1;
	 HEAP32[$11>>2] = $or$i;
	 ___unlock((155752|0));
	 STACKTOP = sp;return;
	}
	function _initstate($seed,$state,$size) {
	 $seed = $seed|0;
	 $state = $state|0;
	 $size = $size|0;
	 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr16 = 0, $arrayidx$i = 0, $arrayidx$i9 = 0, $arrayidx10$i = 0;
	 var $cmp = 0, $cmp1 = 0, $cmp3 = 0, $cmp6 = 0, $cmp7$i = 0, $cmp9 = 0, $inc$i = 0, $k$06$i = 0, $or$i = 0, $or$i10 = 0, $or$i7 = 0, $or2$i = 0, $or2$i8 = 0, $retval$0 = 0, $shl$i = 0, $shl$i5 = 0, $shl1$i = 0, $shl1$i6 = 0, $storemerge = 0, $storemerge18$in = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 $cmp = ($size>>>0)<(8);
	 if ($cmp) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 ___lock((155752|0));
	 $0 = HEAP32[155760>>2]|0;
	 $shl$i = $0 << 16;
	 $1 = HEAP32[155784>>2]|0;
	 $shl1$i = $1 << 8;
	 $or$i = $shl1$i | $shl$i;
	 $2 = HEAP32[155776>>2]|0;
	 $or2$i = $or$i | $2;
	 $3 = HEAP32[155768>>2]|0;
	 $arrayidx$i = (($3) + -4|0);
	 HEAP32[$arrayidx$i>>2] = $or2$i;
	 $cmp1 = ($size>>>0)<(32);
	 if ($cmp1) {
	  HEAP32[155760>>2] = 0;
	  $add$ptr16 = (($state) + 4|0);
	  HEAP32[155768>>2] = $add$ptr16;
	  HEAP32[$add$ptr16>>2] = $seed;
	  $15 = $add$ptr16;
	 } else {
	  $cmp3 = ($size>>>0)<(64);
	  do {
	   if ($cmp3) {
	    HEAP32[155760>>2] = 7;
	    $storemerge = 3;
	   } else {
	    $cmp6 = ($size>>>0)<(128);
	    if ($cmp6) {
	     HEAP32[155760>>2] = 15;
	     $storemerge = 1;
	     break;
	    }
	    $cmp9 = ($size>>>0)<(256);
	    if ($cmp9) {
	     HEAP32[155760>>2] = 31;
	     $storemerge = 3;
	     break;
	    } else {
	     HEAP32[155760>>2] = 63;
	     $storemerge = 1;
	     break;
	    }
	   }
	  } while(0);
	  $storemerge18$in = (($state) + 4|0);
	  HEAP32[155768>>2] = $storemerge18$in;
	  HEAP32[155784>>2] = $storemerge;
	  HEAP32[155776>>2] = 0;
	  $4 = $seed;$5 = 0;$k$06$i = 0;
	  while(1) {
	   $6 = (___muldi3(($4|0),($5|0),1284865837,1481765933)|0);
	   $7 = tempRet0;
	   $8 = (_i64Add(($6|0),($7|0),1,0)|0);
	   $9 = tempRet0;
	   $arrayidx10$i = (($storemerge18$in) + ($k$06$i<<2)|0);
	   HEAP32[$arrayidx10$i>>2] = $9;
	   $inc$i = (($k$06$i) + 1)|0;
	   $10 = HEAP32[155760>>2]|0;
	   $cmp7$i = ($inc$i|0)<($10|0);
	   if ($cmp7$i) {
	    $4 = $8;$5 = $9;$k$06$i = $inc$i;
	   } else {
	    break;
	   }
	  }
	  $11 = HEAP32[$storemerge18$in>>2]|0;
	  $or$i10 = $11 | 1;
	  HEAP32[$storemerge18$in>>2] = $or$i10;
	  $15 = $storemerge18$in;
	 }
	 $12 = HEAP32[155760>>2]|0;
	 $shl$i5 = $12 << 16;
	 $13 = HEAP32[155784>>2]|0;
	 $shl1$i6 = $13 << 8;
	 $or$i7 = $shl1$i6 | $shl$i5;
	 $14 = HEAP32[155776>>2]|0;
	 $or2$i8 = $or$i7 | $14;
	 $arrayidx$i9 = (($15) + -4|0);
	 HEAP32[$arrayidx$i9>>2] = $or2$i8;
	 ___unlock((155752|0));
	 $retval$0 = $arrayidx$i;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _setstate($state) {
	 $state = $state|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr$i = 0, $and$i = 0, $and4$i = 0, $arrayidx$i = 0, $or$i = 0, $or2$i = 0, $shl$i = 0, $shl1$i = 0, $shr$i = 0, $shr2$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 ___lock((155752|0));
	 $0 = HEAP32[155760>>2]|0;
	 $shl$i = $0 << 16;
	 $1 = HEAP32[155784>>2]|0;
	 $shl1$i = $1 << 8;
	 $or$i = $shl1$i | $shl$i;
	 $2 = HEAP32[155776>>2]|0;
	 $or2$i = $or$i | $2;
	 $3 = HEAP32[155768>>2]|0;
	 $arrayidx$i = (($3) + -4|0);
	 HEAP32[$arrayidx$i>>2] = $or2$i;
	 $add$ptr$i = (($state) + 4|0);
	 HEAP32[155768>>2] = $add$ptr$i;
	 $4 = HEAP32[$state>>2]|0;
	 $shr$i = $4 >>> 16;
	 HEAP32[155760>>2] = $shr$i;
	 $5 = HEAP32[$state>>2]|0;
	 $shr2$i = $5 >>> 8;
	 $and$i = $shr2$i & 255;
	 HEAP32[155784>>2] = $and$i;
	 $6 = HEAP32[$state>>2]|0;
	 $and4$i = $6 & 255;
	 HEAP32[155776>>2] = $and4$i;
	 ___unlock((155752|0));
	 STACKTOP = sp;return ($arrayidx$i|0);
	}
	function _random() {
	 var $$inc = 0, $$inc8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$i = 0, $and$i = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0;
	 var $cmp = 0, $cmp5 = 0, $cmp9 = 0, $inc = 0, $inc8 = 0, $k$0 = 0, $mul$i = 0, $shr = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 ___lock((155752|0));
	 $0 = HEAP32[155760>>2]|0;
	 $cmp = ($0|0)==(0);
	 if ($cmp) {
	  $1 = HEAP32[155768>>2]|0;
	  $2 = HEAP32[$1>>2]|0;
	  $mul$i = Math_imul($2, 1103515245)|0;
	  $add$i = (($mul$i) + 12345)|0;
	  $and$i = $add$i & 2147483647;
	  HEAP32[$1>>2] = $and$i;
	  $k$0 = $and$i;
	  ___unlock((155752|0));
	  STACKTOP = sp;return ($k$0|0);
	 } else {
	  $3 = HEAP32[155776>>2]|0;
	  $4 = HEAP32[155768>>2]|0;
	  $arrayidx2 = (($4) + ($3<<2)|0);
	  $5 = HEAP32[$arrayidx2>>2]|0;
	  $6 = HEAP32[155784>>2]|0;
	  $arrayidx3 = (($4) + ($6<<2)|0);
	  $7 = HEAP32[$arrayidx3>>2]|0;
	  $add = (($7) + ($5))|0;
	  HEAP32[$arrayidx3>>2] = $add;
	  $8 = HEAP32[155784>>2]|0;
	  $arrayidx4 = (($4) + ($8<<2)|0);
	  $9 = HEAP32[$arrayidx4>>2]|0;
	  $shr = $9 >>> 1;
	  $inc = (($8) + 1)|0;
	  $10 = HEAP32[155760>>2]|0;
	  $cmp5 = ($inc|0)==($10|0);
	  $$inc = $cmp5 ? 0 : $inc;
	  HEAP32[155784>>2] = $$inc;
	  $11 = HEAP32[155776>>2]|0;
	  $inc8 = (($11) + 1)|0;
	  $cmp9 = ($inc8|0)==($10|0);
	  $$inc8 = $cmp9 ? 0 : $inc8;
	  HEAP32[155776>>2] = $$inc8;
	  $k$0 = $shr;
	  ___unlock((155752|0));
	  STACKTOP = sp;return ($k$0|0);
	 }
	 return 0|0;
	}
	function _seed48($s) {
	 $s = $s|0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 ;HEAP16[155920+0>>1]=HEAP16[155728+0>>1]|0;HEAP16[155920+2>>1]=HEAP16[155728+2>>1]|0;HEAP16[155920+4>>1]=HEAP16[155728+4>>1]|0;
	 ;HEAP16[155728+0>>1]=HEAP16[$s+0>>1]|0;HEAP16[155728+2>>1]=HEAP16[$s+2>>1]|0;HEAP16[155728+4>>1]=HEAP16[$s+4>>1]|0;
	 STACKTOP = sp;return (155920|0);
	}
	function _srand48($seed) {
	 $seed = $seed|0;
	 var $$compoundliteral = 0, $arrayinit$element = 0, $arrayinit$element1 = 0, $conv = 0, $conv2 = 0, $shr2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $$compoundliteral = sp;
	 HEAP16[$$compoundliteral>>1] = 13070;
	 $arrayinit$element = (($$compoundliteral) + 2|0);
	 $conv = $seed&65535;
	 HEAP16[$arrayinit$element>>1] = $conv;
	 $arrayinit$element1 = (($$compoundliteral) + 4|0);
	 $shr2 = $seed >>> 16;
	 $conv2 = $shr2&65535;
	 HEAP16[$arrayinit$element1>>1] = $conv2;
	 (_seed48($$compoundliteral)|0);
	 STACKTOP = sp;return;
	}
	function ___overflow($f,$_c) {
	 $f = $f|0;
	 $_c = $_c|0;
	 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0;
	 var $retval$0 = 0, $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c = sp;
	 $conv = $_c&255;
	 HEAP8[$c>>0] = $conv;
	 $wend = (($f) + 16|0);
	 $0 = HEAP32[$wend>>2]|0;
	 $tobool = ($0|0)==(0|0);
	 do {
	  if ($tobool) {
	   $call = (___towrite($f)|0);
	   $tobool1 = ($call|0)==(0);
	   if ($tobool1) {
	    $$pre = HEAP32[$wend>>2]|0;
	    $2 = $$pre;
	    break;
	   } else {
	    $retval$0 = -1;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  } else {
	   $2 = $0;
	  }
	 } while(0);
	 $wpos = (($f) + 20|0);
	 $1 = HEAP32[$wpos>>2]|0;
	 $cmp = ($1>>>0)<($2>>>0);
	 if ($cmp) {
	  $3 = HEAP8[$c>>0]|0;
	  $conv5 = $3&255;
	  $lbf = (($f) + 75|0);
	  $4 = HEAP8[$lbf>>0]|0;
	  $conv6 = $4 << 24 >> 24;
	  $cmp7 = ($conv5|0)==($conv6|0);
	  if (!($cmp7)) {
	   $incdec$ptr = (($1) + 1|0);
	   HEAP32[$wpos>>2] = $incdec$ptr;
	   HEAP8[$1>>0] = $3;
	   $retval$0 = $conv5;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 $write = (($f) + 36|0);
	 $5 = HEAP32[$write>>2]|0;
	 $call13 = (FUNCTION_TABLE_iiii[$5 & 31]($f,$c,1)|0);
	 $cmp14 = ($call13|0)==(1);
	 if (!($cmp14)) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $6 = HEAP8[$c>>0]|0;
	 $conv18 = $6&255;
	 $retval$0 = $conv18;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function ___toread($f) {
	 $f = $f|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and8 = 0, $buf = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or12 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0;
	 var $tobool9 = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $mode = (($f) + 74|0);
	 $0 = HEAP8[$mode>>0]|0;
	 $conv = $0 << 24 >> 24;
	 $sub = (($conv) + 255)|0;
	 $or = $sub | $conv;
	 $conv3 = $or&255;
	 HEAP8[$mode>>0] = $conv3;
	 $wpos = (($f) + 20|0);
	 $1 = HEAP32[$wpos>>2]|0;
	 $buf = (($f) + 44|0);
	 $2 = HEAP32[$buf>>2]|0;
	 $cmp = ($1>>>0)>($2>>>0);
	 if ($cmp) {
	  $write = (($f) + 36|0);
	  $3 = HEAP32[$write>>2]|0;
	  (FUNCTION_TABLE_iiii[$3 & 31]($f,0,0)|0);
	 }
	 $wend = (($f) + 16|0);
	 HEAP32[$wend>>2] = 0;
	 $wbase = (($f) + 28|0);
	 HEAP32[$wbase>>2] = 0;
	 HEAP32[$wpos>>2] = 0;
	 $4 = HEAP32[$f>>2]|0;
	 $and = $4 & 20;
	 $tobool = ($and|0)==(0);
	 if ($tobool) {
	  $5 = HEAP32[$buf>>2]|0;
	  $rend = (($f) + 8|0);
	  HEAP32[$rend>>2] = $5;
	  $rpos = (($f) + 4|0);
	  HEAP32[$rpos>>2] = $5;
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $and8 = $4 & 4;
	 $tobool9 = ($and8|0)==(0);
	 if ($tobool9) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $or12 = $4 | 32;
	 HEAP32[$f>>2] = $or12;
	 $retval$0 = -1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function ___towrite($f) {
	 $f = $f|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0;
	 var $wpos = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $mode = (($f) + 74|0);
	 $0 = HEAP8[$mode>>0]|0;
	 $conv = $0 << 24 >> 24;
	 $sub = (($conv) + 255)|0;
	 $or = $sub | $conv;
	 $conv3 = $or&255;
	 HEAP8[$mode>>0] = $conv3;
	 $1 = HEAP32[$f>>2]|0;
	 $and = $1 & 8;
	 $tobool = ($and|0)==(0);
	 if ($tobool) {
	  $rend = (($f) + 8|0);
	  HEAP32[$rend>>2] = 0;
	  $rpos = (($f) + 4|0);
	  HEAP32[$rpos>>2] = 0;
	  $buf = (($f) + 44|0);
	  $2 = HEAP32[$buf>>2]|0;
	  $wbase = (($f) + 28|0);
	  HEAP32[$wbase>>2] = $2;
	  $wpos = (($f) + 20|0);
	  HEAP32[$wpos>>2] = $2;
	  $buf_size = (($f) + 48|0);
	  $3 = HEAP32[$buf_size>>2]|0;
	  $add$ptr = (($2) + ($3)|0);
	  $wend = (($f) + 16|0);
	  HEAP32[$wend>>2] = $add$ptr;
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 } else {
	  $or5 = $1 | 32;
	  HEAP32[$f>>2] = $or5;
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function ___uflow($f) {
	 $f = $f|0;
	 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $call = 0, $call2 = 0, $cmp = 0, $conv = 0, $read = 0, $rend = 0, $retval$0 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $c = sp;
	 $rend = (($f) + 8|0);
	 $0 = HEAP32[$rend>>2]|0;
	 $tobool = ($0|0)==(0|0);
	 if ($tobool) {
	  $call = (___toread($f)|0);
	  $tobool1 = ($call|0)==(0);
	  if ($tobool1) {
	   label = 3;
	  } else {
	   $retval$0 = -1;
	  }
	 } else {
	  label = 3;
	 }
	 if ((label|0) == 3) {
	  $read = (($f) + 32|0);
	  $1 = HEAP32[$read>>2]|0;
	  $call2 = (FUNCTION_TABLE_iiii[$1 & 31]($f,$c,1)|0);
	  $cmp = ($call2|0)==(1);
	  if ($cmp) {
	   $2 = HEAP8[$c>>0]|0;
	   $conv = $2&255;
	   $retval$0 = $conv;
	  } else {
	   $retval$0 = -1;
	  }
	 }
	 STACKTOP = sp;return ($retval$0|0);
	}
	function ___fwritex($s,$l,$f) {
	 $s = $s|0;
	 $l = $l|0;
	 $f = $f|0;
	 var $$pre = 0, $$pre30 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add = 0, $add$ptr = 0, $add$ptr26 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0, $cmp = 0, $cmp11 = 0;
	 var $cmp17 = 0, $cmp6 = 0, $i$0 = 0, $i$1 = 0, $l$addr$0 = 0, $lbf = 0, $retval$0 = 0, $s$addr$0 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub21 = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $wend = 0, $wpos = 0, $write = 0, $write15 = 0;
	 var label = 0, sp = 0;
	 sp = STACKTOP;
	 $wend = (($f) + 16|0);
	 $0 = HEAP32[$wend>>2]|0;
	 $tobool = ($0|0)==(0|0);
	 do {
	  if ($tobool) {
	   $call = (___towrite($f)|0);
	   $tobool1 = ($call|0)==(0);
	   if ($tobool1) {
	    $$pre30 = HEAP32[$wend>>2]|0;
	    $2 = $$pre30;
	    break;
	   } else {
	    $retval$0 = 0;
	    STACKTOP = sp;return ($retval$0|0);
	   }
	  } else {
	   $2 = $0;
	  }
	 } while(0);
	 $wpos = (($f) + 20|0);
	 $1 = HEAP32[$wpos>>2]|0;
	 $sub$ptr$lhs$cast = $2;
	 $sub$ptr$rhs$cast = $1;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
	 if ($cmp) {
	  $write = (($f) + 36|0);
	  $3 = HEAP32[$write>>2]|0;
	  $call4 = (FUNCTION_TABLE_iiii[$3 & 31]($f,$s,$l)|0);
	  $retval$0 = $call4;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $lbf = (($f) + 75|0);
	 $4 = HEAP8[$lbf>>0]|0;
	 $cmp6 = ($4<<24>>24)>(-1);
	 L11: do {
	  if ($cmp6) {
	   $i$0 = $l;
	   while(1) {
	    $tobool9 = ($i$0|0)==(0);
	    if ($tobool9) {
	     $7 = $1;$i$1 = 0;$l$addr$0 = $l;$s$addr$0 = $s;
	     break L11;
	    }
	    $sub = (($i$0) + -1)|0;
	    $arrayidx = (($s) + ($sub)|0);
	    $5 = HEAP8[$arrayidx>>0]|0;
	    $cmp11 = ($5<<24>>24)==(10);
	    if ($cmp11) {
	     break;
	    } else {
	     $i$0 = $sub;
	    }
	   }
	   $write15 = (($f) + 36|0);
	   $6 = HEAP32[$write15>>2]|0;
	   $call16 = (FUNCTION_TABLE_iiii[$6 & 31]($f,$s,$i$0)|0);
	   $cmp17 = ($call16>>>0)<($i$0>>>0);
	   if ($cmp17) {
	    $retval$0 = $i$0;
	    STACKTOP = sp;return ($retval$0|0);
	   } else {
	    $add$ptr = (($s) + ($i$0)|0);
	    $sub21 = (($l) - ($i$0))|0;
	    $$pre = HEAP32[$wpos>>2]|0;
	    $7 = $$pre;$i$1 = $i$0;$l$addr$0 = $sub21;$s$addr$0 = $add$ptr;
	    break;
	   }
	  } else {
	   $7 = $1;$i$1 = 0;$l$addr$0 = $l;$s$addr$0 = $s;
	  }
	 } while(0);
	 _memcpy(($7|0),($s$addr$0|0),($l$addr$0|0))|0;
	 $8 = HEAP32[$wpos>>2]|0;
	 $add$ptr26 = (($8) + ($l$addr$0)|0);
	 HEAP32[$wpos>>2] = $add$ptr26;
	 $add = (($i$1) + ($l$addr$0))|0;
	 $retval$0 = $add;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _snprintf($s,$n,$fmt,$varargs) {
	 $s = $s|0;
	 $n = $n|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _sprintf($s,$fmt,$varargs) {
	 $s = $s|0;
	 $fmt = $fmt|0;
	 $varargs = $varargs|0;
	 var $ap = 0, $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap = sp;
	 HEAP32[$ap>>2] = $varargs;
	 $call = (_vsprintf($s,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _MUSL_vfprintf($f,$fmt,$ap) {
	 $f = $f|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $$call13 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call13 = 0, $call1318 = 0, $cmp = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $tobool = 0, $tobool14 = 0;
	 var $tobool18 = 0, $vacopy_currentptr = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $ap2 = sp + 120|0;
	 $nl_type = sp + 80|0;
	 $nl_arg = sp;
	 $internal_buf = sp + 136|0;
	 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 $vacopy_currentptr = HEAP32[$ap>>2]|0;
	 HEAP32[$ap2>>2] = $vacopy_currentptr;
	 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
	 $cmp = ($call|0)<(0);
	 if ($cmp) {
	  $retval$0 = -1;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $buf_size = (($f) + 48|0);
	 $0 = HEAP32[$buf_size>>2]|0;
	 $tobool = ($0|0)==(0);
	 if ($tobool) {
	  $buf = (($f) + 44|0);
	  $1 = HEAP32[$buf>>2]|0;
	  HEAP32[$buf>>2] = $internal_buf;
	  $wbase = (($f) + 28|0);
	  HEAP32[$wbase>>2] = $internal_buf;
	  $wpos = (($f) + 20|0);
	  HEAP32[$wpos>>2] = $internal_buf;
	  HEAP32[$buf_size>>2] = 80;
	  $add$ptr = (($internal_buf) + 80|0);
	  $wend = (($f) + 16|0);
	  HEAP32[$wend>>2] = $add$ptr;
	  $call13 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
	  $tobool14 = ($1|0)==(0|0);
	  if ($tobool14) {
	   $ret$1 = $call13;
	  } else {
	   $write = (($f) + 36|0);
	   $2 = HEAP32[$write>>2]|0;
	   (FUNCTION_TABLE_iiii[$2 & 31]($f,0,0)|0);
	   $3 = HEAP32[$wpos>>2]|0;
	   $tobool18 = ($3|0)==(0|0);
	   $$call13 = $tobool18 ? -1 : $call13;
	   HEAP32[$buf>>2] = $1;
	   HEAP32[$buf_size>>2] = 0;
	   HEAP32[$wend>>2] = 0;
	   HEAP32[$wbase>>2] = 0;
	   HEAP32[$wpos>>2] = 0;
	   $ret$1 = $$call13;
	  }
	 } else {
	  $call1318 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
	  $ret$1 = $call1318;
	 }
	 $retval$0 = $ret$1;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
	 $f = $f|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 $nl_arg = $nl_arg|0;
	 $nl_type = $nl_type|0;
	 var $$ = 0, $$$i = 0, $$172 = 0, $$173 = 0, $$175 = 0, $$365$i = 0.0, $$p$i = 0, $$pr$i = 0, $$pr637$i = 0, $$pre = 0, $$pre$i = 0, $$pre654 = 0, $$pre655 = 0, $$sub264$i = 0, $$sub264$us$i = 0, $$sub514$i = 0, $$sub562$i = 0, $0 = 0, $1 = 0, $10 = 0;
	 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
	 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
	 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
	 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
	 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
	 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
	 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
	 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
	 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
	 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
	 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
	 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $309$phi = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
	 var $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
	 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
	 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
	 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1735$i = 0;
	 var $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3725$i = 0, $a$3725$us$i = 0, $a$5$lcssa$i = 0, $a$5707$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $add = 0, $add$i = 0, $add$i189 = 0, $add$i341 = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr205 = 0, $add$ptr213$i = 0, $add$ptr257 = 0, $add$ptr311$i = 0;
	 var $add$ptr311$us$i = 0, $add$ptr311$us$z$4$us$i = 0, $add$ptr333 = 0, $add$ptr352 = 0, $add$ptr354$sum$i = 0, $add$ptr358$i = 0, $add$ptr358$sum$i = 0, $add$ptr358$sum361$i = 0, $add$ptr373$i = 0, $add$ptr393$i = 0, $add$ptr43 = 0, $add$ptr442$i = 0, $add$ptr442$z$3$i = 0, $add$ptr466 = 0, $add$ptr65$i = 0, $add$ptr671$i = 0, $add$ptr742$i = 0, $add$ptr88 = 0, $add113$i = 0, $add150$i = 0;
	 var $add154$i = 0, $add163$i = 0, $add165$i = 0, $add273$i = 0, $add275$i = 0, $add284$i = 0, $add284$us$i = 0, $add313$i = 0, $add313$us$i = 0, $add315 = 0, $add355$i = 0, $add388 = 0, $add405 = 0, $add410$i = 0.0, $add414$i = 0, $add434 = 0, $add477$neg$i = 0, $add561$i = 0, $add57$i = 0, $add57$i$i = 0;
	 var $add57$i509$i = 0, $add57$i563$i = 0, $add57$i580$i = 0, $add57$i611$i = 0, $add608$i = 0, $add612$i = 0, $add620$i = 0, $add653$i = 0, $add67362$i = 0, $add87$i = 0.0, $add90$i = 0.0, $and = 0, $and$i297 = 0, $and$i338 = 0, $and$i352 = 0, $and$i373$i = 0, $and$i415$i = 0, $and$i517$i = 0, $and12$i = 0, $and134$i = 0;
	 var $and210 = 0, $and214 = 0, $and214$conv207 = 0, $and216 = 0, $and219 = 0, $and249 = 0, $and254 = 0, $and263 = 0, $and282 = 0, $and282$i = 0, $and282$us$i = 0, $and287 = 0, $and302 = 0, $and302$fl$4 = 0, $and36$i = 0, $and379$i = 0, $and483$i = 0, $and610$i = 0, $and62$i = 0, $and702$i = 0;
	 var $and780$i = 0, $arg$sroa$0$sroa$0$0$extract$trunc456 = 0, $arg$sroa$0$sroa$0$0$extract$trunc458 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531552 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531552$phi = 0, $arg$sroa$0$sroa$1$4$extract$trunc531553 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531554 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531555 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531556 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531556568 = 0, $arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0;
	 var $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0;
	 var $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $arraydecay208$add$ptr213$i = 0, $arrayidx$i = 0, $arrayidx$i335 = 0, $arrayidx114 = 0;
	 var $arrayidx117$i = 0, $arrayidx117$us$i = 0, $arrayidx117$us$us$i = 0, $arrayidx117$us647$i = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx173 = 0, $arrayidx192 = 0, $arrayidx251$i = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx363 = 0, $arrayidx453$i = 0, $arrayidx462 = 0, $arrayidx474 = 0, $arrayidx489$i = 0, $arrayidx68 = 0, $arrayidx73 = 0;
	 var $arrayidx81 = 0, $big$i = 0, $brmerge$i = 0, $buf = 0, $buf$i = 0, $call = 0, $call337 = 0, $call338 = 0, $call349 = 0, $call377 = 0, $call404 = 0, $call55$i = 0.0, $carry$0730$i = 0, $carry262$0721$i = 0, $carry262$0721$us$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i198 = 0, $cmp$i247 = 0, $cmp$i299 = 0;
	 var $cmp$i354 = 0, $cmp$i375$i = 0, $cmp$i417$i = 0, $cmp$i455$i = 0, $cmp$i519$i = 0, $cmp$i589$i = 0, $cmp$i622$i = 0, $cmp1 = 0, $cmp1$i = 0, $cmp1$i$i = 0, $cmp1$i249 = 0, $cmp1$i283 = 0, $cmp1$i302 = 0, $cmp1$i322 = 0, $cmp1$i357 = 0, $cmp1$i378$i = 0, $cmp1$i398$i = 0, $cmp1$i420$i = 0, $cmp1$i440$i = 0, $cmp1$i456$i = 0;
	 var $cmp1$i476$i = 0, $cmp1$i522$i = 0, $cmp1$i542$i = 0, $cmp1$i590$i = 0, $cmp1$i623$i = 0, $cmp103$i = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp12$i$i = 0, $cmp12$i489$i = 0, $cmp126 = 0, $cmp127$i = 0, $cmp127$us$i = 0, $cmp127$us$us$i = 0, $cmp127$us657$i = 0, $cmp13 = 0, $cmp131$i = 0, $cmp147$i = 0, $cmp165 = 0;
	 var $cmp176 = 0, $cmp18 = 0, $cmp181 = 0, $cmp184 = 0, $cmp196$i = 0, $cmp205$i = 0, $cmp211 = 0, $cmp225$i = 0, $cmp225733$i = 0, $cmp228$i = 0, $cmp235$i = 0, $cmp235729$i = 0, $cmp240 = 0, $cmp249$i = 0, $cmp259$i = 0, $cmp259$us$i = 0, $cmp259723$i = 0, $cmp265$i = 0, $cmp265$us$i = 0, $cmp277$i = 0;
	 var $cmp277$us$i = 0, $cmp277719$i = 0, $cmp277719$us$i = 0, $cmp299 = 0, $cmp299$i = 0, $cmp3$i = 0, $cmp3$i$i = 0, $cmp3$i256 = 0, $cmp3$i290 = 0, $cmp3$i309 = 0, $cmp3$i329 = 0, $cmp3$i364 = 0, $cmp3$i385$i = 0, $cmp3$i405$i = 0, $cmp3$i427$i = 0, $cmp3$i447$i = 0, $cmp3$i463$i = 0, $cmp3$i483$i = 0, $cmp3$i529$i = 0, $cmp3$i549$i = 0;
	 var $cmp3$i597$i = 0, $cmp3$i630$i = 0, $cmp308$i = 0, $cmp308$us$i = 0, $cmp315$i = 0, $cmp316 = 0, $cmp324$i = 0, $cmp324715$i = 0, $cmp333$i = 0, $cmp338$i = 0, $cmp350$i = 0, $cmp363711$i = 0, $cmp37 = 0, $cmp370 = 0, $cmp370610 = 0, $cmp374$i = 0, $cmp378 = 0, $cmp38$i = 0, $cmp383 = 0, $cmp385$i = 0;
	 var $cmp39$i = 0, $cmp39$i$i = 0, $cmp39$i251 = 0, $cmp39$i285 = 0, $cmp39$i304 = 0, $cmp39$i324 = 0, $cmp39$i359 = 0, $cmp39$i380$i = 0, $cmp39$i400$i = 0, $cmp39$i422$i = 0, $cmp39$i442$i = 0, $cmp39$i458$i = 0, $cmp39$i478$i = 0, $cmp39$i524$i = 0, $cmp39$i544$i = 0, $cmp39$i592$i = 0, $cmp39$i625$i = 0, $cmp390 = 0, $cmp390$i = 0, $cmp394$i = 0;
	 var $cmp397 = 0, $cmp397616 = 0, $cmp403$i = 0, $cmp406 = 0, $cmp411$i = 0, $cmp416$i = 0, $cmp416705$i = 0, $cmp420$i = 0, $cmp427 = 0, $cmp433$i = 0, $cmp433701$i = 0, $cmp435 = 0, $cmp443$i = 0, $cmp450$i = 0, $cmp450$lcssa$i = 0, $cmp459 = 0, $cmp470$i = 0, $cmp471 = 0, $cmp473$i = 0, $cmp495$i = 0;
	 var $cmp495697$i = 0, $cmp50 = 0, $cmp505$i = 0, $cmp50590 = 0, $cmp515$i = 0, $cmp528$i = 0, $cmp563$i = 0, $cmp577$i = 0, $cmp59$i = 0, $cmp614$i = 0, $cmp617$i = 0, $cmp623$i = 0, $cmp636$i = 0, $cmp636692$i = 0, $cmp65 = 0, $cmp660$i = 0, $cmp665$i = 0, $cmp673$i = 0, $cmp678$i = 0, $cmp678677$i = 0;
	 var $cmp686$i = 0, $cmp707$i = 0, $cmp707671$i = 0, $cmp710$i = 0, $cmp710672$i = 0, $cmp722$i = 0, $cmp722668$i = 0, $cmp727$i = 0, $cmp745$i = 0, $cmp748$i = 0, $cmp748685$i = 0, $cmp75 = 0, $cmp760$i = 0, $cmp765$i = 0, $cmp770$i = 0, $cmp770681$i = 0, $cmp777$i = 0, $cmp790$i = 0, $cmp82$i = 0, $cmp94$i = 0;
	 var $cmp97 = 0, $cnt$0 = 0, $cnt$1 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i250 = 0, $cond$i284 = 0, $cond$i303 = 0, $cond$i323 = 0, $cond$i340 = 0, $cond$i358 = 0, $cond$i379$i = 0, $cond$i399$i = 0, $cond$i421$i = 0, $cond$i441$i = 0, $cond$i457$i = 0, $cond$i477$i = 0, $cond$i523$i = 0, $cond$i543$i = 0, $cond$i591$i = 0;
	 var $cond$i624$i = 0, $cond100$i = 0, $cond233$i = 0, $cond245 = 0, $cond419 = 0, $cond43$i = 0, $cond629$i = 0, $cond732$i = 0, $conv$i = 0, $conv$i191 = 0, $conv1$i = 0, $conv111$i = 0, $conv114$i = 0, $conv116$i = 0, $conv116$us$i = 0, $conv116$us$us$i = 0, $conv116$us646$i = 0, $conv118363$i = 0, $conv118363$us$i = 0, $conv118363$us$us$i = 0;
	 var $conv118363$us648$i = 0, $conv12$i = 0, $conv12$i215 = 0, $conv120 = 0, $conv121$i = 0, $conv121$us$i = 0, $conv121$us$us$i = 0, $conv121$us650$i = 0, $conv123$i = 0.0, $conv123$us$i = 0.0, $conv123$us$us$i = 0.0, $conv123$us652$i = 0.0, $conv134 = 0, $conv163 = 0, $conv17$mask$i = 0, $conv17$mask$i220 = 0, $conv174 = 0, $conv207 = 0, $conv216$i = 0, $conv218$i = 0.0;
	 var $conv22$i = 0, $conv22$i225 = 0, $conv229 = 0, $conv232 = 0, $conv27$mask$i = 0, $conv27$mask$i230 = 0, $conv3$i = 0, $conv3$i182 = 0, $conv32 = 0, $conv332 = 0, $conv4$i = 0, $conv48 = 0, $conv48588 = 0, $conv48593 = 0, $conv58 = 0, $conv6$i = 0, $conv6$i$i = 0, $conv6$i510$i = 0, $conv6$i564$i = 0, $conv6$i581$i = 0;
	 var $conv6$i612$i = 0, $conv644$i = 0, $conv646$i = 0, $conv69 = 0, $conv7$i = 0, $conv7$i185 = 0, $conv83 = 0, $d$0$i = 0, $d$0728$i = 0, $d$0731$i = 0, $d$1720$i = 0, $d$1720$us$i = 0, $d$2$lcssa$i = 0, $d$2706$i = 0, $d$3$i = 0, $d$4680$i = 0, $d$5674$i = 0, $d$6687$i = 0, $dec$i = 0, $dec476$i = 0;
	 var $dec481$i = 0, $dec78$i = 0, $div274$i = 0, $div356$i = 0, $div378$i = 0, $div384$i = 0, $div9$i = 0, $div9$i$i = 0, $div9$i512$i = 0, $div9$i566$i = 0, $div9$i583$i = 0, $div9$i614$i = 0, $e$0717$i = 0, $e$1$i = 0, $e$2703$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0;
	 var $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1693$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0586 = 0, $fl$0592 = 0, $fl$1 = 0, $fl$1$and219 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$06$i = 0, $i$06$i186 = 0, $i$0609 = 0, $i$0612 = 0, $i$0716$i = 0, $i$1$lcssa$i = 0, $i$1617 = 0;
	 var $i$1712$i = 0, $i$2577 = 0, $i$2702$i = 0, $i$3575 = 0, $i$3698$i = 0, $i137 = 0, $i86 = 0, $idxprom$i = 0, $inc = 0, $inc$i = 0, $inc425$i = 0, $inc438$i = 0, $inc468$$p$i = 0, $inc468$i = 0, $inc481 = 0, $inc500$i = 0, $incdec$ptr = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i190 = 0;
	 var $incdec$ptr$i190557 = 0, $incdec$ptr$i190558 = 0, $incdec$ptr$i190559 = 0, $incdec$ptr$i190562 = 0, $incdec$ptr$i190563 = 0, $incdec$ptr$i190564$lcssa = 0, $incdec$ptr$i190564579 = 0, $incdec$ptr$i242 = 0, $incdec$ptr$i265 = 0, $incdec$ptr$i272 = 0, $incdec$ptr$i496$i = 0, $incdec$ptr106$i = 0, $incdec$ptr112$i = 0, $incdec$ptr115$i = 0, $incdec$ptr122$i = 0, $incdec$ptr122$us$i = 0, $incdec$ptr122$us$us$i = 0, $incdec$ptr122$us651$i = 0, $incdec$ptr137$i = 0, $incdec$ptr137$us$i = 0;
	 var $incdec$ptr137$us$us$i = 0, $incdec$ptr137$us661$i = 0, $incdec$ptr169 = 0, $incdec$ptr217$i = 0, $incdec$ptr23 = 0, $incdec$ptr246$i = 0, $incdec$ptr288$i = 0, $incdec$ptr288$us$i = 0, $incdec$ptr292$a$3$i = 0, $incdec$ptr292$a$3$us$i = 0, $incdec$ptr292$a$3$us746$i = 0, $incdec$ptr292$a$3$us748$i = 0, $incdec$ptr292$a$3751$i = 0, $incdec$ptr292$a$3753$i = 0, $incdec$ptr292$i = 0, $incdec$ptr292$us$i = 0, $incdec$ptr292$us745$i = 0, $incdec$ptr292750$i = 0, $incdec$ptr296$i = 0, $incdec$ptr296$us$i = 0;
	 var $incdec$ptr376 = 0, $incdec$ptr403 = 0, $incdec$ptr419$i = 0, $incdec$ptr423$i = 0, $incdec$ptr62 = 0, $incdec$ptr639$i = 0, $incdec$ptr645$i = 0, $incdec$ptr647$i = 0, $incdec$ptr681$i = 0, $incdec$ptr689$i = 0, $incdec$ptr698$i = 0, $incdec$ptr7$i = 0, $incdec$ptr7$i$i = 0, $incdec$ptr7$i511$i = 0, $incdec$ptr7$i565$i = 0, $incdec$ptr7$i582$i = 0, $incdec$ptr7$i613$i = 0, $incdec$ptr725$i = 0, $incdec$ptr734$i = 0, $incdec$ptr773$i = 0;
	 var $incdec$ptr776$i = 0, $incdec$ptr808$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i193 = 0, $isdigit168 = 0, $isdigit170 = 0, $isdigit5$i = 0, $isdigit5$i184 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i192 = 0, $isdigittmp167 = 0, $isdigittmp169 = 0, $isdigittmp4$i = 0, $isdigittmp4$i183 = 0, $j$0$i = 0, $j$0710$i = 0, $j$0713$i = 0, $j$1699$i = 0;
	 var $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1611 = 0, $l$addr$0$lcssa$i = 0, $l$addr$0$lcssa$i$i = 0, $l$addr$0$lcssa$i258 = 0, $l$addr$0$lcssa$i292 = 0, $l$addr$0$lcssa$i311 = 0, $l$addr$0$lcssa$i331 = 0, $l$addr$0$lcssa$i366 = 0, $l$addr$0$lcssa$i387$i = 0, $l$addr$0$lcssa$i407$i = 0, $l$addr$0$lcssa$i429$i = 0, $l$addr$0$lcssa$i449$i = 0, $l$addr$0$lcssa$i465$i = 0, $l$addr$0$lcssa$i485$i = 0, $l$addr$0$lcssa$i531$i = 0;
	 var $l$addr$0$lcssa$i551$i = 0, $l$addr$0$lcssa$i599$i = 0, $l$addr$0$lcssa$i632$i = 0, $l$addr$010$i = 0, $l$addr$010$i$i = 0, $l$addr$010$i253 = 0, $l$addr$010$i287 = 0, $l$addr$010$i306 = 0, $l$addr$010$i326 = 0, $l$addr$010$i361 = 0, $l$addr$010$i382$i = 0, $l$addr$010$i402$i = 0, $l$addr$010$i424$i = 0, $l$addr$010$i444$i = 0, $l$addr$010$i460$i = 0, $l$addr$010$i480$i = 0, $l$addr$010$i526$i = 0, $l$addr$010$i546$i = 0, $l$addr$010$i594$i = 0, $l$addr$010$i627$i = 0;
	 var $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $land$ext$neg$i = 0, $lnot$ext = 0, $lnot$i = 0, $lnot455$i = 0, $lnot476 = 0, $lor$ext$i = 0, $mb = 0, $mul$i = 0, $mul$i187 = 0, $mul$i343 = 0.0, $mul125$i = 0.0, $mul125$us$i = 0.0, $mul125$us$us$i = 0.0, $mul125$us654$i = 0.0, $mul202$i = 0.0;
	 var $mul220$i = 0.0, $mul286$i = 0, $mul286$us$i = 0, $mul322$i = 0, $mul328$i = 0, $mul335$i = 0, $mul349$i = 0, $mul367$i = 0, $mul406$i = 0.0, $mul407$i = 0.0, $mul431$i = 0, $mul437$i = 0, $mul499$i = 0, $mul513$i = 0, $mul80$i = 0.0, $or = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i281 = 0;
	 var $or$cond$i300 = 0, $or$cond$i320 = 0, $or$cond$i346 = 0, $or$cond$i355 = 0, $or$cond$i376$i = 0, $or$cond$i396$i = 0, $or$cond$i418$i = 0, $or$cond$i438$i = 0, $or$cond$i474$i = 0, $or$cond$i520$i = 0, $or$cond$i540$i = 0, $or$cond1$i = 0, $or$cond368$i = 0, $or$cond368673$i = 0, $or$cond369$i = 0, $or$i = 0, $or$i344 = 0, $or100 = 0, $or120$i = 0, $or120$us$i = 0;
	 var $or120$us$us$i = 0, $or120$us649$i = 0, $or246 = 0, $or504$i = 0, $or613$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add315 = 0, $p$4658 = 0, $p$5 = 0, $p$addr$2$$sub514$i = 0, $p$addr$2$$sub562$i = 0, $p$addr$2$i = 0, $p$addr$3$i = 0, $p$addr$4$lcssa$i = 0, $p$addr$4675$i = 0, $p$addr$5688$i = 0, $pad$i = 0, $pl$0 = 0;
	 var $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$add$ptr65$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1667$i = 0, $rem360$i = 0, $rem370$i = 0, $rem4$i = 0, $rem4$i$i = 0, $rem4$i508$i = 0, $rem4$i562$i = 0, $rem4$i579$i = 0, $rem4$i610$i = 0;
	 var $rem494$i = 0, $rem494696$i = 0, $retval$0 = 0, $round$0666$i = 0.0, $round377$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us644$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us663$i = 0, $s$addr$0$lcssa$i$i = 0, $s$addr$0$lcssa$i269 = 0, $s$addr$0$lcssa$i275 = 0, $s$addr$0$lcssa$i502$i = 0, $s$addr$014$i = 0, $s$addr$014$i$i = 0;
	 var $s$addr$014$i491$i = 0, $s$addr$06$i = 0, $s$addr$07$i = 0, $s$addr$1$lcssa$i$i = 0, $s$addr$1$lcssa$i568$i = 0, $s$addr$110$i = 0, $s$addr$110$i$i = 0, $s$addr$110$i507$i = 0, $s$addr$110$i561$i = 0, $s$addr$110$i578$i = 0, $s$addr$110$i609$i = 0, $s35$0$i = 0, $s668$0678$i = 0, $s668$1$i = 0, $s715$0$lcssa$i = 0, $s715$0669$i = 0, $s753$0$i = 0, $s753$1682$i = 0, $s753$2$i = 0, $sext = 0;
	 var $sext573 = 0, $shl = 0, $shl280$i = 0, $shl280$us$i = 0, $shl60 = 0, $shr = 0, $shr283$i = 0, $shr283$us$i = 0, $shr285$i = 0, $shr285$us$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge166584 = 0, $storemerge166591 = 0, $storemerge171 = 0, $sub = 0, $sub$i = 0, $sub$i$i = 0;
	 var $sub$i179 = 0, $sub$i188 = 0, $sub$i248 = 0, $sub$i282 = 0, $sub$i301 = 0, $sub$i321 = 0, $sub$i337 = 0.0, $sub$i356 = 0, $sub$i377$i = 0, $sub$i397$i = 0, $sub$i419$i = 0, $sub$i439$i = 0, $sub$i475$i = 0, $sub$i521$i = 0, $sub$i541$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$us$i = 0, $sub$ptr$div321$i = 0, $sub$ptr$div347$i = 0, $sub$ptr$div430$i = 0;
	 var $sub$ptr$div511$i = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$us$i = 0, $sub$ptr$lhs$cast$us$us$i = 0, $sub$ptr$lhs$cast$us655$i = 0, $sub$ptr$lhs$cast157$pre$i = 0, $sub$ptr$lhs$cast160$i = 0, $sub$ptr$lhs$cast305$i = 0, $sub$ptr$lhs$cast305$us$i = 0, $sub$ptr$lhs$cast310 = 0, $sub$ptr$lhs$cast318$i = 0, $sub$ptr$lhs$cast344$i = 0, $sub$ptr$lhs$cast354 = 0, $sub$ptr$lhs$cast424 = 0, $sub$ptr$lhs$cast508$i = 0, $sub$ptr$lhs$cast694$i = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast152$i = 0;
	 var $sub$ptr$rhs$cast161$i = 0, $sub$ptr$rhs$cast174$i = 0, $sub$ptr$rhs$cast306$i = 0, $sub$ptr$rhs$cast306$us$i = 0, $sub$ptr$rhs$cast311 = 0, $sub$ptr$rhs$cast319$i = 0, $sub$ptr$rhs$cast355 = 0, $sub$ptr$rhs$cast425 = 0, $sub$ptr$rhs$cast428$i = 0, $sub$ptr$rhs$cast634$i = 0, $sub$ptr$rhs$cast634690$i = 0, $sub$ptr$rhs$cast649$i = 0, $sub$ptr$rhs$cast695$i = 0, $sub$ptr$rhs$cast788$i = 0, $sub$ptr$rhs$cast812$i = 0, $sub$ptr$sub = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$us$i = 0, $sub$ptr$sub$us$us$i = 0, $sub$ptr$sub$us656$i = 0;
	 var $sub$ptr$sub145$i = 0, $sub$ptr$sub153$i = 0, $sub$ptr$sub159$i = 0, $sub$ptr$sub162$i = 0, $sub$ptr$sub172$i = 0, $sub$ptr$sub175$i = 0, $sub$ptr$sub307$i = 0, $sub$ptr$sub307$us$i = 0, $sub$ptr$sub312 = 0, $sub$ptr$sub320$i = 0, $sub$ptr$sub346$i = 0, $sub$ptr$sub356 = 0, $sub$ptr$sub426 = 0, $sub$ptr$sub426$p$5 = 0, $sub$ptr$sub429$i = 0, $sub$ptr$sub510$i = 0, $sub$ptr$sub635$i = 0, $sub$ptr$sub635691$i = 0, $sub$ptr$sub650$i = 0, $sub$ptr$sub650$pn$i = 0;
	 var $sub$ptr$sub696$i = 0, $sub$ptr$sub789$i = 0, $sub$ptr$sub789$p$addr$5$i = 0, $sub$ptr$sub813$i = 0, $sub101 = 0, $sub124$i = 0.0, $sub124$us$i = 0.0, $sub124$us$us$i = 0.0, $sub124$us653$i = 0.0, $sub135 = 0, $sub146$i = 0, $sub164 = 0, $sub175 = 0, $sub176$i = 0, $sub181$i = 0, $sub203$i = 0, $sub219$i = 0.0, $sub256$i = 0, $sub264$i = 0, $sub264$us$i = 0;
	 var $sub281$i = 0, $sub281$us$i = 0, $sub336$i = 0, $sub343$i = 0, $sub382 = 0, $sub409$i = 0, $sub478$i = 0, $sub480$i = 0, $sub49 = 0, $sub49589 = 0, $sub5$i = 0, $sub5$i$i = 0, $sub5$i255 = 0, $sub5$i289 = 0, $sub5$i308 = 0, $sub5$i328 = 0, $sub5$i363 = 0, $sub5$i384$i = 0, $sub5$i404$i = 0, $sub5$i426$i = 0;
	 var $sub5$i446$i = 0, $sub5$i462$i = 0, $sub5$i482$i = 0, $sub5$i528$i = 0, $sub5$i548$i = 0, $sub5$i596$i = 0, $sub5$i629$i = 0, $sub514$i = 0, $sub54 = 0, $sub562$i = 0, $sub59 = 0, $sub626$i = 0, $sub735$i = 0, $sub74$i = 0, $sub806$i = 0, $sub84 = 0, $sub85$i = 0.0, $sub86$i = 0.0, $sub88$i = 0.0, $sub91$i = 0.0;
	 var $sub97$i = 0, $t$0 = 0, $t$1 = 0, $t$addr$0$i = 0, $t$addr$1$i = 0, $tobool = 0, $tobool$i = 0, $tobool$i$i = 0, $tobool$i279 = 0, $tobool$i298 = 0, $tobool$i318 = 0, $tobool$i353 = 0, $tobool$i374$i = 0, $tobool$i394$i = 0, $tobool$i416$i = 0, $tobool$i436$i = 0, $tobool$i472$i = 0, $tobool$i518$i = 0, $tobool$i538$i = 0, $tobool129$us$i = 0;
	 var $tobool13$i = 0, $tobool135$i = 0, $tobool139$i = 0, $tobool139$us$i = 0, $tobool139$us$us$i = 0, $tobool140$i = 0, $tobool141 = 0, $tobool178 = 0, $tobool208 = 0, $tobool217 = 0, $tobool222$i = 0, $tobool244$i = 0, $tobool25 = 0, $tobool255 = 0, $tobool264 = 0, $tobool28 = 0, $tobool283 = 0, $tobool288 = 0, $tobool290$i = 0, $tobool290$us$i = 0;
	 var $tobool290$us744$i = 0, $tobool290749$i = 0, $tobool294$i = 0, $tobool294$us$i = 0, $tobool307 = 0, $tobool341$$i = 0, $tobool341$i = 0, $tobool342 = 0, $tobool350 = 0, $tobool37$i = 0, $tobool371$i = 0, $tobool373 = 0, $tobool380$i = 0, $tobool400 = 0, $tobool400$i = 0, $tobool452 = 0, $tobool455 = 0, $tobool463 = 0, $tobool466$i = 0, $tobool484$i = 0;
	 var $tobool490$i = 0, $tobool55 = 0, $tobool56$i = 0, $tobool609$i = 0, $tobool611$i = 0, $tobool63$i = 0, $tobool703$i = 0, $tobool76$i = 0, $tobool781$not$i = 0, $tobool79$i = 0, $tobool9$i = 0, $tobool9$i$i = 0, $tobool9$i339 = 0, $tobool9$i504$i = 0, $tobool9$i558$i = 0, $tobool9$i575$i = 0, $tobool9$i606$i = 0, $tobool90 = 0, $w$0 = 0, $w$1 = 0;
	 var $w$2 = 0, $w$add$i = 0, $w$add165$i = 0, $w$add653$i = 0, $wc = 0, $ws$0613 = 0, $ws$1618 = 0, $x$addr$0$lcssa$off0$i = 0, $x$addr$0$lcssa$off0$i$i = 0, $x$addr$0$lcssa$off0$i503$i = 0, $xor$i = 0, $y$011$i = 0, $y$011$i$i = 0, $y$011$i506$i = 0, $y$011$i560$i = 0, $y$011$i577$i = 0, $y$011$i608$i = 0, $y$addr$0$i = 0.0, $y$addr$1$i = 0.0, $y$addr$2$i = 0.0;
	 var $y$addr$2$us$i = 0.0, $y$addr$2$us$us$i = 0.0, $y$addr$2$us645$i = 0.0, $y$addr$3$i = 0.0, $y$addr$4$i = 0.0, $z$0$i = 0, $z$0$lcssa = 0, $z$0580 = 0, $z$1$lcssa$i = 0, $z$1734$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3724$i = 0, $z$3724$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$add$ptr742$i = 0, $z$6$i = 0;
	 var $z$6$ph$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $big$i = sp + 16|0;
	 $e2$i = sp + 8|0;
	 $buf$i = sp + 560|0;
	 $sub$ptr$rhs$cast$i = $buf$i;
	 $ebuf0$i = sp + 840|0;
	 $pad$i = sp + 584|0;
	 $buf = sp + 520|0;
	 $wc = sp;
	 $mb = sp + 852|0;
	 $tobool25 = ($f|0)!=(0|0);
	 $add$ptr205 = (($buf) + 40|0);
	 $sub$ptr$lhs$cast310 = $add$ptr205;
	 $add$ptr333 = (($buf) + 39|0);
	 $arrayidx363 = (($wc) + 4|0);
	 $arrayidx$i335 = (($ebuf0$i) + 12|0);
	 $incdec$ptr106$i = (($ebuf0$i) + 11|0);
	 $sub$ptr$lhs$cast160$i = $arrayidx$i335;
	 $sub$ptr$sub162$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast$i))|0;
	 $sub$ptr$sub145$i = (-2 - ($sub$ptr$rhs$cast$i))|0;
	 $sub$ptr$sub153$i = (($sub$ptr$lhs$cast160$i) + 2)|0;
	 $add$ptr213$i = (($big$i) + 288|0);
	 $add$ptr671$i = (($buf$i) + 9|0);
	 $sub$ptr$lhs$cast694$i = $add$ptr671$i;
	 $incdec$ptr689$i = (($buf$i) + 8|0);
	 $309 = 0;$arg$sroa$0$sroa$1$4$extract$trunc531552 = 0;$cnt$0 = 0;$incdec$ptr$i190563 = $fmt;$l$0 = 0;$l10n$0 = 0;
	 L1: while(1) {
	  $cmp = ($cnt$0|0)>(-1);
	  do {
	   if ($cmp) {
	    $sub = (2147483647 - ($cnt$0))|0;
	    $cmp1 = ($l$0|0)>($sub|0);
	    if ($cmp1) {
	     $call = (___errno_location()|0);
	     HEAP32[$call>>2] = 75;
	     $cnt$1 = -1;
	     break;
	    } else {
	     $add = (($l$0) + ($cnt$0))|0;
	     $cnt$1 = $add;
	     break;
	    }
	   } else {
	    $cnt$1 = $cnt$0;
	   }
	  } while(0);
	  $0 = HEAP8[$incdec$ptr$i190563>>0]|0;
	  $tobool = ($0<<24>>24)==(0);
	  if ($tobool) {
	   label = 344;
	   break;
	  } else {
	   $310 = $0;$incdec$ptr$i190562 = $incdec$ptr$i190563;
	  }
	  while(1) {
	   if ((($310<<24>>24) == 37)) {
	    $incdec$ptr$i190564579 = $incdec$ptr$i190562;$z$0580 = $incdec$ptr$i190562;
	    label = 9;
	    break;
	   } else if ((($310<<24>>24) == 0)) {
	    $incdec$ptr$i190564$lcssa = $incdec$ptr$i190562;$z$0$lcssa = $incdec$ptr$i190562;
	    break;
	   }
	   $incdec$ptr = (($incdec$ptr$i190562) + 1|0);
	   $$pre = HEAP8[$incdec$ptr>>0]|0;
	   $310 = $$pre;$incdec$ptr$i190562 = $incdec$ptr;
	  }
	  L12: do {
	   if ((label|0) == 9) {
	    while(1) {
	     label = 0;
	     $arrayidx16 = (($incdec$ptr$i190564579) + 1|0);
	     $1 = HEAP8[$arrayidx16>>0]|0;
	     $cmp18 = ($1<<24>>24)==(37);
	     if (!($cmp18)) {
	      $incdec$ptr$i190564$lcssa = $incdec$ptr$i190564579;$z$0$lcssa = $z$0580;
	      break L12;
	     }
	     $incdec$ptr23 = (($z$0580) + 1|0);
	     $add$ptr = (($incdec$ptr$i190564579) + 2|0);
	     $2 = HEAP8[$add$ptr>>0]|0;
	     $cmp13 = ($2<<24>>24)==(37);
	     if ($cmp13) {
	      $incdec$ptr$i190564579 = $add$ptr;$z$0580 = $incdec$ptr23;
	      label = 9;
	     } else {
	      $incdec$ptr$i190564$lcssa = $add$ptr;$z$0$lcssa = $incdec$ptr23;
	      break;
	     }
	    }
	   }
	  } while(0);
	  $sub$ptr$lhs$cast = $z$0$lcssa;
	  $sub$ptr$rhs$cast = $incdec$ptr$i190563;
	  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	  if ($tobool25) {
	   (___fwritex($incdec$ptr$i190563,$sub$ptr$sub,$f)|0);
	  }
	  $tobool28 = ($z$0$lcssa|0)==($incdec$ptr$i190563|0);
	  if (!($tobool28)) {
	   $l10n$0$phi = $l10n$0;$arg$sroa$0$sroa$1$4$extract$trunc531552$phi = $arg$sroa$0$sroa$1$4$extract$trunc531552;$309$phi = $309;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr$i190564$lcssa;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$0$phi;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531552$phi;$309 = $309$phi;
	   continue;
	  }
	  $arrayidx31 = (($incdec$ptr$i190564$lcssa) + 1|0);
	  $3 = HEAP8[$arrayidx31>>0]|0;
	  $conv32 = $3 << 24 >> 24;
	  $isdigittmp = (($conv32) + -48)|0;
	  $isdigit = ($isdigittmp>>>0)<(10);
	  if ($isdigit) {
	   $arrayidx35 = (($incdec$ptr$i190564$lcssa) + 2|0);
	   $4 = HEAP8[$arrayidx35>>0]|0;
	   $cmp37 = ($4<<24>>24)==(36);
	   if ($cmp37) {
	    $add$ptr43 = (($incdec$ptr$i190564$lcssa) + 3|0);
	    $$pre654 = HEAP8[$add$ptr43>>0]|0;
	    $5 = $$pre654;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $add$ptr43;
	   } else {
	    $5 = $3;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx31;
	   }
	  } else {
	   $5 = $3;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $arrayidx31;
	  }
	  $conv48588 = $5 << 24 >> 24;
	  $sub49589 = (($conv48588) + -32)|0;
	  $cmp50590 = ($sub49589>>>0)<(32);
	  L25: do {
	   if ($cmp50590) {
	    $6 = $5;$conv48593 = $conv48588;$fl$0592 = 0;$storemerge166591 = $storemerge;
	    while(1) {
	     $sub54 = (($conv48593) + -32)|0;
	     $shl = 1 << $sub54;
	     $and = $shl & 75913;
	     $tobool55 = ($and|0)==(0);
	     if ($tobool55) {
	      $8 = $6;$fl$0586 = $fl$0592;$storemerge166584 = $storemerge166591;
	      break L25;
	     }
	     $conv58 = $6 << 24 >> 24;
	     $sub59 = (($conv58) + -32)|0;
	     $shl60 = 1 << $sub59;
	     $or = $shl60 | $fl$0592;
	     $incdec$ptr62 = (($storemerge166591) + 1|0);
	     $7 = HEAP8[$incdec$ptr62>>0]|0;
	     $conv48 = $7 << 24 >> 24;
	     $sub49 = (($conv48) + -32)|0;
	     $cmp50 = ($sub49>>>0)<(32);
	     if ($cmp50) {
	      $6 = $7;$conv48593 = $conv48;$fl$0592 = $or;$storemerge166591 = $incdec$ptr62;
	     } else {
	      $8 = $7;$fl$0586 = $or;$storemerge166584 = $incdec$ptr62;
	      break;
	     }
	    }
	   } else {
	    $8 = $5;$fl$0586 = 0;$storemerge166584 = $storemerge;
	   }
	  } while(0);
	  $cmp65 = ($8<<24>>24)==(42);
	  do {
	   if ($cmp65) {
	    $arrayidx68 = (($storemerge166584) + 1|0);
	    $9 = HEAP8[$arrayidx68>>0]|0;
	    $conv69 = $9 << 24 >> 24;
	    $isdigittmp169 = (($conv69) + -48)|0;
	    $isdigit170 = ($isdigittmp169>>>0)<(10);
	    if ($isdigit170) {
	     $arrayidx73 = (($storemerge166584) + 2|0);
	     $10 = HEAP8[$arrayidx73>>0]|0;
	     $cmp75 = ($10<<24>>24)==(36);
	     if ($cmp75) {
	      $arrayidx81 = (($nl_type) + ($isdigittmp169<<2)|0);
	      HEAP32[$arrayidx81>>2] = 10;
	      $11 = HEAP8[$arrayidx68>>0]|0;
	      $conv83 = $11 << 24 >> 24;
	      $sub84 = (($conv83) + -48)|0;
	      $i86 = (($nl_arg) + ($sub84<<3)|0);
	      $12 = $i86;
	      $13 = $12;
	      $14 = HEAP32[$13>>2]|0;
	      $15 = (($12) + 4)|0;
	      $16 = $15;
	      $17 = HEAP32[$16>>2]|0;
	      $add$ptr88 = (($storemerge166584) + 3|0);
	      $l10n$2 = 1;$storemerge171 = $add$ptr88;$w$0 = $14;
	     } else {
	      label = 24;
	     }
	    } else {
	     label = 24;
	    }
	    if ((label|0) == 24) {
	     label = 0;
	     $tobool90 = ($l10n$1|0)==(0);
	     if (!($tobool90)) {
	      $retval$0 = -1;
	      label = 362;
	      break L1;
	     }
	     if (!($tobool25)) {
	      $fl$1 = $fl$0586;$incdec$ptr$i190559 = $arrayidx68;$l10n$3 = 0;$w$1 = 0;
	      break;
	     }
	     $arglist_current = HEAP32[$ap>>2]|0;
	     $18 = HEAP32[$arglist_current>>2]|0;
	     $arglist_next = (($arglist_current) + 4|0);
	     HEAP32[$ap>>2] = $arglist_next;
	     $l10n$2 = 0;$storemerge171 = $arrayidx68;$w$0 = $18;
	    }
	    $cmp97 = ($w$0|0)<(0);
	    if ($cmp97) {
	     $or100 = $fl$0586 | 8192;
	     $sub101 = (0 - ($w$0))|0;
	     $fl$1 = $or100;$incdec$ptr$i190559 = $storemerge171;$l10n$3 = $l10n$2;$w$1 = $sub101;
	    } else {
	     $fl$1 = $fl$0586;$incdec$ptr$i190559 = $storemerge171;$l10n$3 = $l10n$2;$w$1 = $w$0;
	    }
	   } else {
	    $conv3$i = $8 << 24 >> 24;
	    $isdigittmp4$i = (($conv3$i) + -48)|0;
	    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
	    if ($isdigit5$i) {
	     $19 = $storemerge166584;$conv7$i = $conv3$i;$i$06$i = 0;
	     while(1) {
	      $mul$i = ($i$06$i*10)|0;
	      $sub$i = (($conv7$i) + -48)|0;
	      $add$i = (($sub$i) + ($mul$i))|0;
	      $incdec$ptr$i = (($19) + 1|0);
	      $20 = HEAP8[$incdec$ptr$i>>0]|0;
	      $conv$i = $20 << 24 >> 24;
	      $isdigittmp$i = (($conv$i) + -48)|0;
	      $isdigit$i = ($isdigittmp$i>>>0)<(10);
	      if ($isdigit$i) {
	       $19 = $incdec$ptr$i;$conv7$i = $conv$i;$i$06$i = $add$i;
	      } else {
	       break;
	      }
	     }
	     $cmp105 = ($add$i|0)<(0);
	     if ($cmp105) {
	      $retval$0 = -1;
	      label = 362;
	      break L1;
	     } else {
	      $fl$1 = $fl$0586;$incdec$ptr$i190559 = $incdec$ptr$i;$l10n$3 = $l10n$1;$w$1 = $add$i;
	     }
	    } else {
	     $fl$1 = $fl$0586;$incdec$ptr$i190559 = $storemerge166584;$l10n$3 = $l10n$1;$w$1 = 0;
	    }
	   }
	  } while(0);
	  $21 = HEAP8[$incdec$ptr$i190559>>0]|0;
	  $cmp111 = ($21<<24>>24)==(46);
	  L46: do {
	   if ($cmp111) {
	    $arrayidx114 = (($incdec$ptr$i190559) + 1|0);
	    $22 = HEAP8[$arrayidx114>>0]|0;
	    $cmp116 = ($22<<24>>24)==(42);
	    if (!($cmp116)) {
	     $conv3$i182 = $22 << 24 >> 24;
	     $isdigittmp4$i183 = (($conv3$i182) + -48)|0;
	     $isdigit5$i184 = ($isdigittmp4$i183>>>0)<(10);
	     if ($isdigit5$i184) {
	      $33 = $arrayidx114;$conv7$i185 = $conv3$i182;$i$06$i186 = 0;
	     } else {
	      $incdec$ptr$i190558 = $arrayidx114;$p$0 = 0;
	      break;
	     }
	     while(1) {
	      $mul$i187 = ($i$06$i186*10)|0;
	      $sub$i188 = (($conv7$i185) + -48)|0;
	      $add$i189 = (($sub$i188) + ($mul$i187))|0;
	      $incdec$ptr$i190 = (($33) + 1|0);
	      $34 = HEAP8[$incdec$ptr$i190>>0]|0;
	      $conv$i191 = $34 << 24 >> 24;
	      $isdigittmp$i192 = (($conv$i191) + -48)|0;
	      $isdigit$i193 = ($isdigittmp$i192>>>0)<(10);
	      if ($isdigit$i193) {
	       $33 = $incdec$ptr$i190;$conv7$i185 = $conv$i191;$i$06$i186 = $add$i189;
	      } else {
	       $incdec$ptr$i190558 = $incdec$ptr$i190;$p$0 = $add$i189;
	       break L46;
	      }
	     }
	    }
	    $arrayidx119 = (($incdec$ptr$i190559) + 2|0);
	    $23 = HEAP8[$arrayidx119>>0]|0;
	    $conv120 = $23 << 24 >> 24;
	    $isdigittmp167 = (($conv120) + -48)|0;
	    $isdigit168 = ($isdigittmp167>>>0)<(10);
	    if ($isdigit168) {
	     $arrayidx124 = (($incdec$ptr$i190559) + 3|0);
	     $24 = HEAP8[$arrayidx124>>0]|0;
	     $cmp126 = ($24<<24>>24)==(36);
	     if ($cmp126) {
	      $arrayidx132 = (($nl_type) + ($isdigittmp167<<2)|0);
	      HEAP32[$arrayidx132>>2] = 10;
	      $25 = HEAP8[$arrayidx119>>0]|0;
	      $conv134 = $25 << 24 >> 24;
	      $sub135 = (($conv134) + -48)|0;
	      $i137 = (($nl_arg) + ($sub135<<3)|0);
	      $26 = $i137;
	      $27 = $26;
	      $28 = HEAP32[$27>>2]|0;
	      $29 = (($26) + 4)|0;
	      $30 = $29;
	      $31 = HEAP32[$30>>2]|0;
	      $add$ptr139 = (($incdec$ptr$i190559) + 4|0);
	      $incdec$ptr$i190558 = $add$ptr139;$p$0 = $28;
	      break;
	     }
	    }
	    $tobool141 = ($l10n$3|0)==(0);
	    if (!($tobool141)) {
	     $retval$0 = -1;
	     label = 362;
	     break L1;
	    }
	    if ($tobool25) {
	     $arglist_current2 = HEAP32[$ap>>2]|0;
	     $32 = HEAP32[$arglist_current2>>2]|0;
	     $arglist_next3 = (($arglist_current2) + 4|0);
	     HEAP32[$ap>>2] = $arglist_next3;
	     $incdec$ptr$i190558 = $arrayidx119;$p$0 = $32;
	    } else {
	     $incdec$ptr$i190558 = $arrayidx119;$p$0 = 0;
	    }
	   } else {
	    $incdec$ptr$i190558 = $incdec$ptr$i190559;$p$0 = -1;
	   }
	  } while(0);
	  $incdec$ptr$i190557 = $incdec$ptr$i190558;$st$0 = 0;
	  while(1) {
	   $35 = HEAP8[$incdec$ptr$i190557>>0]|0;
	   $conv163 = $35 << 24 >> 24;
	   $sub164 = (($conv163) + -65)|0;
	   $cmp165 = ($sub164>>>0)>(57);
	   if ($cmp165) {
	    $retval$0 = -1;
	    label = 362;
	    break L1;
	   }
	   $incdec$ptr169 = (($incdec$ptr$i190557) + 1|0);
	   $arrayidx173 = ((155928 + (($st$0*58)|0)|0) + ($sub164)|0);
	   $36 = HEAP8[$arrayidx173>>0]|0;
	   $conv174 = $36&255;
	   $sub175 = (($conv174) + -1)|0;
	   $cmp176 = ($sub175>>>0)<(8);
	   if ($cmp176) {
	    $incdec$ptr$i190557 = $incdec$ptr169;$st$0 = $conv174;
	   } else {
	    break;
	   }
	  }
	  $tobool178 = ($36<<24>>24)==(0);
	  if ($tobool178) {
	   $retval$0 = -1;
	   label = 362;
	   break;
	  }
	  $cmp181 = ($36<<24>>24)==(19);
	  $cmp184 = ($argpos$0|0)>(-1);
	  L65: do {
	   if ($cmp181) {
	    if ($cmp184) {
	     $retval$0 = -1;
	     label = 362;
	     break L1;
	    } else {
	     $311 = $309;$arg$sroa$0$sroa$1$4$extract$trunc531556 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
	     label = 63;
	    }
	   } else {
	    if ($cmp184) {
	     $arrayidx192 = (($nl_type) + ($argpos$0<<2)|0);
	     HEAP32[$arrayidx192>>2] = $conv174;
	     $37 = (($nl_arg) + ($argpos$0<<3)|0);
	     $38 = $37;
	     $39 = $38;
	     $40 = HEAP32[$39>>2]|0;
	     $41 = (($38) + 4)|0;
	     $42 = $41;
	     $43 = HEAP32[$42>>2]|0;
	     $44 = $40;
	     $311 = $44;$arg$sroa$0$sroa$1$4$extract$trunc531556 = $43;
	     label = 63;
	     break;
	    }
	    if (!($tobool25)) {
	     $retval$0 = 0;
	     label = 362;
	     break L1;
	    }
	    $cmp$i198 = ($36&255)>(20);
	    if ($cmp$i198) {
	     $81 = $35;$82 = $309;$arg$sroa$0$sroa$1$4$extract$trunc531556568 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
	    } else {
	     do {
	      switch ($conv174|0) {
	      case 11:  {
	       $arglist_current11 = HEAP32[$ap>>2]|0;
	       $50 = HEAP32[$arglist_current11>>2]|0;
	       $arglist_next12 = (($arglist_current11) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next12;
	       $51 = $50;
	       $312 = $51;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 12:  {
	       $arglist_current14 = HEAP32[$ap>>2]|0;
	       $52 = $arglist_current14;
	       $53 = $52;
	       $54 = HEAP32[$53>>2]|0;
	       $55 = (($52) + 4)|0;
	       $56 = $55;
	       $57 = HEAP32[$56>>2]|0;
	       $arglist_next15 = (($arglist_current14) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next15;
	       $58 = $54;
	       $312 = $58;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $57;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 10:  {
	       $arglist_current8 = HEAP32[$ap>>2]|0;
	       $46 = HEAP32[$arglist_current8>>2]|0;
	       $arglist_next9 = (($arglist_current8) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next9;
	       $47 = ($46|0)<(0);
	       $48 = $47 << 31 >> 31;
	       $49 = $46;
	       $312 = $49;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $48;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 15:  {
	       $arglist_current23 = HEAP32[$ap>>2]|0;
	       $66 = HEAP32[$arglist_current23>>2]|0;
	       $arglist_next24 = (($arglist_current23) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next24;
	       $conv22$i225 = $66&255;
	       $67 = $conv22$i225 << 24 >> 24;
	       $68 = ($67|0)<(0);
	       $69 = $68 << 31 >> 31;
	       $sext = $66 << 24;
	       $arg$sroa$0$sroa$0$0$extract$trunc456 = $sext >> 24;
	       $70 = $arg$sroa$0$sroa$0$0$extract$trunc456;
	       $312 = $70;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $69;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 16:  {
	       $arglist_current26 = HEAP32[$ap>>2]|0;
	       $71 = HEAP32[$arglist_current26>>2]|0;
	       $arglist_next27 = (($arglist_current26) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next27;
	       $conv27$mask$i230 = $71 & 255;
	       $72 = $conv27$mask$i230;
	       $312 = $72;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 9:  {
	       $arglist_current5 = HEAP32[$ap>>2]|0;
	       $45 = HEAP32[$arglist_current5>>2]|0;
	       $arglist_next6 = (($arglist_current5) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next6;
	       $312 = $45;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 13:  {
	       $arglist_current17 = HEAP32[$ap>>2]|0;
	       $59 = HEAP32[$arglist_current17>>2]|0;
	       $arglist_next18 = (($arglist_current17) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next18;
	       $conv12$i215 = $59&65535;
	       $60 = $conv12$i215 << 16 >> 16;
	       $61 = ($60|0)<(0);
	       $62 = $61 << 31 >> 31;
	       $sext573 = $59 << 16;
	       $arg$sroa$0$sroa$0$0$extract$trunc458 = $sext573 >> 16;
	       $63 = $arg$sroa$0$sroa$0$0$extract$trunc458;
	       $312 = $63;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $62;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 14:  {
	       $arglist_current20 = HEAP32[$ap>>2]|0;
	       $64 = HEAP32[$arglist_current20>>2]|0;
	       $arglist_next21 = (($arglist_current20) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next21;
	       $conv17$mask$i220 = $64 & 65535;
	       $65 = $conv17$mask$i220;
	       $312 = $65;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = 0;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 17:  {
	       $arglist_current29 = HEAP32[$ap>>2]|0;
	       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$73 = +HEAPF64[tempDoublePtr>>3];
	       $arglist_next30 = (($arglist_current29) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next30;
	       HEAPF64[tempDoublePtr>>3] = $73;$74 = HEAP32[tempDoublePtr>>2]|0;
	       $75 = HEAP32[tempDoublePtr+4>>2]|0;
	       $76 = $74;
	       $312 = $76;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $75;
	       label = 64;
	       break L65;
	       break;
	      }
	      case 18:  {
	       $arglist_current32 = HEAP32[$ap>>2]|0;
	       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$77 = +HEAPF64[tempDoublePtr>>3];
	       $arglist_next33 = (($arglist_current32) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next33;
	       HEAPF64[tempDoublePtr>>3] = $77;$78 = HEAP32[tempDoublePtr>>2]|0;
	       $79 = HEAP32[tempDoublePtr+4>>2]|0;
	       $80 = $78;
	       $311 = $80;$arg$sroa$0$sroa$1$4$extract$trunc531556 = $79;
	       label = 63;
	       break L65;
	       break;
	      }
	      default: {
	       $312 = $309;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $arg$sroa$0$sroa$1$4$extract$trunc531552;
	       label = 64;
	       break L65;
	      }
	      }
	     } while(0);
	    }
	   }
	  } while(0);
	  if ((label|0) == 63) {
	   label = 0;
	   if ($tobool25) {
	    $312 = $311;$arg$sroa$0$sroa$1$4$extract$trunc531556656 = $arg$sroa$0$sroa$1$4$extract$trunc531556;
	    label = 64;
	   } else {
	    $309 = $311;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
	    continue;
	   }
	  }
	  if ((label|0) == 64) {
	   label = 0;
	   $$pre655 = HEAP8[$incdec$ptr$i190557>>0]|0;
	   $81 = $$pre655;$82 = $312;$arg$sroa$0$sroa$1$4$extract$trunc531556568 = $arg$sroa$0$sroa$1$4$extract$trunc531556656;
	  }
	  $conv207 = $81 << 24 >> 24;
	  $tobool208 = ($st$0|0)==(0);
	  if ($tobool208) {
	   $t$0 = $conv207;
	  } else {
	   $and210 = $conv207 & 15;
	   $cmp211 = ($and210|0)==(3);
	   $and214 = $conv207 & -33;
	   $and214$conv207 = $cmp211 ? $and214 : $conv207;
	   $t$0 = $and214$conv207;
	  }
	  $and216 = $fl$1 & 8192;
	  $tobool217 = ($and216|0)==(0);
	  $and219 = $fl$1 & -65537;
	  $fl$1$and219 = $tobool217 ? $fl$1 : $and219;
	  L92: do {
	   switch ($t$0|0) {
	   case 99:  {
	    $153 = $82;
	    $conv332 = $153&255;
	    HEAP8[$add$ptr333>>0] = $conv332;
	    $313 = $82;$a$2 = $add$ptr333;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $and219;$p$5 = 1;$pl$2 = 0;$prefix$2 = 156392;$z$2 = $add$ptr205;
	    break;
	   }
	   case 109:  {
	    $call337 = (___errno_location()|0);
	    $154 = HEAP32[$call337>>2]|0;
	    $call338 = (_strerror(($154|0))|0);
	    $a$1 = $call338;
	    label = 99;
	    break;
	   }
	   case 115:  {
	    $tobool342 = ($82|0)==(0|0);
	    $$175 = $tobool342 ? 156408 : $82;
	    $a$1 = $$175;
	    label = 99;
	    break;
	   }
	   case 67:  {
	    $155 = $82;
	    HEAP32[$wc>>2] = $155;
	    HEAP32[$arrayidx363>>2] = 0;
	    $314 = $wc;$315 = $wc;$p$4658 = -1;
	    label = 104;
	    break;
	   }
	   case 83:  {
	    $cmp370610 = ($p$0|0)==(0);
	    if ($cmp370610) {
	     $316 = $82;$317 = $82;$i$0609 = 0;
	     label = 110;
	    } else {
	     $314 = $82;$315 = $82;$p$4658 = $p$0;
	     label = 104;
	    }
	    break;
	   }
	   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
	    $158 = $82;
	    HEAP32[tempDoublePtr>>2] = $158;HEAP32[tempDoublePtr+4>>2] = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$159 = +HEAPF64[tempDoublePtr>>3];
	    HEAP32[$e2$i>>2] = 0;
	    $160 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)<(0);
	    if ($160) {
	     $sub$i337 = -$159;
	     $pl$0$i = 1;$prefix$0$i = 156416;$y$addr$0$i = $sub$i337;
	    } else {
	     $and$i338 = $fl$1$and219 & 2048;
	     $tobool9$i339 = ($and$i338|0)==(0);
	     if ($tobool9$i339) {
	      $and12$i = $fl$1$and219 & 1;
	      $tobool13$i = ($and12$i|0)==(0);
	      $$$i = $tobool13$i ? ((156416 + 1|0)) : ((156416 + 6|0));
	      $pl$0$i = $and12$i;$prefix$0$i = $$$i;$y$addr$0$i = $159;
	     } else {
	      $pl$0$i = 1;$prefix$0$i = ((156416 + 3|0));$y$addr$0$i = $159;
	     }
	    }
	    HEAPF64[tempDoublePtr>>3] = $y$addr$0$i;$161 = HEAP32[tempDoublePtr>>2]|0;
	    $162 = HEAP32[tempDoublePtr+4>>2]|0;
	    $163 = $162 & 2146435072;
	    $164 = ($163>>>0)<(2146435072);
	    $165 = ($163|0)==(2146435072);
	    $166 = (0)<(0);
	    $167 = $165 & $166;
	    $168 = $164 | $167;
	    if (!($168)) {
	     $and36$i = $t$0 & 32;
	     $tobool37$i = ($and36$i|0)!=(0);
	     $cond$i340 = $tobool37$i ? 156440 : 156448;
	     $cmp38$i = ($y$addr$0$i != $y$addr$0$i) | (0.0 != 0.0);
	     if ($cmp38$i) {
	      $cond43$i = $tobool37$i ? 156456 : 156464;
	      $pl$1$i = 0;$s35$0$i = $cond43$i;
	     } else {
	      $pl$1$i = $pl$0$i;$s35$0$i = $cond$i340;
	     }
	     $add$i341 = (($pl$1$i) + 3)|0;
	     $and$i373$i = $fl$1$and219 & 8192;
	     $tobool$i374$i = ($and$i373$i|0)==(0);
	     $cmp$i375$i = ($add$i341|0)<($w$1|0);
	     $or$cond$i376$i = $tobool$i374$i & $cmp$i375$i;
	     if ($or$cond$i376$i) {
	      $sub$i377$i = (($w$1) - ($add$i341))|0;
	      $cmp1$i378$i = ($sub$i377$i>>>0)>(256);
	      $cond$i379$i = $cmp1$i378$i ? 256 : $sub$i377$i;
	      _memset(($pad$i|0),32,($cond$i379$i|0))|0;
	      $cmp39$i380$i = ($sub$i377$i>>>0)>(255);
	      if ($cmp39$i380$i) {
	       $l$addr$010$i382$i = $sub$i377$i;
	       while(1) {
	        (___fwritex($pad$i,256,$f)|0);
	        $sub5$i384$i = (($l$addr$010$i382$i) + -256)|0;
	        $cmp3$i385$i = ($sub5$i384$i>>>0)>(255);
	        if ($cmp3$i385$i) {
	         $l$addr$010$i382$i = $sub5$i384$i;
	        } else {
	         $l$addr$0$lcssa$i387$i = $sub5$i384$i;
	         break;
	        }
	       }
	      } else {
	       $l$addr$0$lcssa$i387$i = $sub$i377$i;
	      }
	      (___fwritex($pad$i,$l$addr$0$lcssa$i387$i,$f)|0);
	     }
	     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
	     (___fwritex($s35$0$i,3,$f)|0);
	     $xor$i = $fl$1$and219 & 73728;
	     $tobool$i394$i = ($xor$i|0)==(8192);
	     $or$cond$i396$i = $tobool$i394$i & $cmp$i375$i;
	     if ($or$cond$i396$i) {
	      $sub$i397$i = (($w$1) - ($add$i341))|0;
	      $cmp1$i398$i = ($sub$i397$i>>>0)>(256);
	      $cond$i399$i = $cmp1$i398$i ? 256 : $sub$i397$i;
	      _memset(($pad$i|0),32,($cond$i399$i|0))|0;
	      $cmp39$i400$i = ($sub$i397$i>>>0)>(255);
	      if ($cmp39$i400$i) {
	       $l$addr$010$i402$i = $sub$i397$i;
	       while(1) {
	        (___fwritex($pad$i,256,$f)|0);
	        $sub5$i404$i = (($l$addr$010$i402$i) + -256)|0;
	        $cmp3$i405$i = ($sub5$i404$i>>>0)>(255);
	        if ($cmp3$i405$i) {
	         $l$addr$010$i402$i = $sub5$i404$i;
	        } else {
	         $l$addr$0$lcssa$i407$i = $sub5$i404$i;
	         break;
	        }
	       }
	      } else {
	       $l$addr$0$lcssa$i407$i = $sub$i397$i;
	      }
	      (___fwritex($pad$i,$l$addr$0$lcssa$i407$i,$f)|0);
	     }
	     $w$add$i = $cmp$i375$i ? $w$1 : $add$i341;
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$add$i;$l10n$0 = $l10n$3;
	     continue L1;
	    }
	    $call55$i = (+_frexpl($y$addr$0$i,$e2$i));
	    $mul$i343 = $call55$i * 2.0;
	    $tobool56$i = $mul$i343 != 0.0;
	    if ($tobool56$i) {
	     $169 = HEAP32[$e2$i>>2]|0;
	     $dec$i = (($169) + -1)|0;
	     HEAP32[$e2$i>>2] = $dec$i;
	    }
	    $or$i344 = $t$0 | 32;
	    $cmp59$i = ($or$i344|0)==(97);
	    if ($cmp59$i) {
	     $and62$i = $t$0 & 32;
	     $tobool63$i = ($and62$i|0)==(0);
	     $add$ptr65$i = (($prefix$0$i) + 9|0);
	     $prefix$0$add$ptr65$i = $tobool63$i ? $prefix$0$i : $add$ptr65$i;
	     $add67362$i = $pl$0$i | 2;
	     $170 = ($p$0>>>0)>(11);
	     $sub74$i = (12 - ($p$0))|0;
	     $re$0$i = $170 ? 0 : $sub74$i;
	     $tobool76$i = ($re$0$i|0)==(0);
	     do {
	      if ($tobool76$i) {
	       $y$addr$1$i = $mul$i343;
	      } else {
	       $re$1667$i = $re$0$i;$round$0666$i = 8.0;
	       while(1) {
	        $dec78$i = (($re$1667$i) + -1)|0;
	        $mul80$i = $round$0666$i * 16.0;
	        $tobool79$i = ($dec78$i|0)==(0);
	        if ($tobool79$i) {
	         break;
	        } else {
	         $re$1667$i = $dec78$i;$round$0666$i = $mul80$i;
	        }
	       }
	       $171 = HEAP8[$prefix$0$add$ptr65$i>>0]|0;
	       $cmp82$i = ($171<<24>>24)==(45);
	       if ($cmp82$i) {
	        $sub85$i = -$mul$i343;
	        $sub86$i = $sub85$i - $mul80$i;
	        $add87$i = $mul80$i + $sub86$i;
	        $sub88$i = -$add87$i;
	        $y$addr$1$i = $sub88$i;
	        break;
	       } else {
	        $add90$i = $mul$i343 + $mul80$i;
	        $sub91$i = $add90$i - $mul80$i;
	        $y$addr$1$i = $sub91$i;
	        break;
	       }
	      }
	     } while(0);
	     $172 = HEAP32[$e2$i>>2]|0;
	     $cmp94$i = ($172|0)<(0);
	     $sub97$i = (0 - ($172))|0;
	     $cond100$i = $cmp94$i ? $sub97$i : $172;
	     $cmp12$i$i = ($cond100$i|0)<(0);
	     if ($cmp12$i$i) {
	      $173 = ($cond100$i|0)<(0);
	      $174 = $173 << 31 >> 31;
	      $175 = $cond100$i;$176 = $174;$s$addr$014$i$i = $arrayidx$i335;
	      while(1) {
	       $177 = (___uremdi3(($175|0),($176|0),10,0)|0);
	       $178 = tempRet0;
	       $179 = $177 | 48;
	       $180 = $179&255;
	       $incdec$ptr$i$i = (($s$addr$014$i$i) + -1|0);
	       HEAP8[$incdec$ptr$i$i>>0] = $180;
	       $181 = (___udivdi3(($175|0),($176|0),10,0)|0);
	       $182 = tempRet0;
	       $183 = ($176>>>0)>(9);
	       $184 = ($176|0)==(9);
	       $185 = ($175>>>0)>(4294967295);
	       $186 = $184 & $185;
	       $187 = $183 | $186;
	       if ($187) {
	        $175 = $181;$176 = $182;$s$addr$014$i$i = $incdec$ptr$i$i;
	       } else {
	        break;
	       }
	      }
	      $s$addr$0$lcssa$i$i = $incdec$ptr$i$i;$x$addr$0$lcssa$off0$i$i = $181;
	     } else {
	      $s$addr$0$lcssa$i$i = $arrayidx$i335;$x$addr$0$lcssa$off0$i$i = $cond100$i;
	     }
	     $tobool9$i$i = ($x$addr$0$lcssa$off0$i$i|0)==(0);
	     if ($tobool9$i$i) {
	      $s$addr$1$lcssa$i$i = $s$addr$0$lcssa$i$i;
	     } else {
	      $s$addr$110$i$i = $s$addr$0$lcssa$i$i;$y$011$i$i = $x$addr$0$lcssa$off0$i$i;
	      while(1) {
	       $rem4$i$i = (($y$011$i$i>>>0) % 10)&-1;
	       $add57$i$i = $rem4$i$i | 48;
	       $conv6$i$i = $add57$i$i&255;
	       $incdec$ptr7$i$i = (($s$addr$110$i$i) + -1|0);
	       HEAP8[$incdec$ptr7$i$i>>0] = $conv6$i$i;
	       $div9$i$i = (($y$011$i$i>>>0) / 10)&-1;
	       $188 = ($y$011$i$i>>>0)<(10);
	       if ($188) {
	        $s$addr$1$lcssa$i$i = $incdec$ptr7$i$i;
	        break;
	       } else {
	        $s$addr$110$i$i = $incdec$ptr7$i$i;$y$011$i$i = $div9$i$i;
	       }
	      }
	     }
	     $cmp103$i = ($s$addr$1$lcssa$i$i|0)==($arrayidx$i335|0);
	     if ($cmp103$i) {
	      HEAP8[$incdec$ptr106$i>>0] = 48;
	      $estr$0$i = $incdec$ptr106$i;
	     } else {
	      $estr$0$i = $s$addr$1$lcssa$i$i;
	     }
	     $189 = HEAP32[$e2$i>>2]|0;
	     $190 = $189 >> 31;
	     $191 = $190 & 2;
	     $192 = (($191) + 43)|0;
	     $conv111$i = $192&255;
	     $incdec$ptr112$i = (($estr$0$i) + -1|0);
	     HEAP8[$incdec$ptr112$i>>0] = $conv111$i;
	     $add113$i = (($t$0) + 15)|0;
	     $conv114$i = $add113$i&255;
	     $incdec$ptr115$i = (($estr$0$i) + -2|0);
	     HEAP8[$incdec$ptr115$i>>0] = $conv114$i;
	     $cmp131$i = ($p$0|0)>(0);
	     $and134$i = $fl$1$and219 & 8;
	     $tobool135$i = ($and134$i|0)==(0);
	     if ($cmp131$i) {
	      if ($tobool135$i) {
	       $s$0$us$us$i = $buf$i;$y$addr$2$us$us$i = $y$addr$1$i;
	       while(1) {
	        $conv116$us$us$i = (~~(($y$addr$2$us$us$i)));
	        $arrayidx117$us$us$i = (156472 + ($conv116$us$us$i)|0);
	        $193 = HEAP8[$arrayidx117$us$us$i>>0]|0;
	        $conv118363$us$us$i = $193&255;
	        $or120$us$us$i = $conv118363$us$us$i | $and62$i;
	        $conv121$us$us$i = $or120$us$us$i&255;
	        $incdec$ptr122$us$us$i = (($s$0$us$us$i) + 1|0);
	        HEAP8[$s$0$us$us$i>>0] = $conv121$us$us$i;
	        $conv123$us$us$i = (+($conv116$us$us$i|0));
	        $sub124$us$us$i = $y$addr$2$us$us$i - $conv123$us$us$i;
	        $mul125$us$us$i = $sub124$us$us$i * 16.0;
	        $sub$ptr$lhs$cast$us$us$i = $incdec$ptr122$us$us$i;
	        $sub$ptr$sub$us$us$i = (($sub$ptr$lhs$cast$us$us$i) - ($sub$ptr$rhs$cast$i))|0;
	        $cmp127$us$us$i = ($sub$ptr$sub$us$us$i|0)==(1);
	        if ($cmp127$us$us$i) {
	         $incdec$ptr137$us$us$i = (($s$0$us$us$i) + 2|0);
	         HEAP8[$incdec$ptr122$us$us$i>>0] = 46;
	         $s$1$us$us$i = $incdec$ptr137$us$us$i;
	        } else {
	         $s$1$us$us$i = $incdec$ptr122$us$us$i;
	        }
	        $tobool139$us$us$i = $mul125$us$us$i != 0.0;
	        if ($tobool139$us$us$i) {
	         $s$0$us$us$i = $s$1$us$us$i;$y$addr$2$us$us$i = $mul125$us$us$i;
	        } else {
	         $s$1$lcssa$i = $s$1$us$us$i;
	         break;
	        }
	       }
	      } else {
	       $s$0$us$i = $buf$i;$y$addr$2$us$i = $y$addr$1$i;
	       while(1) {
	        $conv116$us$i = (~~(($y$addr$2$us$i)));
	        $arrayidx117$us$i = (156472 + ($conv116$us$i)|0);
	        $194 = HEAP8[$arrayidx117$us$i>>0]|0;
	        $conv118363$us$i = $194&255;
	        $or120$us$i = $conv118363$us$i | $and62$i;
	        $conv121$us$i = $or120$us$i&255;
	        $incdec$ptr122$us$i = (($s$0$us$i) + 1|0);
	        HEAP8[$s$0$us$i>>0] = $conv121$us$i;
	        $conv123$us$i = (+($conv116$us$i|0));
	        $sub124$us$i = $y$addr$2$us$i - $conv123$us$i;
	        $mul125$us$i = $sub124$us$i * 16.0;
	        $sub$ptr$lhs$cast$us$i = $incdec$ptr122$us$i;
	        $sub$ptr$sub$us$i = (($sub$ptr$lhs$cast$us$i) - ($sub$ptr$rhs$cast$i))|0;
	        $cmp127$us$i = ($sub$ptr$sub$us$i|0)==(1);
	        if ($cmp127$us$i) {
	         $incdec$ptr137$us$i = (($s$0$us$i) + 2|0);
	         HEAP8[$incdec$ptr122$us$i>>0] = 46;
	         $s$1$us$i = $incdec$ptr137$us$i;
	        } else {
	         $s$1$us$i = $incdec$ptr122$us$i;
	        }
	        $tobool139$us$i = $mul125$us$i != 0.0;
	        if ($tobool139$us$i) {
	         $s$0$us$i = $s$1$us$i;$y$addr$2$us$i = $mul125$us$i;
	        } else {
	         $s$1$lcssa$i = $s$1$us$i;
	         break;
	        }
	       }
	      }
	     } else {
	      if ($tobool135$i) {
	       $s$0$us644$i = $buf$i;$y$addr$2$us645$i = $y$addr$1$i;
	       while(1) {
	        $conv116$us646$i = (~~(($y$addr$2$us645$i)));
	        $arrayidx117$us647$i = (156472 + ($conv116$us646$i)|0);
	        $195 = HEAP8[$arrayidx117$us647$i>>0]|0;
	        $conv118363$us648$i = $195&255;
	        $or120$us649$i = $conv118363$us648$i | $and62$i;
	        $conv121$us650$i = $or120$us649$i&255;
	        $incdec$ptr122$us651$i = (($s$0$us644$i) + 1|0);
	        HEAP8[$s$0$us644$i>>0] = $conv121$us650$i;
	        $conv123$us652$i = (+($conv116$us646$i|0));
	        $sub124$us653$i = $y$addr$2$us645$i - $conv123$us652$i;
	        $mul125$us654$i = $sub124$us653$i * 16.0;
	        $sub$ptr$lhs$cast$us655$i = $incdec$ptr122$us651$i;
	        $sub$ptr$sub$us656$i = (($sub$ptr$lhs$cast$us655$i) - ($sub$ptr$rhs$cast$i))|0;
	        $cmp127$us657$i = ($sub$ptr$sub$us656$i|0)==(1);
	        $tobool129$us$i = $mul125$us654$i != 0.0;
	        $or$cond$i346 = $cmp127$us657$i & $tobool129$us$i;
	        if ($or$cond$i346) {
	         $incdec$ptr137$us661$i = (($s$0$us644$i) + 2|0);
	         HEAP8[$incdec$ptr122$us651$i>>0] = 46;
	         $s$1$us663$i = $incdec$ptr137$us661$i;
	        } else {
	         $s$1$us663$i = $incdec$ptr122$us651$i;
	        }
	        if ($tobool129$us$i) {
	         $s$0$us644$i = $s$1$us663$i;$y$addr$2$us645$i = $mul125$us654$i;
	        } else {
	         $s$1$lcssa$i = $s$1$us663$i;
	         break;
	        }
	       }
	      } else {
	       $s$0$i = $buf$i;$y$addr$2$i = $y$addr$1$i;
	       while(1) {
	        $conv116$i = (~~(($y$addr$2$i)));
	        $arrayidx117$i = (156472 + ($conv116$i)|0);
	        $196 = HEAP8[$arrayidx117$i>>0]|0;
	        $conv118363$i = $196&255;
	        $or120$i = $conv118363$i | $and62$i;
	        $conv121$i = $or120$i&255;
	        $incdec$ptr122$i = (($s$0$i) + 1|0);
	        HEAP8[$s$0$i>>0] = $conv121$i;
	        $conv123$i = (+($conv116$i|0));
	        $sub124$i = $y$addr$2$i - $conv123$i;
	        $mul125$i = $sub124$i * 16.0;
	        $sub$ptr$lhs$cast$i = $incdec$ptr122$i;
	        $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	        $cmp127$i = ($sub$ptr$sub$i|0)==(1);
	        if ($cmp127$i) {
	         $incdec$ptr137$i = (($s$0$i) + 2|0);
	         HEAP8[$incdec$ptr122$i>>0] = 46;
	         $s$1$i = $incdec$ptr137$i;
	        } else {
	         $s$1$i = $incdec$ptr122$i;
	        }
	        $tobool139$i = $mul125$i != 0.0;
	        if ($tobool139$i) {
	         $s$0$i = $s$1$i;$y$addr$2$i = $mul125$i;
	        } else {
	         $s$1$lcssa$i = $s$1$i;
	         break;
	        }
	       }
	      }
	     }
	     $tobool140$i = ($p$0|0)==(0);
	     $sub$ptr$lhs$cast157$pre$i = $s$1$lcssa$i;
	     do {
	      if ($tobool140$i) {
	       label = 173;
	      } else {
	       $sub146$i = (($sub$ptr$sub145$i) + ($sub$ptr$lhs$cast157$pre$i))|0;
	       $cmp147$i = ($sub146$i|0)<($p$0|0);
	       if (!($cmp147$i)) {
	        label = 173;
	        break;
	       }
	       $sub$ptr$rhs$cast152$i = $incdec$ptr115$i;
	       $add150$i = (($sub$ptr$sub153$i) + ($p$0))|0;
	       $add154$i = (($add150$i) - ($sub$ptr$rhs$cast152$i))|0;
	       $l$0$i = $add154$i;
	      }
	     } while(0);
	     if ((label|0) == 173) {
	      label = 0;
	      $sub$ptr$rhs$cast161$i = $incdec$ptr115$i;
	      $sub$ptr$sub159$i = (($sub$ptr$sub162$i) - ($sub$ptr$rhs$cast161$i))|0;
	      $add163$i = (($sub$ptr$sub159$i) + ($sub$ptr$lhs$cast157$pre$i))|0;
	      $l$0$i = $add163$i;
	     }
	     $add165$i = (($l$0$i) + ($add67362$i))|0;
	     $and$i415$i = $fl$1$and219 & 73728;
	     $tobool$i416$i = ($and$i415$i|0)==(0);
	     $cmp$i417$i = ($add165$i|0)<($w$1|0);
	     $or$cond$i418$i = $tobool$i416$i & $cmp$i417$i;
	     if ($or$cond$i418$i) {
	      $sub$i419$i = (($w$1) - ($add165$i))|0;
	      $cmp1$i420$i = ($sub$i419$i>>>0)>(256);
	      $cond$i421$i = $cmp1$i420$i ? 256 : $sub$i419$i;
	      _memset(($pad$i|0),32,($cond$i421$i|0))|0;
	      $cmp39$i422$i = ($sub$i419$i>>>0)>(255);
	      if ($cmp39$i422$i) {
	       $l$addr$010$i424$i = $sub$i419$i;
	       while(1) {
	        (___fwritex($pad$i,256,$f)|0);
	        $sub5$i426$i = (($l$addr$010$i424$i) + -256)|0;
	        $cmp3$i427$i = ($sub5$i426$i>>>0)>(255);
	        if ($cmp3$i427$i) {
	         $l$addr$010$i424$i = $sub5$i426$i;
	        } else {
	         $l$addr$0$lcssa$i429$i = $sub5$i426$i;
	         break;
	        }
	       }
	      } else {
	       $l$addr$0$lcssa$i429$i = $sub$i419$i;
	      }
	      (___fwritex($pad$i,$l$addr$0$lcssa$i429$i,$f)|0);
	     }
	     (___fwritex($prefix$0$add$ptr65$i,$add67362$i,$f)|0);
	     $tobool$i436$i = ($and$i415$i|0)==(65536);
	     $or$cond$i438$i = $tobool$i436$i & $cmp$i417$i;
	     if ($or$cond$i438$i) {
	      $sub$i439$i = (($w$1) - ($add165$i))|0;
	      $cmp1$i440$i = ($sub$i439$i>>>0)>(256);
	      $cond$i441$i = $cmp1$i440$i ? 256 : $sub$i439$i;
	      _memset(($pad$i|0),48,($cond$i441$i|0))|0;
	      $cmp39$i442$i = ($sub$i439$i>>>0)>(255);
	      if ($cmp39$i442$i) {
	       $l$addr$010$i444$i = $sub$i439$i;
	       while(1) {
	        (___fwritex($pad$i,256,$f)|0);
	        $sub5$i446$i = (($l$addr$010$i444$i) + -256)|0;
	        $cmp3$i447$i = ($sub5$i446$i>>>0)>(255);
	        if ($cmp3$i447$i) {
	         $l$addr$010$i444$i = $sub5$i446$i;
	        } else {
	         $l$addr$0$lcssa$i449$i = $sub5$i446$i;
	         break;
	        }
	       }
	      } else {
	       $l$addr$0$lcssa$i449$i = $sub$i439$i;
	      }
	      (___fwritex($pad$i,$l$addr$0$lcssa$i449$i,$f)|0);
	     }
	     $sub$ptr$sub172$i = (($sub$ptr$lhs$cast157$pre$i) - ($sub$ptr$rhs$cast$i))|0;
	     (___fwritex($buf$i,$sub$ptr$sub172$i,$f)|0);
	     $sub$ptr$rhs$cast174$i = $incdec$ptr115$i;
	     $sub$ptr$sub175$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast174$i))|0;
	     $sub176$i = (($l$0$i) - ($sub$ptr$sub175$i))|0;
	     $sub181$i = (($sub176$i) - ($sub$ptr$sub172$i))|0;
	     $cmp$i455$i = ($sub181$i|0)>(0);
	     if ($cmp$i455$i) {
	      $cmp1$i456$i = ($sub181$i>>>0)>(256);
	      $cond$i457$i = $cmp1$i456$i ? 256 : $sub181$i;
	      _memset(($pad$i|0),48,($cond$i457$i|0))|0;
	      $cmp39$i458$i = ($sub181$i>>>0)>(255);
	      if ($cmp39$i458$i) {
	       $l$addr$010$i460$i = $sub181$i;
	       while(1) {
	        (___fwritex($pad$i,256,$f)|0);
	        $sub5$i462$i = (($l$addr$010$i460$i) + -256)|0;
	        $cmp3$i463$i = ($sub5$i462$i>>>0)>(255);
	        if ($cmp3$i463$i) {
	         $l$addr$010$i460$i = $sub5$i462$i;
	        } else {
	         $l$addr$0$lcssa$i465$i = $sub5$i462$i;
	         break;
	        }
	       }
	      } else {
	       $l$addr$0$lcssa$i465$i = $sub181$i;
	      }
	      (___fwritex($pad$i,$l$addr$0$lcssa$i465$i,$f)|0);
	     }
	     (___fwritex($incdec$ptr115$i,$sub$ptr$sub175$i,$f)|0);
	     $tobool$i472$i = ($and$i415$i|0)==(8192);
	     $or$cond$i474$i = $tobool$i472$i & $cmp$i417$i;
	     if ($or$cond$i474$i) {
	      $sub$i475$i = (($w$1) - ($add165$i))|0;
	      $cmp1$i476$i = ($sub$i475$i>>>0)>(256);
	      $cond$i477$i = $cmp1$i476$i ? 256 : $sub$i475$i;
	      _memset(($pad$i|0),32,($cond$i477$i|0))|0;
	      $cmp39$i478$i = ($sub$i475$i>>>0)>(255);
	      if ($cmp39$i478$i) {
	       $l$addr$010$i480$i = $sub$i475$i;
	       while(1) {
	        (___fwritex($pad$i,256,$f)|0);
	        $sub5$i482$i = (($l$addr$010$i480$i) + -256)|0;
	        $cmp3$i483$i = ($sub5$i482$i>>>0)>(255);
	        if ($cmp3$i483$i) {
	         $l$addr$010$i480$i = $sub5$i482$i;
	        } else {
	         $l$addr$0$lcssa$i485$i = $sub5$i482$i;
	         break;
	        }
	       }
	      } else {
	       $l$addr$0$lcssa$i485$i = $sub$i475$i;
	      }
	      (___fwritex($pad$i,$l$addr$0$lcssa$i485$i,$f)|0);
	     }
	     $w$add165$i = $cmp$i417$i ? $w$1 : $add165$i;
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$add165$i;$l10n$0 = $l10n$3;
	     continue L1;
	    }
	    $cmp196$i = ($p$0|0)<(0);
	    $$p$i = $cmp196$i ? 6 : $p$0;
	    if ($tobool56$i) {
	     $mul202$i = $mul$i343 * 268435456.0;
	     $197 = HEAP32[$e2$i>>2]|0;
	     $sub203$i = (($197) + -28)|0;
	     HEAP32[$e2$i>>2] = $sub203$i;
	     $198 = $sub203$i;$y$addr$3$i = $mul202$i;
	    } else {
	     $$pre$i = HEAP32[$e2$i>>2]|0;
	     $198 = $$pre$i;$y$addr$3$i = $mul$i343;
	    }
	    $cmp205$i = ($198|0)<(0);
	    $arraydecay208$add$ptr213$i = $cmp205$i ? $big$i : $add$ptr213$i;
	    $y$addr$4$i = $y$addr$3$i;$z$0$i = $arraydecay208$add$ptr213$i;
	    while(1) {
	     $conv216$i = (~~(($y$addr$4$i))>>>0);
	     HEAP32[$z$0$i>>2] = $conv216$i;
	     $incdec$ptr217$i = (($z$0$i) + 4|0);
	     $conv218$i = (+($conv216$i>>>0));
	     $sub219$i = $y$addr$4$i - $conv218$i;
	     $mul220$i = $sub219$i * 1.0E+9;
	     $tobool222$i = $mul220$i != 0.0;
	     if ($tobool222$i) {
	      $y$addr$4$i = $mul220$i;$z$0$i = $incdec$ptr217$i;
	     } else {
	      break;
	     }
	    }
	    $$pr$i = HEAP32[$e2$i>>2]|0;
	    $cmp225733$i = ($$pr$i|0)>(0);
	    if ($cmp225733$i) {
	     $199 = $$pr$i;$a$1735$i = $arraydecay208$add$ptr213$i;$z$1734$i = $incdec$ptr217$i;
	     while(1) {
	      $cmp228$i = ($199|0)>(29);
	      $cond233$i = $cmp228$i ? 29 : $199;
	      $d$0728$i = (($z$1734$i) + -4|0);
	      $cmp235729$i = ($d$0728$i>>>0)<($a$1735$i>>>0);
	      do {
	       if ($cmp235729$i) {
	        $a$2$ph$i = $a$1735$i;
	       } else {
	        $carry$0730$i = 0;$d$0731$i = $d$0728$i;
	        while(1) {
	         $200 = HEAP32[$d$0731$i>>2]|0;
	         $201 = (_bitshift64Shl(($200|0),0,($cond233$i|0))|0);
	         $202 = tempRet0;
	         $203 = (_i64Add(($201|0),($202|0),($carry$0730$i|0),0)|0);
	         $204 = tempRet0;
	         $205 = (___uremdi3(($203|0),($204|0),1000000000,0)|0);
	         $206 = tempRet0;
	         HEAP32[$d$0731$i>>2] = $205;
	         $207 = (___udivdi3(($203|0),($204|0),1000000000,0)|0);
	         $208 = tempRet0;
	         $d$0$i = (($d$0731$i) + -4|0);
	         $cmp235$i = ($d$0$i>>>0)<($a$1735$i>>>0);
	         if ($cmp235$i) {
	          break;
	         } else {
	          $carry$0730$i = $207;$d$0731$i = $d$0$i;
	         }
	        }
	        $tobool244$i = ($207|0)==(0);
	        if ($tobool244$i) {
	         $a$2$ph$i = $a$1735$i;
	         break;
	        }
	        $incdec$ptr246$i = (($a$1735$i) + -4|0);
	        HEAP32[$incdec$ptr246$i>>2] = $207;
	        $a$2$ph$i = $incdec$ptr246$i;
	       }
	      } while(0);
	      $z$2$i = $z$1734$i;
	      while(1) {
	       $cmp249$i = ($z$2$i>>>0)>($a$2$ph$i>>>0);
	       if (!($cmp249$i)) {
	        break;
	       }
	       $arrayidx251$i = (($z$2$i) + -4|0);
	       $209 = HEAP32[$arrayidx251$i>>2]|0;
	       $lnot$i = ($209|0)==(0);
	       if ($lnot$i) {
	        $z$2$i = $arrayidx251$i;
	       } else {
	        break;
	       }
	      }
	      $210 = HEAP32[$e2$i>>2]|0;
	      $sub256$i = (($210) - ($cond233$i))|0;
	      HEAP32[$e2$i>>2] = $sub256$i;
	      $cmp225$i = ($sub256$i|0)>(0);
	      if ($cmp225$i) {
	       $199 = $sub256$i;$a$1735$i = $a$2$ph$i;$z$1734$i = $z$2$i;
	      } else {
	       $$pr637$i = $sub256$i;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
	       break;
	      }
	     }
	    } else {
	     $$pr637$i = $$pr$i;$a$1$lcssa$i = $arraydecay208$add$ptr213$i;$z$1$lcssa$i = $incdec$ptr217$i;
	    }
	    $cmp259723$i = ($$pr637$i|0)<(0);
	    L233: do {
	     if ($cmp259723$i) {
	      $add273$i = (($$p$i) + 25)|0;
	      $div274$i = (($add273$i|0) / 9)&-1;
	      $add275$i = (($div274$i) + 1)|0;
	      $cmp299$i = ($or$i344|0)==(102);
	      if ($cmp299$i) {
	       $sub$ptr$rhs$cast306$us$i = $arraydecay208$add$ptr213$i;
	       $add$ptr311$us$i = (($arraydecay208$add$ptr213$i) + ($add275$i<<2)|0);
	       $211 = $$pr637$i;$a$3725$us$i = $a$1$lcssa$i;$z$3724$us$i = $z$1$lcssa$i;
	       while(1) {
	        $sub264$us$i = (0 - ($211))|0;
	        $cmp265$us$i = ($sub264$us$i|0)>(9);
	        $$sub264$us$i = $cmp265$us$i ? 9 : $sub264$us$i;
	        $cmp277719$us$i = ($a$3725$us$i>>>0)<($z$3724$us$i>>>0);
	        do {
	         if ($cmp277719$us$i) {
	          $shl280$us$i = 1 << $$sub264$us$i;
	          $sub281$us$i = (($shl280$us$i) + -1)|0;
	          $shr285$us$i = 1000000000 >>> $$sub264$us$i;
	          $carry262$0721$us$i = 0;$d$1720$us$i = $a$3725$us$i;
	          while(1) {
	           $215 = HEAP32[$d$1720$us$i>>2]|0;
	           $and282$us$i = $215 & $sub281$us$i;
	           $shr283$us$i = $215 >>> $$sub264$us$i;
	           $add284$us$i = (($shr283$us$i) + ($carry262$0721$us$i))|0;
	           HEAP32[$d$1720$us$i>>2] = $add284$us$i;
	           $mul286$us$i = Math_imul($and282$us$i, $shr285$us$i)|0;
	           $incdec$ptr288$us$i = (($d$1720$us$i) + 4|0);
	           $cmp277$us$i = ($incdec$ptr288$us$i>>>0)<($z$3724$us$i>>>0);
	           if ($cmp277$us$i) {
	            $carry262$0721$us$i = $mul286$us$i;$d$1720$us$i = $incdec$ptr288$us$i;
	           } else {
	            break;
	           }
	          }
	          $213 = HEAP32[$a$3725$us$i>>2]|0;
	          $tobool290$us$i = ($213|0)==(0);
	          $incdec$ptr292$us$i = (($a$3725$us$i) + 4|0);
	          $incdec$ptr292$a$3$us$i = $tobool290$us$i ? $incdec$ptr292$us$i : $a$3725$us$i;
	          $tobool294$us$i = ($mul286$us$i|0)==(0);
	          if ($tobool294$us$i) {
	           $incdec$ptr292$a$3$us748$i = $incdec$ptr292$a$3$us$i;$z$4$us$i = $z$3724$us$i;
	           break;
	          }
	          $incdec$ptr296$us$i = (($z$3724$us$i) + 4|0);
	          HEAP32[$z$3724$us$i>>2] = $mul286$us$i;
	          $incdec$ptr292$a$3$us748$i = $incdec$ptr292$a$3$us$i;$z$4$us$i = $incdec$ptr296$us$i;
	         } else {
	          $212 = HEAP32[$a$3725$us$i>>2]|0;
	          $tobool290$us744$i = ($212|0)==(0);
	          $incdec$ptr292$us745$i = (($a$3725$us$i) + 4|0);
	          $incdec$ptr292$a$3$us746$i = $tobool290$us744$i ? $incdec$ptr292$us745$i : $a$3725$us$i;
	          $incdec$ptr292$a$3$us748$i = $incdec$ptr292$a$3$us746$i;$z$4$us$i = $z$3724$us$i;
	         }
	        } while(0);
	        $sub$ptr$lhs$cast305$us$i = $z$4$us$i;
	        $sub$ptr$sub307$us$i = (($sub$ptr$lhs$cast305$us$i) - ($sub$ptr$rhs$cast306$us$i))|0;
	        $sub$ptr$div$us$i = $sub$ptr$sub307$us$i >> 2;
	        $cmp308$us$i = ($sub$ptr$div$us$i|0)>($add275$i|0);
	        $add$ptr311$us$z$4$us$i = $cmp308$us$i ? $add$ptr311$us$i : $z$4$us$i;
	        $214 = HEAP32[$e2$i>>2]|0;
	        $add313$us$i = (($214) + ($$sub264$us$i))|0;
	        HEAP32[$e2$i>>2] = $add313$us$i;
	        $cmp259$us$i = ($add313$us$i|0)<(0);
	        if ($cmp259$us$i) {
	         $211 = $add313$us$i;$a$3725$us$i = $incdec$ptr292$a$3$us748$i;$z$3724$us$i = $add$ptr311$us$z$4$us$i;
	        } else {
	         $a$3$lcssa$i = $incdec$ptr292$a$3$us748$i;$z$3$lcssa$i = $add$ptr311$us$z$4$us$i;
	         break L233;
	        }
	       }
	      } else {
	       $216 = $$pr637$i;$a$3725$i = $a$1$lcssa$i;$z$3724$i = $z$1$lcssa$i;
	      }
	      while(1) {
	       $sub264$i = (0 - ($216))|0;
	       $cmp265$i = ($sub264$i|0)>(9);
	       $$sub264$i = $cmp265$i ? 9 : $sub264$i;
	       $cmp277719$i = ($a$3725$i>>>0)<($z$3724$i>>>0);
	       do {
	        if ($cmp277719$i) {
	         $shl280$i = 1 << $$sub264$i;
	         $sub281$i = (($shl280$i) + -1)|0;
	         $shr285$i = 1000000000 >>> $$sub264$i;
	         $carry262$0721$i = 0;$d$1720$i = $a$3725$i;
	         while(1) {
	          $218 = HEAP32[$d$1720$i>>2]|0;
	          $and282$i = $218 & $sub281$i;
	          $shr283$i = $218 >>> $$sub264$i;
	          $add284$i = (($shr283$i) + ($carry262$0721$i))|0;
	          HEAP32[$d$1720$i>>2] = $add284$i;
	          $mul286$i = Math_imul($and282$i, $shr285$i)|0;
	          $incdec$ptr288$i = (($d$1720$i) + 4|0);
	          $cmp277$i = ($incdec$ptr288$i>>>0)<($z$3724$i>>>0);
	          if ($cmp277$i) {
	           $carry262$0721$i = $mul286$i;$d$1720$i = $incdec$ptr288$i;
	          } else {
	           break;
	          }
	         }
	         $219 = HEAP32[$a$3725$i>>2]|0;
	         $tobool290$i = ($219|0)==(0);
	         $incdec$ptr292$i = (($a$3725$i) + 4|0);
	         $incdec$ptr292$a$3$i = $tobool290$i ? $incdec$ptr292$i : $a$3725$i;
	         $tobool294$i = ($mul286$i|0)==(0);
	         if ($tobool294$i) {
	          $incdec$ptr292$a$3753$i = $incdec$ptr292$a$3$i;$z$4$i = $z$3724$i;
	          break;
	         }
	         $incdec$ptr296$i = (($z$3724$i) + 4|0);
	         HEAP32[$z$3724$i>>2] = $mul286$i;
	         $incdec$ptr292$a$3753$i = $incdec$ptr292$a$3$i;$z$4$i = $incdec$ptr296$i;
	        } else {
	         $217 = HEAP32[$a$3725$i>>2]|0;
	         $tobool290749$i = ($217|0)==(0);
	         $incdec$ptr292750$i = (($a$3725$i) + 4|0);
	         $incdec$ptr292$a$3751$i = $tobool290749$i ? $incdec$ptr292750$i : $a$3725$i;
	         $incdec$ptr292$a$3753$i = $incdec$ptr292$a$3751$i;$z$4$i = $z$3724$i;
	        }
	       } while(0);
	       $sub$ptr$lhs$cast305$i = $z$4$i;
	       $sub$ptr$rhs$cast306$i = $incdec$ptr292$a$3753$i;
	       $sub$ptr$sub307$i = (($sub$ptr$lhs$cast305$i) - ($sub$ptr$rhs$cast306$i))|0;
	       $sub$ptr$div$i = $sub$ptr$sub307$i >> 2;
	       $cmp308$i = ($sub$ptr$div$i|0)>($add275$i|0);
	       if ($cmp308$i) {
	        $add$ptr311$i = (($incdec$ptr292$a$3753$i) + ($add275$i<<2)|0);
	        $z$5$i = $add$ptr311$i;
	       } else {
	        $z$5$i = $z$4$i;
	       }
	       $220 = HEAP32[$e2$i>>2]|0;
	       $add313$i = (($220) + ($$sub264$i))|0;
	       HEAP32[$e2$i>>2] = $add313$i;
	       $cmp259$i = ($add313$i|0)<(0);
	       if ($cmp259$i) {
	        $216 = $add313$i;$a$3725$i = $incdec$ptr292$a$3753$i;$z$3724$i = $z$5$i;
	       } else {
	        $a$3$lcssa$i = $incdec$ptr292$a$3753$i;$z$3$lcssa$i = $z$5$i;
	        break;
	       }
	      }
	     } else {
	      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
	     }
	    } while(0);
	    $cmp315$i = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
	    $sub$ptr$lhs$cast318$i = $arraydecay208$add$ptr213$i;
	    do {
	     if ($cmp315$i) {
	      $sub$ptr$rhs$cast319$i = $a$3$lcssa$i;
	      $sub$ptr$sub320$i = (($sub$ptr$lhs$cast318$i) - ($sub$ptr$rhs$cast319$i))|0;
	      $sub$ptr$div321$i = $sub$ptr$sub320$i >> 2;
	      $mul322$i = ($sub$ptr$div321$i*9)|0;
	      $221 = HEAP32[$a$3$lcssa$i>>2]|0;
	      $cmp324715$i = ($221>>>0)<(10);
	      if ($cmp324715$i) {
	       $e$1$i = $mul322$i;
	       break;
	      } else {
	       $e$0717$i = $mul322$i;$i$0716$i = 10;
	      }
	      while(1) {
	       $mul328$i = ($i$0716$i*10)|0;
	       $inc$i = (($e$0717$i) + 1)|0;
	       $cmp324$i = ($221>>>0)<($mul328$i>>>0);
	       if ($cmp324$i) {
	        $e$1$i = $inc$i;
	        break;
	       } else {
	        $e$0717$i = $inc$i;$i$0716$i = $mul328$i;
	       }
	      }
	     } else {
	      $e$1$i = 0;
	     }
	    } while(0);
	    $cmp333$i = ($or$i344|0)!=(102);
	    $mul335$i = $cmp333$i ? $e$1$i : 0;
	    $sub336$i = (($$p$i) - ($mul335$i))|0;
	    $cmp338$i = ($or$i344|0)==(103);
	    $tobool341$i = ($$p$i|0)!=(0);
	    $tobool341$$i = $cmp338$i & $tobool341$i;
	    $land$ext$neg$i = $tobool341$$i << 31 >> 31;
	    $sub343$i = (($sub336$i) + ($land$ext$neg$i))|0;
	    $sub$ptr$lhs$cast344$i = $z$3$lcssa$i;
	    $sub$ptr$sub346$i = (($sub$ptr$lhs$cast344$i) - ($sub$ptr$lhs$cast318$i))|0;
	    $sub$ptr$div347$i = $sub$ptr$sub346$i >> 2;
	    $222 = ($sub$ptr$div347$i*9)|0;
	    $mul349$i = (($222) + -9)|0;
	    $cmp350$i = ($sub343$i|0)<($mul349$i|0);
	    if ($cmp350$i) {
	     $add355$i = (($sub343$i) + 9216)|0;
	     $div356$i = (($add355$i|0) / 9)&-1;
	     $add$ptr354$sum$i = (($div356$i) + -1023)|0;
	     $add$ptr358$i = (($arraydecay208$add$ptr213$i) + ($add$ptr354$sum$i<<2)|0);
	     $rem360$i = (($add355$i|0) % 9)&-1;
	     $j$0710$i = (($rem360$i) + 1)|0;
	     $cmp363711$i = ($j$0710$i|0)<(9);
	     if ($cmp363711$i) {
	      $i$1712$i = 10;$j$0713$i = $j$0710$i;
	      while(1) {
	       $mul367$i = ($i$1712$i*10)|0;
	       $j$0$i = (($j$0713$i) + 1)|0;
	       $exitcond$i = ($j$0$i|0)==(9);
	       if ($exitcond$i) {
	        $i$1$lcssa$i = $mul367$i;
	        break;
	       } else {
	        $i$1712$i = $mul367$i;$j$0713$i = $j$0$i;
	       }
	      }
	     } else {
	      $i$1$lcssa$i = 10;
	     }
	     $223 = HEAP32[$add$ptr358$i>>2]|0;
	     $rem370$i = (($223>>>0) % ($i$1$lcssa$i>>>0))&-1;
	     $tobool371$i = ($rem370$i|0)==(0);
	     if ($tobool371$i) {
	      $add$ptr358$sum$i = (($div356$i) + -1022)|0;
	      $add$ptr373$i = (($arraydecay208$add$ptr213$i) + ($add$ptr358$sum$i<<2)|0);
	      $cmp374$i = ($add$ptr373$i|0)==($z$3$lcssa$i|0);
	      if ($cmp374$i) {
	       $a$7$i = $a$3$lcssa$i;$d$3$i = $add$ptr358$i;$e$3$i = $e$1$i;
	      } else {
	       label = 233;
	      }
	     } else {
	      label = 233;
	     }
	     do {
	      if ((label|0) == 233) {
	       label = 0;
	       $div378$i = (($223>>>0) / ($i$1$lcssa$i>>>0))&-1;
	       $and379$i = $div378$i & 1;
	       $tobool380$i = ($and379$i|0)==(0);
	       $$365$i = $tobool380$i ? 9007199254740992.0 : 9007199254740994.0;
	       $div384$i = (($i$1$lcssa$i|0) / 2)&-1;
	       $cmp385$i = ($rem370$i>>>0)<($div384$i>>>0);
	       do {
	        if ($cmp385$i) {
	         $small$0$i = 0.5;
	        } else {
	         $cmp390$i = ($rem370$i|0)==($div384$i|0);
	         if ($cmp390$i) {
	          $add$ptr358$sum361$i = (($div356$i) + -1022)|0;
	          $add$ptr393$i = (($arraydecay208$add$ptr213$i) + ($add$ptr358$sum361$i<<2)|0);
	          $cmp394$i = ($add$ptr393$i|0)==($z$3$lcssa$i|0);
	          if ($cmp394$i) {
	           $small$0$i = 1.0;
	           break;
	          }
	         }
	         $small$0$i = 1.5;
	        }
	       } while(0);
	       $tobool400$i = ($pl$0$i|0)==(0);
	       do {
	        if ($tobool400$i) {
	         $round377$1$i = $$365$i;$small$1$i = $small$0$i;
	        } else {
	         $224 = HEAP8[$prefix$0$i>>0]|0;
	         $cmp403$i = ($224<<24>>24)==(45);
	         if (!($cmp403$i)) {
	          $round377$1$i = $$365$i;$small$1$i = $small$0$i;
	          break;
	         }
	         $mul406$i = $$365$i * -1.0;
	         $mul407$i = $small$0$i * -1.0;
	         $round377$1$i = $mul406$i;$small$1$i = $mul407$i;
	        }
	       } while(0);
	       $sub409$i = (($223) - ($rem370$i))|0;
	       HEAP32[$add$ptr358$i>>2] = $sub409$i;
	       $add410$i = $round377$1$i + $small$1$i;
	       $cmp411$i = $add410$i != $round377$1$i;
	       if (!($cmp411$i)) {
	        $a$7$i = $a$3$lcssa$i;$d$3$i = $add$ptr358$i;$e$3$i = $e$1$i;
	        break;
	       }
	       $add414$i = (($sub409$i) + ($i$1$lcssa$i))|0;
	       HEAP32[$add$ptr358$i>>2] = $add414$i;
	       $cmp416705$i = ($add414$i>>>0)>(999999999);
	       if ($cmp416705$i) {
	        $a$5707$i = $a$3$lcssa$i;$d$2706$i = $add$ptr358$i;
	        while(1) {
	         $incdec$ptr419$i = (($d$2706$i) + -4|0);
	         HEAP32[$d$2706$i>>2] = 0;
	         $cmp420$i = ($incdec$ptr419$i>>>0)<($a$5707$i>>>0);
	         if ($cmp420$i) {
	          $incdec$ptr423$i = (($a$5707$i) + -4|0);
	          HEAP32[$incdec$ptr423$i>>2] = 0;
	          $a$6$i = $incdec$ptr423$i;
	         } else {
	          $a$6$i = $a$5707$i;
	         }
	         $225 = HEAP32[$incdec$ptr419$i>>2]|0;
	         $inc425$i = (($225) + 1)|0;
	         HEAP32[$incdec$ptr419$i>>2] = $inc425$i;
	         $cmp416$i = ($inc425$i>>>0)>(999999999);
	         if ($cmp416$i) {
	          $a$5707$i = $a$6$i;$d$2706$i = $incdec$ptr419$i;
	         } else {
	          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $incdec$ptr419$i;
	          break;
	         }
	        }
	       } else {
	        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $add$ptr358$i;
	       }
	       $sub$ptr$rhs$cast428$i = $a$5$lcssa$i;
	       $sub$ptr$sub429$i = (($sub$ptr$lhs$cast318$i) - ($sub$ptr$rhs$cast428$i))|0;
	       $sub$ptr$div430$i = $sub$ptr$sub429$i >> 2;
	       $mul431$i = ($sub$ptr$div430$i*9)|0;
	       $226 = HEAP32[$a$5$lcssa$i>>2]|0;
	       $cmp433701$i = ($226>>>0)<(10);
	       if ($cmp433701$i) {
	        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $mul431$i;
	        break;
	       } else {
	        $e$2703$i = $mul431$i;$i$2702$i = 10;
	       }
	       while(1) {
	        $mul437$i = ($i$2702$i*10)|0;
	        $inc438$i = (($e$2703$i) + 1)|0;
	        $cmp433$i = ($226>>>0)<($mul437$i>>>0);
	        if ($cmp433$i) {
	         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $inc438$i;
	         break;
	        } else {
	         $e$2703$i = $inc438$i;$i$2702$i = $mul437$i;
	        }
	       }
	      }
	     } while(0);
	     $add$ptr442$i = (($d$3$i) + 4|0);
	     $cmp443$i = ($z$3$lcssa$i>>>0)>($add$ptr442$i>>>0);
	     $add$ptr442$z$3$i = $cmp443$i ? $add$ptr442$i : $z$3$lcssa$i;
	     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $add$ptr442$z$3$i;
	    } else {
	     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
	    }
	    $sub626$i = (0 - ($e$4$ph$i))|0;
	    $z$6$i = $z$6$ph$i;
	    while(1) {
	     $cmp450$i = ($z$6$i>>>0)>($a$8$ph$i>>>0);
	     if (!($cmp450$i)) {
	      $cmp450$lcssa$i = 0;
	      break;
	     }
	     $arrayidx453$i = (($z$6$i) + -4|0);
	     $227 = HEAP32[$arrayidx453$i>>2]|0;
	     $lnot455$i = ($227|0)==(0);
	     if ($lnot455$i) {
	      $z$6$i = $arrayidx453$i;
	     } else {
	      $cmp450$lcssa$i = 1;
	      break;
	     }
	    }
	    do {
	     if ($cmp338$i) {
	      $tobool466$i = ($$p$i|0)==(0);
	      $inc468$i = $tobool466$i&1;
	      $inc468$$p$i = (($inc468$i) + ($$p$i))|0;
	      $cmp470$i = ($inc468$$p$i|0)>($e$4$ph$i|0);
	      $cmp473$i = ($e$4$ph$i|0)>(-5);
	      $or$cond1$i = $cmp470$i & $cmp473$i;
	      if ($or$cond1$i) {
	       $dec476$i = (($t$0) + -1)|0;
	       $add477$neg$i = (($inc468$$p$i) + -1)|0;
	       $sub478$i = (($add477$neg$i) - ($e$4$ph$i))|0;
	       $p$addr$2$i = $sub478$i;$t$addr$0$i = $dec476$i;
	      } else {
	       $sub480$i = (($t$0) + -2)|0;
	       $dec481$i = (($inc468$$p$i) + -1)|0;
	       $p$addr$2$i = $dec481$i;$t$addr$0$i = $sub480$i;
	      }
	      $and483$i = $fl$1$and219 & 8;
	      $tobool484$i = ($and483$i|0)==(0);
	      if (!($tobool484$i)) {
	       $p$addr$3$i = $p$addr$2$i;$t$addr$1$i = $t$addr$0$i;
	       break;
	      }
	      do {
	       if ($cmp450$lcssa$i) {
	        $arrayidx489$i = (($z$6$i) + -4|0);
	        $228 = HEAP32[$arrayidx489$i>>2]|0;
	        $tobool490$i = ($228|0)==(0);
	        if ($tobool490$i) {
	         $j$2$i = 9;
	         break;
	        }
	        $rem494696$i = (($228>>>0) % 10)&-1;
	        $cmp495697$i = ($rem494696$i|0)==(0);
	        if ($cmp495697$i) {
	         $i$3698$i = 10;$j$1699$i = 0;
	        } else {
	         $j$2$i = 0;
	         break;
	        }
	        while(1) {
	         $mul499$i = ($i$3698$i*10)|0;
	         $inc500$i = (($j$1699$i) + 1)|0;
	         $rem494$i = (($228>>>0) % ($mul499$i>>>0))&-1;
	         $cmp495$i = ($rem494$i|0)==(0);
	         if ($cmp495$i) {
	          $i$3698$i = $mul499$i;$j$1699$i = $inc500$i;
	         } else {
	          $j$2$i = $inc500$i;
	          break;
	         }
	        }
	       } else {
	        $j$2$i = 9;
	       }
	      } while(0);
	      $or504$i = $t$addr$0$i | 32;
	      $cmp505$i = ($or504$i|0)==(102);
	      $sub$ptr$lhs$cast508$i = $z$6$i;
	      $sub$ptr$sub510$i = (($sub$ptr$lhs$cast508$i) - ($sub$ptr$lhs$cast318$i))|0;
	      $sub$ptr$div511$i = $sub$ptr$sub510$i >> 2;
	      $229 = ($sub$ptr$div511$i*9)|0;
	      $mul513$i = (($229) + -9)|0;
	      if ($cmp505$i) {
	       $sub514$i = (($mul513$i) - ($j$2$i))|0;
	       $cmp515$i = ($sub514$i|0)<(0);
	       $$sub514$i = $cmp515$i ? 0 : $sub514$i;
	       $cmp528$i = ($p$addr$2$i|0)<($$sub514$i|0);
	       $p$addr$2$$sub514$i = $cmp528$i ? $p$addr$2$i : $$sub514$i;
	       $p$addr$3$i = $p$addr$2$$sub514$i;$t$addr$1$i = $t$addr$0$i;
	       break;
	      } else {
	       $add561$i = (($mul513$i) + ($e$4$ph$i))|0;
	       $sub562$i = (($add561$i) - ($j$2$i))|0;
	       $cmp563$i = ($sub562$i|0)<(0);
	       $$sub562$i = $cmp563$i ? 0 : $sub562$i;
	       $cmp577$i = ($p$addr$2$i|0)<($$sub562$i|0);
	       $p$addr$2$$sub562$i = $cmp577$i ? $p$addr$2$i : $$sub562$i;
	       $p$addr$3$i = $p$addr$2$$sub562$i;$t$addr$1$i = $t$addr$0$i;
	       break;
	      }
	     } else {
	      $p$addr$3$i = $$p$i;$t$addr$1$i = $t$0;
	     }
	    } while(0);
	    $tobool609$i = ($p$addr$3$i|0)!=(0);
	    if ($tobool609$i) {
	     $230 = 1;
	    } else {
	     $and610$i = $fl$1$and219 & 8;
	     $tobool611$i = ($and610$i|0)!=(0);
	     $230 = $tobool611$i;
	    }
	    $lor$ext$i = $230&1;
	    $or613$i = $t$addr$1$i | 32;
	    $cmp614$i = ($or613$i|0)==(102);
	    if ($cmp614$i) {
	     $cmp617$i = ($e$4$ph$i|0)>(0);
	     $add620$i = $cmp617$i ? $e$4$ph$i : 0;
	     $estr$2$i = 0;$sub$ptr$sub650$pn$i = $add620$i;
	    } else {
	     $cmp623$i = ($e$4$ph$i|0)<(0);
	     $cond629$i = $cmp623$i ? $sub626$i : $e$4$ph$i;
	     $cmp12$i489$i = ($cond629$i|0)<(0);
	     if ($cmp12$i489$i) {
	      $231 = ($cond629$i|0)<(0);
	      $232 = $231 << 31 >> 31;
	      $233 = $cond629$i;$234 = $232;$s$addr$014$i491$i = $arrayidx$i335;
	      while(1) {
	       $235 = (___uremdi3(($233|0),($234|0),10,0)|0);
	       $236 = tempRet0;
	       $237 = $235 | 48;
	       $238 = $237&255;
	       $incdec$ptr$i496$i = (($s$addr$014$i491$i) + -1|0);
	       HEAP8[$incdec$ptr$i496$i>>0] = $238;
	       $239 = (___udivdi3(($233|0),($234|0),10,0)|0);
	       $240 = tempRet0;
	       $241 = ($234>>>0)>(9);
	       $242 = ($234|0)==(9);
	       $243 = ($233>>>0)>(4294967295);
	       $244 = $242 & $243;
	       $245 = $241 | $244;
	       if ($245) {
	        $233 = $239;$234 = $240;$s$addr$014$i491$i = $incdec$ptr$i496$i;
	       } else {
	        break;
	       }
	      }
	      $s$addr$0$lcssa$i502$i = $incdec$ptr$i496$i;$x$addr$0$lcssa$off0$i503$i = $239;
	     } else {
	      $s$addr$0$lcssa$i502$i = $arrayidx$i335;$x$addr$0$lcssa$off0$i503$i = $cond629$i;
	     }
	     $tobool9$i504$i = ($x$addr$0$lcssa$off0$i503$i|0)==(0);
	     if ($tobool9$i504$i) {
	      $estr$1$ph$i = $s$addr$0$lcssa$i502$i;
	     } else {
	      $s$addr$110$i507$i = $s$addr$0$lcssa$i502$i;$y$011$i506$i = $x$addr$0$lcssa$off0$i503$i;
	      while(1) {
	       $rem4$i508$i = (($y$011$i506$i>>>0) % 10)&-1;
	       $add57$i509$i = $rem4$i508$i | 48;
	       $conv6$i510$i = $add57$i509$i&255;
	       $incdec$ptr7$i511$i = (($s$addr$110$i507$i) + -1|0);
	       HEAP8[$incdec$ptr7$i511$i>>0] = $conv6$i510$i;
	       $div9$i512$i = (($y$011$i506$i>>>0) / 10)&-1;
	       $246 = ($y$011$i506$i>>>0)<(10);
	       if ($246) {
	        $estr$1$ph$i = $incdec$ptr7$i511$i;
	        break;
	       } else {
	        $s$addr$110$i507$i = $incdec$ptr7$i511$i;$y$011$i506$i = $div9$i512$i;
	       }
	      }
	     }
	     $sub$ptr$rhs$cast634690$i = $estr$1$ph$i;
	     $sub$ptr$sub635691$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast634690$i))|0;
	     $cmp636692$i = ($sub$ptr$sub635691$i|0)<(2);
	     if ($cmp636692$i) {
	      $estr$1693$i = $estr$1$ph$i;
	      while(1) {
	       $incdec$ptr639$i = (($estr$1693$i) + -1|0);
	       HEAP8[$incdec$ptr639$i>>0] = 48;
	       $sub$ptr$rhs$cast634$i = $incdec$ptr639$i;
	       $sub$ptr$sub635$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast634$i))|0;
	       $cmp636$i = ($sub$ptr$sub635$i|0)<(2);
	       if ($cmp636$i) {
	        $estr$1693$i = $incdec$ptr639$i;
	       } else {
	        $estr$1$lcssa$i = $incdec$ptr639$i;
	        break;
	       }
	      }
	     } else {
	      $estr$1$lcssa$i = $estr$1$ph$i;
	     }
	     $247 = $e$4$ph$i >> 31;
	     $248 = $247 & 2;
	     $249 = (($248) + 43)|0;
	     $conv644$i = $249&255;
	     $incdec$ptr645$i = (($estr$1$lcssa$i) + -1|0);
	     HEAP8[$incdec$ptr645$i>>0] = $conv644$i;
	     $conv646$i = $t$addr$1$i&255;
	     $incdec$ptr647$i = (($estr$1$lcssa$i) + -2|0);
	     HEAP8[$incdec$ptr647$i>>0] = $conv646$i;
	     $sub$ptr$rhs$cast649$i = $incdec$ptr647$i;
	     $sub$ptr$sub650$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast649$i))|0;
	     $estr$2$i = $incdec$ptr647$i;$sub$ptr$sub650$pn$i = $sub$ptr$sub650$i;
	    }
	    $add608$i = (($pl$0$i) + 1)|0;
	    $add612$i = (($add608$i) + ($p$addr$3$i))|0;
	    $l$1$i = (($add612$i) + ($lor$ext$i))|0;
	    $add653$i = (($l$1$i) + ($sub$ptr$sub650$pn$i))|0;
	    $and$i517$i = $fl$1$and219 & 73728;
	    $tobool$i518$i = ($and$i517$i|0)==(0);
	    $cmp$i519$i = ($add653$i|0)<($w$1|0);
	    $or$cond$i520$i = $tobool$i518$i & $cmp$i519$i;
	    if ($or$cond$i520$i) {
	     $sub$i521$i = (($w$1) - ($add653$i))|0;
	     $cmp1$i522$i = ($sub$i521$i>>>0)>(256);
	     $cond$i523$i = $cmp1$i522$i ? 256 : $sub$i521$i;
	     _memset(($pad$i|0),32,($cond$i523$i|0))|0;
	     $cmp39$i524$i = ($sub$i521$i>>>0)>(255);
	     if ($cmp39$i524$i) {
	      $l$addr$010$i526$i = $sub$i521$i;
	      while(1) {
	       (___fwritex($pad$i,256,$f)|0);
	       $sub5$i528$i = (($l$addr$010$i526$i) + -256)|0;
	       $cmp3$i529$i = ($sub5$i528$i>>>0)>(255);
	       if ($cmp3$i529$i) {
	        $l$addr$010$i526$i = $sub5$i528$i;
	       } else {
	        $l$addr$0$lcssa$i531$i = $sub5$i528$i;
	        break;
	       }
	      }
	     } else {
	      $l$addr$0$lcssa$i531$i = $sub$i521$i;
	     }
	     (___fwritex($pad$i,$l$addr$0$lcssa$i531$i,$f)|0);
	    }
	    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
	    $tobool$i538$i = ($and$i517$i|0)==(65536);
	    $or$cond$i540$i = $tobool$i538$i & $cmp$i519$i;
	    if ($or$cond$i540$i) {
	     $sub$i541$i = (($w$1) - ($add653$i))|0;
	     $cmp1$i542$i = ($sub$i541$i>>>0)>(256);
	     $cond$i543$i = $cmp1$i542$i ? 256 : $sub$i541$i;
	     _memset(($pad$i|0),48,($cond$i543$i|0))|0;
	     $cmp39$i544$i = ($sub$i541$i>>>0)>(255);
	     if ($cmp39$i544$i) {
	      $l$addr$010$i546$i = $sub$i541$i;
	      while(1) {
	       (___fwritex($pad$i,256,$f)|0);
	       $sub5$i548$i = (($l$addr$010$i546$i) + -256)|0;
	       $cmp3$i549$i = ($sub5$i548$i>>>0)>(255);
	       if ($cmp3$i549$i) {
	        $l$addr$010$i546$i = $sub5$i548$i;
	       } else {
	        $l$addr$0$lcssa$i551$i = $sub5$i548$i;
	        break;
	       }
	      }
	     } else {
	      $l$addr$0$lcssa$i551$i = $sub$i541$i;
	     }
	     (___fwritex($pad$i,$l$addr$0$lcssa$i551$i,$f)|0);
	    }
	    do {
	     if ($cmp614$i) {
	      $cmp660$i = ($a$8$ph$i>>>0)>($arraydecay208$add$ptr213$i>>>0);
	      $r$0$a$8$i = $cmp660$i ? $arraydecay208$add$ptr213$i : $a$8$ph$i;
	      $d$4680$i = $r$0$a$8$i;
	      while(1) {
	       $250 = HEAP32[$d$4680$i>>2]|0;
	       $tobool9$i558$i = ($250|0)==(0);
	       if ($tobool9$i558$i) {
	        $s$addr$1$lcssa$i568$i = $add$ptr671$i;
	       } else {
	        $s$addr$110$i561$i = $add$ptr671$i;$y$011$i560$i = $250;
	        while(1) {
	         $rem4$i562$i = (($y$011$i560$i>>>0) % 10)&-1;
	         $add57$i563$i = $rem4$i562$i | 48;
	         $conv6$i564$i = $add57$i563$i&255;
	         $incdec$ptr7$i565$i = (($s$addr$110$i561$i) + -1|0);
	         HEAP8[$incdec$ptr7$i565$i>>0] = $conv6$i564$i;
	         $div9$i566$i = (($y$011$i560$i>>>0) / 10)&-1;
	         $251 = ($y$011$i560$i>>>0)<(10);
	         if ($251) {
	          $s$addr$1$lcssa$i568$i = $incdec$ptr7$i565$i;
	          break;
	         } else {
	          $s$addr$110$i561$i = $incdec$ptr7$i565$i;$y$011$i560$i = $div9$i566$i;
	         }
	        }
	       }
	       $cmp673$i = ($d$4680$i|0)==($r$0$a$8$i|0);
	       do {
	        if ($cmp673$i) {
	         $cmp686$i = ($s$addr$1$lcssa$i568$i|0)==($add$ptr671$i|0);
	         if (!($cmp686$i)) {
	          $s668$1$i = $s$addr$1$lcssa$i568$i;
	          break;
	         }
	         HEAP8[$incdec$ptr689$i>>0] = 48;
	         $s668$1$i = $incdec$ptr689$i;
	        } else {
	         $cmp678677$i = ($s$addr$1$lcssa$i568$i>>>0)>($buf$i>>>0);
	         if ($cmp678677$i) {
	          $s668$0678$i = $s$addr$1$lcssa$i568$i;
	         } else {
	          $s668$1$i = $s$addr$1$lcssa$i568$i;
	          break;
	         }
	         while(1) {
	          $incdec$ptr681$i = (($s668$0678$i) + -1|0);
	          HEAP8[$incdec$ptr681$i>>0] = 48;
	          $cmp678$i = ($incdec$ptr681$i>>>0)>($buf$i>>>0);
	          if ($cmp678$i) {
	           $s668$0678$i = $incdec$ptr681$i;
	          } else {
	           $s668$1$i = $incdec$ptr681$i;
	           break;
	          }
	         }
	        }
	       } while(0);
	       $sub$ptr$rhs$cast695$i = $s668$1$i;
	       $sub$ptr$sub696$i = (($sub$ptr$lhs$cast694$i) - ($sub$ptr$rhs$cast695$i))|0;
	       (___fwritex($s668$1$i,$sub$ptr$sub696$i,$f)|0);
	       $incdec$ptr698$i = (($d$4680$i) + 4|0);
	       $cmp665$i = ($incdec$ptr698$i>>>0)>($arraydecay208$add$ptr213$i>>>0);
	       if ($cmp665$i) {
	        break;
	       } else {
	        $d$4680$i = $incdec$ptr698$i;
	       }
	      }
	      if (!($tobool609$i)) {
	       $and702$i = $fl$1$and219 & 8;
	       $tobool703$i = ($and702$i|0)==(0);
	       if ($tobool703$i) {
	        break;
	       }
	      }
	      (___fwritex(156488,1,$f)|0);
	      $cmp707671$i = ($incdec$ptr698$i>>>0)<($z$6$i>>>0);
	      $cmp710672$i = ($p$addr$3$i|0)>(0);
	      $or$cond368673$i = $cmp707671$i & $cmp710672$i;
	      if ($or$cond368673$i) {
	       $d$5674$i = $incdec$ptr698$i;$p$addr$4675$i = $p$addr$3$i;
	       while(1) {
	        $252 = HEAP32[$d$5674$i>>2]|0;
	        $tobool9$i575$i = ($252|0)==(0);
	        if ($tobool9$i575$i) {
	         $s715$0669$i = $add$ptr671$i;
	         label = 300;
	        } else {
	         $s$addr$110$i578$i = $add$ptr671$i;$y$011$i577$i = $252;
	         while(1) {
	          $rem4$i579$i = (($y$011$i577$i>>>0) % 10)&-1;
	          $add57$i580$i = $rem4$i579$i | 48;
	          $conv6$i581$i = $add57$i580$i&255;
	          $incdec$ptr7$i582$i = (($s$addr$110$i578$i) + -1|0);
	          HEAP8[$incdec$ptr7$i582$i>>0] = $conv6$i581$i;
	          $div9$i583$i = (($y$011$i577$i>>>0) / 10)&-1;
	          $253 = ($y$011$i577$i>>>0)<(10);
	          if ($253) {
	           break;
	          } else {
	           $s$addr$110$i578$i = $incdec$ptr7$i582$i;$y$011$i577$i = $div9$i583$i;
	          }
	         }
	         $cmp722668$i = ($incdec$ptr7$i582$i>>>0)>($buf$i>>>0);
	         if ($cmp722668$i) {
	          $s715$0669$i = $incdec$ptr7$i582$i;
	          label = 300;
	         } else {
	          $s715$0$lcssa$i = $incdec$ptr7$i582$i;
	         }
	        }
	        if ((label|0) == 300) {
	         while(1) {
	          label = 0;
	          $incdec$ptr725$i = (($s715$0669$i) + -1|0);
	          HEAP8[$incdec$ptr725$i>>0] = 48;
	          $cmp722$i = ($incdec$ptr725$i>>>0)>($buf$i>>>0);
	          if ($cmp722$i) {
	           $s715$0669$i = $incdec$ptr725$i;
	           label = 300;
	          } else {
	           $s715$0$lcssa$i = $incdec$ptr725$i;
	           break;
	          }
	         }
	        }
	        $cmp727$i = ($p$addr$4675$i|0)>(9);
	        $cond732$i = $cmp727$i ? 9 : $p$addr$4675$i;
	        (___fwritex($s715$0$lcssa$i,$cond732$i,$f)|0);
	        $incdec$ptr734$i = (($d$5674$i) + 4|0);
	        $sub735$i = (($p$addr$4675$i) + -9)|0;
	        $cmp707$i = ($incdec$ptr734$i>>>0)<($z$6$i>>>0);
	        $cmp710$i = ($sub735$i|0)>(0);
	        $or$cond368$i = $cmp707$i & $cmp710$i;
	        if ($or$cond368$i) {
	         $d$5674$i = $incdec$ptr734$i;$p$addr$4675$i = $sub735$i;
	        } else {
	         $p$addr$4$lcssa$i = $sub735$i;
	         break;
	        }
	       }
	      } else {
	       $p$addr$4$lcssa$i = $p$addr$3$i;
	      }
	      $cmp$i589$i = ($p$addr$4$lcssa$i|0)>(0);
	      if (!($cmp$i589$i)) {
	       break;
	      }
	      $cmp1$i590$i = ($p$addr$4$lcssa$i>>>0)>(256);
	      $cond$i591$i = $cmp1$i590$i ? 256 : $p$addr$4$lcssa$i;
	      _memset(($pad$i|0),48,($cond$i591$i|0))|0;
	      $cmp39$i592$i = ($p$addr$4$lcssa$i>>>0)>(255);
	      if ($cmp39$i592$i) {
	       $l$addr$010$i594$i = $p$addr$4$lcssa$i;
	       while(1) {
	        (___fwritex($pad$i,256,$f)|0);
	        $sub5$i596$i = (($l$addr$010$i594$i) + -256)|0;
	        $cmp3$i597$i = ($sub5$i596$i>>>0)>(255);
	        if ($cmp3$i597$i) {
	         $l$addr$010$i594$i = $sub5$i596$i;
	        } else {
	         $l$addr$0$lcssa$i599$i = $sub5$i596$i;
	         break;
	        }
	       }
	      } else {
	       $l$addr$0$lcssa$i599$i = $p$addr$4$lcssa$i;
	      }
	      (___fwritex($pad$i,$l$addr$0$lcssa$i599$i,$f)|0);
	     } else {
	      $add$ptr742$i = (($a$8$ph$i) + 4|0);
	      $z$6$add$ptr742$i = $cmp450$lcssa$i ? $z$6$i : $add$ptr742$i;
	      $cmp748685$i = ($p$addr$3$i|0)>(-1);
	      do {
	       if ($cmp748685$i) {
	        $and780$i = $fl$1$and219 & 8;
	        $tobool781$not$i = ($and780$i|0)!=(0);
	        $d$6687$i = $a$8$ph$i;$p$addr$5688$i = $p$addr$3$i;
	        while(1) {
	         $254 = HEAP32[$d$6687$i>>2]|0;
	         $tobool9$i606$i = ($254|0)==(0);
	         if ($tobool9$i606$i) {
	          label = 311;
	         } else {
	          $s$addr$110$i609$i = $add$ptr671$i;$y$011$i608$i = $254;
	          while(1) {
	           $rem4$i610$i = (($y$011$i608$i>>>0) % 10)&-1;
	           $add57$i611$i = $rem4$i610$i | 48;
	           $conv6$i612$i = $add57$i611$i&255;
	           $incdec$ptr7$i613$i = (($s$addr$110$i609$i) + -1|0);
	           HEAP8[$incdec$ptr7$i613$i>>0] = $conv6$i612$i;
	           $div9$i614$i = (($y$011$i608$i>>>0) / 10)&-1;
	           $255 = ($y$011$i608$i>>>0)<(10);
	           if ($255) {
	            break;
	           } else {
	            $s$addr$110$i609$i = $incdec$ptr7$i613$i;$y$011$i608$i = $div9$i614$i;
	           }
	          }
	          $cmp760$i = ($incdec$ptr7$i613$i|0)==($add$ptr671$i|0);
	          if ($cmp760$i) {
	           label = 311;
	          } else {
	           $s753$0$i = $incdec$ptr7$i613$i;
	          }
	         }
	         if ((label|0) == 311) {
	          label = 0;
	          HEAP8[$incdec$ptr689$i>>0] = 48;
	          $s753$0$i = $incdec$ptr689$i;
	         }
	         $cmp765$i = ($d$6687$i|0)==($a$8$ph$i|0);
	         do {
	          if ($cmp765$i) {
	           $incdec$ptr776$i = (($s753$0$i) + 1|0);
	           (___fwritex($s753$0$i,1,$f)|0);
	           $cmp777$i = ($p$addr$5688$i|0)>(0);
	           $brmerge$i = $cmp777$i | $tobool781$not$i;
	           if (!($brmerge$i)) {
	            $s753$2$i = $incdec$ptr776$i;
	            break;
	           }
	           (___fwritex(156488,1,$f)|0);
	           $s753$2$i = $incdec$ptr776$i;
	          } else {
	           $cmp770681$i = ($s753$0$i>>>0)>($buf$i>>>0);
	           if ($cmp770681$i) {
	            $s753$1682$i = $s753$0$i;
	           } else {
	            $s753$2$i = $s753$0$i;
	            break;
	           }
	           while(1) {
	            $incdec$ptr773$i = (($s753$1682$i) + -1|0);
	            HEAP8[$incdec$ptr773$i>>0] = 48;
	            $cmp770$i = ($incdec$ptr773$i>>>0)>($buf$i>>>0);
	            if ($cmp770$i) {
	             $s753$1682$i = $incdec$ptr773$i;
	            } else {
	             $s753$2$i = $incdec$ptr773$i;
	             break;
	            }
	           }
	          }
	         } while(0);
	         $sub$ptr$rhs$cast788$i = $s753$2$i;
	         $sub$ptr$sub789$i = (($sub$ptr$lhs$cast694$i) - ($sub$ptr$rhs$cast788$i))|0;
	         $cmp790$i = ($sub$ptr$sub789$i|0)<($p$addr$5688$i|0);
	         $sub$ptr$sub789$p$addr$5$i = $cmp790$i ? $sub$ptr$sub789$i : $p$addr$5688$i;
	         (___fwritex($s753$2$i,$sub$ptr$sub789$p$addr$5$i,$f)|0);
	         $sub806$i = (($p$addr$5688$i) - ($sub$ptr$sub789$i))|0;
	         $incdec$ptr808$i = (($d$6687$i) + 4|0);
	         $cmp745$i = ($incdec$ptr808$i>>>0)<($z$6$add$ptr742$i>>>0);
	         $cmp748$i = ($sub806$i|0)>(-1);
	         $or$cond369$i = $cmp745$i & $cmp748$i;
	         if ($or$cond369$i) {
	          $d$6687$i = $incdec$ptr808$i;$p$addr$5688$i = $sub806$i;
	         } else {
	          break;
	         }
	        }
	        $cmp$i622$i = ($sub806$i|0)>(0);
	        if (!($cmp$i622$i)) {
	         break;
	        }
	        $cmp1$i623$i = ($sub806$i>>>0)>(256);
	        $cond$i624$i = $cmp1$i623$i ? 256 : $sub806$i;
	        _memset(($pad$i|0),48,($cond$i624$i|0))|0;
	        $cmp39$i625$i = ($sub806$i>>>0)>(255);
	        if ($cmp39$i625$i) {
	         $l$addr$010$i627$i = $sub806$i;
	         while(1) {
	          (___fwritex($pad$i,256,$f)|0);
	          $sub5$i629$i = (($l$addr$010$i627$i) + -256)|0;
	          $cmp3$i630$i = ($sub5$i629$i>>>0)>(255);
	          if ($cmp3$i630$i) {
	           $l$addr$010$i627$i = $sub5$i629$i;
	          } else {
	           $l$addr$0$lcssa$i632$i = $sub5$i629$i;
	           break;
	          }
	         }
	        } else {
	         $l$addr$0$lcssa$i632$i = $sub806$i;
	        }
	        (___fwritex($pad$i,$l$addr$0$lcssa$i632$i,$f)|0);
	       }
	      } while(0);
	      $sub$ptr$rhs$cast812$i = $estr$2$i;
	      $sub$ptr$sub813$i = (($sub$ptr$lhs$cast160$i) - ($sub$ptr$rhs$cast812$i))|0;
	      (___fwritex($estr$2$i,$sub$ptr$sub813$i,$f)|0);
	     }
	    } while(0);
	    $tobool$i$i = ($and$i517$i|0)==(8192);
	    $or$cond$i$i = $tobool$i$i & $cmp$i519$i;
	    if ($or$cond$i$i) {
	     $sub$i$i = (($w$1) - ($add653$i))|0;
	     $cmp1$i$i = ($sub$i$i>>>0)>(256);
	     $cond$i$i = $cmp1$i$i ? 256 : $sub$i$i;
	     _memset(($pad$i|0),32,($cond$i$i|0))|0;
	     $cmp39$i$i = ($sub$i$i>>>0)>(255);
	     if ($cmp39$i$i) {
	      $l$addr$010$i$i = $sub$i$i;
	      while(1) {
	       (___fwritex($pad$i,256,$f)|0);
	       $sub5$i$i = (($l$addr$010$i$i) + -256)|0;
	       $cmp3$i$i = ($sub5$i$i>>>0)>(255);
	       if ($cmp3$i$i) {
	        $l$addr$010$i$i = $sub5$i$i;
	       } else {
	        $l$addr$0$lcssa$i$i = $sub5$i$i;
	        break;
	       }
	      }
	     } else {
	      $l$addr$0$lcssa$i$i = $sub$i$i;
	     }
	     (___fwritex($pad$i,$l$addr$0$lcssa$i$i,$f)|0);
	    }
	    $w$add653$i = $cmp$i519$i ? $w$1 : $add653$i;
	    $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$add653$i;$l10n$0 = $l10n$3;
	    continue L1;
	    break;
	   }
	   case 110:  {
	    switch ($st$0|0) {
	    case 0:  {
	     HEAP32[$82>>2] = $cnt$1;
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
	     continue L1;
	     break;
	    }
	    case 1:  {
	     HEAP32[$82>>2] = $cnt$1;
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
	     continue L1;
	     break;
	    }
	    case 2:  {
	     $83 = ($cnt$1|0)<(0);
	     $84 = $83 << 31 >> 31;
	     $85 = $82;
	     $86 = $85;
	     HEAP32[$86>>2] = $cnt$1;
	     $87 = (($85) + 4)|0;
	     $88 = $87;
	     HEAP32[$88>>2] = $84;
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
	     continue L1;
	     break;
	    }
	    case 3:  {
	     $conv229 = $cnt$1&65535;
	     HEAP16[$82>>1] = $conv229;
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
	     continue L1;
	     break;
	    }
	    case 4:  {
	     $conv232 = $cnt$1&255;
	     HEAP8[$82>>0] = $conv232;
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
	     continue L1;
	     break;
	    }
	    case 6:  {
	     HEAP32[$82>>2] = $cnt$1;
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
	     continue L1;
	     break;
	    }
	    case 7:  {
	     $89 = ($cnt$1|0)<(0);
	     $90 = $89 << 31 >> 31;
	     $91 = $82;
	     $92 = $91;
	     HEAP32[$92>>2] = $cnt$1;
	     $93 = (($91) + 4)|0;
	     $94 = $93;
	     HEAP32[$94>>2] = $90;
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
	     continue L1;
	     break;
	    }
	    default: {
	     $309 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $sub$ptr$sub;$l10n$0 = $l10n$3;
	     continue L1;
	    }
	    }
	    break;
	   }
	   case 112:  {
	    $cmp240 = ($p$0>>>0)>(8);
	    $cond245 = $cmp240 ? $p$0 : 8;
	    $or246 = $fl$1$and219 | 8;
	    $fl$3 = $or246;$p$1 = $cond245;$t$1 = 120;
	    label = 77;
	    break;
	   }
	   case 88: case 120:  {
	    $fl$3 = $fl$1$and219;$p$1 = $p$0;$t$1 = $t$0;
	    label = 77;
	    break;
	   }
	   case 111:  {
	    $107 = $82;
	    $108 = ($107|0)==(0);
	    $109 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)==(0);
	    $110 = $108 & $109;
	    if ($110) {
	     $s$addr$0$lcssa$i269 = $add$ptr205;
	    } else {
	     $112 = $107;$115 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$s$addr$07$i = $add$ptr205;
	     while(1) {
	      $111 = $112 & 7;
	      $113 = $111 | 48;
	      $114 = $113&255;
	      $incdec$ptr$i265 = (($s$addr$07$i) + -1|0);
	      HEAP8[$incdec$ptr$i265>>0] = $114;
	      $116 = (_bitshift64Lshr(($112|0),($115|0),3)|0);
	      $117 = tempRet0;
	      $118 = ($116|0)==(0);
	      $119 = ($117|0)==(0);
	      $120 = $118 & $119;
	      if ($120) {
	       $s$addr$0$lcssa$i269 = $incdec$ptr$i265;
	       break;
	      } else {
	       $112 = $116;$115 = $117;$s$addr$07$i = $incdec$ptr$i265;
	      }
	     }
	    }
	    $and263 = $fl$1$and219 & 8;
	    $tobool264 = ($and263|0)==(0);
	    if ($tobool264) {
	     $149 = $82;$a$0 = $s$addr$0$lcssa$i269;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 156392;
	     label = 94;
	    } else {
	     $$ = $110 ? 156392 : ((156392 + 5|0));
	     $121 = $110&1;
	     $$172 = $121 ^ 1;
	     $149 = $82;$a$0 = $s$addr$0$lcssa$i269;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = $$172;$prefix$1 = $$;
	     label = 94;
	    }
	    break;
	   }
	   case 105: case 100:  {
	    $122 = $82;
	    $123 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)<(0);
	    if ($123) {
	     $124 = (_i64Subtract(0,0,($122|0),($arg$sroa$0$sroa$1$4$extract$trunc531556568|0))|0);
	     $125 = tempRet0;
	     $126 = $124;
	     $128 = $126;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $125;$pl$0 = 1;$prefix$0 = 156392;
	     label = 89;
	     break L92;
	    }
	    $and282 = $fl$1$and219 & 2048;
	    $tobool283 = ($and282|0)==(0);
	    if ($tobool283) {
	     $and287 = $fl$1$and219 & 1;
	     $tobool288 = ($and287|0)==(0);
	     $$173 = $tobool288 ? 156392 : ((156392 + 2|0));
	     $128 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$pl$0 = $and287;$prefix$0 = $$173;
	     label = 89;
	    } else {
	     $128 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$pl$0 = 1;$prefix$0 = ((156392 + 1|0));
	     label = 89;
	    }
	    break;
	   }
	   case 117:  {
	    $128 = $82;$arg$sroa$0$sroa$1$4$extract$trunc531554 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$pl$0 = 0;$prefix$0 = 156392;
	    label = 89;
	    break;
	   }
	   default: {
	    $313 = $82;$a$2 = $incdec$ptr$i190563;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $fl$1$and219;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 156392;$z$2 = $add$ptr205;
	   }
	   }
	  } while(0);
	  L445: do {
	   if ((label|0) == 77) {
	    label = 0;
	    $95 = $82;
	    $and249 = $t$1 & 32;
	    $96 = ($95|0)==(0);
	    $97 = ($arg$sroa$0$sroa$1$4$extract$trunc531556568|0)==(0);
	    $98 = $96 & $97;
	    if ($98) {
	     $149 = $82;$a$0 = $add$ptr205;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 156392;
	     label = 94;
	    } else {
	     $101 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$99 = $95;$s$addr$06$i = $add$ptr205;
	     while(1) {
	      $idxprom$i = $99 & 15;
	      $arrayidx$i = (156472 + ($idxprom$i)|0);
	      $100 = HEAP8[$arrayidx$i>>0]|0;
	      $conv4$i = $100&255;
	      $or$i = $conv4$i | $and249;
	      $conv1$i = $or$i&255;
	      $incdec$ptr$i242 = (($s$addr$06$i) + -1|0);
	      HEAP8[$incdec$ptr$i242>>0] = $conv1$i;
	      $102 = (_bitshift64Lshr(($99|0),($101|0),4)|0);
	      $103 = tempRet0;
	      $104 = ($102|0)==(0);
	      $105 = ($103|0)==(0);
	      $106 = $104 & $105;
	      if ($106) {
	       break;
	      } else {
	       $101 = $103;$99 = $102;$s$addr$06$i = $incdec$ptr$i242;
	      }
	     }
	     $and254 = $fl$3 & 8;
	     $tobool255 = ($and254|0)==(0);
	     if ($tobool255) {
	      $149 = $82;$a$0 = $incdec$ptr$i242;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 156392;
	      label = 94;
	     } else {
	      $shr = $t$1 >> 4;
	      $add$ptr257 = (156392 + ($shr)|0);
	      $149 = $82;$a$0 = $incdec$ptr$i242;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $add$ptr257;
	      label = 94;
	     }
	    }
	   }
	   else if ((label|0) == 89) {
	    label = 0;
	    $127 = $128;
	    $129 = ($arg$sroa$0$sroa$1$4$extract$trunc531554>>>0)>(0);
	    $130 = ($arg$sroa$0$sroa$1$4$extract$trunc531554|0)==(0);
	    $131 = ($127>>>0)>(4294967295);
	    $132 = $130 & $131;
	    $133 = $129 | $132;
	    if ($133) {
	     $134 = $127;$135 = $arg$sroa$0$sroa$1$4$extract$trunc531554;$s$addr$014$i = $add$ptr205;
	     while(1) {
	      $136 = (___uremdi3(($134|0),($135|0),10,0)|0);
	      $137 = tempRet0;
	      $138 = $136 | 48;
	      $139 = $138&255;
	      $incdec$ptr$i272 = (($s$addr$014$i) + -1|0);
	      HEAP8[$incdec$ptr$i272>>0] = $139;
	      $140 = (___udivdi3(($134|0),($135|0),10,0)|0);
	      $141 = tempRet0;
	      $142 = ($135>>>0)>(9);
	      $143 = ($135|0)==(9);
	      $144 = ($134>>>0)>(4294967295);
	      $145 = $143 & $144;
	      $146 = $142 | $145;
	      if ($146) {
	       $134 = $140;$135 = $141;$s$addr$014$i = $incdec$ptr$i272;
	      } else {
	       break;
	      }
	     }
	     $s$addr$0$lcssa$i275 = $incdec$ptr$i272;$x$addr$0$lcssa$off0$i = $140;
	    } else {
	     $s$addr$0$lcssa$i275 = $add$ptr205;$x$addr$0$lcssa$off0$i = $127;
	    }
	    $tobool9$i = ($x$addr$0$lcssa$off0$i|0)==(0);
	    if ($tobool9$i) {
	     $149 = $128;$a$0 = $s$addr$0$lcssa$i275;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531554;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
	     label = 94;
	    } else {
	     $s$addr$110$i = $s$addr$0$lcssa$i275;$y$011$i = $x$addr$0$lcssa$off0$i;
	     while(1) {
	      $rem4$i = (($y$011$i>>>0) % 10)&-1;
	      $add57$i = $rem4$i | 48;
	      $conv6$i = $add57$i&255;
	      $incdec$ptr7$i = (($s$addr$110$i) + -1|0);
	      HEAP8[$incdec$ptr7$i>>0] = $conv6$i;
	      $div9$i = (($y$011$i>>>0) / 10)&-1;
	      $147 = ($y$011$i>>>0)<(10);
	      if ($147) {
	       $149 = $128;$a$0 = $incdec$ptr7$i;$arg$sroa$0$sroa$1$4$extract$trunc531553 = $arg$sroa$0$sroa$1$4$extract$trunc531554;$fl$4 = $fl$1$and219;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
	       label = 94;
	       break;
	      } else {
	       $s$addr$110$i = $incdec$ptr7$i;$y$011$i = $div9$i;
	      }
	     }
	    }
	   }
	   else if ((label|0) == 99) {
	    label = 0;
	    $call349 = (_memchr($a$1,0,$p$0)|0);
	    $tobool350 = ($call349|0)==(0|0);
	    if ($tobool350) {
	     $add$ptr352 = (($a$1) + ($p$0)|0);
	     $313 = $82;$a$2 = $a$1;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $and219;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 156392;$z$2 = $add$ptr352;
	     break;
	    } else {
	     $sub$ptr$lhs$cast354 = $call349;
	     $sub$ptr$rhs$cast355 = $a$1;
	     $sub$ptr$sub356 = (($sub$ptr$lhs$cast354) - ($sub$ptr$rhs$cast355))|0;
	     $313 = $82;$a$2 = $a$1;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$fl$6 = $and219;$p$5 = $sub$ptr$sub356;$pl$2 = 0;$prefix$2 = 156392;$z$2 = $call349;
	     break;
	    }
	   }
	   else if ((label|0) == 104) {
	    label = 0;
	    $i$0612 = 0;$l$1611 = 0;$ws$0613 = $314;
	    while(1) {
	     $156 = HEAP32[$ws$0613>>2]|0;
	     $tobool373 = ($156|0)==(0);
	     if ($tobool373) {
	      $i$0$lcssa = $i$0612;$l$1$lcssa = $l$1611;
	      break;
	     }
	     $call377 = (_wctomb($mb,$156)|0);
	     $cmp378 = ($call377|0)>(-1);
	     if (!($cmp378)) {
	      $retval$0 = -1;
	      label = 362;
	      break L1;
	     }
	     $sub382 = (($p$4658) - ($i$0612))|0;
	     $cmp383 = ($call377>>>0)>($sub382>>>0);
	     $add388 = (($call377) + ($i$0612))|0;
	     if ($cmp383) {
	      $316 = $314;$317 = $315;$i$0609 = $i$0612;
	      label = 110;
	      break L445;
	     }
	     $incdec$ptr376 = (($ws$0613) + 4|0);
	     $cmp370 = ($add388>>>0)<($p$4658>>>0);
	     if ($cmp370) {
	      $i$0612 = $add388;$l$1611 = $call377;$ws$0613 = $incdec$ptr376;
	     } else {
	      $i$0$lcssa = $add388;$l$1$lcssa = $call377;
	      break;
	     }
	    }
	    $cmp390 = ($l$1$lcssa|0)<(0);
	    if ($cmp390) {
	     $retval$0 = -1;
	     label = 362;
	     break L1;
	    } else {
	     $316 = $314;$317 = $315;$i$0609 = $i$0$lcssa;
	     label = 110;
	    }
	   }
	  } while(0);
	  if ((label|0) == 94) {
	   label = 0;
	   $cmp299 = ($p$2|0)>(-1);
	   $and302 = $fl$4 & -65537;
	   $and302$fl$4 = $cmp299 ? $and302 : $fl$4;
	   $148 = $149;
	   $150 = ($148|0)==(0);
	   $151 = ($arg$sroa$0$sroa$1$4$extract$trunc531553|0)==(0);
	   $152 = $150 & $151;
	   $tobool307 = ($p$2|0)==(0);
	   $or$cond = $152 & $tobool307;
	   if ($or$cond) {
	    $313 = $149;$a$2 = $add$ptr205;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531553;$fl$6 = $and302$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $add$ptr205;
	   } else {
	    $sub$ptr$rhs$cast311 = $a$0;
	    $sub$ptr$sub312 = (($sub$ptr$lhs$cast310) - ($sub$ptr$rhs$cast311))|0;
	    $lnot$ext = $152&1;
	    $add315 = (($lnot$ext) + ($sub$ptr$sub312))|0;
	    $cmp316 = ($p$2|0)>($add315|0);
	    $p$2$add315 = $cmp316 ? $p$2 : $add315;
	    $313 = $149;$a$2 = $a$0;$arg$sroa$0$sroa$1$4$extract$trunc531555 = $arg$sroa$0$sroa$1$4$extract$trunc531553;$fl$6 = $and302$fl$4;$p$5 = $p$2$add315;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $add$ptr205;
	   }
	  }
	  else if ((label|0) == 110) {
	   label = 0;
	   $and$i297 = $fl$1$and219 & 73728;
	   $tobool$i298 = ($and$i297|0)==(0);
	   $cmp$i299 = ($i$0609|0)<($w$1|0);
	   $or$cond$i300 = $tobool$i298 & $cmp$i299;
	   if ($or$cond$i300) {
	    $sub$i301 = (($w$1) - ($i$0609))|0;
	    $cmp1$i302 = ($sub$i301>>>0)>(256);
	    $cond$i303 = $cmp1$i302 ? 256 : $sub$i301;
	    _memset(($pad$i|0),32,($cond$i303|0))|0;
	    $cmp39$i304 = ($sub$i301>>>0)>(255);
	    if ($cmp39$i304) {
	     $l$addr$010$i306 = $sub$i301;
	     while(1) {
	      (___fwritex($pad$i,256,$f)|0);
	      $sub5$i308 = (($l$addr$010$i306) + -256)|0;
	      $cmp3$i309 = ($sub5$i308>>>0)>(255);
	      if ($cmp3$i309) {
	       $l$addr$010$i306 = $sub5$i308;
	      } else {
	       $l$addr$0$lcssa$i311 = $sub5$i308;
	       break;
	      }
	     }
	    } else {
	     $l$addr$0$lcssa$i311 = $sub$i301;
	    }
	    (___fwritex($pad$i,$l$addr$0$lcssa$i311,$f)|0);
	   }
	   $cmp397616 = ($i$0609|0)==(0);
	   L481: do {
	    if (!($cmp397616)) {
	     $i$1617 = 0;$ws$1618 = $316;
	     while(1) {
	      $157 = HEAP32[$ws$1618>>2]|0;
	      $tobool400 = ($157|0)==(0);
	      if ($tobool400) {
	       break L481;
	      }
	      $call404 = (_wctomb($mb,$157)|0);
	      $add405 = (($call404) + ($i$1617))|0;
	      $cmp406 = ($add405|0)>($i$0609|0);
	      if ($cmp406) {
	       break L481;
	      }
	      $incdec$ptr403 = (($ws$1618) + 4|0);
	      (___fwritex($mb,$call404,$f)|0);
	      $cmp397 = ($add405>>>0)<($i$0609>>>0);
	      if ($cmp397) {
	       $i$1617 = $add405;$ws$1618 = $incdec$ptr403;
	      } else {
	       break;
	      }
	     }
	    }
	   } while(0);
	   $tobool$i318 = ($and$i297|0)==(8192);
	   $or$cond$i320 = $tobool$i318 & $cmp$i299;
	   if ($or$cond$i320) {
	    $sub$i321 = (($w$1) - ($i$0609))|0;
	    $cmp1$i322 = ($sub$i321>>>0)>(256);
	    $cond$i323 = $cmp1$i322 ? 256 : $sub$i321;
	    _memset(($pad$i|0),32,($cond$i323|0))|0;
	    $cmp39$i324 = ($sub$i321>>>0)>(255);
	    if ($cmp39$i324) {
	     $l$addr$010$i326 = $sub$i321;
	     while(1) {
	      (___fwritex($pad$i,256,$f)|0);
	      $sub5$i328 = (($l$addr$010$i326) + -256)|0;
	      $cmp3$i329 = ($sub5$i328>>>0)>(255);
	      if ($cmp3$i329) {
	       $l$addr$010$i326 = $sub5$i328;
	      } else {
	       $l$addr$0$lcssa$i331 = $sub5$i328;
	       break;
	      }
	     }
	    } else {
	     $l$addr$0$lcssa$i331 = $sub$i321;
	    }
	    (___fwritex($pad$i,$l$addr$0$lcssa$i331,$f)|0);
	   }
	   $cond419 = $cmp$i299 ? $w$1 : $i$0609;
	   $309 = $317;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531556568;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $cond419;$l10n$0 = $l10n$3;
	   continue;
	  }
	  $sub$ptr$lhs$cast424 = $z$2;
	  $sub$ptr$rhs$cast425 = $a$2;
	  $sub$ptr$sub426 = (($sub$ptr$lhs$cast424) - ($sub$ptr$rhs$cast425))|0;
	  $cmp427 = ($p$5|0)<($sub$ptr$sub426|0);
	  $sub$ptr$sub426$p$5 = $cmp427 ? $sub$ptr$sub426 : $p$5;
	  $add434 = (($pl$2) + ($sub$ptr$sub426$p$5))|0;
	  $cmp435 = ($w$1|0)<($add434|0);
	  $w$2 = $cmp435 ? $add434 : $w$1;
	  $and$i352 = $fl$6 & 73728;
	  $tobool$i353 = ($and$i352|0)==(0);
	  $cmp$i354 = ($add434|0)<($w$2|0);
	  $or$cond$i355 = $tobool$i353 & $cmp$i354;
	  if ($or$cond$i355) {
	   $sub$i356 = (($w$2) - ($add434))|0;
	   $cmp1$i357 = ($sub$i356>>>0)>(256);
	   $cond$i358 = $cmp1$i357 ? 256 : $sub$i356;
	   _memset(($pad$i|0),32,($cond$i358|0))|0;
	   $cmp39$i359 = ($sub$i356>>>0)>(255);
	   if ($cmp39$i359) {
	    $l$addr$010$i361 = $sub$i356;
	    while(1) {
	     (___fwritex($pad$i,256,$f)|0);
	     $sub5$i363 = (($l$addr$010$i361) + -256)|0;
	     $cmp3$i364 = ($sub5$i363>>>0)>(255);
	     if ($cmp3$i364) {
	      $l$addr$010$i361 = $sub5$i363;
	     } else {
	      $l$addr$0$lcssa$i366 = $sub5$i363;
	      break;
	     }
	    }
	   } else {
	    $l$addr$0$lcssa$i366 = $sub$i356;
	   }
	   (___fwritex($pad$i,$l$addr$0$lcssa$i366,$f)|0);
	  }
	  (___fwritex($prefix$2,$pl$2,$f)|0);
	  $tobool$i279 = ($and$i352|0)==(65536);
	  $or$cond$i281 = $tobool$i279 & $cmp$i354;
	  if ($or$cond$i281) {
	   $sub$i282 = (($w$2) - ($add434))|0;
	   $cmp1$i283 = ($sub$i282>>>0)>(256);
	   $cond$i284 = $cmp1$i283 ? 256 : $sub$i282;
	   _memset(($pad$i|0),48,($cond$i284|0))|0;
	   $cmp39$i285 = ($sub$i282>>>0)>(255);
	   if ($cmp39$i285) {
	    $l$addr$010$i287 = $sub$i282;
	    while(1) {
	     (___fwritex($pad$i,256,$f)|0);
	     $sub5$i289 = (($l$addr$010$i287) + -256)|0;
	     $cmp3$i290 = ($sub5$i289>>>0)>(255);
	     if ($cmp3$i290) {
	      $l$addr$010$i287 = $sub5$i289;
	     } else {
	      $l$addr$0$lcssa$i292 = $sub5$i289;
	      break;
	     }
	    }
	   } else {
	    $l$addr$0$lcssa$i292 = $sub$i282;
	   }
	   (___fwritex($pad$i,$l$addr$0$lcssa$i292,$f)|0);
	  }
	  $cmp$i247 = ($sub$ptr$sub426|0)<($sub$ptr$sub426$p$5|0);
	  if ($cmp$i247) {
	   $sub$i248 = (($sub$ptr$sub426$p$5) - ($sub$ptr$sub426))|0;
	   $cmp1$i249 = ($sub$i248>>>0)>(256);
	   $cond$i250 = $cmp1$i249 ? 256 : $sub$i248;
	   _memset(($pad$i|0),48,($cond$i250|0))|0;
	   $cmp39$i251 = ($sub$i248>>>0)>(255);
	   if ($cmp39$i251) {
	    $l$addr$010$i253 = $sub$i248;
	    while(1) {
	     (___fwritex($pad$i,256,$f)|0);
	     $sub5$i255 = (($l$addr$010$i253) + -256)|0;
	     $cmp3$i256 = ($sub5$i255>>>0)>(255);
	     if ($cmp3$i256) {
	      $l$addr$010$i253 = $sub5$i255;
	     } else {
	      $l$addr$0$lcssa$i258 = $sub5$i255;
	      break;
	     }
	    }
	   } else {
	    $l$addr$0$lcssa$i258 = $sub$i248;
	   }
	   (___fwritex($pad$i,$l$addr$0$lcssa$i258,$f)|0);
	  }
	  (___fwritex($a$2,$sub$ptr$sub426,$f)|0);
	  $tobool$i = ($and$i352|0)==(8192);
	  $or$cond$i = $tobool$i & $cmp$i354;
	  if (!($or$cond$i)) {
	   $309 = $313;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531555;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$2;$l10n$0 = $l10n$3;
	   continue;
	  }
	  $sub$i179 = (($w$2) - ($add434))|0;
	  $cmp1$i = ($sub$i179>>>0)>(256);
	  $cond$i = $cmp1$i ? 256 : $sub$i179;
	  _memset(($pad$i|0),32,($cond$i|0))|0;
	  $cmp39$i = ($sub$i179>>>0)>(255);
	  if ($cmp39$i) {
	   $l$addr$010$i = $sub$i179;
	   while(1) {
	    (___fwritex($pad$i,256,$f)|0);
	    $sub5$i = (($l$addr$010$i) + -256)|0;
	    $cmp3$i = ($sub5$i>>>0)>(255);
	    if ($cmp3$i) {
	     $l$addr$010$i = $sub5$i;
	    } else {
	     $l$addr$0$lcssa$i = $sub5$i;
	     break;
	    }
	   }
	  } else {
	   $l$addr$0$lcssa$i = $sub$i179;
	  }
	  (___fwritex($pad$i,$l$addr$0$lcssa$i,$f)|0);
	  $309 = $313;$arg$sroa$0$sroa$1$4$extract$trunc531552 = $arg$sroa$0$sroa$1$4$extract$trunc531555;$cnt$0 = $cnt$1;$incdec$ptr$i190563 = $incdec$ptr169;$l$0 = $w$2;$l10n$0 = $l10n$3;
	 }
	 if ((label|0) == 344) {
	  $tobool452 = ($f|0)==(0|0);
	  if (!($tobool452)) {
	   $retval$0 = $cnt$1;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  $tobool455 = ($l10n$0|0)==(0);
	  if ($tobool455) {
	   $retval$0 = 0;
	   STACKTOP = sp;return ($retval$0|0);
	  } else {
	   $i$2577 = 1;
	  }
	  while(1) {
	   $arrayidx462 = (($nl_type) + ($i$2577<<2)|0);
	   $256 = HEAP32[$arrayidx462>>2]|0;
	   $tobool463 = ($256|0)==(0);
	   if ($tobool463) {
	    $i$3575 = $i$2577;
	    break;
	   }
	   $add$ptr466 = (($nl_arg) + ($i$2577<<3)|0);
	   $cmp$i = ($256>>>0)>(20);
	   L531: do {
	    if (!($cmp$i)) {
	     do {
	      switch ($256|0) {
	      case 9:  {
	       $arglist_current35 = HEAP32[$ap>>2]|0;
	       $257 = HEAP32[$arglist_current35>>2]|0;
	       $arglist_next36 = (($arglist_current35) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next36;
	       HEAP32[$add$ptr466>>2] = $257;
	       break L531;
	       break;
	      }
	      case 10:  {
	       $arglist_current38 = HEAP32[$ap>>2]|0;
	       $258 = HEAP32[$arglist_current38>>2]|0;
	       $arglist_next39 = (($arglist_current38) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next39;
	       $259 = ($258|0)<(0);
	       $260 = $259 << 31 >> 31;
	       $261 = $add$ptr466;
	       $262 = $261;
	       HEAP32[$262>>2] = $258;
	       $263 = (($261) + 4)|0;
	       $264 = $263;
	       HEAP32[$264>>2] = $260;
	       break L531;
	       break;
	      }
	      case 11:  {
	       $arglist_current41 = HEAP32[$ap>>2]|0;
	       $265 = HEAP32[$arglist_current41>>2]|0;
	       $arglist_next42 = (($arglist_current41) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next42;
	       $266 = $add$ptr466;
	       $267 = $266;
	       HEAP32[$267>>2] = $265;
	       $268 = (($266) + 4)|0;
	       $269 = $268;
	       HEAP32[$269>>2] = 0;
	       break L531;
	       break;
	      }
	      case 12:  {
	       $arglist_current44 = HEAP32[$ap>>2]|0;
	       $270 = $arglist_current44;
	       $271 = $270;
	       $272 = HEAP32[$271>>2]|0;
	       $273 = (($270) + 4)|0;
	       $274 = $273;
	       $275 = HEAP32[$274>>2]|0;
	       $arglist_next45 = (($arglist_current44) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next45;
	       $276 = $add$ptr466;
	       $277 = $276;
	       HEAP32[$277>>2] = $272;
	       $278 = (($276) + 4)|0;
	       $279 = $278;
	       HEAP32[$279>>2] = $275;
	       break L531;
	       break;
	      }
	      case 13:  {
	       $arglist_current47 = HEAP32[$ap>>2]|0;
	       $280 = HEAP32[$arglist_current47>>2]|0;
	       $arglist_next48 = (($arglist_current47) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next48;
	       $conv12$i = $280&65535;
	       $281 = $conv12$i << 16 >> 16;
	       $282 = ($281|0)<(0);
	       $283 = $282 << 31 >> 31;
	       $284 = $add$ptr466;
	       $285 = $284;
	       HEAP32[$285>>2] = $281;
	       $286 = (($284) + 4)|0;
	       $287 = $286;
	       HEAP32[$287>>2] = $283;
	       break L531;
	       break;
	      }
	      case 14:  {
	       $arglist_current50 = HEAP32[$ap>>2]|0;
	       $288 = HEAP32[$arglist_current50>>2]|0;
	       $arglist_next51 = (($arglist_current50) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next51;
	       $conv17$mask$i = $288 & 65535;
	       $289 = $add$ptr466;
	       $290 = $289;
	       HEAP32[$290>>2] = $conv17$mask$i;
	       $291 = (($289) + 4)|0;
	       $292 = $291;
	       HEAP32[$292>>2] = 0;
	       break L531;
	       break;
	      }
	      case 15:  {
	       $arglist_current53 = HEAP32[$ap>>2]|0;
	       $293 = HEAP32[$arglist_current53>>2]|0;
	       $arglist_next54 = (($arglist_current53) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next54;
	       $conv22$i = $293&255;
	       $294 = $conv22$i << 24 >> 24;
	       $295 = ($294|0)<(0);
	       $296 = $295 << 31 >> 31;
	       $297 = $add$ptr466;
	       $298 = $297;
	       HEAP32[$298>>2] = $294;
	       $299 = (($297) + 4)|0;
	       $300 = $299;
	       HEAP32[$300>>2] = $296;
	       break L531;
	       break;
	      }
	      case 16:  {
	       $arglist_current56 = HEAP32[$ap>>2]|0;
	       $301 = HEAP32[$arglist_current56>>2]|0;
	       $arglist_next57 = (($arglist_current56) + 4|0);
	       HEAP32[$ap>>2] = $arglist_next57;
	       $conv27$mask$i = $301 & 255;
	       $302 = $add$ptr466;
	       $303 = $302;
	       HEAP32[$303>>2] = $conv27$mask$i;
	       $304 = (($302) + 4)|0;
	       $305 = $304;
	       HEAP32[$305>>2] = 0;
	       break L531;
	       break;
	      }
	      case 17:  {
	       $arglist_current59 = HEAP32[$ap>>2]|0;
	       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$306 = +HEAPF64[tempDoublePtr>>3];
	       $arglist_next60 = (($arglist_current59) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next60;
	       HEAPF64[$add$ptr466>>3] = $306;
	       break L531;
	       break;
	      }
	      case 18:  {
	       $arglist_current62 = HEAP32[$ap>>2]|0;
	       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$307 = +HEAPF64[tempDoublePtr>>3];
	       $arglist_next63 = (($arglist_current62) + 8|0);
	       HEAP32[$ap>>2] = $arglist_next63;
	       HEAPF64[$add$ptr466>>3] = $307;
	       break L531;
	       break;
	      }
	      default: {
	       break L531;
	      }
	      }
	     } while(0);
	    }
	   } while(0);
	   $inc = (($i$2577) + 1)|0;
	   $cmp459 = ($inc|0)<(10);
	   if ($cmp459) {
	    $i$2577 = $inc;
	   } else {
	    $retval$0 = 1;
	    label = 362;
	    break;
	   }
	  }
	  if ((label|0) == 362) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	  while(1) {
	   $arrayidx474 = (($nl_type) + ($i$3575<<2)|0);
	   $308 = HEAP32[$arrayidx474>>2]|0;
	   $lnot476 = ($308|0)==(0);
	   $inc481 = (($i$3575) + 1)|0;
	   if (!($lnot476)) {
	    $retval$0 = -1;
	    label = 362;
	    break;
	   }
	   $cmp471 = ($inc481|0)<(10);
	   if ($cmp471) {
	    $i$3575 = $inc481;
	   } else {
	    $retval$0 = 1;
	    label = 362;
	    break;
	   }
	  }
	  if ((label|0) == 362) {
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 }
	 else if ((label|0) == 362) {
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 return 0|0;
	}
	function _vsnprintf($s,$n,$fmt,$ap) {
	 $s = $s|0;
	 $n = $n|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp15 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub16 = 0, $sub3 = 0;
	 var $sub3$n$addr$0 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $b = sp + 112|0;
	 $f = sp;
	 dest=$f+0|0; src=156496+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
	 $sub = (($n) + -1)|0;
	 $cmp = ($sub>>>0)>(2147483646);
	 if ($cmp) {
	  $tobool = ($n|0)==(0);
	  if ($tobool) {
	   $n$addr$0 = 1;$s$addr$0 = $b;
	  } else {
	   $call = (___errno_location()|0);
	   HEAP32[$call>>2] = 75;
	   $retval$0 = -1;
	   STACKTOP = sp;return ($retval$0|0);
	  }
	 } else {
	  $n$addr$0 = $n;$s$addr$0 = $s;
	 }
	 $sub$ptr$rhs$cast = $s$addr$0;
	 $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
	 $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
	 $sub3$n$addr$0 = $cmp4 ? $sub3 : $n$addr$0;
	 $buf_size = (($f) + 48|0);
	 HEAP32[$buf_size>>2] = $sub3$n$addr$0;
	 $wpos = (($f) + 20|0);
	 HEAP32[$wpos>>2] = $s$addr$0;
	 $buf = (($f) + 44|0);
	 HEAP32[$buf>>2] = $s$addr$0;
	 $add$ptr = (($s$addr$0) + ($sub3$n$addr$0)|0);
	 $wend = (($f) + 16|0);
	 HEAP32[$wend>>2] = $add$ptr;
	 $wbase = (($f) + 28|0);
	 HEAP32[$wbase>>2] = $add$ptr;
	 $call10 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
	 $tobool11 = ($sub3$n$addr$0|0)==(0);
	 if ($tobool11) {
	  $retval$0 = $call10;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $0 = HEAP32[$wpos>>2]|0;
	 $1 = HEAP32[$wend>>2]|0;
	 $cmp15 = ($0|0)==($1|0);
	 $sub16 = $cmp15 << 31 >> 31;
	 $arrayidx = (($0) + ($sub16)|0);
	 HEAP8[$arrayidx>>0] = 0;
	 $retval$0 = $call10;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _sn_write($f,$s,$l) {
	 $f = $f|0;
	 $s = $s|0;
	 $l = $l|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $l$sub$ptr$sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $wend = (($f) + 16|0);
	 $0 = HEAP32[$wend>>2]|0;
	 $wpos = (($f) + 20|0);
	 $1 = HEAP32[$wpos>>2]|0;
	 $sub$ptr$lhs$cast = $0;
	 $sub$ptr$rhs$cast = $1;
	 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
	 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
	 $l$sub$ptr$sub = $cmp ? $l : $sub$ptr$sub;
	 _memcpy(($1|0),($s|0),($l$sub$ptr$sub|0))|0;
	 $2 = HEAP32[$wpos>>2]|0;
	 $add$ptr = (($2) + ($l$sub$ptr$sub)|0);
	 HEAP32[$wpos>>2] = $add$ptr;
	 STACKTOP = sp;return ($l|0);
	}
	function _vsprintf($s,$fmt,$ap) {
	 $s = $s|0;
	 $fmt = $fmt|0;
	 $ap = $ap|0;
	 var $call = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
	 STACKTOP = sp;return ($call|0);
	}
	function _atof($s) {
	 $s = $s|0;
	 var $call = 0.0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $call = (+_strtod($s,0));
	 STACKTOP = sp;return (+$call);
	}
	function _atoi($s) {
	 $s = $s|0;
	 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call6 = 0, $call67 = 0, $cond = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv5 = 0, $conv56 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $mul = 0, $n$0$lcssa = 0, $n$010 = 0;
	 var $neg$0 = 0, $neg$1$ph = 0, $s$addr$0 = 0, $s$addr$1$ph = 0, $s$addr$19 = 0, $sub$neg = 0, $sub11 = 0, $sub14 = 0, $tobool = 0, $tobool13 = 0, $tobool7 = 0, $tobool78 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $s$addr$0 = $s;
	 while(1) {
	  $0 = HEAP8[$s$addr$0>>0]|0;
	  $conv = $0 << 24 >> 24;
	  $call = (_isspace($conv)|0);
	  $tobool = ($call|0)==(0);
	  $incdec$ptr = (($s$addr$0) + 1|0);
	  if ($tobool) {
	   break;
	  } else {
	   $s$addr$0 = $incdec$ptr;
	  }
	 }
	 $1 = HEAP8[$s$addr$0>>0]|0;
	 $conv1 = $1 << 24 >> 24;
	 if ((($conv1|0) == 43)) {
	  $neg$0 = 0;
	  label = 5;
	 } else if ((($conv1|0) == 45)) {
	  $neg$0 = 1;
	  label = 5;
	 } else {
	  $2 = $1;$neg$1$ph = 0;$s$addr$1$ph = $s$addr$0;
	 }
	 if ((label|0) == 5) {
	  $$pre = HEAP8[$incdec$ptr>>0]|0;
	  $2 = $$pre;$neg$1$ph = $neg$0;$s$addr$1$ph = $incdec$ptr;
	 }
	 $conv56 = $2 << 24 >> 24;
	 $call67 = (_isdigit($conv56)|0);
	 $tobool78 = ($call67|0)==(0);
	 if ($tobool78) {
	  $n$0$lcssa = 0;
	  $tobool13 = ($neg$1$ph|0)!=(0);
	  $sub14 = (0 - ($n$0$lcssa))|0;
	  $cond = $tobool13 ? $n$0$lcssa : $sub14;
	  STACKTOP = sp;return ($cond|0);
	 } else {
	  $n$010 = 0;$s$addr$19 = $s$addr$1$ph;
	 }
	 while(1) {
	  $mul = ($n$010*10)|0;
	  $incdec$ptr9 = (($s$addr$19) + 1|0);
	  $3 = HEAP8[$s$addr$19>>0]|0;
	  $conv10 = $3 << 24 >> 24;
	  $sub$neg = (($mul) + 48)|0;
	  $sub11 = (($sub$neg) - ($conv10))|0;
	  $4 = HEAP8[$incdec$ptr9>>0]|0;
	  $conv5 = $4 << 24 >> 24;
	  $call6 = (_isdigit($conv5)|0);
	  $tobool7 = ($call6|0)==(0);
	  if ($tobool7) {
	   $n$0$lcssa = $sub11;
	   break;
	  } else {
	   $n$010 = $sub11;$s$addr$19 = $incdec$ptr9;
	  }
	 }
	 $tobool13 = ($neg$1$ph|0)!=(0);
	 $sub14 = (0 - ($n$0$lcssa))|0;
	 $cond = $tobool13 ? $n$0$lcssa : $sub14;
	 STACKTOP = sp;return ($cond|0);
	}
	function _atol($s) {
	 $s = $s|0;
	 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call6 = 0, $call67 = 0, $cond = 0, $conv = 0, $conv1 = 0, $conv10 = 0, $conv5 = 0, $conv56 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $mul = 0, $n$0$lcssa = 0, $n$010 = 0;
	 var $neg$0 = 0, $neg$1$ph = 0, $s$addr$0 = 0, $s$addr$1$ph = 0, $s$addr$19 = 0, $sub$neg = 0, $sub11 = 0, $sub14 = 0, $tobool = 0, $tobool13 = 0, $tobool7 = 0, $tobool78 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $s$addr$0 = $s;
	 while(1) {
	  $0 = HEAP8[$s$addr$0>>0]|0;
	  $conv = $0 << 24 >> 24;
	  $call = (_isspace($conv)|0);
	  $tobool = ($call|0)==(0);
	  $incdec$ptr = (($s$addr$0) + 1|0);
	  if ($tobool) {
	   break;
	  } else {
	   $s$addr$0 = $incdec$ptr;
	  }
	 }
	 $1 = HEAP8[$s$addr$0>>0]|0;
	 $conv1 = $1 << 24 >> 24;
	 if ((($conv1|0) == 43)) {
	  $neg$0 = 0;
	  label = 5;
	 } else if ((($conv1|0) == 45)) {
	  $neg$0 = 1;
	  label = 5;
	 } else {
	  $2 = $1;$neg$1$ph = 0;$s$addr$1$ph = $s$addr$0;
	 }
	 if ((label|0) == 5) {
	  $$pre = HEAP8[$incdec$ptr>>0]|0;
	  $2 = $$pre;$neg$1$ph = $neg$0;$s$addr$1$ph = $incdec$ptr;
	 }
	 $conv56 = $2 << 24 >> 24;
	 $call67 = (_isdigit($conv56)|0);
	 $tobool78 = ($call67|0)==(0);
	 if ($tobool78) {
	  $n$0$lcssa = 0;
	  $tobool13 = ($neg$1$ph|0)!=(0);
	  $sub14 = (0 - ($n$0$lcssa))|0;
	  $cond = $tobool13 ? $n$0$lcssa : $sub14;
	  STACKTOP = sp;return ($cond|0);
	 } else {
	  $n$010 = 0;$s$addr$19 = $s$addr$1$ph;
	 }
	 while(1) {
	  $mul = ($n$010*10)|0;
	  $incdec$ptr9 = (($s$addr$19) + 1|0);
	  $3 = HEAP8[$s$addr$19>>0]|0;
	  $conv10 = $3 << 24 >> 24;
	  $sub$neg = (($mul) + 48)|0;
	  $sub11 = (($sub$neg) - ($conv10))|0;
	  $4 = HEAP8[$incdec$ptr9>>0]|0;
	  $conv5 = $4 << 24 >> 24;
	  $call6 = (_isdigit($conv5)|0);
	  $tobool7 = ($call6|0)==(0);
	  if ($tobool7) {
	   $n$0$lcssa = $sub11;
	   break;
	  } else {
	   $n$010 = $sub11;$s$addr$19 = $incdec$ptr9;
	  }
	 }
	 $tobool13 = ($neg$1$ph|0)!=(0);
	 $sub14 = (0 - ($n$0$lcssa))|0;
	 $cond = $tobool13 ? $n$0$lcssa : $sub14;
	 STACKTOP = sp;return ($cond|0);
	}
	function _strtof($s,$p) {
	 $s = $s|0;
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$i = 0, $add$ptr$i = 0, $buf$i = 0, $call$i = 0.0, $cond$i = 0, $conv = 0.0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool$i = 0, $tobool3$i = 0, dest = 0;
	 var label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = $s;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = (-1);
	 $buf$i = (($f$i) + 44|0);
	 HEAP32[$buf$i>>2] = $s;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 ___shlim($f$i,0);
	 $call$i = (+___floatscan($f$i,0,1));
	 $shcnt$i = (($f$i) + 108|0);
	 $0 = HEAP32[$shcnt$i>>2]|0;
	 $1 = HEAP32[$rpos$i>>2]|0;
	 $2 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $1;
	 $sub$ptr$rhs$cast$i = $2;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($0))|0;
	 $tobool$i = ($p|0)==(0|0);
	 if ($tobool$i) {
	  $conv = $call$i;
	  STACKTOP = sp;return (+$conv);
	 }
	 $tobool3$i = ($add$i|0)==(0);
	 if ($tobool3$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr$i = (($s) + ($add$i)|0);
	  $cond$i = $add$ptr$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 $conv = $call$i;
	 STACKTOP = sp;return (+$conv);
	}
	function _strtod($s,$p) {
	 $s = $s|0;
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$i = 0, $add$ptr$i = 0, $buf$i = 0, $call$i = 0.0, $cond$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool$i = 0, $tobool3$i = 0, dest = 0, label = 0;
	 var sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = $s;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = (-1);
	 $buf$i = (($f$i) + 44|0);
	 HEAP32[$buf$i>>2] = $s;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 ___shlim($f$i,0);
	 $call$i = (+___floatscan($f$i,1,1));
	 $shcnt$i = (($f$i) + 108|0);
	 $0 = HEAP32[$shcnt$i>>2]|0;
	 $1 = HEAP32[$rpos$i>>2]|0;
	 $2 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $1;
	 $sub$ptr$rhs$cast$i = $2;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($0))|0;
	 $tobool$i = ($p|0)==(0|0);
	 if ($tobool$i) {
	  STACKTOP = sp;return (+$call$i);
	 }
	 $tobool3$i = ($add$i|0)==(0);
	 if ($tobool3$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr$i = (($s) + ($add$i)|0);
	  $cond$i = $add$ptr$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 STACKTOP = sp;return (+$call$i);
	}
	function _strtold($s,$p) {
	 $s = $s|0;
	 $p = $p|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$i = 0, $add$ptr$i = 0, $buf$i = 0, $call$i = 0.0, $cond$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $tobool$i = 0, $tobool3$i = 0, dest = 0, label = 0;
	 var sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i = sp;
	 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = $s;
	 $rend$i = (($f$i) + 8|0);
	 HEAP32[$rend$i>>2] = (-1);
	 $buf$i = (($f$i) + 44|0);
	 HEAP32[$buf$i>>2] = $s;
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 ___shlim($f$i,0);
	 $call$i = (+___floatscan($f$i,2,1));
	 $shcnt$i = (($f$i) + 108|0);
	 $0 = HEAP32[$shcnt$i>>2]|0;
	 $1 = HEAP32[$rpos$i>>2]|0;
	 $2 = HEAP32[$rend$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $1;
	 $sub$ptr$rhs$cast$i = $2;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$i = (($sub$ptr$sub$i) + ($0))|0;
	 $tobool$i = ($p|0)==(0|0);
	 if ($tobool$i) {
	  STACKTOP = sp;return (+$call$i);
	 }
	 $tobool3$i = ($add$i|0)==(0);
	 if ($tobool3$i) {
	  $cond$i = $s;
	 } else {
	  $add$ptr$i = (($s) + ($add$i)|0);
	  $cond$i = $add$ptr$i;
	 }
	 HEAP32[$p>>2] = $cond$i;
	 STACKTOP = sp;return (+$call$i);
	}
	function _strtof_l($s,$p,$loc) {
	 $s = $s|0;
	 $p = $p|0;
	 $loc = $loc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$i$i = 0, $add$ptr$i$i = 0, $buf$i$i = 0, $call$i$i = 0.0, $cond$i$i = 0, $conv$i = 0.0, $f$i$i = 0, $lock$i$i = 0, $rend$i$i = 0, $rpos$i$i = 0, $shcnt$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool3$i$i = 0, dest = 0;
	 var label = 0, sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i$i = sp;
	 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 $rpos$i$i = (($f$i$i) + 4|0);
	 HEAP32[$rpos$i$i>>2] = $s;
	 $rend$i$i = (($f$i$i) + 8|0);
	 HEAP32[$rend$i$i>>2] = (-1);
	 $buf$i$i = (($f$i$i) + 44|0);
	 HEAP32[$buf$i$i>>2] = $s;
	 $lock$i$i = (($f$i$i) + 76|0);
	 HEAP32[$lock$i$i>>2] = -1;
	 ___shlim($f$i$i,0);
	 $call$i$i = (+___floatscan($f$i$i,0,1));
	 $shcnt$i$i = (($f$i$i) + 108|0);
	 $0 = HEAP32[$shcnt$i$i>>2]|0;
	 $1 = HEAP32[$rpos$i$i>>2]|0;
	 $2 = HEAP32[$rend$i$i>>2]|0;
	 $sub$ptr$lhs$cast$i$i = $1;
	 $sub$ptr$rhs$cast$i$i = $2;
	 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
	 $add$i$i = (($sub$ptr$sub$i$i) + ($0))|0;
	 $tobool$i$i = ($p|0)==(0|0);
	 if ($tobool$i$i) {
	  $conv$i = $call$i$i;
	  STACKTOP = sp;return (+$conv$i);
	 }
	 $tobool3$i$i = ($add$i$i|0)==(0);
	 if ($tobool3$i$i) {
	  $cond$i$i = $s;
	 } else {
	  $add$ptr$i$i = (($s) + ($add$i$i)|0);
	  $cond$i$i = $add$ptr$i$i;
	 }
	 HEAP32[$p>>2] = $cond$i$i;
	 $conv$i = $call$i$i;
	 STACKTOP = sp;return (+$conv$i);
	}
	function _strtod_l($s,$p,$loc) {
	 $s = $s|0;
	 $p = $p|0;
	 $loc = $loc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$i$i = 0, $add$ptr$i$i = 0, $buf$i$i = 0, $call$i$i = 0.0, $cond$i$i = 0, $f$i$i = 0, $lock$i$i = 0, $rend$i$i = 0, $rpos$i$i = 0, $shcnt$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool3$i$i = 0, dest = 0, label = 0;
	 var sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i$i = sp;
	 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 $rpos$i$i = (($f$i$i) + 4|0);
	 HEAP32[$rpos$i$i>>2] = $s;
	 $rend$i$i = (($f$i$i) + 8|0);
	 HEAP32[$rend$i$i>>2] = (-1);
	 $buf$i$i = (($f$i$i) + 44|0);
	 HEAP32[$buf$i$i>>2] = $s;
	 $lock$i$i = (($f$i$i) + 76|0);
	 HEAP32[$lock$i$i>>2] = -1;
	 ___shlim($f$i$i,0);
	 $call$i$i = (+___floatscan($f$i$i,1,1));
	 $shcnt$i$i = (($f$i$i) + 108|0);
	 $0 = HEAP32[$shcnt$i$i>>2]|0;
	 $1 = HEAP32[$rpos$i$i>>2]|0;
	 $2 = HEAP32[$rend$i$i>>2]|0;
	 $sub$ptr$lhs$cast$i$i = $1;
	 $sub$ptr$rhs$cast$i$i = $2;
	 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
	 $add$i$i = (($sub$ptr$sub$i$i) + ($0))|0;
	 $tobool$i$i = ($p|0)==(0|0);
	 if ($tobool$i$i) {
	  STACKTOP = sp;return (+$call$i$i);
	 }
	 $tobool3$i$i = ($add$i$i|0)==(0);
	 if ($tobool3$i$i) {
	  $cond$i$i = $s;
	 } else {
	  $add$ptr$i$i = (($s) + ($add$i$i)|0);
	  $cond$i$i = $add$ptr$i$i;
	 }
	 HEAP32[$p>>2] = $cond$i$i;
	 STACKTOP = sp;return (+$call$i$i);
	}
	function _strtold_l($s,$p,$loc) {
	 $s = $s|0;
	 $p = $p|0;
	 $loc = $loc|0;
	 var $0 = 0, $1 = 0, $2 = 0, $add$i$i = 0, $add$ptr$i$i = 0, $buf$i$i = 0, $call$i$i = 0.0, $cond$i$i = 0, $f$i$i = 0, $lock$i$i = 0, $rend$i$i = 0, $rpos$i$i = 0, $shcnt$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool3$i$i = 0, dest = 0, label = 0;
	 var sp = 0, stop = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i$i = sp;
	 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
	 $rpos$i$i = (($f$i$i) + 4|0);
	 HEAP32[$rpos$i$i>>2] = $s;
	 $rend$i$i = (($f$i$i) + 8|0);
	 HEAP32[$rend$i$i>>2] = (-1);
	 $buf$i$i = (($f$i$i) + 44|0);
	 HEAP32[$buf$i$i>>2] = $s;
	 $lock$i$i = (($f$i$i) + 76|0);
	 HEAP32[$lock$i$i>>2] = -1;
	 ___shlim($f$i$i,0);
	 $call$i$i = (+___floatscan($f$i$i,2,1));
	 $shcnt$i$i = (($f$i$i) + 108|0);
	 $0 = HEAP32[$shcnt$i$i>>2]|0;
	 $1 = HEAP32[$rpos$i$i>>2]|0;
	 $2 = HEAP32[$rend$i$i>>2]|0;
	 $sub$ptr$lhs$cast$i$i = $1;
	 $sub$ptr$rhs$cast$i$i = $2;
	 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
	 $add$i$i = (($sub$ptr$sub$i$i) + ($0))|0;
	 $tobool$i$i = ($p|0)==(0|0);
	 if ($tobool$i$i) {
	  STACKTOP = sp;return (+$call$i$i);
	 }
	 $tobool3$i$i = ($add$i$i|0)==(0);
	 if ($tobool3$i$i) {
	  $cond$i$i = $s;
	 } else {
	  $add$ptr$i$i = (($s) + ($add$i$i)|0);
	  $cond$i$i = $add$ptr$i$i;
	 }
	 HEAP32[$p>>2] = $cond$i$i;
	 STACKTOP = sp;return (+$call$i$i);
	}
	function _strtoull($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $buf$i = 0, $cmp$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rend1$i = 0, $rend4$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0;
	 var $tobool$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i = sp;
	 HEAP32[$f$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = $s;
	 $buf$i = (($f$i) + 44|0);
	 HEAP32[$buf$i>>2] = $s;
	 $cmp$i = ($s|0)<(0|0);
	 if ($cmp$i) {
	  $rend$i = (($f$i) + 8|0);
	  HEAP32[$rend$i>>2] = (-1);
	 } else {
	  $add$ptr$i = (($s) + 2147483647|0);
	  $rend1$i = (($f$i) + 8|0);
	  HEAP32[$rend1$i>>2] = $add$ptr$i;
	 }
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 ___shlim($f$i,0);
	 $0 = (___intscan($f$i,$base,1,-1,-1)|0);
	 $1 = tempRet0;
	 $tobool$i = ($p|0)==(0|0);
	 if ($tobool$i) {
	  tempRet0 = $1;
	  STACKTOP = sp;return ($0|0);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $2 = HEAP32[$shcnt$i>>2]|0;
	 $3 = HEAP32[$rpos$i>>2]|0;
	 $rend4$i = (($f$i) + 8|0);
	 $4 = HEAP32[$rend4$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $3;
	 $sub$ptr$rhs$cast$i = $4;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) + ($2))|0;
	 $add$i = (($sub$ptr$sub$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$ptr5$i = (($s) + ($add$i)|0);
	 HEAP32[$p>>2] = $add$ptr5$i;
	 tempRet0 = $1;
	 STACKTOP = sp;return ($0|0);
	}
	function _strtoll($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $buf$i = 0, $cmp$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rend1$i = 0, $rend4$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0;
	 var $tobool$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i = sp;
	 HEAP32[$f$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = $s;
	 $buf$i = (($f$i) + 44|0);
	 HEAP32[$buf$i>>2] = $s;
	 $cmp$i = ($s|0)<(0|0);
	 if ($cmp$i) {
	  $rend$i = (($f$i) + 8|0);
	  HEAP32[$rend$i>>2] = (-1);
	 } else {
	  $add$ptr$i = (($s) + 2147483647|0);
	  $rend1$i = (($f$i) + 8|0);
	  HEAP32[$rend1$i>>2] = $add$ptr$i;
	 }
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 ___shlim($f$i,0);
	 $0 = (___intscan($f$i,$base,1,0,-2147483648)|0);
	 $1 = tempRet0;
	 $tobool$i = ($p|0)==(0|0);
	 if ($tobool$i) {
	  tempRet0 = $1;
	  STACKTOP = sp;return ($0|0);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $2 = HEAP32[$shcnt$i>>2]|0;
	 $3 = HEAP32[$rpos$i>>2]|0;
	 $rend4$i = (($f$i) + 8|0);
	 $4 = HEAP32[$rend4$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $3;
	 $sub$ptr$rhs$cast$i = $4;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) + ($2))|0;
	 $add$i = (($sub$ptr$sub$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$ptr5$i = (($s) + ($add$i)|0);
	 HEAP32[$p>>2] = $add$ptr5$i;
	 tempRet0 = $1;
	 STACKTOP = sp;return ($0|0);
	}
	function _strtoul($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $buf$i = 0, $cmp$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rend1$i = 0, $rend4$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0;
	 var $tobool$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i = sp;
	 HEAP32[$f$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = $s;
	 $buf$i = (($f$i) + 44|0);
	 HEAP32[$buf$i>>2] = $s;
	 $cmp$i = ($s|0)<(0|0);
	 if ($cmp$i) {
	  $rend$i = (($f$i) + 8|0);
	  HEAP32[$rend$i>>2] = (-1);
	 } else {
	  $add$ptr$i = (($s) + 2147483647|0);
	  $rend1$i = (($f$i) + 8|0);
	  HEAP32[$rend1$i>>2] = $add$ptr$i;
	 }
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 ___shlim($f$i,0);
	 $0 = (___intscan($f$i,$base,1,-1,0)|0);
	 $1 = tempRet0;
	 $tobool$i = ($p|0)==(0|0);
	 if ($tobool$i) {
	  STACKTOP = sp;return ($0|0);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $2 = HEAP32[$shcnt$i>>2]|0;
	 $3 = HEAP32[$rpos$i>>2]|0;
	 $rend4$i = (($f$i) + 8|0);
	 $4 = HEAP32[$rend4$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $3;
	 $sub$ptr$rhs$cast$i = $4;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) + ($2))|0;
	 $add$i = (($sub$ptr$sub$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$ptr5$i = (($s) + ($add$i)|0);
	 HEAP32[$p>>2] = $add$ptr5$i;
	 STACKTOP = sp;return ($0|0);
	}
	function _strtol($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i = 0, $add$ptr$i = 0, $add$ptr5$i = 0, $buf$i = 0, $cmp$i = 0, $f$i = 0, $lock$i = 0, $rend$i = 0, $rend1$i = 0, $rend4$i = 0, $rpos$i = 0, $shcnt$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0;
	 var $tobool$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i = sp;
	 HEAP32[$f$i>>2] = 0;
	 $rpos$i = (($f$i) + 4|0);
	 HEAP32[$rpos$i>>2] = $s;
	 $buf$i = (($f$i) + 44|0);
	 HEAP32[$buf$i>>2] = $s;
	 $cmp$i = ($s|0)<(0|0);
	 if ($cmp$i) {
	  $rend$i = (($f$i) + 8|0);
	  HEAP32[$rend$i>>2] = (-1);
	 } else {
	  $add$ptr$i = (($s) + 2147483647|0);
	  $rend1$i = (($f$i) + 8|0);
	  HEAP32[$rend1$i>>2] = $add$ptr$i;
	 }
	 $lock$i = (($f$i) + 76|0);
	 HEAP32[$lock$i>>2] = -1;
	 ___shlim($f$i,0);
	 $0 = (___intscan($f$i,$base,1,-2147483648,0)|0);
	 $1 = tempRet0;
	 $tobool$i = ($p|0)==(0|0);
	 if ($tobool$i) {
	  STACKTOP = sp;return ($0|0);
	 }
	 $shcnt$i = (($f$i) + 108|0);
	 $2 = HEAP32[$shcnt$i>>2]|0;
	 $3 = HEAP32[$rpos$i>>2]|0;
	 $rend4$i = (($f$i) + 8|0);
	 $4 = HEAP32[$rend4$i>>2]|0;
	 $sub$ptr$lhs$cast$i = $3;
	 $sub$ptr$rhs$cast$i = $4;
	 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) + ($2))|0;
	 $add$i = (($sub$ptr$sub$i) - ($sub$ptr$rhs$cast$i))|0;
	 $add$ptr5$i = (($s) + ($add$i)|0);
	 HEAP32[$p>>2] = $add$ptr5$i;
	 STACKTOP = sp;return ($0|0);
	}
	function _strtoimax($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i$i = 0, $add$ptr$i$i = 0, $add$ptr5$i$i = 0, $buf$i$i = 0, $cmp$i$i = 0, $f$i$i = 0, $lock$i$i = 0, $rend$i$i = 0, $rend1$i$i = 0, $rend4$i$i = 0, $rpos$i$i = 0, $shcnt$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0;
	 var $tobool$i$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i$i = sp;
	 HEAP32[$f$i$i>>2] = 0;
	 $rpos$i$i = (($f$i$i) + 4|0);
	 HEAP32[$rpos$i$i>>2] = $s;
	 $buf$i$i = (($f$i$i) + 44|0);
	 HEAP32[$buf$i$i>>2] = $s;
	 $cmp$i$i = ($s|0)<(0|0);
	 if ($cmp$i$i) {
	  $rend$i$i = (($f$i$i) + 8|0);
	  HEAP32[$rend$i$i>>2] = (-1);
	 } else {
	  $add$ptr$i$i = (($s) + 2147483647|0);
	  $rend1$i$i = (($f$i$i) + 8|0);
	  HEAP32[$rend1$i$i>>2] = $add$ptr$i$i;
	 }
	 $lock$i$i = (($f$i$i) + 76|0);
	 HEAP32[$lock$i$i>>2] = -1;
	 ___shlim($f$i$i,0);
	 $0 = (___intscan($f$i$i,$base,1,0,-2147483648)|0);
	 $1 = tempRet0;
	 $tobool$i$i = ($p|0)==(0|0);
	 if ($tobool$i$i) {
	  tempRet0 = $1;
	  STACKTOP = sp;return ($0|0);
	 }
	 $shcnt$i$i = (($f$i$i) + 108|0);
	 $2 = HEAP32[$shcnt$i$i>>2]|0;
	 $3 = HEAP32[$rpos$i$i>>2]|0;
	 $rend4$i$i = (($f$i$i) + 8|0);
	 $4 = HEAP32[$rend4$i$i>>2]|0;
	 $sub$ptr$lhs$cast$i$i = $3;
	 $sub$ptr$rhs$cast$i$i = $4;
	 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) + ($2))|0;
	 $add$i$i = (($sub$ptr$sub$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
	 $add$ptr5$i$i = (($s) + ($add$i$i)|0);
	 HEAP32[$p>>2] = $add$ptr5$i$i;
	 tempRet0 = $1;
	 STACKTOP = sp;return ($0|0);
	}
	function _strtoumax($s,$p,$base) {
	 $s = $s|0;
	 $p = $p|0;
	 $base = $base|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$i$i = 0, $add$ptr$i$i = 0, $add$ptr5$i$i = 0, $buf$i$i = 0, $cmp$i$i = 0, $f$i$i = 0, $lock$i$i = 0, $rend$i$i = 0, $rend1$i$i = 0, $rend4$i$i = 0, $rpos$i$i = 0, $shcnt$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0;
	 var $tobool$i$i = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
	 $f$i$i = sp;
	 HEAP32[$f$i$i>>2] = 0;
	 $rpos$i$i = (($f$i$i) + 4|0);
	 HEAP32[$rpos$i$i>>2] = $s;
	 $buf$i$i = (($f$i$i) + 44|0);
	 HEAP32[$buf$i$i>>2] = $s;
	 $cmp$i$i = ($s|0)<(0|0);
	 if ($cmp$i$i) {
	  $rend$i$i = (($f$i$i) + 8|0);
	  HEAP32[$rend$i$i>>2] = (-1);
	 } else {
	  $add$ptr$i$i = (($s) + 2147483647|0);
	  $rend1$i$i = (($f$i$i) + 8|0);
	  HEAP32[$rend1$i$i>>2] = $add$ptr$i$i;
	 }
	 $lock$i$i = (($f$i$i) + 76|0);
	 HEAP32[$lock$i$i>>2] = -1;
	 ___shlim($f$i$i,0);
	 $0 = (___intscan($f$i$i,$base,1,-1,-1)|0);
	 $1 = tempRet0;
	 $tobool$i$i = ($p|0)==(0|0);
	 if ($tobool$i$i) {
	  tempRet0 = $1;
	  STACKTOP = sp;return ($0|0);
	 }
	 $shcnt$i$i = (($f$i$i) + 108|0);
	 $2 = HEAP32[$shcnt$i$i>>2]|0;
	 $3 = HEAP32[$rpos$i$i>>2]|0;
	 $rend4$i$i = (($f$i$i) + 8|0);
	 $4 = HEAP32[$rend4$i$i>>2]|0;
	 $sub$ptr$lhs$cast$i$i = $3;
	 $sub$ptr$rhs$cast$i$i = $4;
	 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) + ($2))|0;
	 $add$i$i = (($sub$ptr$sub$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
	 $add$ptr5$i$i = (($s) + ($add$i$i)|0);
	 HEAP32[$p>>2] = $add$ptr5$i$i;
	 tempRet0 = $1;
	 STACKTOP = sp;return ($0|0);
	}
	function _memchr($src,$c,$n) {
	 $src = $src|0;
	 $c = $c|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and = 0, $and15 = 0, $and16 = 0, $and33 = 0, $cmp = 0, $cmp11 = 0, $cmp1128 = 0, $cmp28 = 0, $cmp8 = 0, $cond = 0, $conv1 = 0, $dec = 0;
	 var $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $lnot = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$037 = 0, $n$addr$1$lcssa = 0, $n$addr$129 = 0, $n$addr$225 = 0, $n$addr$3 = 0, $neg = 0, $or$cond = 0, $or$cond36 = 0, $s$0$lcssa = 0, $s$0$lcssa51 = 0, $s$038 = 0, $s$126 = 0;
	 var $s$2 = 0, $sub = 0, $sub22 = 0, $tobool = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool235 = 0, $tobool25 = 0, $tobool2524 = 0, $tobool34 = 0, $tobool36 = 0, $w$0$lcssa = 0, $w$030 = 0, $xor = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $conv1 = $c & 255;
	 $0 = $src;
	 $and33 = $0 & 3;
	 $tobool34 = ($and33|0)==(0);
	 $tobool235 = ($n|0)==(0);
	 $or$cond36 = $tobool34 | $tobool235;
	 L1: do {
	  if ($or$cond36) {
	   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool235;
	   label = 5;
	  } else {
	   $1 = $c&255;
	   $n$addr$037 = $n;$s$038 = $src;
	   while(1) {
	    $2 = HEAP8[$s$038>>0]|0;
	    $cmp = ($2<<24>>24)==($1<<24>>24);
	    if ($cmp) {
	     $n$addr$0$lcssa52 = $n$addr$037;$s$0$lcssa51 = $s$038;
	     label = 6;
	     break L1;
	    }
	    $incdec$ptr = (($s$038) + 1|0);
	    $dec = (($n$addr$037) + -1)|0;
	    $3 = $incdec$ptr;
	    $and = $3 & 3;
	    $tobool = ($and|0)==(0);
	    $tobool2 = ($dec|0)==(0);
	    $or$cond = $tobool | $tobool2;
	    if ($or$cond) {
	     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
	     label = 5;
	     break;
	    } else {
	     $n$addr$037 = $dec;$s$038 = $incdec$ptr;
	    }
	   }
	  }
	 } while(0);
	 if ((label|0) == 5) {
	  if ($tobool2$lcssa) {
	   $n$addr$3 = 0;$s$2 = $s$0$lcssa;
	  } else {
	   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa51 = $s$0$lcssa;
	   label = 6;
	  }
	 }
	 L8: do {
	  if ((label|0) == 6) {
	   $4 = HEAP8[$s$0$lcssa51>>0]|0;
	   $5 = $c&255;
	   $cmp8 = ($4<<24>>24)==($5<<24>>24);
	   if ($cmp8) {
	    $n$addr$3 = $n$addr$0$lcssa52;$s$2 = $s$0$lcssa51;
	   } else {
	    $mul = Math_imul($conv1, 16843009)|0;
	    $cmp1128 = ($n$addr$0$lcssa52>>>0)>(3);
	    L11: do {
	     if ($cmp1128) {
	      $n$addr$129 = $n$addr$0$lcssa52;$w$030 = $s$0$lcssa51;
	      while(1) {
	       $6 = HEAP32[$w$030>>2]|0;
	       $xor = $6 ^ $mul;
	       $sub = (($xor) + -16843009)|0;
	       $neg = $xor & -2139062144;
	       $and15 = $neg ^ -2139062144;
	       $and16 = $and15 & $sub;
	       $lnot = ($and16|0)==(0);
	       if (!($lnot)) {
	        $n$addr$1$lcssa = $n$addr$129;$w$0$lcssa = $w$030;
	        break L11;
	       }
	       $incdec$ptr21 = (($w$030) + 4|0);
	       $sub22 = (($n$addr$129) + -4)|0;
	       $cmp11 = ($sub22>>>0)>(3);
	       if ($cmp11) {
	        $n$addr$129 = $sub22;$w$030 = $incdec$ptr21;
	       } else {
	        $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
	        break;
	       }
	      }
	     } else {
	      $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa51;
	     }
	    } while(0);
	    $tobool2524 = ($n$addr$1$lcssa|0)==(0);
	    if ($tobool2524) {
	     $n$addr$3 = 0;$s$2 = $w$0$lcssa;
	    } else {
	     $n$addr$225 = $n$addr$1$lcssa;$s$126 = $w$0$lcssa;
	     while(1) {
	      $7 = HEAP8[$s$126>>0]|0;
	      $cmp28 = ($7<<24>>24)==($5<<24>>24);
	      if ($cmp28) {
	       $n$addr$3 = $n$addr$225;$s$2 = $s$126;
	       break L8;
	      }
	      $incdec$ptr33 = (($s$126) + 1|0);
	      $dec34 = (($n$addr$225) + -1)|0;
	      $tobool25 = ($dec34|0)==(0);
	      if ($tobool25) {
	       $n$addr$3 = 0;$s$2 = $incdec$ptr33;
	       break;
	      } else {
	       $n$addr$225 = $dec34;$s$126 = $incdec$ptr33;
	      }
	     }
	    }
	   }
	  }
	 } while(0);
	 $tobool36 = ($n$addr$3|0)!=(0);
	 $cond = $tobool36 ? $s$2 : 0;
	 STACKTOP = sp;return ($cond|0);
	}
	function _memcmp($vl,$vr,$n) {
	 $vl = $vl|0;
	 $vr = $vr|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $cmp = 0, $cond = 0, $conv5 = 0, $conv6 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr3 = 0, $l$010 = 0, $n$addr$09 = 0, $r$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool8 = ($n|0)==(0);
	 if ($tobool8) {
	  $cond = 0;
	  STACKTOP = sp;return ($cond|0);
	 } else {
	  $l$010 = $vl;$n$addr$09 = $n;$r$011 = $vr;
	 }
	 while(1) {
	  $0 = HEAP8[$l$010>>0]|0;
	  $1 = HEAP8[$r$011>>0]|0;
	  $cmp = ($0<<24>>24)==($1<<24>>24);
	  if (!($cmp)) {
	   break;
	  }
	  $dec = (($n$addr$09) + -1)|0;
	  $incdec$ptr = (($l$010) + 1|0);
	  $incdec$ptr3 = (($r$011) + 1|0);
	  $tobool = ($dec|0)==(0);
	  if ($tobool) {
	   $cond = 0;
	   label = 5;
	   break;
	  } else {
	   $l$010 = $incdec$ptr;$n$addr$09 = $dec;$r$011 = $incdec$ptr3;
	  }
	 }
	 if ((label|0) == 5) {
	  STACKTOP = sp;return ($cond|0);
	 }
	 $conv5 = $0&255;
	 $conv6 = $1&255;
	 $sub = (($conv5) - ($conv6))|0;
	 $cond = $sub;
	 STACKTOP = sp;return ($cond|0);
	}
	function _strcasecmp($_l,$_r) {
	 $_l = $_l|0;
	 $_r = $_r|0;
	 var $$pre$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call13 = 0, $call15 = 0, $call8 = 0, $cmp = 0, $cmp9 = 0, $conv = 0, $conv10 = 0, $conv12 = 0, $conv14 = 0, $conv15 = 0, $conv7 = 0;
	 var $incdec$ptr = 0, $incdec$ptr11 = 0, $l$012 = 0, $r$0$lcssa = 0, $r$013 = 0, $sub = 0, $tobool = 0, $tobool11 = 0, $tobool2 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP8[$_l>>0]|0;
	 $tobool11 = ($0<<24>>24)==(0);
	 L1: do {
	  if ($tobool11) {
	   $5 = 0;$r$0$lcssa = $_r;
	  } else {
	   $conv10 = $0&255;
	   $2 = $0;$conv15 = $conv10;$l$012 = $_l;$r$013 = $_r;
	   while(1) {
	    $1 = HEAP8[$r$013>>0]|0;
	    $tobool2 = ($1<<24>>24)==(0);
	    if ($tobool2) {
	     $5 = $2;$r$0$lcssa = $r$013;
	     break L1;
	    }
	    $cmp = ($2<<24>>24)==($1<<24>>24);
	    if (!($cmp)) {
	     $call = (_tolower($conv15)|0);
	     $3 = HEAP8[$r$013>>0]|0;
	     $conv7 = $3&255;
	     $call8 = (_tolower($conv7)|0);
	     $cmp9 = ($call|0)==($call8|0);
	     if (!($cmp9)) {
	      break;
	     }
	    }
	    $incdec$ptr = (($l$012) + 1|0);
	    $incdec$ptr11 = (($r$013) + 1|0);
	    $4 = HEAP8[$incdec$ptr>>0]|0;
	    $conv = $4&255;
	    $tobool = ($4<<24>>24)==(0);
	    if ($tobool) {
	     $5 = 0;$r$0$lcssa = $incdec$ptr11;
	     break L1;
	    } else {
	     $2 = $4;$conv15 = $conv;$l$012 = $incdec$ptr;$r$013 = $incdec$ptr11;
	    }
	   }
	   $$pre$pre = HEAP8[$l$012>>0]|0;
	   $5 = $$pre$pre;$r$0$lcssa = $r$013;
	  }
	 } while(0);
	 $conv12 = $5&255;
	 $call13 = (_tolower($conv12)|0);
	 $6 = HEAP8[$r$0$lcssa>>0]|0;
	 $conv14 = $6&255;
	 $call15 = (_tolower($conv14)|0);
	 $sub = (($call13) - ($call15))|0;
	 STACKTOP = sp;return ($sub|0);
	}
	function _strcmp($l,$r) {
	 $l = $l|0;
	 $r = $r|0;
	 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
	 var sp = 0;
	 sp = STACKTOP;
	 $0 = HEAP8[$l>>0]|0;
	 $1 = HEAP8[$r>>0]|0;
	 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
	 $tobool8 = ($0<<24>>24)==(0);
	 $or$cond9 = $cmp7 | $tobool8;
	 if ($or$cond9) {
	  $$lcssa = $0;$$lcssa6 = $1;
	 } else {
	  $l$addr$010 = $l;$r$addr$011 = $r;
	  while(1) {
	   $incdec$ptr = (($l$addr$010) + 1|0);
	   $incdec$ptr4 = (($r$addr$011) + 1|0);
	   $2 = HEAP8[$incdec$ptr>>0]|0;
	   $3 = HEAP8[$incdec$ptr4>>0]|0;
	   $cmp = ($2<<24>>24)!=($3<<24>>24);
	   $tobool = ($2<<24>>24)==(0);
	   $or$cond = $cmp | $tobool;
	   if ($or$cond) {
	    $$lcssa = $2;$$lcssa6 = $3;
	    break;
	   } else {
	    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
	   }
	  }
	 }
	 $conv5 = $$lcssa&255;
	 $conv6 = $$lcssa6&255;
	 $sub = (($conv5) - ($conv6))|0;
	 STACKTOP = sp;return ($sub|0);
	}
	function _strncasecmp($_l,$_r,$n) {
	 $_l = $_l|0;
	 $_r = $_r|0;
	 $n = $n|0;
	 var $$pre$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call11 = 0, $call17 = 0, $call19 = 0, $cmp = 0, $cmp12 = 0, $conv = 0, $conv10 = 0, $conv14 = 0, $conv16 = 0, $conv18 = 0, $conv19 = 0;
	 var $incdec$ptr = 0, $incdec$ptr14 = 0, $l$016 = 0, $n$addr$018 = 0, $n$addr$018$in = 0, $or$cond = 0, $r$0$lcssa = 0, $r$017 = 0, $retval$0 = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool115 = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($n|0)==(0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $0 = HEAP8[$_l>>0]|0;
	 $tobool115 = ($0<<24>>24)==(0);
	 L4: do {
	  if ($tobool115) {
	   $5 = 0;$r$0$lcssa = $_r;
	  } else {
	   $conv14 = $0&255;
	   $2 = $0;$conv19 = $conv14;$l$016 = $_l;$n$addr$018$in = $n;$r$017 = $_r;
	   while(1) {
	    $n$addr$018 = (($n$addr$018$in) + -1)|0;
	    $1 = HEAP8[$r$017>>0]|0;
	    $tobool3 = ($1<<24>>24)==(0);
	    $tobool5 = ($n$addr$018|0)==(0);
	    $or$cond = $tobool3 | $tobool5;
	    if ($or$cond) {
	     $5 = $2;$r$0$lcssa = $r$017;
	     break L4;
	    }
	    $cmp = ($2<<24>>24)==($1<<24>>24);
	    if (!($cmp)) {
	     $call = (_tolower($conv19)|0);
	     $3 = HEAP8[$r$017>>0]|0;
	     $conv10 = $3&255;
	     $call11 = (_tolower($conv10)|0);
	     $cmp12 = ($call|0)==($call11|0);
	     if (!($cmp12)) {
	      break;
	     }
	    }
	    $incdec$ptr = (($l$016) + 1|0);
	    $incdec$ptr14 = (($r$017) + 1|0);
	    $4 = HEAP8[$incdec$ptr>>0]|0;
	    $conv = $4&255;
	    $tobool1 = ($4<<24>>24)==(0);
	    if ($tobool1) {
	     $5 = 0;$r$0$lcssa = $incdec$ptr14;
	     break L4;
	    } else {
	     $2 = $4;$conv19 = $conv;$l$016 = $incdec$ptr;$n$addr$018$in = $n$addr$018;$r$017 = $incdec$ptr14;
	    }
	   }
	   $$pre$pre = HEAP8[$l$016>>0]|0;
	   $5 = $$pre$pre;$r$0$lcssa = $r$017;
	  }
	 } while(0);
	 $conv16 = $5&255;
	 $call17 = (_tolower($conv16)|0);
	 $6 = HEAP8[$r$0$lcssa>>0]|0;
	 $conv18 = $6&255;
	 $call19 = (_tolower($conv18)|0);
	 $sub = (($call17) - ($call19))|0;
	 $retval$0 = $sub;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function _strncmp($_l,$_r,$n) {
	 $_l = $_l|0;
	 $_r = $_r|0;
	 $n = $n|0;
	 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $conv11 = 0, $conv12 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $l$014 = 0, $n$addr$016 = 0, $n$addr$016$in = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond11 = 0, $r$0$lcssa = 0, $r$015 = 0;
	 var $retval$0 = 0, $sub = 0, $tobool = 0, $tobool1 = 0, $tobool113 = 0, label = 0, sp = 0;
	 sp = STACKTOP;
	 $tobool = ($n|0)==(0);
	 if ($tobool) {
	  $retval$0 = 0;
	  STACKTOP = sp;return ($retval$0|0);
	 }
	 $0 = HEAP8[$_l>>0]|0;
	 $tobool113 = ($0<<24>>24)==(0);
	 L4: do {
	  if ($tobool113) {
	   $4 = 0;$r$0$lcssa = $_r;
	  } else {
	   $2 = $0;$l$014 = $_l;$n$addr$016$in = $n;$r$015 = $_r;
	   while(1) {
	    $n$addr$016 = (($n$addr$016$in) + -1)|0;
	    $1 = HEAP8[$r$015>>0]|0;
	    $notlhs = ($1<<24>>24)!=(0);
	    $notrhs = ($n$addr$016|0)!=(0);
	    $or$cond$not = $notrhs & $notlhs;
	    $cmp = ($2<<24>>24)==($1<<24>>24);
	    $or$cond11 = $or$cond$not & $cmp;
	    if (!($or$cond11)) {
	     $4 = $2;$r$0$lcssa = $r$015;
	     break L4;
	    }
	    $incdec$ptr = (($l$014) + 1|0);
	    $incdec$ptr9 = (($r$015) + 1|0);
	    $3 = HEAP8[$incdec$ptr>>0]|0;
	    $tobool1 = ($3<<24>>24)==(0);
	    if ($tobool1) {
	     $4 = 0;$r$0$lcssa = $incdec$ptr9;
	     break;
	    } else {
	     $2 = $3;$l$014 = $incdec$ptr;$n$addr$016$in = $n$addr$016;$r$015 = $incdec$ptr9;
	    }
	   }
	  }
	 } while(0);
	 $conv11 = $4&255;
	 $5 = HEAP8[$r$0$lcssa>>0]|0;
	 $conv12 = $5&255;
	 $sub = (($conv11) - ($conv12))|0;
	 $retval$0 = $sub;
	 STACKTOP = sp;return ($retval$0|0);
	}
	function runPostSets() {

	}
	function _i64Subtract(a, b, c, d) {
	    a = a|0; b = b|0; c = c|0; d = d|0;
	    var l = 0, h = 0;
	    l = (a - c)>>>0;
	    h = (b - d)>>>0;
	    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
	    return ((tempRet0 = h,l|0)|0);
	}
	function _strlen(ptr) {
	    ptr = ptr|0;
	    var curr = 0;
	    curr = ptr;
	    while (((HEAP8[((curr)>>0)])|0)) {
	      curr = (curr + 1)|0;
	    }
	    return (curr - ptr)|0;
	}
	function _bitshift64Lshr(low, high, bits) {
	    low = low|0; high = high|0; bits = bits|0;
	    var ander = 0;
	    if ((bits|0) < 32) {
	      ander = ((1 << bits) - 1)|0;
	      tempRet0 = high >>> bits;
	      return (low >>> bits) | ((high&ander) << (32 - bits));
	    }
	    tempRet0 = 0;
	    return (high >>> (bits - 32))|0;
	}
	function _memcpy(dest, src, num) {

	    dest = dest|0; src = src|0; num = num|0;
	    var ret = 0;
	    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
	    ret = dest|0;
	    if ((dest&3) == (src&3)) {
	      while (dest & 3) {
	        if ((num|0) == 0) return ret|0;
	        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
	        dest = (dest+1)|0;
	        src = (src+1)|0;
	        num = (num-1)|0;
	      }
	      while ((num|0) >= 4) {
	        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
	        dest = (dest+4)|0;
	        src = (src+4)|0;
	        num = (num-4)|0;
	      }
	    }
	    while ((num|0) > 0) {
	      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
	      dest = (dest+1)|0;
	      src = (src+1)|0;
	      num = (num-1)|0;
	    }
	    return ret|0;
	}
	function _memmove(dest, src, num) {
	    dest = dest|0; src = src|0; num = num|0;
	    var ret = 0;
	    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
	      // Unlikely case: Copy backwards in a safe manner
	      ret = dest;
	      src = (src + num)|0;
	      dest = (dest + num)|0;
	      while ((num|0) > 0) {
	        dest = (dest - 1)|0;
	        src = (src - 1)|0;
	        num = (num - 1)|0;
	        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
	      }
	      dest = ret;
	    } else {
	      _memcpy(dest, src, num) | 0;
	    }
	    return dest | 0;
	}
	function _memset(ptr, value, num) {
	    ptr = ptr|0; value = value|0; num = num|0;
	    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
	    stop = (ptr + num)|0;
	    if ((num|0) >= 20) {
	      // This is unaligned, but quite large, so work hard to get to aligned settings
	      value = value & 0xff;
	      unaligned = ptr & 3;
	      value4 = value | (value << 8) | (value << 16) | (value << 24);
	      stop4 = stop & ~3;
	      if (unaligned) {
	        unaligned = (ptr + 4 - unaligned)|0;
	        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
	          HEAP8[((ptr)>>0)]=value;
	          ptr = (ptr+1)|0;
	        }
	      }
	      while ((ptr|0) < (stop4|0)) {
	        HEAP32[((ptr)>>2)]=value4;
	        ptr = (ptr+4)|0;
	      }
	    }
	    while ((ptr|0) < (stop|0)) {
	      HEAP8[((ptr)>>0)]=value;
	      ptr = (ptr+1)|0;
	    }
	    return (ptr-num)|0;
	}
	function _bitshift64Shl(low, high, bits) {
	    low = low|0; high = high|0; bits = bits|0;
	    var ander = 0;
	    if ((bits|0) < 32) {
	      ander = ((1 << bits) - 1)|0;
	      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
	      return low << bits;
	    }
	    tempRet0 = low << (bits - 32);
	    return 0;
	}
	function _i64Add(a, b, c, d) {
	    /*
	      x = a + b*2^32
	      y = c + d*2^32
	      result = l + h*2^32
	    */
	    a = a|0; b = b|0; c = c|0; d = d|0;
	    var l = 0, h = 0;
	    l = (a + c)>>>0;
	    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
	    return ((tempRet0 = h,l|0)|0);
	}
	function _strncpy(pdest, psrc, num) {
	    pdest = pdest|0; psrc = psrc|0; num = num|0;
	    var padding = 0, curr = 0, i = 0;
	    while ((i|0) < (num|0)) {
	      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
	      HEAP8[(((pdest)+(i))>>0)]=curr;
	      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
	      i = (i+1)|0;
	    }
	    return pdest|0;
	}
	function _strcpy(pdest, psrc) {
	    pdest = pdest|0; psrc = psrc|0;
	    var i = 0;
	    do {
	      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
	      i = (i+1)|0;
	    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
	    return pdest|0;
	}
	function _bitshift64Ashr(low, high, bits) {
	    low = low|0; high = high|0; bits = bits|0;
	    var ander = 0;
	    if ((bits|0) < 32) {
	      ander = ((1 << bits) - 1)|0;
	      tempRet0 = high >> bits;
	      return (low >>> bits) | ((high&ander) << (32 - bits));
	    }
	    tempRet0 = (high|0) < 0 ? -1 : 0;
	    return (high >> (bits - 32))|0;
	  }
	function _llvm_ctlz_i32(x) {
	    x = x|0;
	    var ret = 0;
	    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
	    if ((ret|0) < 8) return ret|0;
	    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
	    if ((ret|0) < 8) return (ret + 8)|0;
	    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
	    if ((ret|0) < 8) return (ret + 16)|0;
	    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
	  }

	function _llvm_cttz_i32(x) {
	    x = x|0;
	    var ret = 0;
	    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
	    if ((ret|0) < 8) return ret|0;
	    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
	    if ((ret|0) < 8) return (ret + 8)|0;
	    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
	    if ((ret|0) < 8) return (ret + 16)|0;
	    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
	  }

	// ======== compiled code from system/lib/compiler-rt , see readme therein
	function ___muldsi3($a, $b) {
	  $a = $a | 0;
	  $b = $b | 0;
	  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
	  $1 = $a & 65535;
	  $2 = $b & 65535;
	  $3 = Math_imul($2, $1) | 0;
	  $6 = $a >>> 16;
	  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
	  $11 = $b >>> 16;
	  $12 = Math_imul($11, $1) | 0;
	  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
	}
	function ___divdi3($a$0, $a$1, $b$0, $b$1) {
	  $a$0 = $a$0 | 0;
	  $a$1 = $a$1 | 0;
	  $b$0 = $b$0 | 0;
	  $b$1 = $b$1 | 0;
	  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
	  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
	  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
	  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
	  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
	  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
	  $4$1 = tempRet0;
	  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
	  $7$0 = $2$0 ^ $1$0;
	  $7$1 = $2$1 ^ $1$1;
	  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
	  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
	  return (tempRet0 = tempRet0, $10$0) | 0;
	}
	function ___remdi3($a$0, $a$1, $b$0, $b$1) {
	  $a$0 = $a$0 | 0;
	  $a$1 = $a$1 | 0;
	  $b$0 = $b$0 | 0;
	  $b$1 = $b$1 | 0;
	  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
	  __stackBase__ = STACKTOP;
	  STACKTOP = STACKTOP + 8 | 0;
	  $rem = __stackBase__ | 0;
	  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
	  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
	  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
	  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
	  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
	  $4$1 = tempRet0;
	  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
	  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
	  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
	  $10$1 = tempRet0;
	  STACKTOP = __stackBase__;
	  return (tempRet0 = $10$1, $10$0) | 0;
	}
	function ___muldi3($a$0, $a$1, $b$0, $b$1) {
	  $a$0 = $a$0 | 0;
	  $a$1 = $a$1 | 0;
	  $b$0 = $b$0 | 0;
	  $b$1 = $b$1 | 0;
	  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
	  $x_sroa_0_0_extract_trunc = $a$0;
	  $y_sroa_0_0_extract_trunc = $b$0;
	  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
	  $1$1 = tempRet0;
	  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
	  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
	}
	function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
	  $a$0 = $a$0 | 0;
	  $a$1 = $a$1 | 0;
	  $b$0 = $b$0 | 0;
	  $b$1 = $b$1 | 0;
	  var $1$0 = 0;
	  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
	  return (tempRet0 = tempRet0, $1$0) | 0;
	}
	function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
	  $a$0 = $a$0 | 0;
	  $a$1 = $a$1 | 0;
	  $b$0 = $b$0 | 0;
	  $b$1 = $b$1 | 0;
	  var $rem = 0, __stackBase__ = 0;
	  __stackBase__ = STACKTOP;
	  STACKTOP = STACKTOP + 8 | 0;
	  $rem = __stackBase__ | 0;
	  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
	  STACKTOP = __stackBase__;
	  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
	}
	function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
	  $a$0 = $a$0 | 0;
	  $a$1 = $a$1 | 0;
	  $b$0 = $b$0 | 0;
	  $b$1 = $b$1 | 0;
	  $rem = $rem | 0;
	  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
	  $n_sroa_0_0_extract_trunc = $a$0;
	  $n_sroa_1_4_extract_shift$0 = $a$1;
	  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
	  $d_sroa_0_0_extract_trunc = $b$0;
	  $d_sroa_1_4_extract_shift$0 = $b$1;
	  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
	  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
	    $4 = ($rem | 0) != 0;
	    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
	      if ($4) {
	        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
	        HEAP32[$rem + 4 >> 2] = 0;
	      }
	      $_0$1 = 0;
	      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
	      return (tempRet0 = $_0$1, $_0$0) | 0;
	    } else {
	      if (!$4) {
	        $_0$1 = 0;
	        $_0$0 = 0;
	        return (tempRet0 = $_0$1, $_0$0) | 0;
	      }
	      HEAP32[$rem >> 2] = $a$0 & -1;
	      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
	      $_0$1 = 0;
	      $_0$0 = 0;
	      return (tempRet0 = $_0$1, $_0$0) | 0;
	    }
	  }
	  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
	  do {
	    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
	      if ($17) {
	        if (($rem | 0) != 0) {
	          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
	          HEAP32[$rem + 4 >> 2] = 0;
	        }
	        $_0$1 = 0;
	        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
	        return (tempRet0 = $_0$1, $_0$0) | 0;
	      }
	      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
	        if (($rem | 0) != 0) {
	          HEAP32[$rem >> 2] = 0;
	          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
	        }
	        $_0$1 = 0;
	        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
	        return (tempRet0 = $_0$1, $_0$0) | 0;
	      }
	      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
	      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
	        if (($rem | 0) != 0) {
	          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
	          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
	        }
	        $_0$1 = 0;
	        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
	        return (tempRet0 = $_0$1, $_0$0) | 0;
	      }
	      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
	      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
	      if ($51 >>> 0 <= 30) {
	        $57 = $51 + 1 | 0;
	        $58 = 31 - $51 | 0;
	        $sr_1_ph = $57;
	        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
	        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
	        $q_sroa_0_1_ph = 0;
	        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
	        break;
	      }
	      if (($rem | 0) == 0) {
	        $_0$1 = 0;
	        $_0$0 = 0;
	        return (tempRet0 = $_0$1, $_0$0) | 0;
	      }
	      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
	      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
	      $_0$1 = 0;
	      $_0$0 = 0;
	      return (tempRet0 = $_0$1, $_0$0) | 0;
	    } else {
	      if (!$17) {
	        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
	        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
	        if ($119 >>> 0 <= 31) {
	          $125 = $119 + 1 | 0;
	          $126 = 31 - $119 | 0;
	          $130 = $119 - 31 >> 31;
	          $sr_1_ph = $125;
	          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
	          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
	          $q_sroa_0_1_ph = 0;
	          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
	          break;
	        }
	        if (($rem | 0) == 0) {
	          $_0$1 = 0;
	          $_0$0 = 0;
	          return (tempRet0 = $_0$1, $_0$0) | 0;
	        }
	        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
	        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
	        $_0$1 = 0;
	        $_0$0 = 0;
	        return (tempRet0 = $_0$1, $_0$0) | 0;
	      }
	      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
	      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
	        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
	        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
	        $89 = 64 - $88 | 0;
	        $91 = 32 - $88 | 0;
	        $92 = $91 >> 31;
	        $95 = $88 - 32 | 0;
	        $105 = $95 >> 31;
	        $sr_1_ph = $88;
	        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
	        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
	        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
	        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
	        break;
	      }
	      if (($rem | 0) != 0) {
	        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
	        HEAP32[$rem + 4 >> 2] = 0;
	      }
	      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
	        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
	        $_0$0 = 0 | $a$0 & -1;
	        return (tempRet0 = $_0$1, $_0$0) | 0;
	      } else {
	        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
	        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
	        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
	        return (tempRet0 = $_0$1, $_0$0) | 0;
	      }
	    }
	  } while (0);
	  if (($sr_1_ph | 0) == 0) {
	    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
	    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
	    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
	    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
	    $carry_0_lcssa$1 = 0;
	    $carry_0_lcssa$0 = 0;
	  } else {
	    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
	    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
	    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
	    $137$1 = tempRet0;
	    $q_sroa_1_1198 = $q_sroa_1_1_ph;
	    $q_sroa_0_1199 = $q_sroa_0_1_ph;
	    $r_sroa_1_1200 = $r_sroa_1_1_ph;
	    $r_sroa_0_1201 = $r_sroa_0_1_ph;
	    $sr_1202 = $sr_1_ph;
	    $carry_0203 = 0;
	    while (1) {
	      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
	      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
	      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
	      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
	      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
	      $150$1 = tempRet0;
	      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
	      $152 = $151$0 & 1;
	      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
	      $r_sroa_0_0_extract_trunc = $154$0;
	      $r_sroa_1_4_extract_trunc = tempRet0;
	      $155 = $sr_1202 - 1 | 0;
	      if (($155 | 0) == 0) {
	        break;
	      } else {
	        $q_sroa_1_1198 = $147;
	        $q_sroa_0_1199 = $149;
	        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
	        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
	        $sr_1202 = $155;
	        $carry_0203 = $152;
	      }
	    }
	    $q_sroa_1_1_lcssa = $147;
	    $q_sroa_0_1_lcssa = $149;
	    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
	    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
	    $carry_0_lcssa$1 = 0;
	    $carry_0_lcssa$0 = $152;
	  }
	  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
	  $q_sroa_0_0_insert_ext75$1 = 0;
	  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
	  if (($rem | 0) != 0) {
	    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
	    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
	  }
	  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
	  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
	  return (tempRet0 = $_0$1, $_0$0) | 0;
	}
	// =======================================================================



	// EMSCRIPTEN_END_FUNCS


	    function dynCall_iiii(index,a1,a2,a3) {
	      index = index|0;
	      a1=a1|0; a2=a2|0; a3=a3|0;
	      return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
	    }


	    function dynCall_vi(index,a1) {
	      index = index|0;
	      a1=a1|0;
	      FUNCTION_TABLE_vi[index&15](a1|0);
	    }


	    function dynCall_vii(index,a1,a2) {
	      index = index|0;
	      a1=a1|0; a2=a2|0;
	      FUNCTION_TABLE_vii[index&0](a1|0,a2|0);
	    }


	    function dynCall_ii(index,a1) {
	      index = index|0;
	      a1=a1|0;
	      return FUNCTION_TABLE_ii[index&15](a1|0)|0;
	    }


	    function dynCall_viii(index,a1,a2,a3) {
	      index = index|0;
	      a1=a1|0; a2=a2|0; a3=a3|0;
	      FUNCTION_TABLE_viii[index&7](a1|0,a2|0,a3|0);
	    }


	    function dynCall_v(index) {
	      index = index|0;

	      FUNCTION_TABLE_v[index&15]();
	    }


	    function dynCall_iii(index,a1,a2) {
	      index = index|0;
	      a1=a1|0; a2=a2|0;
	      return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
	    }


	    function dynCall_viiii(index,a1,a2,a3,a4) {
	      index = index|0;
	      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
	      FUNCTION_TABLE_viiii[index&1](a1|0,a2|0,a3|0,a4|0);
	    }

	function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
	  function b1(p0) { p0 = p0|0; nullFunc_vi(1); }
	  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(2); }
	  function b3(p0) { p0 = p0|0; nullFunc_ii(3);return 0; }
	  function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4); }
	  function b5() { ; nullFunc_v(5); }
	  function b6(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0; }
	  function b7(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7); }
	  // EMSCRIPTEN_END_FUNCS
	  var FUNCTION_TABLE_iiii = [b0,b0,_sn_write,b0,b0,_xmms_ipc_tcp_read,_xmms_ipc_tcp_write,b0,b0,_xmms_ipc_usocket_read,_xmms_ipc_usocket_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,_do_read,_do_read134,_do_read136,b0,b0,b0,b0,b0,b0
	  ,b0,b0,b0];
	  var FUNCTION_TABLE_vi = [b1,b1,b1,b1,b1,b1,b1,_xmms_ipc_tcp_destroy,b1,b1,b1,_xmms_ipc_usocket_destroy,b1,b1,b1,b1];
	  var FUNCTION_TABLE_vii = [b2];
	  var FUNCTION_TABLE_ii = [b3,b3,b3,___strdup,b3,b3,b3,b3,_xmms_ipc_tcp_accept,b3,b3,b3,_xmms_ipc_usocket_accept,b3,_xmmsv_coll_default_parse_build,b3];
	  var FUNCTION_TABLE_viii = [b4,b4,b4,b4,__sum_len_string_dict,b4,b4,b4];
	  var FUNCTION_TABLE_v = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_xmmsc_mainloop_emscripten_loop];
	  var FUNCTION_TABLE_iii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_xmmsv_coll_default_parse_tokens,b6,b6,_xmmsc_emscripten_result_cb,_ignore_err,_sort,_tre_compare_items,b6,b6,b6,b6,b6,b6,b6,b6,b6
	  ,b6,b6,b6];
	  var FUNCTION_TABLE_viiii = [b7,_xmmsc_log_default_handler];

	    return { _iswxdigit_l: _iswxdigit_l, ___xmmsv_null_to_none397: ___xmmsv_null_to_none397, __xmmsv_coll_new: __xmmsv_coll_new, _xmmsc_playlist_radd: _xmmsc_playlist_radd, _xmms_sleep_ms: _xmms_sleep_ms, _xmmsv_coll_idlist_get_index_int32: _xmmsv_coll_idlist_get_index_int32, _erand48: _erand48, _xmmsc_result_notifier_add: _xmmsc_result_notifier_add, _ffs: _ffs, _iswalnum_l: _iswalnum_l, _memchr: _memchr, _xmmsc_playlist_rinsert: _xmmsc_playlist_rinsert, _xmmsc_result_disconnect: _xmmsc_result_disconnect, _warnx: _warnx, _xmmsc_result_run_callback: _xmmsc_result_run_callback, _xmmsv_coll_idlist_get: _xmmsv_coll_idlist_get, _xmmsv_list_iter_tell: _xmmsv_list_iter_tell, _mbrlen: _mbrlen, _xmmsc_ipc_result_unregister: _xmmsc_ipc_result_unregister, _drand48: _drand48, _string_intadd: _string_intadd, _ilogb: _ilogb, _mallinfo: _mallinfo, _iswblank: _iswblank, _check_drawtime: _check_drawtime, _xmmsc_broadcast_config_value_changed: _xmmsc_broadcast_config_value_changed, _x_list_index: _x_list_index, _strtoull: _strtoull, _xmmsc_medialib_entry_property_remove_with_source: _xmmsc_medialib_entry_property_remove_with_source, _xmmsc_bindata_list: _xmmsc_bindata_list, _xmmsc_result_notifier_set_default_full: _xmmsc_result_notifier_set_default_full, _coll_parse_expr: _coll_parse_expr, _isdigit_l: _isdigit_l, __xmmsv_coll_free: __xmmsv_coll_free, _xmmsv_serialize: _xmmsv_serialize, _xmmsc_result_notifier_set_raw: _xmmsc_result_notifier_set_raw, _xmmsv_build_metadata: _xmmsv_build_metadata, _xmms_ipc_client_init: _xmms_ipc_client_init, _xmmsv_deserialize: _xmmsv_deserialize, _strstrsplit: _strstrsplit, _xmmsc_coll_idlist_from_playlist_file: _xmmsc_coll_idlist_from_playlist_file, _xmmsc_coll_query: _xmmsc_coll_query, _vsscanf: _vsscanf, _xmms_ipc_msg_get_length: _xmms_ipc_msg_get_length, _coll_parse_orop: _coll_parse_orop, _xmmsc_medialib_get_info: _xmmsc_medialib_get_info, _wctomb: _wctomb, __xmmsv_list_flatten: __xmmsv_list_flatten, _coll_parse_sequence: _coll_parse_sequence, _find_match_index: _find_match_index, _setup_shm_handle: _setup_shm_handle, _xmms_ipc_usocket_destroy: _xmms_ipc_usocket_destroy, _independent_calloc: _independent_calloc, _wmemcmp: _wmemcmp, _iswprint: _iswprint, _xmmsv_coll_operands_get: _xmmsv_coll_operands_get, _xmmsc_log: _xmmsc_log, _strncmp: _strncmp, _x_list_alloc: _x_list_alloc, _iswalnum: _iswalnum, _xmmsc_result_callback_new_raw: _xmmsc_result_callback_new_raw, _xmms_ipc_tcp_accept: _xmms_ipc_tcp_accept, __internal_put_on_bb_error: __internal_put_on_bb_error, _xmmsv_list_index_of: _xmmsv_list_index_of, _xmms_getaddrinfo: _xmms_getaddrinfo, _xmmsv_new_float: _xmmsv_new_float, _x_queue_peek_tail: _x_queue_peek_tail, _y0f: _y0f, _ialloc: _ialloc, _bulk_free: _bulk_free, _xmmsc_playlist_add_idlist: _xmmsc_playlist_add_idlist, _cleanup_shm: _cleanup_shm, _xmmsv_list_iter_entry_int32: _xmmsv_list_iter_entry_int32, _xmmsv_list_append_string: _xmmsv_list_append_string, _xmmsv_get_int32: _xmmsv_get_int32, _scalbn: _scalbn, ___sin: ___sin, _xmmsv_list_set: _xmmsv_list_set, _xmmsv_new_coll: _xmmsv_new_coll, _independent_comalloc: _independent_comalloc, ___towrite: ___towrite, ___xmmsv_null_to_none379: ___xmmsv_null_to_none379, _iswpunct: _iswpunct, _xmmsc_config_register_value: _xmmsc_config_register_value, _x_list_nth_prev: _x_list_nth_prev, ___xmmsv_null_to_none373: ___xmmsv_null_to_none373, _wcscpy: _wcscpy, _snprintf: _snprintf, _toascii: _toascii, _xmmsc_broadcast_collection_changed: _xmmsc_broadcast_collection_changed, _xmmsv_dict_set_int: _xmmsv_dict_set_int, _xmmsv_list_get_float: _xmmsv_list_get_float, _wcsspn: _wcsspn, _xmmsc_ipc_need_out_callback_set: _xmmsc_ipc_need_out_callback_set, _xmmsc_result_get_class: _xmmsc_result_get_class, ___stpcpy: ___stpcpy, _xmmsv_coll_parse: _xmmsv_coll_parse, _iswprint_l: _iswprint_l, ___xmmsv_identity_const_charp: ___xmmsv_identity_const_charp, _xmmsc_result_c2c_set: _xmmsc_result_c2c_set, _xmms_ipc_tcp_server_init: _xmms_ipc_tcp_server_init, _xmmsv_build_cluster_dict: _xmmsv_build_cluster_dict, _strtoul: _strtoul, _xmmsc_visualization_properties_set: _xmmsc_visualization_properties_set, _wcspbrk: _wcspbrk, _xmmsc_ipc_msg_write: _xmmsc_ipc_msg_write, __internal_get_from_bb_bin_alloc: __internal_get_from_bb_bin_alloc, _xmmsc_result_notifier_set_c2c_full: _xmmsc_result_notifier_set_c2c_full, _strfmon: _strfmon, _xmmsc_medialib_entry_property_remove: _xmmsc_medialib_entry_property_remove, _xmmsv_new_bin: _xmmsv_new_bin, _xmmsv_get_float: _xmmsv_get_float, _mbsrtowcs: _mbsrtowcs, _xmms_ipc_usocket_accept: _xmms_ipc_usocket_accept, _wcswcs: _wcswcs, _xmmsc_playlist_add_url: _xmmsc_playlist_add_url, _xmmsc_playlist_current_pos: _xmmsc_playlist_current_pos, __internal_put_on_bb_bin: __internal_put_on_bb_bin, _match_bracket: _match_bracket, _isprint: _isprint, _malloc_footprint_limit: _malloc_footprint_limit, _do_methodcall: _do_methodcall, _regfree: _regfree, _iscntrl_l: _iscntrl_l, _wmemmove: _wmemmove, _xmms_ipc_msg_set_object: _xmms_ipc_msg_set_object, __internal_put_on_bb_value_of_type: __internal_put_on_bb_value_of_type, _xmmsv_dict_iter_pair_float: _xmmsv_dict_iter_pair_float, _verr: _verr, ___intscan: ___intscan, _x_list_insert_before: _x_list_insert_before, _xmmsv_coll_idlist_insert: _xmmsv_coll_idlist_insert, _xmmsc_broadcast_mediainfo_reader_status: _xmmsc_broadcast_mediainfo_reader_status, _wcstombs: _wcstombs, _tre_make_trans: _tre_make_trans, _xmmsv_dict_iter_set_string: _xmmsv_dict_iter_set_string, ___wcscoll_l: ___wcscoll_l, _xmmsv_get_bin: _xmmsv_get_bin, _x_list_last: _x_list_last, _net2ts: _net2ts, _xmmsv_build_count: _xmmsv_build_count, _xmmsc_medialib_add_entry: _xmmsc_medialib_add_entry, _xmms_valist_to_strlist: _xmms_valist_to_strlist, __xmmsv_dict_resize: __xmmsv_dict_resize, _xmmsc_result_notifier_set_raw_full: _xmmsc_result_notifier_set_raw_full, _wcscoll: _wcscoll, ___xmmsv_identity_xmmsv: ___xmmsv_identity_xmmsv, _xmms_sockets_initialize: _xmms_sockets_initialize, _tre_add_tag_right: _tre_add_tag_right, _vwarnx: _vwarnx, _strtoll: _strtoll, _strtoumax: _strtoumax, _xmmsv_coll_unref: _xmmsv_coll_unref, ___uflow: ___uflow, _strtold: _strtold, _xmmsc_playlist_sort: _xmmsc_playlist_sort, _xmmsv_coll_operands_set: _xmmsv_coll_operands_set, ___xmmsv_null_to_none454: ___xmmsv_null_to_none454, _internal_memalign: _internal_memalign, _wmemset: _wmemset, __xmmsv_list_position_normalize: __xmmsv_list_position_normalize, _xmmsc_medialib_import_path: _xmmsc_medialib_import_path, ___wcsxfrm_l: ___wcsxfrm_l, _isalpha_l: _isalpha_l, _xmmsc_log_handler_get: _xmmsc_log_handler_get, _xmmsc_send_msg_no_arg: _xmmsc_send_msg_no_arg, _iscntrl: _iscntrl, _xmmsc_playlist_insert_encoded: _xmmsc_playlist_insert_encoded, _tre_parse: _tre_parse, _realloc_in_place: _realloc_in_place, _mrand48: _mrand48, _coll_parse_andop: _coll_parse_andop, _xmmsv_bitbuffer_end: _xmmsv_bitbuffer_end, _xmmsv_list_set_int: _xmmsv_list_set_int, _lcong48: _lcong48, _xmms_ipc_tcp_read: _xmms_ipc_tcp_read, _xmmsc_ipc_result_register: _xmmsc_ipc_result_register, _iswctype_l: _iswctype_l, _ispunct: _ispunct, _jn: _jn, _malloc: _malloc, _xmmsv_dict_iter_set: _xmmsv_dict_iter_set, _xmmsc_result_restart: _xmmsc_result_restart, _memmove: _memmove, _malloc_max_footprint: _malloc_max_footprint, _err: _err, _xmmsc_playback_status: _xmmsc_playback_status, _wcwidth: _wcwidth, _xmmsv_list_set_string: _xmmsv_list_set_string, _malloc_footprint: _malloc_footprint, _xmms_socket_valid: _xmms_socket_valid, _asprintf: _asprintf, _vsnprintf: _vsnprintf, _strtoul_l: _strtoul_l, _source_match_pattern: _source_match_pattern, _xmmsv_dict_iter_pair_int32: _xmmsv_dict_iter_pair_int32, _lgamma: _lgamma, _xmms_ipc_msg_new: _xmms_ipc_msg_new, _xmmsv_unref: _xmmsv_unref, _strlcpy: _strlcpy, _xmmsc_bindata_retrieve: _xmmsc_bindata_retrieve, _xmmsc_broadcast_playlist_loaded: _xmmsc_broadcast_playlist_loaded, __xmmsv_utf8_charlen: __xmmsv_utf8_charlen, _xmmsc_playlist_insert_url: _xmmsc_playlist_insert_url, _xmmsv_list_remove: _xmmsv_list_remove, _xmmsv_coll_idlist_move: _xmmsv_coll_idlist_move, _xmms_ipc_msg_read_transport: _xmms_ipc_msg_read_transport, _wcslen: _wcslen, _xmmsc_ipc_init: _xmmsc_ipc_init, _xmmsc_medialib_encode_url_full: _xmmsc_medialib_encode_url_full, _xmmsv_dict_entry_get_string: _xmmsv_dict_entry_get_string, _sscanf: _sscanf, _x_queue_pop_tail: _x_queue_pop_tail, _iswdigit: _iswdigit, _isalnum_l: _isalnum_l, _coll_parse_unaryfilter: _coll_parse_unaryfilter, _xmmsc_playlist_set_next: _xmmsc_playlist_set_next, _MUSL_vfprintf: _MUSL_vfprintf, _coll_append_universe: _coll_append_universe, _setup_udp_prepare: _setup_udp_prepare, _malloc_stats: _malloc_stats, _xmmsc_disconnect_callback_set_full: _xmmsc_disconnect_callback_set_full, _wcsncmp: _wcsncmp, _strcmp: _strcmp, _xmmsv_list_iter_first: _xmmsv_list_iter_first, _strncasecmp: _strncasecmp, _memset: _memset, _xmmsv_list_clear: _xmmsv_list_clear, __xmmsv_dict_insert: __xmmsv_dict_insert, _xmmsv_build_organize: _xmmsv_build_organize, _xmmsc_visualization_start: _xmmsc_visualization_start, _xmmsv_list_iter_entry_coll: _xmmsv_list_iter_entry_coll, _towctrans_l: _towctrans_l, _xmmsv_coll_add_limit_operator: _xmmsv_coll_add_limit_operator, _xmmsv_new_int: _xmmsv_new_int, _xmmsc_medialib_entry_property_set_int_with_source: _xmmsc_medialib_entry_property_set_int_with_source, _wcsxfrm_l: _wcsxfrm_l, _xmmsc_result_wait: _xmmsc_result_wait, _wcschr: _wcschr, _pat_next: _pat_next, _ynf: _ynf, _xmms_ipc_transport_destroy: _xmms_ipc_transport_destroy, _lgammal: _lgammal, _xmmsc_io_need_out_callback_set: _xmmsc_io_need_out_callback_set, _xmmsv_coll_idlist_append: _xmmsv_coll_idlist_append, __internal_get_from_bb_float: __internal_get_from_bb_float, _read_do_shm: _read_do_shm, _wcrtomb: _wcrtomb, _xmmsv_coll_ref: _xmmsv_coll_ref, _isdigit: _isdigit, _xmmsv_list_iter_insert: _xmmsv_list_iter_insert, _ispunct_l: _ispunct_l, _xmmsv_get_type: _xmmsv_get_type, _xmms_ipc_msg_write_transport: _xmms_ipc_msg_write_transport, _xmmsv_list_get_int32: _xmmsv_list_get_int32, _coll_parse_prop: _coll_parse_prop, _strsep: _strsep, _xmmsv_dict_iter_explicit_destroy: _xmmsv_dict_iter_explicit_destroy, _trinkle: _trinkle, _xmmsv_new_none: _xmmsv_new_none, _xmmsc_visualization_errored: _xmmsc_visualization_errored, ___lgammal_r: ___lgammal_r, _tre_match_empty: _tre_match_empty, _coll_parse_filter: _coll_parse_filter, _xmms_dump_stack: _xmms_dump_stack, _xmmsc_ipc_io_out: _xmmsc_ipc_io_out, ___strcoll_l: ___strcoll_l, _xmmsc_send_hello: _xmmsc_send_hello, _coll_parse_notop: _coll_parse_notop, _iswgraph_l: _iswgraph_l, ___xmmsv_null_to_none: ___xmmsv_null_to_none, _xmmsc_playlist_load: _xmmsc_playlist_load, _xmmsv_dict_entry_get_int64: _xmmsv_dict_entry_get_int64, ___xmmsv_identity_xmmsv350: ___xmmsv_identity_xmmsv350, ___xmmsv_identity_xmmsv356: ___xmmsv_identity_xmmsv356, _xmmsv_list_set_coll: _xmmsv_list_set_coll, _srandom: _srandom, _xmmsv_bitbuffer_pos: _xmmsv_bitbuffer_pos, _vwprintf: _vwprintf, _tre_add_tags: _tre_add_tags, _fcvt: _fcvt, _vswprintf: _vswprintf, _xmms_default_ipcpath_get: _xmms_default_ipcpath_get, _wcscat: _wcscat, _xmmsv_list_get_string: _xmmsv_list_get_string, _strtod_l: _strtod_l, _packet_init_data: _packet_init_data, _xmmsc_unref: _xmmsc_unref, _ecvt: _ecvt, _xmmsc_result_seterror: _xmmsc_result_seterror, _getopt: _getopt, _xmmsv_list_iter_insert_coll: _xmmsv_list_iter_insert_coll, __xmmsv_list_append: __xmmsv_list_append, ___lgammaf_r: ___lgammaf_r, _xmmsv_dict_iter_valid: _xmmsv_dict_iter_valid, ___strxfrm_l: ___strxfrm_l, _xmmsc_broadcast_medialib_entry_updated: _xmmsc_broadcast_medialib_entry_updated, _malloc_trim: _malloc_trim, _coll_token_new: _coll_token_new, _xmmsv_new_error: _xmmsv_new_error, _ignore_err: _ignore_err, _regcomp: _regcomp, _xmmsc_playlist_insert_args: _xmmsc_playlist_insert_args, _strupr: _strupr, _xmms_socket_set_nonblock: _xmms_socket_set_nonblock, __xmmsv_dict_free: __xmmsv_dict_free, _j1: _j1, _common70: _common70, _xmmsc_result_free: _xmmsc_result_free, _isblank: _isblank, _x_list_foreach: _x_list_foreach, _isupper: _isupper, __xmmsv_list_free: __xmmsv_list_free, _rand: _rand, _vasprintf: _vasprintf, _free: _free, _xmmsv_list_get: _xmmsv_list_get, _vstrfmon_l: _vstrfmon_l, _xmmsc_playlist_insert_id: _xmmsc_playlist_insert_id, _packet_init_timing: _packet_init_timing, _xmmsc_medialib_path_import_encoded: _xmmsc_medialib_path_import_encoded, _coll_parse_prepare: _coll_parse_prepare, _xmmsc_result_new: _xmmsc_result_new, _x_list_reverse: _x_list_reverse, ___xmmsv_null_to_none484: ___xmmsv_null_to_none484, _xmmsc_playback_seek_ms: _xmmsc_playback_seek_ms, _xmmsc_result_callback_new_default: _xmmsc_result_callback_new_default, _strstr: _strstr, _xmmsc_coll_list: _xmmsc_coll_list, _xmmsc_bindata_remove: _xmmsc_bindata_remove, _verrx: _verrx, _xmms_ipc_msg_set_cookie: _xmms_ipc_msg_set_cookie, _xmmsc_io_fd_get: _xmmsc_io_fd_get, _xmmsv_bitbuffer_new: _xmmsv_bitbuffer_new, _xmmsv_coll_is_type: _xmmsv_coll_is_type, _do_read134: _do_read134, _strtok_r: _strtok_r, _xmmsv_build_list_va: _xmmsv_build_list_va, _xmmsv_get_string: _xmmsv_get_string, _xmmsc_playlist_remove: _xmmsc_playlist_remove, _xmmsv_list_get_coll: _xmmsv_list_get_coll, _xmmsc_mainloop_emscripten_loop: _xmmsc_mainloop_emscripten_loop, __xmmsc_medialib_verify_url: __xmmsc_medialib_verify_url, _wcstoumax: _wcstoumax, _xmmsc_playlist_move_entry: _xmmsc_playlist_move_entry, __internal_get_from_bb_value_dict_alloc: __internal_get_from_bb_value_dict_alloc, _do_read: _do_read, _strndup: _strndup, _xmmsc_result_get_connection: _xmmsc_result_get_connection, _xmmsv_dict_set_string: _xmmsv_dict_set_string, _xmmsc_visualization_init_handle: _xmmsc_visualization_init_handle, _x_queue_peek_head: _x_queue_peek_head, _mbstowcs: _mbstowcs, _atoll: _atoll, _mempcpy: _mempcpy, _xmmsc_playback_tickle: _xmmsc_playback_tickle, _xmmsc_broadcast_quit: _xmmsc_broadcast_quit, _xmmsc_broadcast_playback_status: _xmmsc_broadcast_playback_status, _globfree: _globfree, _iswpunct_l: _iswpunct_l, _tre_copy_ast: _tre_copy_ast, _wmemcpy: _wmemcpy, ___tre_mem_destroy: ___tre_mem_destroy, _setup_udp_handle: _setup_udp_handle, _bzero: _bzero, _xmmsc_signal_mediainfo_reader_unindexed: _xmmsc_signal_mediainfo_reader_unindexed, _xmmsc_broadcast_playlist_changed: _xmmsc_broadcast_playlist_changed, _strchrsplit: _strchrsplit, _rand_r: _rand_r, _logb: _logb, _mbsnrtowcs: _mbsnrtowcs, __internal_put_on_bb_int64: __internal_put_on_bb_int64, _btowc: _btowc, _xmmsc_playlist_create: _xmmsc_playlist_create, _xmmsv_coll_attribute_remove: _xmmsv_coll_attribute_remove, _xmmsv_build_list: _xmmsv_build_list, __xmmsv_dict_search: __xmmsv_dict_search, _xmmsc_disconnect_callback_set: _xmmsc_disconnect_callback_set, _x_vasprintf: _x_vasprintf, _xmmsv_dict_iter_pair_int64: _xmmsv_dict_iter_pair_int64, _xmmsc_ref: _xmmsc_ref, _wcsnlen: _wcsnlen, _xmmsc_medialib_remove_entry: _xmmsc_medialib_remove_entry, _x_list_prepend: _x_list_prepend, _xmmsv_coll_attribute_get_int32: _xmmsv_coll_attribute_get_int32, _wprintf_core: _wprintf_core, _xmmsc_coll_sync: _xmmsc_coll_sync, _xmmsv_get_dict_iter: _xmmsv_get_dict_iter, _xmmsv_list_iter_insert_string: _xmmsv_list_iter_insert_string, _xmmsv_list_restrict_type: _xmmsv_list_restrict_type, __internal_put_on_bb_value_list: __internal_put_on_bb_value_list, _xmmsv_coll_attribute_set_value: _xmmsv_coll_attribute_set_value, _errx: _errx, _xmmsc_playlist_current_active: _xmmsc_playlist_current_active, _xmmsc_coll_rename: _xmmsc_coll_rename, _xmmsc_playback_playtime: _xmmsc_playback_playtime, _posix_memalign: _posix_memalign, __internal_get_from_bb_data: __internal_get_from_bb_data, _iswcntrl: _iswcntrl, _strtold_l: _strtold_l, __xmmsv_dict_remove: __xmmsv_dict_remove, _setup_shm_prepare: _setup_shm_prepare, _xmmsc_io_need_out_callback_set_full: _xmmsc_io_need_out_callback_set_full, _xmmsv_list_foreach: _xmmsv_list_foreach, _tre_set_union: _tre_set_union, _coll_parse_posseq: _coll_parse_posseq, _xmmsv_list_append_int: _xmmsv_list_append_int, _toupper_l: _toupper_l, _xmmsv_is_type: _xmmsv_is_type, _xmmsc_medialib_rehash: _xmmsc_medialib_rehash, _x_list_position: _x_list_position, _xmmsc_log_handler_set: _xmmsc_log_handler_set, _xmmsc_coll_find: _xmmsc_coll_find, _strpchrsplit: _strpchrsplit, __internal_put_on_bb_collection: __internal_put_on_bb_collection, _wcsncasecmp_l: _wcsncasecmp_l, _xmms_ipc_msg_update_length: _xmms_ipc_msg_update_length, _iswspace_l: _iswspace_l, _coll_token_free: _coll_token_free, _xmmsv_build_dict: _xmmsv_build_dict, _isupper_l: _isupper_l, _xmmsv_list_iter_valid: _xmmsv_list_iter_valid, _wcscmp: _wcscmp, ___shlim: ___shlim, _xmms_ipc_usocket_server_init: _xmms_ipc_usocket_server_init, _isblank_l: _isblank_l, __xmmsv_free: __xmmsv_free, _xmmsv_get_coll: _xmmsv_get_coll, _xmmsv_coll_attribute_set_string: _xmmsv_coll_attribute_set_string, _mbtowc: _mbtowc, _xmmsv_coll_idlist_clear: _xmmsv_coll_idlist_clear, _fnmatch: _fnmatch, _xmmsv_list_set_float: _xmmsv_list_set_float, _index: _index, _xmmsv_list_insert: _xmmsv_list_insert, _frexpf: _frexpf, _xmmsv_coll_idlist_get_index_int64: _xmmsv_coll_idlist_get_index_int64, _duplicate_list_value: _duplicate_list_value, _xmmsc_playback_start: _xmmsc_playback_start, _wctob: _wctob, _x_queue_push_head: _x_queue_push_head, __xmmsv_dict_iter_free: __xmmsv_dict_iter_free, _xmmsv_bitbuffer_rewind: _xmmsv_bitbuffer_rewind, _wcpncpy: _wcpncpy, _wcsncat: _wcsncat, _xmmsc_playlist_rinsert_encoded: _xmmsc_playlist_rinsert_encoded, _xmmsv_dict_iter_pair: _xmmsv_dict_iter_pair, _tgamma: _tgamma, _i64Subtract: _i64Subtract, _xmmsc_medialib_add_entry_encoded: _xmmsc_medialib_add_entry_encoded, _coll_parse_idseq: _coll_parse_idseq, _xmmsc_log_handle: _xmmsc_log_handle, _coll_parse_parenexpr: _coll_parse_parenexpr, _wcstok: _wcstok, _strcasecmp_l: _strcasecmp_l, __xmmsv_list_sort: __xmmsv_list_sort, _xmms_ipc_transport_write: _xmms_ipc_transport_write, _bitshift64Shl: _bitshift64Shl, _xmmsc_result_run: _xmmsc_result_run, _xmmsc_ipc_lock: _xmmsc_ipc_lock, _xmms_ipc_msg_get_object: _xmms_ipc_msg_get_object, _xmmsc_lock_set: _xmmsc_lock_set, _strlcat: _strlcat, _ldexpf: _ldexpf, _regerror: _regerror, _xmmsv_coll_add_order_operators: _xmmsv_coll_add_order_operators, _memccpy: _memccpy, _xmmsv_coll_add_order_operator: _xmmsv_coll_add_order_operator, _x_list_remove_link: _x_list_remove_link, _xmmsc_deinit: _xmmsc_deinit, _xmms_ipc_msg_get_cookie: _xmms_ipc_msg_get_cookie, _xmmsc_write_msg_to_ipc: _xmmsc_write_msg_to_ipc, _x_list_copy: _x_list_copy, _xmmsc_quit: _xmmsc_quit, _scalbnl: _scalbnl, _xmmsc_log_default_handler: _xmmsc_log_default_handler, _strcspn: _strcspn, _jrand48: _jrand48, _scalbnf: _scalbnf, _mblen: _mblen, _xmmsc_playlist_shuffle: _xmmsc_playlist_shuffle, _wait_for_socket: _wait_for_socket, _xmms_ipc_tcp_destroy: _xmms_ipc_tcp_destroy, _x_list_concat: _x_list_concat, ___rand48_step: ___rand48_step, _llvm_cttz_i32: _llvm_cttz_i32, _x_list_first: _x_list_first, _vwarn: _vwarn, _xmmsv_dict_iter_pair_coll: _xmmsv_dict_iter_pair_coll, __xmmsv_dict_new: __xmmsv_dict_new, _xmmsc_xform_media_browse_encoded: _xmmsc_xform_media_browse_encoded, _xmmsv_dict_iter_set_coll: _xmmsv_dict_iter_set_coll, __sum_len_string_dict: __sum_len_string_dict, ___toread: ___toread, _xmmsc_result_notifier_set_c2c: _xmmsc_result_notifier_set_c2c, _xmmsc_write_signal_msg: _xmmsc_write_signal_msg, _sort: _sort, _atol: _atol, _printf_core: _printf_core, _tre_compare_items: _tre_compare_items, _xmmsv_bitbuffer_put_data: _xmmsv_bitbuffer_put_data, _fputws: _fputws, _xmmsc_send_cmd: _xmmsc_send_cmd, _ilogbl: _ilogbl, _coll_parse_strval: _coll_parse_strval, __xmmsv_list_clear: __xmmsv_list_clear, _rindex: _rindex, _xmmsc_ipc_connect: _xmmsc_ipc_connect, _xmmsv_encode_url: _xmmsv_encode_url, _xmmsv_list_get_type: _xmmsv_list_get_type, _xmms_ipc_usocket_read: _xmms_ipc_usocket_read, _isalnum: _isalnum, _strlen: _strlen, _xmmsc_get_last_error: _xmmsc_get_last_error, _xmmsc_medialib_add_entry_full: _xmmsc_medialib_add_entry_full, _strrchr: _strrchr, _get_dataset: _get_dataset, _xmms_strlist_copy: _xmms_strlist_copy, _xmmsv_coll_idlist_get_size: _xmmsv_coll_idlist_get_size, _xmmsv_dict_remove: _xmmsv_dict_remove, _strverscmp: _strverscmp, _iswupper: _iswupper, _xmmsc_ipc_wait_for_event: _xmmsc_ipc_wait_for_event, _xmmsv_coll_idlist_set: _xmmsv_coll_idlist_set, _xmmsv_get_int64: _xmmsv_get_int64, _xmmsv_list_get_size: _xmmsv_list_get_size, _xmmsv_bitbuffer_put_bits_at: _xmmsv_bitbuffer_put_bits_at, _xmmsc_result_unref: _xmmsc_result_unref, _strncpy: _strncpy, ___strdup: ___strdup, _nrand48: _nrand48, __internal_put_on_bb_int32: __internal_put_on_bb_int32, _wcsdup: _wcsdup, __xmmsv_list_insert: __xmmsv_list_insert, _xmmsv_bitbuffer_align: _xmmsv_bitbuffer_align, _xmmsc_result_visc_set: _xmmsc_result_visc_set, _malloc_usable_size: _malloc_usable_size, _xmmsc_playback_seek_samples: _xmmsc_playback_seek_samples, _y0: _y0, __internal_get_from_bb_error_alloc: __internal_get_from_bb_error_alloc, _wcstoul: _wcstoul, _read_do_udp: _read_do_udp, _xmmsv_coll_attribute_get_string: _xmmsv_coll_attribute_get_string, __internal_get_from_bb_int32_positive: __internal_get_from_bb_int32_positive, _strnlen: _strnlen, _bsearch: _bsearch, _xmmsc_config_list_values: _xmmsc_config_list_values, _isascii: _isascii, _xmmsv_list_iter_entry_float: _xmmsv_list_iter_entry_float, _xmmsc_visualization_property_set: _xmmsc_visualization_property_set, _towupper: _towupper, _xmmsv_list_iter_set: _xmmsv_list_iter_set, _xmmsc_userconfdir_get: _xmmsc_userconfdir_get, _xmmsc_connect: _xmmsc_connect, _xmmsv_dict_get: _xmmsv_dict_get, _xmmsc_ipc_disconnected: _xmmsc_ipc_disconnected, _xmmsv_dict_clear: _xmmsv_dict_clear, _coll_parse_orop_append: _coll_parse_orop_append, _xmmsc_xform_media_browse: _xmmsc_xform_media_browse, ___shgetc: ___shgetc, _xmmsv_dict_iter_first: _xmmsv_dict_iter_first, _xmmsv_list_iter_seek: _xmmsv_list_iter_seek, _tolower: _tolower, _islower: _islower, _wcpcpy: _wcpcpy, _frexp: _frexp, _memalign: _memalign, _xmmsv_list_iter_insert_float: _xmmsv_list_iter_insert_float, _xmms_strlist_len: _xmms_strlist_len, _duplicate_coll_value: _duplicate_coll_value, _x_queue_is_empty: _x_queue_is_empty, _xmmsc_ipc_disconnect: _xmmsc_ipc_disconnect, _xmmsc_ipc_unlock: _xmmsc_ipc_unlock, ___strchrnul: ___strchrnul, _xmmsc_broadcast_medialib_entry_removed: _xmmsc_broadcast_medialib_entry_removed, _iswlower_l: _iswlower_l, _xmmsc_medialib_entry_property_set_str: _xmmsc_medialib_entry_property_set_str, _xmmsv_propdict_to_dict: _xmmsv_propdict_to_dict, _xmmsv_dict_iter_next: _xmmsv_dict_iter_next, _xmmsc_io_out_handle: _xmmsc_io_out_handle, _strpbrk: _strpbrk, _xmmsc_medialib_move_entry: _xmmsc_medialib_move_entry, _tre_add_tag_left: _tre_add_tag_left, ___string_read: ___string_read, _wcstof: _wcstof, _wcstod: _wcstod, _xmmsv_coll_default_parse_tokens: _xmmsv_coll_default_parse_tokens, _xmmsv_list_append_float: _xmmsv_list_append_float, _xmms_ipc_msg_alloc: _xmms_ipc_msg_alloc, _xmmsv_list_iter_get_parent: _xmmsv_list_iter_get_parent, _xmmsc_ipc_error_set: _xmmsc_ipc_error_set, _wcstoull: _wcstoull, _xmmsc_send_msg: _xmmsc_send_msg, _j1f: _j1f, _udp_timediff: _udp_timediff, _xmmsc_coll_get: _xmmsc_coll_get, _x_list_delete_link: _x_list_delete_link, __internal_put_on_bb_value_dict: __internal_put_on_bb_value_dict, _xmmsc_playlist_add_collection: _xmmsc_playlist_add_collection, _coll_parse_andop_append: _coll_parse_andop_append, _xmmsc_ipc_result_lookup: _xmmsc_ipc_result_lookup, _strlwr: _strlwr, _wctype_l: _wctype_l, ___xmmsv_identity_xmmsv424: ___xmmsv_identity_xmmsv424, _bitshift64Lshr: _bitshift64Lshr, _srand: _srand, _strchr: _strchr, _x_list_remove: _x_list_remove, _towlower: _towlower, _tolower_l: _tolower_l, ___lgamma_r: ___lgamma_r, _xmmsv_dict_has_key: _xmmsv_dict_has_key, _isspace: _isspace, _x_list_insert_sorted: _x_list_insert_sorted, _xmmsc_medialib_entry_property_set_str_with_source: _xmmsc_medialib_entry_property_set_str_with_source, _x_queue_pop_head: _x_queue_pop_head, _xmmsc_visualization_shutdown: _xmmsc_visualization_shutdown, _wcswidth: _wcswidth, _x_queue_push_tail: _x_queue_push_tail, _xmmsv_new_string: _xmmsv_new_string, _coll_parse_reference: _coll_parse_reference, _glob: _glob, _xmms_ipc_transport_fd_get: _xmms_ipc_transport_fd_get, _xmmsv_list_insert_float: _xmmsv_list_insert_float, _fputwc: _fputwc, _xmmsc_broadcast_playback_volume_changed: _xmmsc_broadcast_playback_volume_changed, _xmmsc_config_get_value: _xmmsc_config_get_value, _xmmsv_dict_foreach: _xmmsv_dict_foreach, _strtoimax: _strtoimax, _xmmsv_decode_url: _xmmsv_decode_url, _xmmsc_playback_volume_get: _xmmsc_playback_volume_get, _xmmsc_playlist_add_encoded: _xmmsc_playlist_add_encoded, _xmmsc_playlist_add_id: _xmmsc_playlist_add_id, _wcsrchr: _wcsrchr, _iswdigit_l: _iswdigit_l, _xmmsv_dict_set_float: _xmmsv_dict_set_float, _xmmsc_main_stats: _xmmsc_main_stats, _xmmsv_coll_attributes_get: _xmmsv_coll_attributes_get, ___xmmsv_identity_xmmsv396: ___xmmsv_identity_xmmsv396, _do_read136: _do_read136, _xmmsc_config_set_value: _xmmsc_config_set_value, _xmmsc_coll_save: _xmmsc_coll_save, _xmmsc_emscripten_result_cb: _xmmsc_emscripten_result_cb, _xmmsc_send_broadcast_msg: _xmmsc_send_broadcast_msg, _xmmsv_coll_copy: _xmmsv_coll_copy, _xmmsc_playlist_replace: _xmmsc_playlist_replace, _xmms_ipc_msg_get_cmd: _xmms_ipc_msg_get_cmd, _coll_parse_unaryop: _coll_parse_unaryop, _strfmon_l: _strfmon_l, _xmmsv_list_iter_entry_string: _xmmsv_list_iter_entry_string, ___xmmsv_null_to_none351: ___xmmsv_null_to_none351, _xmmsv_bitbuffer_goto: _xmmsv_bitbuffer_goto, _wctype: _wctype, _xmmsc_ipc_fd_get: _xmmsc_ipc_fd_get, _xmmsv_dict_iter_set_float: _xmmsv_dict_iter_set_float, ___xmmsv_null_to_none357: ___xmmsv_null_to_none357, _xmmsc_visualization_chunk_get: _xmmsc_visualization_chunk_get, _xmmsc_medialib_encode_url: _xmmsc_medialib_encode_url, _xmmsv_utf8_validate: _xmmsv_utf8_validate, _logbf: _logbf, _xmmsc_ipc_disconnect_set: _xmmsc_ipc_disconnect_set, _seed48: _seed48, _logbl: _logbl, _xmmsc_playback_volume_set: _xmmsc_playback_volume_set, _wcscasecmp_l: _wcscasecmp_l, __xmmsv_list_move: __xmmsv_list_move, __xmmsv_dict_iter_new: __xmmsv_dict_iter_new, _xmms_ipc_msg_set_cmd: _xmms_ipc_msg_set_cmd, _cleanup_udp: _cleanup_udp, _xmmsv_dict_get_size: _xmmsv_dict_get_size, ___xmmsv_identity_xmmsv453: ___xmmsv_identity_xmmsv453, _xmmsv_new_dict: _xmmsv_new_dict, _mallopt: _mallopt, _isxdigit: _isxdigit, _iswcntrl_l: _iswcntrl_l, _wcstol: _wcstol, _xmmsv_bitbuffer_get_data: _xmmsv_bitbuffer_get_data, _xmmsc_playlist_add_full: _xmmsc_playlist_add_full, _xmms_ipc_server_init: _xmms_ipc_server_init, _iconv_open: _iconv_open, _initstate: _initstate, __xmmsv_coll_operand_find: __xmmsv_coll_operand_find, _xmms_ipc_hostname: _xmms_ipc_hostname, _x_queue_new: _x_queue_new, _fnmatch_internal: _fnmatch_internal, _memmem: _memmem, _xmms_ipc_tcp_write: _xmms_ipc_tcp_write, _xmmsv_bitbuffer_deserialize_value: _xmmsv_bitbuffer_deserialize_value, _find_charmap: _find_charmap, _wctrans: _wctrans, _xmmsv_coll_set_idlist: _xmmsv_coll_set_idlist, _strtod: _strtod, _xmmsv_make_stringlist: _xmmsv_make_stringlist, _xmmsc_visualization_started: _xmmsc_visualization_started, _towupper_l: _towupper_l, _xmms_strlist_destroy: _xmms_strlist_destroy, _vfwprintf: _vfwprintf, _valloc: _valloc, _xmmsv_list_iter_last: _xmmsv_list_iter_last, ___xmmsv_null_to_none438: ___xmmsv_null_to_none438, _xmmsv_new_bitbuffer: _xmmsv_new_bitbuffer, _xmmsv_bitbuffer_len: _xmmsv_bitbuffer_len, ___tre_mem_alloc_impl: ___tre_mem_alloc_impl, _wcstoimax: _wcstoimax, _xmmsv_coll_attribute_get: _xmmsv_coll_attribute_get, _gcvt: _gcvt, _memcmp: _memcmp, _xmmsc_playlist_list_entries: _xmmsc_playlist_list_entries, _xmmsv_coll_attribute_get_value: _xmmsv_coll_attribute_get_value, _xmms_socket_errno: _xmms_socket_errno, _strncat: _strncat, _package_read_do: _package_read_do, __xmmsv_list_iter_new: __xmmsv_list_iter_new, _xmmsc_medialib_get_id: _xmmsc_medialib_get_id, ___xmmsv_identity_xmmsv378: ___xmmsv_identity_xmmsv378, _xmmsv_get_error: _xmmsv_get_error, _setstate: _setstate, _x_list_remove_all: _x_list_remove_all, _fwprintf: _fwprintf, _xmmsc_medialib_path_import: _xmmsc_medialib_path_import, ___xmmsv_identity_xmmsv372: ___xmmsv_identity_xmmsv372, _xmmsc_result_callback_new_c2c: _xmmsc_result_callback_new_c2c, _scanexp: _scanexp, _xmmsc_broadcast_medialib_entry_changed: _xmmsc_broadcast_medialib_entry_changed, __xmmsv_new: __xmmsv_new, _xmmsv_ref: _xmmsv_ref, _xmms_socket_close: _xmms_socket_close, _wcsnrtombs: _wcsnrtombs, __internal_get_from_bb_string_alloc: __internal_get_from_bb_string_alloc, _xmms_ipc_msg_put_value: _xmms_ipc_msg_put_value, ___memrchr: ___memrchr, __xmmsv_dict_hash: __xmmsv_dict_hash, _isspace_l: _isspace_l, _xmmsc_playlist_radd_encoded: _xmmsc_playlist_radd_encoded, _xmmsv_coll_idlist_set_index: _xmmsv_coll_idlist_set_index, _i64Add: _i64Add, _xmms_socket_error_recoverable: _xmms_socket_error_recoverable, _MUSL_vfscanf: _MUSL_vfscanf, _towctrans: _towctrans, _strsignal: _strsignal, _xmmsv_bitbuffer_get_bits: _xmmsv_bitbuffer_get_bits, _wcsxfrm: _wcsxfrm, _ldexpl: _ldexpl, _tgammal: _tgammal, _tre_ast_to_tnfa: _tre_ast_to_tnfa, _xmmsv_dict_entry_get_coll: _xmmsv_dict_entry_get_coll, _x_list_find_custom: _x_list_find_custom, _towlower_l: _towlower_l, _tgammaf: _tgammaf, _xmmsc_coll_query_infos: _xmmsc_coll_query_infos, _common56: _common56, _common57: _common57, _warn: _warn, _xmms_ipc_server_accept: _xmms_ipc_server_accept, _xmms_userconfdir_get: _xmms_userconfdir_get, _xmmsc_io_in_handle: _xmmsc_io_in_handle, _xmmsv_coll_new: _xmmsv_coll_new, _xmmsc_result_notifier_remove: _xmmsc_result_notifier_remove, _match_in_dir: _match_in_dir, _setup_socket: _setup_socket, _xmmsc_init: _xmmsc_init, __xmmsv_list_resize: __xmmsv_list_resize, _xmmsc_log_va: _xmmsc_log_va, _xmmsv_coll_remove_operand: _xmmsv_coll_remove_operand, _xmmsc_bindata_add: _xmmsc_bindata_add, __xmmsv_list_remove: __xmmsv_list_remove, _xmmsv_dict_entry_get_type: _xmmsv_dict_entry_get_type, _j0: _j0, _xmmsc_result_clear_weakrefs: _xmmsc_result_clear_weakrefs, ___sindf: ___sindf, _xmmsc_coll_remove: _xmmsc_coll_remove, _ts2net: _ts2net, _xmmsv_coll_attribute_get_int64: _xmmsv_coll_attribute_get_int64, _xmmsc_visualization_start_handle: _xmmsc_visualization_start_handle, _pvalloc: _pvalloc, _xmmsc_result_restartable: _xmmsc_result_restartable, _xmms_vargs_to_strlist: _xmms_vargs_to_strlist, _xmmsc_result_notifier_delete_all: _xmmsc_result_notifier_delete_all, _xmmsc_coll_query_ids: _xmmsc_coll_query_ids, _xmmsv_is_error: _xmmsv_is_error, _xmmsv_coll_attribute_set: _xmmsv_coll_attribute_set, _strtof_l: _strtof_l, _xmmsv_build_dict_va: _xmmsv_build_dict_va, _xmmsv_list_iter_explicit_destroy: _xmmsv_list_iter_explicit_destroy, _wctrans_l: _wctrans_l, _mbsinit: _mbsinit, _parse_url: _parse_url, _xmmsc_ipc_io_out_callback: _xmmsc_ipc_io_out_callback, _xmmsc_playback_stop: _xmmsc_playback_stop, _memcpy: _memcpy, _string_substr: _string_substr, _xmmsv_encode_url_full: _xmmsv_encode_url_full, _iswspace: _iswspace, _duplicate_dict_value: _duplicate_dict_value, _iswalpha: _iswalpha, _iswblank_l: _iswblank_l, _x_list_free: _x_list_free, _xmms_ipc_msg_get_value: _xmms_ipc_msg_get_value, _xmmsv_coll_add_operand: _xmmsv_coll_add_operand, _xmmsc_mainloop_emscripten_init: _xmmsc_mainloop_emscripten_init, _sn_write: _sn_write, _bitshift64Ashr: _bitshift64Ashr, _xmmsv_bitbuffer_put_bits: _xmmsv_bitbuffer_put_bits, _malloc_set_footprint_limit: _malloc_set_footprint_limit, _xmmsv_dict_format: _xmmsv_dict_format, _xmmsv_new_list: _xmmsv_new_list, _xmmsc_result_visc_get: _xmmsc_result_visc_get, __internal_put_on_bb_float: __internal_put_on_bb_float, _xmms_ipc_usocket_client_init: _xmms_ipc_usocket_client_init, _j0f: _j0f, _xmms_strlist_prepend_copy: _xmms_strlist_prepend_copy, _islower_l: _islower_l, _xmmsv_dict_iter_set_int: _xmmsv_dict_iter_set_int, _wcstold: _wcstold, _x_list_length: _x_list_length, __xmmsv_list_iter_free: __xmmsv_list_iter_free, _wcstoll: _wcstoll, _xmms_socket_invalidate: _xmms_socket_invalidate, __xmmsc_medialib_encode_url_old: __xmmsc_medialib_encode_url_old, _xmmsv_get_list_iter: _xmmsv_get_list_iter, _xmmsv_dict_iter_pair_string: _xmmsv_dict_iter_pair_string, _xmmsv_coll_attribute_set_int: _xmmsv_coll_attribute_set_int, _srand48: _srand48, _iswalpha_l: _iswalpha_l, _xmms_fallback_ipcpath_get: _xmms_fallback_ipcpath_get, __internal_put_on_bb_string: __internal_put_on_bb_string, _xmmsc_result_notifier_delete: _xmmsc_result_notifier_delete, __internal_get_from_bb_value_of_type_alloc: __internal_get_from_bb_value_of_type_alloc, _xmmsv_list_move: _xmmsv_list_move, _xmmsc_broadcast_playlist_current_pos: _xmmsc_broadcast_playlist_current_pos, _xmmsc_result_get_value: _xmmsc_result_get_value, _frexpl: _frexpl, _xmmsv_get_bitbuffer: _xmmsv_get_bitbuffer, _xmmsv_list_iter_prev: _xmmsv_list_iter_prev, _xmmsc_io_want_out: _xmmsc_io_want_out, _xmms_ipc_tcp_client_init: _xmms_ipc_tcp_client_init, _wcsrtombs: _wcsrtombs, _wprintf: _wprintf, _wcscspn: _wcscspn, _xmms_ipc_msg_destroy: _xmms_ipc_msg_destroy, _iswupper_l: _iswupper_l, _isxdigit_l: _isxdigit_l, _x_list_free_1: _x_list_free_1, _strrchrsplit: _strrchrsplit, _coll_next_token: _coll_next_token, _strtol: _strtol, _xdg_dir_get: _xdg_dir_get, _xmms_usercachedir_get: _xmms_usercachedir_get, _strtok: _strtok, _xmmsv_list_get_int64: _xmmsv_list_get_int64, _xmmsv_list_insert_int: _xmmsv_list_insert_int, _strcasecmp: _strcasecmp, _xmmsv_coll_universe: _xmmsv_coll_universe, _iconv: _iconv, _isalpha: _isalpha, _iswctype: _iswctype, _xmmsc_result_cookie_get: _xmmsc_result_cookie_get, _xmmsv_list_append: _xmmsv_list_append, _xmmsc_playback_current_id: _xmmsc_playback_current_id, _xmmsc_ipc_error_get: _xmmsc_ipc_error_get, _qsort: _qsort, _atoi: _atoi, _xmmsv_build_cluster_list: _xmmsv_build_cluster_list, _wmemchr: _wmemchr, _xmmsv_coll_idlist_remove: _xmmsv_coll_idlist_remove, _xmmsc_playlist_insert_full: _xmmsc_playlist_insert_full, _xmmsc_playlist_set_next_rel: _xmmsc_playlist_set_next_rel, _wcsncpy: _wcsncpy, _xmmsv_list_iter_insert_int: _xmmsv_list_iter_insert_int, _try_realloc_chunk: _try_realloc_chunk, _xmms_ipc_usocket_write: _xmms_ipc_usocket_write, _isprint_l: _isprint_l, _xmmsc_visualization_init: _xmmsc_visualization_init, ___getopt_long: ___getopt_long, _llvm_ctlz_i32: _llvm_ctlz_i32, _coll_parse_binaryfilter: _coll_parse_binaryfilter, _xmmsv_dict_entry_get_int32: _xmmsv_dict_entry_get_int32, _x_list_nth_data: _x_list_nth_data, ___cos: ___cos, __internal_get_from_bb_value_list_alloc: __internal_get_from_bb_value_list_alloc, _x_list_append: _x_list_append, _lgammaf: _lgammaf, _iswlower: _iswlower, __x_list_remove_link: __x_list_remove_link, _xmmsv_coll_attributes_set: _xmmsv_coll_attributes_set, _strcpy: _strcpy, _wcsncasecmp: _wcsncasecmp, _strtoull_l: _strtoull_l, _yn: _yn, _xmmsv_coll_normalize_order_arguments: _xmmsv_coll_normalize_order_arguments, _xmmsv_bitbuffer_new_ro: _xmmsv_bitbuffer_new_ro, _getopt_long_only: _getopt_long_only, _xmmsc_medialib_add_entry_args: _xmmsc_medialib_add_entry_args, _strtol_l: _strtol_l, _lrand48: _lrand48, _toupper: _toupper, _jnf: _jnf, _tv2ts: _tv2ts, _atof: _atof, _xmmsv_list_has_type: _xmmsv_list_has_type, __internal_get_from_bb_int32: __internal_get_from_bb_int32, ___floatscan: ___floatscan, _iswxdigit: _iswxdigit, _xmmsc_playlist_clear: _xmmsc_playlist_clear, _x_list_find: _x_list_find, _xmmsc_broadcast_playback_current_id: _xmmsc_broadcast_playback_current_id, _strcoll: _strcoll, _x_list_insert: _x_list_insert, _xmmsc_medialib_import_path_encoded: _xmmsc_medialib_import_path_encoded, ___overflow: ___overflow, _mbrtowc: _mbrtowc, _ldexp: _ldexp, _tv2net: _tv2net, _xmmsv_list_iter_next: _xmmsv_list_iter_next, _xmmsc_ipc_destroy: _xmmsc_ipc_destroy, _y1f: _y1f, ___xmmsv_identity_xmmsv437: ___xmmsv_identity_xmmsv437, _x_asprintf: _x_asprintf, _xmmsv_bitbuffer_serialize_value: _xmmsv_bitbuffer_serialize_value, _xmmsc_result_parse_msg: _xmmsc_result_parse_msg, _xmms_ipc_transport_read: _xmms_ipc_transport_read, ___towcase: ___towcase, _xmmsc_ipc_io_in_callback: _xmmsc_ipc_io_in_callback, _bcopy: _bcopy, _getopt_long: _getopt_long, _xmmsc_send_signal_msg: _xmmsc_send_signal_msg, _coll_parse_autofilter: _coll_parse_autofilter, _wcsstr: _wcsstr, _xmmsv_dict_entry_get_float: _xmmsv_dict_entry_get_float, _regexec: _regexec, _xmmsc_visualization_version: _xmmsc_visualization_version, _x_queue_free: _x_queue_free, _xmms_freeaddrinfo: _xmms_freeaddrinfo, _xmmsc_playlist_remove_entry: _xmmsc_playlist_remove_entry, _xmmsc_playlist_list: _xmmsc_playlist_list, _y1: _y1, _ilogbf: _ilogbf, _swprintf: _swprintf, _xmmsc_result_notifier_set_default: _xmmsc_result_notifier_set_default, _xmmsv_coll_parse_custom: _xmmsv_coll_parse_custom, _tre_fill_pmatch: _tre_fill_pmatch, _vsprintf: _vsprintf, _dispose_chunk: _dispose_chunk, _xmmsv_list_append_coll: _xmmsv_list_append_coll, _xmmsc_playlist_insert_collection: _xmmsc_playlist_insert_collection, _common: _common, _free_url: _free_url, _sprintf: _sprintf, _strspn: _strspn, ___xmmsv_identity_xmmsv497: ___xmmsv_identity_xmmsv497, ___xmmsv_identity_xmmsv483: ___xmmsv_identity_xmmsv483, _strncasecmp_l: _strncasecmp_l, _xmmsv_dict_set_coll: _xmmsv_dict_set_coll, _xmmsv_coll_default_parse_build: _xmmsv_coll_default_parse_build, _strxfrm: _strxfrm, _isgraph_l: _isgraph_l, _xmmsv_dict_iter_find: _xmmsv_dict_iter_find, _random: _random, _xmmsv_dict_set: _xmmsv_dict_set, _xmmsc_broadcast_medialib_entry_added: _xmmsc_broadcast_medialib_entry_added, _tre_stack_push: _tre_stack_push, _xmmsv_new_bitbuffer_ro: _xmmsv_new_bitbuffer_ro, _iswgraph: _iswgraph, _xmmsv_list_iter_remove: _xmmsv_list_iter_remove, _wcscoll_l: _wcscoll_l, _calloc: _calloc, _xmmsc_playlist_add_args: _xmmsc_playlist_add_args, _xmmsv_dict_iter_remove: _xmmsv_dict_iter_remove, _coll_parse_operation: _coll_parse_operation, _xmmsv_list_insert_string: _xmmsv_list_insert_string, _xmmsv_bitbuffer_buffer: _xmmsv_bitbuffer_buffer, _xmmsc_signal_playback_playtime: _xmmsc_signal_playback_playtime, _iconv_close: _iconv_close, _xmmsv_list_iter_entry_int64: _xmmsv_list_iter_entry_int64, _xmmsc_ipc_lock_set: _xmmsc_ipc_lock_set, _isgraph: _isgraph, ___fputwc_unlocked: ___fputwc_unlocked, _xmmsc_main_list_plugins: _xmmsc_main_list_plugins, _bcmp: _bcmp, _strtoll_l: _strtoll_l, _strcasestr: _strcasestr, _strtof: _strtof, _xmmsc_send_cmd_cookie: _xmmsc_send_cmd_cookie, _realloc: _realloc, _xmmsc_medialib_entry_property_set_int: _xmmsc_medialib_entry_property_set_int, _xmmsc_playback_pause: _xmmsc_playback_pause, _xmmsc_medialib_get_id_encoded: _xmmsc_medialib_get_id_encoded, _xmmsv_coll_get_type: _xmmsv_coll_get_type, ___fwritex: ___fwritex, ___tre_mem_new_impl: ___tre_mem_new_impl, _wcscasecmp: _wcscasecmp, _xmmsc_result_ref: _xmmsc_result_ref, _xmmsc_result_emscripten_notifier_set: _xmmsc_result_emscripten_notifier_set, _xmmsv_list_flatten: _xmmsv_list_flatten, __internal_get_from_bb_int64: __internal_get_from_bb_int64, _xmmsv_list_iter_entry: _xmmsv_list_iter_entry, __xmmsv_list_new: __xmmsv_list_new, ___cosdf: ___cosdf, _xmmsc_ipc_exec_msg: _xmmsc_ipc_exec_msg, _xmmsc_io_disconnect: _xmmsc_io_disconnect, _xmmsc_next_id: _xmmsc_next_id, _xmmsv_list_insert_coll: _xmmsv_list_insert_coll, _xmmsv_list_sort: _xmmsv_list_sort, __internal_get_from_bb_collection_alloc: __internal_get_from_bb_collection_alloc, _x_list_nth: _x_list_nth, _xmmsv_copy: _xmmsv_copy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
	  })
	  // EMSCRIPTEN_END_ASM
	  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_exp": _exp, "__inet_ntop6_raw": __inet_ntop6_raw, "_log": _log, "_listen": _listen, "_fmodl": _fmodl, "_bind": _bind, "___assert_fail": ___assert_fail, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_xmmsv_c2c_message_get_payload": _xmmsv_c2c_message_get_payload, "_sysconf": _sysconf, "_close": _close, "_putc": _putc, "_cos": _cos, "_llvm_stacksave": _llvm_stacksave, "_fread": _fread, "_puts": _puts, "_xmmsc_sc_interface_entity_destroy": _xmmsc_sc_interface_entity_destroy, "_write": _write, "__write_sockaddr": __write_sockaddr, "_fsync": _fsync, "_select": _select, "_getaddrinfo": _getaddrinfo, "_closedir": _closedir, "_getuid": _getuid, "_send": _send, "__inet_ntop4_raw": __inet_ntop4_raw, "_llvm_stackrestore": _llvm_stackrestore, "_fcntl": _fcntl, "_opendir": _opendir, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_unlink": _unlink, "_nanosleep": _nanosleep, "_ntohs": _ntohs, "_putchar": _putchar, "___buildEnvironment": ___buildEnvironment, "_printf": _printf, "_ntohl": _ntohl, "_setsockopt": _setsockopt, "_stat": _stat, "_connect": _connect, "_read": _read, "___lock": ___lock, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_gettimeofday": _gettimeofday, "_exit": _exit, "_readdir_r": _readdir_r, "__inet_pton4_raw": __inet_pton4_raw, "_llvm_pow_f64": _llvm_pow_f64, "_fmod": _fmod, "_access": _access, "_vfprintf": _vfprintf, "_rmdir": _rmdir, "_logf": _logf, "_floor": _floor, "_pwrite": _pwrite, "_socket": _socket, "_open": _open, "_fabsf": _fabsf, "_remove": _remove, "_perror": _perror, "_sinf": _sinf, "_getenv": _getenv, "_fclose": _fclose, "_floorf": _floorf, "_sqrtf": _sqrtf, "_recv": _recv, "_accept": _accept, "_abort": _abort, "_fopen": _fopen, "_freeaddrinfo": _freeaddrinfo, "_sin": _sin, "_cosf": _cosf, "__inet_pton6_raw": __inet_pton6_raw, "_emscripten_asm_const_int": _emscripten_asm_const_int, "__read_sockaddr": __read_sockaddr, "_usleep": _usleep, "_fflush": _fflush, "__reallyNegative": __reallyNegative, "_fileno": _fileno, "__exit": __exit, "_htonl": _htonl, "_pread": _pread, "_mkport": _mkport, "___unlock": ___unlock, "_htons": _htons, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_getpwuid": _getpwuid, "_copysign": _copysign, "_fputc": _fputc, "_copysignl": _copysignl, "_modf": _modf, "_strerror": _strerror, "__formatString": __formatString, "_fputs": _fputs, "_sqrt": _sqrt, "_xmmsv_c2c_message_format": _xmmsv_c2c_message_format, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___progname": ___progname, "_stderr": _stderr, "_stdout": _stdout }, buffer);
	  var real__iswxdigit_l = asm["_iswxdigit_l"]; asm["_iswxdigit_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswxdigit_l.apply(null, arguments);
	};

	var real____xmmsv_null_to_none397 = asm["___xmmsv_null_to_none397"]; asm["___xmmsv_null_to_none397"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_null_to_none397.apply(null, arguments);
	};

	var real___xmmsv_coll_new = asm["__xmmsv_coll_new"]; asm["__xmmsv_coll_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_coll_new.apply(null, arguments);
	};

	var real__xmmsc_playlist_radd = asm["_xmmsc_playlist_radd"]; asm["_xmmsc_playlist_radd"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_radd.apply(null, arguments);
	};

	var real__xmms_sleep_ms = asm["_xmms_sleep_ms"]; asm["_xmms_sleep_ms"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_sleep_ms.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_get_index_int32 = asm["_xmmsv_coll_idlist_get_index_int32"]; asm["_xmmsv_coll_idlist_get_index_int32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_get_index_int32.apply(null, arguments);
	};

	var real__erand48 = asm["_erand48"]; asm["_erand48"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__erand48.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_add = asm["_xmmsc_result_notifier_add"]; asm["_xmmsc_result_notifier_add"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_add.apply(null, arguments);
	};

	var real__ffs = asm["_ffs"]; asm["_ffs"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ffs.apply(null, arguments);
	};

	var real__iswalnum_l = asm["_iswalnum_l"]; asm["_iswalnum_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswalnum_l.apply(null, arguments);
	};

	var real__memchr = asm["_memchr"]; asm["_memchr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__memchr.apply(null, arguments);
	};

	var real__xmmsc_playlist_rinsert = asm["_xmmsc_playlist_rinsert"]; asm["_xmmsc_playlist_rinsert"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_rinsert.apply(null, arguments);
	};

	var real__xmmsc_result_disconnect = asm["_xmmsc_result_disconnect"]; asm["_xmmsc_result_disconnect"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_disconnect.apply(null, arguments);
	};

	var real__warnx = asm["_warnx"]; asm["_warnx"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__warnx.apply(null, arguments);
	};

	var real__xmmsc_result_run_callback = asm["_xmmsc_result_run_callback"]; asm["_xmmsc_result_run_callback"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_run_callback.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_get = asm["_xmmsv_coll_idlist_get"]; asm["_xmmsv_coll_idlist_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_get.apply(null, arguments);
	};

	var real__xmmsv_list_iter_tell = asm["_xmmsv_list_iter_tell"]; asm["_xmmsv_list_iter_tell"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_tell.apply(null, arguments);
	};

	var real__mbrlen = asm["_mbrlen"]; asm["_mbrlen"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mbrlen.apply(null, arguments);
	};

	var real__xmmsc_ipc_result_unregister = asm["_xmmsc_ipc_result_unregister"]; asm["_xmmsc_ipc_result_unregister"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_result_unregister.apply(null, arguments);
	};

	var real__drand48 = asm["_drand48"]; asm["_drand48"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__drand48.apply(null, arguments);
	};

	var real__string_intadd = asm["_string_intadd"]; asm["_string_intadd"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__string_intadd.apply(null, arguments);
	};

	var real__ilogb = asm["_ilogb"]; asm["_ilogb"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ilogb.apply(null, arguments);
	};

	var real__mallinfo = asm["_mallinfo"]; asm["_mallinfo"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mallinfo.apply(null, arguments);
	};

	var real__iswblank = asm["_iswblank"]; asm["_iswblank"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswblank.apply(null, arguments);
	};

	var real__check_drawtime = asm["_check_drawtime"]; asm["_check_drawtime"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__check_drawtime.apply(null, arguments);
	};

	var real__xmmsc_broadcast_config_value_changed = asm["_xmmsc_broadcast_config_value_changed"]; asm["_xmmsc_broadcast_config_value_changed"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_config_value_changed.apply(null, arguments);
	};

	var real__x_list_index = asm["_x_list_index"]; asm["_x_list_index"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_index.apply(null, arguments);
	};

	var real__strtoull = asm["_strtoull"]; asm["_strtoull"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtoull.apply(null, arguments);
	};

	var real__xmmsc_medialib_entry_property_remove_with_source = asm["_xmmsc_medialib_entry_property_remove_with_source"]; asm["_xmmsc_medialib_entry_property_remove_with_source"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_entry_property_remove_with_source.apply(null, arguments);
	};

	var real__xmmsc_bindata_list = asm["_xmmsc_bindata_list"]; asm["_xmmsc_bindata_list"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_bindata_list.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_set_default_full = asm["_xmmsc_result_notifier_set_default_full"]; asm["_xmmsc_result_notifier_set_default_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_set_default_full.apply(null, arguments);
	};

	var real__coll_parse_expr = asm["_coll_parse_expr"]; asm["_coll_parse_expr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_expr.apply(null, arguments);
	};

	var real__isdigit_l = asm["_isdigit_l"]; asm["_isdigit_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isdigit_l.apply(null, arguments);
	};

	var real___xmmsv_coll_free = asm["__xmmsv_coll_free"]; asm["__xmmsv_coll_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_coll_free.apply(null, arguments);
	};

	var real__xmmsv_serialize = asm["_xmmsv_serialize"]; asm["_xmmsv_serialize"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_serialize.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_set_raw = asm["_xmmsc_result_notifier_set_raw"]; asm["_xmmsc_result_notifier_set_raw"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_set_raw.apply(null, arguments);
	};

	var real__xmmsv_build_metadata = asm["_xmmsv_build_metadata"]; asm["_xmmsv_build_metadata"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_build_metadata.apply(null, arguments);
	};

	var real__xmms_ipc_client_init = asm["_xmms_ipc_client_init"]; asm["_xmms_ipc_client_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_client_init.apply(null, arguments);
	};

	var real__xmmsv_deserialize = asm["_xmmsv_deserialize"]; asm["_xmmsv_deserialize"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_deserialize.apply(null, arguments);
	};

	var real__strstrsplit = asm["_strstrsplit"]; asm["_strstrsplit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strstrsplit.apply(null, arguments);
	};

	var real__xmmsc_coll_idlist_from_playlist_file = asm["_xmmsc_coll_idlist_from_playlist_file"]; asm["_xmmsc_coll_idlist_from_playlist_file"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_idlist_from_playlist_file.apply(null, arguments);
	};

	var real__xmmsc_coll_query = asm["_xmmsc_coll_query"]; asm["_xmmsc_coll_query"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_query.apply(null, arguments);
	};

	var real__vsscanf = asm["_vsscanf"]; asm["_vsscanf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vsscanf.apply(null, arguments);
	};

	var real__xmms_ipc_msg_get_length = asm["_xmms_ipc_msg_get_length"]; asm["_xmms_ipc_msg_get_length"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_get_length.apply(null, arguments);
	};

	var real__coll_parse_orop = asm["_coll_parse_orop"]; asm["_coll_parse_orop"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_orop.apply(null, arguments);
	};

	var real__xmmsc_medialib_get_info = asm["_xmmsc_medialib_get_info"]; asm["_xmmsc_medialib_get_info"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_get_info.apply(null, arguments);
	};

	var real__wctomb = asm["_wctomb"]; asm["_wctomb"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wctomb.apply(null, arguments);
	};

	var real___xmmsv_list_flatten = asm["__xmmsv_list_flatten"]; asm["__xmmsv_list_flatten"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_flatten.apply(null, arguments);
	};

	var real__coll_parse_sequence = asm["_coll_parse_sequence"]; asm["_coll_parse_sequence"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_sequence.apply(null, arguments);
	};

	var real__find_match_index = asm["_find_match_index"]; asm["_find_match_index"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__find_match_index.apply(null, arguments);
	};

	var real__setup_shm_handle = asm["_setup_shm_handle"]; asm["_setup_shm_handle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__setup_shm_handle.apply(null, arguments);
	};

	var real__xmms_ipc_usocket_destroy = asm["_xmms_ipc_usocket_destroy"]; asm["_xmms_ipc_usocket_destroy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_usocket_destroy.apply(null, arguments);
	};

	var real__independent_calloc = asm["_independent_calloc"]; asm["_independent_calloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__independent_calloc.apply(null, arguments);
	};

	var real__wmemcmp = asm["_wmemcmp"]; asm["_wmemcmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wmemcmp.apply(null, arguments);
	};

	var real__iswprint = asm["_iswprint"]; asm["_iswprint"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswprint.apply(null, arguments);
	};

	var real__xmmsv_coll_operands_get = asm["_xmmsv_coll_operands_get"]; asm["_xmmsv_coll_operands_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_operands_get.apply(null, arguments);
	};

	var real__xmmsc_log = asm["_xmmsc_log"]; asm["_xmmsc_log"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_log.apply(null, arguments);
	};

	var real__strncmp = asm["_strncmp"]; asm["_strncmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strncmp.apply(null, arguments);
	};

	var real__x_list_alloc = asm["_x_list_alloc"]; asm["_x_list_alloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_alloc.apply(null, arguments);
	};

	var real__iswalnum = asm["_iswalnum"]; asm["_iswalnum"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswalnum.apply(null, arguments);
	};

	var real__xmmsc_result_callback_new_raw = asm["_xmmsc_result_callback_new_raw"]; asm["_xmmsc_result_callback_new_raw"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_callback_new_raw.apply(null, arguments);
	};

	var real__xmms_ipc_tcp_accept = asm["_xmms_ipc_tcp_accept"]; asm["_xmms_ipc_tcp_accept"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_tcp_accept.apply(null, arguments);
	};

	var real___internal_put_on_bb_error = asm["__internal_put_on_bb_error"]; asm["__internal_put_on_bb_error"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_error.apply(null, arguments);
	};

	var real__xmmsv_list_index_of = asm["_xmmsv_list_index_of"]; asm["_xmmsv_list_index_of"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_index_of.apply(null, arguments);
	};

	var real__xmms_getaddrinfo = asm["_xmms_getaddrinfo"]; asm["_xmms_getaddrinfo"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_getaddrinfo.apply(null, arguments);
	};

	var real__xmmsv_new_float = asm["_xmmsv_new_float"]; asm["_xmmsv_new_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_float.apply(null, arguments);
	};

	var real__x_queue_peek_tail = asm["_x_queue_peek_tail"]; asm["_x_queue_peek_tail"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_queue_peek_tail.apply(null, arguments);
	};

	var real__y0f = asm["_y0f"]; asm["_y0f"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__y0f.apply(null, arguments);
	};

	var real__ialloc = asm["_ialloc"]; asm["_ialloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ialloc.apply(null, arguments);
	};

	var real__bulk_free = asm["_bulk_free"]; asm["_bulk_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__bulk_free.apply(null, arguments);
	};

	var real__xmmsc_playlist_add_idlist = asm["_xmmsc_playlist_add_idlist"]; asm["_xmmsc_playlist_add_idlist"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_add_idlist.apply(null, arguments);
	};

	var real__cleanup_shm = asm["_cleanup_shm"]; asm["_cleanup_shm"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__cleanup_shm.apply(null, arguments);
	};

	var real__xmmsv_list_iter_entry_int32 = asm["_xmmsv_list_iter_entry_int32"]; asm["_xmmsv_list_iter_entry_int32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_entry_int32.apply(null, arguments);
	};

	var real__xmmsv_list_append_string = asm["_xmmsv_list_append_string"]; asm["_xmmsv_list_append_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_append_string.apply(null, arguments);
	};

	var real__xmmsv_get_int32 = asm["_xmmsv_get_int32"]; asm["_xmmsv_get_int32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_int32.apply(null, arguments);
	};

	var real__scalbn = asm["_scalbn"]; asm["_scalbn"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__scalbn.apply(null, arguments);
	};

	var real____sin = asm["___sin"]; asm["___sin"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____sin.apply(null, arguments);
	};

	var real__xmmsv_list_set = asm["_xmmsv_list_set"]; asm["_xmmsv_list_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_set.apply(null, arguments);
	};

	var real__xmmsv_new_coll = asm["_xmmsv_new_coll"]; asm["_xmmsv_new_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_coll.apply(null, arguments);
	};

	var real__independent_comalloc = asm["_independent_comalloc"]; asm["_independent_comalloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__independent_comalloc.apply(null, arguments);
	};

	var real____towrite = asm["___towrite"]; asm["___towrite"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____towrite.apply(null, arguments);
	};

	var real____xmmsv_null_to_none379 = asm["___xmmsv_null_to_none379"]; asm["___xmmsv_null_to_none379"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_null_to_none379.apply(null, arguments);
	};

	var real__iswpunct = asm["_iswpunct"]; asm["_iswpunct"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswpunct.apply(null, arguments);
	};

	var real__xmmsc_config_register_value = asm["_xmmsc_config_register_value"]; asm["_xmmsc_config_register_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_config_register_value.apply(null, arguments);
	};

	var real__x_list_nth_prev = asm["_x_list_nth_prev"]; asm["_x_list_nth_prev"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_nth_prev.apply(null, arguments);
	};

	var real____xmmsv_null_to_none373 = asm["___xmmsv_null_to_none373"]; asm["___xmmsv_null_to_none373"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_null_to_none373.apply(null, arguments);
	};

	var real__wcscpy = asm["_wcscpy"]; asm["_wcscpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcscpy.apply(null, arguments);
	};

	var real__snprintf = asm["_snprintf"]; asm["_snprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__snprintf.apply(null, arguments);
	};

	var real__toascii = asm["_toascii"]; asm["_toascii"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__toascii.apply(null, arguments);
	};

	var real__xmmsc_broadcast_collection_changed = asm["_xmmsc_broadcast_collection_changed"]; asm["_xmmsc_broadcast_collection_changed"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_collection_changed.apply(null, arguments);
	};

	var real__xmmsv_dict_set_int = asm["_xmmsv_dict_set_int"]; asm["_xmmsv_dict_set_int"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_set_int.apply(null, arguments);
	};

	var real__xmmsv_list_get_float = asm["_xmmsv_list_get_float"]; asm["_xmmsv_list_get_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_get_float.apply(null, arguments);
	};

	var real__wcsspn = asm["_wcsspn"]; asm["_wcsspn"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsspn.apply(null, arguments);
	};

	var real__xmmsc_ipc_need_out_callback_set = asm["_xmmsc_ipc_need_out_callback_set"]; asm["_xmmsc_ipc_need_out_callback_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_need_out_callback_set.apply(null, arguments);
	};

	var real__xmmsc_result_get_class = asm["_xmmsc_result_get_class"]; asm["_xmmsc_result_get_class"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_get_class.apply(null, arguments);
	};

	var real____stpcpy = asm["___stpcpy"]; asm["___stpcpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____stpcpy.apply(null, arguments);
	};

	var real__xmmsv_coll_parse = asm["_xmmsv_coll_parse"]; asm["_xmmsv_coll_parse"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_parse.apply(null, arguments);
	};

	var real__iswprint_l = asm["_iswprint_l"]; asm["_iswprint_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswprint_l.apply(null, arguments);
	};

	var real____xmmsv_identity_const_charp = asm["___xmmsv_identity_const_charp"]; asm["___xmmsv_identity_const_charp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_const_charp.apply(null, arguments);
	};

	var real__xmmsc_result_c2c_set = asm["_xmmsc_result_c2c_set"]; asm["_xmmsc_result_c2c_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_c2c_set.apply(null, arguments);
	};

	var real__xmms_ipc_tcp_server_init = asm["_xmms_ipc_tcp_server_init"]; asm["_xmms_ipc_tcp_server_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_tcp_server_init.apply(null, arguments);
	};

	var real__xmmsv_build_cluster_dict = asm["_xmmsv_build_cluster_dict"]; asm["_xmmsv_build_cluster_dict"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_build_cluster_dict.apply(null, arguments);
	};

	var real__strtoul = asm["_strtoul"]; asm["_strtoul"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtoul.apply(null, arguments);
	};

	var real__xmmsc_visualization_properties_set = asm["_xmmsc_visualization_properties_set"]; asm["_xmmsc_visualization_properties_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_properties_set.apply(null, arguments);
	};

	var real__wcspbrk = asm["_wcspbrk"]; asm["_wcspbrk"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcspbrk.apply(null, arguments);
	};

	var real__xmmsc_ipc_msg_write = asm["_xmmsc_ipc_msg_write"]; asm["_xmmsc_ipc_msg_write"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_msg_write.apply(null, arguments);
	};

	var real___internal_get_from_bb_bin_alloc = asm["__internal_get_from_bb_bin_alloc"]; asm["__internal_get_from_bb_bin_alloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_bin_alloc.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_set_c2c_full = asm["_xmmsc_result_notifier_set_c2c_full"]; asm["_xmmsc_result_notifier_set_c2c_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_set_c2c_full.apply(null, arguments);
	};

	var real__strfmon = asm["_strfmon"]; asm["_strfmon"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strfmon.apply(null, arguments);
	};

	var real__xmmsc_medialib_entry_property_remove = asm["_xmmsc_medialib_entry_property_remove"]; asm["_xmmsc_medialib_entry_property_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_entry_property_remove.apply(null, arguments);
	};

	var real__xmmsv_new_bin = asm["_xmmsv_new_bin"]; asm["_xmmsv_new_bin"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_bin.apply(null, arguments);
	};

	var real__xmmsv_get_float = asm["_xmmsv_get_float"]; asm["_xmmsv_get_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_float.apply(null, arguments);
	};

	var real__mbsrtowcs = asm["_mbsrtowcs"]; asm["_mbsrtowcs"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mbsrtowcs.apply(null, arguments);
	};

	var real__xmms_ipc_usocket_accept = asm["_xmms_ipc_usocket_accept"]; asm["_xmms_ipc_usocket_accept"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_usocket_accept.apply(null, arguments);
	};

	var real__wcswcs = asm["_wcswcs"]; asm["_wcswcs"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcswcs.apply(null, arguments);
	};

	var real__xmmsc_playlist_add_url = asm["_xmmsc_playlist_add_url"]; asm["_xmmsc_playlist_add_url"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_add_url.apply(null, arguments);
	};

	var real__xmmsc_playlist_current_pos = asm["_xmmsc_playlist_current_pos"]; asm["_xmmsc_playlist_current_pos"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_current_pos.apply(null, arguments);
	};

	var real___internal_put_on_bb_bin = asm["__internal_put_on_bb_bin"]; asm["__internal_put_on_bb_bin"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_bin.apply(null, arguments);
	};

	var real__match_bracket = asm["_match_bracket"]; asm["_match_bracket"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__match_bracket.apply(null, arguments);
	};

	var real__isprint = asm["_isprint"]; asm["_isprint"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isprint.apply(null, arguments);
	};

	var real__malloc_footprint_limit = asm["_malloc_footprint_limit"]; asm["_malloc_footprint_limit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__malloc_footprint_limit.apply(null, arguments);
	};

	var real__do_methodcall = asm["_do_methodcall"]; asm["_do_methodcall"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__do_methodcall.apply(null, arguments);
	};

	var real__regfree = asm["_regfree"]; asm["_regfree"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__regfree.apply(null, arguments);
	};

	var real__iscntrl_l = asm["_iscntrl_l"]; asm["_iscntrl_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iscntrl_l.apply(null, arguments);
	};

	var real__wmemmove = asm["_wmemmove"]; asm["_wmemmove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wmemmove.apply(null, arguments);
	};

	var real__xmms_ipc_msg_set_object = asm["_xmms_ipc_msg_set_object"]; asm["_xmms_ipc_msg_set_object"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_set_object.apply(null, arguments);
	};

	var real___internal_put_on_bb_value_of_type = asm["__internal_put_on_bb_value_of_type"]; asm["__internal_put_on_bb_value_of_type"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_value_of_type.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_pair_float = asm["_xmmsv_dict_iter_pair_float"]; asm["_xmmsv_dict_iter_pair_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_pair_float.apply(null, arguments);
	};

	var real__verr = asm["_verr"]; asm["_verr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__verr.apply(null, arguments);
	};

	var real____intscan = asm["___intscan"]; asm["___intscan"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____intscan.apply(null, arguments);
	};

	var real__x_list_insert_before = asm["_x_list_insert_before"]; asm["_x_list_insert_before"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_insert_before.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_insert = asm["_xmmsv_coll_idlist_insert"]; asm["_xmmsv_coll_idlist_insert"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_insert.apply(null, arguments);
	};

	var real__xmmsc_broadcast_mediainfo_reader_status = asm["_xmmsc_broadcast_mediainfo_reader_status"]; asm["_xmmsc_broadcast_mediainfo_reader_status"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_mediainfo_reader_status.apply(null, arguments);
	};

	var real__wcstombs = asm["_wcstombs"]; asm["_wcstombs"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstombs.apply(null, arguments);
	};

	var real__tre_make_trans = asm["_tre_make_trans"]; asm["_tre_make_trans"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_make_trans.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_set_string = asm["_xmmsv_dict_iter_set_string"]; asm["_xmmsv_dict_iter_set_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_set_string.apply(null, arguments);
	};

	var real____wcscoll_l = asm["___wcscoll_l"]; asm["___wcscoll_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____wcscoll_l.apply(null, arguments);
	};

	var real__xmmsv_get_bin = asm["_xmmsv_get_bin"]; asm["_xmmsv_get_bin"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_bin.apply(null, arguments);
	};

	var real__x_list_last = asm["_x_list_last"]; asm["_x_list_last"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_last.apply(null, arguments);
	};

	var real__net2ts = asm["_net2ts"]; asm["_net2ts"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__net2ts.apply(null, arguments);
	};

	var real__xmmsv_build_count = asm["_xmmsv_build_count"]; asm["_xmmsv_build_count"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_build_count.apply(null, arguments);
	};

	var real__xmmsc_medialib_add_entry = asm["_xmmsc_medialib_add_entry"]; asm["_xmmsc_medialib_add_entry"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_add_entry.apply(null, arguments);
	};

	var real__xmms_valist_to_strlist = asm["_xmms_valist_to_strlist"]; asm["_xmms_valist_to_strlist"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_valist_to_strlist.apply(null, arguments);
	};

	var real___xmmsv_dict_resize = asm["__xmmsv_dict_resize"]; asm["__xmmsv_dict_resize"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_dict_resize.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_set_raw_full = asm["_xmmsc_result_notifier_set_raw_full"]; asm["_xmmsc_result_notifier_set_raw_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_set_raw_full.apply(null, arguments);
	};

	var real__wcscoll = asm["_wcscoll"]; asm["_wcscoll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcscoll.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv = asm["___xmmsv_identity_xmmsv"]; asm["___xmmsv_identity_xmmsv"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv.apply(null, arguments);
	};

	var real__xmms_sockets_initialize = asm["_xmms_sockets_initialize"]; asm["_xmms_sockets_initialize"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_sockets_initialize.apply(null, arguments);
	};

	var real__tre_add_tag_right = asm["_tre_add_tag_right"]; asm["_tre_add_tag_right"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_add_tag_right.apply(null, arguments);
	};

	var real__vwarnx = asm["_vwarnx"]; asm["_vwarnx"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vwarnx.apply(null, arguments);
	};

	var real__strtoll = asm["_strtoll"]; asm["_strtoll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtoll.apply(null, arguments);
	};

	var real__strtoumax = asm["_strtoumax"]; asm["_strtoumax"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtoumax.apply(null, arguments);
	};

	var real__xmmsv_coll_unref = asm["_xmmsv_coll_unref"]; asm["_xmmsv_coll_unref"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_unref.apply(null, arguments);
	};

	var real____uflow = asm["___uflow"]; asm["___uflow"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____uflow.apply(null, arguments);
	};

	var real__strtold = asm["_strtold"]; asm["_strtold"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtold.apply(null, arguments);
	};

	var real__xmmsc_playlist_sort = asm["_xmmsc_playlist_sort"]; asm["_xmmsc_playlist_sort"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_sort.apply(null, arguments);
	};

	var real__xmmsv_coll_operands_set = asm["_xmmsv_coll_operands_set"]; asm["_xmmsv_coll_operands_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_operands_set.apply(null, arguments);
	};

	var real____xmmsv_null_to_none454 = asm["___xmmsv_null_to_none454"]; asm["___xmmsv_null_to_none454"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_null_to_none454.apply(null, arguments);
	};

	var real__internal_memalign = asm["_internal_memalign"]; asm["_internal_memalign"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__internal_memalign.apply(null, arguments);
	};

	var real__wmemset = asm["_wmemset"]; asm["_wmemset"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wmemset.apply(null, arguments);
	};

	var real___xmmsv_list_position_normalize = asm["__xmmsv_list_position_normalize"]; asm["__xmmsv_list_position_normalize"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_position_normalize.apply(null, arguments);
	};

	var real__xmmsc_medialib_import_path = asm["_xmmsc_medialib_import_path"]; asm["_xmmsc_medialib_import_path"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_import_path.apply(null, arguments);
	};

	var real____wcsxfrm_l = asm["___wcsxfrm_l"]; asm["___wcsxfrm_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____wcsxfrm_l.apply(null, arguments);
	};

	var real__isalpha_l = asm["_isalpha_l"]; asm["_isalpha_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isalpha_l.apply(null, arguments);
	};

	var real__xmmsc_log_handler_get = asm["_xmmsc_log_handler_get"]; asm["_xmmsc_log_handler_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_log_handler_get.apply(null, arguments);
	};

	var real__xmmsc_send_msg_no_arg = asm["_xmmsc_send_msg_no_arg"]; asm["_xmmsc_send_msg_no_arg"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_send_msg_no_arg.apply(null, arguments);
	};

	var real__iscntrl = asm["_iscntrl"]; asm["_iscntrl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iscntrl.apply(null, arguments);
	};

	var real__xmmsc_playlist_insert_encoded = asm["_xmmsc_playlist_insert_encoded"]; asm["_xmmsc_playlist_insert_encoded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_insert_encoded.apply(null, arguments);
	};

	var real__tre_parse = asm["_tre_parse"]; asm["_tre_parse"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_parse.apply(null, arguments);
	};

	var real__realloc_in_place = asm["_realloc_in_place"]; asm["_realloc_in_place"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__realloc_in_place.apply(null, arguments);
	};

	var real__mrand48 = asm["_mrand48"]; asm["_mrand48"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mrand48.apply(null, arguments);
	};

	var real__coll_parse_andop = asm["_coll_parse_andop"]; asm["_coll_parse_andop"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_andop.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_end = asm["_xmmsv_bitbuffer_end"]; asm["_xmmsv_bitbuffer_end"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_end.apply(null, arguments);
	};

	var real__xmmsv_list_set_int = asm["_xmmsv_list_set_int"]; asm["_xmmsv_list_set_int"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_set_int.apply(null, arguments);
	};

	var real__lcong48 = asm["_lcong48"]; asm["_lcong48"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__lcong48.apply(null, arguments);
	};

	var real__xmms_ipc_tcp_read = asm["_xmms_ipc_tcp_read"]; asm["_xmms_ipc_tcp_read"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_tcp_read.apply(null, arguments);
	};

	var real__xmmsc_ipc_result_register = asm["_xmmsc_ipc_result_register"]; asm["_xmmsc_ipc_result_register"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_result_register.apply(null, arguments);
	};

	var real__iswctype_l = asm["_iswctype_l"]; asm["_iswctype_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswctype_l.apply(null, arguments);
	};

	var real__ispunct = asm["_ispunct"]; asm["_ispunct"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ispunct.apply(null, arguments);
	};

	var real__jn = asm["_jn"]; asm["_jn"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__jn.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_set = asm["_xmmsv_dict_iter_set"]; asm["_xmmsv_dict_iter_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_set.apply(null, arguments);
	};

	var real__xmmsc_result_restart = asm["_xmmsc_result_restart"]; asm["_xmmsc_result_restart"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_restart.apply(null, arguments);
	};

	var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__memmove.apply(null, arguments);
	};

	var real__malloc_max_footprint = asm["_malloc_max_footprint"]; asm["_malloc_max_footprint"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__malloc_max_footprint.apply(null, arguments);
	};

	var real__err = asm["_err"]; asm["_err"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__err.apply(null, arguments);
	};

	var real__xmmsc_playback_status = asm["_xmmsc_playback_status"]; asm["_xmmsc_playback_status"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_status.apply(null, arguments);
	};

	var real__wcwidth = asm["_wcwidth"]; asm["_wcwidth"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcwidth.apply(null, arguments);
	};

	var real__xmmsv_list_set_string = asm["_xmmsv_list_set_string"]; asm["_xmmsv_list_set_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_set_string.apply(null, arguments);
	};

	var real__malloc_footprint = asm["_malloc_footprint"]; asm["_malloc_footprint"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__malloc_footprint.apply(null, arguments);
	};

	var real__xmms_socket_valid = asm["_xmms_socket_valid"]; asm["_xmms_socket_valid"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_socket_valid.apply(null, arguments);
	};

	var real__asprintf = asm["_asprintf"]; asm["_asprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__asprintf.apply(null, arguments);
	};

	var real__vsnprintf = asm["_vsnprintf"]; asm["_vsnprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vsnprintf.apply(null, arguments);
	};

	var real__strtoul_l = asm["_strtoul_l"]; asm["_strtoul_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtoul_l.apply(null, arguments);
	};

	var real__source_match_pattern = asm["_source_match_pattern"]; asm["_source_match_pattern"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__source_match_pattern.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_pair_int32 = asm["_xmmsv_dict_iter_pair_int32"]; asm["_xmmsv_dict_iter_pair_int32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_pair_int32.apply(null, arguments);
	};

	var real__lgamma = asm["_lgamma"]; asm["_lgamma"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__lgamma.apply(null, arguments);
	};

	var real__xmms_ipc_msg_new = asm["_xmms_ipc_msg_new"]; asm["_xmms_ipc_msg_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_new.apply(null, arguments);
	};

	var real__xmmsv_unref = asm["_xmmsv_unref"]; asm["_xmmsv_unref"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_unref.apply(null, arguments);
	};

	var real__strlcpy = asm["_strlcpy"]; asm["_strlcpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strlcpy.apply(null, arguments);
	};

	var real__xmmsc_bindata_retrieve = asm["_xmmsc_bindata_retrieve"]; asm["_xmmsc_bindata_retrieve"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_bindata_retrieve.apply(null, arguments);
	};

	var real__xmmsc_broadcast_playlist_loaded = asm["_xmmsc_broadcast_playlist_loaded"]; asm["_xmmsc_broadcast_playlist_loaded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_playlist_loaded.apply(null, arguments);
	};

	var real___xmmsv_utf8_charlen = asm["__xmmsv_utf8_charlen"]; asm["__xmmsv_utf8_charlen"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_utf8_charlen.apply(null, arguments);
	};

	var real__xmmsc_playlist_insert_url = asm["_xmmsc_playlist_insert_url"]; asm["_xmmsc_playlist_insert_url"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_insert_url.apply(null, arguments);
	};

	var real__xmmsv_list_remove = asm["_xmmsv_list_remove"]; asm["_xmmsv_list_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_remove.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_move = asm["_xmmsv_coll_idlist_move"]; asm["_xmmsv_coll_idlist_move"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_move.apply(null, arguments);
	};

	var real__xmms_ipc_msg_read_transport = asm["_xmms_ipc_msg_read_transport"]; asm["_xmms_ipc_msg_read_transport"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_read_transport.apply(null, arguments);
	};

	var real__wcslen = asm["_wcslen"]; asm["_wcslen"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcslen.apply(null, arguments);
	};

	var real__xmmsc_ipc_init = asm["_xmmsc_ipc_init"]; asm["_xmmsc_ipc_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_init.apply(null, arguments);
	};

	var real__xmmsc_medialib_encode_url_full = asm["_xmmsc_medialib_encode_url_full"]; asm["_xmmsc_medialib_encode_url_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_encode_url_full.apply(null, arguments);
	};

	var real__xmmsv_dict_entry_get_string = asm["_xmmsv_dict_entry_get_string"]; asm["_xmmsv_dict_entry_get_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_entry_get_string.apply(null, arguments);
	};

	var real__sscanf = asm["_sscanf"]; asm["_sscanf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__sscanf.apply(null, arguments);
	};

	var real__x_queue_pop_tail = asm["_x_queue_pop_tail"]; asm["_x_queue_pop_tail"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_queue_pop_tail.apply(null, arguments);
	};

	var real__iswdigit = asm["_iswdigit"]; asm["_iswdigit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswdigit.apply(null, arguments);
	};

	var real__isalnum_l = asm["_isalnum_l"]; asm["_isalnum_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isalnum_l.apply(null, arguments);
	};

	var real__coll_parse_unaryfilter = asm["_coll_parse_unaryfilter"]; asm["_coll_parse_unaryfilter"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_unaryfilter.apply(null, arguments);
	};

	var real__xmmsc_playlist_set_next = asm["_xmmsc_playlist_set_next"]; asm["_xmmsc_playlist_set_next"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_set_next.apply(null, arguments);
	};

	var real__MUSL_vfprintf = asm["_MUSL_vfprintf"]; asm["_MUSL_vfprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__MUSL_vfprintf.apply(null, arguments);
	};

	var real__coll_append_universe = asm["_coll_append_universe"]; asm["_coll_append_universe"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_append_universe.apply(null, arguments);
	};

	var real__setup_udp_prepare = asm["_setup_udp_prepare"]; asm["_setup_udp_prepare"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__setup_udp_prepare.apply(null, arguments);
	};

	var real__malloc_stats = asm["_malloc_stats"]; asm["_malloc_stats"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__malloc_stats.apply(null, arguments);
	};

	var real__xmmsc_disconnect_callback_set_full = asm["_xmmsc_disconnect_callback_set_full"]; asm["_xmmsc_disconnect_callback_set_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_disconnect_callback_set_full.apply(null, arguments);
	};

	var real__wcsncmp = asm["_wcsncmp"]; asm["_wcsncmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsncmp.apply(null, arguments);
	};

	var real__strcmp = asm["_strcmp"]; asm["_strcmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strcmp.apply(null, arguments);
	};

	var real__xmmsv_list_iter_first = asm["_xmmsv_list_iter_first"]; asm["_xmmsv_list_iter_first"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_first.apply(null, arguments);
	};

	var real__strncasecmp = asm["_strncasecmp"]; asm["_strncasecmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strncasecmp.apply(null, arguments);
	};

	var real__xmmsv_list_clear = asm["_xmmsv_list_clear"]; asm["_xmmsv_list_clear"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_clear.apply(null, arguments);
	};

	var real___xmmsv_dict_insert = asm["__xmmsv_dict_insert"]; asm["__xmmsv_dict_insert"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_dict_insert.apply(null, arguments);
	};

	var real__xmmsv_build_organize = asm["_xmmsv_build_organize"]; asm["_xmmsv_build_organize"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_build_organize.apply(null, arguments);
	};

	var real__xmmsc_visualization_start = asm["_xmmsc_visualization_start"]; asm["_xmmsc_visualization_start"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_start.apply(null, arguments);
	};

	var real__xmmsv_list_iter_entry_coll = asm["_xmmsv_list_iter_entry_coll"]; asm["_xmmsv_list_iter_entry_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_entry_coll.apply(null, arguments);
	};

	var real__towctrans_l = asm["_towctrans_l"]; asm["_towctrans_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__towctrans_l.apply(null, arguments);
	};

	var real__xmmsv_coll_add_limit_operator = asm["_xmmsv_coll_add_limit_operator"]; asm["_xmmsv_coll_add_limit_operator"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_add_limit_operator.apply(null, arguments);
	};

	var real__xmmsv_new_int = asm["_xmmsv_new_int"]; asm["_xmmsv_new_int"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_int.apply(null, arguments);
	};

	var real__xmmsc_medialib_entry_property_set_int_with_source = asm["_xmmsc_medialib_entry_property_set_int_with_source"]; asm["_xmmsc_medialib_entry_property_set_int_with_source"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_entry_property_set_int_with_source.apply(null, arguments);
	};

	var real__wcsxfrm_l = asm["_wcsxfrm_l"]; asm["_wcsxfrm_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsxfrm_l.apply(null, arguments);
	};

	var real__xmmsc_result_wait = asm["_xmmsc_result_wait"]; asm["_xmmsc_result_wait"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_wait.apply(null, arguments);
	};

	var real__wcschr = asm["_wcschr"]; asm["_wcschr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcschr.apply(null, arguments);
	};

	var real__pat_next = asm["_pat_next"]; asm["_pat_next"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__pat_next.apply(null, arguments);
	};

	var real__ynf = asm["_ynf"]; asm["_ynf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ynf.apply(null, arguments);
	};

	var real__xmms_ipc_transport_destroy = asm["_xmms_ipc_transport_destroy"]; asm["_xmms_ipc_transport_destroy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_transport_destroy.apply(null, arguments);
	};

	var real__lgammal = asm["_lgammal"]; asm["_lgammal"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__lgammal.apply(null, arguments);
	};

	var real__xmmsc_io_need_out_callback_set = asm["_xmmsc_io_need_out_callback_set"]; asm["_xmmsc_io_need_out_callback_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_io_need_out_callback_set.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_append = asm["_xmmsv_coll_idlist_append"]; asm["_xmmsv_coll_idlist_append"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_append.apply(null, arguments);
	};

	var real___internal_get_from_bb_float = asm["__internal_get_from_bb_float"]; asm["__internal_get_from_bb_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_float.apply(null, arguments);
	};

	var real__read_do_shm = asm["_read_do_shm"]; asm["_read_do_shm"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__read_do_shm.apply(null, arguments);
	};

	var real__wcrtomb = asm["_wcrtomb"]; asm["_wcrtomb"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcrtomb.apply(null, arguments);
	};

	var real__xmmsv_coll_ref = asm["_xmmsv_coll_ref"]; asm["_xmmsv_coll_ref"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_ref.apply(null, arguments);
	};

	var real__isdigit = asm["_isdigit"]; asm["_isdigit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isdigit.apply(null, arguments);
	};

	var real__xmmsv_list_iter_insert = asm["_xmmsv_list_iter_insert"]; asm["_xmmsv_list_iter_insert"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_insert.apply(null, arguments);
	};

	var real__ispunct_l = asm["_ispunct_l"]; asm["_ispunct_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ispunct_l.apply(null, arguments);
	};

	var real__xmmsv_get_type = asm["_xmmsv_get_type"]; asm["_xmmsv_get_type"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_type.apply(null, arguments);
	};

	var real__xmms_ipc_msg_write_transport = asm["_xmms_ipc_msg_write_transport"]; asm["_xmms_ipc_msg_write_transport"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_write_transport.apply(null, arguments);
	};

	var real__xmmsv_list_get_int32 = asm["_xmmsv_list_get_int32"]; asm["_xmmsv_list_get_int32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_get_int32.apply(null, arguments);
	};

	var real__coll_parse_prop = asm["_coll_parse_prop"]; asm["_coll_parse_prop"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_prop.apply(null, arguments);
	};

	var real__strsep = asm["_strsep"]; asm["_strsep"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strsep.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_explicit_destroy = asm["_xmmsv_dict_iter_explicit_destroy"]; asm["_xmmsv_dict_iter_explicit_destroy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_explicit_destroy.apply(null, arguments);
	};

	var real__trinkle = asm["_trinkle"]; asm["_trinkle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__trinkle.apply(null, arguments);
	};

	var real__xmmsv_new_none = asm["_xmmsv_new_none"]; asm["_xmmsv_new_none"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_none.apply(null, arguments);
	};

	var real__xmmsc_visualization_errored = asm["_xmmsc_visualization_errored"]; asm["_xmmsc_visualization_errored"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_errored.apply(null, arguments);
	};

	var real____lgammal_r = asm["___lgammal_r"]; asm["___lgammal_r"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____lgammal_r.apply(null, arguments);
	};

	var real__tre_match_empty = asm["_tre_match_empty"]; asm["_tre_match_empty"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_match_empty.apply(null, arguments);
	};

	var real__coll_parse_filter = asm["_coll_parse_filter"]; asm["_coll_parse_filter"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_filter.apply(null, arguments);
	};

	var real__xmms_dump_stack = asm["_xmms_dump_stack"]; asm["_xmms_dump_stack"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_dump_stack.apply(null, arguments);
	};

	var real__xmmsc_ipc_io_out = asm["_xmmsc_ipc_io_out"]; asm["_xmmsc_ipc_io_out"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_io_out.apply(null, arguments);
	};

	var real____strcoll_l = asm["___strcoll_l"]; asm["___strcoll_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____strcoll_l.apply(null, arguments);
	};

	var real__xmmsc_send_hello = asm["_xmmsc_send_hello"]; asm["_xmmsc_send_hello"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_send_hello.apply(null, arguments);
	};

	var real__coll_parse_notop = asm["_coll_parse_notop"]; asm["_coll_parse_notop"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_notop.apply(null, arguments);
	};

	var real__iswgraph_l = asm["_iswgraph_l"]; asm["_iswgraph_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswgraph_l.apply(null, arguments);
	};

	var real____xmmsv_null_to_none = asm["___xmmsv_null_to_none"]; asm["___xmmsv_null_to_none"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_null_to_none.apply(null, arguments);
	};

	var real__xmmsc_playlist_load = asm["_xmmsc_playlist_load"]; asm["_xmmsc_playlist_load"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_load.apply(null, arguments);
	};

	var real__xmmsv_dict_entry_get_int64 = asm["_xmmsv_dict_entry_get_int64"]; asm["_xmmsv_dict_entry_get_int64"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_entry_get_int64.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv350 = asm["___xmmsv_identity_xmmsv350"]; asm["___xmmsv_identity_xmmsv350"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv350.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv356 = asm["___xmmsv_identity_xmmsv356"]; asm["___xmmsv_identity_xmmsv356"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv356.apply(null, arguments);
	};

	var real__xmmsv_list_set_coll = asm["_xmmsv_list_set_coll"]; asm["_xmmsv_list_set_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_set_coll.apply(null, arguments);
	};

	var real__srandom = asm["_srandom"]; asm["_srandom"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__srandom.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_pos = asm["_xmmsv_bitbuffer_pos"]; asm["_xmmsv_bitbuffer_pos"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_pos.apply(null, arguments);
	};

	var real__vwprintf = asm["_vwprintf"]; asm["_vwprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vwprintf.apply(null, arguments);
	};

	var real__tre_add_tags = asm["_tre_add_tags"]; asm["_tre_add_tags"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_add_tags.apply(null, arguments);
	};

	var real__fcvt = asm["_fcvt"]; asm["_fcvt"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__fcvt.apply(null, arguments);
	};

	var real__vswprintf = asm["_vswprintf"]; asm["_vswprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vswprintf.apply(null, arguments);
	};

	var real__xmms_default_ipcpath_get = asm["_xmms_default_ipcpath_get"]; asm["_xmms_default_ipcpath_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_default_ipcpath_get.apply(null, arguments);
	};

	var real__wcscat = asm["_wcscat"]; asm["_wcscat"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcscat.apply(null, arguments);
	};

	var real__xmmsv_list_get_string = asm["_xmmsv_list_get_string"]; asm["_xmmsv_list_get_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_get_string.apply(null, arguments);
	};

	var real__strtod_l = asm["_strtod_l"]; asm["_strtod_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtod_l.apply(null, arguments);
	};

	var real__packet_init_data = asm["_packet_init_data"]; asm["_packet_init_data"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__packet_init_data.apply(null, arguments);
	};

	var real__xmmsc_unref = asm["_xmmsc_unref"]; asm["_xmmsc_unref"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_unref.apply(null, arguments);
	};

	var real__ecvt = asm["_ecvt"]; asm["_ecvt"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ecvt.apply(null, arguments);
	};

	var real__xmmsc_result_seterror = asm["_xmmsc_result_seterror"]; asm["_xmmsc_result_seterror"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_seterror.apply(null, arguments);
	};

	var real__getopt = asm["_getopt"]; asm["_getopt"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__getopt.apply(null, arguments);
	};

	var real__xmmsv_list_iter_insert_coll = asm["_xmmsv_list_iter_insert_coll"]; asm["_xmmsv_list_iter_insert_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_insert_coll.apply(null, arguments);
	};

	var real___xmmsv_list_append = asm["__xmmsv_list_append"]; asm["__xmmsv_list_append"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_append.apply(null, arguments);
	};

	var real____lgammaf_r = asm["___lgammaf_r"]; asm["___lgammaf_r"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____lgammaf_r.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_valid = asm["_xmmsv_dict_iter_valid"]; asm["_xmmsv_dict_iter_valid"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_valid.apply(null, arguments);
	};

	var real____strxfrm_l = asm["___strxfrm_l"]; asm["___strxfrm_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____strxfrm_l.apply(null, arguments);
	};

	var real__xmmsc_broadcast_medialib_entry_updated = asm["_xmmsc_broadcast_medialib_entry_updated"]; asm["_xmmsc_broadcast_medialib_entry_updated"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_medialib_entry_updated.apply(null, arguments);
	};

	var real__malloc_trim = asm["_malloc_trim"]; asm["_malloc_trim"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__malloc_trim.apply(null, arguments);
	};

	var real__coll_token_new = asm["_coll_token_new"]; asm["_coll_token_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_token_new.apply(null, arguments);
	};

	var real__xmmsv_new_error = asm["_xmmsv_new_error"]; asm["_xmmsv_new_error"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_error.apply(null, arguments);
	};

	var real__ignore_err = asm["_ignore_err"]; asm["_ignore_err"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ignore_err.apply(null, arguments);
	};

	var real__regcomp = asm["_regcomp"]; asm["_regcomp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__regcomp.apply(null, arguments);
	};

	var real__xmmsc_playlist_insert_args = asm["_xmmsc_playlist_insert_args"]; asm["_xmmsc_playlist_insert_args"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_insert_args.apply(null, arguments);
	};

	var real__strupr = asm["_strupr"]; asm["_strupr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strupr.apply(null, arguments);
	};

	var real__xmms_socket_set_nonblock = asm["_xmms_socket_set_nonblock"]; asm["_xmms_socket_set_nonblock"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_socket_set_nonblock.apply(null, arguments);
	};

	var real___xmmsv_dict_free = asm["__xmmsv_dict_free"]; asm["__xmmsv_dict_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_dict_free.apply(null, arguments);
	};

	var real__j1 = asm["_j1"]; asm["_j1"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__j1.apply(null, arguments);
	};

	var real__common70 = asm["_common70"]; asm["_common70"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__common70.apply(null, arguments);
	};

	var real__xmmsc_result_free = asm["_xmmsc_result_free"]; asm["_xmmsc_result_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_free.apply(null, arguments);
	};

	var real__isblank = asm["_isblank"]; asm["_isblank"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isblank.apply(null, arguments);
	};

	var real__x_list_foreach = asm["_x_list_foreach"]; asm["_x_list_foreach"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_foreach.apply(null, arguments);
	};

	var real__isupper = asm["_isupper"]; asm["_isupper"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isupper.apply(null, arguments);
	};

	var real___xmmsv_list_free = asm["__xmmsv_list_free"]; asm["__xmmsv_list_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_free.apply(null, arguments);
	};

	var real__rand = asm["_rand"]; asm["_rand"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__rand.apply(null, arguments);
	};

	var real__vasprintf = asm["_vasprintf"]; asm["_vasprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vasprintf.apply(null, arguments);
	};

	var real__xmmsv_list_get = asm["_xmmsv_list_get"]; asm["_xmmsv_list_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_get.apply(null, arguments);
	};

	var real__vstrfmon_l = asm["_vstrfmon_l"]; asm["_vstrfmon_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vstrfmon_l.apply(null, arguments);
	};

	var real__xmmsc_playlist_insert_id = asm["_xmmsc_playlist_insert_id"]; asm["_xmmsc_playlist_insert_id"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_insert_id.apply(null, arguments);
	};

	var real__packet_init_timing = asm["_packet_init_timing"]; asm["_packet_init_timing"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__packet_init_timing.apply(null, arguments);
	};

	var real__xmmsc_medialib_path_import_encoded = asm["_xmmsc_medialib_path_import_encoded"]; asm["_xmmsc_medialib_path_import_encoded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_path_import_encoded.apply(null, arguments);
	};

	var real__coll_parse_prepare = asm["_coll_parse_prepare"]; asm["_coll_parse_prepare"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_prepare.apply(null, arguments);
	};

	var real__xmmsc_result_new = asm["_xmmsc_result_new"]; asm["_xmmsc_result_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_new.apply(null, arguments);
	};

	var real__x_list_reverse = asm["_x_list_reverse"]; asm["_x_list_reverse"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_reverse.apply(null, arguments);
	};

	var real____xmmsv_null_to_none484 = asm["___xmmsv_null_to_none484"]; asm["___xmmsv_null_to_none484"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_null_to_none484.apply(null, arguments);
	};

	var real__xmmsc_playback_seek_ms = asm["_xmmsc_playback_seek_ms"]; asm["_xmmsc_playback_seek_ms"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_seek_ms.apply(null, arguments);
	};

	var real__xmmsc_result_callback_new_default = asm["_xmmsc_result_callback_new_default"]; asm["_xmmsc_result_callback_new_default"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_callback_new_default.apply(null, arguments);
	};

	var real__strstr = asm["_strstr"]; asm["_strstr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strstr.apply(null, arguments);
	};

	var real__xmmsc_coll_list = asm["_xmmsc_coll_list"]; asm["_xmmsc_coll_list"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_list.apply(null, arguments);
	};

	var real__xmmsc_bindata_remove = asm["_xmmsc_bindata_remove"]; asm["_xmmsc_bindata_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_bindata_remove.apply(null, arguments);
	};

	var real__verrx = asm["_verrx"]; asm["_verrx"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__verrx.apply(null, arguments);
	};

	var real__xmms_ipc_msg_set_cookie = asm["_xmms_ipc_msg_set_cookie"]; asm["_xmms_ipc_msg_set_cookie"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_set_cookie.apply(null, arguments);
	};

	var real__xmmsc_io_fd_get = asm["_xmmsc_io_fd_get"]; asm["_xmmsc_io_fd_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_io_fd_get.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_new = asm["_xmmsv_bitbuffer_new"]; asm["_xmmsv_bitbuffer_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_new.apply(null, arguments);
	};

	var real__xmmsv_coll_is_type = asm["_xmmsv_coll_is_type"]; asm["_xmmsv_coll_is_type"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_is_type.apply(null, arguments);
	};

	var real__do_read134 = asm["_do_read134"]; asm["_do_read134"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__do_read134.apply(null, arguments);
	};

	var real__strtok_r = asm["_strtok_r"]; asm["_strtok_r"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtok_r.apply(null, arguments);
	};

	var real__xmmsv_build_list_va = asm["_xmmsv_build_list_va"]; asm["_xmmsv_build_list_va"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_build_list_va.apply(null, arguments);
	};

	var real__xmmsv_get_string = asm["_xmmsv_get_string"]; asm["_xmmsv_get_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_string.apply(null, arguments);
	};

	var real__xmmsc_playlist_remove = asm["_xmmsc_playlist_remove"]; asm["_xmmsc_playlist_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_remove.apply(null, arguments);
	};

	var real__xmmsv_list_get_coll = asm["_xmmsv_list_get_coll"]; asm["_xmmsv_list_get_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_get_coll.apply(null, arguments);
	};

	var real__xmmsc_mainloop_emscripten_loop = asm["_xmmsc_mainloop_emscripten_loop"]; asm["_xmmsc_mainloop_emscripten_loop"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_mainloop_emscripten_loop.apply(null, arguments);
	};

	var real___xmmsc_medialib_verify_url = asm["__xmmsc_medialib_verify_url"]; asm["__xmmsc_medialib_verify_url"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsc_medialib_verify_url.apply(null, arguments);
	};

	var real__wcstoumax = asm["_wcstoumax"]; asm["_wcstoumax"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstoumax.apply(null, arguments);
	};

	var real__xmmsc_playlist_move_entry = asm["_xmmsc_playlist_move_entry"]; asm["_xmmsc_playlist_move_entry"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_move_entry.apply(null, arguments);
	};

	var real___internal_get_from_bb_value_dict_alloc = asm["__internal_get_from_bb_value_dict_alloc"]; asm["__internal_get_from_bb_value_dict_alloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_value_dict_alloc.apply(null, arguments);
	};

	var real__do_read = asm["_do_read"]; asm["_do_read"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__do_read.apply(null, arguments);
	};

	var real__strndup = asm["_strndup"]; asm["_strndup"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strndup.apply(null, arguments);
	};

	var real__xmmsc_result_get_connection = asm["_xmmsc_result_get_connection"]; asm["_xmmsc_result_get_connection"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_get_connection.apply(null, arguments);
	};

	var real__xmmsv_dict_set_string = asm["_xmmsv_dict_set_string"]; asm["_xmmsv_dict_set_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_set_string.apply(null, arguments);
	};

	var real__xmmsc_visualization_init_handle = asm["_xmmsc_visualization_init_handle"]; asm["_xmmsc_visualization_init_handle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_init_handle.apply(null, arguments);
	};

	var real__x_queue_peek_head = asm["_x_queue_peek_head"]; asm["_x_queue_peek_head"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_queue_peek_head.apply(null, arguments);
	};

	var real__mbstowcs = asm["_mbstowcs"]; asm["_mbstowcs"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mbstowcs.apply(null, arguments);
	};

	var real__atoll = asm["_atoll"]; asm["_atoll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__atoll.apply(null, arguments);
	};

	var real__mempcpy = asm["_mempcpy"]; asm["_mempcpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mempcpy.apply(null, arguments);
	};

	var real__xmmsc_playback_tickle = asm["_xmmsc_playback_tickle"]; asm["_xmmsc_playback_tickle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_tickle.apply(null, arguments);
	};

	var real__xmmsc_broadcast_quit = asm["_xmmsc_broadcast_quit"]; asm["_xmmsc_broadcast_quit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_quit.apply(null, arguments);
	};

	var real__xmmsc_broadcast_playback_status = asm["_xmmsc_broadcast_playback_status"]; asm["_xmmsc_broadcast_playback_status"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_playback_status.apply(null, arguments);
	};

	var real__globfree = asm["_globfree"]; asm["_globfree"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__globfree.apply(null, arguments);
	};

	var real__iswpunct_l = asm["_iswpunct_l"]; asm["_iswpunct_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswpunct_l.apply(null, arguments);
	};

	var real__tre_copy_ast = asm["_tre_copy_ast"]; asm["_tre_copy_ast"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_copy_ast.apply(null, arguments);
	};

	var real__wmemcpy = asm["_wmemcpy"]; asm["_wmemcpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wmemcpy.apply(null, arguments);
	};

	var real____tre_mem_destroy = asm["___tre_mem_destroy"]; asm["___tre_mem_destroy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____tre_mem_destroy.apply(null, arguments);
	};

	var real__setup_udp_handle = asm["_setup_udp_handle"]; asm["_setup_udp_handle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__setup_udp_handle.apply(null, arguments);
	};

	var real__bzero = asm["_bzero"]; asm["_bzero"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__bzero.apply(null, arguments);
	};

	var real__xmmsc_signal_mediainfo_reader_unindexed = asm["_xmmsc_signal_mediainfo_reader_unindexed"]; asm["_xmmsc_signal_mediainfo_reader_unindexed"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_signal_mediainfo_reader_unindexed.apply(null, arguments);
	};

	var real__xmmsc_broadcast_playlist_changed = asm["_xmmsc_broadcast_playlist_changed"]; asm["_xmmsc_broadcast_playlist_changed"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_playlist_changed.apply(null, arguments);
	};

	var real__strchrsplit = asm["_strchrsplit"]; asm["_strchrsplit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strchrsplit.apply(null, arguments);
	};

	var real__rand_r = asm["_rand_r"]; asm["_rand_r"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__rand_r.apply(null, arguments);
	};

	var real__logb = asm["_logb"]; asm["_logb"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__logb.apply(null, arguments);
	};

	var real__mbsnrtowcs = asm["_mbsnrtowcs"]; asm["_mbsnrtowcs"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mbsnrtowcs.apply(null, arguments);
	};

	var real___internal_put_on_bb_int64 = asm["__internal_put_on_bb_int64"]; asm["__internal_put_on_bb_int64"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_int64.apply(null, arguments);
	};

	var real__btowc = asm["_btowc"]; asm["_btowc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__btowc.apply(null, arguments);
	};

	var real__xmmsc_playlist_create = asm["_xmmsc_playlist_create"]; asm["_xmmsc_playlist_create"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_create.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_remove = asm["_xmmsv_coll_attribute_remove"]; asm["_xmmsv_coll_attribute_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_remove.apply(null, arguments);
	};

	var real__xmmsv_build_list = asm["_xmmsv_build_list"]; asm["_xmmsv_build_list"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_build_list.apply(null, arguments);
	};

	var real___xmmsv_dict_search = asm["__xmmsv_dict_search"]; asm["__xmmsv_dict_search"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_dict_search.apply(null, arguments);
	};

	var real__xmmsc_disconnect_callback_set = asm["_xmmsc_disconnect_callback_set"]; asm["_xmmsc_disconnect_callback_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_disconnect_callback_set.apply(null, arguments);
	};

	var real__x_vasprintf = asm["_x_vasprintf"]; asm["_x_vasprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_vasprintf.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_pair_int64 = asm["_xmmsv_dict_iter_pair_int64"]; asm["_xmmsv_dict_iter_pair_int64"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_pair_int64.apply(null, arguments);
	};

	var real__xmmsc_ref = asm["_xmmsc_ref"]; asm["_xmmsc_ref"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ref.apply(null, arguments);
	};

	var real__wcsnlen = asm["_wcsnlen"]; asm["_wcsnlen"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsnlen.apply(null, arguments);
	};

	var real__xmmsc_medialib_remove_entry = asm["_xmmsc_medialib_remove_entry"]; asm["_xmmsc_medialib_remove_entry"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_remove_entry.apply(null, arguments);
	};

	var real__x_list_prepend = asm["_x_list_prepend"]; asm["_x_list_prepend"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_prepend.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_get_int32 = asm["_xmmsv_coll_attribute_get_int32"]; asm["_xmmsv_coll_attribute_get_int32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_get_int32.apply(null, arguments);
	};

	var real__wprintf_core = asm["_wprintf_core"]; asm["_wprintf_core"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wprintf_core.apply(null, arguments);
	};

	var real__xmmsc_coll_sync = asm["_xmmsc_coll_sync"]; asm["_xmmsc_coll_sync"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_sync.apply(null, arguments);
	};

	var real__xmmsv_get_dict_iter = asm["_xmmsv_get_dict_iter"]; asm["_xmmsv_get_dict_iter"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_dict_iter.apply(null, arguments);
	};

	var real__xmmsv_list_iter_insert_string = asm["_xmmsv_list_iter_insert_string"]; asm["_xmmsv_list_iter_insert_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_insert_string.apply(null, arguments);
	};

	var real__xmmsv_list_restrict_type = asm["_xmmsv_list_restrict_type"]; asm["_xmmsv_list_restrict_type"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_restrict_type.apply(null, arguments);
	};

	var real___internal_put_on_bb_value_list = asm["__internal_put_on_bb_value_list"]; asm["__internal_put_on_bb_value_list"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_value_list.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_set_value = asm["_xmmsv_coll_attribute_set_value"]; asm["_xmmsv_coll_attribute_set_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_set_value.apply(null, arguments);
	};

	var real__errx = asm["_errx"]; asm["_errx"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__errx.apply(null, arguments);
	};

	var real__xmmsc_playlist_current_active = asm["_xmmsc_playlist_current_active"]; asm["_xmmsc_playlist_current_active"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_current_active.apply(null, arguments);
	};

	var real__xmmsc_coll_rename = asm["_xmmsc_coll_rename"]; asm["_xmmsc_coll_rename"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_rename.apply(null, arguments);
	};

	var real__xmmsc_playback_playtime = asm["_xmmsc_playback_playtime"]; asm["_xmmsc_playback_playtime"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_playtime.apply(null, arguments);
	};

	var real__posix_memalign = asm["_posix_memalign"]; asm["_posix_memalign"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__posix_memalign.apply(null, arguments);
	};

	var real___internal_get_from_bb_data = asm["__internal_get_from_bb_data"]; asm["__internal_get_from_bb_data"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_data.apply(null, arguments);
	};

	var real__iswcntrl = asm["_iswcntrl"]; asm["_iswcntrl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswcntrl.apply(null, arguments);
	};

	var real__strtold_l = asm["_strtold_l"]; asm["_strtold_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtold_l.apply(null, arguments);
	};

	var real___xmmsv_dict_remove = asm["__xmmsv_dict_remove"]; asm["__xmmsv_dict_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_dict_remove.apply(null, arguments);
	};

	var real__setup_shm_prepare = asm["_setup_shm_prepare"]; asm["_setup_shm_prepare"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__setup_shm_prepare.apply(null, arguments);
	};

	var real__xmmsc_io_need_out_callback_set_full = asm["_xmmsc_io_need_out_callback_set_full"]; asm["_xmmsc_io_need_out_callback_set_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_io_need_out_callback_set_full.apply(null, arguments);
	};

	var real__xmmsv_list_foreach = asm["_xmmsv_list_foreach"]; asm["_xmmsv_list_foreach"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_foreach.apply(null, arguments);
	};

	var real__tre_set_union = asm["_tre_set_union"]; asm["_tre_set_union"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_set_union.apply(null, arguments);
	};

	var real__coll_parse_posseq = asm["_coll_parse_posseq"]; asm["_coll_parse_posseq"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_posseq.apply(null, arguments);
	};

	var real__xmmsv_list_append_int = asm["_xmmsv_list_append_int"]; asm["_xmmsv_list_append_int"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_append_int.apply(null, arguments);
	};

	var real__toupper_l = asm["_toupper_l"]; asm["_toupper_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__toupper_l.apply(null, arguments);
	};

	var real__xmmsv_is_type = asm["_xmmsv_is_type"]; asm["_xmmsv_is_type"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_is_type.apply(null, arguments);
	};

	var real__xmmsc_medialib_rehash = asm["_xmmsc_medialib_rehash"]; asm["_xmmsc_medialib_rehash"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_rehash.apply(null, arguments);
	};

	var real__x_list_position = asm["_x_list_position"]; asm["_x_list_position"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_position.apply(null, arguments);
	};

	var real__xmmsc_log_handler_set = asm["_xmmsc_log_handler_set"]; asm["_xmmsc_log_handler_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_log_handler_set.apply(null, arguments);
	};

	var real__xmmsc_coll_find = asm["_xmmsc_coll_find"]; asm["_xmmsc_coll_find"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_find.apply(null, arguments);
	};

	var real__strpchrsplit = asm["_strpchrsplit"]; asm["_strpchrsplit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strpchrsplit.apply(null, arguments);
	};

	var real___internal_put_on_bb_collection = asm["__internal_put_on_bb_collection"]; asm["__internal_put_on_bb_collection"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_collection.apply(null, arguments);
	};

	var real__wcsncasecmp_l = asm["_wcsncasecmp_l"]; asm["_wcsncasecmp_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsncasecmp_l.apply(null, arguments);
	};

	var real__xmms_ipc_msg_update_length = asm["_xmms_ipc_msg_update_length"]; asm["_xmms_ipc_msg_update_length"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_update_length.apply(null, arguments);
	};

	var real__iswspace_l = asm["_iswspace_l"]; asm["_iswspace_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswspace_l.apply(null, arguments);
	};

	var real__coll_token_free = asm["_coll_token_free"]; asm["_coll_token_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_token_free.apply(null, arguments);
	};

	var real__xmmsv_build_dict = asm["_xmmsv_build_dict"]; asm["_xmmsv_build_dict"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_build_dict.apply(null, arguments);
	};

	var real__isupper_l = asm["_isupper_l"]; asm["_isupper_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isupper_l.apply(null, arguments);
	};

	var real__xmmsv_list_iter_valid = asm["_xmmsv_list_iter_valid"]; asm["_xmmsv_list_iter_valid"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_valid.apply(null, arguments);
	};

	var real__wcscmp = asm["_wcscmp"]; asm["_wcscmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcscmp.apply(null, arguments);
	};

	var real____shlim = asm["___shlim"]; asm["___shlim"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____shlim.apply(null, arguments);
	};

	var real__xmms_ipc_usocket_server_init = asm["_xmms_ipc_usocket_server_init"]; asm["_xmms_ipc_usocket_server_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_usocket_server_init.apply(null, arguments);
	};

	var real__isblank_l = asm["_isblank_l"]; asm["_isblank_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isblank_l.apply(null, arguments);
	};

	var real___xmmsv_free = asm["__xmmsv_free"]; asm["__xmmsv_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_free.apply(null, arguments);
	};

	var real__xmmsv_get_coll = asm["_xmmsv_get_coll"]; asm["_xmmsv_get_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_coll.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_set_string = asm["_xmmsv_coll_attribute_set_string"]; asm["_xmmsv_coll_attribute_set_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_set_string.apply(null, arguments);
	};

	var real__mbtowc = asm["_mbtowc"]; asm["_mbtowc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mbtowc.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_clear = asm["_xmmsv_coll_idlist_clear"]; asm["_xmmsv_coll_idlist_clear"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_clear.apply(null, arguments);
	};

	var real__fnmatch = asm["_fnmatch"]; asm["_fnmatch"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__fnmatch.apply(null, arguments);
	};

	var real__xmmsv_list_set_float = asm["_xmmsv_list_set_float"]; asm["_xmmsv_list_set_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_set_float.apply(null, arguments);
	};

	var real__index = asm["_index"]; asm["_index"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__index.apply(null, arguments);
	};

	var real__xmmsv_list_insert = asm["_xmmsv_list_insert"]; asm["_xmmsv_list_insert"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_insert.apply(null, arguments);
	};

	var real__frexpf = asm["_frexpf"]; asm["_frexpf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__frexpf.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_get_index_int64 = asm["_xmmsv_coll_idlist_get_index_int64"]; asm["_xmmsv_coll_idlist_get_index_int64"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_get_index_int64.apply(null, arguments);
	};

	var real__duplicate_list_value = asm["_duplicate_list_value"]; asm["_duplicate_list_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__duplicate_list_value.apply(null, arguments);
	};

	var real__xmmsc_playback_start = asm["_xmmsc_playback_start"]; asm["_xmmsc_playback_start"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_start.apply(null, arguments);
	};

	var real__wctob = asm["_wctob"]; asm["_wctob"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wctob.apply(null, arguments);
	};

	var real__x_queue_push_head = asm["_x_queue_push_head"]; asm["_x_queue_push_head"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_queue_push_head.apply(null, arguments);
	};

	var real___xmmsv_dict_iter_free = asm["__xmmsv_dict_iter_free"]; asm["__xmmsv_dict_iter_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_dict_iter_free.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_rewind = asm["_xmmsv_bitbuffer_rewind"]; asm["_xmmsv_bitbuffer_rewind"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_rewind.apply(null, arguments);
	};

	var real__wcpncpy = asm["_wcpncpy"]; asm["_wcpncpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcpncpy.apply(null, arguments);
	};

	var real__wcsncat = asm["_wcsncat"]; asm["_wcsncat"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsncat.apply(null, arguments);
	};

	var real__xmmsc_playlist_rinsert_encoded = asm["_xmmsc_playlist_rinsert_encoded"]; asm["_xmmsc_playlist_rinsert_encoded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_rinsert_encoded.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_pair = asm["_xmmsv_dict_iter_pair"]; asm["_xmmsv_dict_iter_pair"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_pair.apply(null, arguments);
	};

	var real__tgamma = asm["_tgamma"]; asm["_tgamma"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tgamma.apply(null, arguments);
	};

	var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__i64Subtract.apply(null, arguments);
	};

	var real__xmmsc_medialib_add_entry_encoded = asm["_xmmsc_medialib_add_entry_encoded"]; asm["_xmmsc_medialib_add_entry_encoded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_add_entry_encoded.apply(null, arguments);
	};

	var real__coll_parse_idseq = asm["_coll_parse_idseq"]; asm["_coll_parse_idseq"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_idseq.apply(null, arguments);
	};

	var real__xmmsc_log_handle = asm["_xmmsc_log_handle"]; asm["_xmmsc_log_handle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_log_handle.apply(null, arguments);
	};

	var real__coll_parse_parenexpr = asm["_coll_parse_parenexpr"]; asm["_coll_parse_parenexpr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_parenexpr.apply(null, arguments);
	};

	var real__wcstok = asm["_wcstok"]; asm["_wcstok"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstok.apply(null, arguments);
	};

	var real__strcasecmp_l = asm["_strcasecmp_l"]; asm["_strcasecmp_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strcasecmp_l.apply(null, arguments);
	};

	var real___xmmsv_list_sort = asm["__xmmsv_list_sort"]; asm["__xmmsv_list_sort"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_sort.apply(null, arguments);
	};

	var real__xmms_ipc_transport_write = asm["_xmms_ipc_transport_write"]; asm["_xmms_ipc_transport_write"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_transport_write.apply(null, arguments);
	};

	var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__bitshift64Shl.apply(null, arguments);
	};

	var real__xmmsc_result_run = asm["_xmmsc_result_run"]; asm["_xmmsc_result_run"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_run.apply(null, arguments);
	};

	var real__xmmsc_ipc_lock = asm["_xmmsc_ipc_lock"]; asm["_xmmsc_ipc_lock"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_lock.apply(null, arguments);
	};

	var real__xmms_ipc_msg_get_object = asm["_xmms_ipc_msg_get_object"]; asm["_xmms_ipc_msg_get_object"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_get_object.apply(null, arguments);
	};

	var real__xmmsc_lock_set = asm["_xmmsc_lock_set"]; asm["_xmmsc_lock_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_lock_set.apply(null, arguments);
	};

	var real__strlcat = asm["_strlcat"]; asm["_strlcat"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strlcat.apply(null, arguments);
	};

	var real__ldexpf = asm["_ldexpf"]; asm["_ldexpf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ldexpf.apply(null, arguments);
	};

	var real__regerror = asm["_regerror"]; asm["_regerror"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__regerror.apply(null, arguments);
	};

	var real__xmmsv_coll_add_order_operators = asm["_xmmsv_coll_add_order_operators"]; asm["_xmmsv_coll_add_order_operators"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_add_order_operators.apply(null, arguments);
	};

	var real__memccpy = asm["_memccpy"]; asm["_memccpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__memccpy.apply(null, arguments);
	};

	var real__xmmsv_coll_add_order_operator = asm["_xmmsv_coll_add_order_operator"]; asm["_xmmsv_coll_add_order_operator"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_add_order_operator.apply(null, arguments);
	};

	var real__x_list_remove_link = asm["_x_list_remove_link"]; asm["_x_list_remove_link"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_remove_link.apply(null, arguments);
	};

	var real__xmmsc_deinit = asm["_xmmsc_deinit"]; asm["_xmmsc_deinit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_deinit.apply(null, arguments);
	};

	var real__xmms_ipc_msg_get_cookie = asm["_xmms_ipc_msg_get_cookie"]; asm["_xmms_ipc_msg_get_cookie"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_get_cookie.apply(null, arguments);
	};

	var real__xmmsc_write_msg_to_ipc = asm["_xmmsc_write_msg_to_ipc"]; asm["_xmmsc_write_msg_to_ipc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_write_msg_to_ipc.apply(null, arguments);
	};

	var real__x_list_copy = asm["_x_list_copy"]; asm["_x_list_copy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_copy.apply(null, arguments);
	};

	var real__xmmsc_quit = asm["_xmmsc_quit"]; asm["_xmmsc_quit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_quit.apply(null, arguments);
	};

	var real__scalbnl = asm["_scalbnl"]; asm["_scalbnl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__scalbnl.apply(null, arguments);
	};

	var real__xmmsc_log_default_handler = asm["_xmmsc_log_default_handler"]; asm["_xmmsc_log_default_handler"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_log_default_handler.apply(null, arguments);
	};

	var real__strcspn = asm["_strcspn"]; asm["_strcspn"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strcspn.apply(null, arguments);
	};

	var real__jrand48 = asm["_jrand48"]; asm["_jrand48"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__jrand48.apply(null, arguments);
	};

	var real__scalbnf = asm["_scalbnf"]; asm["_scalbnf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__scalbnf.apply(null, arguments);
	};

	var real__mblen = asm["_mblen"]; asm["_mblen"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mblen.apply(null, arguments);
	};

	var real__xmmsc_playlist_shuffle = asm["_xmmsc_playlist_shuffle"]; asm["_xmmsc_playlist_shuffle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_shuffle.apply(null, arguments);
	};

	var real__wait_for_socket = asm["_wait_for_socket"]; asm["_wait_for_socket"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wait_for_socket.apply(null, arguments);
	};

	var real__xmms_ipc_tcp_destroy = asm["_xmms_ipc_tcp_destroy"]; asm["_xmms_ipc_tcp_destroy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_tcp_destroy.apply(null, arguments);
	};

	var real__x_list_concat = asm["_x_list_concat"]; asm["_x_list_concat"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_concat.apply(null, arguments);
	};

	var real____rand48_step = asm["___rand48_step"]; asm["___rand48_step"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____rand48_step.apply(null, arguments);
	};

	var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__llvm_cttz_i32.apply(null, arguments);
	};

	var real__x_list_first = asm["_x_list_first"]; asm["_x_list_first"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_first.apply(null, arguments);
	};

	var real__vwarn = asm["_vwarn"]; asm["_vwarn"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vwarn.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_pair_coll = asm["_xmmsv_dict_iter_pair_coll"]; asm["_xmmsv_dict_iter_pair_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_pair_coll.apply(null, arguments);
	};

	var real___xmmsv_dict_new = asm["__xmmsv_dict_new"]; asm["__xmmsv_dict_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_dict_new.apply(null, arguments);
	};

	var real__xmmsc_xform_media_browse_encoded = asm["_xmmsc_xform_media_browse_encoded"]; asm["_xmmsc_xform_media_browse_encoded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_xform_media_browse_encoded.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_set_coll = asm["_xmmsv_dict_iter_set_coll"]; asm["_xmmsv_dict_iter_set_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_set_coll.apply(null, arguments);
	};

	var real___sum_len_string_dict = asm["__sum_len_string_dict"]; asm["__sum_len_string_dict"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___sum_len_string_dict.apply(null, arguments);
	};

	var real____toread = asm["___toread"]; asm["___toread"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____toread.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_set_c2c = asm["_xmmsc_result_notifier_set_c2c"]; asm["_xmmsc_result_notifier_set_c2c"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_set_c2c.apply(null, arguments);
	};

	var real__xmmsc_write_signal_msg = asm["_xmmsc_write_signal_msg"]; asm["_xmmsc_write_signal_msg"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_write_signal_msg.apply(null, arguments);
	};

	var real__sort = asm["_sort"]; asm["_sort"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__sort.apply(null, arguments);
	};

	var real__atol = asm["_atol"]; asm["_atol"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__atol.apply(null, arguments);
	};

	var real__printf_core = asm["_printf_core"]; asm["_printf_core"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__printf_core.apply(null, arguments);
	};

	var real__tre_compare_items = asm["_tre_compare_items"]; asm["_tre_compare_items"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_compare_items.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_put_data = asm["_xmmsv_bitbuffer_put_data"]; asm["_xmmsv_bitbuffer_put_data"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_put_data.apply(null, arguments);
	};

	var real__fputws = asm["_fputws"]; asm["_fputws"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__fputws.apply(null, arguments);
	};

	var real__xmmsc_send_cmd = asm["_xmmsc_send_cmd"]; asm["_xmmsc_send_cmd"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_send_cmd.apply(null, arguments);
	};

	var real__ilogbl = asm["_ilogbl"]; asm["_ilogbl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ilogbl.apply(null, arguments);
	};

	var real__coll_parse_strval = asm["_coll_parse_strval"]; asm["_coll_parse_strval"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_strval.apply(null, arguments);
	};

	var real___xmmsv_list_clear = asm["__xmmsv_list_clear"]; asm["__xmmsv_list_clear"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_clear.apply(null, arguments);
	};

	var real__rindex = asm["_rindex"]; asm["_rindex"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__rindex.apply(null, arguments);
	};

	var real__xmmsc_ipc_connect = asm["_xmmsc_ipc_connect"]; asm["_xmmsc_ipc_connect"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_connect.apply(null, arguments);
	};

	var real__xmmsv_encode_url = asm["_xmmsv_encode_url"]; asm["_xmmsv_encode_url"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_encode_url.apply(null, arguments);
	};

	var real__xmmsv_list_get_type = asm["_xmmsv_list_get_type"]; asm["_xmmsv_list_get_type"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_get_type.apply(null, arguments);
	};

	var real__xmms_ipc_usocket_read = asm["_xmms_ipc_usocket_read"]; asm["_xmms_ipc_usocket_read"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_usocket_read.apply(null, arguments);
	};

	var real__isalnum = asm["_isalnum"]; asm["_isalnum"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isalnum.apply(null, arguments);
	};

	var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strlen.apply(null, arguments);
	};

	var real__xmmsc_get_last_error = asm["_xmmsc_get_last_error"]; asm["_xmmsc_get_last_error"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_get_last_error.apply(null, arguments);
	};

	var real__xmmsc_medialib_add_entry_full = asm["_xmmsc_medialib_add_entry_full"]; asm["_xmmsc_medialib_add_entry_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_add_entry_full.apply(null, arguments);
	};

	var real__strrchr = asm["_strrchr"]; asm["_strrchr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strrchr.apply(null, arguments);
	};

	var real__get_dataset = asm["_get_dataset"]; asm["_get_dataset"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__get_dataset.apply(null, arguments);
	};

	var real__xmms_strlist_copy = asm["_xmms_strlist_copy"]; asm["_xmms_strlist_copy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_strlist_copy.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_get_size = asm["_xmmsv_coll_idlist_get_size"]; asm["_xmmsv_coll_idlist_get_size"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_get_size.apply(null, arguments);
	};

	var real__xmmsv_dict_remove = asm["_xmmsv_dict_remove"]; asm["_xmmsv_dict_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_remove.apply(null, arguments);
	};

	var real__strverscmp = asm["_strverscmp"]; asm["_strverscmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strverscmp.apply(null, arguments);
	};

	var real__iswupper = asm["_iswupper"]; asm["_iswupper"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswupper.apply(null, arguments);
	};

	var real__xmmsc_ipc_wait_for_event = asm["_xmmsc_ipc_wait_for_event"]; asm["_xmmsc_ipc_wait_for_event"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_wait_for_event.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_set = asm["_xmmsv_coll_idlist_set"]; asm["_xmmsv_coll_idlist_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_set.apply(null, arguments);
	};

	var real__xmmsv_get_int64 = asm["_xmmsv_get_int64"]; asm["_xmmsv_get_int64"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_int64.apply(null, arguments);
	};

	var real__xmmsv_list_get_size = asm["_xmmsv_list_get_size"]; asm["_xmmsv_list_get_size"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_get_size.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_put_bits_at = asm["_xmmsv_bitbuffer_put_bits_at"]; asm["_xmmsv_bitbuffer_put_bits_at"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_put_bits_at.apply(null, arguments);
	};

	var real__xmmsc_result_unref = asm["_xmmsc_result_unref"]; asm["_xmmsc_result_unref"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_unref.apply(null, arguments);
	};

	var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strncpy.apply(null, arguments);
	};

	var real____strdup = asm["___strdup"]; asm["___strdup"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____strdup.apply(null, arguments);
	};

	var real__nrand48 = asm["_nrand48"]; asm["_nrand48"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__nrand48.apply(null, arguments);
	};

	var real___internal_put_on_bb_int32 = asm["__internal_put_on_bb_int32"]; asm["__internal_put_on_bb_int32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_int32.apply(null, arguments);
	};

	var real__wcsdup = asm["_wcsdup"]; asm["_wcsdup"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsdup.apply(null, arguments);
	};

	var real___xmmsv_list_insert = asm["__xmmsv_list_insert"]; asm["__xmmsv_list_insert"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_insert.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_align = asm["_xmmsv_bitbuffer_align"]; asm["_xmmsv_bitbuffer_align"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_align.apply(null, arguments);
	};

	var real__xmmsc_result_visc_set = asm["_xmmsc_result_visc_set"]; asm["_xmmsc_result_visc_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_visc_set.apply(null, arguments);
	};

	var real__malloc_usable_size = asm["_malloc_usable_size"]; asm["_malloc_usable_size"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__malloc_usable_size.apply(null, arguments);
	};

	var real__xmmsc_playback_seek_samples = asm["_xmmsc_playback_seek_samples"]; asm["_xmmsc_playback_seek_samples"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_seek_samples.apply(null, arguments);
	};

	var real__y0 = asm["_y0"]; asm["_y0"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__y0.apply(null, arguments);
	};

	var real___internal_get_from_bb_error_alloc = asm["__internal_get_from_bb_error_alloc"]; asm["__internal_get_from_bb_error_alloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_error_alloc.apply(null, arguments);
	};

	var real__wcstoul = asm["_wcstoul"]; asm["_wcstoul"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstoul.apply(null, arguments);
	};

	var real__read_do_udp = asm["_read_do_udp"]; asm["_read_do_udp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__read_do_udp.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_get_string = asm["_xmmsv_coll_attribute_get_string"]; asm["_xmmsv_coll_attribute_get_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_get_string.apply(null, arguments);
	};

	var real___internal_get_from_bb_int32_positive = asm["__internal_get_from_bb_int32_positive"]; asm["__internal_get_from_bb_int32_positive"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_int32_positive.apply(null, arguments);
	};

	var real__strnlen = asm["_strnlen"]; asm["_strnlen"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strnlen.apply(null, arguments);
	};

	var real__bsearch = asm["_bsearch"]; asm["_bsearch"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__bsearch.apply(null, arguments);
	};

	var real__xmmsc_config_list_values = asm["_xmmsc_config_list_values"]; asm["_xmmsc_config_list_values"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_config_list_values.apply(null, arguments);
	};

	var real__isascii = asm["_isascii"]; asm["_isascii"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isascii.apply(null, arguments);
	};

	var real__xmmsv_list_iter_entry_float = asm["_xmmsv_list_iter_entry_float"]; asm["_xmmsv_list_iter_entry_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_entry_float.apply(null, arguments);
	};

	var real__xmmsc_visualization_property_set = asm["_xmmsc_visualization_property_set"]; asm["_xmmsc_visualization_property_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_property_set.apply(null, arguments);
	};

	var real__towupper = asm["_towupper"]; asm["_towupper"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__towupper.apply(null, arguments);
	};

	var real__xmmsv_list_iter_set = asm["_xmmsv_list_iter_set"]; asm["_xmmsv_list_iter_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_set.apply(null, arguments);
	};

	var real__xmmsc_userconfdir_get = asm["_xmmsc_userconfdir_get"]; asm["_xmmsc_userconfdir_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_userconfdir_get.apply(null, arguments);
	};

	var real__xmmsc_connect = asm["_xmmsc_connect"]; asm["_xmmsc_connect"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_connect.apply(null, arguments);
	};

	var real__xmmsv_dict_get = asm["_xmmsv_dict_get"]; asm["_xmmsv_dict_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_get.apply(null, arguments);
	};

	var real__xmmsc_ipc_disconnected = asm["_xmmsc_ipc_disconnected"]; asm["_xmmsc_ipc_disconnected"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_disconnected.apply(null, arguments);
	};

	var real__xmmsv_dict_clear = asm["_xmmsv_dict_clear"]; asm["_xmmsv_dict_clear"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_clear.apply(null, arguments);
	};

	var real__coll_parse_orop_append = asm["_coll_parse_orop_append"]; asm["_coll_parse_orop_append"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_orop_append.apply(null, arguments);
	};

	var real__xmmsc_xform_media_browse = asm["_xmmsc_xform_media_browse"]; asm["_xmmsc_xform_media_browse"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_xform_media_browse.apply(null, arguments);
	};

	var real____shgetc = asm["___shgetc"]; asm["___shgetc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____shgetc.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_first = asm["_xmmsv_dict_iter_first"]; asm["_xmmsv_dict_iter_first"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_first.apply(null, arguments);
	};

	var real__xmmsv_list_iter_seek = asm["_xmmsv_list_iter_seek"]; asm["_xmmsv_list_iter_seek"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_seek.apply(null, arguments);
	};

	var real__tolower = asm["_tolower"]; asm["_tolower"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tolower.apply(null, arguments);
	};

	var real__islower = asm["_islower"]; asm["_islower"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__islower.apply(null, arguments);
	};

	var real__wcpcpy = asm["_wcpcpy"]; asm["_wcpcpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcpcpy.apply(null, arguments);
	};

	var real__frexp = asm["_frexp"]; asm["_frexp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__frexp.apply(null, arguments);
	};

	var real__memalign = asm["_memalign"]; asm["_memalign"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__memalign.apply(null, arguments);
	};

	var real__xmmsv_list_iter_insert_float = asm["_xmmsv_list_iter_insert_float"]; asm["_xmmsv_list_iter_insert_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_insert_float.apply(null, arguments);
	};

	var real__xmms_strlist_len = asm["_xmms_strlist_len"]; asm["_xmms_strlist_len"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_strlist_len.apply(null, arguments);
	};

	var real__duplicate_coll_value = asm["_duplicate_coll_value"]; asm["_duplicate_coll_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__duplicate_coll_value.apply(null, arguments);
	};

	var real__x_queue_is_empty = asm["_x_queue_is_empty"]; asm["_x_queue_is_empty"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_queue_is_empty.apply(null, arguments);
	};

	var real__xmmsc_ipc_disconnect = asm["_xmmsc_ipc_disconnect"]; asm["_xmmsc_ipc_disconnect"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_disconnect.apply(null, arguments);
	};

	var real__xmmsc_ipc_unlock = asm["_xmmsc_ipc_unlock"]; asm["_xmmsc_ipc_unlock"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_unlock.apply(null, arguments);
	};

	var real____strchrnul = asm["___strchrnul"]; asm["___strchrnul"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____strchrnul.apply(null, arguments);
	};

	var real__xmmsc_broadcast_medialib_entry_removed = asm["_xmmsc_broadcast_medialib_entry_removed"]; asm["_xmmsc_broadcast_medialib_entry_removed"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_medialib_entry_removed.apply(null, arguments);
	};

	var real__iswlower_l = asm["_iswlower_l"]; asm["_iswlower_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswlower_l.apply(null, arguments);
	};

	var real__xmmsc_medialib_entry_property_set_str = asm["_xmmsc_medialib_entry_property_set_str"]; asm["_xmmsc_medialib_entry_property_set_str"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_entry_property_set_str.apply(null, arguments);
	};

	var real__xmmsv_propdict_to_dict = asm["_xmmsv_propdict_to_dict"]; asm["_xmmsv_propdict_to_dict"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_propdict_to_dict.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_next = asm["_xmmsv_dict_iter_next"]; asm["_xmmsv_dict_iter_next"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_next.apply(null, arguments);
	};

	var real__xmmsc_io_out_handle = asm["_xmmsc_io_out_handle"]; asm["_xmmsc_io_out_handle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_io_out_handle.apply(null, arguments);
	};

	var real__strpbrk = asm["_strpbrk"]; asm["_strpbrk"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strpbrk.apply(null, arguments);
	};

	var real__xmmsc_medialib_move_entry = asm["_xmmsc_medialib_move_entry"]; asm["_xmmsc_medialib_move_entry"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_move_entry.apply(null, arguments);
	};

	var real__tre_add_tag_left = asm["_tre_add_tag_left"]; asm["_tre_add_tag_left"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_add_tag_left.apply(null, arguments);
	};

	var real____string_read = asm["___string_read"]; asm["___string_read"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____string_read.apply(null, arguments);
	};

	var real__wcstof = asm["_wcstof"]; asm["_wcstof"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstof.apply(null, arguments);
	};

	var real__wcstod = asm["_wcstod"]; asm["_wcstod"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstod.apply(null, arguments);
	};

	var real__xmmsv_coll_default_parse_tokens = asm["_xmmsv_coll_default_parse_tokens"]; asm["_xmmsv_coll_default_parse_tokens"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_default_parse_tokens.apply(null, arguments);
	};

	var real__xmmsv_list_append_float = asm["_xmmsv_list_append_float"]; asm["_xmmsv_list_append_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_append_float.apply(null, arguments);
	};

	var real__xmms_ipc_msg_alloc = asm["_xmms_ipc_msg_alloc"]; asm["_xmms_ipc_msg_alloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_alloc.apply(null, arguments);
	};

	var real__xmmsv_list_iter_get_parent = asm["_xmmsv_list_iter_get_parent"]; asm["_xmmsv_list_iter_get_parent"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_get_parent.apply(null, arguments);
	};

	var real__xmmsc_ipc_error_set = asm["_xmmsc_ipc_error_set"]; asm["_xmmsc_ipc_error_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_error_set.apply(null, arguments);
	};

	var real__wcstoull = asm["_wcstoull"]; asm["_wcstoull"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstoull.apply(null, arguments);
	};

	var real__xmmsc_send_msg = asm["_xmmsc_send_msg"]; asm["_xmmsc_send_msg"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_send_msg.apply(null, arguments);
	};

	var real__j1f = asm["_j1f"]; asm["_j1f"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__j1f.apply(null, arguments);
	};

	var real__udp_timediff = asm["_udp_timediff"]; asm["_udp_timediff"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__udp_timediff.apply(null, arguments);
	};

	var real__xmmsc_coll_get = asm["_xmmsc_coll_get"]; asm["_xmmsc_coll_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_get.apply(null, arguments);
	};

	var real__x_list_delete_link = asm["_x_list_delete_link"]; asm["_x_list_delete_link"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_delete_link.apply(null, arguments);
	};

	var real___internal_put_on_bb_value_dict = asm["__internal_put_on_bb_value_dict"]; asm["__internal_put_on_bb_value_dict"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_value_dict.apply(null, arguments);
	};

	var real__xmmsc_playlist_add_collection = asm["_xmmsc_playlist_add_collection"]; asm["_xmmsc_playlist_add_collection"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_add_collection.apply(null, arguments);
	};

	var real__coll_parse_andop_append = asm["_coll_parse_andop_append"]; asm["_coll_parse_andop_append"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_andop_append.apply(null, arguments);
	};

	var real__xmmsc_ipc_result_lookup = asm["_xmmsc_ipc_result_lookup"]; asm["_xmmsc_ipc_result_lookup"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_result_lookup.apply(null, arguments);
	};

	var real__strlwr = asm["_strlwr"]; asm["_strlwr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strlwr.apply(null, arguments);
	};

	var real__wctype_l = asm["_wctype_l"]; asm["_wctype_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wctype_l.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv424 = asm["___xmmsv_identity_xmmsv424"]; asm["___xmmsv_identity_xmmsv424"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv424.apply(null, arguments);
	};

	var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__bitshift64Lshr.apply(null, arguments);
	};

	var real__srand = asm["_srand"]; asm["_srand"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__srand.apply(null, arguments);
	};

	var real__strchr = asm["_strchr"]; asm["_strchr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strchr.apply(null, arguments);
	};

	var real__x_list_remove = asm["_x_list_remove"]; asm["_x_list_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_remove.apply(null, arguments);
	};

	var real__towlower = asm["_towlower"]; asm["_towlower"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__towlower.apply(null, arguments);
	};

	var real__tolower_l = asm["_tolower_l"]; asm["_tolower_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tolower_l.apply(null, arguments);
	};

	var real____lgamma_r = asm["___lgamma_r"]; asm["___lgamma_r"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____lgamma_r.apply(null, arguments);
	};

	var real__xmmsv_dict_has_key = asm["_xmmsv_dict_has_key"]; asm["_xmmsv_dict_has_key"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_has_key.apply(null, arguments);
	};

	var real__isspace = asm["_isspace"]; asm["_isspace"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isspace.apply(null, arguments);
	};

	var real__x_list_insert_sorted = asm["_x_list_insert_sorted"]; asm["_x_list_insert_sorted"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_insert_sorted.apply(null, arguments);
	};

	var real__xmmsc_medialib_entry_property_set_str_with_source = asm["_xmmsc_medialib_entry_property_set_str_with_source"]; asm["_xmmsc_medialib_entry_property_set_str_with_source"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_entry_property_set_str_with_source.apply(null, arguments);
	};

	var real__x_queue_pop_head = asm["_x_queue_pop_head"]; asm["_x_queue_pop_head"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_queue_pop_head.apply(null, arguments);
	};

	var real__xmmsc_visualization_shutdown = asm["_xmmsc_visualization_shutdown"]; asm["_xmmsc_visualization_shutdown"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_shutdown.apply(null, arguments);
	};

	var real__wcswidth = asm["_wcswidth"]; asm["_wcswidth"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcswidth.apply(null, arguments);
	};

	var real__x_queue_push_tail = asm["_x_queue_push_tail"]; asm["_x_queue_push_tail"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_queue_push_tail.apply(null, arguments);
	};

	var real__xmmsv_new_string = asm["_xmmsv_new_string"]; asm["_xmmsv_new_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_string.apply(null, arguments);
	};

	var real__coll_parse_reference = asm["_coll_parse_reference"]; asm["_coll_parse_reference"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_reference.apply(null, arguments);
	};

	var real__glob = asm["_glob"]; asm["_glob"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__glob.apply(null, arguments);
	};

	var real__xmms_ipc_transport_fd_get = asm["_xmms_ipc_transport_fd_get"]; asm["_xmms_ipc_transport_fd_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_transport_fd_get.apply(null, arguments);
	};

	var real__xmmsv_list_insert_float = asm["_xmmsv_list_insert_float"]; asm["_xmmsv_list_insert_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_insert_float.apply(null, arguments);
	};

	var real__fputwc = asm["_fputwc"]; asm["_fputwc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__fputwc.apply(null, arguments);
	};

	var real__xmmsc_broadcast_playback_volume_changed = asm["_xmmsc_broadcast_playback_volume_changed"]; asm["_xmmsc_broadcast_playback_volume_changed"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_playback_volume_changed.apply(null, arguments);
	};

	var real__xmmsc_config_get_value = asm["_xmmsc_config_get_value"]; asm["_xmmsc_config_get_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_config_get_value.apply(null, arguments);
	};

	var real__xmmsv_dict_foreach = asm["_xmmsv_dict_foreach"]; asm["_xmmsv_dict_foreach"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_foreach.apply(null, arguments);
	};

	var real__strtoimax = asm["_strtoimax"]; asm["_strtoimax"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtoimax.apply(null, arguments);
	};

	var real__xmmsv_decode_url = asm["_xmmsv_decode_url"]; asm["_xmmsv_decode_url"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_decode_url.apply(null, arguments);
	};

	var real__xmmsc_playback_volume_get = asm["_xmmsc_playback_volume_get"]; asm["_xmmsc_playback_volume_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_volume_get.apply(null, arguments);
	};

	var real__xmmsc_playlist_add_encoded = asm["_xmmsc_playlist_add_encoded"]; asm["_xmmsc_playlist_add_encoded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_add_encoded.apply(null, arguments);
	};

	var real__xmmsc_playlist_add_id = asm["_xmmsc_playlist_add_id"]; asm["_xmmsc_playlist_add_id"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_add_id.apply(null, arguments);
	};

	var real__wcsrchr = asm["_wcsrchr"]; asm["_wcsrchr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsrchr.apply(null, arguments);
	};

	var real__iswdigit_l = asm["_iswdigit_l"]; asm["_iswdigit_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswdigit_l.apply(null, arguments);
	};

	var real__xmmsv_dict_set_float = asm["_xmmsv_dict_set_float"]; asm["_xmmsv_dict_set_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_set_float.apply(null, arguments);
	};

	var real__xmmsc_main_stats = asm["_xmmsc_main_stats"]; asm["_xmmsc_main_stats"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_main_stats.apply(null, arguments);
	};

	var real__xmmsv_coll_attributes_get = asm["_xmmsv_coll_attributes_get"]; asm["_xmmsv_coll_attributes_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attributes_get.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv396 = asm["___xmmsv_identity_xmmsv396"]; asm["___xmmsv_identity_xmmsv396"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv396.apply(null, arguments);
	};

	var real__do_read136 = asm["_do_read136"]; asm["_do_read136"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__do_read136.apply(null, arguments);
	};

	var real__xmmsc_config_set_value = asm["_xmmsc_config_set_value"]; asm["_xmmsc_config_set_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_config_set_value.apply(null, arguments);
	};

	var real__xmmsc_coll_save = asm["_xmmsc_coll_save"]; asm["_xmmsc_coll_save"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_save.apply(null, arguments);
	};

	var real__xmmsc_emscripten_result_cb = asm["_xmmsc_emscripten_result_cb"]; asm["_xmmsc_emscripten_result_cb"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_emscripten_result_cb.apply(null, arguments);
	};

	var real__xmmsc_send_broadcast_msg = asm["_xmmsc_send_broadcast_msg"]; asm["_xmmsc_send_broadcast_msg"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_send_broadcast_msg.apply(null, arguments);
	};

	var real__xmmsv_coll_copy = asm["_xmmsv_coll_copy"]; asm["_xmmsv_coll_copy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_copy.apply(null, arguments);
	};

	var real__xmmsc_playlist_replace = asm["_xmmsc_playlist_replace"]; asm["_xmmsc_playlist_replace"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_replace.apply(null, arguments);
	};

	var real__xmms_ipc_msg_get_cmd = asm["_xmms_ipc_msg_get_cmd"]; asm["_xmms_ipc_msg_get_cmd"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_get_cmd.apply(null, arguments);
	};

	var real__coll_parse_unaryop = asm["_coll_parse_unaryop"]; asm["_coll_parse_unaryop"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_unaryop.apply(null, arguments);
	};

	var real__strfmon_l = asm["_strfmon_l"]; asm["_strfmon_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strfmon_l.apply(null, arguments);
	};

	var real__xmmsv_list_iter_entry_string = asm["_xmmsv_list_iter_entry_string"]; asm["_xmmsv_list_iter_entry_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_entry_string.apply(null, arguments);
	};

	var real____xmmsv_null_to_none351 = asm["___xmmsv_null_to_none351"]; asm["___xmmsv_null_to_none351"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_null_to_none351.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_goto = asm["_xmmsv_bitbuffer_goto"]; asm["_xmmsv_bitbuffer_goto"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_goto.apply(null, arguments);
	};

	var real__wctype = asm["_wctype"]; asm["_wctype"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wctype.apply(null, arguments);
	};

	var real__xmmsc_ipc_fd_get = asm["_xmmsc_ipc_fd_get"]; asm["_xmmsc_ipc_fd_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_fd_get.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_set_float = asm["_xmmsv_dict_iter_set_float"]; asm["_xmmsv_dict_iter_set_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_set_float.apply(null, arguments);
	};

	var real____xmmsv_null_to_none357 = asm["___xmmsv_null_to_none357"]; asm["___xmmsv_null_to_none357"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_null_to_none357.apply(null, arguments);
	};

	var real__xmmsc_visualization_chunk_get = asm["_xmmsc_visualization_chunk_get"]; asm["_xmmsc_visualization_chunk_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_chunk_get.apply(null, arguments);
	};

	var real__xmmsc_medialib_encode_url = asm["_xmmsc_medialib_encode_url"]; asm["_xmmsc_medialib_encode_url"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_encode_url.apply(null, arguments);
	};

	var real__xmmsv_utf8_validate = asm["_xmmsv_utf8_validate"]; asm["_xmmsv_utf8_validate"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_utf8_validate.apply(null, arguments);
	};

	var real__logbf = asm["_logbf"]; asm["_logbf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__logbf.apply(null, arguments);
	};

	var real__xmmsc_ipc_disconnect_set = asm["_xmmsc_ipc_disconnect_set"]; asm["_xmmsc_ipc_disconnect_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_disconnect_set.apply(null, arguments);
	};

	var real__seed48 = asm["_seed48"]; asm["_seed48"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__seed48.apply(null, arguments);
	};

	var real__logbl = asm["_logbl"]; asm["_logbl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__logbl.apply(null, arguments);
	};

	var real__xmmsc_playback_volume_set = asm["_xmmsc_playback_volume_set"]; asm["_xmmsc_playback_volume_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_volume_set.apply(null, arguments);
	};

	var real__wcscasecmp_l = asm["_wcscasecmp_l"]; asm["_wcscasecmp_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcscasecmp_l.apply(null, arguments);
	};

	var real___xmmsv_list_move = asm["__xmmsv_list_move"]; asm["__xmmsv_list_move"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_move.apply(null, arguments);
	};

	var real___xmmsv_dict_iter_new = asm["__xmmsv_dict_iter_new"]; asm["__xmmsv_dict_iter_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_dict_iter_new.apply(null, arguments);
	};

	var real__xmms_ipc_msg_set_cmd = asm["_xmms_ipc_msg_set_cmd"]; asm["_xmms_ipc_msg_set_cmd"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_set_cmd.apply(null, arguments);
	};

	var real__cleanup_udp = asm["_cleanup_udp"]; asm["_cleanup_udp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__cleanup_udp.apply(null, arguments);
	};

	var real__xmmsv_dict_get_size = asm["_xmmsv_dict_get_size"]; asm["_xmmsv_dict_get_size"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_get_size.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv453 = asm["___xmmsv_identity_xmmsv453"]; asm["___xmmsv_identity_xmmsv453"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv453.apply(null, arguments);
	};

	var real__xmmsv_new_dict = asm["_xmmsv_new_dict"]; asm["_xmmsv_new_dict"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_dict.apply(null, arguments);
	};

	var real__mallopt = asm["_mallopt"]; asm["_mallopt"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mallopt.apply(null, arguments);
	};

	var real__isxdigit = asm["_isxdigit"]; asm["_isxdigit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isxdigit.apply(null, arguments);
	};

	var real__iswcntrl_l = asm["_iswcntrl_l"]; asm["_iswcntrl_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswcntrl_l.apply(null, arguments);
	};

	var real__wcstol = asm["_wcstol"]; asm["_wcstol"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstol.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_get_data = asm["_xmmsv_bitbuffer_get_data"]; asm["_xmmsv_bitbuffer_get_data"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_get_data.apply(null, arguments);
	};

	var real__xmmsc_playlist_add_full = asm["_xmmsc_playlist_add_full"]; asm["_xmmsc_playlist_add_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_add_full.apply(null, arguments);
	};

	var real__xmms_ipc_server_init = asm["_xmms_ipc_server_init"]; asm["_xmms_ipc_server_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_server_init.apply(null, arguments);
	};

	var real__iconv_open = asm["_iconv_open"]; asm["_iconv_open"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iconv_open.apply(null, arguments);
	};

	var real__initstate = asm["_initstate"]; asm["_initstate"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__initstate.apply(null, arguments);
	};

	var real___xmmsv_coll_operand_find = asm["__xmmsv_coll_operand_find"]; asm["__xmmsv_coll_operand_find"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_coll_operand_find.apply(null, arguments);
	};

	var real__xmms_ipc_hostname = asm["_xmms_ipc_hostname"]; asm["_xmms_ipc_hostname"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_hostname.apply(null, arguments);
	};

	var real__x_queue_new = asm["_x_queue_new"]; asm["_x_queue_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_queue_new.apply(null, arguments);
	};

	var real__fnmatch_internal = asm["_fnmatch_internal"]; asm["_fnmatch_internal"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__fnmatch_internal.apply(null, arguments);
	};

	var real__memmem = asm["_memmem"]; asm["_memmem"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__memmem.apply(null, arguments);
	};

	var real__xmms_ipc_tcp_write = asm["_xmms_ipc_tcp_write"]; asm["_xmms_ipc_tcp_write"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_tcp_write.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_deserialize_value = asm["_xmmsv_bitbuffer_deserialize_value"]; asm["_xmmsv_bitbuffer_deserialize_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_deserialize_value.apply(null, arguments);
	};

	var real__find_charmap = asm["_find_charmap"]; asm["_find_charmap"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__find_charmap.apply(null, arguments);
	};

	var real__wctrans = asm["_wctrans"]; asm["_wctrans"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wctrans.apply(null, arguments);
	};

	var real__xmmsv_coll_set_idlist = asm["_xmmsv_coll_set_idlist"]; asm["_xmmsv_coll_set_idlist"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_set_idlist.apply(null, arguments);
	};

	var real__strtod = asm["_strtod"]; asm["_strtod"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtod.apply(null, arguments);
	};

	var real__xmmsv_make_stringlist = asm["_xmmsv_make_stringlist"]; asm["_xmmsv_make_stringlist"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_make_stringlist.apply(null, arguments);
	};

	var real__xmmsc_visualization_started = asm["_xmmsc_visualization_started"]; asm["_xmmsc_visualization_started"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_started.apply(null, arguments);
	};

	var real__towupper_l = asm["_towupper_l"]; asm["_towupper_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__towupper_l.apply(null, arguments);
	};

	var real__xmms_strlist_destroy = asm["_xmms_strlist_destroy"]; asm["_xmms_strlist_destroy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_strlist_destroy.apply(null, arguments);
	};

	var real__vfwprintf = asm["_vfwprintf"]; asm["_vfwprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vfwprintf.apply(null, arguments);
	};

	var real__valloc = asm["_valloc"]; asm["_valloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__valloc.apply(null, arguments);
	};

	var real__xmmsv_list_iter_last = asm["_xmmsv_list_iter_last"]; asm["_xmmsv_list_iter_last"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_last.apply(null, arguments);
	};

	var real____xmmsv_null_to_none438 = asm["___xmmsv_null_to_none438"]; asm["___xmmsv_null_to_none438"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_null_to_none438.apply(null, arguments);
	};

	var real__xmmsv_new_bitbuffer = asm["_xmmsv_new_bitbuffer"]; asm["_xmmsv_new_bitbuffer"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_bitbuffer.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_len = asm["_xmmsv_bitbuffer_len"]; asm["_xmmsv_bitbuffer_len"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_len.apply(null, arguments);
	};

	var real____tre_mem_alloc_impl = asm["___tre_mem_alloc_impl"]; asm["___tre_mem_alloc_impl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____tre_mem_alloc_impl.apply(null, arguments);
	};

	var real__wcstoimax = asm["_wcstoimax"]; asm["_wcstoimax"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstoimax.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_get = asm["_xmmsv_coll_attribute_get"]; asm["_xmmsv_coll_attribute_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_get.apply(null, arguments);
	};

	var real__gcvt = asm["_gcvt"]; asm["_gcvt"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__gcvt.apply(null, arguments);
	};

	var real__memcmp = asm["_memcmp"]; asm["_memcmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__memcmp.apply(null, arguments);
	};

	var real__xmmsc_playlist_list_entries = asm["_xmmsc_playlist_list_entries"]; asm["_xmmsc_playlist_list_entries"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_list_entries.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_get_value = asm["_xmmsv_coll_attribute_get_value"]; asm["_xmmsv_coll_attribute_get_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_get_value.apply(null, arguments);
	};

	var real__xmms_socket_errno = asm["_xmms_socket_errno"]; asm["_xmms_socket_errno"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_socket_errno.apply(null, arguments);
	};

	var real__strncat = asm["_strncat"]; asm["_strncat"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strncat.apply(null, arguments);
	};

	var real__package_read_do = asm["_package_read_do"]; asm["_package_read_do"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__package_read_do.apply(null, arguments);
	};

	var real___xmmsv_list_iter_new = asm["__xmmsv_list_iter_new"]; asm["__xmmsv_list_iter_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_iter_new.apply(null, arguments);
	};

	var real__xmmsc_medialib_get_id = asm["_xmmsc_medialib_get_id"]; asm["_xmmsc_medialib_get_id"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_get_id.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv378 = asm["___xmmsv_identity_xmmsv378"]; asm["___xmmsv_identity_xmmsv378"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv378.apply(null, arguments);
	};

	var real__xmmsv_get_error = asm["_xmmsv_get_error"]; asm["_xmmsv_get_error"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_error.apply(null, arguments);
	};

	var real__setstate = asm["_setstate"]; asm["_setstate"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__setstate.apply(null, arguments);
	};

	var real__x_list_remove_all = asm["_x_list_remove_all"]; asm["_x_list_remove_all"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_remove_all.apply(null, arguments);
	};

	var real__fwprintf = asm["_fwprintf"]; asm["_fwprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__fwprintf.apply(null, arguments);
	};

	var real__xmmsc_medialib_path_import = asm["_xmmsc_medialib_path_import"]; asm["_xmmsc_medialib_path_import"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_path_import.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv372 = asm["___xmmsv_identity_xmmsv372"]; asm["___xmmsv_identity_xmmsv372"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv372.apply(null, arguments);
	};

	var real__xmmsc_result_callback_new_c2c = asm["_xmmsc_result_callback_new_c2c"]; asm["_xmmsc_result_callback_new_c2c"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_callback_new_c2c.apply(null, arguments);
	};

	var real__scanexp = asm["_scanexp"]; asm["_scanexp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__scanexp.apply(null, arguments);
	};

	var real__xmmsc_broadcast_medialib_entry_changed = asm["_xmmsc_broadcast_medialib_entry_changed"]; asm["_xmmsc_broadcast_medialib_entry_changed"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_medialib_entry_changed.apply(null, arguments);
	};

	var real___xmmsv_new = asm["__xmmsv_new"]; asm["__xmmsv_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_new.apply(null, arguments);
	};

	var real__xmmsv_ref = asm["_xmmsv_ref"]; asm["_xmmsv_ref"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_ref.apply(null, arguments);
	};

	var real__xmms_socket_close = asm["_xmms_socket_close"]; asm["_xmms_socket_close"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_socket_close.apply(null, arguments);
	};

	var real__wcsnrtombs = asm["_wcsnrtombs"]; asm["_wcsnrtombs"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsnrtombs.apply(null, arguments);
	};

	var real___internal_get_from_bb_string_alloc = asm["__internal_get_from_bb_string_alloc"]; asm["__internal_get_from_bb_string_alloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_string_alloc.apply(null, arguments);
	};

	var real__xmms_ipc_msg_put_value = asm["_xmms_ipc_msg_put_value"]; asm["_xmms_ipc_msg_put_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_put_value.apply(null, arguments);
	};

	var real____memrchr = asm["___memrchr"]; asm["___memrchr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____memrchr.apply(null, arguments);
	};

	var real___xmmsv_dict_hash = asm["__xmmsv_dict_hash"]; asm["__xmmsv_dict_hash"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_dict_hash.apply(null, arguments);
	};

	var real__isspace_l = asm["_isspace_l"]; asm["_isspace_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isspace_l.apply(null, arguments);
	};

	var real__xmmsc_playlist_radd_encoded = asm["_xmmsc_playlist_radd_encoded"]; asm["_xmmsc_playlist_radd_encoded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_radd_encoded.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_set_index = asm["_xmmsv_coll_idlist_set_index"]; asm["_xmmsv_coll_idlist_set_index"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_set_index.apply(null, arguments);
	};

	var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__i64Add.apply(null, arguments);
	};

	var real__xmms_socket_error_recoverable = asm["_xmms_socket_error_recoverable"]; asm["_xmms_socket_error_recoverable"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_socket_error_recoverable.apply(null, arguments);
	};

	var real__MUSL_vfscanf = asm["_MUSL_vfscanf"]; asm["_MUSL_vfscanf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__MUSL_vfscanf.apply(null, arguments);
	};

	var real__towctrans = asm["_towctrans"]; asm["_towctrans"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__towctrans.apply(null, arguments);
	};

	var real__strsignal = asm["_strsignal"]; asm["_strsignal"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strsignal.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_get_bits = asm["_xmmsv_bitbuffer_get_bits"]; asm["_xmmsv_bitbuffer_get_bits"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_get_bits.apply(null, arguments);
	};

	var real__wcsxfrm = asm["_wcsxfrm"]; asm["_wcsxfrm"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsxfrm.apply(null, arguments);
	};

	var real__ldexpl = asm["_ldexpl"]; asm["_ldexpl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ldexpl.apply(null, arguments);
	};

	var real__tgammal = asm["_tgammal"]; asm["_tgammal"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tgammal.apply(null, arguments);
	};

	var real__tre_ast_to_tnfa = asm["_tre_ast_to_tnfa"]; asm["_tre_ast_to_tnfa"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_ast_to_tnfa.apply(null, arguments);
	};

	var real__xmmsv_dict_entry_get_coll = asm["_xmmsv_dict_entry_get_coll"]; asm["_xmmsv_dict_entry_get_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_entry_get_coll.apply(null, arguments);
	};

	var real__x_list_find_custom = asm["_x_list_find_custom"]; asm["_x_list_find_custom"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_find_custom.apply(null, arguments);
	};

	var real__towlower_l = asm["_towlower_l"]; asm["_towlower_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__towlower_l.apply(null, arguments);
	};

	var real__tgammaf = asm["_tgammaf"]; asm["_tgammaf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tgammaf.apply(null, arguments);
	};

	var real__xmmsc_coll_query_infos = asm["_xmmsc_coll_query_infos"]; asm["_xmmsc_coll_query_infos"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_query_infos.apply(null, arguments);
	};

	var real__common56 = asm["_common56"]; asm["_common56"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__common56.apply(null, arguments);
	};

	var real__common57 = asm["_common57"]; asm["_common57"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__common57.apply(null, arguments);
	};

	var real__warn = asm["_warn"]; asm["_warn"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__warn.apply(null, arguments);
	};

	var real__xmms_ipc_server_accept = asm["_xmms_ipc_server_accept"]; asm["_xmms_ipc_server_accept"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_server_accept.apply(null, arguments);
	};

	var real__xmms_userconfdir_get = asm["_xmms_userconfdir_get"]; asm["_xmms_userconfdir_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_userconfdir_get.apply(null, arguments);
	};

	var real__xmmsc_io_in_handle = asm["_xmmsc_io_in_handle"]; asm["_xmmsc_io_in_handle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_io_in_handle.apply(null, arguments);
	};

	var real__xmmsv_coll_new = asm["_xmmsv_coll_new"]; asm["_xmmsv_coll_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_new.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_remove = asm["_xmmsc_result_notifier_remove"]; asm["_xmmsc_result_notifier_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_remove.apply(null, arguments);
	};

	var real__match_in_dir = asm["_match_in_dir"]; asm["_match_in_dir"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__match_in_dir.apply(null, arguments);
	};

	var real__setup_socket = asm["_setup_socket"]; asm["_setup_socket"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__setup_socket.apply(null, arguments);
	};

	var real__xmmsc_init = asm["_xmmsc_init"]; asm["_xmmsc_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_init.apply(null, arguments);
	};

	var real___xmmsv_list_resize = asm["__xmmsv_list_resize"]; asm["__xmmsv_list_resize"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_resize.apply(null, arguments);
	};

	var real__xmmsc_log_va = asm["_xmmsc_log_va"]; asm["_xmmsc_log_va"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_log_va.apply(null, arguments);
	};

	var real__xmmsv_coll_remove_operand = asm["_xmmsv_coll_remove_operand"]; asm["_xmmsv_coll_remove_operand"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_remove_operand.apply(null, arguments);
	};

	var real__xmmsc_bindata_add = asm["_xmmsc_bindata_add"]; asm["_xmmsc_bindata_add"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_bindata_add.apply(null, arguments);
	};

	var real___xmmsv_list_remove = asm["__xmmsv_list_remove"]; asm["__xmmsv_list_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_remove.apply(null, arguments);
	};

	var real__xmmsv_dict_entry_get_type = asm["_xmmsv_dict_entry_get_type"]; asm["_xmmsv_dict_entry_get_type"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_entry_get_type.apply(null, arguments);
	};

	var real__j0 = asm["_j0"]; asm["_j0"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__j0.apply(null, arguments);
	};

	var real__xmmsc_result_clear_weakrefs = asm["_xmmsc_result_clear_weakrefs"]; asm["_xmmsc_result_clear_weakrefs"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_clear_weakrefs.apply(null, arguments);
	};

	var real____sindf = asm["___sindf"]; asm["___sindf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____sindf.apply(null, arguments);
	};

	var real__xmmsc_coll_remove = asm["_xmmsc_coll_remove"]; asm["_xmmsc_coll_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_remove.apply(null, arguments);
	};

	var real__ts2net = asm["_ts2net"]; asm["_ts2net"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ts2net.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_get_int64 = asm["_xmmsv_coll_attribute_get_int64"]; asm["_xmmsv_coll_attribute_get_int64"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_get_int64.apply(null, arguments);
	};

	var real__xmmsc_visualization_start_handle = asm["_xmmsc_visualization_start_handle"]; asm["_xmmsc_visualization_start_handle"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_start_handle.apply(null, arguments);
	};

	var real__pvalloc = asm["_pvalloc"]; asm["_pvalloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__pvalloc.apply(null, arguments);
	};

	var real__xmmsc_result_restartable = asm["_xmmsc_result_restartable"]; asm["_xmmsc_result_restartable"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_restartable.apply(null, arguments);
	};

	var real__xmms_vargs_to_strlist = asm["_xmms_vargs_to_strlist"]; asm["_xmms_vargs_to_strlist"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_vargs_to_strlist.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_delete_all = asm["_xmmsc_result_notifier_delete_all"]; asm["_xmmsc_result_notifier_delete_all"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_delete_all.apply(null, arguments);
	};

	var real__xmmsc_coll_query_ids = asm["_xmmsc_coll_query_ids"]; asm["_xmmsc_coll_query_ids"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_coll_query_ids.apply(null, arguments);
	};

	var real__xmmsv_is_error = asm["_xmmsv_is_error"]; asm["_xmmsv_is_error"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_is_error.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_set = asm["_xmmsv_coll_attribute_set"]; asm["_xmmsv_coll_attribute_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_set.apply(null, arguments);
	};

	var real__strtof_l = asm["_strtof_l"]; asm["_strtof_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtof_l.apply(null, arguments);
	};

	var real__xmmsv_build_dict_va = asm["_xmmsv_build_dict_va"]; asm["_xmmsv_build_dict_va"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_build_dict_va.apply(null, arguments);
	};

	var real__xmmsv_list_iter_explicit_destroy = asm["_xmmsv_list_iter_explicit_destroy"]; asm["_xmmsv_list_iter_explicit_destroy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_explicit_destroy.apply(null, arguments);
	};

	var real__wctrans_l = asm["_wctrans_l"]; asm["_wctrans_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wctrans_l.apply(null, arguments);
	};

	var real__mbsinit = asm["_mbsinit"]; asm["_mbsinit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mbsinit.apply(null, arguments);
	};

	var real__parse_url = asm["_parse_url"]; asm["_parse_url"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__parse_url.apply(null, arguments);
	};

	var real__xmmsc_ipc_io_out_callback = asm["_xmmsc_ipc_io_out_callback"]; asm["_xmmsc_ipc_io_out_callback"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_io_out_callback.apply(null, arguments);
	};

	var real__xmmsc_playback_stop = asm["_xmmsc_playback_stop"]; asm["_xmmsc_playback_stop"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_stop.apply(null, arguments);
	};

	var real__string_substr = asm["_string_substr"]; asm["_string_substr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__string_substr.apply(null, arguments);
	};

	var real__xmmsv_encode_url_full = asm["_xmmsv_encode_url_full"]; asm["_xmmsv_encode_url_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_encode_url_full.apply(null, arguments);
	};

	var real__iswspace = asm["_iswspace"]; asm["_iswspace"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswspace.apply(null, arguments);
	};

	var real__duplicate_dict_value = asm["_duplicate_dict_value"]; asm["_duplicate_dict_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__duplicate_dict_value.apply(null, arguments);
	};

	var real__iswalpha = asm["_iswalpha"]; asm["_iswalpha"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswalpha.apply(null, arguments);
	};

	var real__iswblank_l = asm["_iswblank_l"]; asm["_iswblank_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswblank_l.apply(null, arguments);
	};

	var real__x_list_free = asm["_x_list_free"]; asm["_x_list_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_free.apply(null, arguments);
	};

	var real__xmms_ipc_msg_get_value = asm["_xmms_ipc_msg_get_value"]; asm["_xmms_ipc_msg_get_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_get_value.apply(null, arguments);
	};

	var real__xmmsv_coll_add_operand = asm["_xmmsv_coll_add_operand"]; asm["_xmmsv_coll_add_operand"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_add_operand.apply(null, arguments);
	};

	var real__xmmsc_mainloop_emscripten_init = asm["_xmmsc_mainloop_emscripten_init"]; asm["_xmmsc_mainloop_emscripten_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_mainloop_emscripten_init.apply(null, arguments);
	};

	var real__sn_write = asm["_sn_write"]; asm["_sn_write"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__sn_write.apply(null, arguments);
	};

	var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__bitshift64Ashr.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_put_bits = asm["_xmmsv_bitbuffer_put_bits"]; asm["_xmmsv_bitbuffer_put_bits"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_put_bits.apply(null, arguments);
	};

	var real__malloc_set_footprint_limit = asm["_malloc_set_footprint_limit"]; asm["_malloc_set_footprint_limit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__malloc_set_footprint_limit.apply(null, arguments);
	};

	var real__xmmsv_dict_format = asm["_xmmsv_dict_format"]; asm["_xmmsv_dict_format"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_format.apply(null, arguments);
	};

	var real__xmmsv_new_list = asm["_xmmsv_new_list"]; asm["_xmmsv_new_list"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_list.apply(null, arguments);
	};

	var real__xmmsc_result_visc_get = asm["_xmmsc_result_visc_get"]; asm["_xmmsc_result_visc_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_visc_get.apply(null, arguments);
	};

	var real___internal_put_on_bb_float = asm["__internal_put_on_bb_float"]; asm["__internal_put_on_bb_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_float.apply(null, arguments);
	};

	var real__xmms_ipc_usocket_client_init = asm["_xmms_ipc_usocket_client_init"]; asm["_xmms_ipc_usocket_client_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_usocket_client_init.apply(null, arguments);
	};

	var real__j0f = asm["_j0f"]; asm["_j0f"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__j0f.apply(null, arguments);
	};

	var real__xmms_strlist_prepend_copy = asm["_xmms_strlist_prepend_copy"]; asm["_xmms_strlist_prepend_copy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_strlist_prepend_copy.apply(null, arguments);
	};

	var real__islower_l = asm["_islower_l"]; asm["_islower_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__islower_l.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_set_int = asm["_xmmsv_dict_iter_set_int"]; asm["_xmmsv_dict_iter_set_int"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_set_int.apply(null, arguments);
	};

	var real__wcstold = asm["_wcstold"]; asm["_wcstold"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstold.apply(null, arguments);
	};

	var real__x_list_length = asm["_x_list_length"]; asm["_x_list_length"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_length.apply(null, arguments);
	};

	var real___xmmsv_list_iter_free = asm["__xmmsv_list_iter_free"]; asm["__xmmsv_list_iter_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_iter_free.apply(null, arguments);
	};

	var real__wcstoll = asm["_wcstoll"]; asm["_wcstoll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcstoll.apply(null, arguments);
	};

	var real__xmms_socket_invalidate = asm["_xmms_socket_invalidate"]; asm["_xmms_socket_invalidate"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_socket_invalidate.apply(null, arguments);
	};

	var real___xmmsc_medialib_encode_url_old = asm["__xmmsc_medialib_encode_url_old"]; asm["__xmmsc_medialib_encode_url_old"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsc_medialib_encode_url_old.apply(null, arguments);
	};

	var real__xmmsv_get_list_iter = asm["_xmmsv_get_list_iter"]; asm["_xmmsv_get_list_iter"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_list_iter.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_pair_string = asm["_xmmsv_dict_iter_pair_string"]; asm["_xmmsv_dict_iter_pair_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_pair_string.apply(null, arguments);
	};

	var real__xmmsv_coll_attribute_set_int = asm["_xmmsv_coll_attribute_set_int"]; asm["_xmmsv_coll_attribute_set_int"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attribute_set_int.apply(null, arguments);
	};

	var real__srand48 = asm["_srand48"]; asm["_srand48"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__srand48.apply(null, arguments);
	};

	var real__iswalpha_l = asm["_iswalpha_l"]; asm["_iswalpha_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswalpha_l.apply(null, arguments);
	};

	var real__xmms_fallback_ipcpath_get = asm["_xmms_fallback_ipcpath_get"]; asm["_xmms_fallback_ipcpath_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_fallback_ipcpath_get.apply(null, arguments);
	};

	var real___internal_put_on_bb_string = asm["__internal_put_on_bb_string"]; asm["__internal_put_on_bb_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_put_on_bb_string.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_delete = asm["_xmmsc_result_notifier_delete"]; asm["_xmmsc_result_notifier_delete"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_delete.apply(null, arguments);
	};

	var real___internal_get_from_bb_value_of_type_alloc = asm["__internal_get_from_bb_value_of_type_alloc"]; asm["__internal_get_from_bb_value_of_type_alloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_value_of_type_alloc.apply(null, arguments);
	};

	var real__xmmsv_list_move = asm["_xmmsv_list_move"]; asm["_xmmsv_list_move"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_move.apply(null, arguments);
	};

	var real__xmmsc_broadcast_playlist_current_pos = asm["_xmmsc_broadcast_playlist_current_pos"]; asm["_xmmsc_broadcast_playlist_current_pos"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_playlist_current_pos.apply(null, arguments);
	};

	var real__xmmsc_result_get_value = asm["_xmmsc_result_get_value"]; asm["_xmmsc_result_get_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_get_value.apply(null, arguments);
	};

	var real__frexpl = asm["_frexpl"]; asm["_frexpl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__frexpl.apply(null, arguments);
	};

	var real__xmmsv_get_bitbuffer = asm["_xmmsv_get_bitbuffer"]; asm["_xmmsv_get_bitbuffer"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_get_bitbuffer.apply(null, arguments);
	};

	var real__xmmsv_list_iter_prev = asm["_xmmsv_list_iter_prev"]; asm["_xmmsv_list_iter_prev"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_prev.apply(null, arguments);
	};

	var real__xmmsc_io_want_out = asm["_xmmsc_io_want_out"]; asm["_xmmsc_io_want_out"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_io_want_out.apply(null, arguments);
	};

	var real__xmms_ipc_tcp_client_init = asm["_xmms_ipc_tcp_client_init"]; asm["_xmms_ipc_tcp_client_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_tcp_client_init.apply(null, arguments);
	};

	var real__wcsrtombs = asm["_wcsrtombs"]; asm["_wcsrtombs"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsrtombs.apply(null, arguments);
	};

	var real__wprintf = asm["_wprintf"]; asm["_wprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wprintf.apply(null, arguments);
	};

	var real__wcscspn = asm["_wcscspn"]; asm["_wcscspn"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcscspn.apply(null, arguments);
	};

	var real__xmms_ipc_msg_destroy = asm["_xmms_ipc_msg_destroy"]; asm["_xmms_ipc_msg_destroy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_msg_destroy.apply(null, arguments);
	};

	var real__iswupper_l = asm["_iswupper_l"]; asm["_iswupper_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswupper_l.apply(null, arguments);
	};

	var real__isxdigit_l = asm["_isxdigit_l"]; asm["_isxdigit_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isxdigit_l.apply(null, arguments);
	};

	var real__x_list_free_1 = asm["_x_list_free_1"]; asm["_x_list_free_1"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_free_1.apply(null, arguments);
	};

	var real__strrchrsplit = asm["_strrchrsplit"]; asm["_strrchrsplit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strrchrsplit.apply(null, arguments);
	};

	var real__coll_next_token = asm["_coll_next_token"]; asm["_coll_next_token"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_next_token.apply(null, arguments);
	};

	var real__strtol = asm["_strtol"]; asm["_strtol"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtol.apply(null, arguments);
	};

	var real__xdg_dir_get = asm["_xdg_dir_get"]; asm["_xdg_dir_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xdg_dir_get.apply(null, arguments);
	};

	var real__xmms_usercachedir_get = asm["_xmms_usercachedir_get"]; asm["_xmms_usercachedir_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_usercachedir_get.apply(null, arguments);
	};

	var real__strtok = asm["_strtok"]; asm["_strtok"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtok.apply(null, arguments);
	};

	var real__xmmsv_list_get_int64 = asm["_xmmsv_list_get_int64"]; asm["_xmmsv_list_get_int64"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_get_int64.apply(null, arguments);
	};

	var real__xmmsv_list_insert_int = asm["_xmmsv_list_insert_int"]; asm["_xmmsv_list_insert_int"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_insert_int.apply(null, arguments);
	};

	var real__strcasecmp = asm["_strcasecmp"]; asm["_strcasecmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strcasecmp.apply(null, arguments);
	};

	var real__xmmsv_coll_universe = asm["_xmmsv_coll_universe"]; asm["_xmmsv_coll_universe"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_universe.apply(null, arguments);
	};

	var real__iconv = asm["_iconv"]; asm["_iconv"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iconv.apply(null, arguments);
	};

	var real__isalpha = asm["_isalpha"]; asm["_isalpha"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isalpha.apply(null, arguments);
	};

	var real__iswctype = asm["_iswctype"]; asm["_iswctype"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswctype.apply(null, arguments);
	};

	var real__xmmsc_result_cookie_get = asm["_xmmsc_result_cookie_get"]; asm["_xmmsc_result_cookie_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_cookie_get.apply(null, arguments);
	};

	var real__xmmsv_list_append = asm["_xmmsv_list_append"]; asm["_xmmsv_list_append"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_append.apply(null, arguments);
	};

	var real__xmmsc_playback_current_id = asm["_xmmsc_playback_current_id"]; asm["_xmmsc_playback_current_id"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_current_id.apply(null, arguments);
	};

	var real__xmmsc_ipc_error_get = asm["_xmmsc_ipc_error_get"]; asm["_xmmsc_ipc_error_get"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_error_get.apply(null, arguments);
	};

	var real__qsort = asm["_qsort"]; asm["_qsort"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__qsort.apply(null, arguments);
	};

	var real__atoi = asm["_atoi"]; asm["_atoi"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__atoi.apply(null, arguments);
	};

	var real__xmmsv_build_cluster_list = asm["_xmmsv_build_cluster_list"]; asm["_xmmsv_build_cluster_list"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_build_cluster_list.apply(null, arguments);
	};

	var real__wmemchr = asm["_wmemchr"]; asm["_wmemchr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wmemchr.apply(null, arguments);
	};

	var real__xmmsv_coll_idlist_remove = asm["_xmmsv_coll_idlist_remove"]; asm["_xmmsv_coll_idlist_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_idlist_remove.apply(null, arguments);
	};

	var real__xmmsc_playlist_insert_full = asm["_xmmsc_playlist_insert_full"]; asm["_xmmsc_playlist_insert_full"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_insert_full.apply(null, arguments);
	};

	var real__xmmsc_playlist_set_next_rel = asm["_xmmsc_playlist_set_next_rel"]; asm["_xmmsc_playlist_set_next_rel"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_set_next_rel.apply(null, arguments);
	};

	var real__wcsncpy = asm["_wcsncpy"]; asm["_wcsncpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsncpy.apply(null, arguments);
	};

	var real__xmmsv_list_iter_insert_int = asm["_xmmsv_list_iter_insert_int"]; asm["_xmmsv_list_iter_insert_int"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_insert_int.apply(null, arguments);
	};

	var real__try_realloc_chunk = asm["_try_realloc_chunk"]; asm["_try_realloc_chunk"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__try_realloc_chunk.apply(null, arguments);
	};

	var real__xmms_ipc_usocket_write = asm["_xmms_ipc_usocket_write"]; asm["_xmms_ipc_usocket_write"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_usocket_write.apply(null, arguments);
	};

	var real__isprint_l = asm["_isprint_l"]; asm["_isprint_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isprint_l.apply(null, arguments);
	};

	var real__xmmsc_visualization_init = asm["_xmmsc_visualization_init"]; asm["_xmmsc_visualization_init"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_init.apply(null, arguments);
	};

	var real____getopt_long = asm["___getopt_long"]; asm["___getopt_long"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____getopt_long.apply(null, arguments);
	};

	var real__llvm_ctlz_i32 = asm["_llvm_ctlz_i32"]; asm["_llvm_ctlz_i32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__llvm_ctlz_i32.apply(null, arguments);
	};

	var real__coll_parse_binaryfilter = asm["_coll_parse_binaryfilter"]; asm["_coll_parse_binaryfilter"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_binaryfilter.apply(null, arguments);
	};

	var real__xmmsv_dict_entry_get_int32 = asm["_xmmsv_dict_entry_get_int32"]; asm["_xmmsv_dict_entry_get_int32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_entry_get_int32.apply(null, arguments);
	};

	var real__x_list_nth_data = asm["_x_list_nth_data"]; asm["_x_list_nth_data"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_nth_data.apply(null, arguments);
	};

	var real____cos = asm["___cos"]; asm["___cos"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____cos.apply(null, arguments);
	};

	var real___internal_get_from_bb_value_list_alloc = asm["__internal_get_from_bb_value_list_alloc"]; asm["__internal_get_from_bb_value_list_alloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_value_list_alloc.apply(null, arguments);
	};

	var real__x_list_append = asm["_x_list_append"]; asm["_x_list_append"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_append.apply(null, arguments);
	};

	var real__lgammaf = asm["_lgammaf"]; asm["_lgammaf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__lgammaf.apply(null, arguments);
	};

	var real__iswlower = asm["_iswlower"]; asm["_iswlower"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswlower.apply(null, arguments);
	};

	var real___x_list_remove_link = asm["__x_list_remove_link"]; asm["__x_list_remove_link"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___x_list_remove_link.apply(null, arguments);
	};

	var real__xmmsv_coll_attributes_set = asm["_xmmsv_coll_attributes_set"]; asm["_xmmsv_coll_attributes_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_attributes_set.apply(null, arguments);
	};

	var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strcpy.apply(null, arguments);
	};

	var real__wcsncasecmp = asm["_wcsncasecmp"]; asm["_wcsncasecmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsncasecmp.apply(null, arguments);
	};

	var real__strtoull_l = asm["_strtoull_l"]; asm["_strtoull_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtoull_l.apply(null, arguments);
	};

	var real__yn = asm["_yn"]; asm["_yn"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__yn.apply(null, arguments);
	};

	var real__xmmsv_coll_normalize_order_arguments = asm["_xmmsv_coll_normalize_order_arguments"]; asm["_xmmsv_coll_normalize_order_arguments"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_normalize_order_arguments.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_new_ro = asm["_xmmsv_bitbuffer_new_ro"]; asm["_xmmsv_bitbuffer_new_ro"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_new_ro.apply(null, arguments);
	};

	var real__getopt_long_only = asm["_getopt_long_only"]; asm["_getopt_long_only"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__getopt_long_only.apply(null, arguments);
	};

	var real__xmmsc_medialib_add_entry_args = asm["_xmmsc_medialib_add_entry_args"]; asm["_xmmsc_medialib_add_entry_args"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_add_entry_args.apply(null, arguments);
	};

	var real__strtol_l = asm["_strtol_l"]; asm["_strtol_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtol_l.apply(null, arguments);
	};

	var real__lrand48 = asm["_lrand48"]; asm["_lrand48"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__lrand48.apply(null, arguments);
	};

	var real__toupper = asm["_toupper"]; asm["_toupper"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__toupper.apply(null, arguments);
	};

	var real__jnf = asm["_jnf"]; asm["_jnf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__jnf.apply(null, arguments);
	};

	var real__tv2ts = asm["_tv2ts"]; asm["_tv2ts"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tv2ts.apply(null, arguments);
	};

	var real__atof = asm["_atof"]; asm["_atof"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__atof.apply(null, arguments);
	};

	var real__xmmsv_list_has_type = asm["_xmmsv_list_has_type"]; asm["_xmmsv_list_has_type"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_has_type.apply(null, arguments);
	};

	var real___internal_get_from_bb_int32 = asm["__internal_get_from_bb_int32"]; asm["__internal_get_from_bb_int32"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_int32.apply(null, arguments);
	};

	var real____floatscan = asm["___floatscan"]; asm["___floatscan"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____floatscan.apply(null, arguments);
	};

	var real__iswxdigit = asm["_iswxdigit"]; asm["_iswxdigit"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswxdigit.apply(null, arguments);
	};

	var real__xmmsc_playlist_clear = asm["_xmmsc_playlist_clear"]; asm["_xmmsc_playlist_clear"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_clear.apply(null, arguments);
	};

	var real__x_list_find = asm["_x_list_find"]; asm["_x_list_find"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_find.apply(null, arguments);
	};

	var real__xmmsc_broadcast_playback_current_id = asm["_xmmsc_broadcast_playback_current_id"]; asm["_xmmsc_broadcast_playback_current_id"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_playback_current_id.apply(null, arguments);
	};

	var real__strcoll = asm["_strcoll"]; asm["_strcoll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strcoll.apply(null, arguments);
	};

	var real__x_list_insert = asm["_x_list_insert"]; asm["_x_list_insert"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_insert.apply(null, arguments);
	};

	var real__xmmsc_medialib_import_path_encoded = asm["_xmmsc_medialib_import_path_encoded"]; asm["_xmmsc_medialib_import_path_encoded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_import_path_encoded.apply(null, arguments);
	};

	var real____overflow = asm["___overflow"]; asm["___overflow"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____overflow.apply(null, arguments);
	};

	var real__mbrtowc = asm["_mbrtowc"]; asm["_mbrtowc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__mbrtowc.apply(null, arguments);
	};

	var real__ldexp = asm["_ldexp"]; asm["_ldexp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ldexp.apply(null, arguments);
	};

	var real__tv2net = asm["_tv2net"]; asm["_tv2net"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tv2net.apply(null, arguments);
	};

	var real__xmmsv_list_iter_next = asm["_xmmsv_list_iter_next"]; asm["_xmmsv_list_iter_next"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_next.apply(null, arguments);
	};

	var real__xmmsc_ipc_destroy = asm["_xmmsc_ipc_destroy"]; asm["_xmmsc_ipc_destroy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_destroy.apply(null, arguments);
	};

	var real__y1f = asm["_y1f"]; asm["_y1f"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__y1f.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv437 = asm["___xmmsv_identity_xmmsv437"]; asm["___xmmsv_identity_xmmsv437"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv437.apply(null, arguments);
	};

	var real__x_asprintf = asm["_x_asprintf"]; asm["_x_asprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_asprintf.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_serialize_value = asm["_xmmsv_bitbuffer_serialize_value"]; asm["_xmmsv_bitbuffer_serialize_value"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_serialize_value.apply(null, arguments);
	};

	var real__xmmsc_result_parse_msg = asm["_xmmsc_result_parse_msg"]; asm["_xmmsc_result_parse_msg"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_parse_msg.apply(null, arguments);
	};

	var real__xmms_ipc_transport_read = asm["_xmms_ipc_transport_read"]; asm["_xmms_ipc_transport_read"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_ipc_transport_read.apply(null, arguments);
	};

	var real____towcase = asm["___towcase"]; asm["___towcase"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____towcase.apply(null, arguments);
	};

	var real__xmmsc_ipc_io_in_callback = asm["_xmmsc_ipc_io_in_callback"]; asm["_xmmsc_ipc_io_in_callback"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_io_in_callback.apply(null, arguments);
	};

	var real__bcopy = asm["_bcopy"]; asm["_bcopy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__bcopy.apply(null, arguments);
	};

	var real__getopt_long = asm["_getopt_long"]; asm["_getopt_long"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__getopt_long.apply(null, arguments);
	};

	var real__xmmsc_send_signal_msg = asm["_xmmsc_send_signal_msg"]; asm["_xmmsc_send_signal_msg"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_send_signal_msg.apply(null, arguments);
	};

	var real__coll_parse_autofilter = asm["_coll_parse_autofilter"]; asm["_coll_parse_autofilter"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_autofilter.apply(null, arguments);
	};

	var real__wcsstr = asm["_wcsstr"]; asm["_wcsstr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcsstr.apply(null, arguments);
	};

	var real__xmmsv_dict_entry_get_float = asm["_xmmsv_dict_entry_get_float"]; asm["_xmmsv_dict_entry_get_float"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_entry_get_float.apply(null, arguments);
	};

	var real__regexec = asm["_regexec"]; asm["_regexec"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__regexec.apply(null, arguments);
	};

	var real__xmmsc_visualization_version = asm["_xmmsc_visualization_version"]; asm["_xmmsc_visualization_version"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_visualization_version.apply(null, arguments);
	};

	var real__x_queue_free = asm["_x_queue_free"]; asm["_x_queue_free"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_queue_free.apply(null, arguments);
	};

	var real__xmms_freeaddrinfo = asm["_xmms_freeaddrinfo"]; asm["_xmms_freeaddrinfo"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmms_freeaddrinfo.apply(null, arguments);
	};

	var real__xmmsc_playlist_remove_entry = asm["_xmmsc_playlist_remove_entry"]; asm["_xmmsc_playlist_remove_entry"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_remove_entry.apply(null, arguments);
	};

	var real__xmmsc_playlist_list = asm["_xmmsc_playlist_list"]; asm["_xmmsc_playlist_list"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_list.apply(null, arguments);
	};

	var real__y1 = asm["_y1"]; asm["_y1"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__y1.apply(null, arguments);
	};

	var real__ilogbf = asm["_ilogbf"]; asm["_ilogbf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__ilogbf.apply(null, arguments);
	};

	var real__swprintf = asm["_swprintf"]; asm["_swprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__swprintf.apply(null, arguments);
	};

	var real__xmmsc_result_notifier_set_default = asm["_xmmsc_result_notifier_set_default"]; asm["_xmmsc_result_notifier_set_default"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_notifier_set_default.apply(null, arguments);
	};

	var real__xmmsv_coll_parse_custom = asm["_xmmsv_coll_parse_custom"]; asm["_xmmsv_coll_parse_custom"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_parse_custom.apply(null, arguments);
	};

	var real__tre_fill_pmatch = asm["_tre_fill_pmatch"]; asm["_tre_fill_pmatch"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_fill_pmatch.apply(null, arguments);
	};

	var real__vsprintf = asm["_vsprintf"]; asm["_vsprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__vsprintf.apply(null, arguments);
	};

	var real__dispose_chunk = asm["_dispose_chunk"]; asm["_dispose_chunk"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__dispose_chunk.apply(null, arguments);
	};

	var real__xmmsv_list_append_coll = asm["_xmmsv_list_append_coll"]; asm["_xmmsv_list_append_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_append_coll.apply(null, arguments);
	};

	var real__xmmsc_playlist_insert_collection = asm["_xmmsc_playlist_insert_collection"]; asm["_xmmsc_playlist_insert_collection"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_insert_collection.apply(null, arguments);
	};

	var real__common = asm["_common"]; asm["_common"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__common.apply(null, arguments);
	};

	var real__free_url = asm["_free_url"]; asm["_free_url"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__free_url.apply(null, arguments);
	};

	var real__sprintf = asm["_sprintf"]; asm["_sprintf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__sprintf.apply(null, arguments);
	};

	var real__strspn = asm["_strspn"]; asm["_strspn"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strspn.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv497 = asm["___xmmsv_identity_xmmsv497"]; asm["___xmmsv_identity_xmmsv497"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv497.apply(null, arguments);
	};

	var real____xmmsv_identity_xmmsv483 = asm["___xmmsv_identity_xmmsv483"]; asm["___xmmsv_identity_xmmsv483"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____xmmsv_identity_xmmsv483.apply(null, arguments);
	};

	var real__strncasecmp_l = asm["_strncasecmp_l"]; asm["_strncasecmp_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strncasecmp_l.apply(null, arguments);
	};

	var real__xmmsv_dict_set_coll = asm["_xmmsv_dict_set_coll"]; asm["_xmmsv_dict_set_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_set_coll.apply(null, arguments);
	};

	var real__xmmsv_coll_default_parse_build = asm["_xmmsv_coll_default_parse_build"]; asm["_xmmsv_coll_default_parse_build"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_default_parse_build.apply(null, arguments);
	};

	var real__strxfrm = asm["_strxfrm"]; asm["_strxfrm"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strxfrm.apply(null, arguments);
	};

	var real__isgraph_l = asm["_isgraph_l"]; asm["_isgraph_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isgraph_l.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_find = asm["_xmmsv_dict_iter_find"]; asm["_xmmsv_dict_iter_find"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_find.apply(null, arguments);
	};

	var real__random = asm["_random"]; asm["_random"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__random.apply(null, arguments);
	};

	var real__xmmsv_dict_set = asm["_xmmsv_dict_set"]; asm["_xmmsv_dict_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_set.apply(null, arguments);
	};

	var real__xmmsc_broadcast_medialib_entry_added = asm["_xmmsc_broadcast_medialib_entry_added"]; asm["_xmmsc_broadcast_medialib_entry_added"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_broadcast_medialib_entry_added.apply(null, arguments);
	};

	var real__tre_stack_push = asm["_tre_stack_push"]; asm["_tre_stack_push"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__tre_stack_push.apply(null, arguments);
	};

	var real__xmmsv_new_bitbuffer_ro = asm["_xmmsv_new_bitbuffer_ro"]; asm["_xmmsv_new_bitbuffer_ro"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_new_bitbuffer_ro.apply(null, arguments);
	};

	var real__iswgraph = asm["_iswgraph"]; asm["_iswgraph"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iswgraph.apply(null, arguments);
	};

	var real__xmmsv_list_iter_remove = asm["_xmmsv_list_iter_remove"]; asm["_xmmsv_list_iter_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_remove.apply(null, arguments);
	};

	var real__wcscoll_l = asm["_wcscoll_l"]; asm["_wcscoll_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcscoll_l.apply(null, arguments);
	};

	var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__calloc.apply(null, arguments);
	};

	var real__xmmsc_playlist_add_args = asm["_xmmsc_playlist_add_args"]; asm["_xmmsc_playlist_add_args"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playlist_add_args.apply(null, arguments);
	};

	var real__xmmsv_dict_iter_remove = asm["_xmmsv_dict_iter_remove"]; asm["_xmmsv_dict_iter_remove"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_dict_iter_remove.apply(null, arguments);
	};

	var real__coll_parse_operation = asm["_coll_parse_operation"]; asm["_coll_parse_operation"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__coll_parse_operation.apply(null, arguments);
	};

	var real__xmmsv_list_insert_string = asm["_xmmsv_list_insert_string"]; asm["_xmmsv_list_insert_string"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_insert_string.apply(null, arguments);
	};

	var real__xmmsv_bitbuffer_buffer = asm["_xmmsv_bitbuffer_buffer"]; asm["_xmmsv_bitbuffer_buffer"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_bitbuffer_buffer.apply(null, arguments);
	};

	var real__xmmsc_signal_playback_playtime = asm["_xmmsc_signal_playback_playtime"]; asm["_xmmsc_signal_playback_playtime"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_signal_playback_playtime.apply(null, arguments);
	};

	var real__iconv_close = asm["_iconv_close"]; asm["_iconv_close"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__iconv_close.apply(null, arguments);
	};

	var real__xmmsv_list_iter_entry_int64 = asm["_xmmsv_list_iter_entry_int64"]; asm["_xmmsv_list_iter_entry_int64"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_entry_int64.apply(null, arguments);
	};

	var real__xmmsc_ipc_lock_set = asm["_xmmsc_ipc_lock_set"]; asm["_xmmsc_ipc_lock_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_lock_set.apply(null, arguments);
	};

	var real__isgraph = asm["_isgraph"]; asm["_isgraph"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__isgraph.apply(null, arguments);
	};

	var real____fputwc_unlocked = asm["___fputwc_unlocked"]; asm["___fputwc_unlocked"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____fputwc_unlocked.apply(null, arguments);
	};

	var real__xmmsc_main_list_plugins = asm["_xmmsc_main_list_plugins"]; asm["_xmmsc_main_list_plugins"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_main_list_plugins.apply(null, arguments);
	};

	var real__bcmp = asm["_bcmp"]; asm["_bcmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__bcmp.apply(null, arguments);
	};

	var real__strtoll_l = asm["_strtoll_l"]; asm["_strtoll_l"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtoll_l.apply(null, arguments);
	};

	var real__strcasestr = asm["_strcasestr"]; asm["_strcasestr"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strcasestr.apply(null, arguments);
	};

	var real__strtof = asm["_strtof"]; asm["_strtof"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__strtof.apply(null, arguments);
	};

	var real__xmmsc_send_cmd_cookie = asm["_xmmsc_send_cmd_cookie"]; asm["_xmmsc_send_cmd_cookie"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_send_cmd_cookie.apply(null, arguments);
	};

	var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__realloc.apply(null, arguments);
	};

	var real__xmmsc_medialib_entry_property_set_int = asm["_xmmsc_medialib_entry_property_set_int"]; asm["_xmmsc_medialib_entry_property_set_int"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_entry_property_set_int.apply(null, arguments);
	};

	var real__xmmsc_playback_pause = asm["_xmmsc_playback_pause"]; asm["_xmmsc_playback_pause"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_playback_pause.apply(null, arguments);
	};

	var real__xmmsc_medialib_get_id_encoded = asm["_xmmsc_medialib_get_id_encoded"]; asm["_xmmsc_medialib_get_id_encoded"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_medialib_get_id_encoded.apply(null, arguments);
	};

	var real__xmmsv_coll_get_type = asm["_xmmsv_coll_get_type"]; asm["_xmmsv_coll_get_type"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_coll_get_type.apply(null, arguments);
	};

	var real____fwritex = asm["___fwritex"]; asm["___fwritex"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____fwritex.apply(null, arguments);
	};

	var real____tre_mem_new_impl = asm["___tre_mem_new_impl"]; asm["___tre_mem_new_impl"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____tre_mem_new_impl.apply(null, arguments);
	};

	var real__wcscasecmp = asm["_wcscasecmp"]; asm["_wcscasecmp"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__wcscasecmp.apply(null, arguments);
	};

	var real__xmmsc_result_ref = asm["_xmmsc_result_ref"]; asm["_xmmsc_result_ref"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_ref.apply(null, arguments);
	};

	var real__xmmsc_result_emscripten_notifier_set = asm["_xmmsc_result_emscripten_notifier_set"]; asm["_xmmsc_result_emscripten_notifier_set"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_result_emscripten_notifier_set.apply(null, arguments);
	};

	var real__xmmsv_list_flatten = asm["_xmmsv_list_flatten"]; asm["_xmmsv_list_flatten"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_flatten.apply(null, arguments);
	};

	var real___internal_get_from_bb_int64 = asm["__internal_get_from_bb_int64"]; asm["__internal_get_from_bb_int64"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_int64.apply(null, arguments);
	};

	var real__xmmsv_list_iter_entry = asm["_xmmsv_list_iter_entry"]; asm["_xmmsv_list_iter_entry"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_iter_entry.apply(null, arguments);
	};

	var real___xmmsv_list_new = asm["__xmmsv_list_new"]; asm["__xmmsv_list_new"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___xmmsv_list_new.apply(null, arguments);
	};

	var real____cosdf = asm["___cosdf"]; asm["___cosdf"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real____cosdf.apply(null, arguments);
	};

	var real__xmmsc_ipc_exec_msg = asm["_xmmsc_ipc_exec_msg"]; asm["_xmmsc_ipc_exec_msg"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_ipc_exec_msg.apply(null, arguments);
	};

	var real__xmmsc_io_disconnect = asm["_xmmsc_io_disconnect"]; asm["_xmmsc_io_disconnect"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_io_disconnect.apply(null, arguments);
	};

	var real__xmmsc_next_id = asm["_xmmsc_next_id"]; asm["_xmmsc_next_id"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsc_next_id.apply(null, arguments);
	};

	var real__xmmsv_list_insert_coll = asm["_xmmsv_list_insert_coll"]; asm["_xmmsv_list_insert_coll"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_insert_coll.apply(null, arguments);
	};

	var real__xmmsv_list_sort = asm["_xmmsv_list_sort"]; asm["_xmmsv_list_sort"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_list_sort.apply(null, arguments);
	};

	var real___internal_get_from_bb_collection_alloc = asm["__internal_get_from_bb_collection_alloc"]; asm["__internal_get_from_bb_collection_alloc"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real___internal_get_from_bb_collection_alloc.apply(null, arguments);
	};

	var real__x_list_nth = asm["_x_list_nth"]; asm["_x_list_nth"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__x_list_nth.apply(null, arguments);
	};

	var real__xmmsv_copy = asm["_xmmsv_copy"]; asm["_xmmsv_copy"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real__xmmsv_copy.apply(null, arguments);
	};

	var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
	  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
	  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
	  return real_runPostSets.apply(null, arguments);
	};
	var _iswxdigit_l = Module["_iswxdigit_l"] = asm["_iswxdigit_l"];
	var ___xmmsv_null_to_none397 = Module["___xmmsv_null_to_none397"] = asm["___xmmsv_null_to_none397"];
	var __xmmsv_coll_new = Module["__xmmsv_coll_new"] = asm["__xmmsv_coll_new"];
	var _xmmsc_playlist_radd = Module["_xmmsc_playlist_radd"] = asm["_xmmsc_playlist_radd"];
	var _xmms_sleep_ms = Module["_xmms_sleep_ms"] = asm["_xmms_sleep_ms"];
	var _xmmsv_coll_idlist_get_index_int32 = Module["_xmmsv_coll_idlist_get_index_int32"] = asm["_xmmsv_coll_idlist_get_index_int32"];
	var _erand48 = Module["_erand48"] = asm["_erand48"];
	var _xmmsc_result_notifier_add = Module["_xmmsc_result_notifier_add"] = asm["_xmmsc_result_notifier_add"];
	var _ffs = Module["_ffs"] = asm["_ffs"];
	var _iswalnum_l = Module["_iswalnum_l"] = asm["_iswalnum_l"];
	var _memchr = Module["_memchr"] = asm["_memchr"];
	var _xmmsc_playlist_rinsert = Module["_xmmsc_playlist_rinsert"] = asm["_xmmsc_playlist_rinsert"];
	var _xmmsc_result_disconnect = Module["_xmmsc_result_disconnect"] = asm["_xmmsc_result_disconnect"];
	var _warnx = Module["_warnx"] = asm["_warnx"];
	var _xmmsc_result_run_callback = Module["_xmmsc_result_run_callback"] = asm["_xmmsc_result_run_callback"];
	var _xmmsv_coll_idlist_get = Module["_xmmsv_coll_idlist_get"] = asm["_xmmsv_coll_idlist_get"];
	var _xmmsv_list_iter_tell = Module["_xmmsv_list_iter_tell"] = asm["_xmmsv_list_iter_tell"];
	var _mbrlen = Module["_mbrlen"] = asm["_mbrlen"];
	var _xmmsc_ipc_result_unregister = Module["_xmmsc_ipc_result_unregister"] = asm["_xmmsc_ipc_result_unregister"];
	var _drand48 = Module["_drand48"] = asm["_drand48"];
	var _string_intadd = Module["_string_intadd"] = asm["_string_intadd"];
	var _ilogb = Module["_ilogb"] = asm["_ilogb"];
	var _mallinfo = Module["_mallinfo"] = asm["_mallinfo"];
	var _iswblank = Module["_iswblank"] = asm["_iswblank"];
	var _check_drawtime = Module["_check_drawtime"] = asm["_check_drawtime"];
	var _xmmsc_broadcast_config_value_changed = Module["_xmmsc_broadcast_config_value_changed"] = asm["_xmmsc_broadcast_config_value_changed"];
	var _x_list_index = Module["_x_list_index"] = asm["_x_list_index"];
	var _strtoull = Module["_strtoull"] = asm["_strtoull"];
	var _xmmsc_medialib_entry_property_remove_with_source = Module["_xmmsc_medialib_entry_property_remove_with_source"] = asm["_xmmsc_medialib_entry_property_remove_with_source"];
	var _xmmsc_bindata_list = Module["_xmmsc_bindata_list"] = asm["_xmmsc_bindata_list"];
	var _xmmsc_result_notifier_set_default_full = Module["_xmmsc_result_notifier_set_default_full"] = asm["_xmmsc_result_notifier_set_default_full"];
	var _coll_parse_expr = Module["_coll_parse_expr"] = asm["_coll_parse_expr"];
	var _isdigit_l = Module["_isdigit_l"] = asm["_isdigit_l"];
	var __xmmsv_coll_free = Module["__xmmsv_coll_free"] = asm["__xmmsv_coll_free"];
	var _xmmsv_serialize = Module["_xmmsv_serialize"] = asm["_xmmsv_serialize"];
	var _xmmsc_result_notifier_set_raw = Module["_xmmsc_result_notifier_set_raw"] = asm["_xmmsc_result_notifier_set_raw"];
	var _xmmsv_build_metadata = Module["_xmmsv_build_metadata"] = asm["_xmmsv_build_metadata"];
	var _xmms_ipc_client_init = Module["_xmms_ipc_client_init"] = asm["_xmms_ipc_client_init"];
	var _xmmsv_deserialize = Module["_xmmsv_deserialize"] = asm["_xmmsv_deserialize"];
	var _strstrsplit = Module["_strstrsplit"] = asm["_strstrsplit"];
	var _xmmsc_coll_idlist_from_playlist_file = Module["_xmmsc_coll_idlist_from_playlist_file"] = asm["_xmmsc_coll_idlist_from_playlist_file"];
	var _xmmsc_coll_query = Module["_xmmsc_coll_query"] = asm["_xmmsc_coll_query"];
	var _vsscanf = Module["_vsscanf"] = asm["_vsscanf"];
	var _xmms_ipc_msg_get_length = Module["_xmms_ipc_msg_get_length"] = asm["_xmms_ipc_msg_get_length"];
	var _coll_parse_orop = Module["_coll_parse_orop"] = asm["_coll_parse_orop"];
	var _xmmsc_medialib_get_info = Module["_xmmsc_medialib_get_info"] = asm["_xmmsc_medialib_get_info"];
	var _wctomb = Module["_wctomb"] = asm["_wctomb"];
	var __xmmsv_list_flatten = Module["__xmmsv_list_flatten"] = asm["__xmmsv_list_flatten"];
	var _coll_parse_sequence = Module["_coll_parse_sequence"] = asm["_coll_parse_sequence"];
	var _find_match_index = Module["_find_match_index"] = asm["_find_match_index"];
	var _setup_shm_handle = Module["_setup_shm_handle"] = asm["_setup_shm_handle"];
	var _xmms_ipc_usocket_destroy = Module["_xmms_ipc_usocket_destroy"] = asm["_xmms_ipc_usocket_destroy"];
	var _independent_calloc = Module["_independent_calloc"] = asm["_independent_calloc"];
	var _wmemcmp = Module["_wmemcmp"] = asm["_wmemcmp"];
	var _iswprint = Module["_iswprint"] = asm["_iswprint"];
	var _xmmsv_coll_operands_get = Module["_xmmsv_coll_operands_get"] = asm["_xmmsv_coll_operands_get"];
	var _xmmsc_log = Module["_xmmsc_log"] = asm["_xmmsc_log"];
	var _strncmp = Module["_strncmp"] = asm["_strncmp"];
	var _x_list_alloc = Module["_x_list_alloc"] = asm["_x_list_alloc"];
	var _iswalnum = Module["_iswalnum"] = asm["_iswalnum"];
	var _xmmsc_result_callback_new_raw = Module["_xmmsc_result_callback_new_raw"] = asm["_xmmsc_result_callback_new_raw"];
	var _xmms_ipc_tcp_accept = Module["_xmms_ipc_tcp_accept"] = asm["_xmms_ipc_tcp_accept"];
	var __internal_put_on_bb_error = Module["__internal_put_on_bb_error"] = asm["__internal_put_on_bb_error"];
	var _xmmsv_list_index_of = Module["_xmmsv_list_index_of"] = asm["_xmmsv_list_index_of"];
	var _xmms_getaddrinfo = Module["_xmms_getaddrinfo"] = asm["_xmms_getaddrinfo"];
	var _xmmsv_new_float = Module["_xmmsv_new_float"] = asm["_xmmsv_new_float"];
	var _x_queue_peek_tail = Module["_x_queue_peek_tail"] = asm["_x_queue_peek_tail"];
	var _y0f = Module["_y0f"] = asm["_y0f"];
	var _ialloc = Module["_ialloc"] = asm["_ialloc"];
	var _bulk_free = Module["_bulk_free"] = asm["_bulk_free"];
	var _xmmsc_playlist_add_idlist = Module["_xmmsc_playlist_add_idlist"] = asm["_xmmsc_playlist_add_idlist"];
	var _cleanup_shm = Module["_cleanup_shm"] = asm["_cleanup_shm"];
	var _xmmsv_list_iter_entry_int32 = Module["_xmmsv_list_iter_entry_int32"] = asm["_xmmsv_list_iter_entry_int32"];
	var _xmmsv_list_append_string = Module["_xmmsv_list_append_string"] = asm["_xmmsv_list_append_string"];
	var _xmmsv_get_int32 = Module["_xmmsv_get_int32"] = asm["_xmmsv_get_int32"];
	var _scalbn = Module["_scalbn"] = asm["_scalbn"];
	var ___sin = Module["___sin"] = asm["___sin"];
	var _xmmsv_list_set = Module["_xmmsv_list_set"] = asm["_xmmsv_list_set"];
	var _xmmsv_new_coll = Module["_xmmsv_new_coll"] = asm["_xmmsv_new_coll"];
	var _independent_comalloc = Module["_independent_comalloc"] = asm["_independent_comalloc"];
	var ___towrite = Module["___towrite"] = asm["___towrite"];
	var ___xmmsv_null_to_none379 = Module["___xmmsv_null_to_none379"] = asm["___xmmsv_null_to_none379"];
	var _iswpunct = Module["_iswpunct"] = asm["_iswpunct"];
	var _xmmsc_config_register_value = Module["_xmmsc_config_register_value"] = asm["_xmmsc_config_register_value"];
	var _x_list_nth_prev = Module["_x_list_nth_prev"] = asm["_x_list_nth_prev"];
	var ___xmmsv_null_to_none373 = Module["___xmmsv_null_to_none373"] = asm["___xmmsv_null_to_none373"];
	var _wcscpy = Module["_wcscpy"] = asm["_wcscpy"];
	var _snprintf = Module["_snprintf"] = asm["_snprintf"];
	var _toascii = Module["_toascii"] = asm["_toascii"];
	var _xmmsc_broadcast_collection_changed = Module["_xmmsc_broadcast_collection_changed"] = asm["_xmmsc_broadcast_collection_changed"];
	var _xmmsv_dict_set_int = Module["_xmmsv_dict_set_int"] = asm["_xmmsv_dict_set_int"];
	var _xmmsv_list_get_float = Module["_xmmsv_list_get_float"] = asm["_xmmsv_list_get_float"];
	var _wcsspn = Module["_wcsspn"] = asm["_wcsspn"];
	var _xmmsc_ipc_need_out_callback_set = Module["_xmmsc_ipc_need_out_callback_set"] = asm["_xmmsc_ipc_need_out_callback_set"];
	var _xmmsc_result_get_class = Module["_xmmsc_result_get_class"] = asm["_xmmsc_result_get_class"];
	var ___stpcpy = Module["___stpcpy"] = asm["___stpcpy"];
	var _xmmsv_coll_parse = Module["_xmmsv_coll_parse"] = asm["_xmmsv_coll_parse"];
	var _iswprint_l = Module["_iswprint_l"] = asm["_iswprint_l"];
	var ___xmmsv_identity_const_charp = Module["___xmmsv_identity_const_charp"] = asm["___xmmsv_identity_const_charp"];
	var _xmmsc_result_c2c_set = Module["_xmmsc_result_c2c_set"] = asm["_xmmsc_result_c2c_set"];
	var _xmms_ipc_tcp_server_init = Module["_xmms_ipc_tcp_server_init"] = asm["_xmms_ipc_tcp_server_init"];
	var _xmmsv_build_cluster_dict = Module["_xmmsv_build_cluster_dict"] = asm["_xmmsv_build_cluster_dict"];
	var _strtoul = Module["_strtoul"] = asm["_strtoul"];
	var _xmmsc_visualization_properties_set = Module["_xmmsc_visualization_properties_set"] = asm["_xmmsc_visualization_properties_set"];
	var _wcspbrk = Module["_wcspbrk"] = asm["_wcspbrk"];
	var _xmmsc_ipc_msg_write = Module["_xmmsc_ipc_msg_write"] = asm["_xmmsc_ipc_msg_write"];
	var __internal_get_from_bb_bin_alloc = Module["__internal_get_from_bb_bin_alloc"] = asm["__internal_get_from_bb_bin_alloc"];
	var _xmmsc_result_notifier_set_c2c_full = Module["_xmmsc_result_notifier_set_c2c_full"] = asm["_xmmsc_result_notifier_set_c2c_full"];
	var _strfmon = Module["_strfmon"] = asm["_strfmon"];
	var _xmmsc_medialib_entry_property_remove = Module["_xmmsc_medialib_entry_property_remove"] = asm["_xmmsc_medialib_entry_property_remove"];
	var _xmmsv_new_bin = Module["_xmmsv_new_bin"] = asm["_xmmsv_new_bin"];
	var _xmmsv_get_float = Module["_xmmsv_get_float"] = asm["_xmmsv_get_float"];
	var _mbsrtowcs = Module["_mbsrtowcs"] = asm["_mbsrtowcs"];
	var _xmms_ipc_usocket_accept = Module["_xmms_ipc_usocket_accept"] = asm["_xmms_ipc_usocket_accept"];
	var _wcswcs = Module["_wcswcs"] = asm["_wcswcs"];
	var _xmmsc_playlist_add_url = Module["_xmmsc_playlist_add_url"] = asm["_xmmsc_playlist_add_url"];
	var _xmmsc_playlist_current_pos = Module["_xmmsc_playlist_current_pos"] = asm["_xmmsc_playlist_current_pos"];
	var __internal_put_on_bb_bin = Module["__internal_put_on_bb_bin"] = asm["__internal_put_on_bb_bin"];
	var _match_bracket = Module["_match_bracket"] = asm["_match_bracket"];
	var _isprint = Module["_isprint"] = asm["_isprint"];
	var _malloc_footprint_limit = Module["_malloc_footprint_limit"] = asm["_malloc_footprint_limit"];
	var _do_methodcall = Module["_do_methodcall"] = asm["_do_methodcall"];
	var _regfree = Module["_regfree"] = asm["_regfree"];
	var _iscntrl_l = Module["_iscntrl_l"] = asm["_iscntrl_l"];
	var _wmemmove = Module["_wmemmove"] = asm["_wmemmove"];
	var _xmms_ipc_msg_set_object = Module["_xmms_ipc_msg_set_object"] = asm["_xmms_ipc_msg_set_object"];
	var __internal_put_on_bb_value_of_type = Module["__internal_put_on_bb_value_of_type"] = asm["__internal_put_on_bb_value_of_type"];
	var _xmmsv_dict_iter_pair_float = Module["_xmmsv_dict_iter_pair_float"] = asm["_xmmsv_dict_iter_pair_float"];
	var _verr = Module["_verr"] = asm["_verr"];
	var ___intscan = Module["___intscan"] = asm["___intscan"];
	var _x_list_insert_before = Module["_x_list_insert_before"] = asm["_x_list_insert_before"];
	var _xmmsv_coll_idlist_insert = Module["_xmmsv_coll_idlist_insert"] = asm["_xmmsv_coll_idlist_insert"];
	var _xmmsc_broadcast_mediainfo_reader_status = Module["_xmmsc_broadcast_mediainfo_reader_status"] = asm["_xmmsc_broadcast_mediainfo_reader_status"];
	var _wcstombs = Module["_wcstombs"] = asm["_wcstombs"];
	var _tre_make_trans = Module["_tre_make_trans"] = asm["_tre_make_trans"];
	var _xmmsv_dict_iter_set_string = Module["_xmmsv_dict_iter_set_string"] = asm["_xmmsv_dict_iter_set_string"];
	var ___wcscoll_l = Module["___wcscoll_l"] = asm["___wcscoll_l"];
	var _xmmsv_get_bin = Module["_xmmsv_get_bin"] = asm["_xmmsv_get_bin"];
	var _x_list_last = Module["_x_list_last"] = asm["_x_list_last"];
	var _net2ts = Module["_net2ts"] = asm["_net2ts"];
	var _xmmsv_build_count = Module["_xmmsv_build_count"] = asm["_xmmsv_build_count"];
	var _xmmsc_medialib_add_entry = Module["_xmmsc_medialib_add_entry"] = asm["_xmmsc_medialib_add_entry"];
	var _xmms_valist_to_strlist = Module["_xmms_valist_to_strlist"] = asm["_xmms_valist_to_strlist"];
	var __xmmsv_dict_resize = Module["__xmmsv_dict_resize"] = asm["__xmmsv_dict_resize"];
	var _xmmsc_result_notifier_set_raw_full = Module["_xmmsc_result_notifier_set_raw_full"] = asm["_xmmsc_result_notifier_set_raw_full"];
	var _wcscoll = Module["_wcscoll"] = asm["_wcscoll"];
	var ___xmmsv_identity_xmmsv = Module["___xmmsv_identity_xmmsv"] = asm["___xmmsv_identity_xmmsv"];
	var _xmms_sockets_initialize = Module["_xmms_sockets_initialize"] = asm["_xmms_sockets_initialize"];
	var _tre_add_tag_right = Module["_tre_add_tag_right"] = asm["_tre_add_tag_right"];
	var _vwarnx = Module["_vwarnx"] = asm["_vwarnx"];
	var _strtoll = Module["_strtoll"] = asm["_strtoll"];
	var _strtoumax = Module["_strtoumax"] = asm["_strtoumax"];
	var _xmmsv_coll_unref = Module["_xmmsv_coll_unref"] = asm["_xmmsv_coll_unref"];
	var ___uflow = Module["___uflow"] = asm["___uflow"];
	var _strtold = Module["_strtold"] = asm["_strtold"];
	var _xmmsc_playlist_sort = Module["_xmmsc_playlist_sort"] = asm["_xmmsc_playlist_sort"];
	var _xmmsv_coll_operands_set = Module["_xmmsv_coll_operands_set"] = asm["_xmmsv_coll_operands_set"];
	var ___xmmsv_null_to_none454 = Module["___xmmsv_null_to_none454"] = asm["___xmmsv_null_to_none454"];
	var _internal_memalign = Module["_internal_memalign"] = asm["_internal_memalign"];
	var _wmemset = Module["_wmemset"] = asm["_wmemset"];
	var __xmmsv_list_position_normalize = Module["__xmmsv_list_position_normalize"] = asm["__xmmsv_list_position_normalize"];
	var _xmmsc_medialib_import_path = Module["_xmmsc_medialib_import_path"] = asm["_xmmsc_medialib_import_path"];
	var ___wcsxfrm_l = Module["___wcsxfrm_l"] = asm["___wcsxfrm_l"];
	var _isalpha_l = Module["_isalpha_l"] = asm["_isalpha_l"];
	var _xmmsc_log_handler_get = Module["_xmmsc_log_handler_get"] = asm["_xmmsc_log_handler_get"];
	var _xmmsc_send_msg_no_arg = Module["_xmmsc_send_msg_no_arg"] = asm["_xmmsc_send_msg_no_arg"];
	var _iscntrl = Module["_iscntrl"] = asm["_iscntrl"];
	var _xmmsc_playlist_insert_encoded = Module["_xmmsc_playlist_insert_encoded"] = asm["_xmmsc_playlist_insert_encoded"];
	var _tre_parse = Module["_tre_parse"] = asm["_tre_parse"];
	var _realloc_in_place = Module["_realloc_in_place"] = asm["_realloc_in_place"];
	var _mrand48 = Module["_mrand48"] = asm["_mrand48"];
	var _coll_parse_andop = Module["_coll_parse_andop"] = asm["_coll_parse_andop"];
	var _xmmsv_bitbuffer_end = Module["_xmmsv_bitbuffer_end"] = asm["_xmmsv_bitbuffer_end"];
	var _xmmsv_list_set_int = Module["_xmmsv_list_set_int"] = asm["_xmmsv_list_set_int"];
	var _lcong48 = Module["_lcong48"] = asm["_lcong48"];
	var _xmms_ipc_tcp_read = Module["_xmms_ipc_tcp_read"] = asm["_xmms_ipc_tcp_read"];
	var _xmmsc_ipc_result_register = Module["_xmmsc_ipc_result_register"] = asm["_xmmsc_ipc_result_register"];
	var _iswctype_l = Module["_iswctype_l"] = asm["_iswctype_l"];
	var _ispunct = Module["_ispunct"] = asm["_ispunct"];
	var _jn = Module["_jn"] = asm["_jn"];
	var _malloc = Module["_malloc"] = asm["_malloc"];
	var _xmmsv_dict_iter_set = Module["_xmmsv_dict_iter_set"] = asm["_xmmsv_dict_iter_set"];
	var _xmmsc_result_restart = Module["_xmmsc_result_restart"] = asm["_xmmsc_result_restart"];
	var _memmove = Module["_memmove"] = asm["_memmove"];
	var _malloc_max_footprint = Module["_malloc_max_footprint"] = asm["_malloc_max_footprint"];
	var _err = Module["_err"] = asm["_err"];
	var _xmmsc_playback_status = Module["_xmmsc_playback_status"] = asm["_xmmsc_playback_status"];
	var _wcwidth = Module["_wcwidth"] = asm["_wcwidth"];
	var _xmmsv_list_set_string = Module["_xmmsv_list_set_string"] = asm["_xmmsv_list_set_string"];
	var _malloc_footprint = Module["_malloc_footprint"] = asm["_malloc_footprint"];
	var _xmms_socket_valid = Module["_xmms_socket_valid"] = asm["_xmms_socket_valid"];
	var _asprintf = Module["_asprintf"] = asm["_asprintf"];
	var _vsnprintf = Module["_vsnprintf"] = asm["_vsnprintf"];
	var _strtoul_l = Module["_strtoul_l"] = asm["_strtoul_l"];
	var _source_match_pattern = Module["_source_match_pattern"] = asm["_source_match_pattern"];
	var _xmmsv_dict_iter_pair_int32 = Module["_xmmsv_dict_iter_pair_int32"] = asm["_xmmsv_dict_iter_pair_int32"];
	var _lgamma = Module["_lgamma"] = asm["_lgamma"];
	var _xmms_ipc_msg_new = Module["_xmms_ipc_msg_new"] = asm["_xmms_ipc_msg_new"];
	var _xmmsv_unref = Module["_xmmsv_unref"] = asm["_xmmsv_unref"];
	var _strlcpy = Module["_strlcpy"] = asm["_strlcpy"];
	var _xmmsc_bindata_retrieve = Module["_xmmsc_bindata_retrieve"] = asm["_xmmsc_bindata_retrieve"];
	var _xmmsc_broadcast_playlist_loaded = Module["_xmmsc_broadcast_playlist_loaded"] = asm["_xmmsc_broadcast_playlist_loaded"];
	var __xmmsv_utf8_charlen = Module["__xmmsv_utf8_charlen"] = asm["__xmmsv_utf8_charlen"];
	var _xmmsc_playlist_insert_url = Module["_xmmsc_playlist_insert_url"] = asm["_xmmsc_playlist_insert_url"];
	var _xmmsv_list_remove = Module["_xmmsv_list_remove"] = asm["_xmmsv_list_remove"];
	var _xmmsv_coll_idlist_move = Module["_xmmsv_coll_idlist_move"] = asm["_xmmsv_coll_idlist_move"];
	var _xmms_ipc_msg_read_transport = Module["_xmms_ipc_msg_read_transport"] = asm["_xmms_ipc_msg_read_transport"];
	var _wcslen = Module["_wcslen"] = asm["_wcslen"];
	var _xmmsc_ipc_init = Module["_xmmsc_ipc_init"] = asm["_xmmsc_ipc_init"];
	var _xmmsc_medialib_encode_url_full = Module["_xmmsc_medialib_encode_url_full"] = asm["_xmmsc_medialib_encode_url_full"];
	var _xmmsv_dict_entry_get_string = Module["_xmmsv_dict_entry_get_string"] = asm["_xmmsv_dict_entry_get_string"];
	var _sscanf = Module["_sscanf"] = asm["_sscanf"];
	var _x_queue_pop_tail = Module["_x_queue_pop_tail"] = asm["_x_queue_pop_tail"];
	var _iswdigit = Module["_iswdigit"] = asm["_iswdigit"];
	var _isalnum_l = Module["_isalnum_l"] = asm["_isalnum_l"];
	var _coll_parse_unaryfilter = Module["_coll_parse_unaryfilter"] = asm["_coll_parse_unaryfilter"];
	var _xmmsc_playlist_set_next = Module["_xmmsc_playlist_set_next"] = asm["_xmmsc_playlist_set_next"];
	var _MUSL_vfprintf = Module["_MUSL_vfprintf"] = asm["_MUSL_vfprintf"];
	var _coll_append_universe = Module["_coll_append_universe"] = asm["_coll_append_universe"];
	var _setup_udp_prepare = Module["_setup_udp_prepare"] = asm["_setup_udp_prepare"];
	var _malloc_stats = Module["_malloc_stats"] = asm["_malloc_stats"];
	var _xmmsc_disconnect_callback_set_full = Module["_xmmsc_disconnect_callback_set_full"] = asm["_xmmsc_disconnect_callback_set_full"];
	var _wcsncmp = Module["_wcsncmp"] = asm["_wcsncmp"];
	var _strcmp = Module["_strcmp"] = asm["_strcmp"];
	var _xmmsv_list_iter_first = Module["_xmmsv_list_iter_first"] = asm["_xmmsv_list_iter_first"];
	var _strncasecmp = Module["_strncasecmp"] = asm["_strncasecmp"];
	var _memset = Module["_memset"] = asm["_memset"];
	var _xmmsv_list_clear = Module["_xmmsv_list_clear"] = asm["_xmmsv_list_clear"];
	var __xmmsv_dict_insert = Module["__xmmsv_dict_insert"] = asm["__xmmsv_dict_insert"];
	var _xmmsv_build_organize = Module["_xmmsv_build_organize"] = asm["_xmmsv_build_organize"];
	var _xmmsc_visualization_start = Module["_xmmsc_visualization_start"] = asm["_xmmsc_visualization_start"];
	var _xmmsv_list_iter_entry_coll = Module["_xmmsv_list_iter_entry_coll"] = asm["_xmmsv_list_iter_entry_coll"];
	var _towctrans_l = Module["_towctrans_l"] = asm["_towctrans_l"];
	var _xmmsv_coll_add_limit_operator = Module["_xmmsv_coll_add_limit_operator"] = asm["_xmmsv_coll_add_limit_operator"];
	var _xmmsv_new_int = Module["_xmmsv_new_int"] = asm["_xmmsv_new_int"];
	var _xmmsc_medialib_entry_property_set_int_with_source = Module["_xmmsc_medialib_entry_property_set_int_with_source"] = asm["_xmmsc_medialib_entry_property_set_int_with_source"];
	var _wcsxfrm_l = Module["_wcsxfrm_l"] = asm["_wcsxfrm_l"];
	var _xmmsc_result_wait = Module["_xmmsc_result_wait"] = asm["_xmmsc_result_wait"];
	var _wcschr = Module["_wcschr"] = asm["_wcschr"];
	var _pat_next = Module["_pat_next"] = asm["_pat_next"];
	var _ynf = Module["_ynf"] = asm["_ynf"];
	var _xmms_ipc_transport_destroy = Module["_xmms_ipc_transport_destroy"] = asm["_xmms_ipc_transport_destroy"];
	var _lgammal = Module["_lgammal"] = asm["_lgammal"];
	var _xmmsc_io_need_out_callback_set = Module["_xmmsc_io_need_out_callback_set"] = asm["_xmmsc_io_need_out_callback_set"];
	var _xmmsv_coll_idlist_append = Module["_xmmsv_coll_idlist_append"] = asm["_xmmsv_coll_idlist_append"];
	var __internal_get_from_bb_float = Module["__internal_get_from_bb_float"] = asm["__internal_get_from_bb_float"];
	var _read_do_shm = Module["_read_do_shm"] = asm["_read_do_shm"];
	var _wcrtomb = Module["_wcrtomb"] = asm["_wcrtomb"];
	var _xmmsv_coll_ref = Module["_xmmsv_coll_ref"] = asm["_xmmsv_coll_ref"];
	var _isdigit = Module["_isdigit"] = asm["_isdigit"];
	var _xmmsv_list_iter_insert = Module["_xmmsv_list_iter_insert"] = asm["_xmmsv_list_iter_insert"];
	var _ispunct_l = Module["_ispunct_l"] = asm["_ispunct_l"];
	var _xmmsv_get_type = Module["_xmmsv_get_type"] = asm["_xmmsv_get_type"];
	var _xmms_ipc_msg_write_transport = Module["_xmms_ipc_msg_write_transport"] = asm["_xmms_ipc_msg_write_transport"];
	var _xmmsv_list_get_int32 = Module["_xmmsv_list_get_int32"] = asm["_xmmsv_list_get_int32"];
	var _coll_parse_prop = Module["_coll_parse_prop"] = asm["_coll_parse_prop"];
	var _strsep = Module["_strsep"] = asm["_strsep"];
	var _xmmsv_dict_iter_explicit_destroy = Module["_xmmsv_dict_iter_explicit_destroy"] = asm["_xmmsv_dict_iter_explicit_destroy"];
	var _trinkle = Module["_trinkle"] = asm["_trinkle"];
	var _xmmsv_new_none = Module["_xmmsv_new_none"] = asm["_xmmsv_new_none"];
	var _xmmsc_visualization_errored = Module["_xmmsc_visualization_errored"] = asm["_xmmsc_visualization_errored"];
	var ___lgammal_r = Module["___lgammal_r"] = asm["___lgammal_r"];
	var _tre_match_empty = Module["_tre_match_empty"] = asm["_tre_match_empty"];
	var _coll_parse_filter = Module["_coll_parse_filter"] = asm["_coll_parse_filter"];
	var _xmms_dump_stack = Module["_xmms_dump_stack"] = asm["_xmms_dump_stack"];
	var _xmmsc_ipc_io_out = Module["_xmmsc_ipc_io_out"] = asm["_xmmsc_ipc_io_out"];
	var ___strcoll_l = Module["___strcoll_l"] = asm["___strcoll_l"];
	var _xmmsc_send_hello = Module["_xmmsc_send_hello"] = asm["_xmmsc_send_hello"];
	var _coll_parse_notop = Module["_coll_parse_notop"] = asm["_coll_parse_notop"];
	var _iswgraph_l = Module["_iswgraph_l"] = asm["_iswgraph_l"];
	var ___xmmsv_null_to_none = Module["___xmmsv_null_to_none"] = asm["___xmmsv_null_to_none"];
	var _xmmsc_playlist_load = Module["_xmmsc_playlist_load"] = asm["_xmmsc_playlist_load"];
	var _xmmsv_dict_entry_get_int64 = Module["_xmmsv_dict_entry_get_int64"] = asm["_xmmsv_dict_entry_get_int64"];
	var ___xmmsv_identity_xmmsv350 = Module["___xmmsv_identity_xmmsv350"] = asm["___xmmsv_identity_xmmsv350"];
	var ___xmmsv_identity_xmmsv356 = Module["___xmmsv_identity_xmmsv356"] = asm["___xmmsv_identity_xmmsv356"];
	var _xmmsv_list_set_coll = Module["_xmmsv_list_set_coll"] = asm["_xmmsv_list_set_coll"];
	var _srandom = Module["_srandom"] = asm["_srandom"];
	var _xmmsv_bitbuffer_pos = Module["_xmmsv_bitbuffer_pos"] = asm["_xmmsv_bitbuffer_pos"];
	var _vwprintf = Module["_vwprintf"] = asm["_vwprintf"];
	var _tre_add_tags = Module["_tre_add_tags"] = asm["_tre_add_tags"];
	var _fcvt = Module["_fcvt"] = asm["_fcvt"];
	var _vswprintf = Module["_vswprintf"] = asm["_vswprintf"];
	var _xmms_default_ipcpath_get = Module["_xmms_default_ipcpath_get"] = asm["_xmms_default_ipcpath_get"];
	var _wcscat = Module["_wcscat"] = asm["_wcscat"];
	var _xmmsv_list_get_string = Module["_xmmsv_list_get_string"] = asm["_xmmsv_list_get_string"];
	var _strtod_l = Module["_strtod_l"] = asm["_strtod_l"];
	var _packet_init_data = Module["_packet_init_data"] = asm["_packet_init_data"];
	var _xmmsc_unref = Module["_xmmsc_unref"] = asm["_xmmsc_unref"];
	var _ecvt = Module["_ecvt"] = asm["_ecvt"];
	var _xmmsc_result_seterror = Module["_xmmsc_result_seterror"] = asm["_xmmsc_result_seterror"];
	var _getopt = Module["_getopt"] = asm["_getopt"];
	var _xmmsv_list_iter_insert_coll = Module["_xmmsv_list_iter_insert_coll"] = asm["_xmmsv_list_iter_insert_coll"];
	var __xmmsv_list_append = Module["__xmmsv_list_append"] = asm["__xmmsv_list_append"];
	var ___lgammaf_r = Module["___lgammaf_r"] = asm["___lgammaf_r"];
	var _xmmsv_dict_iter_valid = Module["_xmmsv_dict_iter_valid"] = asm["_xmmsv_dict_iter_valid"];
	var ___strxfrm_l = Module["___strxfrm_l"] = asm["___strxfrm_l"];
	var _xmmsc_broadcast_medialib_entry_updated = Module["_xmmsc_broadcast_medialib_entry_updated"] = asm["_xmmsc_broadcast_medialib_entry_updated"];
	var _malloc_trim = Module["_malloc_trim"] = asm["_malloc_trim"];
	var _coll_token_new = Module["_coll_token_new"] = asm["_coll_token_new"];
	var _xmmsv_new_error = Module["_xmmsv_new_error"] = asm["_xmmsv_new_error"];
	var _ignore_err = Module["_ignore_err"] = asm["_ignore_err"];
	var _regcomp = Module["_regcomp"] = asm["_regcomp"];
	var _xmmsc_playlist_insert_args = Module["_xmmsc_playlist_insert_args"] = asm["_xmmsc_playlist_insert_args"];
	var _strupr = Module["_strupr"] = asm["_strupr"];
	var _xmms_socket_set_nonblock = Module["_xmms_socket_set_nonblock"] = asm["_xmms_socket_set_nonblock"];
	var __xmmsv_dict_free = Module["__xmmsv_dict_free"] = asm["__xmmsv_dict_free"];
	var _j1 = Module["_j1"] = asm["_j1"];
	var _common70 = Module["_common70"] = asm["_common70"];
	var _xmmsc_result_free = Module["_xmmsc_result_free"] = asm["_xmmsc_result_free"];
	var _isblank = Module["_isblank"] = asm["_isblank"];
	var _x_list_foreach = Module["_x_list_foreach"] = asm["_x_list_foreach"];
	var _isupper = Module["_isupper"] = asm["_isupper"];
	var __xmmsv_list_free = Module["__xmmsv_list_free"] = asm["__xmmsv_list_free"];
	var _rand = Module["_rand"] = asm["_rand"];
	var _vasprintf = Module["_vasprintf"] = asm["_vasprintf"];
	var _free = Module["_free"] = asm["_free"];
	var _xmmsv_list_get = Module["_xmmsv_list_get"] = asm["_xmmsv_list_get"];
	var _vstrfmon_l = Module["_vstrfmon_l"] = asm["_vstrfmon_l"];
	var _xmmsc_playlist_insert_id = Module["_xmmsc_playlist_insert_id"] = asm["_xmmsc_playlist_insert_id"];
	var _packet_init_timing = Module["_packet_init_timing"] = asm["_packet_init_timing"];
	var _xmmsc_medialib_path_import_encoded = Module["_xmmsc_medialib_path_import_encoded"] = asm["_xmmsc_medialib_path_import_encoded"];
	var _coll_parse_prepare = Module["_coll_parse_prepare"] = asm["_coll_parse_prepare"];
	var _xmmsc_result_new = Module["_xmmsc_result_new"] = asm["_xmmsc_result_new"];
	var _x_list_reverse = Module["_x_list_reverse"] = asm["_x_list_reverse"];
	var ___xmmsv_null_to_none484 = Module["___xmmsv_null_to_none484"] = asm["___xmmsv_null_to_none484"];
	var _xmmsc_playback_seek_ms = Module["_xmmsc_playback_seek_ms"] = asm["_xmmsc_playback_seek_ms"];
	var _xmmsc_result_callback_new_default = Module["_xmmsc_result_callback_new_default"] = asm["_xmmsc_result_callback_new_default"];
	var _strstr = Module["_strstr"] = asm["_strstr"];
	var _xmmsc_coll_list = Module["_xmmsc_coll_list"] = asm["_xmmsc_coll_list"];
	var _xmmsc_bindata_remove = Module["_xmmsc_bindata_remove"] = asm["_xmmsc_bindata_remove"];
	var _verrx = Module["_verrx"] = asm["_verrx"];
	var _xmms_ipc_msg_set_cookie = Module["_xmms_ipc_msg_set_cookie"] = asm["_xmms_ipc_msg_set_cookie"];
	var _xmmsc_io_fd_get = Module["_xmmsc_io_fd_get"] = asm["_xmmsc_io_fd_get"];
	var _xmmsv_bitbuffer_new = Module["_xmmsv_bitbuffer_new"] = asm["_xmmsv_bitbuffer_new"];
	var _xmmsv_coll_is_type = Module["_xmmsv_coll_is_type"] = asm["_xmmsv_coll_is_type"];
	var _do_read134 = Module["_do_read134"] = asm["_do_read134"];
	var _strtok_r = Module["_strtok_r"] = asm["_strtok_r"];
	var _xmmsv_build_list_va = Module["_xmmsv_build_list_va"] = asm["_xmmsv_build_list_va"];
	var _xmmsv_get_string = Module["_xmmsv_get_string"] = asm["_xmmsv_get_string"];
	var _xmmsc_playlist_remove = Module["_xmmsc_playlist_remove"] = asm["_xmmsc_playlist_remove"];
	var _xmmsv_list_get_coll = Module["_xmmsv_list_get_coll"] = asm["_xmmsv_list_get_coll"];
	var _xmmsc_mainloop_emscripten_loop = Module["_xmmsc_mainloop_emscripten_loop"] = asm["_xmmsc_mainloop_emscripten_loop"];
	var __xmmsc_medialib_verify_url = Module["__xmmsc_medialib_verify_url"] = asm["__xmmsc_medialib_verify_url"];
	var _wcstoumax = Module["_wcstoumax"] = asm["_wcstoumax"];
	var _xmmsc_playlist_move_entry = Module["_xmmsc_playlist_move_entry"] = asm["_xmmsc_playlist_move_entry"];
	var __internal_get_from_bb_value_dict_alloc = Module["__internal_get_from_bb_value_dict_alloc"] = asm["__internal_get_from_bb_value_dict_alloc"];
	var _do_read = Module["_do_read"] = asm["_do_read"];
	var _strndup = Module["_strndup"] = asm["_strndup"];
	var _xmmsc_result_get_connection = Module["_xmmsc_result_get_connection"] = asm["_xmmsc_result_get_connection"];
	var _xmmsv_dict_set_string = Module["_xmmsv_dict_set_string"] = asm["_xmmsv_dict_set_string"];
	var _xmmsc_visualization_init_handle = Module["_xmmsc_visualization_init_handle"] = asm["_xmmsc_visualization_init_handle"];
	var _x_queue_peek_head = Module["_x_queue_peek_head"] = asm["_x_queue_peek_head"];
	var _mbstowcs = Module["_mbstowcs"] = asm["_mbstowcs"];
	var _atoll = Module["_atoll"] = asm["_atoll"];
	var _mempcpy = Module["_mempcpy"] = asm["_mempcpy"];
	var _xmmsc_playback_tickle = Module["_xmmsc_playback_tickle"] = asm["_xmmsc_playback_tickle"];
	var _xmmsc_broadcast_quit = Module["_xmmsc_broadcast_quit"] = asm["_xmmsc_broadcast_quit"];
	var _xmmsc_broadcast_playback_status = Module["_xmmsc_broadcast_playback_status"] = asm["_xmmsc_broadcast_playback_status"];
	var _globfree = Module["_globfree"] = asm["_globfree"];
	var _iswpunct_l = Module["_iswpunct_l"] = asm["_iswpunct_l"];
	var _tre_copy_ast = Module["_tre_copy_ast"] = asm["_tre_copy_ast"];
	var _wmemcpy = Module["_wmemcpy"] = asm["_wmemcpy"];
	var ___tre_mem_destroy = Module["___tre_mem_destroy"] = asm["___tre_mem_destroy"];
	var _setup_udp_handle = Module["_setup_udp_handle"] = asm["_setup_udp_handle"];
	var _bzero = Module["_bzero"] = asm["_bzero"];
	var _xmmsc_signal_mediainfo_reader_unindexed = Module["_xmmsc_signal_mediainfo_reader_unindexed"] = asm["_xmmsc_signal_mediainfo_reader_unindexed"];
	var _xmmsc_broadcast_playlist_changed = Module["_xmmsc_broadcast_playlist_changed"] = asm["_xmmsc_broadcast_playlist_changed"];
	var _strchrsplit = Module["_strchrsplit"] = asm["_strchrsplit"];
	var _rand_r = Module["_rand_r"] = asm["_rand_r"];
	var _logb = Module["_logb"] = asm["_logb"];
	var _mbsnrtowcs = Module["_mbsnrtowcs"] = asm["_mbsnrtowcs"];
	var __internal_put_on_bb_int64 = Module["__internal_put_on_bb_int64"] = asm["__internal_put_on_bb_int64"];
	var _btowc = Module["_btowc"] = asm["_btowc"];
	var _xmmsc_playlist_create = Module["_xmmsc_playlist_create"] = asm["_xmmsc_playlist_create"];
	var _xmmsv_coll_attribute_remove = Module["_xmmsv_coll_attribute_remove"] = asm["_xmmsv_coll_attribute_remove"];
	var _xmmsv_build_list = Module["_xmmsv_build_list"] = asm["_xmmsv_build_list"];
	var __xmmsv_dict_search = Module["__xmmsv_dict_search"] = asm["__xmmsv_dict_search"];
	var _xmmsc_disconnect_callback_set = Module["_xmmsc_disconnect_callback_set"] = asm["_xmmsc_disconnect_callback_set"];
	var _x_vasprintf = Module["_x_vasprintf"] = asm["_x_vasprintf"];
	var _xmmsv_dict_iter_pair_int64 = Module["_xmmsv_dict_iter_pair_int64"] = asm["_xmmsv_dict_iter_pair_int64"];
	var _xmmsc_ref = Module["_xmmsc_ref"] = asm["_xmmsc_ref"];
	var _wcsnlen = Module["_wcsnlen"] = asm["_wcsnlen"];
	var _xmmsc_medialib_remove_entry = Module["_xmmsc_medialib_remove_entry"] = asm["_xmmsc_medialib_remove_entry"];
	var _x_list_prepend = Module["_x_list_prepend"] = asm["_x_list_prepend"];
	var _xmmsv_coll_attribute_get_int32 = Module["_xmmsv_coll_attribute_get_int32"] = asm["_xmmsv_coll_attribute_get_int32"];
	var _wprintf_core = Module["_wprintf_core"] = asm["_wprintf_core"];
	var _xmmsc_coll_sync = Module["_xmmsc_coll_sync"] = asm["_xmmsc_coll_sync"];
	var _xmmsv_get_dict_iter = Module["_xmmsv_get_dict_iter"] = asm["_xmmsv_get_dict_iter"];
	var _xmmsv_list_iter_insert_string = Module["_xmmsv_list_iter_insert_string"] = asm["_xmmsv_list_iter_insert_string"];
	var _xmmsv_list_restrict_type = Module["_xmmsv_list_restrict_type"] = asm["_xmmsv_list_restrict_type"];
	var __internal_put_on_bb_value_list = Module["__internal_put_on_bb_value_list"] = asm["__internal_put_on_bb_value_list"];
	var _xmmsv_coll_attribute_set_value = Module["_xmmsv_coll_attribute_set_value"] = asm["_xmmsv_coll_attribute_set_value"];
	var _errx = Module["_errx"] = asm["_errx"];
	var _xmmsc_playlist_current_active = Module["_xmmsc_playlist_current_active"] = asm["_xmmsc_playlist_current_active"];
	var _xmmsc_coll_rename = Module["_xmmsc_coll_rename"] = asm["_xmmsc_coll_rename"];
	var _xmmsc_playback_playtime = Module["_xmmsc_playback_playtime"] = asm["_xmmsc_playback_playtime"];
	var _posix_memalign = Module["_posix_memalign"] = asm["_posix_memalign"];
	var __internal_get_from_bb_data = Module["__internal_get_from_bb_data"] = asm["__internal_get_from_bb_data"];
	var _iswcntrl = Module["_iswcntrl"] = asm["_iswcntrl"];
	var _strtold_l = Module["_strtold_l"] = asm["_strtold_l"];
	var __xmmsv_dict_remove = Module["__xmmsv_dict_remove"] = asm["__xmmsv_dict_remove"];
	var _setup_shm_prepare = Module["_setup_shm_prepare"] = asm["_setup_shm_prepare"];
	var _xmmsc_io_need_out_callback_set_full = Module["_xmmsc_io_need_out_callback_set_full"] = asm["_xmmsc_io_need_out_callback_set_full"];
	var _xmmsv_list_foreach = Module["_xmmsv_list_foreach"] = asm["_xmmsv_list_foreach"];
	var _tre_set_union = Module["_tre_set_union"] = asm["_tre_set_union"];
	var _coll_parse_posseq = Module["_coll_parse_posseq"] = asm["_coll_parse_posseq"];
	var _xmmsv_list_append_int = Module["_xmmsv_list_append_int"] = asm["_xmmsv_list_append_int"];
	var _toupper_l = Module["_toupper_l"] = asm["_toupper_l"];
	var _xmmsv_is_type = Module["_xmmsv_is_type"] = asm["_xmmsv_is_type"];
	var _xmmsc_medialib_rehash = Module["_xmmsc_medialib_rehash"] = asm["_xmmsc_medialib_rehash"];
	var _x_list_position = Module["_x_list_position"] = asm["_x_list_position"];
	var _xmmsc_log_handler_set = Module["_xmmsc_log_handler_set"] = asm["_xmmsc_log_handler_set"];
	var _xmmsc_coll_find = Module["_xmmsc_coll_find"] = asm["_xmmsc_coll_find"];
	var _strpchrsplit = Module["_strpchrsplit"] = asm["_strpchrsplit"];
	var __internal_put_on_bb_collection = Module["__internal_put_on_bb_collection"] = asm["__internal_put_on_bb_collection"];
	var _wcsncasecmp_l = Module["_wcsncasecmp_l"] = asm["_wcsncasecmp_l"];
	var _xmms_ipc_msg_update_length = Module["_xmms_ipc_msg_update_length"] = asm["_xmms_ipc_msg_update_length"];
	var _iswspace_l = Module["_iswspace_l"] = asm["_iswspace_l"];
	var _coll_token_free = Module["_coll_token_free"] = asm["_coll_token_free"];
	var _xmmsv_build_dict = Module["_xmmsv_build_dict"] = asm["_xmmsv_build_dict"];
	var _isupper_l = Module["_isupper_l"] = asm["_isupper_l"];
	var _xmmsv_list_iter_valid = Module["_xmmsv_list_iter_valid"] = asm["_xmmsv_list_iter_valid"];
	var _wcscmp = Module["_wcscmp"] = asm["_wcscmp"];
	var ___shlim = Module["___shlim"] = asm["___shlim"];
	var _xmms_ipc_usocket_server_init = Module["_xmms_ipc_usocket_server_init"] = asm["_xmms_ipc_usocket_server_init"];
	var _isblank_l = Module["_isblank_l"] = asm["_isblank_l"];
	var __xmmsv_free = Module["__xmmsv_free"] = asm["__xmmsv_free"];
	var _xmmsv_get_coll = Module["_xmmsv_get_coll"] = asm["_xmmsv_get_coll"];
	var _xmmsv_coll_attribute_set_string = Module["_xmmsv_coll_attribute_set_string"] = asm["_xmmsv_coll_attribute_set_string"];
	var _mbtowc = Module["_mbtowc"] = asm["_mbtowc"];
	var _xmmsv_coll_idlist_clear = Module["_xmmsv_coll_idlist_clear"] = asm["_xmmsv_coll_idlist_clear"];
	var _fnmatch = Module["_fnmatch"] = asm["_fnmatch"];
	var _xmmsv_list_set_float = Module["_xmmsv_list_set_float"] = asm["_xmmsv_list_set_float"];
	var _index = Module["_index"] = asm["_index"];
	var _xmmsv_list_insert = Module["_xmmsv_list_insert"] = asm["_xmmsv_list_insert"];
	var _frexpf = Module["_frexpf"] = asm["_frexpf"];
	var _xmmsv_coll_idlist_get_index_int64 = Module["_xmmsv_coll_idlist_get_index_int64"] = asm["_xmmsv_coll_idlist_get_index_int64"];
	var _duplicate_list_value = Module["_duplicate_list_value"] = asm["_duplicate_list_value"];
	var _xmmsc_playback_start = Module["_xmmsc_playback_start"] = asm["_xmmsc_playback_start"];
	var _wctob = Module["_wctob"] = asm["_wctob"];
	var _x_queue_push_head = Module["_x_queue_push_head"] = asm["_x_queue_push_head"];
	var __xmmsv_dict_iter_free = Module["__xmmsv_dict_iter_free"] = asm["__xmmsv_dict_iter_free"];
	var _xmmsv_bitbuffer_rewind = Module["_xmmsv_bitbuffer_rewind"] = asm["_xmmsv_bitbuffer_rewind"];
	var _wcpncpy = Module["_wcpncpy"] = asm["_wcpncpy"];
	var _wcsncat = Module["_wcsncat"] = asm["_wcsncat"];
	var _xmmsc_playlist_rinsert_encoded = Module["_xmmsc_playlist_rinsert_encoded"] = asm["_xmmsc_playlist_rinsert_encoded"];
	var _xmmsv_dict_iter_pair = Module["_xmmsv_dict_iter_pair"] = asm["_xmmsv_dict_iter_pair"];
	var _tgamma = Module["_tgamma"] = asm["_tgamma"];
	var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
	var _xmmsc_medialib_add_entry_encoded = Module["_xmmsc_medialib_add_entry_encoded"] = asm["_xmmsc_medialib_add_entry_encoded"];
	var _coll_parse_idseq = Module["_coll_parse_idseq"] = asm["_coll_parse_idseq"];
	var _xmmsc_log_handle = Module["_xmmsc_log_handle"] = asm["_xmmsc_log_handle"];
	var _coll_parse_parenexpr = Module["_coll_parse_parenexpr"] = asm["_coll_parse_parenexpr"];
	var _wcstok = Module["_wcstok"] = asm["_wcstok"];
	var _strcasecmp_l = Module["_strcasecmp_l"] = asm["_strcasecmp_l"];
	var __xmmsv_list_sort = Module["__xmmsv_list_sort"] = asm["__xmmsv_list_sort"];
	var _xmms_ipc_transport_write = Module["_xmms_ipc_transport_write"] = asm["_xmms_ipc_transport_write"];
	var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
	var _xmmsc_result_run = Module["_xmmsc_result_run"] = asm["_xmmsc_result_run"];
	var _xmmsc_ipc_lock = Module["_xmmsc_ipc_lock"] = asm["_xmmsc_ipc_lock"];
	var _xmms_ipc_msg_get_object = Module["_xmms_ipc_msg_get_object"] = asm["_xmms_ipc_msg_get_object"];
	var _xmmsc_lock_set = Module["_xmmsc_lock_set"] = asm["_xmmsc_lock_set"];
	var _strlcat = Module["_strlcat"] = asm["_strlcat"];
	var _ldexpf = Module["_ldexpf"] = asm["_ldexpf"];
	var _regerror = Module["_regerror"] = asm["_regerror"];
	var _xmmsv_coll_add_order_operators = Module["_xmmsv_coll_add_order_operators"] = asm["_xmmsv_coll_add_order_operators"];
	var _memccpy = Module["_memccpy"] = asm["_memccpy"];
	var _xmmsv_coll_add_order_operator = Module["_xmmsv_coll_add_order_operator"] = asm["_xmmsv_coll_add_order_operator"];
	var _x_list_remove_link = Module["_x_list_remove_link"] = asm["_x_list_remove_link"];
	var _xmmsc_deinit = Module["_xmmsc_deinit"] = asm["_xmmsc_deinit"];
	var _xmms_ipc_msg_get_cookie = Module["_xmms_ipc_msg_get_cookie"] = asm["_xmms_ipc_msg_get_cookie"];
	var _xmmsc_write_msg_to_ipc = Module["_xmmsc_write_msg_to_ipc"] = asm["_xmmsc_write_msg_to_ipc"];
	var _x_list_copy = Module["_x_list_copy"] = asm["_x_list_copy"];
	var _xmmsc_quit = Module["_xmmsc_quit"] = asm["_xmmsc_quit"];
	var _scalbnl = Module["_scalbnl"] = asm["_scalbnl"];
	var _xmmsc_log_default_handler = Module["_xmmsc_log_default_handler"] = asm["_xmmsc_log_default_handler"];
	var _strcspn = Module["_strcspn"] = asm["_strcspn"];
	var _jrand48 = Module["_jrand48"] = asm["_jrand48"];
	var _scalbnf = Module["_scalbnf"] = asm["_scalbnf"];
	var _mblen = Module["_mblen"] = asm["_mblen"];
	var _xmmsc_playlist_shuffle = Module["_xmmsc_playlist_shuffle"] = asm["_xmmsc_playlist_shuffle"];
	var _wait_for_socket = Module["_wait_for_socket"] = asm["_wait_for_socket"];
	var _xmms_ipc_tcp_destroy = Module["_xmms_ipc_tcp_destroy"] = asm["_xmms_ipc_tcp_destroy"];
	var _x_list_concat = Module["_x_list_concat"] = asm["_x_list_concat"];
	var ___rand48_step = Module["___rand48_step"] = asm["___rand48_step"];
	var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
	var _x_list_first = Module["_x_list_first"] = asm["_x_list_first"];
	var _vwarn = Module["_vwarn"] = asm["_vwarn"];
	var _xmmsv_dict_iter_pair_coll = Module["_xmmsv_dict_iter_pair_coll"] = asm["_xmmsv_dict_iter_pair_coll"];
	var __xmmsv_dict_new = Module["__xmmsv_dict_new"] = asm["__xmmsv_dict_new"];
	var _xmmsc_xform_media_browse_encoded = Module["_xmmsc_xform_media_browse_encoded"] = asm["_xmmsc_xform_media_browse_encoded"];
	var _xmmsv_dict_iter_set_coll = Module["_xmmsv_dict_iter_set_coll"] = asm["_xmmsv_dict_iter_set_coll"];
	var __sum_len_string_dict = Module["__sum_len_string_dict"] = asm["__sum_len_string_dict"];
	var ___toread = Module["___toread"] = asm["___toread"];
	var _xmmsc_result_notifier_set_c2c = Module["_xmmsc_result_notifier_set_c2c"] = asm["_xmmsc_result_notifier_set_c2c"];
	var _xmmsc_write_signal_msg = Module["_xmmsc_write_signal_msg"] = asm["_xmmsc_write_signal_msg"];
	var _sort = Module["_sort"] = asm["_sort"];
	var _atol = Module["_atol"] = asm["_atol"];
	var _printf_core = Module["_printf_core"] = asm["_printf_core"];
	var _tre_compare_items = Module["_tre_compare_items"] = asm["_tre_compare_items"];
	var _xmmsv_bitbuffer_put_data = Module["_xmmsv_bitbuffer_put_data"] = asm["_xmmsv_bitbuffer_put_data"];
	var _fputws = Module["_fputws"] = asm["_fputws"];
	var _xmmsc_send_cmd = Module["_xmmsc_send_cmd"] = asm["_xmmsc_send_cmd"];
	var _ilogbl = Module["_ilogbl"] = asm["_ilogbl"];
	var _coll_parse_strval = Module["_coll_parse_strval"] = asm["_coll_parse_strval"];
	var __xmmsv_list_clear = Module["__xmmsv_list_clear"] = asm["__xmmsv_list_clear"];
	var _rindex = Module["_rindex"] = asm["_rindex"];
	var _xmmsc_ipc_connect = Module["_xmmsc_ipc_connect"] = asm["_xmmsc_ipc_connect"];
	var _xmmsv_encode_url = Module["_xmmsv_encode_url"] = asm["_xmmsv_encode_url"];
	var _xmmsv_list_get_type = Module["_xmmsv_list_get_type"] = asm["_xmmsv_list_get_type"];
	var _xmms_ipc_usocket_read = Module["_xmms_ipc_usocket_read"] = asm["_xmms_ipc_usocket_read"];
	var _isalnum = Module["_isalnum"] = asm["_isalnum"];
	var _strlen = Module["_strlen"] = asm["_strlen"];
	var _xmmsc_get_last_error = Module["_xmmsc_get_last_error"] = asm["_xmmsc_get_last_error"];
	var _xmmsc_medialib_add_entry_full = Module["_xmmsc_medialib_add_entry_full"] = asm["_xmmsc_medialib_add_entry_full"];
	var _strrchr = Module["_strrchr"] = asm["_strrchr"];
	var _get_dataset = Module["_get_dataset"] = asm["_get_dataset"];
	var _xmms_strlist_copy = Module["_xmms_strlist_copy"] = asm["_xmms_strlist_copy"];
	var _xmmsv_coll_idlist_get_size = Module["_xmmsv_coll_idlist_get_size"] = asm["_xmmsv_coll_idlist_get_size"];
	var _xmmsv_dict_remove = Module["_xmmsv_dict_remove"] = asm["_xmmsv_dict_remove"];
	var _strverscmp = Module["_strverscmp"] = asm["_strverscmp"];
	var _iswupper = Module["_iswupper"] = asm["_iswupper"];
	var _xmmsc_ipc_wait_for_event = Module["_xmmsc_ipc_wait_for_event"] = asm["_xmmsc_ipc_wait_for_event"];
	var _xmmsv_coll_idlist_set = Module["_xmmsv_coll_idlist_set"] = asm["_xmmsv_coll_idlist_set"];
	var _xmmsv_get_int64 = Module["_xmmsv_get_int64"] = asm["_xmmsv_get_int64"];
	var _xmmsv_list_get_size = Module["_xmmsv_list_get_size"] = asm["_xmmsv_list_get_size"];
	var _xmmsv_bitbuffer_put_bits_at = Module["_xmmsv_bitbuffer_put_bits_at"] = asm["_xmmsv_bitbuffer_put_bits_at"];
	var _xmmsc_result_unref = Module["_xmmsc_result_unref"] = asm["_xmmsc_result_unref"];
	var _strncpy = Module["_strncpy"] = asm["_strncpy"];
	var ___strdup = Module["___strdup"] = asm["___strdup"];
	var _nrand48 = Module["_nrand48"] = asm["_nrand48"];
	var __internal_put_on_bb_int32 = Module["__internal_put_on_bb_int32"] = asm["__internal_put_on_bb_int32"];
	var _wcsdup = Module["_wcsdup"] = asm["_wcsdup"];
	var __xmmsv_list_insert = Module["__xmmsv_list_insert"] = asm["__xmmsv_list_insert"];
	var _xmmsv_bitbuffer_align = Module["_xmmsv_bitbuffer_align"] = asm["_xmmsv_bitbuffer_align"];
	var _xmmsc_result_visc_set = Module["_xmmsc_result_visc_set"] = asm["_xmmsc_result_visc_set"];
	var _malloc_usable_size = Module["_malloc_usable_size"] = asm["_malloc_usable_size"];
	var _xmmsc_playback_seek_samples = Module["_xmmsc_playback_seek_samples"] = asm["_xmmsc_playback_seek_samples"];
	var _y0 = Module["_y0"] = asm["_y0"];
	var __internal_get_from_bb_error_alloc = Module["__internal_get_from_bb_error_alloc"] = asm["__internal_get_from_bb_error_alloc"];
	var _wcstoul = Module["_wcstoul"] = asm["_wcstoul"];
	var _read_do_udp = Module["_read_do_udp"] = asm["_read_do_udp"];
	var _xmmsv_coll_attribute_get_string = Module["_xmmsv_coll_attribute_get_string"] = asm["_xmmsv_coll_attribute_get_string"];
	var __internal_get_from_bb_int32_positive = Module["__internal_get_from_bb_int32_positive"] = asm["__internal_get_from_bb_int32_positive"];
	var _strnlen = Module["_strnlen"] = asm["_strnlen"];
	var _bsearch = Module["_bsearch"] = asm["_bsearch"];
	var _xmmsc_config_list_values = Module["_xmmsc_config_list_values"] = asm["_xmmsc_config_list_values"];
	var _isascii = Module["_isascii"] = asm["_isascii"];
	var _xmmsv_list_iter_entry_float = Module["_xmmsv_list_iter_entry_float"] = asm["_xmmsv_list_iter_entry_float"];
	var _xmmsc_visualization_property_set = Module["_xmmsc_visualization_property_set"] = asm["_xmmsc_visualization_property_set"];
	var _towupper = Module["_towupper"] = asm["_towupper"];
	var _xmmsv_list_iter_set = Module["_xmmsv_list_iter_set"] = asm["_xmmsv_list_iter_set"];
	var _xmmsc_userconfdir_get = Module["_xmmsc_userconfdir_get"] = asm["_xmmsc_userconfdir_get"];
	var _xmmsc_connect = Module["_xmmsc_connect"] = asm["_xmmsc_connect"];
	var _xmmsv_dict_get = Module["_xmmsv_dict_get"] = asm["_xmmsv_dict_get"];
	var _xmmsc_ipc_disconnected = Module["_xmmsc_ipc_disconnected"] = asm["_xmmsc_ipc_disconnected"];
	var _xmmsv_dict_clear = Module["_xmmsv_dict_clear"] = asm["_xmmsv_dict_clear"];
	var _coll_parse_orop_append = Module["_coll_parse_orop_append"] = asm["_coll_parse_orop_append"];
	var _xmmsc_xform_media_browse = Module["_xmmsc_xform_media_browse"] = asm["_xmmsc_xform_media_browse"];
	var ___shgetc = Module["___shgetc"] = asm["___shgetc"];
	var _xmmsv_dict_iter_first = Module["_xmmsv_dict_iter_first"] = asm["_xmmsv_dict_iter_first"];
	var _xmmsv_list_iter_seek = Module["_xmmsv_list_iter_seek"] = asm["_xmmsv_list_iter_seek"];
	var _tolower = Module["_tolower"] = asm["_tolower"];
	var _islower = Module["_islower"] = asm["_islower"];
	var _wcpcpy = Module["_wcpcpy"] = asm["_wcpcpy"];
	var _frexp = Module["_frexp"] = asm["_frexp"];
	var _memalign = Module["_memalign"] = asm["_memalign"];
	var _xmmsv_list_iter_insert_float = Module["_xmmsv_list_iter_insert_float"] = asm["_xmmsv_list_iter_insert_float"];
	var _xmms_strlist_len = Module["_xmms_strlist_len"] = asm["_xmms_strlist_len"];
	var _duplicate_coll_value = Module["_duplicate_coll_value"] = asm["_duplicate_coll_value"];
	var _x_queue_is_empty = Module["_x_queue_is_empty"] = asm["_x_queue_is_empty"];
	var _xmmsc_ipc_disconnect = Module["_xmmsc_ipc_disconnect"] = asm["_xmmsc_ipc_disconnect"];
	var _xmmsc_ipc_unlock = Module["_xmmsc_ipc_unlock"] = asm["_xmmsc_ipc_unlock"];
	var ___strchrnul = Module["___strchrnul"] = asm["___strchrnul"];
	var _xmmsc_broadcast_medialib_entry_removed = Module["_xmmsc_broadcast_medialib_entry_removed"] = asm["_xmmsc_broadcast_medialib_entry_removed"];
	var _iswlower_l = Module["_iswlower_l"] = asm["_iswlower_l"];
	var _xmmsc_medialib_entry_property_set_str = Module["_xmmsc_medialib_entry_property_set_str"] = asm["_xmmsc_medialib_entry_property_set_str"];
	var _xmmsv_propdict_to_dict = Module["_xmmsv_propdict_to_dict"] = asm["_xmmsv_propdict_to_dict"];
	var _xmmsv_dict_iter_next = Module["_xmmsv_dict_iter_next"] = asm["_xmmsv_dict_iter_next"];
	var _xmmsc_io_out_handle = Module["_xmmsc_io_out_handle"] = asm["_xmmsc_io_out_handle"];
	var _strpbrk = Module["_strpbrk"] = asm["_strpbrk"];
	var _xmmsc_medialib_move_entry = Module["_xmmsc_medialib_move_entry"] = asm["_xmmsc_medialib_move_entry"];
	var _tre_add_tag_left = Module["_tre_add_tag_left"] = asm["_tre_add_tag_left"];
	var ___string_read = Module["___string_read"] = asm["___string_read"];
	var _wcstof = Module["_wcstof"] = asm["_wcstof"];
	var _wcstod = Module["_wcstod"] = asm["_wcstod"];
	var _xmmsv_coll_default_parse_tokens = Module["_xmmsv_coll_default_parse_tokens"] = asm["_xmmsv_coll_default_parse_tokens"];
	var _xmmsv_list_append_float = Module["_xmmsv_list_append_float"] = asm["_xmmsv_list_append_float"];
	var _xmms_ipc_msg_alloc = Module["_xmms_ipc_msg_alloc"] = asm["_xmms_ipc_msg_alloc"];
	var _xmmsv_list_iter_get_parent = Module["_xmmsv_list_iter_get_parent"] = asm["_xmmsv_list_iter_get_parent"];
	var _xmmsc_ipc_error_set = Module["_xmmsc_ipc_error_set"] = asm["_xmmsc_ipc_error_set"];
	var _wcstoull = Module["_wcstoull"] = asm["_wcstoull"];
	var _xmmsc_send_msg = Module["_xmmsc_send_msg"] = asm["_xmmsc_send_msg"];
	var _j1f = Module["_j1f"] = asm["_j1f"];
	var _udp_timediff = Module["_udp_timediff"] = asm["_udp_timediff"];
	var _xmmsc_coll_get = Module["_xmmsc_coll_get"] = asm["_xmmsc_coll_get"];
	var _x_list_delete_link = Module["_x_list_delete_link"] = asm["_x_list_delete_link"];
	var __internal_put_on_bb_value_dict = Module["__internal_put_on_bb_value_dict"] = asm["__internal_put_on_bb_value_dict"];
	var _xmmsc_playlist_add_collection = Module["_xmmsc_playlist_add_collection"] = asm["_xmmsc_playlist_add_collection"];
	var _coll_parse_andop_append = Module["_coll_parse_andop_append"] = asm["_coll_parse_andop_append"];
	var _xmmsc_ipc_result_lookup = Module["_xmmsc_ipc_result_lookup"] = asm["_xmmsc_ipc_result_lookup"];
	var _strlwr = Module["_strlwr"] = asm["_strlwr"];
	var _wctype_l = Module["_wctype_l"] = asm["_wctype_l"];
	var ___xmmsv_identity_xmmsv424 = Module["___xmmsv_identity_xmmsv424"] = asm["___xmmsv_identity_xmmsv424"];
	var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
	var _srand = Module["_srand"] = asm["_srand"];
	var _strchr = Module["_strchr"] = asm["_strchr"];
	var _x_list_remove = Module["_x_list_remove"] = asm["_x_list_remove"];
	var _towlower = Module["_towlower"] = asm["_towlower"];
	var _tolower_l = Module["_tolower_l"] = asm["_tolower_l"];
	var ___lgamma_r = Module["___lgamma_r"] = asm["___lgamma_r"];
	var _xmmsv_dict_has_key = Module["_xmmsv_dict_has_key"] = asm["_xmmsv_dict_has_key"];
	var _isspace = Module["_isspace"] = asm["_isspace"];
	var _x_list_insert_sorted = Module["_x_list_insert_sorted"] = asm["_x_list_insert_sorted"];
	var _xmmsc_medialib_entry_property_set_str_with_source = Module["_xmmsc_medialib_entry_property_set_str_with_source"] = asm["_xmmsc_medialib_entry_property_set_str_with_source"];
	var _x_queue_pop_head = Module["_x_queue_pop_head"] = asm["_x_queue_pop_head"];
	var _xmmsc_visualization_shutdown = Module["_xmmsc_visualization_shutdown"] = asm["_xmmsc_visualization_shutdown"];
	var _wcswidth = Module["_wcswidth"] = asm["_wcswidth"];
	var _x_queue_push_tail = Module["_x_queue_push_tail"] = asm["_x_queue_push_tail"];
	var _xmmsv_new_string = Module["_xmmsv_new_string"] = asm["_xmmsv_new_string"];
	var _coll_parse_reference = Module["_coll_parse_reference"] = asm["_coll_parse_reference"];
	var _glob = Module["_glob"] = asm["_glob"];
	var _xmms_ipc_transport_fd_get = Module["_xmms_ipc_transport_fd_get"] = asm["_xmms_ipc_transport_fd_get"];
	var _xmmsv_list_insert_float = Module["_xmmsv_list_insert_float"] = asm["_xmmsv_list_insert_float"];
	var _fputwc = Module["_fputwc"] = asm["_fputwc"];
	var _xmmsc_broadcast_playback_volume_changed = Module["_xmmsc_broadcast_playback_volume_changed"] = asm["_xmmsc_broadcast_playback_volume_changed"];
	var _xmmsc_config_get_value = Module["_xmmsc_config_get_value"] = asm["_xmmsc_config_get_value"];
	var _xmmsv_dict_foreach = Module["_xmmsv_dict_foreach"] = asm["_xmmsv_dict_foreach"];
	var _strtoimax = Module["_strtoimax"] = asm["_strtoimax"];
	var _xmmsv_decode_url = Module["_xmmsv_decode_url"] = asm["_xmmsv_decode_url"];
	var _xmmsc_playback_volume_get = Module["_xmmsc_playback_volume_get"] = asm["_xmmsc_playback_volume_get"];
	var _xmmsc_playlist_add_encoded = Module["_xmmsc_playlist_add_encoded"] = asm["_xmmsc_playlist_add_encoded"];
	var _xmmsc_playlist_add_id = Module["_xmmsc_playlist_add_id"] = asm["_xmmsc_playlist_add_id"];
	var _wcsrchr = Module["_wcsrchr"] = asm["_wcsrchr"];
	var _iswdigit_l = Module["_iswdigit_l"] = asm["_iswdigit_l"];
	var _xmmsv_dict_set_float = Module["_xmmsv_dict_set_float"] = asm["_xmmsv_dict_set_float"];
	var _xmmsc_main_stats = Module["_xmmsc_main_stats"] = asm["_xmmsc_main_stats"];
	var _xmmsv_coll_attributes_get = Module["_xmmsv_coll_attributes_get"] = asm["_xmmsv_coll_attributes_get"];
	var ___xmmsv_identity_xmmsv396 = Module["___xmmsv_identity_xmmsv396"] = asm["___xmmsv_identity_xmmsv396"];
	var _do_read136 = Module["_do_read136"] = asm["_do_read136"];
	var _xmmsc_config_set_value = Module["_xmmsc_config_set_value"] = asm["_xmmsc_config_set_value"];
	var _xmmsc_coll_save = Module["_xmmsc_coll_save"] = asm["_xmmsc_coll_save"];
	var _xmmsc_emscripten_result_cb = Module["_xmmsc_emscripten_result_cb"] = asm["_xmmsc_emscripten_result_cb"];
	var _xmmsc_send_broadcast_msg = Module["_xmmsc_send_broadcast_msg"] = asm["_xmmsc_send_broadcast_msg"];
	var _xmmsv_coll_copy = Module["_xmmsv_coll_copy"] = asm["_xmmsv_coll_copy"];
	var _xmmsc_playlist_replace = Module["_xmmsc_playlist_replace"] = asm["_xmmsc_playlist_replace"];
	var _xmms_ipc_msg_get_cmd = Module["_xmms_ipc_msg_get_cmd"] = asm["_xmms_ipc_msg_get_cmd"];
	var _coll_parse_unaryop = Module["_coll_parse_unaryop"] = asm["_coll_parse_unaryop"];
	var _strfmon_l = Module["_strfmon_l"] = asm["_strfmon_l"];
	var _xmmsv_list_iter_entry_string = Module["_xmmsv_list_iter_entry_string"] = asm["_xmmsv_list_iter_entry_string"];
	var ___xmmsv_null_to_none351 = Module["___xmmsv_null_to_none351"] = asm["___xmmsv_null_to_none351"];
	var _xmmsv_bitbuffer_goto = Module["_xmmsv_bitbuffer_goto"] = asm["_xmmsv_bitbuffer_goto"];
	var _wctype = Module["_wctype"] = asm["_wctype"];
	var _xmmsc_ipc_fd_get = Module["_xmmsc_ipc_fd_get"] = asm["_xmmsc_ipc_fd_get"];
	var _xmmsv_dict_iter_set_float = Module["_xmmsv_dict_iter_set_float"] = asm["_xmmsv_dict_iter_set_float"];
	var ___xmmsv_null_to_none357 = Module["___xmmsv_null_to_none357"] = asm["___xmmsv_null_to_none357"];
	var _xmmsc_visualization_chunk_get = Module["_xmmsc_visualization_chunk_get"] = asm["_xmmsc_visualization_chunk_get"];
	var _xmmsc_medialib_encode_url = Module["_xmmsc_medialib_encode_url"] = asm["_xmmsc_medialib_encode_url"];
	var _xmmsv_utf8_validate = Module["_xmmsv_utf8_validate"] = asm["_xmmsv_utf8_validate"];
	var _logbf = Module["_logbf"] = asm["_logbf"];
	var _xmmsc_ipc_disconnect_set = Module["_xmmsc_ipc_disconnect_set"] = asm["_xmmsc_ipc_disconnect_set"];
	var _seed48 = Module["_seed48"] = asm["_seed48"];
	var _logbl = Module["_logbl"] = asm["_logbl"];
	var _xmmsc_playback_volume_set = Module["_xmmsc_playback_volume_set"] = asm["_xmmsc_playback_volume_set"];
	var _wcscasecmp_l = Module["_wcscasecmp_l"] = asm["_wcscasecmp_l"];
	var __xmmsv_list_move = Module["__xmmsv_list_move"] = asm["__xmmsv_list_move"];
	var __xmmsv_dict_iter_new = Module["__xmmsv_dict_iter_new"] = asm["__xmmsv_dict_iter_new"];
	var _xmms_ipc_msg_set_cmd = Module["_xmms_ipc_msg_set_cmd"] = asm["_xmms_ipc_msg_set_cmd"];
	var _cleanup_udp = Module["_cleanup_udp"] = asm["_cleanup_udp"];
	var _xmmsv_dict_get_size = Module["_xmmsv_dict_get_size"] = asm["_xmmsv_dict_get_size"];
	var ___xmmsv_identity_xmmsv453 = Module["___xmmsv_identity_xmmsv453"] = asm["___xmmsv_identity_xmmsv453"];
	var _xmmsv_new_dict = Module["_xmmsv_new_dict"] = asm["_xmmsv_new_dict"];
	var _mallopt = Module["_mallopt"] = asm["_mallopt"];
	var _isxdigit = Module["_isxdigit"] = asm["_isxdigit"];
	var _iswcntrl_l = Module["_iswcntrl_l"] = asm["_iswcntrl_l"];
	var _wcstol = Module["_wcstol"] = asm["_wcstol"];
	var _xmmsv_bitbuffer_get_data = Module["_xmmsv_bitbuffer_get_data"] = asm["_xmmsv_bitbuffer_get_data"];
	var _xmmsc_playlist_add_full = Module["_xmmsc_playlist_add_full"] = asm["_xmmsc_playlist_add_full"];
	var _xmms_ipc_server_init = Module["_xmms_ipc_server_init"] = asm["_xmms_ipc_server_init"];
	var _iconv_open = Module["_iconv_open"] = asm["_iconv_open"];
	var _initstate = Module["_initstate"] = asm["_initstate"];
	var __xmmsv_coll_operand_find = Module["__xmmsv_coll_operand_find"] = asm["__xmmsv_coll_operand_find"];
	var _xmms_ipc_hostname = Module["_xmms_ipc_hostname"] = asm["_xmms_ipc_hostname"];
	var _x_queue_new = Module["_x_queue_new"] = asm["_x_queue_new"];
	var _fnmatch_internal = Module["_fnmatch_internal"] = asm["_fnmatch_internal"];
	var _memmem = Module["_memmem"] = asm["_memmem"];
	var _xmms_ipc_tcp_write = Module["_xmms_ipc_tcp_write"] = asm["_xmms_ipc_tcp_write"];
	var _xmmsv_bitbuffer_deserialize_value = Module["_xmmsv_bitbuffer_deserialize_value"] = asm["_xmmsv_bitbuffer_deserialize_value"];
	var _find_charmap = Module["_find_charmap"] = asm["_find_charmap"];
	var _wctrans = Module["_wctrans"] = asm["_wctrans"];
	var _xmmsv_coll_set_idlist = Module["_xmmsv_coll_set_idlist"] = asm["_xmmsv_coll_set_idlist"];
	var _strtod = Module["_strtod"] = asm["_strtod"];
	var _xmmsv_make_stringlist = Module["_xmmsv_make_stringlist"] = asm["_xmmsv_make_stringlist"];
	var _xmmsc_visualization_started = Module["_xmmsc_visualization_started"] = asm["_xmmsc_visualization_started"];
	var _towupper_l = Module["_towupper_l"] = asm["_towupper_l"];
	var _xmms_strlist_destroy = Module["_xmms_strlist_destroy"] = asm["_xmms_strlist_destroy"];
	var _vfwprintf = Module["_vfwprintf"] = asm["_vfwprintf"];
	var _valloc = Module["_valloc"] = asm["_valloc"];
	var _xmmsv_list_iter_last = Module["_xmmsv_list_iter_last"] = asm["_xmmsv_list_iter_last"];
	var ___xmmsv_null_to_none438 = Module["___xmmsv_null_to_none438"] = asm["___xmmsv_null_to_none438"];
	var _xmmsv_new_bitbuffer = Module["_xmmsv_new_bitbuffer"] = asm["_xmmsv_new_bitbuffer"];
	var _xmmsv_bitbuffer_len = Module["_xmmsv_bitbuffer_len"] = asm["_xmmsv_bitbuffer_len"];
	var ___tre_mem_alloc_impl = Module["___tre_mem_alloc_impl"] = asm["___tre_mem_alloc_impl"];
	var _wcstoimax = Module["_wcstoimax"] = asm["_wcstoimax"];
	var _xmmsv_coll_attribute_get = Module["_xmmsv_coll_attribute_get"] = asm["_xmmsv_coll_attribute_get"];
	var _gcvt = Module["_gcvt"] = asm["_gcvt"];
	var _memcmp = Module["_memcmp"] = asm["_memcmp"];
	var _xmmsc_playlist_list_entries = Module["_xmmsc_playlist_list_entries"] = asm["_xmmsc_playlist_list_entries"];
	var _xmmsv_coll_attribute_get_value = Module["_xmmsv_coll_attribute_get_value"] = asm["_xmmsv_coll_attribute_get_value"];
	var _xmms_socket_errno = Module["_xmms_socket_errno"] = asm["_xmms_socket_errno"];
	var _strncat = Module["_strncat"] = asm["_strncat"];
	var _package_read_do = Module["_package_read_do"] = asm["_package_read_do"];
	var __xmmsv_list_iter_new = Module["__xmmsv_list_iter_new"] = asm["__xmmsv_list_iter_new"];
	var _xmmsc_medialib_get_id = Module["_xmmsc_medialib_get_id"] = asm["_xmmsc_medialib_get_id"];
	var ___xmmsv_identity_xmmsv378 = Module["___xmmsv_identity_xmmsv378"] = asm["___xmmsv_identity_xmmsv378"];
	var _xmmsv_get_error = Module["_xmmsv_get_error"] = asm["_xmmsv_get_error"];
	var _setstate = Module["_setstate"] = asm["_setstate"];
	var _x_list_remove_all = Module["_x_list_remove_all"] = asm["_x_list_remove_all"];
	var _fwprintf = Module["_fwprintf"] = asm["_fwprintf"];
	var _xmmsc_medialib_path_import = Module["_xmmsc_medialib_path_import"] = asm["_xmmsc_medialib_path_import"];
	var ___xmmsv_identity_xmmsv372 = Module["___xmmsv_identity_xmmsv372"] = asm["___xmmsv_identity_xmmsv372"];
	var _xmmsc_result_callback_new_c2c = Module["_xmmsc_result_callback_new_c2c"] = asm["_xmmsc_result_callback_new_c2c"];
	var _scanexp = Module["_scanexp"] = asm["_scanexp"];
	var _xmmsc_broadcast_medialib_entry_changed = Module["_xmmsc_broadcast_medialib_entry_changed"] = asm["_xmmsc_broadcast_medialib_entry_changed"];
	var __xmmsv_new = Module["__xmmsv_new"] = asm["__xmmsv_new"];
	var _xmmsv_ref = Module["_xmmsv_ref"] = asm["_xmmsv_ref"];
	var _xmms_socket_close = Module["_xmms_socket_close"] = asm["_xmms_socket_close"];
	var _wcsnrtombs = Module["_wcsnrtombs"] = asm["_wcsnrtombs"];
	var __internal_get_from_bb_string_alloc = Module["__internal_get_from_bb_string_alloc"] = asm["__internal_get_from_bb_string_alloc"];
	var _xmms_ipc_msg_put_value = Module["_xmms_ipc_msg_put_value"] = asm["_xmms_ipc_msg_put_value"];
	var ___memrchr = Module["___memrchr"] = asm["___memrchr"];
	var __xmmsv_dict_hash = Module["__xmmsv_dict_hash"] = asm["__xmmsv_dict_hash"];
	var _isspace_l = Module["_isspace_l"] = asm["_isspace_l"];
	var _xmmsc_playlist_radd_encoded = Module["_xmmsc_playlist_radd_encoded"] = asm["_xmmsc_playlist_radd_encoded"];
	var _xmmsv_coll_idlist_set_index = Module["_xmmsv_coll_idlist_set_index"] = asm["_xmmsv_coll_idlist_set_index"];
	var _i64Add = Module["_i64Add"] = asm["_i64Add"];
	var _xmms_socket_error_recoverable = Module["_xmms_socket_error_recoverable"] = asm["_xmms_socket_error_recoverable"];
	var _MUSL_vfscanf = Module["_MUSL_vfscanf"] = asm["_MUSL_vfscanf"];
	var _towctrans = Module["_towctrans"] = asm["_towctrans"];
	var _strsignal = Module["_strsignal"] = asm["_strsignal"];
	var _xmmsv_bitbuffer_get_bits = Module["_xmmsv_bitbuffer_get_bits"] = asm["_xmmsv_bitbuffer_get_bits"];
	var _wcsxfrm = Module["_wcsxfrm"] = asm["_wcsxfrm"];
	var _ldexpl = Module["_ldexpl"] = asm["_ldexpl"];
	var _tgammal = Module["_tgammal"] = asm["_tgammal"];
	var _tre_ast_to_tnfa = Module["_tre_ast_to_tnfa"] = asm["_tre_ast_to_tnfa"];
	var _xmmsv_dict_entry_get_coll = Module["_xmmsv_dict_entry_get_coll"] = asm["_xmmsv_dict_entry_get_coll"];
	var _x_list_find_custom = Module["_x_list_find_custom"] = asm["_x_list_find_custom"];
	var _towlower_l = Module["_towlower_l"] = asm["_towlower_l"];
	var _tgammaf = Module["_tgammaf"] = asm["_tgammaf"];
	var _xmmsc_coll_query_infos = Module["_xmmsc_coll_query_infos"] = asm["_xmmsc_coll_query_infos"];
	var _common56 = Module["_common56"] = asm["_common56"];
	var _common57 = Module["_common57"] = asm["_common57"];
	var _warn = Module["_warn"] = asm["_warn"];
	var _xmms_ipc_server_accept = Module["_xmms_ipc_server_accept"] = asm["_xmms_ipc_server_accept"];
	var _xmms_userconfdir_get = Module["_xmms_userconfdir_get"] = asm["_xmms_userconfdir_get"];
	var _xmmsc_io_in_handle = Module["_xmmsc_io_in_handle"] = asm["_xmmsc_io_in_handle"];
	var _xmmsv_coll_new = Module["_xmmsv_coll_new"] = asm["_xmmsv_coll_new"];
	var _xmmsc_result_notifier_remove = Module["_xmmsc_result_notifier_remove"] = asm["_xmmsc_result_notifier_remove"];
	var _match_in_dir = Module["_match_in_dir"] = asm["_match_in_dir"];
	var _setup_socket = Module["_setup_socket"] = asm["_setup_socket"];
	var _xmmsc_init = Module["_xmmsc_init"] = asm["_xmmsc_init"];
	var __xmmsv_list_resize = Module["__xmmsv_list_resize"] = asm["__xmmsv_list_resize"];
	var _xmmsc_log_va = Module["_xmmsc_log_va"] = asm["_xmmsc_log_va"];
	var _xmmsv_coll_remove_operand = Module["_xmmsv_coll_remove_operand"] = asm["_xmmsv_coll_remove_operand"];
	var _xmmsc_bindata_add = Module["_xmmsc_bindata_add"] = asm["_xmmsc_bindata_add"];
	var __xmmsv_list_remove = Module["__xmmsv_list_remove"] = asm["__xmmsv_list_remove"];
	var _xmmsv_dict_entry_get_type = Module["_xmmsv_dict_entry_get_type"] = asm["_xmmsv_dict_entry_get_type"];
	var _j0 = Module["_j0"] = asm["_j0"];
	var _xmmsc_result_clear_weakrefs = Module["_xmmsc_result_clear_weakrefs"] = asm["_xmmsc_result_clear_weakrefs"];
	var ___sindf = Module["___sindf"] = asm["___sindf"];
	var _xmmsc_coll_remove = Module["_xmmsc_coll_remove"] = asm["_xmmsc_coll_remove"];
	var _ts2net = Module["_ts2net"] = asm["_ts2net"];
	var _xmmsv_coll_attribute_get_int64 = Module["_xmmsv_coll_attribute_get_int64"] = asm["_xmmsv_coll_attribute_get_int64"];
	var _xmmsc_visualization_start_handle = Module["_xmmsc_visualization_start_handle"] = asm["_xmmsc_visualization_start_handle"];
	var _pvalloc = Module["_pvalloc"] = asm["_pvalloc"];
	var _xmmsc_result_restartable = Module["_xmmsc_result_restartable"] = asm["_xmmsc_result_restartable"];
	var _xmms_vargs_to_strlist = Module["_xmms_vargs_to_strlist"] = asm["_xmms_vargs_to_strlist"];
	var _xmmsc_result_notifier_delete_all = Module["_xmmsc_result_notifier_delete_all"] = asm["_xmmsc_result_notifier_delete_all"];
	var _xmmsc_coll_query_ids = Module["_xmmsc_coll_query_ids"] = asm["_xmmsc_coll_query_ids"];
	var _xmmsv_is_error = Module["_xmmsv_is_error"] = asm["_xmmsv_is_error"];
	var _xmmsv_coll_attribute_set = Module["_xmmsv_coll_attribute_set"] = asm["_xmmsv_coll_attribute_set"];
	var _strtof_l = Module["_strtof_l"] = asm["_strtof_l"];
	var _xmmsv_build_dict_va = Module["_xmmsv_build_dict_va"] = asm["_xmmsv_build_dict_va"];
	var _xmmsv_list_iter_explicit_destroy = Module["_xmmsv_list_iter_explicit_destroy"] = asm["_xmmsv_list_iter_explicit_destroy"];
	var _wctrans_l = Module["_wctrans_l"] = asm["_wctrans_l"];
	var _mbsinit = Module["_mbsinit"] = asm["_mbsinit"];
	var _parse_url = Module["_parse_url"] = asm["_parse_url"];
	var _xmmsc_ipc_io_out_callback = Module["_xmmsc_ipc_io_out_callback"] = asm["_xmmsc_ipc_io_out_callback"];
	var _xmmsc_playback_stop = Module["_xmmsc_playback_stop"] = asm["_xmmsc_playback_stop"];
	var _memcpy = Module["_memcpy"] = asm["_memcpy"];
	var _string_substr = Module["_string_substr"] = asm["_string_substr"];
	var _xmmsv_encode_url_full = Module["_xmmsv_encode_url_full"] = asm["_xmmsv_encode_url_full"];
	var _iswspace = Module["_iswspace"] = asm["_iswspace"];
	var _duplicate_dict_value = Module["_duplicate_dict_value"] = asm["_duplicate_dict_value"];
	var _iswalpha = Module["_iswalpha"] = asm["_iswalpha"];
	var _iswblank_l = Module["_iswblank_l"] = asm["_iswblank_l"];
	var _x_list_free = Module["_x_list_free"] = asm["_x_list_free"];
	var _xmms_ipc_msg_get_value = Module["_xmms_ipc_msg_get_value"] = asm["_xmms_ipc_msg_get_value"];
	var _xmmsv_coll_add_operand = Module["_xmmsv_coll_add_operand"] = asm["_xmmsv_coll_add_operand"];
	var _xmmsc_mainloop_emscripten_init = Module["_xmmsc_mainloop_emscripten_init"] = asm["_xmmsc_mainloop_emscripten_init"];
	var _sn_write = Module["_sn_write"] = asm["_sn_write"];
	var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
	var _xmmsv_bitbuffer_put_bits = Module["_xmmsv_bitbuffer_put_bits"] = asm["_xmmsv_bitbuffer_put_bits"];
	var _malloc_set_footprint_limit = Module["_malloc_set_footprint_limit"] = asm["_malloc_set_footprint_limit"];
	var _xmmsv_dict_format = Module["_xmmsv_dict_format"] = asm["_xmmsv_dict_format"];
	var _xmmsv_new_list = Module["_xmmsv_new_list"] = asm["_xmmsv_new_list"];
	var _xmmsc_result_visc_get = Module["_xmmsc_result_visc_get"] = asm["_xmmsc_result_visc_get"];
	var __internal_put_on_bb_float = Module["__internal_put_on_bb_float"] = asm["__internal_put_on_bb_float"];
	var _xmms_ipc_usocket_client_init = Module["_xmms_ipc_usocket_client_init"] = asm["_xmms_ipc_usocket_client_init"];
	var _j0f = Module["_j0f"] = asm["_j0f"];
	var _xmms_strlist_prepend_copy = Module["_xmms_strlist_prepend_copy"] = asm["_xmms_strlist_prepend_copy"];
	var _islower_l = Module["_islower_l"] = asm["_islower_l"];
	var _xmmsv_dict_iter_set_int = Module["_xmmsv_dict_iter_set_int"] = asm["_xmmsv_dict_iter_set_int"];
	var _wcstold = Module["_wcstold"] = asm["_wcstold"];
	var _x_list_length = Module["_x_list_length"] = asm["_x_list_length"];
	var __xmmsv_list_iter_free = Module["__xmmsv_list_iter_free"] = asm["__xmmsv_list_iter_free"];
	var _wcstoll = Module["_wcstoll"] = asm["_wcstoll"];
	var _xmms_socket_invalidate = Module["_xmms_socket_invalidate"] = asm["_xmms_socket_invalidate"];
	var __xmmsc_medialib_encode_url_old = Module["__xmmsc_medialib_encode_url_old"] = asm["__xmmsc_medialib_encode_url_old"];
	var _xmmsv_get_list_iter = Module["_xmmsv_get_list_iter"] = asm["_xmmsv_get_list_iter"];
	var _xmmsv_dict_iter_pair_string = Module["_xmmsv_dict_iter_pair_string"] = asm["_xmmsv_dict_iter_pair_string"];
	var _xmmsv_coll_attribute_set_int = Module["_xmmsv_coll_attribute_set_int"] = asm["_xmmsv_coll_attribute_set_int"];
	var _srand48 = Module["_srand48"] = asm["_srand48"];
	var _iswalpha_l = Module["_iswalpha_l"] = asm["_iswalpha_l"];
	var _xmms_fallback_ipcpath_get = Module["_xmms_fallback_ipcpath_get"] = asm["_xmms_fallback_ipcpath_get"];
	var __internal_put_on_bb_string = Module["__internal_put_on_bb_string"] = asm["__internal_put_on_bb_string"];
	var _xmmsc_result_notifier_delete = Module["_xmmsc_result_notifier_delete"] = asm["_xmmsc_result_notifier_delete"];
	var __internal_get_from_bb_value_of_type_alloc = Module["__internal_get_from_bb_value_of_type_alloc"] = asm["__internal_get_from_bb_value_of_type_alloc"];
	var _xmmsv_list_move = Module["_xmmsv_list_move"] = asm["_xmmsv_list_move"];
	var _xmmsc_broadcast_playlist_current_pos = Module["_xmmsc_broadcast_playlist_current_pos"] = asm["_xmmsc_broadcast_playlist_current_pos"];
	var _xmmsc_result_get_value = Module["_xmmsc_result_get_value"] = asm["_xmmsc_result_get_value"];
	var _frexpl = Module["_frexpl"] = asm["_frexpl"];
	var _xmmsv_get_bitbuffer = Module["_xmmsv_get_bitbuffer"] = asm["_xmmsv_get_bitbuffer"];
	var _xmmsv_list_iter_prev = Module["_xmmsv_list_iter_prev"] = asm["_xmmsv_list_iter_prev"];
	var _xmmsc_io_want_out = Module["_xmmsc_io_want_out"] = asm["_xmmsc_io_want_out"];
	var _xmms_ipc_tcp_client_init = Module["_xmms_ipc_tcp_client_init"] = asm["_xmms_ipc_tcp_client_init"];
	var _wcsrtombs = Module["_wcsrtombs"] = asm["_wcsrtombs"];
	var _wprintf = Module["_wprintf"] = asm["_wprintf"];
	var _wcscspn = Module["_wcscspn"] = asm["_wcscspn"];
	var _xmms_ipc_msg_destroy = Module["_xmms_ipc_msg_destroy"] = asm["_xmms_ipc_msg_destroy"];
	var _iswupper_l = Module["_iswupper_l"] = asm["_iswupper_l"];
	var _isxdigit_l = Module["_isxdigit_l"] = asm["_isxdigit_l"];
	var _x_list_free_1 = Module["_x_list_free_1"] = asm["_x_list_free_1"];
	var _strrchrsplit = Module["_strrchrsplit"] = asm["_strrchrsplit"];
	var _coll_next_token = Module["_coll_next_token"] = asm["_coll_next_token"];
	var _strtol = Module["_strtol"] = asm["_strtol"];
	var _xdg_dir_get = Module["_xdg_dir_get"] = asm["_xdg_dir_get"];
	var _xmms_usercachedir_get = Module["_xmms_usercachedir_get"] = asm["_xmms_usercachedir_get"];
	var _strtok = Module["_strtok"] = asm["_strtok"];
	var _xmmsv_list_get_int64 = Module["_xmmsv_list_get_int64"] = asm["_xmmsv_list_get_int64"];
	var _xmmsv_list_insert_int = Module["_xmmsv_list_insert_int"] = asm["_xmmsv_list_insert_int"];
	var _strcasecmp = Module["_strcasecmp"] = asm["_strcasecmp"];
	var _xmmsv_coll_universe = Module["_xmmsv_coll_universe"] = asm["_xmmsv_coll_universe"];
	var _iconv = Module["_iconv"] = asm["_iconv"];
	var _isalpha = Module["_isalpha"] = asm["_isalpha"];
	var _iswctype = Module["_iswctype"] = asm["_iswctype"];
	var _xmmsc_result_cookie_get = Module["_xmmsc_result_cookie_get"] = asm["_xmmsc_result_cookie_get"];
	var _xmmsv_list_append = Module["_xmmsv_list_append"] = asm["_xmmsv_list_append"];
	var _xmmsc_playback_current_id = Module["_xmmsc_playback_current_id"] = asm["_xmmsc_playback_current_id"];
	var _xmmsc_ipc_error_get = Module["_xmmsc_ipc_error_get"] = asm["_xmmsc_ipc_error_get"];
	var _qsort = Module["_qsort"] = asm["_qsort"];
	var _atoi = Module["_atoi"] = asm["_atoi"];
	var _xmmsv_build_cluster_list = Module["_xmmsv_build_cluster_list"] = asm["_xmmsv_build_cluster_list"];
	var _wmemchr = Module["_wmemchr"] = asm["_wmemchr"];
	var _xmmsv_coll_idlist_remove = Module["_xmmsv_coll_idlist_remove"] = asm["_xmmsv_coll_idlist_remove"];
	var _xmmsc_playlist_insert_full = Module["_xmmsc_playlist_insert_full"] = asm["_xmmsc_playlist_insert_full"];
	var _xmmsc_playlist_set_next_rel = Module["_xmmsc_playlist_set_next_rel"] = asm["_xmmsc_playlist_set_next_rel"];
	var _wcsncpy = Module["_wcsncpy"] = asm["_wcsncpy"];
	var _xmmsv_list_iter_insert_int = Module["_xmmsv_list_iter_insert_int"] = asm["_xmmsv_list_iter_insert_int"];
	var _try_realloc_chunk = Module["_try_realloc_chunk"] = asm["_try_realloc_chunk"];
	var _xmms_ipc_usocket_write = Module["_xmms_ipc_usocket_write"] = asm["_xmms_ipc_usocket_write"];
	var _isprint_l = Module["_isprint_l"] = asm["_isprint_l"];
	var _xmmsc_visualization_init = Module["_xmmsc_visualization_init"] = asm["_xmmsc_visualization_init"];
	var ___getopt_long = Module["___getopt_long"] = asm["___getopt_long"];
	var _llvm_ctlz_i32 = Module["_llvm_ctlz_i32"] = asm["_llvm_ctlz_i32"];
	var _coll_parse_binaryfilter = Module["_coll_parse_binaryfilter"] = asm["_coll_parse_binaryfilter"];
	var _xmmsv_dict_entry_get_int32 = Module["_xmmsv_dict_entry_get_int32"] = asm["_xmmsv_dict_entry_get_int32"];
	var _x_list_nth_data = Module["_x_list_nth_data"] = asm["_x_list_nth_data"];
	var ___cos = Module["___cos"] = asm["___cos"];
	var __internal_get_from_bb_value_list_alloc = Module["__internal_get_from_bb_value_list_alloc"] = asm["__internal_get_from_bb_value_list_alloc"];
	var _x_list_append = Module["_x_list_append"] = asm["_x_list_append"];
	var _lgammaf = Module["_lgammaf"] = asm["_lgammaf"];
	var _iswlower = Module["_iswlower"] = asm["_iswlower"];
	var __x_list_remove_link = Module["__x_list_remove_link"] = asm["__x_list_remove_link"];
	var _xmmsv_coll_attributes_set = Module["_xmmsv_coll_attributes_set"] = asm["_xmmsv_coll_attributes_set"];
	var _strcpy = Module["_strcpy"] = asm["_strcpy"];
	var _wcsncasecmp = Module["_wcsncasecmp"] = asm["_wcsncasecmp"];
	var _strtoull_l = Module["_strtoull_l"] = asm["_strtoull_l"];
	var _yn = Module["_yn"] = asm["_yn"];
	var _xmmsv_coll_normalize_order_arguments = Module["_xmmsv_coll_normalize_order_arguments"] = asm["_xmmsv_coll_normalize_order_arguments"];
	var _xmmsv_bitbuffer_new_ro = Module["_xmmsv_bitbuffer_new_ro"] = asm["_xmmsv_bitbuffer_new_ro"];
	var _getopt_long_only = Module["_getopt_long_only"] = asm["_getopt_long_only"];
	var _xmmsc_medialib_add_entry_args = Module["_xmmsc_medialib_add_entry_args"] = asm["_xmmsc_medialib_add_entry_args"];
	var _strtol_l = Module["_strtol_l"] = asm["_strtol_l"];
	var _lrand48 = Module["_lrand48"] = asm["_lrand48"];
	var _toupper = Module["_toupper"] = asm["_toupper"];
	var _jnf = Module["_jnf"] = asm["_jnf"];
	var _tv2ts = Module["_tv2ts"] = asm["_tv2ts"];
	var _atof = Module["_atof"] = asm["_atof"];
	var _xmmsv_list_has_type = Module["_xmmsv_list_has_type"] = asm["_xmmsv_list_has_type"];
	var __internal_get_from_bb_int32 = Module["__internal_get_from_bb_int32"] = asm["__internal_get_from_bb_int32"];
	var ___floatscan = Module["___floatscan"] = asm["___floatscan"];
	var _iswxdigit = Module["_iswxdigit"] = asm["_iswxdigit"];
	var _xmmsc_playlist_clear = Module["_xmmsc_playlist_clear"] = asm["_xmmsc_playlist_clear"];
	var _x_list_find = Module["_x_list_find"] = asm["_x_list_find"];
	var _xmmsc_broadcast_playback_current_id = Module["_xmmsc_broadcast_playback_current_id"] = asm["_xmmsc_broadcast_playback_current_id"];
	var _strcoll = Module["_strcoll"] = asm["_strcoll"];
	var _x_list_insert = Module["_x_list_insert"] = asm["_x_list_insert"];
	var _xmmsc_medialib_import_path_encoded = Module["_xmmsc_medialib_import_path_encoded"] = asm["_xmmsc_medialib_import_path_encoded"];
	var ___overflow = Module["___overflow"] = asm["___overflow"];
	var _mbrtowc = Module["_mbrtowc"] = asm["_mbrtowc"];
	var _ldexp = Module["_ldexp"] = asm["_ldexp"];
	var _tv2net = Module["_tv2net"] = asm["_tv2net"];
	var _xmmsv_list_iter_next = Module["_xmmsv_list_iter_next"] = asm["_xmmsv_list_iter_next"];
	var _xmmsc_ipc_destroy = Module["_xmmsc_ipc_destroy"] = asm["_xmmsc_ipc_destroy"];
	var _y1f = Module["_y1f"] = asm["_y1f"];
	var ___xmmsv_identity_xmmsv437 = Module["___xmmsv_identity_xmmsv437"] = asm["___xmmsv_identity_xmmsv437"];
	var _x_asprintf = Module["_x_asprintf"] = asm["_x_asprintf"];
	var _xmmsv_bitbuffer_serialize_value = Module["_xmmsv_bitbuffer_serialize_value"] = asm["_xmmsv_bitbuffer_serialize_value"];
	var _xmmsc_result_parse_msg = Module["_xmmsc_result_parse_msg"] = asm["_xmmsc_result_parse_msg"];
	var _xmms_ipc_transport_read = Module["_xmms_ipc_transport_read"] = asm["_xmms_ipc_transport_read"];
	var ___towcase = Module["___towcase"] = asm["___towcase"];
	var _xmmsc_ipc_io_in_callback = Module["_xmmsc_ipc_io_in_callback"] = asm["_xmmsc_ipc_io_in_callback"];
	var _bcopy = Module["_bcopy"] = asm["_bcopy"];
	var _getopt_long = Module["_getopt_long"] = asm["_getopt_long"];
	var _xmmsc_send_signal_msg = Module["_xmmsc_send_signal_msg"] = asm["_xmmsc_send_signal_msg"];
	var _coll_parse_autofilter = Module["_coll_parse_autofilter"] = asm["_coll_parse_autofilter"];
	var _wcsstr = Module["_wcsstr"] = asm["_wcsstr"];
	var _xmmsv_dict_entry_get_float = Module["_xmmsv_dict_entry_get_float"] = asm["_xmmsv_dict_entry_get_float"];
	var _regexec = Module["_regexec"] = asm["_regexec"];
	var _xmmsc_visualization_version = Module["_xmmsc_visualization_version"] = asm["_xmmsc_visualization_version"];
	var _x_queue_free = Module["_x_queue_free"] = asm["_x_queue_free"];
	var _xmms_freeaddrinfo = Module["_xmms_freeaddrinfo"] = asm["_xmms_freeaddrinfo"];
	var _xmmsc_playlist_remove_entry = Module["_xmmsc_playlist_remove_entry"] = asm["_xmmsc_playlist_remove_entry"];
	var _xmmsc_playlist_list = Module["_xmmsc_playlist_list"] = asm["_xmmsc_playlist_list"];
	var _y1 = Module["_y1"] = asm["_y1"];
	var _ilogbf = Module["_ilogbf"] = asm["_ilogbf"];
	var _swprintf = Module["_swprintf"] = asm["_swprintf"];
	var _xmmsc_result_notifier_set_default = Module["_xmmsc_result_notifier_set_default"] = asm["_xmmsc_result_notifier_set_default"];
	var _xmmsv_coll_parse_custom = Module["_xmmsv_coll_parse_custom"] = asm["_xmmsv_coll_parse_custom"];
	var _tre_fill_pmatch = Module["_tre_fill_pmatch"] = asm["_tre_fill_pmatch"];
	var _vsprintf = Module["_vsprintf"] = asm["_vsprintf"];
	var _dispose_chunk = Module["_dispose_chunk"] = asm["_dispose_chunk"];
	var _xmmsv_list_append_coll = Module["_xmmsv_list_append_coll"] = asm["_xmmsv_list_append_coll"];
	var _xmmsc_playlist_insert_collection = Module["_xmmsc_playlist_insert_collection"] = asm["_xmmsc_playlist_insert_collection"];
	var _common = Module["_common"] = asm["_common"];
	var _free_url = Module["_free_url"] = asm["_free_url"];
	var _sprintf = Module["_sprintf"] = asm["_sprintf"];
	var _strspn = Module["_strspn"] = asm["_strspn"];
	var ___xmmsv_identity_xmmsv497 = Module["___xmmsv_identity_xmmsv497"] = asm["___xmmsv_identity_xmmsv497"];
	var ___xmmsv_identity_xmmsv483 = Module["___xmmsv_identity_xmmsv483"] = asm["___xmmsv_identity_xmmsv483"];
	var _strncasecmp_l = Module["_strncasecmp_l"] = asm["_strncasecmp_l"];
	var _xmmsv_dict_set_coll = Module["_xmmsv_dict_set_coll"] = asm["_xmmsv_dict_set_coll"];
	var _xmmsv_coll_default_parse_build = Module["_xmmsv_coll_default_parse_build"] = asm["_xmmsv_coll_default_parse_build"];
	var _strxfrm = Module["_strxfrm"] = asm["_strxfrm"];
	var _isgraph_l = Module["_isgraph_l"] = asm["_isgraph_l"];
	var _xmmsv_dict_iter_find = Module["_xmmsv_dict_iter_find"] = asm["_xmmsv_dict_iter_find"];
	var _random = Module["_random"] = asm["_random"];
	var _xmmsv_dict_set = Module["_xmmsv_dict_set"] = asm["_xmmsv_dict_set"];
	var _xmmsc_broadcast_medialib_entry_added = Module["_xmmsc_broadcast_medialib_entry_added"] = asm["_xmmsc_broadcast_medialib_entry_added"];
	var _tre_stack_push = Module["_tre_stack_push"] = asm["_tre_stack_push"];
	var _xmmsv_new_bitbuffer_ro = Module["_xmmsv_new_bitbuffer_ro"] = asm["_xmmsv_new_bitbuffer_ro"];
	var _iswgraph = Module["_iswgraph"] = asm["_iswgraph"];
	var _xmmsv_list_iter_remove = Module["_xmmsv_list_iter_remove"] = asm["_xmmsv_list_iter_remove"];
	var _wcscoll_l = Module["_wcscoll_l"] = asm["_wcscoll_l"];
	var _calloc = Module["_calloc"] = asm["_calloc"];
	var _xmmsc_playlist_add_args = Module["_xmmsc_playlist_add_args"] = asm["_xmmsc_playlist_add_args"];
	var _xmmsv_dict_iter_remove = Module["_xmmsv_dict_iter_remove"] = asm["_xmmsv_dict_iter_remove"];
	var _coll_parse_operation = Module["_coll_parse_operation"] = asm["_coll_parse_operation"];
	var _xmmsv_list_insert_string = Module["_xmmsv_list_insert_string"] = asm["_xmmsv_list_insert_string"];
	var _xmmsv_bitbuffer_buffer = Module["_xmmsv_bitbuffer_buffer"] = asm["_xmmsv_bitbuffer_buffer"];
	var _xmmsc_signal_playback_playtime = Module["_xmmsc_signal_playback_playtime"] = asm["_xmmsc_signal_playback_playtime"];
	var _iconv_close = Module["_iconv_close"] = asm["_iconv_close"];
	var _xmmsv_list_iter_entry_int64 = Module["_xmmsv_list_iter_entry_int64"] = asm["_xmmsv_list_iter_entry_int64"];
	var _xmmsc_ipc_lock_set = Module["_xmmsc_ipc_lock_set"] = asm["_xmmsc_ipc_lock_set"];
	var _isgraph = Module["_isgraph"] = asm["_isgraph"];
	var ___fputwc_unlocked = Module["___fputwc_unlocked"] = asm["___fputwc_unlocked"];
	var _xmmsc_main_list_plugins = Module["_xmmsc_main_list_plugins"] = asm["_xmmsc_main_list_plugins"];
	var _bcmp = Module["_bcmp"] = asm["_bcmp"];
	var _strtoll_l = Module["_strtoll_l"] = asm["_strtoll_l"];
	var _strcasestr = Module["_strcasestr"] = asm["_strcasestr"];
	var _strtof = Module["_strtof"] = asm["_strtof"];
	var _xmmsc_send_cmd_cookie = Module["_xmmsc_send_cmd_cookie"] = asm["_xmmsc_send_cmd_cookie"];
	var _realloc = Module["_realloc"] = asm["_realloc"];
	var _xmmsc_medialib_entry_property_set_int = Module["_xmmsc_medialib_entry_property_set_int"] = asm["_xmmsc_medialib_entry_property_set_int"];
	var _xmmsc_playback_pause = Module["_xmmsc_playback_pause"] = asm["_xmmsc_playback_pause"];
	var _xmmsc_medialib_get_id_encoded = Module["_xmmsc_medialib_get_id_encoded"] = asm["_xmmsc_medialib_get_id_encoded"];
	var _xmmsv_coll_get_type = Module["_xmmsv_coll_get_type"] = asm["_xmmsv_coll_get_type"];
	var ___fwritex = Module["___fwritex"] = asm["___fwritex"];
	var ___tre_mem_new_impl = Module["___tre_mem_new_impl"] = asm["___tre_mem_new_impl"];
	var _wcscasecmp = Module["_wcscasecmp"] = asm["_wcscasecmp"];
	var _xmmsc_result_ref = Module["_xmmsc_result_ref"] = asm["_xmmsc_result_ref"];
	var _xmmsc_result_emscripten_notifier_set = Module["_xmmsc_result_emscripten_notifier_set"] = asm["_xmmsc_result_emscripten_notifier_set"];
	var _xmmsv_list_flatten = Module["_xmmsv_list_flatten"] = asm["_xmmsv_list_flatten"];
	var __internal_get_from_bb_int64 = Module["__internal_get_from_bb_int64"] = asm["__internal_get_from_bb_int64"];
	var _xmmsv_list_iter_entry = Module["_xmmsv_list_iter_entry"] = asm["_xmmsv_list_iter_entry"];
	var __xmmsv_list_new = Module["__xmmsv_list_new"] = asm["__xmmsv_list_new"];
	var ___cosdf = Module["___cosdf"] = asm["___cosdf"];
	var _xmmsc_ipc_exec_msg = Module["_xmmsc_ipc_exec_msg"] = asm["_xmmsc_ipc_exec_msg"];
	var _xmmsc_io_disconnect = Module["_xmmsc_io_disconnect"] = asm["_xmmsc_io_disconnect"];
	var _xmmsc_next_id = Module["_xmmsc_next_id"] = asm["_xmmsc_next_id"];
	var _xmmsv_list_insert_coll = Module["_xmmsv_list_insert_coll"] = asm["_xmmsv_list_insert_coll"];
	var _xmmsv_list_sort = Module["_xmmsv_list_sort"] = asm["_xmmsv_list_sort"];
	var __internal_get_from_bb_collection_alloc = Module["__internal_get_from_bb_collection_alloc"] = asm["__internal_get_from_bb_collection_alloc"];
	var _x_list_nth = Module["_x_list_nth"] = asm["_x_list_nth"];
	var _xmmsv_copy = Module["_xmmsv_copy"] = asm["_xmmsv_copy"];
	var runPostSets = Module["runPostSets"] = asm["runPostSets"];
	var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
	var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
	var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
	var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
	var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
	var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
	var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
	var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

	  Runtime.stackAlloc = asm['stackAlloc'];
	  Runtime.stackSave = asm['stackSave'];
	  Runtime.stackRestore = asm['stackRestore'];
	  Runtime.setTempRet0 = asm['setTempRet0'];
	  Runtime.getTempRet0 = asm['getTempRet0'];


	// TODO: strip out parts of this we do not need

	//======= begin closure i64 code =======

	// Copyright 2009 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
	 * integer value, which faithfully simulates the behavior of a Java "long". This
	 * implementation is derived from LongLib in GWT.
	 *
	 */

	var i64Math = (function() { // Emscripten wrapper
	  var goog = { math: {} };


	  /**
	   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
	   * values as *signed* integers.  See the from* functions below for more
	   * convenient ways of constructing Longs.
	   *
	   * The internal representation of a long is the two given signed, 32-bit values.
	   * We use 32-bit pieces because these are the size of integers on which
	   * Javascript performs bit-operations.  For operations like addition and
	   * multiplication, we split each number into 16-bit pieces, which can easily be
	   * multiplied within Javascript's floating-point representation without overflow
	   * or change in sign.
	   *
	   * In the algorithms below, we frequently reduce the negative case to the
	   * positive case by negating the input(s) and then post-processing the result.
	   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
	   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	   * a positive number, it overflows back into a negative).  Not handling this
	   * case would often result in infinite recursion.
	   *
	   * @param {number} low  The low (signed) 32 bits of the long.
	   * @param {number} high  The high (signed) 32 bits of the long.
	   * @constructor
	   */
	  goog.math.Long = function(low, high) {
	    /**
	     * @type {number}
	     * @private
	     */
	    this.low_ = low | 0;  // force into 32 signed bits.

	    /**
	     * @type {number}
	     * @private
	     */
	    this.high_ = high | 0;  // force into 32 signed bits.
	  };


	  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
	  // from* methods on which they depend.


	  /**
	   * A cache of the Long representations of small integer values.
	   * @type {!Object}
	   * @private
	   */
	  goog.math.Long.IntCache_ = {};


	  /**
	   * Returns a Long representing the given (32-bit) integer value.
	   * @param {number} value The 32-bit integer in question.
	   * @return {!goog.math.Long} The corresponding Long value.
	   */
	  goog.math.Long.fromInt = function(value) {
	    if (-128 <= value && value < 128) {
	      var cachedObj = goog.math.Long.IntCache_[value];
	      if (cachedObj) {
	        return cachedObj;
	      }
	    }

	    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
	    if (-128 <= value && value < 128) {
	      goog.math.Long.IntCache_[value] = obj;
	    }
	    return obj;
	  };


	  /**
	   * Returns a Long representing the given value, provided that it is a finite
	   * number.  Otherwise, zero is returned.
	   * @param {number} value The number in question.
	   * @return {!goog.math.Long} The corresponding Long value.
	   */
	  goog.math.Long.fromNumber = function(value) {
	    if (isNaN(value) || !isFinite(value)) {
	      return goog.math.Long.ZERO;
	    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
	      return goog.math.Long.MIN_VALUE;
	    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
	      return goog.math.Long.MAX_VALUE;
	    } else if (value < 0) {
	      return goog.math.Long.fromNumber(-value).negate();
	    } else {
	      return new goog.math.Long(
	          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
	          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
	    }
	  };


	  /**
	   * Returns a Long representing the 64-bit integer that comes by concatenating
	   * the given high and low bits.  Each is assumed to use 32 bits.
	   * @param {number} lowBits The low 32-bits.
	   * @param {number} highBits The high 32-bits.
	   * @return {!goog.math.Long} The corresponding Long value.
	   */
	  goog.math.Long.fromBits = function(lowBits, highBits) {
	    return new goog.math.Long(lowBits, highBits);
	  };


	  /**
	   * Returns a Long representation of the given string, written using the given
	   * radix.
	   * @param {string} str The textual representation of the Long.
	   * @param {number=} opt_radix The radix in which the text is written.
	   * @return {!goog.math.Long} The corresponding Long value.
	   */
	  goog.math.Long.fromString = function(str, opt_radix) {
	    if (str.length == 0) {
	      throw Error('number format error: empty string');
	    }

	    var radix = opt_radix || 10;
	    if (radix < 2 || 36 < radix) {
	      throw Error('radix out of range: ' + radix);
	    }

	    if (str.charAt(0) == '-') {
	      return goog.math.Long.fromString(str.substring(1), radix).negate();
	    } else if (str.indexOf('-') >= 0) {
	      throw Error('number format error: interior "-" character: ' + str);
	    }

	    // Do several (8) digits each time through the loop, so as to
	    // minimize the calls to the very expensive emulated div.
	    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

	    var result = goog.math.Long.ZERO;
	    for (var i = 0; i < str.length; i += 8) {
	      var size = Math.min(8, str.length - i);
	      var value = parseInt(str.substring(i, i + size), radix);
	      if (size < 8) {
	        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
	        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
	      } else {
	        result = result.multiply(radixToPower);
	        result = result.add(goog.math.Long.fromNumber(value));
	      }
	    }
	    return result;
	  };


	  // NOTE: the compiler should inline these constant values below and then remove
	  // these variables, so there should be no runtime penalty for these.


	  /**
	   * Number used repeated below in calculations.  This must appear before the
	   * first call to any from* function below.
	   * @type {number}
	   * @private
	   */
	  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


	  /**
	   * @type {number}
	   * @private
	   */
	  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


	  /**
	   * @type {number}
	   * @private
	   */
	  goog.math.Long.TWO_PWR_32_DBL_ =
	      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


	  /**
	   * @type {number}
	   * @private
	   */
	  goog.math.Long.TWO_PWR_31_DBL_ =
	      goog.math.Long.TWO_PWR_32_DBL_ / 2;


	  /**
	   * @type {number}
	   * @private
	   */
	  goog.math.Long.TWO_PWR_48_DBL_ =
	      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


	  /**
	   * @type {number}
	   * @private
	   */
	  goog.math.Long.TWO_PWR_64_DBL_ =
	      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


	  /**
	   * @type {number}
	   * @private
	   */
	  goog.math.Long.TWO_PWR_63_DBL_ =
	      goog.math.Long.TWO_PWR_64_DBL_ / 2;


	  /** @type {!goog.math.Long} */
	  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


	  /** @type {!goog.math.Long} */
	  goog.math.Long.ONE = goog.math.Long.fromInt(1);


	  /** @type {!goog.math.Long} */
	  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


	  /** @type {!goog.math.Long} */
	  goog.math.Long.MAX_VALUE =
	      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


	  /** @type {!goog.math.Long} */
	  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


	  /**
	   * @type {!goog.math.Long}
	   * @private
	   */
	  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


	  /** @return {number} The value, assuming it is a 32-bit integer. */
	  goog.math.Long.prototype.toInt = function() {
	    return this.low_;
	  };


	  /** @return {number} The closest floating-point representation to this value. */
	  goog.math.Long.prototype.toNumber = function() {
	    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
	           this.getLowBitsUnsigned();
	  };


	  /**
	   * @param {number=} opt_radix The radix in which the text should be written.
	   * @return {string} The textual representation of this value.
	   */
	  goog.math.Long.prototype.toString = function(opt_radix) {
	    var radix = opt_radix || 10;
	    if (radix < 2 || 36 < radix) {
	      throw Error('radix out of range: ' + radix);
	    }

	    if (this.isZero()) {
	      return '0';
	    }

	    if (this.isNegative()) {
	      if (this.equals(goog.math.Long.MIN_VALUE)) {
	        // We need to change the Long value before it can be negated, so we remove
	        // the bottom-most digit in this base and then recurse to do the rest.
	        var radixLong = goog.math.Long.fromNumber(radix);
	        var div = this.div(radixLong);
	        var rem = div.multiply(radixLong).subtract(this);
	        return div.toString(radix) + rem.toInt().toString(radix);
	      } else {
	        return '-' + this.negate().toString(radix);
	      }
	    }

	    // Do several (6) digits each time through the loop, so as to
	    // minimize the calls to the very expensive emulated div.
	    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

	    var rem = this;
	    var result = '';
	    while (true) {
	      var remDiv = rem.div(radixToPower);
	      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
	      var digits = intval.toString(radix);

	      rem = remDiv;
	      if (rem.isZero()) {
	        return digits + result;
	      } else {
	        while (digits.length < 6) {
	          digits = '0' + digits;
	        }
	        result = '' + digits + result;
	      }
	    }
	  };


	  /** @return {number} The high 32-bits as a signed value. */
	  goog.math.Long.prototype.getHighBits = function() {
	    return this.high_;
	  };


	  /** @return {number} The low 32-bits as a signed value. */
	  goog.math.Long.prototype.getLowBits = function() {
	    return this.low_;
	  };


	  /** @return {number} The low 32-bits as an unsigned value. */
	  goog.math.Long.prototype.getLowBitsUnsigned = function() {
	    return (this.low_ >= 0) ?
	        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
	  };


	  /**
	   * @return {number} Returns the number of bits needed to represent the absolute
	   *     value of this Long.
	   */
	  goog.math.Long.prototype.getNumBitsAbs = function() {
	    if (this.isNegative()) {
	      if (this.equals(goog.math.Long.MIN_VALUE)) {
	        return 64;
	      } else {
	        return this.negate().getNumBitsAbs();
	      }
	    } else {
	      var val = this.high_ != 0 ? this.high_ : this.low_;
	      for (var bit = 31; bit > 0; bit--) {
	        if ((val & (1 << bit)) != 0) {
	          break;
	        }
	      }
	      return this.high_ != 0 ? bit + 33 : bit + 1;
	    }
	  };


	  /** @return {boolean} Whether this value is zero. */
	  goog.math.Long.prototype.isZero = function() {
	    return this.high_ == 0 && this.low_ == 0;
	  };


	  /** @return {boolean} Whether this value is negative. */
	  goog.math.Long.prototype.isNegative = function() {
	    return this.high_ < 0;
	  };


	  /** @return {boolean} Whether this value is odd. */
	  goog.math.Long.prototype.isOdd = function() {
	    return (this.low_ & 1) == 1;
	  };


	  /**
	   * @param {goog.math.Long} other Long to compare against.
	   * @return {boolean} Whether this Long equals the other.
	   */
	  goog.math.Long.prototype.equals = function(other) {
	    return (this.high_ == other.high_) && (this.low_ == other.low_);
	  };


	  /**
	   * @param {goog.math.Long} other Long to compare against.
	   * @return {boolean} Whether this Long does not equal the other.
	   */
	  goog.math.Long.prototype.notEquals = function(other) {
	    return (this.high_ != other.high_) || (this.low_ != other.low_);
	  };


	  /**
	   * @param {goog.math.Long} other Long to compare against.
	   * @return {boolean} Whether this Long is less than the other.
	   */
	  goog.math.Long.prototype.lessThan = function(other) {
	    return this.compare(other) < 0;
	  };


	  /**
	   * @param {goog.math.Long} other Long to compare against.
	   * @return {boolean} Whether this Long is less than or equal to the other.
	   */
	  goog.math.Long.prototype.lessThanOrEqual = function(other) {
	    return this.compare(other) <= 0;
	  };


	  /**
	   * @param {goog.math.Long} other Long to compare against.
	   * @return {boolean} Whether this Long is greater than the other.
	   */
	  goog.math.Long.prototype.greaterThan = function(other) {
	    return this.compare(other) > 0;
	  };


	  /**
	   * @param {goog.math.Long} other Long to compare against.
	   * @return {boolean} Whether this Long is greater than or equal to the other.
	   */
	  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
	    return this.compare(other) >= 0;
	  };


	  /**
	   * Compares this Long with the given one.
	   * @param {goog.math.Long} other Long to compare against.
	   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
	   *     if the given one is greater.
	   */
	  goog.math.Long.prototype.compare = function(other) {
	    if (this.equals(other)) {
	      return 0;
	    }

	    var thisNeg = this.isNegative();
	    var otherNeg = other.isNegative();
	    if (thisNeg && !otherNeg) {
	      return -1;
	    }
	    if (!thisNeg && otherNeg) {
	      return 1;
	    }

	    // at this point, the signs are the same, so subtraction will not overflow
	    if (this.subtract(other).isNegative()) {
	      return -1;
	    } else {
	      return 1;
	    }
	  };


	  /** @return {!goog.math.Long} The negation of this value. */
	  goog.math.Long.prototype.negate = function() {
	    if (this.equals(goog.math.Long.MIN_VALUE)) {
	      return goog.math.Long.MIN_VALUE;
	    } else {
	      return this.not().add(goog.math.Long.ONE);
	    }
	  };


	  /**
	   * Returns the sum of this and the given Long.
	   * @param {goog.math.Long} other Long to add to this one.
	   * @return {!goog.math.Long} The sum of this and the given Long.
	   */
	  goog.math.Long.prototype.add = function(other) {
	    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

	    var a48 = this.high_ >>> 16;
	    var a32 = this.high_ & 0xFFFF;
	    var a16 = this.low_ >>> 16;
	    var a00 = this.low_ & 0xFFFF;

	    var b48 = other.high_ >>> 16;
	    var b32 = other.high_ & 0xFFFF;
	    var b16 = other.low_ >>> 16;
	    var b00 = other.low_ & 0xFFFF;

	    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	    c00 += a00 + b00;
	    c16 += c00 >>> 16;
	    c00 &= 0xFFFF;
	    c16 += a16 + b16;
	    c32 += c16 >>> 16;
	    c16 &= 0xFFFF;
	    c32 += a32 + b32;
	    c48 += c32 >>> 16;
	    c32 &= 0xFFFF;
	    c48 += a48 + b48;
	    c48 &= 0xFFFF;
	    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	  };


	  /**
	   * Returns the difference of this and the given Long.
	   * @param {goog.math.Long} other Long to subtract from this.
	   * @return {!goog.math.Long} The difference of this and the given Long.
	   */
	  goog.math.Long.prototype.subtract = function(other) {
	    return this.add(other.negate());
	  };


	  /**
	   * Returns the product of this and the given long.
	   * @param {goog.math.Long} other Long to multiply with this.
	   * @return {!goog.math.Long} The product of this and the other.
	   */
	  goog.math.Long.prototype.multiply = function(other) {
	    if (this.isZero()) {
	      return goog.math.Long.ZERO;
	    } else if (other.isZero()) {
	      return goog.math.Long.ZERO;
	    }

	    if (this.equals(goog.math.Long.MIN_VALUE)) {
	      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
	    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
	      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
	    }

	    if (this.isNegative()) {
	      if (other.isNegative()) {
	        return this.negate().multiply(other.negate());
	      } else {
	        return this.negate().multiply(other).negate();
	      }
	    } else if (other.isNegative()) {
	      return this.multiply(other.negate()).negate();
	    }

	    // If both longs are small, use float multiplication
	    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
	        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
	      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
	    }

	    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
	    // We can skip products that would overflow.

	    var a48 = this.high_ >>> 16;
	    var a32 = this.high_ & 0xFFFF;
	    var a16 = this.low_ >>> 16;
	    var a00 = this.low_ & 0xFFFF;

	    var b48 = other.high_ >>> 16;
	    var b32 = other.high_ & 0xFFFF;
	    var b16 = other.low_ >>> 16;
	    var b00 = other.low_ & 0xFFFF;

	    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	    c00 += a00 * b00;
	    c16 += c00 >>> 16;
	    c00 &= 0xFFFF;
	    c16 += a16 * b00;
	    c32 += c16 >>> 16;
	    c16 &= 0xFFFF;
	    c16 += a00 * b16;
	    c32 += c16 >>> 16;
	    c16 &= 0xFFFF;
	    c32 += a32 * b00;
	    c48 += c32 >>> 16;
	    c32 &= 0xFFFF;
	    c32 += a16 * b16;
	    c48 += c32 >>> 16;
	    c32 &= 0xFFFF;
	    c32 += a00 * b32;
	    c48 += c32 >>> 16;
	    c32 &= 0xFFFF;
	    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	    c48 &= 0xFFFF;
	    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	  };


	  /**
	   * Returns this Long divided by the given one.
	   * @param {goog.math.Long} other Long by which to divide.
	   * @return {!goog.math.Long} This Long divided by the given one.
	   */
	  goog.math.Long.prototype.div = function(other) {
	    if (other.isZero()) {
	      throw Error('division by zero');
	    } else if (this.isZero()) {
	      return goog.math.Long.ZERO;
	    }

	    if (this.equals(goog.math.Long.MIN_VALUE)) {
	      if (other.equals(goog.math.Long.ONE) ||
	          other.equals(goog.math.Long.NEG_ONE)) {
	        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
	      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
	        return goog.math.Long.ONE;
	      } else {
	        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	        var halfThis = this.shiftRight(1);
	        var approx = halfThis.div(other).shiftLeft(1);
	        if (approx.equals(goog.math.Long.ZERO)) {
	          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
	        } else {
	          var rem = this.subtract(other.multiply(approx));
	          var result = approx.add(rem.div(other));
	          return result;
	        }
	      }
	    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
	      return goog.math.Long.ZERO;
	    }

	    if (this.isNegative()) {
	      if (other.isNegative()) {
	        return this.negate().div(other.negate());
	      } else {
	        return this.negate().div(other).negate();
	      }
	    } else if (other.isNegative()) {
	      return this.div(other.negate()).negate();
	    }

	    // Repeat the following until the remainder is less than other:  find a
	    // floating-point that approximates remainder / other *from below*, add this
	    // into the result, and subtract it from the remainder.  It is critical that
	    // the approximate value is less than or equal to the real value so that the
	    // remainder never becomes negative.
	    var res = goog.math.Long.ZERO;
	    var rem = this;
	    while (rem.greaterThanOrEqual(other)) {
	      // Approximate the result of division. This may be a little greater or
	      // smaller than the actual value.
	      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

	      // We will tweak the approximate result by changing it in the 48-th digit or
	      // the smallest non-fractional digit, whichever is larger.
	      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

	      // Decrease the approximation until it is smaller than the remainder.  Note
	      // that if it is too large, the product overflows and is negative.
	      var approxRes = goog.math.Long.fromNumber(approx);
	      var approxRem = approxRes.multiply(other);
	      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	        approx -= delta;
	        approxRes = goog.math.Long.fromNumber(approx);
	        approxRem = approxRes.multiply(other);
	      }

	      // We know the answer can't be zero... and actually, zero would cause
	      // infinite recursion since we would make no progress.
	      if (approxRes.isZero()) {
	        approxRes = goog.math.Long.ONE;
	      }

	      res = res.add(approxRes);
	      rem = rem.subtract(approxRem);
	    }
	    return res;
	  };


	  /**
	   * Returns this Long modulo the given one.
	   * @param {goog.math.Long} other Long by which to mod.
	   * @return {!goog.math.Long} This Long modulo the given one.
	   */
	  goog.math.Long.prototype.modulo = function(other) {
	    return this.subtract(this.div(other).multiply(other));
	  };


	  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
	  goog.math.Long.prototype.not = function() {
	    return goog.math.Long.fromBits(~this.low_, ~this.high_);
	  };


	  /**
	   * Returns the bitwise-AND of this Long and the given one.
	   * @param {goog.math.Long} other The Long with which to AND.
	   * @return {!goog.math.Long} The bitwise-AND of this and the other.
	   */
	  goog.math.Long.prototype.and = function(other) {
	    return goog.math.Long.fromBits(this.low_ & other.low_,
	                                   this.high_ & other.high_);
	  };


	  /**
	   * Returns the bitwise-OR of this Long and the given one.
	   * @param {goog.math.Long} other The Long with which to OR.
	   * @return {!goog.math.Long} The bitwise-OR of this and the other.
	   */
	  goog.math.Long.prototype.or = function(other) {
	    return goog.math.Long.fromBits(this.low_ | other.low_,
	                                   this.high_ | other.high_);
	  };


	  /**
	   * Returns the bitwise-XOR of this Long and the given one.
	   * @param {goog.math.Long} other The Long with which to XOR.
	   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
	   */
	  goog.math.Long.prototype.xor = function(other) {
	    return goog.math.Long.fromBits(this.low_ ^ other.low_,
	                                   this.high_ ^ other.high_);
	  };


	  /**
	   * Returns this Long with bits shifted to the left by the given amount.
	   * @param {number} numBits The number of bits by which to shift.
	   * @return {!goog.math.Long} This shifted to the left by the given amount.
	   */
	  goog.math.Long.prototype.shiftLeft = function(numBits) {
	    numBits &= 63;
	    if (numBits == 0) {
	      return this;
	    } else {
	      var low = this.low_;
	      if (numBits < 32) {
	        var high = this.high_;
	        return goog.math.Long.fromBits(
	            low << numBits,
	            (high << numBits) | (low >>> (32 - numBits)));
	      } else {
	        return goog.math.Long.fromBits(0, low << (numBits - 32));
	      }
	    }
	  };


	  /**
	   * Returns this Long with bits shifted to the right by the given amount.
	   * @param {number} numBits The number of bits by which to shift.
	   * @return {!goog.math.Long} This shifted to the right by the given amount.
	   */
	  goog.math.Long.prototype.shiftRight = function(numBits) {
	    numBits &= 63;
	    if (numBits == 0) {
	      return this;
	    } else {
	      var high = this.high_;
	      if (numBits < 32) {
	        var low = this.low_;
	        return goog.math.Long.fromBits(
	            (low >>> numBits) | (high << (32 - numBits)),
	            high >> numBits);
	      } else {
	        return goog.math.Long.fromBits(
	            high >> (numBits - 32),
	            high >= 0 ? 0 : -1);
	      }
	    }
	  };


	  /**
	   * Returns this Long with bits shifted to the right by the given amount, with
	   * the new top bits matching the current sign bit.
	   * @param {number} numBits The number of bits by which to shift.
	   * @return {!goog.math.Long} This shifted to the right by the given amount, with
	   *     zeros placed into the new leading bits.
	   */
	  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
	    numBits &= 63;
	    if (numBits == 0) {
	      return this;
	    } else {
	      var high = this.high_;
	      if (numBits < 32) {
	        var low = this.low_;
	        return goog.math.Long.fromBits(
	            (low >>> numBits) | (high << (32 - numBits)),
	            high >>> numBits);
	      } else if (numBits == 32) {
	        return goog.math.Long.fromBits(high, 0);
	      } else {
	        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
	      }
	    }
	  };

	  //======= begin jsbn =======

	  var navigator = { appName: 'Modern Browser' }; // polyfill a little

	  // Copyright (c) 2005  Tom Wu
	  // All Rights Reserved.
	  // http://www-cs-students.stanford.edu/~tjw/jsbn/

	  /*
	   * Copyright (c) 2003-2005  Tom Wu
	   * All Rights Reserved.
	   *
	   * Permission is hereby granted, free of charge, to any person obtaining
	   * a copy of this software and associated documentation files (the
	   * "Software"), to deal in the Software without restriction, including
	   * without limitation the rights to use, copy, modify, merge, publish,
	   * distribute, sublicense, and/or sell copies of the Software, and to
	   * permit persons to whom the Software is furnished to do so, subject to
	   * the following conditions:
	   *
	   * The above copyright notice and this permission notice shall be
	   * included in all copies or substantial portions of the Software.
	   *
	   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
	   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
	   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
	   *
	   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
	   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
	   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
	   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
	   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	   *
	   * In addition, the following condition applies:
	   *
	   * All redistributions must retain an intact copy of this copyright notice
	   * and disclaimer.
	   */

	  // Basic JavaScript BN library - subset useful for RSA encryption.

	  // Bits per digit
	  var dbits;

	  // JavaScript engine analysis
	  var canary = 0xdeadbeefcafe;
	  var j_lm = ((canary&0xffffff)==0xefcafe);

	  // (public) Constructor
	  function BigInteger(a,b,c) {
	    if(a != null)
	      if("number" == typeof a) this.fromNumber(a,b,c);
	      else if(b == null && "string" != typeof a) this.fromString(a,256);
	      else this.fromString(a,b);
	  }

	  // return new, unset BigInteger
	  function nbi() { return new BigInteger(null); }

	  // am: Compute w_j += (x*this_i), propagate carries,
	  // c is initial carry, returns final carry.
	  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	  // We need to select the fastest one that works in this environment.

	  // am1: use a single mult and divide to get the high bits,
	  // max digit bits should be 26 because
	  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	  function am1(i,x,w,j,c,n) {
	    while(--n >= 0) {
	      var v = x*this[i++]+w[j]+c;
	      c = Math.floor(v/0x4000000);
	      w[j++] = v&0x3ffffff;
	    }
	    return c;
	  }
	  // am2 avoids a big mult-and-extract completely.
	  // Max digit bits should be <= 30 because we do bitwise ops
	  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	  function am2(i,x,w,j,c,n) {
	    var xl = x&0x7fff, xh = x>>15;
	    while(--n >= 0) {
	      var l = this[i]&0x7fff;
	      var h = this[i++]>>15;
	      var m = xh*l+h*xl;
	      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
	      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
	      w[j++] = l&0x3fffffff;
	    }
	    return c;
	  }
	  // Alternately, set max digit bits to 28 since some
	  // browsers slow down when dealing with 32-bit numbers.
	  function am3(i,x,w,j,c,n) {
	    var xl = x&0x3fff, xh = x>>14;
	    while(--n >= 0) {
	      var l = this[i]&0x3fff;
	      var h = this[i++]>>14;
	      var m = xh*l+h*xl;
	      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
	      c = (l>>28)+(m>>14)+xh*h;
	      w[j++] = l&0xfffffff;
	    }
	    return c;
	  }
	  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
	    BigInteger.prototype.am = am2;
	    dbits = 30;
	  }
	  else if(j_lm && (navigator.appName != "Netscape")) {
	    BigInteger.prototype.am = am1;
	    dbits = 26;
	  }
	  else { // Mozilla/Netscape seems to prefer am3
	    BigInteger.prototype.am = am3;
	    dbits = 28;
	  }

	  BigInteger.prototype.DB = dbits;
	  BigInteger.prototype.DM = ((1<<dbits)-1);
	  BigInteger.prototype.DV = (1<<dbits);

	  var BI_FP = 52;
	  BigInteger.prototype.FV = Math.pow(2,BI_FP);
	  BigInteger.prototype.F1 = BI_FP-dbits;
	  BigInteger.prototype.F2 = 2*dbits-BI_FP;

	  // Digit conversions
	  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	  var BI_RC = new Array();
	  var rr,vv;
	  rr = "0".charCodeAt(0);
	  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	  rr = "a".charCodeAt(0);
	  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	  rr = "A".charCodeAt(0);
	  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

	  function int2char(n) { return BI_RM.charAt(n); }
	  function intAt(s,i) {
	    var c = BI_RC[s.charCodeAt(i)];
	    return (c==null)?-1:c;
	  }

	  // (protected) copy this to r
	  function bnpCopyTo(r) {
	    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
	    r.t = this.t;
	    r.s = this.s;
	  }

	  // (protected) set from integer value x, -DV <= x < DV
	  function bnpFromInt(x) {
	    this.t = 1;
	    this.s = (x<0)?-1:0;
	    if(x > 0) this[0] = x;
	    else if(x < -1) this[0] = x+DV;
	    else this.t = 0;
	  }

	  // return bigint initialized to value
	  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

	  // (protected) set from string and radix
	  function bnpFromString(s,b) {
	    var k;
	    if(b == 16) k = 4;
	    else if(b == 8) k = 3;
	    else if(b == 256) k = 8; // byte array
	    else if(b == 2) k = 1;
	    else if(b == 32) k = 5;
	    else if(b == 4) k = 2;
	    else { this.fromRadix(s,b); return; }
	    this.t = 0;
	    this.s = 0;
	    var i = s.length, mi = false, sh = 0;
	    while(--i >= 0) {
	      var x = (k==8)?s[i]&0xff:intAt(s,i);
	      if(x < 0) {
	        if(s.charAt(i) == "-") mi = true;
	        continue;
	      }
	      mi = false;
	      if(sh == 0)
	        this[this.t++] = x;
	      else if(sh+k > this.DB) {
	        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
	        this[this.t++] = (x>>(this.DB-sh));
	      }
	      else
	        this[this.t-1] |= x<<sh;
	      sh += k;
	      if(sh >= this.DB) sh -= this.DB;
	    }
	    if(k == 8 && (s[0]&0x80) != 0) {
	      this.s = -1;
	      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
	    }
	    this.clamp();
	    if(mi) BigInteger.ZERO.subTo(this,this);
	  }

	  // (protected) clamp off excess high words
	  function bnpClamp() {
	    var c = this.s&this.DM;
	    while(this.t > 0 && this[this.t-1] == c) --this.t;
	  }

	  // (public) return string representation in given radix
	  function bnToString(b) {
	    if(this.s < 0) return "-"+this.negate().toString(b);
	    var k;
	    if(b == 16) k = 4;
	    else if(b == 8) k = 3;
	    else if(b == 2) k = 1;
	    else if(b == 32) k = 5;
	    else if(b == 4) k = 2;
	    else return this.toRadix(b);
	    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
	    var p = this.DB-(i*this.DB)%k;
	    if(i-- > 0) {
	      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
	      while(i >= 0) {
	        if(p < k) {
	          d = (this[i]&((1<<p)-1))<<(k-p);
	          d |= this[--i]>>(p+=this.DB-k);
	        }
	        else {
	          d = (this[i]>>(p-=k))&km;
	          if(p <= 0) { p += this.DB; --i; }
	        }
	        if(d > 0) m = true;
	        if(m) r += int2char(d);
	      }
	    }
	    return m?r:"0";
	  }

	  // (public) -this
	  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

	  // (public) |this|
	  function bnAbs() { return (this.s<0)?this.negate():this; }

	  // (public) return + if this > a, - if this < a, 0 if equal
	  function bnCompareTo(a) {
	    var r = this.s-a.s;
	    if(r != 0) return r;
	    var i = this.t;
	    r = i-a.t;
	    if(r != 0) return (this.s<0)?-r:r;
	    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
	    return 0;
	  }

	  // returns bit length of the integer x
	  function nbits(x) {
	    var r = 1, t;
	    if((t=x>>>16) != 0) { x = t; r += 16; }
	    if((t=x>>8) != 0) { x = t; r += 8; }
	    if((t=x>>4) != 0) { x = t; r += 4; }
	    if((t=x>>2) != 0) { x = t; r += 2; }
	    if((t=x>>1) != 0) { x = t; r += 1; }
	    return r;
	  }

	  // (public) return the number of bits in "this"
	  function bnBitLength() {
	    if(this.t <= 0) return 0;
	    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
	  }

	  // (protected) r = this << n*DB
	  function bnpDLShiftTo(n,r) {
	    var i;
	    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
	    for(i = n-1; i >= 0; --i) r[i] = 0;
	    r.t = this.t+n;
	    r.s = this.s;
	  }

	  // (protected) r = this >> n*DB
	  function bnpDRShiftTo(n,r) {
	    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
	    r.t = Math.max(this.t-n,0);
	    r.s = this.s;
	  }

	  // (protected) r = this << n
	  function bnpLShiftTo(n,r) {
	    var bs = n%this.DB;
	    var cbs = this.DB-bs;
	    var bm = (1<<cbs)-1;
	    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
	    for(i = this.t-1; i >= 0; --i) {
	      r[i+ds+1] = (this[i]>>cbs)|c;
	      c = (this[i]&bm)<<bs;
	    }
	    for(i = ds-1; i >= 0; --i) r[i] = 0;
	    r[ds] = c;
	    r.t = this.t+ds+1;
	    r.s = this.s;
	    r.clamp();
	  }

	  // (protected) r = this >> n
	  function bnpRShiftTo(n,r) {
	    r.s = this.s;
	    var ds = Math.floor(n/this.DB);
	    if(ds >= this.t) { r.t = 0; return; }
	    var bs = n%this.DB;
	    var cbs = this.DB-bs;
	    var bm = (1<<bs)-1;
	    r[0] = this[ds]>>bs;
	    for(var i = ds+1; i < this.t; ++i) {
	      r[i-ds-1] |= (this[i]&bm)<<cbs;
	      r[i-ds] = this[i]>>bs;
	    }
	    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
	    r.t = this.t-ds;
	    r.clamp();
	  }

	  // (protected) r = this - a
	  function bnpSubTo(a,r) {
	    var i = 0, c = 0, m = Math.min(a.t,this.t);
	    while(i < m) {
	      c += this[i]-a[i];
	      r[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    if(a.t < this.t) {
	      c -= a.s;
	      while(i < this.t) {
	        c += this[i];
	        r[i++] = c&this.DM;
	        c >>= this.DB;
	      }
	      c += this.s;
	    }
	    else {
	      c += this.s;
	      while(i < a.t) {
	        c -= a[i];
	        r[i++] = c&this.DM;
	        c >>= this.DB;
	      }
	      c -= a.s;
	    }
	    r.s = (c<0)?-1:0;
	    if(c < -1) r[i++] = this.DV+c;
	    else if(c > 0) r[i++] = c;
	    r.t = i;
	    r.clamp();
	  }

	  // (protected) r = this * a, r != this,a (HAC 14.12)
	  // "this" should be the larger one if appropriate.
	  function bnpMultiplyTo(a,r) {
	    var x = this.abs(), y = a.abs();
	    var i = x.t;
	    r.t = i+y.t;
	    while(--i >= 0) r[i] = 0;
	    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
	    r.s = 0;
	    r.clamp();
	    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
	  }

	  // (protected) r = this^2, r != this (HAC 14.16)
	  function bnpSquareTo(r) {
	    var x = this.abs();
	    var i = r.t = 2*x.t;
	    while(--i >= 0) r[i] = 0;
	    for(i = 0; i < x.t-1; ++i) {
	      var c = x.am(i,x[i],r,2*i,0,1);
	      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
	        r[i+x.t] -= x.DV;
	        r[i+x.t+1] = 1;
	      }
	    }
	    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
	    r.s = 0;
	    r.clamp();
	  }

	  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	  // r != q, this != m.  q or r may be null.
	  function bnpDivRemTo(m,q,r) {
	    var pm = m.abs();
	    if(pm.t <= 0) return;
	    var pt = this.abs();
	    if(pt.t < pm.t) {
	      if(q != null) q.fromInt(0);
	      if(r != null) this.copyTo(r);
	      return;
	    }
	    if(r == null) r = nbi();
	    var y = nbi(), ts = this.s, ms = m.s;
	    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
	    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
	    else { pm.copyTo(y); pt.copyTo(r); }
	    var ys = y.t;
	    var y0 = y[ys-1];
	    if(y0 == 0) return;
	    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
	    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
	    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
	    y.dlShiftTo(j,t);
	    if(r.compareTo(t) >= 0) {
	      r[r.t++] = 1;
	      r.subTo(t,r);
	    }
	    BigInteger.ONE.dlShiftTo(ys,t);
	    t.subTo(y,y);	// "negative" y so we can replace sub with am later
	    while(y.t < ys) y[y.t++] = 0;
	    while(--j >= 0) {
	      // Estimate quotient digit
	      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
	      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
	        y.dlShiftTo(j,t);
	        r.subTo(t,r);
	        while(r[i] < --qd) r.subTo(t,r);
	      }
	    }
	    if(q != null) {
	      r.drShiftTo(ys,q);
	      if(ts != ms) BigInteger.ZERO.subTo(q,q);
	    }
	    r.t = ys;
	    r.clamp();
	    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
	    if(ts < 0) BigInteger.ZERO.subTo(r,r);
	  }

	  // (public) this mod a
	  function bnMod(a) {
	    var r = nbi();
	    this.abs().divRemTo(a,null,r);
	    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
	    return r;
	  }

	  // Modular reduction using "classic" algorithm
	  function Classic(m) { this.m = m; }
	  function cConvert(x) {
	    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
	    else return x;
	  }
	  function cRevert(x) { return x; }
	  function cReduce(x) { x.divRemTo(this.m,null,x); }
	  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
	  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	  Classic.prototype.convert = cConvert;
	  Classic.prototype.revert = cRevert;
	  Classic.prototype.reduce = cReduce;
	  Classic.prototype.mulTo = cMulTo;
	  Classic.prototype.sqrTo = cSqrTo;

	  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	  // justification:
	  //         xy == 1 (mod m)
	  //         xy =  1+km
	  //   xy(2-xy) = (1+km)(1-km)
	  // x[y(2-xy)] = 1-k^2m^2
	  // x[y(2-xy)] == 1 (mod m^2)
	  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	  // JS multiply "overflows" differently from C/C++, so care is needed here.
	  function bnpInvDigit() {
	    if(this.t < 1) return 0;
	    var x = this[0];
	    if((x&1) == 0) return 0;
	    var y = x&3;		// y == 1/x mod 2^2
	    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
	    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
	    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
	    // last step - calculate inverse mod DV directly;
	    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
	    // we really want the negative inverse, and -DV < y < DV
	    return (y>0)?this.DV-y:-y;
	  }

	  // Montgomery reduction
	  function Montgomery(m) {
	    this.m = m;
	    this.mp = m.invDigit();
	    this.mpl = this.mp&0x7fff;
	    this.mph = this.mp>>15;
	    this.um = (1<<(m.DB-15))-1;
	    this.mt2 = 2*m.t;
	  }

	  // xR mod m
	  function montConvert(x) {
	    var r = nbi();
	    x.abs().dlShiftTo(this.m.t,r);
	    r.divRemTo(this.m,null,r);
	    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
	    return r;
	  }

	  // x/R mod m
	  function montRevert(x) {
	    var r = nbi();
	    x.copyTo(r);
	    this.reduce(r);
	    return r;
	  }

	  // x = x/R mod m (HAC 14.32)
	  function montReduce(x) {
	    while(x.t <= this.mt2)	// pad x so am has enough room later
	      x[x.t++] = 0;
	    for(var i = 0; i < this.m.t; ++i) {
	      // faster way of calculating u0 = x[i]*mp mod DV
	      var j = x[i]&0x7fff;
	      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
	      // use am to combine the multiply-shift-add into one call
	      j = i+this.m.t;
	      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
	      // propagate carry
	      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
	    }
	    x.clamp();
	    x.drShiftTo(this.m.t,x);
	    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	  }

	  // r = "x^2/R mod m"; x != r
	  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	  // r = "xy/R mod m"; x,y != r
	  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	  Montgomery.prototype.convert = montConvert;
	  Montgomery.prototype.revert = montRevert;
	  Montgomery.prototype.reduce = montReduce;
	  Montgomery.prototype.mulTo = montMulTo;
	  Montgomery.prototype.sqrTo = montSqrTo;

	  // (protected) true iff this is even
	  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

	  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	  function bnpExp(e,z) {
	    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
	    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
	    g.copyTo(r);
	    while(--i >= 0) {
	      z.sqrTo(r,r2);
	      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
	      else { var t = r; r = r2; r2 = t; }
	    }
	    return z.revert(r);
	  }

	  // (public) this^e % m, 0 <= e < 2^32
	  function bnModPowInt(e,m) {
	    var z;
	    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	    return this.exp(e,z);
	  }

	  // protected
	  BigInteger.prototype.copyTo = bnpCopyTo;
	  BigInteger.prototype.fromInt = bnpFromInt;
	  BigInteger.prototype.fromString = bnpFromString;
	  BigInteger.prototype.clamp = bnpClamp;
	  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	  BigInteger.prototype.lShiftTo = bnpLShiftTo;
	  BigInteger.prototype.rShiftTo = bnpRShiftTo;
	  BigInteger.prototype.subTo = bnpSubTo;
	  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	  BigInteger.prototype.squareTo = bnpSquareTo;
	  BigInteger.prototype.divRemTo = bnpDivRemTo;
	  BigInteger.prototype.invDigit = bnpInvDigit;
	  BigInteger.prototype.isEven = bnpIsEven;
	  BigInteger.prototype.exp = bnpExp;

	  // public
	  BigInteger.prototype.toString = bnToString;
	  BigInteger.prototype.negate = bnNegate;
	  BigInteger.prototype.abs = bnAbs;
	  BigInteger.prototype.compareTo = bnCompareTo;
	  BigInteger.prototype.bitLength = bnBitLength;
	  BigInteger.prototype.mod = bnMod;
	  BigInteger.prototype.modPowInt = bnModPowInt;

	  // "constants"
	  BigInteger.ZERO = nbv(0);
	  BigInteger.ONE = nbv(1);

	  // jsbn2 stuff

	  // (protected) convert from radix string
	  function bnpFromRadix(s,b) {
	    this.fromInt(0);
	    if(b == null) b = 10;
	    var cs = this.chunkSize(b);
	    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
	    for(var i = 0; i < s.length; ++i) {
	      var x = intAt(s,i);
	      if(x < 0) {
	        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
	        continue;
	      }
	      w = b*w+x;
	      if(++j >= cs) {
	        this.dMultiply(d);
	        this.dAddOffset(w,0);
	        j = 0;
	        w = 0;
	      }
	    }
	    if(j > 0) {
	      this.dMultiply(Math.pow(b,j));
	      this.dAddOffset(w,0);
	    }
	    if(mi) BigInteger.ZERO.subTo(this,this);
	  }

	  // (protected) return x s.t. r^x < DV
	  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

	  // (public) 0 if this == 0, 1 if this > 0
	  function bnSigNum() {
	    if(this.s < 0) return -1;
	    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
	    else return 1;
	  }

	  // (protected) this *= n, this >= 0, 1 < n < DV
	  function bnpDMultiply(n) {
	    this[this.t] = this.am(0,n-1,this,0,0,this.t);
	    ++this.t;
	    this.clamp();
	  }

	  // (protected) this += n << w words, this >= 0
	  function bnpDAddOffset(n,w) {
	    if(n == 0) return;
	    while(this.t <= w) this[this.t++] = 0;
	    this[w] += n;
	    while(this[w] >= this.DV) {
	      this[w] -= this.DV;
	      if(++w >= this.t) this[this.t++] = 0;
	      ++this[w];
	    }
	  }

	  // (protected) convert to radix string
	  function bnpToRadix(b) {
	    if(b == null) b = 10;
	    if(this.signum() == 0 || b < 2 || b > 36) return "0";
	    var cs = this.chunkSize(b);
	    var a = Math.pow(b,cs);
	    var d = nbv(a), y = nbi(), z = nbi(), r = "";
	    this.divRemTo(d,y,z);
	    while(y.signum() > 0) {
	      r = (a+z.intValue()).toString(b).substr(1) + r;
	      y.divRemTo(d,y,z);
	    }
	    return z.intValue().toString(b) + r;
	  }

	  // (public) return value as integer
	  function bnIntValue() {
	    if(this.s < 0) {
	      if(this.t == 1) return this[0]-this.DV;
	      else if(this.t == 0) return -1;
	    }
	    else if(this.t == 1) return this[0];
	    else if(this.t == 0) return 0;
	    // assumes 16 < DB < 32
	    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
	  }

	  // (protected) r = this + a
	  function bnpAddTo(a,r) {
	    var i = 0, c = 0, m = Math.min(a.t,this.t);
	    while(i < m) {
	      c += this[i]+a[i];
	      r[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    if(a.t < this.t) {
	      c += a.s;
	      while(i < this.t) {
	        c += this[i];
	        r[i++] = c&this.DM;
	        c >>= this.DB;
	      }
	      c += this.s;
	    }
	    else {
	      c += this.s;
	      while(i < a.t) {
	        c += a[i];
	        r[i++] = c&this.DM;
	        c >>= this.DB;
	      }
	      c += a.s;
	    }
	    r.s = (c<0)?-1:0;
	    if(c > 0) r[i++] = c;
	    else if(c < -1) r[i++] = this.DV+c;
	    r.t = i;
	    r.clamp();
	  }

	  BigInteger.prototype.fromRadix = bnpFromRadix;
	  BigInteger.prototype.chunkSize = bnpChunkSize;
	  BigInteger.prototype.signum = bnSigNum;
	  BigInteger.prototype.dMultiply = bnpDMultiply;
	  BigInteger.prototype.dAddOffset = bnpDAddOffset;
	  BigInteger.prototype.toRadix = bnpToRadix;
	  BigInteger.prototype.intValue = bnIntValue;
	  BigInteger.prototype.addTo = bnpAddTo;

	  //======= end jsbn =======

	  // Emscripten wrapper
	  var Wrapper = {
	    abs: function(l, h) {
	      var x = new goog.math.Long(l, h);
	      var ret;
	      if (x.isNegative()) {
	        ret = x.negate();
	      } else {
	        ret = x;
	      }
	      HEAP32[tempDoublePtr>>2] = ret.low_;
	      HEAP32[tempDoublePtr+4>>2] = ret.high_;
	    },
	    ensureTemps: function() {
	      if (Wrapper.ensuredTemps) return;
	      Wrapper.ensuredTemps = true;
	      Wrapper.two32 = new BigInteger();
	      Wrapper.two32.fromString('4294967296', 10);
	      Wrapper.two64 = new BigInteger();
	      Wrapper.two64.fromString('18446744073709551616', 10);
	      Wrapper.temp1 = new BigInteger();
	      Wrapper.temp2 = new BigInteger();
	    },
	    lh2bignum: function(l, h) {
	      var a = new BigInteger();
	      a.fromString(h.toString(), 10);
	      var b = new BigInteger();
	      a.multiplyTo(Wrapper.two32, b);
	      var c = new BigInteger();
	      c.fromString(l.toString(), 10);
	      var d = new BigInteger();
	      c.addTo(b, d);
	      return d;
	    },
	    stringify: function(l, h, unsigned) {
	      var ret = new goog.math.Long(l, h).toString();
	      if (unsigned && ret[0] == '-') {
	        // unsign slowly using jsbn bignums
	        Wrapper.ensureTemps();
	        var bignum = new BigInteger();
	        bignum.fromString(ret, 10);
	        ret = new BigInteger();
	        Wrapper.two64.addTo(bignum, ret);
	        ret = ret.toString(10);
	      }
	      return ret;
	    },
	    fromString: function(str, base, min, max, unsigned) {
	      Wrapper.ensureTemps();
	      var bignum = new BigInteger();
	      bignum.fromString(str, base);
	      var bigmin = new BigInteger();
	      bigmin.fromString(min, 10);
	      var bigmax = new BigInteger();
	      bigmax.fromString(max, 10);
	      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
	        var temp = new BigInteger();
	        bignum.addTo(Wrapper.two64, temp);
	        bignum = temp;
	      }
	      var error = false;
	      if (bignum.compareTo(bigmin) < 0) {
	        bignum = bigmin;
	        error = true;
	      } else if (bignum.compareTo(bigmax) > 0) {
	        bignum = bigmax;
	        error = true;
	      }
	      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
	      HEAP32[tempDoublePtr>>2] = ret.low_;
	      HEAP32[tempDoublePtr+4>>2] = ret.high_;
	      if (error) throw 'range error';
	    }
	  };
	  return Wrapper;
	})();

	//======= end closure i64 code =======



	// === Auto-generated postamble setup entry stuff ===

	if (memoryInitializer) {
	  if (typeof Module['locateFile'] === 'function') {
	    memoryInitializer = Module['locateFile'](memoryInitializer);
	  } else if (Module['memoryInitializerPrefixURL']) {
	    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
	  }
	  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
	    var data = Module['readBinary'](memoryInitializer);
	    HEAPU8.set(data, STATIC_BASE);
	  } else {
	    addRunDependency('memory initializer');
	    Browser.asyncLoad(memoryInitializer, function(data) {
	      for (var i = 0; i < data.length; i++) {
	        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
	      }
	      HEAPU8.set(data, STATIC_BASE);
	      removeRunDependency('memory initializer');
	    }, function(data) {
	      throw 'could not load memory initializer ' + memoryInitializer;
	    });
	  }
	}

	function ExitStatus(status) {
	  this.name = "ExitStatus";
	  this.message = "Program terminated with exit(" + status + ")";
	  this.status = status;
	};
	ExitStatus.prototype = new Error();
	ExitStatus.prototype.constructor = ExitStatus;

	var initialStackTop;
	var preloadStartTime = null;
	var calledMain = false;

	dependenciesFulfilled = function runCaller() {
	  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
	  if (!Module['calledRun'] && shouldRunNow) run();
	  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
	}

	Module['callMain'] = Module.callMain = function callMain(args) {
	  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
	  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

	  args = args || [];

	  ensureInitRuntime();

	  var argc = args.length+1;
	  function pad() {
	    for (var i = 0; i < 4-1; i++) {
	      argv.push(0);
	    }
	  }
	  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
	  pad();
	  for (var i = 0; i < argc-1; i = i + 1) {
	    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
	    pad();
	  }
	  argv.push(0);
	  argv = allocate(argv, 'i32', ALLOC_NORMAL);

	  initialStackTop = STACKTOP;

	  try {

	    var ret = Module['_main'](argc, argv, 0);


	    // if we're not running an evented main loop, it's time to exit
	    exit(ret);
	  }
	  catch(e) {
	    if (e instanceof ExitStatus) {
	      // exit() throws this once it's done to make sure execution
	      // has been stopped completely
	      return;
	    } else if (e == 'SimulateInfiniteLoop') {
	      // running an evented main loop, don't immediately exit
	      Module['noExitRuntime'] = true;
	      return;
	    } else {
	      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
	      throw e;
	    }
	  } finally {
	    calledMain = true;
	  }
	}




	function run(args) {
	  args = args || Module['arguments'];

	  if (preloadStartTime === null) preloadStartTime = Date.now();

	  if (runDependencies > 0) {
	    Module.printErr('run() called, but dependencies remain, so not running');
	    return;
	  }

	  preRun();

	  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
	  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

	  function doRun() {
	    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
	    Module['calledRun'] = true;

	    if (ABORT) return;

	    ensureInitRuntime();

	    preMain();

	    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
	      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
	    }

	    if (Module['_main'] && shouldRunNow) {
	      Module['callMain'](args);
	    }

	    postRun();
	  }

	  if (Module['setStatus']) {
	    Module['setStatus']('Running...');
	    setTimeout(function() {
	      setTimeout(function() {
	        Module['setStatus']('');
	      }, 1);
	      doRun();
	    }, 1);
	  } else {
	    doRun();
	  }
	}
	Module['run'] = Module.run = run;

	function exit(status) {
	  if (Module['noExitRuntime']) {
	    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
	    return;
	  }

	  ABORT = true;
	  EXITSTATUS = status;
	  STACKTOP = initialStackTop;

	  // exit the runtime
	  exitRuntime();

	  if (ENVIRONMENT_IS_NODE) {
	    // Work around a node.js bug where stdout buffer is not flushed at process exit:
	    // Instead of process.exit() directly, wait for stdout flush event.
	    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
	    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
	    process['stdout']['once']('drain', function () {
	      process['exit'](status);
	    });
	    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
	    // Work around another node bug where sometimes 'drain' is never fired - make another effort
	    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
	    setTimeout(function() {
	      process['exit'](status);
	    }, 500);
	  } else
	  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
	    quit(status);
	  }
	  // if we reach here, we must throw an exception to halt the current execution
	  throw new ExitStatus(status);
	}
	Module['exit'] = Module.exit = exit;

	function abort(text) {
	  if (text) {
	    Module.print(text);
	    Module.printErr(text);
	  }

	  ABORT = true;
	  EXITSTATUS = 1;

	  var extra = '';

	  throw 'abort() at ' + stackTrace() + extra;
	}
	Module['abort'] = Module.abort = abort;

	// {{PRE_RUN_ADDITIONS}}

	if (Module['preInit']) {
	  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
	  while (Module['preInit'].length > 0) {
	    Module['preInit'].pop()();
	  }
	}

	// shouldRunNow refers to calling main(), not run().
	var shouldRunNow = true;
	if (Module['noInitialRun']) {
	  shouldRunNow = false;
	}


	run();

	// {{POST_RUN_ADDITIONS}}






	// {{MODULE_ADDITIONS}}



	// Copyright (C) 2013:
	//    Alex Russell <slightlyoff@chromium.org>
	//    Yehuda Katz
	//
	// Use of this source code is governed by
	//    http://www.apache.org/licenses/LICENSE-2.0

	// FIXME(slightlyoff):
	//    - Document "npm test"
	//    - Change global name from "Promise" to something less conflicty
	(function(global, browserGlobal, underTest) {
	"use strict";

	// FIXME(slighltyoff):
	//  * aggregates + tests
	//  * check on fast-forwarding

	underTest = !!underTest;

	//
	// Async Utilities
	//

	// Borrowed from RSVP.js
	var async;

	var MutationObserver = browserGlobal.MutationObserver ||
	                       browserGlobal.WebKitMutationObserver;
	var Promise;

	if (typeof process !== 'undefined' &&
	  {}.toString.call(process) === '[object process]') {
	  async = function(callback, binding) {
	    process.nextTick(function() {
	      callback.call(binding);
	    });
	  };
	} else if (MutationObserver) {
	  var queue = [];

	  var observer = new MutationObserver(function() {
	    var toProcess = queue.slice();
	    queue = [];
	    toProcess.forEach(function(tuple) {
	      tuple[0].call(tuple[1]);
	    });
	  });

	  var element = document.createElement('div');
	  observer.observe(element, { attributes: true });

	  // Chrome Memory Leak: https://bugs.webkit.org/show_bug.cgi?id=93661
	  window.addEventListener('unload', function(){
	    observer.disconnect();
	    observer = null;
	  });

	  async = function(callback, binding) {
	    queue.push([callback, binding]);
	    element.setAttribute('drainQueue', 'drainQueue');
	  };
	} else {
	  async = function(callback, binding) {
	    setTimeout(function() {
	      callback.call(binding);
	    }, 1);
	  };
	}

	//
	// Object Model Utilities
	//

	// defineProperties utilities
	var _readOnlyProperty = function(v) {
	    return {
	      enumerable: true,
	      configurable: false,
	      get: v
	    };
	};

	var _method = function(v, e, c, w) {
	    return {
	      enumerable:   !!(e || 0),
	      configurable: !!(c || 1),
	      writable:     !!(w || 1),
	      value:           v || function() {}
	    };
	};

	var _pseudoPrivate = function(v) { return _method(v, 0, 1, 0); };
	var _public = function(v) { return _method(v, 1); };

	//
	// Promises Utilities
	//

	var isThenable = function(any) {
	  try {
	    var f = any.then;
	    if (typeof f == "function") {
	      return true;
	    }
	  } catch (e) { /*squelch*/ }
	  return false;
	};

	var AlreadyResolved = function(name) {
	  Error.call(this, name);
	};
	AlreadyResolved.prototype = Object.create(Error.prototype);

	var Backlog = function() {
	  var bl = [];
	  bl.pump = function(value) {
	    async(function() {
	      var l = bl.length;
	      var x = 0;
	      while(x < l) {
	        x++;
	        bl.shift()(value);
	      }
	    });
	  };
	  return bl;
	};

	//
	// Resolver Constuctor
	//

	var Resolver = function(future,
	                        fulfillCallbacks,
	                        rejectCallbacks,
	                        setValue,
	                        setError,
	                        setState) {
	  var isResolved = false;

	  var resolver = this;
	  var fulfill = function(value) {
	    // console.log("queueing fulfill with:", value);
	    async(function() {
	      setState("fulfilled");
	      setValue(value);
	      // console.log("fulfilling with:", value);
	      fulfillCallbacks.pump(value);
	    });
	  };
	  var reject = function(reason) {
	    // console.log("queuing reject with:", reason);
	    async(function() {
	      setState("rejected");
	      setError(reason);
	      // console.log("rejecting with:", reason);
	      rejectCallbacks.pump(reason);
	    });
	  };
	  var resolve = function(value) {
	    if (isThenable(value)) {
	      value.then(resolve, reject);
	      return;
	    }
	    fulfill(value);
	  };
	  var ifNotResolved = function(func, name) {
	    return function(value) {
	      if (!isResolved) {
	        isResolved = true;
	        func(value);
	      } else {
	        if (typeof console != "undefined") {
	          console.error("Cannot resolve a Promise multiple times.");
	        }
	      }
	    };
	  };

	  // Indirectly resolves the Promise, chaining any passed Promise's resolution
	  this.resolve = ifNotResolved(resolve, "resolve");

	  // Directly fulfills the future, no matter what value's type is
	  this.fulfill = ifNotResolved(fulfill, "fulfill");

	  // Rejects the future
	  this.reject = ifNotResolved(reject, "reject");

	  this.cancel  = function() { resolver.reject(new Error("Cancel")); };
	  this.timeout = function() { resolver.reject(new Error("Timeout")); };

	  if (underTest) {
	    Object.defineProperties(this, {
	      _isResolved: _readOnlyProperty(function() { return isResolved; }),
	    });
	  }

	  setState("pending");
	};

	//
	// Promise Constuctor
	//

	var Promise = function(init) {
	  var fulfillCallbacks = new Backlog();
	  var rejectCallbacks = new Backlog();
	  var value;
	  var error;
	  var state = "pending";

	  if (underTest) {
	    Object.defineProperties(this, {
	      _value: _readOnlyProperty(function() { return value; }),
	      _error: _readOnlyProperty(function() { return error; }),
	      _state: _readOnlyProperty(function() { return state; }),
	    });
	  }

	  Object.defineProperties(this, {
	    _addAcceptCallback: _pseudoPrivate(
	      function(cb) {
	        // console.log("adding fulfill callback:", cb);
	        fulfillCallbacks.push(cb);
	        if (state == "fulfilled") {
	          fulfillCallbacks.pump(value);
	        }
	      }
	    ),
	    _addRejectCallback: _pseudoPrivate(
	      function(cb) {
	        // console.log("adding reject callback:", cb);
	        rejectCallbacks.push(cb);
	        if (state == "rejected") {
	          rejectCallbacks.pump(error);
	        }
	      }
	    ),
	  });
	  var r = new Resolver(this,
	                       fulfillCallbacks, rejectCallbacks,
	                       function(v) { value = v; },
	                       function(e) { error = e; },
	                       function(s) { state = s; })
	  try {
	    if (init) { init(r); }
	  } catch(e) {
	    r.reject(e);
	  }
	};

	//
	// Consructor
	//

	var isCallback = function(any) {
	  return (typeof any == "function");
	};

	// Used in .then()
	var wrap = function(callback, resolver, disposition) {
	  if (!isCallback(callback)) {
	    // If we don't get a callback, we want to forward whatever resolution we get
	    return resolver[disposition].bind(resolver);
	  }

	  return function() {
	    try {
	      var r = callback.apply(null, arguments);
	      resolver.resolve(r);
	    } catch(e) {
	      // Exceptions reject the resolver
	      resolver.reject(e);
	    }
	  };
	};

	var addCallbacks = function(onfulfill, onreject, scope) {
	  if (isCallback(onfulfill)) {
	    scope._addAcceptCallback(onfulfill);
	  }
	  if (isCallback(onreject)) {
	    scope._addRejectCallback(onreject);
	  }
	  return scope;
	};

	//
	// Prototype properties
	//

	Promise.prototype = Object.create(null, {
	  "then": _public(function(onfulfill, onreject) {
	    // The logic here is:
	    //    We return a new Promise whose resolution merges with the return from
	    //    onfulfill() or onerror(). If onfulfill() returns a Promise, we forward
	    //    the resolution of that future to the resolution of the returned
	    //    Promise.
	    var f = this;
	    return new Promise(function(r) {
	      addCallbacks(wrap(onfulfill, r, "resolve"),
	                   wrap(onreject, r, "reject"), f);
	    });
	  }),
	  "catch": _public(function(onreject) {
	    var f = this;
	    return new Promise(function(r) {
	      addCallbacks(null, wrap(onreject, r, "reject"), f);
	    });
	  }),
	});

	//
	// Statics
	//

	Promise.isThenable = isThenable;

	var toPromiseList = function(list) {
	  return Array.prototype.slice.call(list).map(Promise.resolve);
	};

	Promise.any = function(/*...futuresOrValues*/) {
	  var futures = toPromiseList(arguments);
	  return new Promise(function(r) {
	    if (!futures.length) {
	      r.reject("No futures passed to Promise.any()");
	    } else {
	      var resolved = false;
	      var firstSuccess = function(value) {
	        if (resolved) { return; }
	        resolved = true;
	        r.resolve(value);
	      };
	      var firstFailure = function(reason) {
	        if (resolved) { return; }
	        resolved = true;
	        r.reject(reason);
	      };
	      futures.forEach(function(f, idx) {
	        f.then(firstSuccess, firstFailure);
	      });
	    }
	  });
	};

	Promise.every = function(/*...futuresOrValues*/) {
	  var futures = toPromiseList(arguments);
	  return new Promise(function(r) {
	    if (!futures.length) {
	      r.reject("No futures passed to Promise.every()");
	    } else {
	      var values = new Array(futures.length);
	      var count = 0;
	      var accumulate = function(idx, v) {
	        count++;
	        values[idx] = v;
	        if (count == futures.length) {
	          r.resolve(values);
	        }
	      };
	      futures.forEach(function(f, idx) {
	        f.then(accumulate.bind(null, idx), r.reject);
	      });
	    }
	  });
	};

	Promise.some = function() {
	  var futures = toPromiseList(arguments);
	  return new Promise(function(r) {
	    if (!futures.length) {
	      r.reject("No futures passed to Promise.some()");
	    } else {
	      var count = 0;
	      var accumulateFailures = function(e) {
	        count++;
	        if (count == futures.length) {
	          r.reject();
	        }
	      };
	      futures.forEach(function(f, idx) {
	        f.then(r.resolve, accumulateFailures);
	      });
	    }
	  });
	};

	Promise.fulfill = function(value) {
	  return new Promise(function(r) {
	    r.fulfill(value);
	  });
	};

	Promise.resolve = function(value) {
	  return new Promise(function(r) {
	    r.resolve(value);
	  });
	};

	Promise.reject = function(reason) {
	  return new Promise(function(r) {
	    r.reject(reason);
	  });
	};

	//
	// Export
	//

	global.Promise = Promise;

	})(this,
	  (typeof window !== 'undefined') ? window : {},
	  this.runningUnderTest||false);
	// xmms_playback_seek_mode_t
	xmmsclient.XMMS_PLAYBACK_SEEK_CUR = 1;
	xmmsclient.XMMS_PLAYBACK_SEEK_SET = 2;

	// xmmsv_coll_type_t
	xmmsclient.XMMS_COLLECTION_TYPE_REFERENCE = 0;
	xmmsclient.XMMS_COLLECTION_TYPE_UNIVERSE = 1;
	xmmsclient.XMMS_COLLECTION_TYPE_UNION = 2;
	xmmsclient.XMMS_COLLECTION_TYPE_INTERSECTION = 3;
	xmmsclient.XMMS_COLLECTION_TYPE_COMPLEMENT = 4;
	xmmsclient.XMMS_COLLECTION_TYPE_HAS = 5;
	xmmsclient.XMMS_COLLECTION_TYPE_MATCH = 6;
	xmmsclient.XMMS_COLLECTION_TYPE_TOKEN = 7;
	xmmsclient.XMMS_COLLECTION_TYPE_EQUALS = 8;
	xmmsclient.XMMS_COLLECTION_TYPE_NOTEQUAL = 9;
	xmmsclient.XMMS_COLLECTION_TYPE_SMALLER = 10;
	xmmsclient.XMMS_COLLECTION_TYPE_SMALLEREQ = 11;
	xmmsclient.XMMS_COLLECTION_TYPE_GREATER = 12;
	xmmsclient.XMMS_COLLECTION_TYPE_GREATEREQ = 13;
	xmmsclient.XMMS_COLLECTION_TYPE_ORDER = 14;
	xmmsclient.XMMS_COLLECTION_TYPE_LIMIT = 15;
	xmmsclient.XMMS_COLLECTION_TYPE_MEDIASET = 16;
	xmmsclient.XMMS_COLLECTION_TYPE_IDLIST = 17;

	// xmms_playback_status_t
	xmmsclient.XMMS_PLAYBACK_STATUS_STOP = 0;
	xmmsclient.XMMS_PLAYBACK_STATUS_PLAY = 1;
	xmmsclient.XMMS_PLAYBACK_STATUS_PAUSE = 2;

	// xmms_playlist_changed_actions_t
	xmmsclient.XMMS_PLAYLIST_CHANGED_ADD = 0;
	xmmsclient.XMMS_PLAYLIST_CHANGED_INSERT = 1;
	xmmsclient.XMMS_PLAYLIST_CHANGED_SHUFFLE = 2;
	xmmsclient.XMMS_PLAYLIST_CHANGED_REMOVE = 3;
	xmmsclient.XMMS_PLAYLIST_CHANGED_CLEAR = 4;
	xmmsclient.XMMS_PLAYLIST_CHANGED_MOVE = 5;
	xmmsclient.XMMS_PLAYLIST_CHANGED_SORT = 6;
	xmmsclient.XMMS_PLAYLIST_CHANGED_UPDATE = 7;
	xmmsclient.XMMS_PLAYLIST_CHANGED_REPLACE = 8;

	xmmsclient.collections = {};

	function Collection(type, operands, attributes) {
	  this.idlist = []; // XXX not implemented
	  this.type = type;
	  this.operands = operands ? operands : [];
	  this.attributes = attributes ? attributes : {};
	}

	Collection.prototype.attr = function coll_attr(key, value) {
	  this.attributes[key] = value;
	  return this;
	}

	Collection.prototype.op = function coll_op(operand) {
	  this.operands.push(operand);
	  return this;
	}

	xmmsclient.collections.Collection = Collection;

	// XXX Collection.prototype.equals = ...?

	function Order() {
	  // XXX not implemented
	}

	function Limit() {
	  // XXX not implemented
	}

	function MediaSet() {
	  // XXX not implemented
	}

	function IdList() {
	  // XXX not implemented
	}

	function Reference(to, namespace) {
	  if (namespace === undefined) {
	    namespace = "Collections";
	  }

	  return new Collection(xmmsclient.XMMS_COLLECTION_TYPE_REFERENCE, [],
	                        {"namespace": namespace, "reference": to});
	}

	function Universe() {
	  return new Reference("All Media", "Collections");
	}

	xmmsclient.collections.Universe = Universe;

	function UnaryFilter(type, field, parent) {
	  if (parent === undefined) {
	    parent = Universe();
	  }

	  return new Collection(type, [parent], {"field": field});
	}

	xmmsclient.collections.Has = UnaryFilter.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_HAS);
	xmmsclient.collections.Token = UnaryFilter.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_TOKEN); // XXX

	function BinaryFilter(type, field, value, parent) {
	  if (parent === undefined) {
	    parent = Universe();
	  }

	  return new Collection(type, [parent], {"field": field, "value": value});
	}

	xmmsclient.collections.Match = BinaryFilter.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_MATCH); // XXX
	xmmsclient.collections.Equals = BinaryFilter.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_EQUALS);
	xmmsclient.collections.NotEqual = BinaryFilter.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_NOTEQUAL);
	xmmsclient.collections.Smaller = BinaryFilter.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_SMALLER);
	xmmsclient.collections.SmallerEqual = BinaryFilter.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_SMALLEREQ);
	xmmsclient.collections.Greater = BinaryFilter.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_GREATER);
	xmmsclient.collections.GreaterEqual = BinaryFilter.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_GREATEREQ);

	function SetOperation() {
	  var type = arguments[0],
	      collections = Array.prototype.slice.call(arguments, 1);
	  return new Collection(type, collections);
	}

	xmmsclient.collections.Union = SetOperation.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_UNION);
	xmmsclient.collections.Intersection = SetOperation.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_INTERSECTION);
	xmmsclient.collections.Complement = SetOperation.bind(null, xmmsclient.XMMS_COLLECTION_TYPE_COMPLEMENT);

	xmmsclient.collections.coll_parse = function coll_parse(pattern) {
	  var pp = _malloc(8), ret = null;

	  var ok = Module.ccall('xmmsv_coll_parse', 'number', ['string', 'number'], [pattern, pp]);
	  if (ok) {
	    var p = getValue(pp, 'i64');
	    ret = jsobj_from_xmmsv(p);
	    _xmmsv_unref(p);
	  }

	  _free(pp);
	  return ret;
	}
	var XMMSV_TYPES = [
	  'none',
	  'error',
	  'int64',
	  'string',
	  'coll',
	  'bin',
	  'list',
	  'dict',
	  'bitbuffer',
	  'float',
	  'end'
	];

	var xv_to_js_converters = {
	  'none': function(xval) {
	    return null;
	  },

	  'error': function(xval) {
	    var pp = _malloc(8), ret = null;

	    if (_xmmsv_get_error(xval, pp)) {
	      var p = getValue(pp, 'i64');
	      ret = Pointer_stringify(p);
	    }

	    _free(pp);
	    return ret;
	  },

	  'int64': function(xval) {
	    var p = _malloc(8), ret = null;

	    if (_xmmsv_get_int64(xval, p)) {
	      ret = getValue(p, 'i64');
	    }

	    _free(p);
	    return ret;
	  },

	  'string': function(xval) {
	    var pp = _malloc(8), ret = null;

	    if (_xmmsv_get_string(xval, pp)) {
	      var p = getValue(pp, 'i64');
	      ret = Pointer_stringify(p);
	    }

	    _free(pp);
	    return ret;
	  },

	  'list': function(xval) {
	    var ppit = _malloc(8), ppv = _malloc(8), ret = [];

	    _xmmsv_get_list_iter(xval, ppit);
	    var pit = getValue(ppit, 'i64');

	    while (_xmmsv_list_iter_valid(pit)) {
	      _xmmsv_list_iter_entry(pit, ppv);
	      var pv = getValue(ppv, 'i64');

	      ret.push(jsobj_from_xmmsv(pv))
	      _xmmsv_list_iter_next(pit);
	    }

	    _free(ppit);
	    _free(ppv);
	    return ret;
	  },

	  'dict': function(xval) {
	    var ppit = _malloc(8),
	        ppk = _malloc(8),
	        ppv = _malloc(8),
	        ret = {};

	    _xmmsv_get_dict_iter(xval, ppit);
	    var pit = getValue(ppit, 'i64');

	    while (_xmmsv_dict_iter_valid(pit)) {
	      _xmmsv_dict_iter_pair(pit, ppk, ppv);

	      var pk = getValue(ppk, 'i64'),
	          pv = getValue(ppv, 'i64');

	      ret[Pointer_stringify(pk)] = jsobj_from_xmmsv(pv);
	      _xmmsv_dict_iter_next(pit);
	    }

	    _free(ppit);
	    _free(ppk);
	    _free(ppv);
	    return ret;
	  },

	  'coll': function(xval) {
	    var type = _xmmsv_coll_get_type(xval),
	        ops = jsobj_from_xmmsv(_xmmsv_coll_operands_get(xval)),
	        attrs = jsobj_from_xmmsv(_xmmsv_coll_attributes_get(xval));

	    // XXX idlist not implemented
	    return new Collection(type, ops, attrs);
	  }
	};

	function jsobj_from_xmmsv(xval) {
	  var type = XMMSV_TYPES[_xmmsv_get_type(xval)];

	  if (type in xv_to_js_converters) {
	    return xv_to_js_converters[type](xval);
	  } else {
	    console.err("No converter for xmmsv of type '" + type + "'");
	  }
	}

	var js_to_xv_converters = {
	  'Number': function(jsnum) {
	    return _xmmsv_new_int(jsnum);
	  },

	  'String': function(jsstr) {
	    return Module.ccall('xmmsv_new_string', 'number', ['string'], [jsstr]);
	  },

	  'Array': function(jsarray) {
	    var pxlist = _xmmsv_new_list();

	    for (var i = 0; i < jsarray.length; i++) {
	      var pxitem = xmmsv_from_jsobj(jsarray[i]);
	      _xmmsv_list_append(pxlist, pxitem);
	    }

	    return pxlist;
	  },

	  'Object': function(jsobj) {
	    var pxdict = _xmmsv_new_dict();

	    for (var key in jsobj) {
	      if (!jsobj.hasOwnProperty(key)) {
	        continue;
	      }
	      var val = xmmsv_from_jsobj(jsobj[key]);
	      Module.ccall('xmmsv_dict_set', 'number',
	                   ['number', 'string', 'number'], [pxdict, key, val]);
	    }

	    return pxdict;
	  },

	  'Collection': function(jscoll) {
	    var pxcoll = _xmmsv_new_coll(jscoll.type);

	    var pxattr = xmmsv_from_jsobj(jscoll.attributes);
	    _xmmsv_coll_attributes_set(pxcoll, pxattr);
	    _xmmsv_unref(pxattr);

	    var pxop = xmmsv_from_jsobj(jscoll.operands);
	    _xmmsv_coll_operands_set(pxcoll, pxop);
	    _xmmsv_unref(pxop);

	    return pxcoll;
	  }
	};

	function xmmsv_from_jsobj(jsobj) {
	  var type = jsobj.constructor.name;

	  if (type in js_to_xv_converters) {
	    return js_to_xv_converters[type](jsobj);
	  } else {
	    console.err("No converter for js object of type '" + type + "'");
	  }
	}
	var RESULT_TYPES = [
	  'default',
	  'signal',
	  'broadcast'
	];

	var results_to_callbacks = {};
	var results_to_resolvers = {};

	var xmmsc_emscripten_js_callback = function(xval, res) {
	  var type = RESULT_TYPES[_xmmsc_result_get_class(res)];
	  var jsval = jsobj_from_xmmsv(xval);

	  if (type == 'default') {
	    var resolver = results_to_resolvers[res];

	    if (_xmmsv_is_error(xval)) {
	      resolver.reject(jsval);
	    } else {
	      resolver.resolve(jsval);
	    }

	    delete results_to_resolvers[res];
	  } else {
	    var callback = results_to_callbacks[res];
	    var keep = !!callback(jsval, _xmmsv_is_error(xval));
	    if (!keep) {
	      delete results_to_callbacks[res];
	    }

	    return keep;
	  }
	}

	function add_callback_for_result(result, callback) {
	  _xmmsc_result_emscripten_notifier_set(result, result);
	  results_to_callbacks[result] = callback;
	}

	function promise_from_result(result) {
	  _xmmsc_result_emscripten_notifier_set(result, result);

	  return new Promise(function(resolver) {
	    results_to_resolvers[result] = resolver;
	  });
	}
	function XMMS2(client_name) {
		var _xc = Module.ccall('xmmsc_init', 'number', ['string'], [client_name]);

		this.connect = function(xmms_path) {
			Module.ccall('xmmsc_connect', 'number', ['number', 'string'], [_xc, xmms_path]);
			_xmmsc_mainloop_emscripten_init(_xc);
			return promise_from_result(_xmmsc_send_hello(_xc));
		};



		this.server_hello = function(protocol_version, client) {
			var res = Module.ccall('xmmsc_main_hello', 'number', ['number', 'number', 'string'], [_xc, protocol_version, client]);
			return promise_from_result(res);
		};

		this.server_quit = function() {
			var res = Module.ccall('xmmsc_main_quit', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.server_list_plugins = function(plugin_type) {
			var res = Module.ccall('xmmsc_main_list_plugins', 'number', ['number', 'number'], [_xc, plugin_type]);
			return promise_from_result(res);
		};

		this.server_stats = function() {
			var res = Module.ccall('xmmsc_main_stats', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};


		this.broadcast_main_quit = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_main_quit', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};



		this.playlist_replace = function(playlist, replacement, action) {
			replacement = xmmsv_from_jsobj(replacement);
			var res = Module.ccall('xmmsc_playlist_replace', 'number', ['number', 'string', 'number', 'number'], [_xc, playlist, replacement, action]);
			_xmmsv_unref(replacement);
			return promise_from_result(res);
		};

		this.playlist_set_next = function(position) {
			var res = Module.ccall('xmmsc_playlist_set_next', 'number', ['number', 'number'], [_xc, position]);
			return promise_from_result(res);
		};

		this.playlist_set_next_rel = function(position_delta) {
			var res = Module.ccall('xmmsc_playlist_set_next_rel', 'number', ['number', 'number'], [_xc, position_delta]);
			return promise_from_result(res);
		};

		this.playlist_add_url = function(name, url) {
			var res = Module.ccall('xmmsc_playlist_add_url', 'number', ['number', 'string', 'string'], [_xc, name, url]);
			return promise_from_result(res);
		};

		this.playlist_add_collection = function(name, collection) {
			collection = xmmsv_from_jsobj(collection);
			var res = Module.ccall('xmmsc_playlist_add_collection', 'number', ['number', 'string', 'number'], [_xc, name, collection]);
			_xmmsv_unref(collection);
			return promise_from_result(res);
		};

		this.playlist_remove_entry = function(playlist, position) {
			var res = Module.ccall('xmmsc_playlist_remove_entry', 'number', ['number', 'string', 'number'], [_xc, playlist, position]);
			return promise_from_result(res);
		};

		this.playlist_move_entry = function(playlist, current_position, new_position) {
			var res = Module.ccall('xmmsc_playlist_move_entry', 'number', ['number', 'string', 'number', 'number'], [_xc, playlist, current_position, new_position]);
			return promise_from_result(res);
		};

		this.playlist_list_entries = function(name) {
			var res = Module.ccall('xmmsc_playlist_list_entries', 'number', ['number', 'string'], [_xc, name]);
			return promise_from_result(res);
		};

		this.playlist_current_pos = function(name) {
			var res = Module.ccall('xmmsc_playlist_current_pos', 'number', ['number', 'string'], [_xc, name]);
			return promise_from_result(res);
		};

		this.playlist_current_active = function() {
			var res = Module.ccall('xmmsc_playlist_current_active', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.playlist_insert_url = function(name, position, url) {
			var res = Module.ccall('xmmsc_playlist_insert_url', 'number', ['number', 'string', 'number', 'string'], [_xc, name, position, url]);
			return promise_from_result(res);
		};

		this.playlist_insert_collection = function(name, position, collection) {
			collection = xmmsv_from_jsobj(collection);
			var res = Module.ccall('xmmsc_playlist_insert_collection', 'number', ['number', 'string', 'number', 'number'], [_xc, name, position, collection]);
			_xmmsv_unref(collection);
			return promise_from_result(res);
		};

		this.playlist_load = function(name) {
			var res = Module.ccall('xmmsc_playlist_load', 'number', ['number', 'string'], [_xc, name]);
			return promise_from_result(res);
		};

		this.playlist_radd = function(name, url) {
			var res = Module.ccall('xmmsc_playlist_radd', 'number', ['number', 'string', 'string'], [_xc, name, url]);
			return promise_from_result(res);
		};

		this.playlist_rinsert = function(name, position, url) {
			var res = Module.ccall('xmmsc_playlist_rinsert', 'number', ['number', 'string', 'number', 'string'], [_xc, name, position, url]);
			return promise_from_result(res);
		};


		this.broadcast_playlist_changed = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_playlist_changed', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};

		this.broadcast_playlist_current_pos = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_playlist_current_pos', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};

		this.broadcast_playlist_loaded = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_playlist_loaded', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};



		this.config_get_value = function(key) {
			var res = Module.ccall('xmmsc_config_get_value', 'number', ['number', 'string'], [_xc, key]);
			return promise_from_result(res);
		};

		this.config_set_value = function(key, value) {
			var res = Module.ccall('xmmsc_config_set_value', 'number', ['number', 'string', 'string'], [_xc, key, value]);
			return promise_from_result(res);
		};

		this.config_register_value = function(key, value) {
			var res = Module.ccall('xmmsc_config_register_value', 'number', ['number', 'string', 'string'], [_xc, key, value]);
			return promise_from_result(res);
		};

		this.config_list_values = function() {
			var res = Module.ccall('xmmsc_config_list_values', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};


		this.broadcast_config_value_changed = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_config_value_changed', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};



		this.playback_start = function() {
			var res = Module.ccall('xmmsc_playback_start', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.playback_stop = function() {
			var res = Module.ccall('xmmsc_playback_stop', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.playback_pause = function() {
			var res = Module.ccall('xmmsc_playback_pause', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.playback_tickle = function() {
			var res = Module.ccall('xmmsc_playback_tickle', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.playback_playtime = function() {
			var res = Module.ccall('xmmsc_playback_playtime', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.playback_seek_ms = function(offset_milliseconds, whence) {
			var res = Module.ccall('xmmsc_playback_seek_ms', 'number', ['number', 'number', 'number'], [_xc, offset_milliseconds, whence]);
			return promise_from_result(res);
		};

		this.playback_seek_samples = function(offset_samples, whence) {
			var res = Module.ccall('xmmsc_playback_seek_samples', 'number', ['number', 'number', 'number'], [_xc, offset_samples, whence]);
			return promise_from_result(res);
		};

		this.playback_status = function() {
			var res = Module.ccall('xmmsc_playback_status', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.playback_current_id = function() {
			var res = Module.ccall('xmmsc_playback_current_id', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.playback_volume_set = function(channel, volume) {
			var res = Module.ccall('xmmsc_playback_volume_set', 'number', ['number', 'string', 'number'], [_xc, channel, volume]);
			return promise_from_result(res);
		};

		this.playback_volume_get = function() {
			var res = Module.ccall('xmmsc_playback_volume_get', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};


		this.broadcast_playback_status = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_playback_status', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};

		this.broadcast_playback_volume_changed = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_playback_volume_changed', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};

		this.broadcast_playback_current_id = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_playback_current_id', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};


		this.signal_playback_playtime = function(callback) {
			var res = Module.ccall('xmmsc_signal_playback_playtime', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};


		this.medialib_get_info = function(id) {
			var res = Module.ccall('xmmsc_medialib_get_info', 'number', ['number', 'number'], [_xc, id]);
			return promise_from_result(res);
		};

		this.medialib_import_path = function(directory) {
			var res = Module.ccall('xmmsc_medialib_import_path', 'number', ['number', 'string'], [_xc, directory]);
			return promise_from_result(res);
		};

		this.medialib_rehash = function(id) {
			var res = Module.ccall('xmmsc_medialib_rehash', 'number', ['number', 'number'], [_xc, id]);
			return promise_from_result(res);
		};

		this.medialib_get_id = function(url) {
			var res = Module.ccall('xmmsc_medialib_get_id', 'number', ['number', 'string'], [_xc, url]);
			return promise_from_result(res);
		};

		this.medialib_remove_entry = function(entry) {
			var res = Module.ccall('xmmsc_medialib_remove_entry', 'number', ['number', 'number'], [_xc, entry]);
			return promise_from_result(res);
		};

		this.medialib_set_property_string = function(entry, source, key, value) {
			var res = Module.ccall('xmmsc_medialib_set_property_string', 'number', ['number', 'number', 'string', 'string', 'string'], [_xc, entry, source, key, value]);
			return promise_from_result(res);
		};

		this.medialib_set_property_int = function(entry, source, key, value) {
			var res = Module.ccall('xmmsc_medialib_set_property_int', 'number', ['number', 'number', 'string', 'string', 'number'], [_xc, entry, source, key, value]);
			return promise_from_result(res);
		};

		this.medialib_remove_property = function(entry, source, key) {
			var res = Module.ccall('xmmsc_medialib_remove_property', 'number', ['number', 'number', 'string', 'string'], [_xc, entry, source, key]);
			return promise_from_result(res);
		};

		this.medialib_move_entry = function(entry, url) {
			var res = Module.ccall('xmmsc_medialib_move_entry', 'number', ['number', 'number', 'string'], [_xc, entry, url]);
			return promise_from_result(res);
		};

		this.medialib_add_entry = function(url) {
			var res = Module.ccall('xmmsc_medialib_add_entry', 'number', ['number', 'string'], [_xc, url]);
			return promise_from_result(res);
		};


		this.broadcast_medialib_entry_added = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_medialib_entry_added', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};

		this.broadcast_medialib_entry_changed = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_medialib_entry_changed', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};

		this.broadcast_medialib_entry_removed = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_medialib_entry_removed', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};



		this.collection_get = function(name, name_space) {
			var res = Module.ccall('xmmsc_coll_get', 'number', ['number', 'string', 'string'], [_xc, name, name_space]);
			return promise_from_result(res);
		};

		this.collection_list = function(name_space) {
			var res = Module.ccall('xmmsc_coll_list', 'number', ['number', 'string'], [_xc, name_space]);
			return promise_from_result(res);
		};

		// failed to generate save for collection

		this.collection_remove = function(name, name_space) {
			var res = Module.ccall('xmmsc_coll_remove', 'number', ['number', 'string', 'string'], [_xc, name, name_space]);
			return promise_from_result(res);
		};

		this.collection_find = function(entry, name_space) {
			var res = Module.ccall('xmmsc_coll_find', 'number', ['number', 'number', 'string'], [_xc, entry, name_space]);
			return promise_from_result(res);
		};

		this.collection_rename = function(original_name, new_name, name_space) {
			var res = Module.ccall('xmmsc_coll_rename', 'number', ['number', 'string', 'string', 'string'], [_xc, original_name, new_name, name_space]);
			return promise_from_result(res);
		};

		this.collection_query = function(collection, fetch) {
			collection = xmmsv_from_jsobj(collection);
			fetch = xmmsv_from_jsobj(fetch);
			var res = Module.ccall('xmmsc_coll_query', 'number', ['number', 'number', 'number'], [_xc, collection, fetch]);
			_xmmsv_unref(collection);
			_xmmsv_unref(fetch);
			return promise_from_result(res);
		};

		// failed to generate query_infos for collection

		this.collection_idlist_from_playlist = function(path) {
			var res = Module.ccall('xmmsc_coll_idlist_from_playlist', 'number', ['number', 'string'], [_xc, path]);
			return promise_from_result(res);
		};


		this.broadcast_collection_changed = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_collection_changed', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};



		this.visualization_query_version = function() {
			var res = Module.ccall('xmmsc_visualization_query_version', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.visualization_register = function() {
			var res = Module.ccall('xmmsc_visualization_register', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};

		this.visualization_init_shm = function(id, shm_id) {
			var res = Module.ccall('xmmsc_visualization_init_shm', 'number', ['number', 'number', 'string'], [_xc, id, shm_id]);
			return promise_from_result(res);
		};

		this.visualization_init_udp = function(id) {
			var res = Module.ccall('xmmsc_visualization_init_udp', 'number', ['number', 'number'], [_xc, id]);
			return promise_from_result(res);
		};

		this.visualization_set_property = function(id, key, value) {
			var res = Module.ccall('xmmsc_visualization_set_property', 'number', ['number', 'number', 'string', 'string'], [_xc, id, key, value]);
			return promise_from_result(res);
		};

		this.visualization_set_properties = function(id, properties) {
			properties = xmmsv_from_jsobj(properties);
			var res = Module.ccall('xmmsc_visualization_set_properties', 'number', ['number', 'number', 'number'], [_xc, id, properties]);
			_xmmsv_unref(properties);
			return promise_from_result(res);
		};

		this.visualization_shutdown = function(id) {
			var res = Module.ccall('xmmsc_visualization_shutdown', 'number', ['number', 'number'], [_xc, id]);
			return promise_from_result(res);
		};





		this.broadcast_mediainfo_reader_status = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_mediainfo_reader_status', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};


		this.signal_mediainfo_reader_unindexed = function(callback) {
			var res = Module.ccall('xmmsc_signal_mediainfo_reader_unindexed', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};


		this.xform_browse = function(url) {
			var res = Module.ccall('xmmsc_xform_browse', 'number', ['number', 'string'], [_xc, url]);
			return promise_from_result(res);
		};




		this.bindata_retrieve = function(hash) {
			var res = Module.ccall('xmmsc_bindata_retrieve', 'number', ['number', 'string'], [_xc, hash]);
			return promise_from_result(res);
		};

		this.bindata_add = function(raw_data) {
			raw_data = xmmsv_from_jsobj(raw_data);
			var res = Module.ccall('xmmsc_bindata_add', 'number', ['number', 'number'], [_xc, raw_data]);
			_xmmsv_unref(raw_data);
			return promise_from_result(res);
		};

		this.bindata_remove = function(hash) {
			var res = Module.ccall('xmmsc_bindata_remove', 'number', ['number', 'string'], [_xc, hash]);
			return promise_from_result(res);
		};

		this.bindata_list = function() {
			var res = Module.ccall('xmmsc_bindata_list', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};




		this.coll_sync = function() {
			var res = Module.ccall('xmmsc_coll_sync', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};




		this.courier_send_message = function(dest, reply_policy, payload) {
			payload = xmmsv_from_jsobj(payload);
			var res = Module.ccall('xmmsc_courier_send_message', 'number', ['number', 'number', 'number', 'number'], [_xc, dest, reply_policy, payload]);
			_xmmsv_unref(payload);
			return promise_from_result(res);
		};

		this.courier_reply = function(msgid, reply_policy, payload) {
			payload = xmmsv_from_jsobj(payload);
			var res = Module.ccall('xmmsc_courier_reply', 'number', ['number', 'number', 'number', 'number'], [_xc, msgid, reply_policy, payload]);
			_xmmsv_unref(payload);
			return promise_from_result(res);
		};

		this.courier_get_connected_clients = function() {
			var res = Module.ccall('xmmsc_courier_get_connected_clients', 'number', ['number'], [_xc]);
			return promise_from_result(res);
		};


		this.broadcast_courier_message = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_courier_message', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};




		this.broadcast_ipc_manager_client_connected = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_ipc_manager_client_connected', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};

		this.broadcast_ipc_manager_client_disconnected = function(callback) {
			var res = Module.ccall('xmmsc_broadcast_ipc_manager_client_disconnected', 'number', ['number'], [_xc]);
			add_callback_for_result(res, callback);
		};


		// some hand-implemented methods

		this.collection_save = function(collection, name, namespace) {
		    collection = xmmsv_from_jsobj(collection);
		    var res = Module.ccall('xmmsc_collection_save', 'number', ['number', 'number', 'string', 'string'], [_xc, collection, name, name_space]);
		    _xmmsv_unref(collection);
		    return promise_from_result(res);
		}

		this.collection_query_infos = function(collection, order, lim_start, lim_len, fetch, group) {
		    collection = xmmsv_from_jsobj(collection);
		    order = xmmsv_from_jsobj(order);
		    fetch = xmmsv_from_jsobj(fetch);
		    group = xmmsv_from_jsobj(group);
		    var res = Module.ccall('xmmsc_coll_query_infos', 'number', ['number', 'number', 'number', 'number', 'number', 'number', 'number'], [_xc, collection, order, lim_start, lim_len, fetch, group]);
		    _xmmsv_unref(collection);
		    _xmmsv_unref(order);
		    _xmmsv_unref(fetch);
		    _xmmsv_unref(group);
		    return promise_from_result(res);
		}

		this.collection_query_ids = function(collection, order, lim_start, lim_len) {
		    collection = xmmsv_from_jsobj(collection);
		    order = xmmsv_from_jsobj(order);
		    var res = Module.ccall('xmmsc_coll_query_ids', 'number', ['number', 'number', 'number', 'number', 'number'], [_xc, collection, order, lim_start, lim_len]);
		    _xmmsv_unref(collection);
		    _xmmsv_unref(order);
		    return promise_from_result(res);
		}

		this.playlist_insert_id = function(playlist, pos, id) {
		  var res = Module.ccall('xmmsc_playlist_insert_id', 'number', ['number', 'number', 'number', 'number'], [_xc, playlist, pos, id]);
		  return promise_from_result(res);
		}

		this.playlist_clear = function(playlist) {
		  var res = Module.ccall('xmmsc_playlist_clear', 'number', ['number', 'number'], [_xc, playlist]);
		  return promise_from_result(res);
		}
	}
	xmmsclient.XMMS2 = XMMS2
})(this);
